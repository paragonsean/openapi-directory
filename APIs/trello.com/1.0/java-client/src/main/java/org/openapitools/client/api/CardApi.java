/*
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActionsComments;
import org.openapitools.client.model.Cards;
import org.openapitools.client.model.CardsActionsComments;
import org.openapitools.client.model.CardsAttachments;
import org.openapitools.client.model.CardsChecklistCheckItem;
import org.openapitools.client.model.CardsChecklistCheckItemName;
import org.openapitools.client.model.CardsChecklistCheckItemPos;
import org.openapitools.client.model.CardsChecklistCheckItemState;
import org.openapitools.client.model.CardsChecklistIdChecklistCurrentCheckItem;
import org.openapitools.client.model.CardsChecklists;
import org.openapitools.client.model.CardsClosed;
import org.openapitools.client.model.CardsDesc;
import org.openapitools.client.model.CardsDue;
import org.openapitools.client.model.CardsIdAttachmentCover;
import org.openapitools.client.model.CardsIdBoard;
import org.openapitools.client.model.CardsIdLabels;
import org.openapitools.client.model.CardsIdList;
import org.openapitools.client.model.CardsIdMembers;
import org.openapitools.client.model.CardsLabels;
import org.openapitools.client.model.CardsMembersVoted;
import org.openapitools.client.model.CardsName;
import org.openapitools.client.model.CardsPos;
import org.openapitools.client.model.CardsStickers;
import org.openapitools.client.model.CardsSubscribed;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CardApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CardApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CardApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addCards
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cards Attributes of \&quot;Cards\&quot; to be added. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCardsCall(String key, String token, Cards cards, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cards;

        // create path and map variables
        String localVarPath = "/cards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCardsValidateBeforeCall(String key, String token, Cards cards, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addCards(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addCards(Async)");
        }

        // verify the required parameter 'cards' is set
        if (cards == null) {
            throw new ApiException("Missing the required parameter 'cards' when calling addCards(Async)");
        }

        return addCardsCall(key, token, cards, _callback);

    }

    /**
     * addCards()
     * 
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cards Attributes of \&quot;Cards\&quot; to be added. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void addCards(String key, String token, Cards cards) throws ApiException {
        addCardsWithHttpInfo(key, token, cards);
    }

    /**
     * addCards()
     * 
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cards Attributes of \&quot;Cards\&quot; to be added. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addCardsWithHttpInfo(String key, String token, Cards cards) throws ApiException {
        okhttp3.Call localVarCall = addCardsValidateBeforeCall(key, token, cards, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * addCards() (asynchronously)
     * 
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cards Attributes of \&quot;Cards\&quot; to be added. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCardsAsync(String key, String token, Cards cards, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCardsValidateBeforeCall(key, token, cards, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addCardsActionsCommentsByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param actionsComments Attributes of \&quot;Actions Comments\&quot; to be added. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCardsActionsCommentsByIdCardCall(String idCard, String key, String token, ActionsComments actionsComments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionsComments;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/actions/comments"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCardsActionsCommentsByIdCardValidateBeforeCall(String idCard, String key, String token, ActionsComments actionsComments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling addCardsActionsCommentsByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addCardsActionsCommentsByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addCardsActionsCommentsByIdCard(Async)");
        }

        // verify the required parameter 'actionsComments' is set
        if (actionsComments == null) {
            throw new ApiException("Missing the required parameter 'actionsComments' when calling addCardsActionsCommentsByIdCard(Async)");
        }

        return addCardsActionsCommentsByIdCardCall(idCard, key, token, actionsComments, _callback);

    }

    /**
     * addCardsActionsCommentsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param actionsComments Attributes of \&quot;Actions Comments\&quot; to be added. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void addCardsActionsCommentsByIdCard(String idCard, String key, String token, ActionsComments actionsComments) throws ApiException {
        addCardsActionsCommentsByIdCardWithHttpInfo(idCard, key, token, actionsComments);
    }

    /**
     * addCardsActionsCommentsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param actionsComments Attributes of \&quot;Actions Comments\&quot; to be added. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addCardsActionsCommentsByIdCardWithHttpInfo(String idCard, String key, String token, ActionsComments actionsComments) throws ApiException {
        okhttp3.Call localVarCall = addCardsActionsCommentsByIdCardValidateBeforeCall(idCard, key, token, actionsComments, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * addCardsActionsCommentsByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param actionsComments Attributes of \&quot;Actions Comments\&quot; to be added. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCardsActionsCommentsByIdCardAsync(String idCard, String key, String token, ActionsComments actionsComments, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCardsActionsCommentsByIdCardValidateBeforeCall(idCard, key, token, actionsComments, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addCardsAttachmentsByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsAttachments Attributes of \&quot;Cards Attachments\&quot; to be added. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCardsAttachmentsByIdCardCall(String idCard, String key, String token, CardsAttachments cardsAttachments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsAttachments;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/attachments"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCardsAttachmentsByIdCardValidateBeforeCall(String idCard, String key, String token, CardsAttachments cardsAttachments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling addCardsAttachmentsByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addCardsAttachmentsByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addCardsAttachmentsByIdCard(Async)");
        }

        // verify the required parameter 'cardsAttachments' is set
        if (cardsAttachments == null) {
            throw new ApiException("Missing the required parameter 'cardsAttachments' when calling addCardsAttachmentsByIdCard(Async)");
        }

        return addCardsAttachmentsByIdCardCall(idCard, key, token, cardsAttachments, _callback);

    }

    /**
     * addCardsAttachmentsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsAttachments Attributes of \&quot;Cards Attachments\&quot; to be added. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void addCardsAttachmentsByIdCard(String idCard, String key, String token, CardsAttachments cardsAttachments) throws ApiException {
        addCardsAttachmentsByIdCardWithHttpInfo(idCard, key, token, cardsAttachments);
    }

    /**
     * addCardsAttachmentsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsAttachments Attributes of \&quot;Cards Attachments\&quot; to be added. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addCardsAttachmentsByIdCardWithHttpInfo(String idCard, String key, String token, CardsAttachments cardsAttachments) throws ApiException {
        okhttp3.Call localVarCall = addCardsAttachmentsByIdCardValidateBeforeCall(idCard, key, token, cardsAttachments, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * addCardsAttachmentsByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsAttachments Attributes of \&quot;Cards Attachments\&quot; to be added. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCardsAttachmentsByIdCardAsync(String idCard, String key, String token, CardsAttachments cardsAttachments, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCardsAttachmentsByIdCardValidateBeforeCall(idCard, key, token, cardsAttachments, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addCardsChecklistCheckItemByIdCardByIdChecklist
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsChecklistCheckItem Attributes of \&quot;Cards Checklist Check Item\&quot; to be added. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCardsChecklistCheckItemByIdCardByIdChecklistCall(String idCard, String idChecklist, String key, String token, CardsChecklistCheckItem cardsChecklistCheckItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsChecklistCheckItem;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/checklist/{idChecklist}/checkItem"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCardsChecklistCheckItemByIdCardByIdChecklistValidateBeforeCall(String idCard, String idChecklist, String key, String token, CardsChecklistCheckItem cardsChecklistCheckItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling addCardsChecklistCheckItemByIdCardByIdChecklist(Async)");
        }

        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling addCardsChecklistCheckItemByIdCardByIdChecklist(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addCardsChecklistCheckItemByIdCardByIdChecklist(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addCardsChecklistCheckItemByIdCardByIdChecklist(Async)");
        }

        // verify the required parameter 'cardsChecklistCheckItem' is set
        if (cardsChecklistCheckItem == null) {
            throw new ApiException("Missing the required parameter 'cardsChecklistCheckItem' when calling addCardsChecklistCheckItemByIdCardByIdChecklist(Async)");
        }

        return addCardsChecklistCheckItemByIdCardByIdChecklistCall(idCard, idChecklist, key, token, cardsChecklistCheckItem, _callback);

    }

    /**
     * addCardsChecklistCheckItemByIdCardByIdChecklist()
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsChecklistCheckItem Attributes of \&quot;Cards Checklist Check Item\&quot; to be added. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void addCardsChecklistCheckItemByIdCardByIdChecklist(String idCard, String idChecklist, String key, String token, CardsChecklistCheckItem cardsChecklistCheckItem) throws ApiException {
        addCardsChecklistCheckItemByIdCardByIdChecklistWithHttpInfo(idCard, idChecklist, key, token, cardsChecklistCheckItem);
    }

    /**
     * addCardsChecklistCheckItemByIdCardByIdChecklist()
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsChecklistCheckItem Attributes of \&quot;Cards Checklist Check Item\&quot; to be added. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addCardsChecklistCheckItemByIdCardByIdChecklistWithHttpInfo(String idCard, String idChecklist, String key, String token, CardsChecklistCheckItem cardsChecklistCheckItem) throws ApiException {
        okhttp3.Call localVarCall = addCardsChecklistCheckItemByIdCardByIdChecklistValidateBeforeCall(idCard, idChecklist, key, token, cardsChecklistCheckItem, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * addCardsChecklistCheckItemByIdCardByIdChecklist() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsChecklistCheckItem Attributes of \&quot;Cards Checklist Check Item\&quot; to be added. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCardsChecklistCheckItemByIdCardByIdChecklistAsync(String idCard, String idChecklist, String key, String token, CardsChecklistCheckItem cardsChecklistCheckItem, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCardsChecklistCheckItemByIdCardByIdChecklistValidateBeforeCall(idCard, idChecklist, key, token, cardsChecklistCheckItem, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param idCheckItem idCheckItem (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItemCall(String idCard, String idChecklist, String idCheckItem, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/convertToCard"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()))
            .replace("{" + "idCheckItem" + "}", localVarApiClient.escapeString(idCheckItem.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItemValidateBeforeCall(String idCard, String idChecklist, String idCheckItem, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem(Async)");
        }

        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem(Async)");
        }

        // verify the required parameter 'idCheckItem' is set
        if (idCheckItem == null) {
            throw new ApiException("Missing the required parameter 'idCheckItem' when calling addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem(Async)");
        }

        return addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItemCall(idCard, idChecklist, idCheckItem, key, token, _callback);

    }

    /**
     * addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem()
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param idCheckItem idCheckItem (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem(String idCard, String idChecklist, String idCheckItem, String key, String token) throws ApiException {
        addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItemWithHttpInfo(idCard, idChecklist, idCheckItem, key, token);
    }

    /**
     * addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem()
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param idCheckItem idCheckItem (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItemWithHttpInfo(String idCard, String idChecklist, String idCheckItem, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItemValidateBeforeCall(idCard, idChecklist, idCheckItem, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param idCheckItem idCheckItem (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItemAsync(String idCard, String idChecklist, String idCheckItem, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItemValidateBeforeCall(idCard, idChecklist, idCheckItem, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addCardsChecklistsByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsChecklists Attributes of \&quot;Cards Checklists\&quot; to be added. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCardsChecklistsByIdCardCall(String idCard, String key, String token, CardsChecklists cardsChecklists, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsChecklists;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/checklists"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCardsChecklistsByIdCardValidateBeforeCall(String idCard, String key, String token, CardsChecklists cardsChecklists, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling addCardsChecklistsByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addCardsChecklistsByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addCardsChecklistsByIdCard(Async)");
        }

        // verify the required parameter 'cardsChecklists' is set
        if (cardsChecklists == null) {
            throw new ApiException("Missing the required parameter 'cardsChecklists' when calling addCardsChecklistsByIdCard(Async)");
        }

        return addCardsChecklistsByIdCardCall(idCard, key, token, cardsChecklists, _callback);

    }

    /**
     * addCardsChecklistsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsChecklists Attributes of \&quot;Cards Checklists\&quot; to be added. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void addCardsChecklistsByIdCard(String idCard, String key, String token, CardsChecklists cardsChecklists) throws ApiException {
        addCardsChecklistsByIdCardWithHttpInfo(idCard, key, token, cardsChecklists);
    }

    /**
     * addCardsChecklistsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsChecklists Attributes of \&quot;Cards Checklists\&quot; to be added. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addCardsChecklistsByIdCardWithHttpInfo(String idCard, String key, String token, CardsChecklists cardsChecklists) throws ApiException {
        okhttp3.Call localVarCall = addCardsChecklistsByIdCardValidateBeforeCall(idCard, key, token, cardsChecklists, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * addCardsChecklistsByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsChecklists Attributes of \&quot;Cards Checklists\&quot; to be added. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCardsChecklistsByIdCardAsync(String idCard, String key, String token, CardsChecklists cardsChecklists, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCardsChecklistsByIdCardValidateBeforeCall(idCard, key, token, cardsChecklists, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addCardsIdLabelsByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsIdLabels Attributes of \&quot;Cards Id Labels\&quot; to be added. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCardsIdLabelsByIdCardCall(String idCard, String key, String token, CardsIdLabels cardsIdLabels, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsIdLabels;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/idLabels"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCardsIdLabelsByIdCardValidateBeforeCall(String idCard, String key, String token, CardsIdLabels cardsIdLabels, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling addCardsIdLabelsByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addCardsIdLabelsByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addCardsIdLabelsByIdCard(Async)");
        }

        // verify the required parameter 'cardsIdLabels' is set
        if (cardsIdLabels == null) {
            throw new ApiException("Missing the required parameter 'cardsIdLabels' when calling addCardsIdLabelsByIdCard(Async)");
        }

        return addCardsIdLabelsByIdCardCall(idCard, key, token, cardsIdLabels, _callback);

    }

    /**
     * addCardsIdLabelsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsIdLabels Attributes of \&quot;Cards Id Labels\&quot; to be added. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void addCardsIdLabelsByIdCard(String idCard, String key, String token, CardsIdLabels cardsIdLabels) throws ApiException {
        addCardsIdLabelsByIdCardWithHttpInfo(idCard, key, token, cardsIdLabels);
    }

    /**
     * addCardsIdLabelsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsIdLabels Attributes of \&quot;Cards Id Labels\&quot; to be added. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addCardsIdLabelsByIdCardWithHttpInfo(String idCard, String key, String token, CardsIdLabels cardsIdLabels) throws ApiException {
        okhttp3.Call localVarCall = addCardsIdLabelsByIdCardValidateBeforeCall(idCard, key, token, cardsIdLabels, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * addCardsIdLabelsByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsIdLabels Attributes of \&quot;Cards Id Labels\&quot; to be added. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCardsIdLabelsByIdCardAsync(String idCard, String key, String token, CardsIdLabels cardsIdLabels, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCardsIdLabelsByIdCardValidateBeforeCall(idCard, key, token, cardsIdLabels, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addCardsIdMembersByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsIdMembers Attributes of \&quot;Cards Id Members\&quot; to be added. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCardsIdMembersByIdCardCall(String idCard, String key, String token, CardsIdMembers cardsIdMembers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsIdMembers;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/idMembers"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCardsIdMembersByIdCardValidateBeforeCall(String idCard, String key, String token, CardsIdMembers cardsIdMembers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling addCardsIdMembersByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addCardsIdMembersByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addCardsIdMembersByIdCard(Async)");
        }

        // verify the required parameter 'cardsIdMembers' is set
        if (cardsIdMembers == null) {
            throw new ApiException("Missing the required parameter 'cardsIdMembers' when calling addCardsIdMembersByIdCard(Async)");
        }

        return addCardsIdMembersByIdCardCall(idCard, key, token, cardsIdMembers, _callback);

    }

    /**
     * addCardsIdMembersByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsIdMembers Attributes of \&quot;Cards Id Members\&quot; to be added. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void addCardsIdMembersByIdCard(String idCard, String key, String token, CardsIdMembers cardsIdMembers) throws ApiException {
        addCardsIdMembersByIdCardWithHttpInfo(idCard, key, token, cardsIdMembers);
    }

    /**
     * addCardsIdMembersByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsIdMembers Attributes of \&quot;Cards Id Members\&quot; to be added. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addCardsIdMembersByIdCardWithHttpInfo(String idCard, String key, String token, CardsIdMembers cardsIdMembers) throws ApiException {
        okhttp3.Call localVarCall = addCardsIdMembersByIdCardValidateBeforeCall(idCard, key, token, cardsIdMembers, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * addCardsIdMembersByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsIdMembers Attributes of \&quot;Cards Id Members\&quot; to be added. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCardsIdMembersByIdCardAsync(String idCard, String key, String token, CardsIdMembers cardsIdMembers, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCardsIdMembersByIdCardValidateBeforeCall(idCard, key, token, cardsIdMembers, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addCardsLabelsByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsLabels Attributes of \&quot;Cards Labels\&quot; to be added. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCardsLabelsByIdCardCall(String idCard, String key, String token, CardsLabels cardsLabels, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsLabels;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/labels"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCardsLabelsByIdCardValidateBeforeCall(String idCard, String key, String token, CardsLabels cardsLabels, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling addCardsLabelsByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addCardsLabelsByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addCardsLabelsByIdCard(Async)");
        }

        // verify the required parameter 'cardsLabels' is set
        if (cardsLabels == null) {
            throw new ApiException("Missing the required parameter 'cardsLabels' when calling addCardsLabelsByIdCard(Async)");
        }

        return addCardsLabelsByIdCardCall(idCard, key, token, cardsLabels, _callback);

    }

    /**
     * addCardsLabelsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsLabels Attributes of \&quot;Cards Labels\&quot; to be added. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void addCardsLabelsByIdCard(String idCard, String key, String token, CardsLabels cardsLabels) throws ApiException {
        addCardsLabelsByIdCardWithHttpInfo(idCard, key, token, cardsLabels);
    }

    /**
     * addCardsLabelsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsLabels Attributes of \&quot;Cards Labels\&quot; to be added. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addCardsLabelsByIdCardWithHttpInfo(String idCard, String key, String token, CardsLabels cardsLabels) throws ApiException {
        okhttp3.Call localVarCall = addCardsLabelsByIdCardValidateBeforeCall(idCard, key, token, cardsLabels, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * addCardsLabelsByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsLabels Attributes of \&quot;Cards Labels\&quot; to be added. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCardsLabelsByIdCardAsync(String idCard, String key, String token, CardsLabels cardsLabels, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCardsLabelsByIdCardValidateBeforeCall(idCard, key, token, cardsLabels, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addCardsMarkAssociatedNotificationsReadByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCardsMarkAssociatedNotificationsReadByIdCardCall(String idCard, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/markAssociatedNotificationsRead"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCardsMarkAssociatedNotificationsReadByIdCardValidateBeforeCall(String idCard, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling addCardsMarkAssociatedNotificationsReadByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addCardsMarkAssociatedNotificationsReadByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addCardsMarkAssociatedNotificationsReadByIdCard(Async)");
        }

        return addCardsMarkAssociatedNotificationsReadByIdCardCall(idCard, key, token, _callback);

    }

    /**
     * addCardsMarkAssociatedNotificationsReadByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void addCardsMarkAssociatedNotificationsReadByIdCard(String idCard, String key, String token) throws ApiException {
        addCardsMarkAssociatedNotificationsReadByIdCardWithHttpInfo(idCard, key, token);
    }

    /**
     * addCardsMarkAssociatedNotificationsReadByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addCardsMarkAssociatedNotificationsReadByIdCardWithHttpInfo(String idCard, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = addCardsMarkAssociatedNotificationsReadByIdCardValidateBeforeCall(idCard, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * addCardsMarkAssociatedNotificationsReadByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCardsMarkAssociatedNotificationsReadByIdCardAsync(String idCard, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCardsMarkAssociatedNotificationsReadByIdCardValidateBeforeCall(idCard, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addCardsMembersVotedByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsMembersVoted Attributes of \&quot;Cards Members Voted\&quot; to be added. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCardsMembersVotedByIdCardCall(String idCard, String key, String token, CardsMembersVoted cardsMembersVoted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsMembersVoted;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/membersVoted"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCardsMembersVotedByIdCardValidateBeforeCall(String idCard, String key, String token, CardsMembersVoted cardsMembersVoted, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling addCardsMembersVotedByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addCardsMembersVotedByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addCardsMembersVotedByIdCard(Async)");
        }

        // verify the required parameter 'cardsMembersVoted' is set
        if (cardsMembersVoted == null) {
            throw new ApiException("Missing the required parameter 'cardsMembersVoted' when calling addCardsMembersVotedByIdCard(Async)");
        }

        return addCardsMembersVotedByIdCardCall(idCard, key, token, cardsMembersVoted, _callback);

    }

    /**
     * addCardsMembersVotedByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsMembersVoted Attributes of \&quot;Cards Members Voted\&quot; to be added. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void addCardsMembersVotedByIdCard(String idCard, String key, String token, CardsMembersVoted cardsMembersVoted) throws ApiException {
        addCardsMembersVotedByIdCardWithHttpInfo(idCard, key, token, cardsMembersVoted);
    }

    /**
     * addCardsMembersVotedByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsMembersVoted Attributes of \&quot;Cards Members Voted\&quot; to be added. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addCardsMembersVotedByIdCardWithHttpInfo(String idCard, String key, String token, CardsMembersVoted cardsMembersVoted) throws ApiException {
        okhttp3.Call localVarCall = addCardsMembersVotedByIdCardValidateBeforeCall(idCard, key, token, cardsMembersVoted, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * addCardsMembersVotedByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsMembersVoted Attributes of \&quot;Cards Members Voted\&quot; to be added. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCardsMembersVotedByIdCardAsync(String idCard, String key, String token, CardsMembersVoted cardsMembersVoted, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCardsMembersVotedByIdCardValidateBeforeCall(idCard, key, token, cardsMembersVoted, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addCardsStickersByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsStickers Attributes of \&quot;Cards Stickers\&quot; to be added. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCardsStickersByIdCardCall(String idCard, String key, String token, CardsStickers cardsStickers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsStickers;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/stickers"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCardsStickersByIdCardValidateBeforeCall(String idCard, String key, String token, CardsStickers cardsStickers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling addCardsStickersByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addCardsStickersByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addCardsStickersByIdCard(Async)");
        }

        // verify the required parameter 'cardsStickers' is set
        if (cardsStickers == null) {
            throw new ApiException("Missing the required parameter 'cardsStickers' when calling addCardsStickersByIdCard(Async)");
        }

        return addCardsStickersByIdCardCall(idCard, key, token, cardsStickers, _callback);

    }

    /**
     * addCardsStickersByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsStickers Attributes of \&quot;Cards Stickers\&quot; to be added. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void addCardsStickersByIdCard(String idCard, String key, String token, CardsStickers cardsStickers) throws ApiException {
        addCardsStickersByIdCardWithHttpInfo(idCard, key, token, cardsStickers);
    }

    /**
     * addCardsStickersByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsStickers Attributes of \&quot;Cards Stickers\&quot; to be added. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addCardsStickersByIdCardWithHttpInfo(String idCard, String key, String token, CardsStickers cardsStickers) throws ApiException {
        okhttp3.Call localVarCall = addCardsStickersByIdCardValidateBeforeCall(idCard, key, token, cardsStickers, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * addCardsStickersByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsStickers Attributes of \&quot;Cards Stickers\&quot; to be added. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCardsStickersByIdCardAsync(String idCard, String key, String token, CardsStickers cardsStickers, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCardsStickersByIdCardValidateBeforeCall(idCard, key, token, cardsStickers, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCardsActionsCommentsByIdCardByIdAction
     * @param idCard card id or shortlink (required)
     * @param idAction idAction (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCardsActionsCommentsByIdCardByIdActionCall(String idCard, String idAction, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/actions/{idAction}/comments"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idAction" + "}", localVarApiClient.escapeString(idAction.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCardsActionsCommentsByIdCardByIdActionValidateBeforeCall(String idCard, String idAction, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling deleteCardsActionsCommentsByIdCardByIdAction(Async)");
        }

        // verify the required parameter 'idAction' is set
        if (idAction == null) {
            throw new ApiException("Missing the required parameter 'idAction' when calling deleteCardsActionsCommentsByIdCardByIdAction(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteCardsActionsCommentsByIdCardByIdAction(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteCardsActionsCommentsByIdCardByIdAction(Async)");
        }

        return deleteCardsActionsCommentsByIdCardByIdActionCall(idCard, idAction, key, token, _callback);

    }

    /**
     * deleteCardsActionsCommentsByIdCardByIdAction()
     * This can only be done by the original author of the comment, or someone with higher permissions than the original author.
     * @param idCard card id or shortlink (required)
     * @param idAction idAction (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCardsActionsCommentsByIdCardByIdAction(String idCard, String idAction, String key, String token) throws ApiException {
        deleteCardsActionsCommentsByIdCardByIdActionWithHttpInfo(idCard, idAction, key, token);
    }

    /**
     * deleteCardsActionsCommentsByIdCardByIdAction()
     * This can only be done by the original author of the comment, or someone with higher permissions than the original author.
     * @param idCard card id or shortlink (required)
     * @param idAction idAction (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCardsActionsCommentsByIdCardByIdActionWithHttpInfo(String idCard, String idAction, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = deleteCardsActionsCommentsByIdCardByIdActionValidateBeforeCall(idCard, idAction, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * deleteCardsActionsCommentsByIdCardByIdAction() (asynchronously)
     * This can only be done by the original author of the comment, or someone with higher permissions than the original author.
     * @param idCard card id or shortlink (required)
     * @param idAction idAction (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCardsActionsCommentsByIdCardByIdActionAsync(String idCard, String idAction, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCardsActionsCommentsByIdCardByIdActionValidateBeforeCall(idCard, idAction, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCardsAttachmentsByIdCardByIdAttachment
     * @param idCard card id or shortlink (required)
     * @param idAttachment idAttachment (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCardsAttachmentsByIdCardByIdAttachmentCall(String idCard, String idAttachment, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/attachments/{idAttachment}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idAttachment" + "}", localVarApiClient.escapeString(idAttachment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCardsAttachmentsByIdCardByIdAttachmentValidateBeforeCall(String idCard, String idAttachment, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling deleteCardsAttachmentsByIdCardByIdAttachment(Async)");
        }

        // verify the required parameter 'idAttachment' is set
        if (idAttachment == null) {
            throw new ApiException("Missing the required parameter 'idAttachment' when calling deleteCardsAttachmentsByIdCardByIdAttachment(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteCardsAttachmentsByIdCardByIdAttachment(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteCardsAttachmentsByIdCardByIdAttachment(Async)");
        }

        return deleteCardsAttachmentsByIdCardByIdAttachmentCall(idCard, idAttachment, key, token, _callback);

    }

    /**
     * deleteCardsAttachmentsByIdCardByIdAttachment()
     * 
     * @param idCard card id or shortlink (required)
     * @param idAttachment idAttachment (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCardsAttachmentsByIdCardByIdAttachment(String idCard, String idAttachment, String key, String token) throws ApiException {
        deleteCardsAttachmentsByIdCardByIdAttachmentWithHttpInfo(idCard, idAttachment, key, token);
    }

    /**
     * deleteCardsAttachmentsByIdCardByIdAttachment()
     * 
     * @param idCard card id or shortlink (required)
     * @param idAttachment idAttachment (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCardsAttachmentsByIdCardByIdAttachmentWithHttpInfo(String idCard, String idAttachment, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = deleteCardsAttachmentsByIdCardByIdAttachmentValidateBeforeCall(idCard, idAttachment, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * deleteCardsAttachmentsByIdCardByIdAttachment() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param idAttachment idAttachment (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCardsAttachmentsByIdCardByIdAttachmentAsync(String idCard, String idAttachment, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCardsAttachmentsByIdCardByIdAttachmentValidateBeforeCall(idCard, idAttachment, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCardsByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCardsByIdCardCall(String idCard, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCardsByIdCardValidateBeforeCall(String idCard, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling deleteCardsByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteCardsByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteCardsByIdCard(Async)");
        }

        return deleteCardsByIdCardCall(idCard, key, token, _callback);

    }

    /**
     * deleteCardsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCardsByIdCard(String idCard, String key, String token) throws ApiException {
        deleteCardsByIdCardWithHttpInfo(idCard, key, token);
    }

    /**
     * deleteCardsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCardsByIdCardWithHttpInfo(String idCard, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = deleteCardsByIdCardValidateBeforeCall(idCard, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * deleteCardsByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCardsByIdCardAsync(String idCard, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCardsByIdCardValidateBeforeCall(idCard, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param idCheckItem idCheckItem (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItemCall(String idCard, String idChecklist, String idCheckItem, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()))
            .replace("{" + "idCheckItem" + "}", localVarApiClient.escapeString(idCheckItem.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItemValidateBeforeCall(String idCard, String idChecklist, String idCheckItem, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem(Async)");
        }

        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem(Async)");
        }

        // verify the required parameter 'idCheckItem' is set
        if (idCheckItem == null) {
            throw new ApiException("Missing the required parameter 'idCheckItem' when calling deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem(Async)");
        }

        return deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItemCall(idCard, idChecklist, idCheckItem, key, token, _callback);

    }

    /**
     * deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem()
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param idCheckItem idCheckItem (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem(String idCard, String idChecklist, String idCheckItem, String key, String token) throws ApiException {
        deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItemWithHttpInfo(idCard, idChecklist, idCheckItem, key, token);
    }

    /**
     * deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem()
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param idCheckItem idCheckItem (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItemWithHttpInfo(String idCard, String idChecklist, String idCheckItem, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItemValidateBeforeCall(idCard, idChecklist, idCheckItem, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param idCheckItem idCheckItem (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItemAsync(String idCard, String idChecklist, String idCheckItem, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItemValidateBeforeCall(idCard, idChecklist, idCheckItem, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCardsChecklistsByIdCardByIdChecklist
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCardsChecklistsByIdCardByIdChecklistCall(String idCard, String idChecklist, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/checklists/{idChecklist}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCardsChecklistsByIdCardByIdChecklistValidateBeforeCall(String idCard, String idChecklist, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling deleteCardsChecklistsByIdCardByIdChecklist(Async)");
        }

        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling deleteCardsChecklistsByIdCardByIdChecklist(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteCardsChecklistsByIdCardByIdChecklist(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteCardsChecklistsByIdCardByIdChecklist(Async)");
        }

        return deleteCardsChecklistsByIdCardByIdChecklistCall(idCard, idChecklist, key, token, _callback);

    }

    /**
     * deleteCardsChecklistsByIdCardByIdChecklist()
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCardsChecklistsByIdCardByIdChecklist(String idCard, String idChecklist, String key, String token) throws ApiException {
        deleteCardsChecklistsByIdCardByIdChecklistWithHttpInfo(idCard, idChecklist, key, token);
    }

    /**
     * deleteCardsChecklistsByIdCardByIdChecklist()
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCardsChecklistsByIdCardByIdChecklistWithHttpInfo(String idCard, String idChecklist, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = deleteCardsChecklistsByIdCardByIdChecklistValidateBeforeCall(idCard, idChecklist, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * deleteCardsChecklistsByIdCardByIdChecklist() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCardsChecklistsByIdCardByIdChecklistAsync(String idCard, String idChecklist, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCardsChecklistsByIdCardByIdChecklistValidateBeforeCall(idCard, idChecklist, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCardsIdLabelsByIdCardByIdLabel
     * @param idCard card id or shortlink (required)
     * @param idLabel idLabel (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCardsIdLabelsByIdCardByIdLabelCall(String idCard, String idLabel, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/idLabels/{idLabel}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idLabel" + "}", localVarApiClient.escapeString(idLabel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCardsIdLabelsByIdCardByIdLabelValidateBeforeCall(String idCard, String idLabel, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling deleteCardsIdLabelsByIdCardByIdLabel(Async)");
        }

        // verify the required parameter 'idLabel' is set
        if (idLabel == null) {
            throw new ApiException("Missing the required parameter 'idLabel' when calling deleteCardsIdLabelsByIdCardByIdLabel(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteCardsIdLabelsByIdCardByIdLabel(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteCardsIdLabelsByIdCardByIdLabel(Async)");
        }

        return deleteCardsIdLabelsByIdCardByIdLabelCall(idCard, idLabel, key, token, _callback);

    }

    /**
     * deleteCardsIdLabelsByIdCardByIdLabel()
     * 
     * @param idCard card id or shortlink (required)
     * @param idLabel idLabel (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCardsIdLabelsByIdCardByIdLabel(String idCard, String idLabel, String key, String token) throws ApiException {
        deleteCardsIdLabelsByIdCardByIdLabelWithHttpInfo(idCard, idLabel, key, token);
    }

    /**
     * deleteCardsIdLabelsByIdCardByIdLabel()
     * 
     * @param idCard card id or shortlink (required)
     * @param idLabel idLabel (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCardsIdLabelsByIdCardByIdLabelWithHttpInfo(String idCard, String idLabel, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = deleteCardsIdLabelsByIdCardByIdLabelValidateBeforeCall(idCard, idLabel, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * deleteCardsIdLabelsByIdCardByIdLabel() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param idLabel idLabel (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCardsIdLabelsByIdCardByIdLabelAsync(String idCard, String idLabel, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCardsIdLabelsByIdCardByIdLabelValidateBeforeCall(idCard, idLabel, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCardsIdMembersByIdCardByIdMember
     * @param idCard card id or shortlink (required)
     * @param idMember idMember (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCardsIdMembersByIdCardByIdMemberCall(String idCard, String idMember, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/idMembers/{idMember}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCardsIdMembersByIdCardByIdMemberValidateBeforeCall(String idCard, String idMember, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling deleteCardsIdMembersByIdCardByIdMember(Async)");
        }

        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling deleteCardsIdMembersByIdCardByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteCardsIdMembersByIdCardByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteCardsIdMembersByIdCardByIdMember(Async)");
        }

        return deleteCardsIdMembersByIdCardByIdMemberCall(idCard, idMember, key, token, _callback);

    }

    /**
     * deleteCardsIdMembersByIdCardByIdMember()
     * 
     * @param idCard card id or shortlink (required)
     * @param idMember idMember (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCardsIdMembersByIdCardByIdMember(String idCard, String idMember, String key, String token) throws ApiException {
        deleteCardsIdMembersByIdCardByIdMemberWithHttpInfo(idCard, idMember, key, token);
    }

    /**
     * deleteCardsIdMembersByIdCardByIdMember()
     * 
     * @param idCard card id or shortlink (required)
     * @param idMember idMember (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCardsIdMembersByIdCardByIdMemberWithHttpInfo(String idCard, String idMember, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = deleteCardsIdMembersByIdCardByIdMemberValidateBeforeCall(idCard, idMember, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * deleteCardsIdMembersByIdCardByIdMember() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param idMember idMember (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCardsIdMembersByIdCardByIdMemberAsync(String idCard, String idMember, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCardsIdMembersByIdCardByIdMemberValidateBeforeCall(idCard, idMember, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCardsLabelsByIdCardByColor
     * @param idCard card id or shortlink (required)
     * @param color color (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCardsLabelsByIdCardByColorCall(String idCard, String color, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/labels/{color}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "color" + "}", localVarApiClient.escapeString(color.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCardsLabelsByIdCardByColorValidateBeforeCall(String idCard, String color, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling deleteCardsLabelsByIdCardByColor(Async)");
        }

        // verify the required parameter 'color' is set
        if (color == null) {
            throw new ApiException("Missing the required parameter 'color' when calling deleteCardsLabelsByIdCardByColor(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteCardsLabelsByIdCardByColor(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteCardsLabelsByIdCardByColor(Async)");
        }

        return deleteCardsLabelsByIdCardByColorCall(idCard, color, key, token, _callback);

    }

    /**
     * deleteCardsLabelsByIdCardByColor()
     * 
     * @param idCard card id or shortlink (required)
     * @param color color (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCardsLabelsByIdCardByColor(String idCard, String color, String key, String token) throws ApiException {
        deleteCardsLabelsByIdCardByColorWithHttpInfo(idCard, color, key, token);
    }

    /**
     * deleteCardsLabelsByIdCardByColor()
     * 
     * @param idCard card id or shortlink (required)
     * @param color color (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCardsLabelsByIdCardByColorWithHttpInfo(String idCard, String color, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = deleteCardsLabelsByIdCardByColorValidateBeforeCall(idCard, color, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * deleteCardsLabelsByIdCardByColor() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param color color (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCardsLabelsByIdCardByColorAsync(String idCard, String color, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCardsLabelsByIdCardByColorValidateBeforeCall(idCard, color, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCardsMembersVotedByIdCardByIdMember
     * @param idCard card id or shortlink (required)
     * @param idMember idMember (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCardsMembersVotedByIdCardByIdMemberCall(String idCard, String idMember, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/membersVoted/{idMember}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCardsMembersVotedByIdCardByIdMemberValidateBeforeCall(String idCard, String idMember, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling deleteCardsMembersVotedByIdCardByIdMember(Async)");
        }

        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling deleteCardsMembersVotedByIdCardByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteCardsMembersVotedByIdCardByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteCardsMembersVotedByIdCardByIdMember(Async)");
        }

        return deleteCardsMembersVotedByIdCardByIdMemberCall(idCard, idMember, key, token, _callback);

    }

    /**
     * deleteCardsMembersVotedByIdCardByIdMember()
     * 
     * @param idCard card id or shortlink (required)
     * @param idMember idMember (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCardsMembersVotedByIdCardByIdMember(String idCard, String idMember, String key, String token) throws ApiException {
        deleteCardsMembersVotedByIdCardByIdMemberWithHttpInfo(idCard, idMember, key, token);
    }

    /**
     * deleteCardsMembersVotedByIdCardByIdMember()
     * 
     * @param idCard card id or shortlink (required)
     * @param idMember idMember (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCardsMembersVotedByIdCardByIdMemberWithHttpInfo(String idCard, String idMember, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = deleteCardsMembersVotedByIdCardByIdMemberValidateBeforeCall(idCard, idMember, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * deleteCardsMembersVotedByIdCardByIdMember() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param idMember idMember (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCardsMembersVotedByIdCardByIdMemberAsync(String idCard, String idMember, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCardsMembersVotedByIdCardByIdMemberValidateBeforeCall(idCard, idMember, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCardsStickersByIdCardByIdSticker
     * @param idCard card id or shortlink (required)
     * @param idSticker idSticker (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCardsStickersByIdCardByIdStickerCall(String idCard, String idSticker, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/stickers/{idSticker}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idSticker" + "}", localVarApiClient.escapeString(idSticker.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCardsStickersByIdCardByIdStickerValidateBeforeCall(String idCard, String idSticker, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling deleteCardsStickersByIdCardByIdSticker(Async)");
        }

        // verify the required parameter 'idSticker' is set
        if (idSticker == null) {
            throw new ApiException("Missing the required parameter 'idSticker' when calling deleteCardsStickersByIdCardByIdSticker(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteCardsStickersByIdCardByIdSticker(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteCardsStickersByIdCardByIdSticker(Async)");
        }

        return deleteCardsStickersByIdCardByIdStickerCall(idCard, idSticker, key, token, _callback);

    }

    /**
     * deleteCardsStickersByIdCardByIdSticker()
     * 
     * @param idCard card id or shortlink (required)
     * @param idSticker idSticker (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCardsStickersByIdCardByIdSticker(String idCard, String idSticker, String key, String token) throws ApiException {
        deleteCardsStickersByIdCardByIdStickerWithHttpInfo(idCard, idSticker, key, token);
    }

    /**
     * deleteCardsStickersByIdCardByIdSticker()
     * 
     * @param idCard card id or shortlink (required)
     * @param idSticker idSticker (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCardsStickersByIdCardByIdStickerWithHttpInfo(String idCard, String idSticker, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = deleteCardsStickersByIdCardByIdStickerValidateBeforeCall(idCard, idSticker, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * deleteCardsStickersByIdCardByIdSticker() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param idSticker idSticker (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCardsStickersByIdCardByIdStickerAsync(String idCard, String idSticker, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCardsStickersByIdCardByIdStickerValidateBeforeCall(idCard, idSticker, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCardsActionsByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param entities  true or false (optional)
     * @param display  true or false (optional)
     * @param filter all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional, default to commentCard and updateCard:idList)
     * @param fields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param limit a number from 0 to 1000 (optional, default to 50)
     * @param format One of: count, list or minimal (optional, default to list)
     * @param since A date, null or lastView (optional)
     * @param before A date, or null (optional)
     * @param page Page * limit must be less than 1000 (optional, default to 0)
     * @param idModels Only return actions related to these model ids (optional)
     * @param member  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param memberCreator  true or false (optional)
     * @param memberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsActionsByIdCardCall(String idCard, String key, String token, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/actions"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entities", entities));
        }

        if (display != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("display", display));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (idModels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idModels", idModels));
        }

        if (member != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member", member));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        if (memberCreator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberCreator", memberCreator));
        }

        if (memberCreatorFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberCreator_fields", memberCreatorFields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardsActionsByIdCardValidateBeforeCall(String idCard, String key, String token, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getCardsActionsByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getCardsActionsByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getCardsActionsByIdCard(Async)");
        }

        return getCardsActionsByIdCardCall(idCard, key, token, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, _callback);

    }

    /**
     * getCardsActionsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param entities  true or false (optional)
     * @param display  true or false (optional)
     * @param filter all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional, default to commentCard and updateCard:idList)
     * @param fields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param limit a number from 0 to 1000 (optional, default to 50)
     * @param format One of: count, list or minimal (optional, default to list)
     * @param since A date, null or lastView (optional)
     * @param before A date, or null (optional)
     * @param page Page * limit must be less than 1000 (optional, default to 0)
     * @param idModels Only return actions related to these model ids (optional)
     * @param member  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param memberCreator  true or false (optional)
     * @param memberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getCardsActionsByIdCard(String idCard, String key, String token, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields) throws ApiException {
        getCardsActionsByIdCardWithHttpInfo(idCard, key, token, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields);
    }

    /**
     * getCardsActionsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param entities  true or false (optional)
     * @param display  true or false (optional)
     * @param filter all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional, default to commentCard and updateCard:idList)
     * @param fields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param limit a number from 0 to 1000 (optional, default to 50)
     * @param format One of: count, list or minimal (optional, default to list)
     * @param since A date, null or lastView (optional)
     * @param before A date, or null (optional)
     * @param page Page * limit must be less than 1000 (optional, default to 0)
     * @param idModels Only return actions related to these model ids (optional)
     * @param member  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param memberCreator  true or false (optional)
     * @param memberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getCardsActionsByIdCardWithHttpInfo(String idCard, String key, String token, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields) throws ApiException {
        okhttp3.Call localVarCall = getCardsActionsByIdCardValidateBeforeCall(idCard, key, token, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getCardsActionsByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param entities  true or false (optional)
     * @param display  true or false (optional)
     * @param filter all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional, default to commentCard and updateCard:idList)
     * @param fields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param limit a number from 0 to 1000 (optional, default to 50)
     * @param format One of: count, list or minimal (optional, default to list)
     * @param since A date, null or lastView (optional)
     * @param before A date, or null (optional)
     * @param page Page * limit must be less than 1000 (optional, default to 0)
     * @param idModels Only return actions related to these model ids (optional)
     * @param member  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param memberCreator  true or false (optional)
     * @param memberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsActionsByIdCardAsync(String idCard, String key, String token, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardsActionsByIdCardValidateBeforeCall(idCard, key, token, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCardsAttachmentsByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param filter A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsAttachmentsByIdCardCall(String idCard, String key, String token, String fields, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/attachments"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardsAttachmentsByIdCardValidateBeforeCall(String idCard, String key, String token, String fields, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getCardsAttachmentsByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getCardsAttachmentsByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getCardsAttachmentsByIdCard(Async)");
        }

        return getCardsAttachmentsByIdCardCall(idCard, key, token, fields, filter, _callback);

    }

    /**
     * getCardsAttachmentsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param filter A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getCardsAttachmentsByIdCard(String idCard, String key, String token, String fields, String filter) throws ApiException {
        getCardsAttachmentsByIdCardWithHttpInfo(idCard, key, token, fields, filter);
    }

    /**
     * getCardsAttachmentsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param filter A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getCardsAttachmentsByIdCardWithHttpInfo(String idCard, String key, String token, String fields, String filter) throws ApiException {
        okhttp3.Call localVarCall = getCardsAttachmentsByIdCardValidateBeforeCall(idCard, key, token, fields, filter, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getCardsAttachmentsByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param filter A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsAttachmentsByIdCardAsync(String idCard, String key, String token, String fields, String filter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardsAttachmentsByIdCardValidateBeforeCall(idCard, key, token, fields, filter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCardsAttachmentsByIdCardByIdAttachment
     * @param idCard card id or shortlink (required)
     * @param idAttachment idAttachment (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsAttachmentsByIdCardByIdAttachmentCall(String idCard, String idAttachment, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/attachments/{idAttachment}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idAttachment" + "}", localVarApiClient.escapeString(idAttachment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardsAttachmentsByIdCardByIdAttachmentValidateBeforeCall(String idCard, String idAttachment, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getCardsAttachmentsByIdCardByIdAttachment(Async)");
        }

        // verify the required parameter 'idAttachment' is set
        if (idAttachment == null) {
            throw new ApiException("Missing the required parameter 'idAttachment' when calling getCardsAttachmentsByIdCardByIdAttachment(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getCardsAttachmentsByIdCardByIdAttachment(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getCardsAttachmentsByIdCardByIdAttachment(Async)");
        }

        return getCardsAttachmentsByIdCardByIdAttachmentCall(idCard, idAttachment, key, token, fields, _callback);

    }

    /**
     * getCardsAttachmentsByIdCardByIdAttachment()
     * 
     * @param idCard card id or shortlink (required)
     * @param idAttachment idAttachment (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getCardsAttachmentsByIdCardByIdAttachment(String idCard, String idAttachment, String key, String token, String fields) throws ApiException {
        getCardsAttachmentsByIdCardByIdAttachmentWithHttpInfo(idCard, idAttachment, key, token, fields);
    }

    /**
     * getCardsAttachmentsByIdCardByIdAttachment()
     * 
     * @param idCard card id or shortlink (required)
     * @param idAttachment idAttachment (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getCardsAttachmentsByIdCardByIdAttachmentWithHttpInfo(String idCard, String idAttachment, String key, String token, String fields) throws ApiException {
        okhttp3.Call localVarCall = getCardsAttachmentsByIdCardByIdAttachmentValidateBeforeCall(idCard, idAttachment, key, token, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getCardsAttachmentsByIdCardByIdAttachment() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param idAttachment idAttachment (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsAttachmentsByIdCardByIdAttachmentAsync(String idCard, String idAttachment, String key, String token, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardsAttachmentsByIdCardByIdAttachmentValidateBeforeCall(idCard, idAttachment, key, token, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCardsBoardByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsBoardByIdCardCall(String idCard, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/board"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardsBoardByIdCardValidateBeforeCall(String idCard, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getCardsBoardByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getCardsBoardByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getCardsBoardByIdCard(Async)");
        }

        return getCardsBoardByIdCardCall(idCard, key, token, fields, _callback);

    }

    /**
     * getCardsBoardByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to all)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getCardsBoardByIdCard(String idCard, String key, String token, String fields) throws ApiException {
        getCardsBoardByIdCardWithHttpInfo(idCard, key, token, fields);
    }

    /**
     * getCardsBoardByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to all)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getCardsBoardByIdCardWithHttpInfo(String idCard, String key, String token, String fields) throws ApiException {
        okhttp3.Call localVarCall = getCardsBoardByIdCardValidateBeforeCall(idCard, key, token, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getCardsBoardByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsBoardByIdCardAsync(String idCard, String key, String token, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardsBoardByIdCardValidateBeforeCall(idCard, key, token, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCardsBoardByIdCardByField
     * @param idCard card id or shortlink (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsBoardByIdCardByFieldCall(String idCard, String field, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/board/{field}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardsBoardByIdCardByFieldValidateBeforeCall(String idCard, String field, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getCardsBoardByIdCardByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getCardsBoardByIdCardByField(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getCardsBoardByIdCardByField(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getCardsBoardByIdCardByField(Async)");
        }

        return getCardsBoardByIdCardByFieldCall(idCard, field, key, token, _callback);

    }

    /**
     * getCardsBoardByIdCardByField()
     * 
     * @param idCard card id or shortlink (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getCardsBoardByIdCardByField(String idCard, String field, String key, String token) throws ApiException {
        getCardsBoardByIdCardByFieldWithHttpInfo(idCard, field, key, token);
    }

    /**
     * getCardsBoardByIdCardByField()
     * 
     * @param idCard card id or shortlink (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getCardsBoardByIdCardByFieldWithHttpInfo(String idCard, String field, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = getCardsBoardByIdCardByFieldValidateBeforeCall(idCard, field, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getCardsBoardByIdCardByField() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsBoardByIdCardByFieldAsync(String idCard, String field, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardsBoardByIdCardByFieldValidateBeforeCall(idCard, field, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCardsByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param actionsEntities  true or false (optional)
     * @param actionsDisplay  true or false (optional)
     * @param actionsLimit a number from 0 to 1000 (optional, default to 50)
     * @param actionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param actionMemberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param attachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param attachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param members  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param membersVoted  true or false (optional)
     * @param memberVotedFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param checkItemStates  true or false (optional)
     * @param checkItemStateFields all or a comma-separated list of: idCheckItem or state (optional, default to all)
     * @param checklists One of: all or none (optional, default to none)
     * @param checklistFields all or a comma-separated list of: idBoard, idCard, name or pos (optional, default to all)
     * @param board  true or false (optional)
     * @param boardFields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name, desc, descData, closed, idOrganization, pinned, url and prefs)
     * @param _list  true or false (optional)
     * @param listFields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to all)
     * @param stickers  true or false (optional)
     * @param stickerFields all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex (optional, default to all)
     * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idBoard, idChecklists, idLabels, idList, idMembers, idShort, idAttachmentCover, manualCoverAttachment, labels, name, pos, shortUrl and url)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsByIdCardCall(String idCard, String key, String token, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String actionMemberCreatorFields, String attachments, String attachmentFields, String members, String memberFields, String membersVoted, String memberVotedFields, String checkItemStates, String checkItemStateFields, String checklists, String checklistFields, String board, String boardFields, String _list, String listFields, String stickers, String stickerFields, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (actions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions", actions));
        }

        if (actionsEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_entities", actionsEntities));
        }

        if (actionsDisplay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_display", actionsDisplay));
        }

        if (actionsLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_limit", actionsLimit));
        }

        if (actionFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_fields", actionFields));
        }

        if (actionMemberCreatorFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_memberCreator_fields", actionMemberCreatorFields));
        }

        if (attachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachments", attachments));
        }

        if (attachmentFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachment_fields", attachmentFields));
        }

        if (members != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("members", members));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        if (membersVoted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("membersVoted", membersVoted));
        }

        if (memberVotedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberVoted_fields", memberVotedFields));
        }

        if (checkItemStates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkItemStates", checkItemStates));
        }

        if (checkItemStateFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkItemState_fields", checkItemStateFields));
        }

        if (checklists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checklists", checklists));
        }

        if (checklistFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checklist_fields", checklistFields));
        }

        if (board != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board", board));
        }

        if (boardFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_fields", boardFields));
        }

        if (_list != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("list", _list));
        }

        if (listFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("list_fields", listFields));
        }

        if (stickers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stickers", stickers));
        }

        if (stickerFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sticker_fields", stickerFields));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardsByIdCardValidateBeforeCall(String idCard, String key, String token, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String actionMemberCreatorFields, String attachments, String attachmentFields, String members, String memberFields, String membersVoted, String memberVotedFields, String checkItemStates, String checkItemStateFields, String checklists, String checklistFields, String board, String boardFields, String _list, String listFields, String stickers, String stickerFields, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getCardsByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getCardsByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getCardsByIdCard(Async)");
        }

        return getCardsByIdCardCall(idCard, key, token, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionMemberCreatorFields, attachments, attachmentFields, members, memberFields, membersVoted, memberVotedFields, checkItemStates, checkItemStateFields, checklists, checklistFields, board, boardFields, _list, listFields, stickers, stickerFields, fields, _callback);

    }

    /**
     * getCardsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param actionsEntities  true or false (optional)
     * @param actionsDisplay  true or false (optional)
     * @param actionsLimit a number from 0 to 1000 (optional, default to 50)
     * @param actionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param actionMemberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param attachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param attachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param members  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param membersVoted  true or false (optional)
     * @param memberVotedFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param checkItemStates  true or false (optional)
     * @param checkItemStateFields all or a comma-separated list of: idCheckItem or state (optional, default to all)
     * @param checklists One of: all or none (optional, default to none)
     * @param checklistFields all or a comma-separated list of: idBoard, idCard, name or pos (optional, default to all)
     * @param board  true or false (optional)
     * @param boardFields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name, desc, descData, closed, idOrganization, pinned, url and prefs)
     * @param _list  true or false (optional)
     * @param listFields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to all)
     * @param stickers  true or false (optional)
     * @param stickerFields all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex (optional, default to all)
     * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idBoard, idChecklists, idLabels, idList, idMembers, idShort, idAttachmentCover, manualCoverAttachment, labels, name, pos, shortUrl and url)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getCardsByIdCard(String idCard, String key, String token, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String actionMemberCreatorFields, String attachments, String attachmentFields, String members, String memberFields, String membersVoted, String memberVotedFields, String checkItemStates, String checkItemStateFields, String checklists, String checklistFields, String board, String boardFields, String _list, String listFields, String stickers, String stickerFields, String fields) throws ApiException {
        getCardsByIdCardWithHttpInfo(idCard, key, token, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionMemberCreatorFields, attachments, attachmentFields, members, memberFields, membersVoted, memberVotedFields, checkItemStates, checkItemStateFields, checklists, checklistFields, board, boardFields, _list, listFields, stickers, stickerFields, fields);
    }

    /**
     * getCardsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param actionsEntities  true or false (optional)
     * @param actionsDisplay  true or false (optional)
     * @param actionsLimit a number from 0 to 1000 (optional, default to 50)
     * @param actionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param actionMemberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param attachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param attachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param members  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param membersVoted  true or false (optional)
     * @param memberVotedFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param checkItemStates  true or false (optional)
     * @param checkItemStateFields all or a comma-separated list of: idCheckItem or state (optional, default to all)
     * @param checklists One of: all or none (optional, default to none)
     * @param checklistFields all or a comma-separated list of: idBoard, idCard, name or pos (optional, default to all)
     * @param board  true or false (optional)
     * @param boardFields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name, desc, descData, closed, idOrganization, pinned, url and prefs)
     * @param _list  true or false (optional)
     * @param listFields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to all)
     * @param stickers  true or false (optional)
     * @param stickerFields all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex (optional, default to all)
     * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idBoard, idChecklists, idLabels, idList, idMembers, idShort, idAttachmentCover, manualCoverAttachment, labels, name, pos, shortUrl and url)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getCardsByIdCardWithHttpInfo(String idCard, String key, String token, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String actionMemberCreatorFields, String attachments, String attachmentFields, String members, String memberFields, String membersVoted, String memberVotedFields, String checkItemStates, String checkItemStateFields, String checklists, String checklistFields, String board, String boardFields, String _list, String listFields, String stickers, String stickerFields, String fields) throws ApiException {
        okhttp3.Call localVarCall = getCardsByIdCardValidateBeforeCall(idCard, key, token, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionMemberCreatorFields, attachments, attachmentFields, members, memberFields, membersVoted, memberVotedFields, checkItemStates, checkItemStateFields, checklists, checklistFields, board, boardFields, _list, listFields, stickers, stickerFields, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getCardsByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param actionsEntities  true or false (optional)
     * @param actionsDisplay  true or false (optional)
     * @param actionsLimit a number from 0 to 1000 (optional, default to 50)
     * @param actionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param actionMemberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param attachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param attachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param members  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param membersVoted  true or false (optional)
     * @param memberVotedFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param checkItemStates  true or false (optional)
     * @param checkItemStateFields all or a comma-separated list of: idCheckItem or state (optional, default to all)
     * @param checklists One of: all or none (optional, default to none)
     * @param checklistFields all or a comma-separated list of: idBoard, idCard, name or pos (optional, default to all)
     * @param board  true or false (optional)
     * @param boardFields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name, desc, descData, closed, idOrganization, pinned, url and prefs)
     * @param _list  true or false (optional)
     * @param listFields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to all)
     * @param stickers  true or false (optional)
     * @param stickerFields all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex (optional, default to all)
     * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idBoard, idChecklists, idLabels, idList, idMembers, idShort, idAttachmentCover, manualCoverAttachment, labels, name, pos, shortUrl and url)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsByIdCardAsync(String idCard, String key, String token, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String actionMemberCreatorFields, String attachments, String attachmentFields, String members, String memberFields, String membersVoted, String memberVotedFields, String checkItemStates, String checkItemStateFields, String checklists, String checklistFields, String board, String boardFields, String _list, String listFields, String stickers, String stickerFields, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardsByIdCardValidateBeforeCall(idCard, key, token, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionMemberCreatorFields, attachments, attachmentFields, members, memberFields, membersVoted, memberVotedFields, checkItemStates, checkItemStateFields, checklists, checklistFields, board, boardFields, _list, listFields, stickers, stickerFields, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCardsByIdCardByField
     * @param idCard card id or shortlink (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsByIdCardByFieldCall(String idCard, String field, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/{field}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardsByIdCardByFieldValidateBeforeCall(String idCard, String field, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getCardsByIdCardByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getCardsByIdCardByField(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getCardsByIdCardByField(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getCardsByIdCardByField(Async)");
        }

        return getCardsByIdCardByFieldCall(idCard, field, key, token, _callback);

    }

    /**
     * getCardsByIdCardByField()
     * 
     * @param idCard card id or shortlink (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getCardsByIdCardByField(String idCard, String field, String key, String token) throws ApiException {
        getCardsByIdCardByFieldWithHttpInfo(idCard, field, key, token);
    }

    /**
     * getCardsByIdCardByField()
     * 
     * @param idCard card id or shortlink (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getCardsByIdCardByFieldWithHttpInfo(String idCard, String field, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = getCardsByIdCardByFieldValidateBeforeCall(idCard, field, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getCardsByIdCardByField() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsByIdCardByFieldAsync(String idCard, String field, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardsByIdCardByFieldValidateBeforeCall(idCard, field, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCardsCheckItemStatesByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: idCheckItem or state (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsCheckItemStatesByIdCardCall(String idCard, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/checkItemStates"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardsCheckItemStatesByIdCardValidateBeforeCall(String idCard, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getCardsCheckItemStatesByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getCardsCheckItemStatesByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getCardsCheckItemStatesByIdCard(Async)");
        }

        return getCardsCheckItemStatesByIdCardCall(idCard, key, token, fields, _callback);

    }

    /**
     * getCardsCheckItemStatesByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: idCheckItem or state (optional, default to all)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getCardsCheckItemStatesByIdCard(String idCard, String key, String token, String fields) throws ApiException {
        getCardsCheckItemStatesByIdCardWithHttpInfo(idCard, key, token, fields);
    }

    /**
     * getCardsCheckItemStatesByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: idCheckItem or state (optional, default to all)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getCardsCheckItemStatesByIdCardWithHttpInfo(String idCard, String key, String token, String fields) throws ApiException {
        okhttp3.Call localVarCall = getCardsCheckItemStatesByIdCardValidateBeforeCall(idCard, key, token, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getCardsCheckItemStatesByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: idCheckItem or state (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsCheckItemStatesByIdCardAsync(String idCard, String key, String token, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardsCheckItemStatesByIdCardValidateBeforeCall(idCard, key, token, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCardsChecklistsByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cards One of: all, closed, none, open or visible (optional, default to none)
     * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param checkItems One of: all or none (optional, default to all)
     * @param checkItemFields all or a comma-separated list of: name, nameData, pos, state or type (optional, default to name, nameData, pos and state)
     * @param filter One of: all or none (optional, default to all)
     * @param fields all or a comma-separated list of: idBoard, idCard, name or pos (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsChecklistsByIdCardCall(String idCard, String key, String token, String cards, String cardFields, String checkItems, String checkItemFields, String filter, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/checklists"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cards != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cards", cards));
        }

        if (cardFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_fields", cardFields));
        }

        if (checkItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkItems", checkItems));
        }

        if (checkItemFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkItem_fields", checkItemFields));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardsChecklistsByIdCardValidateBeforeCall(String idCard, String key, String token, String cards, String cardFields, String checkItems, String checkItemFields, String filter, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getCardsChecklistsByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getCardsChecklistsByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getCardsChecklistsByIdCard(Async)");
        }

        return getCardsChecklistsByIdCardCall(idCard, key, token, cards, cardFields, checkItems, checkItemFields, filter, fields, _callback);

    }

    /**
     * getCardsChecklistsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cards One of: all, closed, none, open or visible (optional, default to none)
     * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param checkItems One of: all or none (optional, default to all)
     * @param checkItemFields all or a comma-separated list of: name, nameData, pos, state or type (optional, default to name, nameData, pos and state)
     * @param filter One of: all or none (optional, default to all)
     * @param fields all or a comma-separated list of: idBoard, idCard, name or pos (optional, default to all)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getCardsChecklistsByIdCard(String idCard, String key, String token, String cards, String cardFields, String checkItems, String checkItemFields, String filter, String fields) throws ApiException {
        getCardsChecklistsByIdCardWithHttpInfo(idCard, key, token, cards, cardFields, checkItems, checkItemFields, filter, fields);
    }

    /**
     * getCardsChecklistsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cards One of: all, closed, none, open or visible (optional, default to none)
     * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param checkItems One of: all or none (optional, default to all)
     * @param checkItemFields all or a comma-separated list of: name, nameData, pos, state or type (optional, default to name, nameData, pos and state)
     * @param filter One of: all or none (optional, default to all)
     * @param fields all or a comma-separated list of: idBoard, idCard, name or pos (optional, default to all)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getCardsChecklistsByIdCardWithHttpInfo(String idCard, String key, String token, String cards, String cardFields, String checkItems, String checkItemFields, String filter, String fields) throws ApiException {
        okhttp3.Call localVarCall = getCardsChecklistsByIdCardValidateBeforeCall(idCard, key, token, cards, cardFields, checkItems, checkItemFields, filter, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getCardsChecklistsByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cards One of: all, closed, none, open or visible (optional, default to none)
     * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param checkItems One of: all or none (optional, default to all)
     * @param checkItemFields all or a comma-separated list of: name, nameData, pos, state or type (optional, default to name, nameData, pos and state)
     * @param filter One of: all or none (optional, default to all)
     * @param fields all or a comma-separated list of: idBoard, idCard, name or pos (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsChecklistsByIdCardAsync(String idCard, String key, String token, String cards, String cardFields, String checkItems, String checkItemFields, String filter, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardsChecklistsByIdCardValidateBeforeCall(idCard, key, token, cards, cardFields, checkItems, checkItemFields, filter, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCardsListByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsListByIdCardCall(String idCard, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/list"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardsListByIdCardValidateBeforeCall(String idCard, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getCardsListByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getCardsListByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getCardsListByIdCard(Async)");
        }

        return getCardsListByIdCardCall(idCard, key, token, fields, _callback);

    }

    /**
     * getCardsListByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to all)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getCardsListByIdCard(String idCard, String key, String token, String fields) throws ApiException {
        getCardsListByIdCardWithHttpInfo(idCard, key, token, fields);
    }

    /**
     * getCardsListByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to all)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getCardsListByIdCardWithHttpInfo(String idCard, String key, String token, String fields) throws ApiException {
        okhttp3.Call localVarCall = getCardsListByIdCardValidateBeforeCall(idCard, key, token, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getCardsListByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: closed, idBoard, name, pos or subscribed (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsListByIdCardAsync(String idCard, String key, String token, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardsListByIdCardValidateBeforeCall(idCard, key, token, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCardsListByIdCardByField
     * @param idCard card id or shortlink (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsListByIdCardByFieldCall(String idCard, String field, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/list/{field}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardsListByIdCardByFieldValidateBeforeCall(String idCard, String field, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getCardsListByIdCardByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getCardsListByIdCardByField(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getCardsListByIdCardByField(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getCardsListByIdCardByField(Async)");
        }

        return getCardsListByIdCardByFieldCall(idCard, field, key, token, _callback);

    }

    /**
     * getCardsListByIdCardByField()
     * 
     * @param idCard card id or shortlink (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getCardsListByIdCardByField(String idCard, String field, String key, String token) throws ApiException {
        getCardsListByIdCardByFieldWithHttpInfo(idCard, field, key, token);
    }

    /**
     * getCardsListByIdCardByField()
     * 
     * @param idCard card id or shortlink (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getCardsListByIdCardByFieldWithHttpInfo(String idCard, String field, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = getCardsListByIdCardByFieldValidateBeforeCall(idCard, field, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getCardsListByIdCardByField() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsListByIdCardByFieldAsync(String idCard, String field, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardsListByIdCardByFieldValidateBeforeCall(idCard, field, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCardsMembersByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsMembersByIdCardCall(String idCard, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/members"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardsMembersByIdCardValidateBeforeCall(String idCard, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getCardsMembersByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getCardsMembersByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getCardsMembersByIdCard(Async)");
        }

        return getCardsMembersByIdCardCall(idCard, key, token, fields, _callback);

    }

    /**
     * getCardsMembersByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getCardsMembersByIdCard(String idCard, String key, String token, String fields) throws ApiException {
        getCardsMembersByIdCardWithHttpInfo(idCard, key, token, fields);
    }

    /**
     * getCardsMembersByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getCardsMembersByIdCardWithHttpInfo(String idCard, String key, String token, String fields) throws ApiException {
        okhttp3.Call localVarCall = getCardsMembersByIdCardValidateBeforeCall(idCard, key, token, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getCardsMembersByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsMembersByIdCardAsync(String idCard, String key, String token, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardsMembersByIdCardValidateBeforeCall(idCard, key, token, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCardsMembersVotedByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsMembersVotedByIdCardCall(String idCard, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/membersVoted"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardsMembersVotedByIdCardValidateBeforeCall(String idCard, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getCardsMembersVotedByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getCardsMembersVotedByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getCardsMembersVotedByIdCard(Async)");
        }

        return getCardsMembersVotedByIdCardCall(idCard, key, token, fields, _callback);

    }

    /**
     * getCardsMembersVotedByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getCardsMembersVotedByIdCard(String idCard, String key, String token, String fields) throws ApiException {
        getCardsMembersVotedByIdCardWithHttpInfo(idCard, key, token, fields);
    }

    /**
     * getCardsMembersVotedByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getCardsMembersVotedByIdCardWithHttpInfo(String idCard, String key, String token, String fields) throws ApiException {
        okhttp3.Call localVarCall = getCardsMembersVotedByIdCardValidateBeforeCall(idCard, key, token, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getCardsMembersVotedByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsMembersVotedByIdCardAsync(String idCard, String key, String token, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardsMembersVotedByIdCardValidateBeforeCall(idCard, key, token, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCardsStickersByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsStickersByIdCardCall(String idCard, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/stickers"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardsStickersByIdCardValidateBeforeCall(String idCard, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getCardsStickersByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getCardsStickersByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getCardsStickersByIdCard(Async)");
        }

        return getCardsStickersByIdCardCall(idCard, key, token, fields, _callback);

    }

    /**
     * getCardsStickersByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex (optional, default to all)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getCardsStickersByIdCard(String idCard, String key, String token, String fields) throws ApiException {
        getCardsStickersByIdCardWithHttpInfo(idCard, key, token, fields);
    }

    /**
     * getCardsStickersByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex (optional, default to all)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getCardsStickersByIdCardWithHttpInfo(String idCard, String key, String token, String fields) throws ApiException {
        okhttp3.Call localVarCall = getCardsStickersByIdCardValidateBeforeCall(idCard, key, token, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getCardsStickersByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsStickersByIdCardAsync(String idCard, String key, String token, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardsStickersByIdCardValidateBeforeCall(idCard, key, token, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCardsStickersByIdCardByIdSticker
     * @param idCard card id or shortlink (required)
     * @param idSticker idSticker (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsStickersByIdCardByIdStickerCall(String idCard, String idSticker, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/stickers/{idSticker}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idSticker" + "}", localVarApiClient.escapeString(idSticker.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardsStickersByIdCardByIdStickerValidateBeforeCall(String idCard, String idSticker, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling getCardsStickersByIdCardByIdSticker(Async)");
        }

        // verify the required parameter 'idSticker' is set
        if (idSticker == null) {
            throw new ApiException("Missing the required parameter 'idSticker' when calling getCardsStickersByIdCardByIdSticker(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getCardsStickersByIdCardByIdSticker(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getCardsStickersByIdCardByIdSticker(Async)");
        }

        return getCardsStickersByIdCardByIdStickerCall(idCard, idSticker, key, token, fields, _callback);

    }

    /**
     * getCardsStickersByIdCardByIdSticker()
     * 
     * @param idCard card id or shortlink (required)
     * @param idSticker idSticker (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex (optional, default to all)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getCardsStickersByIdCardByIdSticker(String idCard, String idSticker, String key, String token, String fields) throws ApiException {
        getCardsStickersByIdCardByIdStickerWithHttpInfo(idCard, idSticker, key, token, fields);
    }

    /**
     * getCardsStickersByIdCardByIdSticker()
     * 
     * @param idCard card id or shortlink (required)
     * @param idSticker idSticker (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex (optional, default to all)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getCardsStickersByIdCardByIdStickerWithHttpInfo(String idCard, String idSticker, String key, String token, String fields) throws ApiException {
        okhttp3.Call localVarCall = getCardsStickersByIdCardByIdStickerValidateBeforeCall(idCard, idSticker, key, token, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getCardsStickersByIdCardByIdSticker() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param idSticker idSticker (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCardsStickersByIdCardByIdStickerAsync(String idCard, String idSticker, String key, String token, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardsStickersByIdCardByIdStickerValidateBeforeCall(idCard, idSticker, key, token, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCardsActionsCommentsByIdCardByIdAction
     * @param idCard card id or shortlink (required)
     * @param idAction idAction (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsActionsComments Attributes of \&quot;Cards Actions Comments\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsActionsCommentsByIdCardByIdActionCall(String idCard, String idAction, String key, String token, CardsActionsComments cardsActionsComments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsActionsComments;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/actions/{idAction}/comments"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idAction" + "}", localVarApiClient.escapeString(idAction.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCardsActionsCommentsByIdCardByIdActionValidateBeforeCall(String idCard, String idAction, String key, String token, CardsActionsComments cardsActionsComments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateCardsActionsCommentsByIdCardByIdAction(Async)");
        }

        // verify the required parameter 'idAction' is set
        if (idAction == null) {
            throw new ApiException("Missing the required parameter 'idAction' when calling updateCardsActionsCommentsByIdCardByIdAction(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateCardsActionsCommentsByIdCardByIdAction(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateCardsActionsCommentsByIdCardByIdAction(Async)");
        }

        // verify the required parameter 'cardsActionsComments' is set
        if (cardsActionsComments == null) {
            throw new ApiException("Missing the required parameter 'cardsActionsComments' when calling updateCardsActionsCommentsByIdCardByIdAction(Async)");
        }

        return updateCardsActionsCommentsByIdCardByIdActionCall(idCard, idAction, key, token, cardsActionsComments, _callback);

    }

    /**
     * updateCardsActionsCommentsByIdCardByIdAction()
     * This can only be done by the original author of the comment.
     * @param idCard card id or shortlink (required)
     * @param idAction idAction (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsActionsComments Attributes of \&quot;Cards Actions Comments\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateCardsActionsCommentsByIdCardByIdAction(String idCard, String idAction, String key, String token, CardsActionsComments cardsActionsComments) throws ApiException {
        updateCardsActionsCommentsByIdCardByIdActionWithHttpInfo(idCard, idAction, key, token, cardsActionsComments);
    }

    /**
     * updateCardsActionsCommentsByIdCardByIdAction()
     * This can only be done by the original author of the comment.
     * @param idCard card id or shortlink (required)
     * @param idAction idAction (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsActionsComments Attributes of \&quot;Cards Actions Comments\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCardsActionsCommentsByIdCardByIdActionWithHttpInfo(String idCard, String idAction, String key, String token, CardsActionsComments cardsActionsComments) throws ApiException {
        okhttp3.Call localVarCall = updateCardsActionsCommentsByIdCardByIdActionValidateBeforeCall(idCard, idAction, key, token, cardsActionsComments, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateCardsActionsCommentsByIdCardByIdAction() (asynchronously)
     * This can only be done by the original author of the comment.
     * @param idCard card id or shortlink (required)
     * @param idAction idAction (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsActionsComments Attributes of \&quot;Cards Actions Comments\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsActionsCommentsByIdCardByIdActionAsync(String idCard, String idAction, String key, String token, CardsActionsComments cardsActionsComments, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCardsActionsCommentsByIdCardByIdActionValidateBeforeCall(idCard, idAction, key, token, cardsActionsComments, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCardsByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cards Attributes of \&quot;Cards\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsByIdCardCall(String idCard, String key, String token, Cards cards, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cards;

        // create path and map variables
        String localVarPath = "/cards/{idCard}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCardsByIdCardValidateBeforeCall(String idCard, String key, String token, Cards cards, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateCardsByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateCardsByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateCardsByIdCard(Async)");
        }

        // verify the required parameter 'cards' is set
        if (cards == null) {
            throw new ApiException("Missing the required parameter 'cards' when calling updateCardsByIdCard(Async)");
        }

        return updateCardsByIdCardCall(idCard, key, token, cards, _callback);

    }

    /**
     * updateCardsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cards Attributes of \&quot;Cards\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateCardsByIdCard(String idCard, String key, String token, Cards cards) throws ApiException {
        updateCardsByIdCardWithHttpInfo(idCard, key, token, cards);
    }

    /**
     * updateCardsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cards Attributes of \&quot;Cards\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCardsByIdCardWithHttpInfo(String idCard, String key, String token, Cards cards) throws ApiException {
        okhttp3.Call localVarCall = updateCardsByIdCardValidateBeforeCall(idCard, key, token, cards, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateCardsByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cards Attributes of \&quot;Cards\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsByIdCardAsync(String idCard, String key, String token, Cards cards, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCardsByIdCardValidateBeforeCall(idCard, key, token, cards, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem
     * @param idCard card id or shortlink (required)
     * @param idChecklistCurrent idChecklistCurrent (required)
     * @param idCheckItem idCheckItem (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsChecklistIdChecklistCurrentCheckItem Attributes of \&quot;Cards Checklist Id Checklist Current Check Item\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItemCall(String idCard, String idChecklistCurrent, String idCheckItem, String key, String token, CardsChecklistIdChecklistCurrentCheckItem cardsChecklistIdChecklistCurrentCheckItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsChecklistIdChecklistCurrentCheckItem;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/checklist/{idChecklistCurrent}/checkItem/{idCheckItem}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idChecklistCurrent" + "}", localVarApiClient.escapeString(idChecklistCurrent.toString()))
            .replace("{" + "idCheckItem" + "}", localVarApiClient.escapeString(idCheckItem.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItemValidateBeforeCall(String idCard, String idChecklistCurrent, String idCheckItem, String key, String token, CardsChecklistIdChecklistCurrentCheckItem cardsChecklistIdChecklistCurrentCheckItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem(Async)");
        }

        // verify the required parameter 'idChecklistCurrent' is set
        if (idChecklistCurrent == null) {
            throw new ApiException("Missing the required parameter 'idChecklistCurrent' when calling updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem(Async)");
        }

        // verify the required parameter 'idCheckItem' is set
        if (idCheckItem == null) {
            throw new ApiException("Missing the required parameter 'idCheckItem' when calling updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem(Async)");
        }

        // verify the required parameter 'cardsChecklistIdChecklistCurrentCheckItem' is set
        if (cardsChecklistIdChecklistCurrentCheckItem == null) {
            throw new ApiException("Missing the required parameter 'cardsChecklistIdChecklistCurrentCheckItem' when calling updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem(Async)");
        }

        return updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItemCall(idCard, idChecklistCurrent, idCheckItem, key, token, cardsChecklistIdChecklistCurrentCheckItem, _callback);

    }

    /**
     * updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem()
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklistCurrent idChecklistCurrent (required)
     * @param idCheckItem idCheckItem (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsChecklistIdChecklistCurrentCheckItem Attributes of \&quot;Cards Checklist Id Checklist Current Check Item\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem(String idCard, String idChecklistCurrent, String idCheckItem, String key, String token, CardsChecklistIdChecklistCurrentCheckItem cardsChecklistIdChecklistCurrentCheckItem) throws ApiException {
        updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItemWithHttpInfo(idCard, idChecklistCurrent, idCheckItem, key, token, cardsChecklistIdChecklistCurrentCheckItem);
    }

    /**
     * updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem()
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklistCurrent idChecklistCurrent (required)
     * @param idCheckItem idCheckItem (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsChecklistIdChecklistCurrentCheckItem Attributes of \&quot;Cards Checklist Id Checklist Current Check Item\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItemWithHttpInfo(String idCard, String idChecklistCurrent, String idCheckItem, String key, String token, CardsChecklistIdChecklistCurrentCheckItem cardsChecklistIdChecklistCurrentCheckItem) throws ApiException {
        okhttp3.Call localVarCall = updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItemValidateBeforeCall(idCard, idChecklistCurrent, idCheckItem, key, token, cardsChecklistIdChecklistCurrentCheckItem, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklistCurrent idChecklistCurrent (required)
     * @param idCheckItem idCheckItem (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsChecklistIdChecklistCurrentCheckItem Attributes of \&quot;Cards Checklist Id Checklist Current Check Item\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItemAsync(String idCard, String idChecklistCurrent, String idCheckItem, String key, String token, CardsChecklistIdChecklistCurrentCheckItem cardsChecklistIdChecklistCurrentCheckItem, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItemValidateBeforeCall(idCard, idChecklistCurrent, idCheckItem, key, token, cardsChecklistIdChecklistCurrentCheckItem, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param idCheckItem idCheckItem (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsChecklistCheckItemName Attributes of \&quot;Cards Checklist Check Item Name\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItemCall(String idCard, String idChecklist, String idCheckItem, String key, String token, CardsChecklistCheckItemName cardsChecklistCheckItemName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsChecklistCheckItemName;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/name"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()))
            .replace("{" + "idCheckItem" + "}", localVarApiClient.escapeString(idCheckItem.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItemValidateBeforeCall(String idCard, String idChecklist, String idCheckItem, String key, String token, CardsChecklistCheckItemName cardsChecklistCheckItemName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem(Async)");
        }

        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem(Async)");
        }

        // verify the required parameter 'idCheckItem' is set
        if (idCheckItem == null) {
            throw new ApiException("Missing the required parameter 'idCheckItem' when calling updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem(Async)");
        }

        // verify the required parameter 'cardsChecklistCheckItemName' is set
        if (cardsChecklistCheckItemName == null) {
            throw new ApiException("Missing the required parameter 'cardsChecklistCheckItemName' when calling updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem(Async)");
        }

        return updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItemCall(idCard, idChecklist, idCheckItem, key, token, cardsChecklistCheckItemName, _callback);

    }

    /**
     * updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem()
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param idCheckItem idCheckItem (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsChecklistCheckItemName Attributes of \&quot;Cards Checklist Check Item Name\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem(String idCard, String idChecklist, String idCheckItem, String key, String token, CardsChecklistCheckItemName cardsChecklistCheckItemName) throws ApiException {
        updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItemWithHttpInfo(idCard, idChecklist, idCheckItem, key, token, cardsChecklistCheckItemName);
    }

    /**
     * updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem()
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param idCheckItem idCheckItem (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsChecklistCheckItemName Attributes of \&quot;Cards Checklist Check Item Name\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItemWithHttpInfo(String idCard, String idChecklist, String idCheckItem, String key, String token, CardsChecklistCheckItemName cardsChecklistCheckItemName) throws ApiException {
        okhttp3.Call localVarCall = updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItemValidateBeforeCall(idCard, idChecklist, idCheckItem, key, token, cardsChecklistCheckItemName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param idCheckItem idCheckItem (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsChecklistCheckItemName Attributes of \&quot;Cards Checklist Check Item Name\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItemAsync(String idCard, String idChecklist, String idCheckItem, String key, String token, CardsChecklistCheckItemName cardsChecklistCheckItemName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItemValidateBeforeCall(idCard, idChecklist, idCheckItem, key, token, cardsChecklistCheckItemName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param idCheckItem idCheckItem (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsChecklistCheckItemPos Attributes of \&quot;Cards Checklist Check Item Pos\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItemCall(String idCard, String idChecklist, String idCheckItem, String key, String token, CardsChecklistCheckItemPos cardsChecklistCheckItemPos, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsChecklistCheckItemPos;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/pos"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()))
            .replace("{" + "idCheckItem" + "}", localVarApiClient.escapeString(idCheckItem.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItemValidateBeforeCall(String idCard, String idChecklist, String idCheckItem, String key, String token, CardsChecklistCheckItemPos cardsChecklistCheckItemPos, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem(Async)");
        }

        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem(Async)");
        }

        // verify the required parameter 'idCheckItem' is set
        if (idCheckItem == null) {
            throw new ApiException("Missing the required parameter 'idCheckItem' when calling updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem(Async)");
        }

        // verify the required parameter 'cardsChecklistCheckItemPos' is set
        if (cardsChecklistCheckItemPos == null) {
            throw new ApiException("Missing the required parameter 'cardsChecklistCheckItemPos' when calling updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem(Async)");
        }

        return updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItemCall(idCard, idChecklist, idCheckItem, key, token, cardsChecklistCheckItemPos, _callback);

    }

    /**
     * updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem()
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param idCheckItem idCheckItem (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsChecklistCheckItemPos Attributes of \&quot;Cards Checklist Check Item Pos\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem(String idCard, String idChecklist, String idCheckItem, String key, String token, CardsChecklistCheckItemPos cardsChecklistCheckItemPos) throws ApiException {
        updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItemWithHttpInfo(idCard, idChecklist, idCheckItem, key, token, cardsChecklistCheckItemPos);
    }

    /**
     * updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem()
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param idCheckItem idCheckItem (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsChecklistCheckItemPos Attributes of \&quot;Cards Checklist Check Item Pos\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItemWithHttpInfo(String idCard, String idChecklist, String idCheckItem, String key, String token, CardsChecklistCheckItemPos cardsChecklistCheckItemPos) throws ApiException {
        okhttp3.Call localVarCall = updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItemValidateBeforeCall(idCard, idChecklist, idCheckItem, key, token, cardsChecklistCheckItemPos, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param idCheckItem idCheckItem (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsChecklistCheckItemPos Attributes of \&quot;Cards Checklist Check Item Pos\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItemAsync(String idCard, String idChecklist, String idCheckItem, String key, String token, CardsChecklistCheckItemPos cardsChecklistCheckItemPos, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItemValidateBeforeCall(idCard, idChecklist, idCheckItem, key, token, cardsChecklistCheckItemPos, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param idCheckItem idCheckItem (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsChecklistCheckItemState Attributes of \&quot;Cards Checklist Check Item State\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItemCall(String idCard, String idChecklist, String idCheckItem, String key, String token, CardsChecklistCheckItemState cardsChecklistCheckItemState, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsChecklistCheckItemState;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/state"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idChecklist" + "}", localVarApiClient.escapeString(idChecklist.toString()))
            .replace("{" + "idCheckItem" + "}", localVarApiClient.escapeString(idCheckItem.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItemValidateBeforeCall(String idCard, String idChecklist, String idCheckItem, String key, String token, CardsChecklistCheckItemState cardsChecklistCheckItemState, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem(Async)");
        }

        // verify the required parameter 'idChecklist' is set
        if (idChecklist == null) {
            throw new ApiException("Missing the required parameter 'idChecklist' when calling updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem(Async)");
        }

        // verify the required parameter 'idCheckItem' is set
        if (idCheckItem == null) {
            throw new ApiException("Missing the required parameter 'idCheckItem' when calling updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem(Async)");
        }

        // verify the required parameter 'cardsChecklistCheckItemState' is set
        if (cardsChecklistCheckItemState == null) {
            throw new ApiException("Missing the required parameter 'cardsChecklistCheckItemState' when calling updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem(Async)");
        }

        return updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItemCall(idCard, idChecklist, idCheckItem, key, token, cardsChecklistCheckItemState, _callback);

    }

    /**
     * updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem()
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param idCheckItem idCheckItem (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsChecklistCheckItemState Attributes of \&quot;Cards Checklist Check Item State\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem(String idCard, String idChecklist, String idCheckItem, String key, String token, CardsChecklistCheckItemState cardsChecklistCheckItemState) throws ApiException {
        updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItemWithHttpInfo(idCard, idChecklist, idCheckItem, key, token, cardsChecklistCheckItemState);
    }

    /**
     * updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem()
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param idCheckItem idCheckItem (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsChecklistCheckItemState Attributes of \&quot;Cards Checklist Check Item State\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItemWithHttpInfo(String idCard, String idChecklist, String idCheckItem, String key, String token, CardsChecklistCheckItemState cardsChecklistCheckItemState) throws ApiException {
        okhttp3.Call localVarCall = updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItemValidateBeforeCall(idCard, idChecklist, idCheckItem, key, token, cardsChecklistCheckItemState, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param idChecklist idChecklist (required)
     * @param idCheckItem idCheckItem (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsChecklistCheckItemState Attributes of \&quot;Cards Checklist Check Item State\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItemAsync(String idCard, String idChecklist, String idCheckItem, String key, String token, CardsChecklistCheckItemState cardsChecklistCheckItemState, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItemValidateBeforeCall(idCard, idChecklist, idCheckItem, key, token, cardsChecklistCheckItemState, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCardsClosedByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsClosed Attributes of \&quot;Cards Closed\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsClosedByIdCardCall(String idCard, String key, String token, CardsClosed cardsClosed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsClosed;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/closed"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCardsClosedByIdCardValidateBeforeCall(String idCard, String key, String token, CardsClosed cardsClosed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateCardsClosedByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateCardsClosedByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateCardsClosedByIdCard(Async)");
        }

        // verify the required parameter 'cardsClosed' is set
        if (cardsClosed == null) {
            throw new ApiException("Missing the required parameter 'cardsClosed' when calling updateCardsClosedByIdCard(Async)");
        }

        return updateCardsClosedByIdCardCall(idCard, key, token, cardsClosed, _callback);

    }

    /**
     * updateCardsClosedByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsClosed Attributes of \&quot;Cards Closed\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateCardsClosedByIdCard(String idCard, String key, String token, CardsClosed cardsClosed) throws ApiException {
        updateCardsClosedByIdCardWithHttpInfo(idCard, key, token, cardsClosed);
    }

    /**
     * updateCardsClosedByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsClosed Attributes of \&quot;Cards Closed\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCardsClosedByIdCardWithHttpInfo(String idCard, String key, String token, CardsClosed cardsClosed) throws ApiException {
        okhttp3.Call localVarCall = updateCardsClosedByIdCardValidateBeforeCall(idCard, key, token, cardsClosed, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateCardsClosedByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsClosed Attributes of \&quot;Cards Closed\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsClosedByIdCardAsync(String idCard, String key, String token, CardsClosed cardsClosed, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCardsClosedByIdCardValidateBeforeCall(idCard, key, token, cardsClosed, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCardsDescByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsDesc Attributes of \&quot;Cards Desc\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsDescByIdCardCall(String idCard, String key, String token, CardsDesc cardsDesc, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsDesc;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/desc"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCardsDescByIdCardValidateBeforeCall(String idCard, String key, String token, CardsDesc cardsDesc, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateCardsDescByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateCardsDescByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateCardsDescByIdCard(Async)");
        }

        // verify the required parameter 'cardsDesc' is set
        if (cardsDesc == null) {
            throw new ApiException("Missing the required parameter 'cardsDesc' when calling updateCardsDescByIdCard(Async)");
        }

        return updateCardsDescByIdCardCall(idCard, key, token, cardsDesc, _callback);

    }

    /**
     * updateCardsDescByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsDesc Attributes of \&quot;Cards Desc\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateCardsDescByIdCard(String idCard, String key, String token, CardsDesc cardsDesc) throws ApiException {
        updateCardsDescByIdCardWithHttpInfo(idCard, key, token, cardsDesc);
    }

    /**
     * updateCardsDescByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsDesc Attributes of \&quot;Cards Desc\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCardsDescByIdCardWithHttpInfo(String idCard, String key, String token, CardsDesc cardsDesc) throws ApiException {
        okhttp3.Call localVarCall = updateCardsDescByIdCardValidateBeforeCall(idCard, key, token, cardsDesc, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateCardsDescByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsDesc Attributes of \&quot;Cards Desc\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsDescByIdCardAsync(String idCard, String key, String token, CardsDesc cardsDesc, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCardsDescByIdCardValidateBeforeCall(idCard, key, token, cardsDesc, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCardsDueByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsDue Attributes of \&quot;Cards Due\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsDueByIdCardCall(String idCard, String key, String token, CardsDue cardsDue, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsDue;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/due"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCardsDueByIdCardValidateBeforeCall(String idCard, String key, String token, CardsDue cardsDue, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateCardsDueByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateCardsDueByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateCardsDueByIdCard(Async)");
        }

        // verify the required parameter 'cardsDue' is set
        if (cardsDue == null) {
            throw new ApiException("Missing the required parameter 'cardsDue' when calling updateCardsDueByIdCard(Async)");
        }

        return updateCardsDueByIdCardCall(idCard, key, token, cardsDue, _callback);

    }

    /**
     * updateCardsDueByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsDue Attributes of \&quot;Cards Due\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateCardsDueByIdCard(String idCard, String key, String token, CardsDue cardsDue) throws ApiException {
        updateCardsDueByIdCardWithHttpInfo(idCard, key, token, cardsDue);
    }

    /**
     * updateCardsDueByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsDue Attributes of \&quot;Cards Due\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCardsDueByIdCardWithHttpInfo(String idCard, String key, String token, CardsDue cardsDue) throws ApiException {
        okhttp3.Call localVarCall = updateCardsDueByIdCardValidateBeforeCall(idCard, key, token, cardsDue, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateCardsDueByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsDue Attributes of \&quot;Cards Due\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsDueByIdCardAsync(String idCard, String key, String token, CardsDue cardsDue, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCardsDueByIdCardValidateBeforeCall(idCard, key, token, cardsDue, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCardsIdAttachmentCoverByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsIdAttachmentCover Attributes of \&quot;Cards Id Attachment Cover\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsIdAttachmentCoverByIdCardCall(String idCard, String key, String token, CardsIdAttachmentCover cardsIdAttachmentCover, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsIdAttachmentCover;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/idAttachmentCover"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCardsIdAttachmentCoverByIdCardValidateBeforeCall(String idCard, String key, String token, CardsIdAttachmentCover cardsIdAttachmentCover, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateCardsIdAttachmentCoverByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateCardsIdAttachmentCoverByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateCardsIdAttachmentCoverByIdCard(Async)");
        }

        // verify the required parameter 'cardsIdAttachmentCover' is set
        if (cardsIdAttachmentCover == null) {
            throw new ApiException("Missing the required parameter 'cardsIdAttachmentCover' when calling updateCardsIdAttachmentCoverByIdCard(Async)");
        }

        return updateCardsIdAttachmentCoverByIdCardCall(idCard, key, token, cardsIdAttachmentCover, _callback);

    }

    /**
     * updateCardsIdAttachmentCoverByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsIdAttachmentCover Attributes of \&quot;Cards Id Attachment Cover\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateCardsIdAttachmentCoverByIdCard(String idCard, String key, String token, CardsIdAttachmentCover cardsIdAttachmentCover) throws ApiException {
        updateCardsIdAttachmentCoverByIdCardWithHttpInfo(idCard, key, token, cardsIdAttachmentCover);
    }

    /**
     * updateCardsIdAttachmentCoverByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsIdAttachmentCover Attributes of \&quot;Cards Id Attachment Cover\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCardsIdAttachmentCoverByIdCardWithHttpInfo(String idCard, String key, String token, CardsIdAttachmentCover cardsIdAttachmentCover) throws ApiException {
        okhttp3.Call localVarCall = updateCardsIdAttachmentCoverByIdCardValidateBeforeCall(idCard, key, token, cardsIdAttachmentCover, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateCardsIdAttachmentCoverByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsIdAttachmentCover Attributes of \&quot;Cards Id Attachment Cover\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsIdAttachmentCoverByIdCardAsync(String idCard, String key, String token, CardsIdAttachmentCover cardsIdAttachmentCover, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCardsIdAttachmentCoverByIdCardValidateBeforeCall(idCard, key, token, cardsIdAttachmentCover, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCardsIdBoardByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsIdBoard Attributes of \&quot;Cards Id Board\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsIdBoardByIdCardCall(String idCard, String key, String token, CardsIdBoard cardsIdBoard, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsIdBoard;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/idBoard"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCardsIdBoardByIdCardValidateBeforeCall(String idCard, String key, String token, CardsIdBoard cardsIdBoard, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateCardsIdBoardByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateCardsIdBoardByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateCardsIdBoardByIdCard(Async)");
        }

        // verify the required parameter 'cardsIdBoard' is set
        if (cardsIdBoard == null) {
            throw new ApiException("Missing the required parameter 'cardsIdBoard' when calling updateCardsIdBoardByIdCard(Async)");
        }

        return updateCardsIdBoardByIdCardCall(idCard, key, token, cardsIdBoard, _callback);

    }

    /**
     * updateCardsIdBoardByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsIdBoard Attributes of \&quot;Cards Id Board\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateCardsIdBoardByIdCard(String idCard, String key, String token, CardsIdBoard cardsIdBoard) throws ApiException {
        updateCardsIdBoardByIdCardWithHttpInfo(idCard, key, token, cardsIdBoard);
    }

    /**
     * updateCardsIdBoardByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsIdBoard Attributes of \&quot;Cards Id Board\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCardsIdBoardByIdCardWithHttpInfo(String idCard, String key, String token, CardsIdBoard cardsIdBoard) throws ApiException {
        okhttp3.Call localVarCall = updateCardsIdBoardByIdCardValidateBeforeCall(idCard, key, token, cardsIdBoard, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateCardsIdBoardByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsIdBoard Attributes of \&quot;Cards Id Board\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsIdBoardByIdCardAsync(String idCard, String key, String token, CardsIdBoard cardsIdBoard, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCardsIdBoardByIdCardValidateBeforeCall(idCard, key, token, cardsIdBoard, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCardsIdListByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsIdList Attributes of \&quot;Cards Id List\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsIdListByIdCardCall(String idCard, String key, String token, CardsIdList cardsIdList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsIdList;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/idList"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCardsIdListByIdCardValidateBeforeCall(String idCard, String key, String token, CardsIdList cardsIdList, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateCardsIdListByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateCardsIdListByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateCardsIdListByIdCard(Async)");
        }

        // verify the required parameter 'cardsIdList' is set
        if (cardsIdList == null) {
            throw new ApiException("Missing the required parameter 'cardsIdList' when calling updateCardsIdListByIdCard(Async)");
        }

        return updateCardsIdListByIdCardCall(idCard, key, token, cardsIdList, _callback);

    }

    /**
     * updateCardsIdListByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsIdList Attributes of \&quot;Cards Id List\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateCardsIdListByIdCard(String idCard, String key, String token, CardsIdList cardsIdList) throws ApiException {
        updateCardsIdListByIdCardWithHttpInfo(idCard, key, token, cardsIdList);
    }

    /**
     * updateCardsIdListByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsIdList Attributes of \&quot;Cards Id List\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCardsIdListByIdCardWithHttpInfo(String idCard, String key, String token, CardsIdList cardsIdList) throws ApiException {
        okhttp3.Call localVarCall = updateCardsIdListByIdCardValidateBeforeCall(idCard, key, token, cardsIdList, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateCardsIdListByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsIdList Attributes of \&quot;Cards Id List\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsIdListByIdCardAsync(String idCard, String key, String token, CardsIdList cardsIdList, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCardsIdListByIdCardValidateBeforeCall(idCard, key, token, cardsIdList, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCardsIdMembersByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsIdMembers Attributes of \&quot;Cards Id Members\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsIdMembersByIdCardCall(String idCard, String key, String token, CardsIdMembers cardsIdMembers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsIdMembers;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/idMembers"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCardsIdMembersByIdCardValidateBeforeCall(String idCard, String key, String token, CardsIdMembers cardsIdMembers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateCardsIdMembersByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateCardsIdMembersByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateCardsIdMembersByIdCard(Async)");
        }

        // verify the required parameter 'cardsIdMembers' is set
        if (cardsIdMembers == null) {
            throw new ApiException("Missing the required parameter 'cardsIdMembers' when calling updateCardsIdMembersByIdCard(Async)");
        }

        return updateCardsIdMembersByIdCardCall(idCard, key, token, cardsIdMembers, _callback);

    }

    /**
     * updateCardsIdMembersByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsIdMembers Attributes of \&quot;Cards Id Members\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateCardsIdMembersByIdCard(String idCard, String key, String token, CardsIdMembers cardsIdMembers) throws ApiException {
        updateCardsIdMembersByIdCardWithHttpInfo(idCard, key, token, cardsIdMembers);
    }

    /**
     * updateCardsIdMembersByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsIdMembers Attributes of \&quot;Cards Id Members\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCardsIdMembersByIdCardWithHttpInfo(String idCard, String key, String token, CardsIdMembers cardsIdMembers) throws ApiException {
        okhttp3.Call localVarCall = updateCardsIdMembersByIdCardValidateBeforeCall(idCard, key, token, cardsIdMembers, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateCardsIdMembersByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsIdMembers Attributes of \&quot;Cards Id Members\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsIdMembersByIdCardAsync(String idCard, String key, String token, CardsIdMembers cardsIdMembers, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCardsIdMembersByIdCardValidateBeforeCall(idCard, key, token, cardsIdMembers, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCardsLabelsByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsLabels Attributes of \&quot;Cards Labels\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsLabelsByIdCardCall(String idCard, String key, String token, CardsLabels cardsLabels, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsLabels;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/labels"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCardsLabelsByIdCardValidateBeforeCall(String idCard, String key, String token, CardsLabels cardsLabels, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateCardsLabelsByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateCardsLabelsByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateCardsLabelsByIdCard(Async)");
        }

        // verify the required parameter 'cardsLabels' is set
        if (cardsLabels == null) {
            throw new ApiException("Missing the required parameter 'cardsLabels' when calling updateCardsLabelsByIdCard(Async)");
        }

        return updateCardsLabelsByIdCardCall(idCard, key, token, cardsLabels, _callback);

    }

    /**
     * updateCardsLabelsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsLabels Attributes of \&quot;Cards Labels\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateCardsLabelsByIdCard(String idCard, String key, String token, CardsLabels cardsLabels) throws ApiException {
        updateCardsLabelsByIdCardWithHttpInfo(idCard, key, token, cardsLabels);
    }

    /**
     * updateCardsLabelsByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsLabels Attributes of \&quot;Cards Labels\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCardsLabelsByIdCardWithHttpInfo(String idCard, String key, String token, CardsLabels cardsLabels) throws ApiException {
        okhttp3.Call localVarCall = updateCardsLabelsByIdCardValidateBeforeCall(idCard, key, token, cardsLabels, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateCardsLabelsByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsLabels Attributes of \&quot;Cards Labels\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsLabelsByIdCardAsync(String idCard, String key, String token, CardsLabels cardsLabels, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCardsLabelsByIdCardValidateBeforeCall(idCard, key, token, cardsLabels, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCardsNameByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsName Attributes of \&quot;Cards Name\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsNameByIdCardCall(String idCard, String key, String token, CardsName cardsName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsName;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/name"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCardsNameByIdCardValidateBeforeCall(String idCard, String key, String token, CardsName cardsName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateCardsNameByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateCardsNameByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateCardsNameByIdCard(Async)");
        }

        // verify the required parameter 'cardsName' is set
        if (cardsName == null) {
            throw new ApiException("Missing the required parameter 'cardsName' when calling updateCardsNameByIdCard(Async)");
        }

        return updateCardsNameByIdCardCall(idCard, key, token, cardsName, _callback);

    }

    /**
     * updateCardsNameByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsName Attributes of \&quot;Cards Name\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateCardsNameByIdCard(String idCard, String key, String token, CardsName cardsName) throws ApiException {
        updateCardsNameByIdCardWithHttpInfo(idCard, key, token, cardsName);
    }

    /**
     * updateCardsNameByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsName Attributes of \&quot;Cards Name\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCardsNameByIdCardWithHttpInfo(String idCard, String key, String token, CardsName cardsName) throws ApiException {
        okhttp3.Call localVarCall = updateCardsNameByIdCardValidateBeforeCall(idCard, key, token, cardsName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateCardsNameByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsName Attributes of \&quot;Cards Name\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsNameByIdCardAsync(String idCard, String key, String token, CardsName cardsName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCardsNameByIdCardValidateBeforeCall(idCard, key, token, cardsName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCardsPosByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsPos Attributes of \&quot;Cards Pos\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsPosByIdCardCall(String idCard, String key, String token, CardsPos cardsPos, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsPos;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/pos"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCardsPosByIdCardValidateBeforeCall(String idCard, String key, String token, CardsPos cardsPos, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateCardsPosByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateCardsPosByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateCardsPosByIdCard(Async)");
        }

        // verify the required parameter 'cardsPos' is set
        if (cardsPos == null) {
            throw new ApiException("Missing the required parameter 'cardsPos' when calling updateCardsPosByIdCard(Async)");
        }

        return updateCardsPosByIdCardCall(idCard, key, token, cardsPos, _callback);

    }

    /**
     * updateCardsPosByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsPos Attributes of \&quot;Cards Pos\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateCardsPosByIdCard(String idCard, String key, String token, CardsPos cardsPos) throws ApiException {
        updateCardsPosByIdCardWithHttpInfo(idCard, key, token, cardsPos);
    }

    /**
     * updateCardsPosByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsPos Attributes of \&quot;Cards Pos\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCardsPosByIdCardWithHttpInfo(String idCard, String key, String token, CardsPos cardsPos) throws ApiException {
        okhttp3.Call localVarCall = updateCardsPosByIdCardValidateBeforeCall(idCard, key, token, cardsPos, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateCardsPosByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsPos Attributes of \&quot;Cards Pos\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsPosByIdCardAsync(String idCard, String key, String token, CardsPos cardsPos, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCardsPosByIdCardValidateBeforeCall(idCard, key, token, cardsPos, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCardsStickersByIdCardByIdSticker
     * @param idCard card id or shortlink (required)
     * @param idSticker idSticker (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsStickers Attributes of \&quot;Cards Stickers\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsStickersByIdCardByIdStickerCall(String idCard, String idSticker, String key, String token, CardsStickers cardsStickers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsStickers;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/stickers/{idSticker}"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()))
            .replace("{" + "idSticker" + "}", localVarApiClient.escapeString(idSticker.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCardsStickersByIdCardByIdStickerValidateBeforeCall(String idCard, String idSticker, String key, String token, CardsStickers cardsStickers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateCardsStickersByIdCardByIdSticker(Async)");
        }

        // verify the required parameter 'idSticker' is set
        if (idSticker == null) {
            throw new ApiException("Missing the required parameter 'idSticker' when calling updateCardsStickersByIdCardByIdSticker(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateCardsStickersByIdCardByIdSticker(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateCardsStickersByIdCardByIdSticker(Async)");
        }

        // verify the required parameter 'cardsStickers' is set
        if (cardsStickers == null) {
            throw new ApiException("Missing the required parameter 'cardsStickers' when calling updateCardsStickersByIdCardByIdSticker(Async)");
        }

        return updateCardsStickersByIdCardByIdStickerCall(idCard, idSticker, key, token, cardsStickers, _callback);

    }

    /**
     * updateCardsStickersByIdCardByIdSticker()
     * 
     * @param idCard card id or shortlink (required)
     * @param idSticker idSticker (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsStickers Attributes of \&quot;Cards Stickers\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateCardsStickersByIdCardByIdSticker(String idCard, String idSticker, String key, String token, CardsStickers cardsStickers) throws ApiException {
        updateCardsStickersByIdCardByIdStickerWithHttpInfo(idCard, idSticker, key, token, cardsStickers);
    }

    /**
     * updateCardsStickersByIdCardByIdSticker()
     * 
     * @param idCard card id or shortlink (required)
     * @param idSticker idSticker (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsStickers Attributes of \&quot;Cards Stickers\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCardsStickersByIdCardByIdStickerWithHttpInfo(String idCard, String idSticker, String key, String token, CardsStickers cardsStickers) throws ApiException {
        okhttp3.Call localVarCall = updateCardsStickersByIdCardByIdStickerValidateBeforeCall(idCard, idSticker, key, token, cardsStickers, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateCardsStickersByIdCardByIdSticker() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param idSticker idSticker (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsStickers Attributes of \&quot;Cards Stickers\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsStickersByIdCardByIdStickerAsync(String idCard, String idSticker, String key, String token, CardsStickers cardsStickers, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCardsStickersByIdCardByIdStickerValidateBeforeCall(idCard, idSticker, key, token, cardsStickers, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCardsSubscribedByIdCard
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsSubscribed Attributes of \&quot;Cards Subscribed\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsSubscribedByIdCardCall(String idCard, String key, String token, CardsSubscribed cardsSubscribed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardsSubscribed;

        // create path and map variables
        String localVarPath = "/cards/{idCard}/subscribed"
            .replace("{" + "idCard" + "}", localVarApiClient.escapeString(idCard.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCardsSubscribedByIdCardValidateBeforeCall(String idCard, String key, String token, CardsSubscribed cardsSubscribed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idCard' is set
        if (idCard == null) {
            throw new ApiException("Missing the required parameter 'idCard' when calling updateCardsSubscribedByIdCard(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateCardsSubscribedByIdCard(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateCardsSubscribedByIdCard(Async)");
        }

        // verify the required parameter 'cardsSubscribed' is set
        if (cardsSubscribed == null) {
            throw new ApiException("Missing the required parameter 'cardsSubscribed' when calling updateCardsSubscribedByIdCard(Async)");
        }

        return updateCardsSubscribedByIdCardCall(idCard, key, token, cardsSubscribed, _callback);

    }

    /**
     * updateCardsSubscribedByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsSubscribed Attributes of \&quot;Cards Subscribed\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateCardsSubscribedByIdCard(String idCard, String key, String token, CardsSubscribed cardsSubscribed) throws ApiException {
        updateCardsSubscribedByIdCardWithHttpInfo(idCard, key, token, cardsSubscribed);
    }

    /**
     * updateCardsSubscribedByIdCard()
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsSubscribed Attributes of \&quot;Cards Subscribed\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCardsSubscribedByIdCardWithHttpInfo(String idCard, String key, String token, CardsSubscribed cardsSubscribed) throws ApiException {
        okhttp3.Call localVarCall = updateCardsSubscribedByIdCardValidateBeforeCall(idCard, key, token, cardsSubscribed, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateCardsSubscribedByIdCard() (asynchronously)
     * 
     * @param idCard card id or shortlink (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param cardsSubscribed Attributes of \&quot;Cards Subscribed\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCardsSubscribedByIdCardAsync(String idCard, String key, String token, CardsSubscribed cardsSubscribed, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCardsSubscribedByIdCardValidateBeforeCall(idCard, key, token, cardsSubscribed, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
