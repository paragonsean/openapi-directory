/*
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Cards
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:42.043299-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Cards {
  public static final String SERIALIZED_NAME_CLOSED = "closed";
  @SerializedName(SERIALIZED_NAME_CLOSED)
  private String closed;

  public static final String SERIALIZED_NAME_DESC = "desc";
  @SerializedName(SERIALIZED_NAME_DESC)
  private String desc;

  public static final String SERIALIZED_NAME_DUE = "due";
  @SerializedName(SERIALIZED_NAME_DUE)
  private String due;

  public static final String SERIALIZED_NAME_FILE_SOURCE = "fileSource";
  @SerializedName(SERIALIZED_NAME_FILE_SOURCE)
  private String fileSource;

  public static final String SERIALIZED_NAME_ID_ATTACHMENT_COVER = "idAttachmentCover";
  @SerializedName(SERIALIZED_NAME_ID_ATTACHMENT_COVER)
  private String idAttachmentCover;

  public static final String SERIALIZED_NAME_ID_BOARD = "idBoard";
  @SerializedName(SERIALIZED_NAME_ID_BOARD)
  private String idBoard;

  public static final String SERIALIZED_NAME_ID_CARD_SOURCE = "idCardSource";
  @SerializedName(SERIALIZED_NAME_ID_CARD_SOURCE)
  private String idCardSource;

  public static final String SERIALIZED_NAME_ID_LABELS = "idLabels";
  @SerializedName(SERIALIZED_NAME_ID_LABELS)
  private String idLabels;

  public static final String SERIALIZED_NAME_ID_LIST = "idList";
  @SerializedName(SERIALIZED_NAME_ID_LIST)
  private String idList;

  public static final String SERIALIZED_NAME_ID_MEMBERS = "idMembers";
  @SerializedName(SERIALIZED_NAME_ID_MEMBERS)
  private String idMembers;

  public static final String SERIALIZED_NAME_KEEP_FROM_SOURCE = "keepFromSource";
  @SerializedName(SERIALIZED_NAME_KEEP_FROM_SOURCE)
  private String keepFromSource;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private String labels;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POS = "pos";
  @SerializedName(SERIALIZED_NAME_POS)
  private String pos;

  public static final String SERIALIZED_NAME_SUBSCRIBED = "subscribed";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBED)
  private String subscribed;

  public static final String SERIALIZED_NAME_URL_SOURCE = "urlSource";
  @SerializedName(SERIALIZED_NAME_URL_SOURCE)
  private String urlSource;

  public Cards() {
  }

  public Cards closed(String closed) {
    this.closed = closed;
    return this;
  }

  /**
   *  true or false
   * @return closed
   */
  @javax.annotation.Nullable
  public String getClosed() {
    return closed;
  }

  public void setClosed(String closed) {
    this.closed = closed;
  }


  public Cards desc(String desc) {
    this.desc = desc;
    return this;
  }

  /**
   * a string with a length from 0 to 16384
   * @return desc
   */
  @javax.annotation.Nullable
  public String getDesc() {
    return desc;
  }

  public void setDesc(String desc) {
    this.desc = desc;
  }


  public Cards due(String due) {
    this.due = due;
    return this;
  }

  /**
   * A date, or null
   * @return due
   */
  @javax.annotation.Nullable
  public String getDue() {
    return due;
  }

  public void setDue(String due) {
    this.due = due;
  }


  public Cards fileSource(String fileSource) {
    this.fileSource = fileSource;
    return this;
  }

  /**
   * A file
   * @return fileSource
   */
  @javax.annotation.Nullable
  public String getFileSource() {
    return fileSource;
  }

  public void setFileSource(String fileSource) {
    this.fileSource = fileSource;
  }


  public Cards idAttachmentCover(String idAttachmentCover) {
    this.idAttachmentCover = idAttachmentCover;
    return this;
  }

  /**
   * Id of the image attachment of this card to use as its cover, or null for no cover
   * @return idAttachmentCover
   */
  @javax.annotation.Nullable
  public String getIdAttachmentCover() {
    return idAttachmentCover;
  }

  public void setIdAttachmentCover(String idAttachmentCover) {
    this.idAttachmentCover = idAttachmentCover;
  }


  public Cards idBoard(String idBoard) {
    this.idBoard = idBoard;
    return this;
  }

  /**
   * id of the board the card should be moved to
   * @return idBoard
   */
  @javax.annotation.Nullable
  public String getIdBoard() {
    return idBoard;
  }

  public void setIdBoard(String idBoard) {
    this.idBoard = idBoard;
  }


  public Cards idCardSource(String idCardSource) {
    this.idCardSource = idCardSource;
    return this;
  }

  /**
   * The id of the card to copy into a new card.
   * @return idCardSource
   */
  @javax.annotation.Nullable
  public String getIdCardSource() {
    return idCardSource;
  }

  public void setIdCardSource(String idCardSource) {
    this.idCardSource = idCardSource;
  }


  public Cards idLabels(String idLabels) {
    this.idLabels = idLabels;
    return this;
  }

  /**
   * A comma-separated list of objectIds, 24-character hex strings
   * @return idLabels
   */
  @javax.annotation.Nullable
  public String getIdLabels() {
    return idLabels;
  }

  public void setIdLabels(String idLabels) {
    this.idLabels = idLabels;
  }


  public Cards idList(String idList) {
    this.idList = idList;
    return this;
  }

  /**
   * id of the list that the card should be added to
   * @return idList
   */
  @javax.annotation.Nullable
  public String getIdList() {
    return idList;
  }

  public void setIdList(String idList) {
    this.idList = idList;
  }


  public Cards idMembers(String idMembers) {
    this.idMembers = idMembers;
    return this;
  }

  /**
   * A comma-separated list of objectIds, 24-character hex strings
   * @return idMembers
   */
  @javax.annotation.Nullable
  public String getIdMembers() {
    return idMembers;
  }

  public void setIdMembers(String idMembers) {
    this.idMembers = idMembers;
  }


  public Cards keepFromSource(String keepFromSource) {
    this.keepFromSource = keepFromSource;
    return this;
  }

  /**
   * Properties of the card to copy over from the source.
   * @return keepFromSource
   */
  @javax.annotation.Nullable
  public String getKeepFromSource() {
    return keepFromSource;
  }

  public void setKeepFromSource(String keepFromSource) {
    this.keepFromSource = keepFromSource;
  }


  public Cards labels(String labels) {
    this.labels = labels;
    return this;
  }

  /**
   * all or a comma-separated list of: blue, green, orange, purple, red or yellow
   * @return labels
   */
  @javax.annotation.Nullable
  public String getLabels() {
    return labels;
  }

  public void setLabels(String labels) {
    this.labels = labels;
  }


  public Cards name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the new card.  It isn&amp;#39;t required if the name is being copied from provided by a URL, file or card that is being copied.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Cards pos(String pos) {
    this.pos = pos;
    return this;
  }

  /**
   * A position. top , bottom , or a positive number.
   * @return pos
   */
  @javax.annotation.Nullable
  public String getPos() {
    return pos;
  }

  public void setPos(String pos) {
    this.pos = pos;
  }


  public Cards subscribed(String subscribed) {
    this.subscribed = subscribed;
    return this;
  }

  /**
   *  true or false
   * @return subscribed
   */
  @javax.annotation.Nullable
  public String getSubscribed() {
    return subscribed;
  }

  public void setSubscribed(String subscribed) {
    this.subscribed = subscribed;
  }


  public Cards urlSource(String urlSource) {
    this.urlSource = urlSource;
    return this;
  }

  /**
   * A URL starting with http:// or https:// or null
   * @return urlSource
   */
  @javax.annotation.Nullable
  public String getUrlSource() {
    return urlSource;
  }

  public void setUrlSource(String urlSource) {
    this.urlSource = urlSource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cards cards = (Cards) o;
    return Objects.equals(this.closed, cards.closed) &&
        Objects.equals(this.desc, cards.desc) &&
        Objects.equals(this.due, cards.due) &&
        Objects.equals(this.fileSource, cards.fileSource) &&
        Objects.equals(this.idAttachmentCover, cards.idAttachmentCover) &&
        Objects.equals(this.idBoard, cards.idBoard) &&
        Objects.equals(this.idCardSource, cards.idCardSource) &&
        Objects.equals(this.idLabels, cards.idLabels) &&
        Objects.equals(this.idList, cards.idList) &&
        Objects.equals(this.idMembers, cards.idMembers) &&
        Objects.equals(this.keepFromSource, cards.keepFromSource) &&
        Objects.equals(this.labels, cards.labels) &&
        Objects.equals(this.name, cards.name) &&
        Objects.equals(this.pos, cards.pos) &&
        Objects.equals(this.subscribed, cards.subscribed) &&
        Objects.equals(this.urlSource, cards.urlSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(closed, desc, due, fileSource, idAttachmentCover, idBoard, idCardSource, idLabels, idList, idMembers, keepFromSource, labels, name, pos, subscribed, urlSource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Cards {\n");
    sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
    sb.append("    desc: ").append(toIndentedString(desc)).append("\n");
    sb.append("    due: ").append(toIndentedString(due)).append("\n");
    sb.append("    fileSource: ").append(toIndentedString(fileSource)).append("\n");
    sb.append("    idAttachmentCover: ").append(toIndentedString(idAttachmentCover)).append("\n");
    sb.append("    idBoard: ").append(toIndentedString(idBoard)).append("\n");
    sb.append("    idCardSource: ").append(toIndentedString(idCardSource)).append("\n");
    sb.append("    idLabels: ").append(toIndentedString(idLabels)).append("\n");
    sb.append("    idList: ").append(toIndentedString(idList)).append("\n");
    sb.append("    idMembers: ").append(toIndentedString(idMembers)).append("\n");
    sb.append("    keepFromSource: ").append(toIndentedString(keepFromSource)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pos: ").append(toIndentedString(pos)).append("\n");
    sb.append("    subscribed: ").append(toIndentedString(subscribed)).append("\n");
    sb.append("    urlSource: ").append(toIndentedString(urlSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("closed");
    openapiFields.add("desc");
    openapiFields.add("due");
    openapiFields.add("fileSource");
    openapiFields.add("idAttachmentCover");
    openapiFields.add("idBoard");
    openapiFields.add("idCardSource");
    openapiFields.add("idLabels");
    openapiFields.add("idList");
    openapiFields.add("idMembers");
    openapiFields.add("keepFromSource");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("pos");
    openapiFields.add("subscribed");
    openapiFields.add("urlSource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Cards
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Cards.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Cards is not found in the empty JSON string", Cards.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Cards.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Cards` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("closed") != null && !jsonObj.get("closed").isJsonNull()) && !jsonObj.get("closed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closed").toString()));
      }
      if ((jsonObj.get("desc") != null && !jsonObj.get("desc").isJsonNull()) && !jsonObj.get("desc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `desc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("desc").toString()));
      }
      if ((jsonObj.get("due") != null && !jsonObj.get("due").isJsonNull()) && !jsonObj.get("due").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `due` to be a primitive type in the JSON string but got `%s`", jsonObj.get("due").toString()));
      }
      if ((jsonObj.get("fileSource") != null && !jsonObj.get("fileSource").isJsonNull()) && !jsonObj.get("fileSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileSource").toString()));
      }
      if ((jsonObj.get("idAttachmentCover") != null && !jsonObj.get("idAttachmentCover").isJsonNull()) && !jsonObj.get("idAttachmentCover").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idAttachmentCover` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idAttachmentCover").toString()));
      }
      if ((jsonObj.get("idBoard") != null && !jsonObj.get("idBoard").isJsonNull()) && !jsonObj.get("idBoard").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idBoard` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idBoard").toString()));
      }
      if ((jsonObj.get("idCardSource") != null && !jsonObj.get("idCardSource").isJsonNull()) && !jsonObj.get("idCardSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idCardSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idCardSource").toString()));
      }
      if ((jsonObj.get("idLabels") != null && !jsonObj.get("idLabels").isJsonNull()) && !jsonObj.get("idLabels").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idLabels` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idLabels").toString()));
      }
      if ((jsonObj.get("idList") != null && !jsonObj.get("idList").isJsonNull()) && !jsonObj.get("idList").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idList` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idList").toString()));
      }
      if ((jsonObj.get("idMembers") != null && !jsonObj.get("idMembers").isJsonNull()) && !jsonObj.get("idMembers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idMembers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idMembers").toString()));
      }
      if ((jsonObj.get("keepFromSource") != null && !jsonObj.get("keepFromSource").isJsonNull()) && !jsonObj.get("keepFromSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keepFromSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keepFromSource").toString()));
      }
      if ((jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) && !jsonObj.get("labels").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("pos") != null && !jsonObj.get("pos").isJsonNull()) && !jsonObj.get("pos").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pos` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pos").toString()));
      }
      if ((jsonObj.get("subscribed") != null && !jsonObj.get("subscribed").isJsonNull()) && !jsonObj.get("subscribed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscribed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscribed").toString()));
      }
      if ((jsonObj.get("urlSource") != null && !jsonObj.get("urlSource").isJsonNull()) && !jsonObj.get("urlSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlSource").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Cards.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Cards' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Cards> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Cards.class));

       return (TypeAdapter<T>) new TypeAdapter<Cards>() {
           @Override
           public void write(JsonWriter out, Cards value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Cards read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Cards given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Cards
   * @throws IOException if the JSON string is invalid with respect to Cards
   */
  public static Cards fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Cards.class);
  }

  /**
   * Convert an instance of Cards to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

