/*
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Webhooks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:42.043299-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Webhooks {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private String active;

  public static final String SERIALIZED_NAME_CALLBACK_U_R_L = "callbackURL";
  @SerializedName(SERIALIZED_NAME_CALLBACK_U_R_L)
  private String callbackURL;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID_MODEL = "idModel";
  @SerializedName(SERIALIZED_NAME_ID_MODEL)
  private String idModel;

  public Webhooks() {
  }

  public Webhooks active(String active) {
    this.active = active;
    return this;
  }

  /**
   *  true or false
   * @return active
   */
  @javax.annotation.Nullable
  public String getActive() {
    return active;
  }

  public void setActive(String active) {
    this.active = active;
  }


  public Webhooks callbackURL(String callbackURL) {
    this.callbackURL = callbackURL;
    return this;
  }

  /**
   * A valid URL that is reachable with a HEAD request
   * @return callbackURL
   */
  @javax.annotation.Nullable
  public String getCallbackURL() {
    return callbackURL;
  }

  public void setCallbackURL(String callbackURL) {
    this.callbackURL = callbackURL;
  }


  public Webhooks description(String description) {
    this.description = description;
    return this;
  }

  /**
   * a string with a length from 0 to 16384
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Webhooks idModel(String idModel) {
    this.idModel = idModel;
    return this;
  }

  /**
   * id of the model that should be hooked
   * @return idModel
   */
  @javax.annotation.Nullable
  public String getIdModel() {
    return idModel;
  }

  public void setIdModel(String idModel) {
    this.idModel = idModel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Webhooks webhooks = (Webhooks) o;
    return Objects.equals(this.active, webhooks.active) &&
        Objects.equals(this.callbackURL, webhooks.callbackURL) &&
        Objects.equals(this.description, webhooks.description) &&
        Objects.equals(this.idModel, webhooks.idModel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, callbackURL, description, idModel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Webhooks {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    callbackURL: ").append(toIndentedString(callbackURL)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    idModel: ").append(toIndentedString(idModel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("callbackURL");
    openapiFields.add("description");
    openapiFields.add("idModel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Webhooks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Webhooks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Webhooks is not found in the empty JSON string", Webhooks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Webhooks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Webhooks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("active") != null && !jsonObj.get("active").isJsonNull()) && !jsonObj.get("active").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `active` to be a primitive type in the JSON string but got `%s`", jsonObj.get("active").toString()));
      }
      if ((jsonObj.get("callbackURL") != null && !jsonObj.get("callbackURL").isJsonNull()) && !jsonObj.get("callbackURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callbackURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callbackURL").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("idModel") != null && !jsonObj.get("idModel").isJsonNull()) && !jsonObj.get("idModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idModel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Webhooks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Webhooks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Webhooks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Webhooks.class));

       return (TypeAdapter<T>) new TypeAdapter<Webhooks>() {
           @Override
           public void write(JsonWriter out, Webhooks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Webhooks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Webhooks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Webhooks
   * @throws IOException if the JSON string is invalid with respect to Webhooks
   */
  public static Webhooks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Webhooks.class);
  }

  /**
   * Convert an instance of Webhooks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

