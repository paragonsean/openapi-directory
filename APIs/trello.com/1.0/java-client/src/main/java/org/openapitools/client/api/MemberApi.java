/*
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Members;
import org.openapitools.client.model.MembersAvatar;
import org.openapitools.client.model.MembersAvatarSource;
import org.openapitools.client.model.MembersBio;
import org.openapitools.client.model.MembersBoardBackgrounds;
import org.openapitools.client.model.MembersBoardStars;
import org.openapitools.client.model.MembersBoardStarsIdBoard;
import org.openapitools.client.model.MembersBoardStarsPos;
import org.openapitools.client.model.MembersCustomBoardBackgrounds;
import org.openapitools.client.model.MembersCustomEmoji;
import org.openapitools.client.model.MembersCustomStickers;
import org.openapitools.client.model.MembersFullName;
import org.openapitools.client.model.MembersInitials;
import org.openapitools.client.model.MembersOneTimeMessagesDismissed;
import org.openapitools.client.model.MembersSavedSearches;
import org.openapitools.client.model.MembersSavedSearchesName;
import org.openapitools.client.model.MembersSavedSearchesPos;
import org.openapitools.client.model.MembersSavedSearchesQuery;
import org.openapitools.client.model.MembersUsername;
import org.openapitools.client.model.PrefsColorBlind;
import org.openapitools.client.model.PrefsLocale;
import org.openapitools.client.model.PrefsMinutesBetweenSummaries;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MemberApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MemberApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MemberApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addMembersAvatarByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersAvatar Attributes of \&quot;Members Avatar\&quot; to be added. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMembersAvatarByIdMemberCall(String idMember, String key, String token, MembersAvatar membersAvatar, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersAvatar;

        // create path and map variables
        String localVarPath = "/members/{idMember}/avatar"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMembersAvatarByIdMemberValidateBeforeCall(String idMember, String key, String token, MembersAvatar membersAvatar, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling addMembersAvatarByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addMembersAvatarByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addMembersAvatarByIdMember(Async)");
        }

        // verify the required parameter 'membersAvatar' is set
        if (membersAvatar == null) {
            throw new ApiException("Missing the required parameter 'membersAvatar' when calling addMembersAvatarByIdMember(Async)");
        }

        return addMembersAvatarByIdMemberCall(idMember, key, token, membersAvatar, _callback);

    }

    /**
     * addMembersAvatarByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersAvatar Attributes of \&quot;Members Avatar\&quot; to be added. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void addMembersAvatarByIdMember(String idMember, String key, String token, MembersAvatar membersAvatar) throws ApiException {
        addMembersAvatarByIdMemberWithHttpInfo(idMember, key, token, membersAvatar);
    }

    /**
     * addMembersAvatarByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersAvatar Attributes of \&quot;Members Avatar\&quot; to be added. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addMembersAvatarByIdMemberWithHttpInfo(String idMember, String key, String token, MembersAvatar membersAvatar) throws ApiException {
        okhttp3.Call localVarCall = addMembersAvatarByIdMemberValidateBeforeCall(idMember, key, token, membersAvatar, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * addMembersAvatarByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersAvatar Attributes of \&quot;Members Avatar\&quot; to be added. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMembersAvatarByIdMemberAsync(String idMember, String key, String token, MembersAvatar membersAvatar, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMembersAvatarByIdMemberValidateBeforeCall(idMember, key, token, membersAvatar, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addMembersBoardBackgroundsByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersBoardBackgrounds Attributes of \&quot;Members Board Backgrounds\&quot; to be added. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMembersBoardBackgroundsByIdMemberCall(String idMember, String key, String token, MembersBoardBackgrounds membersBoardBackgrounds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersBoardBackgrounds;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boardBackgrounds"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMembersBoardBackgroundsByIdMemberValidateBeforeCall(String idMember, String key, String token, MembersBoardBackgrounds membersBoardBackgrounds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling addMembersBoardBackgroundsByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addMembersBoardBackgroundsByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addMembersBoardBackgroundsByIdMember(Async)");
        }

        // verify the required parameter 'membersBoardBackgrounds' is set
        if (membersBoardBackgrounds == null) {
            throw new ApiException("Missing the required parameter 'membersBoardBackgrounds' when calling addMembersBoardBackgroundsByIdMember(Async)");
        }

        return addMembersBoardBackgroundsByIdMemberCall(idMember, key, token, membersBoardBackgrounds, _callback);

    }

    /**
     * addMembersBoardBackgroundsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersBoardBackgrounds Attributes of \&quot;Members Board Backgrounds\&quot; to be added. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void addMembersBoardBackgroundsByIdMember(String idMember, String key, String token, MembersBoardBackgrounds membersBoardBackgrounds) throws ApiException {
        addMembersBoardBackgroundsByIdMemberWithHttpInfo(idMember, key, token, membersBoardBackgrounds);
    }

    /**
     * addMembersBoardBackgroundsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersBoardBackgrounds Attributes of \&quot;Members Board Backgrounds\&quot; to be added. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addMembersBoardBackgroundsByIdMemberWithHttpInfo(String idMember, String key, String token, MembersBoardBackgrounds membersBoardBackgrounds) throws ApiException {
        okhttp3.Call localVarCall = addMembersBoardBackgroundsByIdMemberValidateBeforeCall(idMember, key, token, membersBoardBackgrounds, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * addMembersBoardBackgroundsByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersBoardBackgrounds Attributes of \&quot;Members Board Backgrounds\&quot; to be added. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMembersBoardBackgroundsByIdMemberAsync(String idMember, String key, String token, MembersBoardBackgrounds membersBoardBackgrounds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMembersBoardBackgroundsByIdMemberValidateBeforeCall(idMember, key, token, membersBoardBackgrounds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addMembersBoardStarsByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersBoardStars Attributes of \&quot;Members Board Stars\&quot; to be added. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMembersBoardStarsByIdMemberCall(String idMember, String key, String token, MembersBoardStars membersBoardStars, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersBoardStars;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boardStars"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMembersBoardStarsByIdMemberValidateBeforeCall(String idMember, String key, String token, MembersBoardStars membersBoardStars, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling addMembersBoardStarsByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addMembersBoardStarsByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addMembersBoardStarsByIdMember(Async)");
        }

        // verify the required parameter 'membersBoardStars' is set
        if (membersBoardStars == null) {
            throw new ApiException("Missing the required parameter 'membersBoardStars' when calling addMembersBoardStarsByIdMember(Async)");
        }

        return addMembersBoardStarsByIdMemberCall(idMember, key, token, membersBoardStars, _callback);

    }

    /**
     * addMembersBoardStarsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersBoardStars Attributes of \&quot;Members Board Stars\&quot; to be added. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void addMembersBoardStarsByIdMember(String idMember, String key, String token, MembersBoardStars membersBoardStars) throws ApiException {
        addMembersBoardStarsByIdMemberWithHttpInfo(idMember, key, token, membersBoardStars);
    }

    /**
     * addMembersBoardStarsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersBoardStars Attributes of \&quot;Members Board Stars\&quot; to be added. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addMembersBoardStarsByIdMemberWithHttpInfo(String idMember, String key, String token, MembersBoardStars membersBoardStars) throws ApiException {
        okhttp3.Call localVarCall = addMembersBoardStarsByIdMemberValidateBeforeCall(idMember, key, token, membersBoardStars, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * addMembersBoardStarsByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersBoardStars Attributes of \&quot;Members Board Stars\&quot; to be added. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMembersBoardStarsByIdMemberAsync(String idMember, String key, String token, MembersBoardStars membersBoardStars, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMembersBoardStarsByIdMemberValidateBeforeCall(idMember, key, token, membersBoardStars, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addMembersCustomBoardBackgroundsByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersCustomBoardBackgrounds Attributes of \&quot;Members Custom Board Backgrounds\&quot; to be added. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMembersCustomBoardBackgroundsByIdMemberCall(String idMember, String key, String token, MembersCustomBoardBackgrounds membersCustomBoardBackgrounds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersCustomBoardBackgrounds;

        // create path and map variables
        String localVarPath = "/members/{idMember}/customBoardBackgrounds"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMembersCustomBoardBackgroundsByIdMemberValidateBeforeCall(String idMember, String key, String token, MembersCustomBoardBackgrounds membersCustomBoardBackgrounds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling addMembersCustomBoardBackgroundsByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addMembersCustomBoardBackgroundsByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addMembersCustomBoardBackgroundsByIdMember(Async)");
        }

        // verify the required parameter 'membersCustomBoardBackgrounds' is set
        if (membersCustomBoardBackgrounds == null) {
            throw new ApiException("Missing the required parameter 'membersCustomBoardBackgrounds' when calling addMembersCustomBoardBackgroundsByIdMember(Async)");
        }

        return addMembersCustomBoardBackgroundsByIdMemberCall(idMember, key, token, membersCustomBoardBackgrounds, _callback);

    }

    /**
     * addMembersCustomBoardBackgroundsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersCustomBoardBackgrounds Attributes of \&quot;Members Custom Board Backgrounds\&quot; to be added. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void addMembersCustomBoardBackgroundsByIdMember(String idMember, String key, String token, MembersCustomBoardBackgrounds membersCustomBoardBackgrounds) throws ApiException {
        addMembersCustomBoardBackgroundsByIdMemberWithHttpInfo(idMember, key, token, membersCustomBoardBackgrounds);
    }

    /**
     * addMembersCustomBoardBackgroundsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersCustomBoardBackgrounds Attributes of \&quot;Members Custom Board Backgrounds\&quot; to be added. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addMembersCustomBoardBackgroundsByIdMemberWithHttpInfo(String idMember, String key, String token, MembersCustomBoardBackgrounds membersCustomBoardBackgrounds) throws ApiException {
        okhttp3.Call localVarCall = addMembersCustomBoardBackgroundsByIdMemberValidateBeforeCall(idMember, key, token, membersCustomBoardBackgrounds, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * addMembersCustomBoardBackgroundsByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersCustomBoardBackgrounds Attributes of \&quot;Members Custom Board Backgrounds\&quot; to be added. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMembersCustomBoardBackgroundsByIdMemberAsync(String idMember, String key, String token, MembersCustomBoardBackgrounds membersCustomBoardBackgrounds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMembersCustomBoardBackgroundsByIdMemberValidateBeforeCall(idMember, key, token, membersCustomBoardBackgrounds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addMembersCustomEmojiByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersCustomEmoji Attributes of \&quot;Members Custom Emoji\&quot; to be added. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMembersCustomEmojiByIdMemberCall(String idMember, String key, String token, MembersCustomEmoji membersCustomEmoji, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersCustomEmoji;

        // create path and map variables
        String localVarPath = "/members/{idMember}/customEmoji"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMembersCustomEmojiByIdMemberValidateBeforeCall(String idMember, String key, String token, MembersCustomEmoji membersCustomEmoji, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling addMembersCustomEmojiByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addMembersCustomEmojiByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addMembersCustomEmojiByIdMember(Async)");
        }

        // verify the required parameter 'membersCustomEmoji' is set
        if (membersCustomEmoji == null) {
            throw new ApiException("Missing the required parameter 'membersCustomEmoji' when calling addMembersCustomEmojiByIdMember(Async)");
        }

        return addMembersCustomEmojiByIdMemberCall(idMember, key, token, membersCustomEmoji, _callback);

    }

    /**
     * addMembersCustomEmojiByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersCustomEmoji Attributes of \&quot;Members Custom Emoji\&quot; to be added. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void addMembersCustomEmojiByIdMember(String idMember, String key, String token, MembersCustomEmoji membersCustomEmoji) throws ApiException {
        addMembersCustomEmojiByIdMemberWithHttpInfo(idMember, key, token, membersCustomEmoji);
    }

    /**
     * addMembersCustomEmojiByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersCustomEmoji Attributes of \&quot;Members Custom Emoji\&quot; to be added. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addMembersCustomEmojiByIdMemberWithHttpInfo(String idMember, String key, String token, MembersCustomEmoji membersCustomEmoji) throws ApiException {
        okhttp3.Call localVarCall = addMembersCustomEmojiByIdMemberValidateBeforeCall(idMember, key, token, membersCustomEmoji, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * addMembersCustomEmojiByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersCustomEmoji Attributes of \&quot;Members Custom Emoji\&quot; to be added. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMembersCustomEmojiByIdMemberAsync(String idMember, String key, String token, MembersCustomEmoji membersCustomEmoji, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMembersCustomEmojiByIdMemberValidateBeforeCall(idMember, key, token, membersCustomEmoji, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addMembersCustomStickersByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersCustomStickers Attributes of \&quot;Members Custom Stickers\&quot; to be added. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMembersCustomStickersByIdMemberCall(String idMember, String key, String token, MembersCustomStickers membersCustomStickers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersCustomStickers;

        // create path and map variables
        String localVarPath = "/members/{idMember}/customStickers"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMembersCustomStickersByIdMemberValidateBeforeCall(String idMember, String key, String token, MembersCustomStickers membersCustomStickers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling addMembersCustomStickersByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addMembersCustomStickersByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addMembersCustomStickersByIdMember(Async)");
        }

        // verify the required parameter 'membersCustomStickers' is set
        if (membersCustomStickers == null) {
            throw new ApiException("Missing the required parameter 'membersCustomStickers' when calling addMembersCustomStickersByIdMember(Async)");
        }

        return addMembersCustomStickersByIdMemberCall(idMember, key, token, membersCustomStickers, _callback);

    }

    /**
     * addMembersCustomStickersByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersCustomStickers Attributes of \&quot;Members Custom Stickers\&quot; to be added. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void addMembersCustomStickersByIdMember(String idMember, String key, String token, MembersCustomStickers membersCustomStickers) throws ApiException {
        addMembersCustomStickersByIdMemberWithHttpInfo(idMember, key, token, membersCustomStickers);
    }

    /**
     * addMembersCustomStickersByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersCustomStickers Attributes of \&quot;Members Custom Stickers\&quot; to be added. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addMembersCustomStickersByIdMemberWithHttpInfo(String idMember, String key, String token, MembersCustomStickers membersCustomStickers) throws ApiException {
        okhttp3.Call localVarCall = addMembersCustomStickersByIdMemberValidateBeforeCall(idMember, key, token, membersCustomStickers, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * addMembersCustomStickersByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersCustomStickers Attributes of \&quot;Members Custom Stickers\&quot; to be added. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMembersCustomStickersByIdMemberAsync(String idMember, String key, String token, MembersCustomStickers membersCustomStickers, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMembersCustomStickersByIdMemberValidateBeforeCall(idMember, key, token, membersCustomStickers, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addMembersOneTimeMessagesDismissedByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersOneTimeMessagesDismissed Attributes of \&quot;Members One Time Messages Dismissed\&quot; to be added. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMembersOneTimeMessagesDismissedByIdMemberCall(String idMember, String key, String token, MembersOneTimeMessagesDismissed membersOneTimeMessagesDismissed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersOneTimeMessagesDismissed;

        // create path and map variables
        String localVarPath = "/members/{idMember}/oneTimeMessagesDismissed"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMembersOneTimeMessagesDismissedByIdMemberValidateBeforeCall(String idMember, String key, String token, MembersOneTimeMessagesDismissed membersOneTimeMessagesDismissed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling addMembersOneTimeMessagesDismissedByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addMembersOneTimeMessagesDismissedByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addMembersOneTimeMessagesDismissedByIdMember(Async)");
        }

        // verify the required parameter 'membersOneTimeMessagesDismissed' is set
        if (membersOneTimeMessagesDismissed == null) {
            throw new ApiException("Missing the required parameter 'membersOneTimeMessagesDismissed' when calling addMembersOneTimeMessagesDismissedByIdMember(Async)");
        }

        return addMembersOneTimeMessagesDismissedByIdMemberCall(idMember, key, token, membersOneTimeMessagesDismissed, _callback);

    }

    /**
     * addMembersOneTimeMessagesDismissedByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersOneTimeMessagesDismissed Attributes of \&quot;Members One Time Messages Dismissed\&quot; to be added. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void addMembersOneTimeMessagesDismissedByIdMember(String idMember, String key, String token, MembersOneTimeMessagesDismissed membersOneTimeMessagesDismissed) throws ApiException {
        addMembersOneTimeMessagesDismissedByIdMemberWithHttpInfo(idMember, key, token, membersOneTimeMessagesDismissed);
    }

    /**
     * addMembersOneTimeMessagesDismissedByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersOneTimeMessagesDismissed Attributes of \&quot;Members One Time Messages Dismissed\&quot; to be added. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addMembersOneTimeMessagesDismissedByIdMemberWithHttpInfo(String idMember, String key, String token, MembersOneTimeMessagesDismissed membersOneTimeMessagesDismissed) throws ApiException {
        okhttp3.Call localVarCall = addMembersOneTimeMessagesDismissedByIdMemberValidateBeforeCall(idMember, key, token, membersOneTimeMessagesDismissed, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * addMembersOneTimeMessagesDismissedByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersOneTimeMessagesDismissed Attributes of \&quot;Members One Time Messages Dismissed\&quot; to be added. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMembersOneTimeMessagesDismissedByIdMemberAsync(String idMember, String key, String token, MembersOneTimeMessagesDismissed membersOneTimeMessagesDismissed, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMembersOneTimeMessagesDismissedByIdMemberValidateBeforeCall(idMember, key, token, membersOneTimeMessagesDismissed, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addMembersSavedSearchesByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersSavedSearches Attributes of \&quot;Members Saved Searches\&quot; to be added. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMembersSavedSearchesByIdMemberCall(String idMember, String key, String token, MembersSavedSearches membersSavedSearches, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersSavedSearches;

        // create path and map variables
        String localVarPath = "/members/{idMember}/savedSearches"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMembersSavedSearchesByIdMemberValidateBeforeCall(String idMember, String key, String token, MembersSavedSearches membersSavedSearches, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling addMembersSavedSearchesByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling addMembersSavedSearchesByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addMembersSavedSearchesByIdMember(Async)");
        }

        // verify the required parameter 'membersSavedSearches' is set
        if (membersSavedSearches == null) {
            throw new ApiException("Missing the required parameter 'membersSavedSearches' when calling addMembersSavedSearchesByIdMember(Async)");
        }

        return addMembersSavedSearchesByIdMemberCall(idMember, key, token, membersSavedSearches, _callback);

    }

    /**
     * addMembersSavedSearchesByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersSavedSearches Attributes of \&quot;Members Saved Searches\&quot; to be added. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void addMembersSavedSearchesByIdMember(String idMember, String key, String token, MembersSavedSearches membersSavedSearches) throws ApiException {
        addMembersSavedSearchesByIdMemberWithHttpInfo(idMember, key, token, membersSavedSearches);
    }

    /**
     * addMembersSavedSearchesByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersSavedSearches Attributes of \&quot;Members Saved Searches\&quot; to be added. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addMembersSavedSearchesByIdMemberWithHttpInfo(String idMember, String key, String token, MembersSavedSearches membersSavedSearches) throws ApiException {
        okhttp3.Call localVarCall = addMembersSavedSearchesByIdMemberValidateBeforeCall(idMember, key, token, membersSavedSearches, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * addMembersSavedSearchesByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersSavedSearches Attributes of \&quot;Members Saved Searches\&quot; to be added. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMembersSavedSearchesByIdMemberAsync(String idMember, String key, String token, MembersSavedSearches membersSavedSearches, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMembersSavedSearchesByIdMemberValidateBeforeCall(idMember, key, token, membersSavedSearches, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMembersBoardBackgroundsByIdMemberByIdBoardBackgroundCall(String idMember, String idBoardBackground, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boardBackgrounds/{idBoardBackground}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idBoardBackground" + "}", localVarApiClient.escapeString(idBoardBackground.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMembersBoardBackgroundsByIdMemberByIdBoardBackgroundValidateBeforeCall(String idMember, String idBoardBackground, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground(Async)");
        }

        // verify the required parameter 'idBoardBackground' is set
        if (idBoardBackground == null) {
            throw new ApiException("Missing the required parameter 'idBoardBackground' when calling deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground(Async)");
        }

        return deleteMembersBoardBackgroundsByIdMemberByIdBoardBackgroundCall(idMember, idBoardBackground, key, token, _callback);

    }

    /**
     * deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground(String idMember, String idBoardBackground, String key, String token) throws ApiException {
        deleteMembersBoardBackgroundsByIdMemberByIdBoardBackgroundWithHttpInfo(idMember, idBoardBackground, key, token);
    }

    /**
     * deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMembersBoardBackgroundsByIdMemberByIdBoardBackgroundWithHttpInfo(String idMember, String idBoardBackground, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = deleteMembersBoardBackgroundsByIdMemberByIdBoardBackgroundValidateBeforeCall(idMember, idBoardBackground, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMembersBoardBackgroundsByIdMemberByIdBoardBackgroundAsync(String idMember, String idBoardBackground, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMembersBoardBackgroundsByIdMemberByIdBoardBackgroundValidateBeforeCall(idMember, idBoardBackground, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMembersBoardStarsByIdMemberByIdBoardStar
     * @param idMember idMember or username (required)
     * @param idBoardStar idBoardStar (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMembersBoardStarsByIdMemberByIdBoardStarCall(String idMember, String idBoardStar, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boardStars/{idBoardStar}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idBoardStar" + "}", localVarApiClient.escapeString(idBoardStar.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMembersBoardStarsByIdMemberByIdBoardStarValidateBeforeCall(String idMember, String idBoardStar, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling deleteMembersBoardStarsByIdMemberByIdBoardStar(Async)");
        }

        // verify the required parameter 'idBoardStar' is set
        if (idBoardStar == null) {
            throw new ApiException("Missing the required parameter 'idBoardStar' when calling deleteMembersBoardStarsByIdMemberByIdBoardStar(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteMembersBoardStarsByIdMemberByIdBoardStar(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteMembersBoardStarsByIdMemberByIdBoardStar(Async)");
        }

        return deleteMembersBoardStarsByIdMemberByIdBoardStarCall(idMember, idBoardStar, key, token, _callback);

    }

    /**
     * deleteMembersBoardStarsByIdMemberByIdBoardStar()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardStar idBoardStar (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMembersBoardStarsByIdMemberByIdBoardStar(String idMember, String idBoardStar, String key, String token) throws ApiException {
        deleteMembersBoardStarsByIdMemberByIdBoardStarWithHttpInfo(idMember, idBoardStar, key, token);
    }

    /**
     * deleteMembersBoardStarsByIdMemberByIdBoardStar()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardStar idBoardStar (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMembersBoardStarsByIdMemberByIdBoardStarWithHttpInfo(String idMember, String idBoardStar, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = deleteMembersBoardStarsByIdMemberByIdBoardStarValidateBeforeCall(idMember, idBoardStar, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * deleteMembersBoardStarsByIdMemberByIdBoardStar() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param idBoardStar idBoardStar (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMembersBoardStarsByIdMemberByIdBoardStarAsync(String idMember, String idBoardStar, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMembersBoardStarsByIdMemberByIdBoardStarValidateBeforeCall(idMember, idBoardStar, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundCall(String idMember, String idBoardBackground, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/customBoardBackgrounds/{idBoardBackground}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idBoardBackground" + "}", localVarApiClient.escapeString(idBoardBackground.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundValidateBeforeCall(String idMember, String idBoardBackground, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground(Async)");
        }

        // verify the required parameter 'idBoardBackground' is set
        if (idBoardBackground == null) {
            throw new ApiException("Missing the required parameter 'idBoardBackground' when calling deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground(Async)");
        }

        return deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundCall(idMember, idBoardBackground, key, token, _callback);

    }

    /**
     * deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground(String idMember, String idBoardBackground, String key, String token) throws ApiException {
        deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundWithHttpInfo(idMember, idBoardBackground, key, token);
    }

    /**
     * deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundWithHttpInfo(String idMember, String idBoardBackground, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundValidateBeforeCall(idMember, idBoardBackground, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundAsync(String idMember, String idBoardBackground, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundValidateBeforeCall(idMember, idBoardBackground, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMembersCustomStickersByIdMemberByIdCustomSticker
     * @param idMember idMember or username (required)
     * @param idCustomSticker idCustomSticker (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMembersCustomStickersByIdMemberByIdCustomStickerCall(String idMember, String idCustomSticker, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/customStickers/{idCustomSticker}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idCustomSticker" + "}", localVarApiClient.escapeString(idCustomSticker.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMembersCustomStickersByIdMemberByIdCustomStickerValidateBeforeCall(String idMember, String idCustomSticker, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling deleteMembersCustomStickersByIdMemberByIdCustomSticker(Async)");
        }

        // verify the required parameter 'idCustomSticker' is set
        if (idCustomSticker == null) {
            throw new ApiException("Missing the required parameter 'idCustomSticker' when calling deleteMembersCustomStickersByIdMemberByIdCustomSticker(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteMembersCustomStickersByIdMemberByIdCustomSticker(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteMembersCustomStickersByIdMemberByIdCustomSticker(Async)");
        }

        return deleteMembersCustomStickersByIdMemberByIdCustomStickerCall(idMember, idCustomSticker, key, token, _callback);

    }

    /**
     * deleteMembersCustomStickersByIdMemberByIdCustomSticker()
     * 
     * @param idMember idMember or username (required)
     * @param idCustomSticker idCustomSticker (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMembersCustomStickersByIdMemberByIdCustomSticker(String idMember, String idCustomSticker, String key, String token) throws ApiException {
        deleteMembersCustomStickersByIdMemberByIdCustomStickerWithHttpInfo(idMember, idCustomSticker, key, token);
    }

    /**
     * deleteMembersCustomStickersByIdMemberByIdCustomSticker()
     * 
     * @param idMember idMember or username (required)
     * @param idCustomSticker idCustomSticker (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMembersCustomStickersByIdMemberByIdCustomStickerWithHttpInfo(String idMember, String idCustomSticker, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = deleteMembersCustomStickersByIdMemberByIdCustomStickerValidateBeforeCall(idMember, idCustomSticker, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * deleteMembersCustomStickersByIdMemberByIdCustomSticker() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param idCustomSticker idCustomSticker (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMembersCustomStickersByIdMemberByIdCustomStickerAsync(String idMember, String idCustomSticker, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMembersCustomStickersByIdMemberByIdCustomStickerValidateBeforeCall(idMember, idCustomSticker, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMembersSavedSearchesByIdMemberByIdSavedSearch
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMembersSavedSearchesByIdMemberByIdSavedSearchCall(String idMember, String idSavedSearch, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/savedSearches/{idSavedSearch}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idSavedSearch" + "}", localVarApiClient.escapeString(idSavedSearch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMembersSavedSearchesByIdMemberByIdSavedSearchValidateBeforeCall(String idMember, String idSavedSearch, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling deleteMembersSavedSearchesByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'idSavedSearch' is set
        if (idSavedSearch == null) {
            throw new ApiException("Missing the required parameter 'idSavedSearch' when calling deleteMembersSavedSearchesByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteMembersSavedSearchesByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteMembersSavedSearchesByIdMemberByIdSavedSearch(Async)");
        }

        return deleteMembersSavedSearchesByIdMemberByIdSavedSearchCall(idMember, idSavedSearch, key, token, _callback);

    }

    /**
     * deleteMembersSavedSearchesByIdMemberByIdSavedSearch()
     * 
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMembersSavedSearchesByIdMemberByIdSavedSearch(String idMember, String idSavedSearch, String key, String token) throws ApiException {
        deleteMembersSavedSearchesByIdMemberByIdSavedSearchWithHttpInfo(idMember, idSavedSearch, key, token);
    }

    /**
     * deleteMembersSavedSearchesByIdMemberByIdSavedSearch()
     * 
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMembersSavedSearchesByIdMemberByIdSavedSearchWithHttpInfo(String idMember, String idSavedSearch, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = deleteMembersSavedSearchesByIdMemberByIdSavedSearchValidateBeforeCall(idMember, idSavedSearch, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * deleteMembersSavedSearchesByIdMemberByIdSavedSearch() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMembersSavedSearchesByIdMemberByIdSavedSearchAsync(String idMember, String idSavedSearch, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMembersSavedSearchesByIdMemberByIdSavedSearchValidateBeforeCall(idMember, idSavedSearch, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersActionsByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param entities  true or false (optional)
     * @param display  true or false (optional)
     * @param filter all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional, default to all)
     * @param fields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param limit a number from 0 to 1000 (optional, default to 50)
     * @param format One of: count, list or minimal (optional, default to list)
     * @param since A date, null or lastView (optional)
     * @param before A date, or null (optional)
     * @param page Page * limit must be less than 1000 (optional, default to 0)
     * @param idModels Only return actions related to these model ids (optional)
     * @param member  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param memberCreator  true or false (optional)
     * @param memberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersActionsByIdMemberCall(String idMember, String key, String token, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/actions"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entities", entities));
        }

        if (display != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("display", display));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (idModels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idModels", idModels));
        }

        if (member != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member", member));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        if (memberCreator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberCreator", memberCreator));
        }

        if (memberCreatorFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberCreator_fields", memberCreatorFields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersActionsByIdMemberValidateBeforeCall(String idMember, String key, String token, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersActionsByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersActionsByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersActionsByIdMember(Async)");
        }

        return getMembersActionsByIdMemberCall(idMember, key, token, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, _callback);

    }

    /**
     * getMembersActionsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param entities  true or false (optional)
     * @param display  true or false (optional)
     * @param filter all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional, default to all)
     * @param fields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param limit a number from 0 to 1000 (optional, default to 50)
     * @param format One of: count, list or minimal (optional, default to list)
     * @param since A date, null or lastView (optional)
     * @param before A date, or null (optional)
     * @param page Page * limit must be less than 1000 (optional, default to 0)
     * @param idModels Only return actions related to these model ids (optional)
     * @param member  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param memberCreator  true or false (optional)
     * @param memberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersActionsByIdMember(String idMember, String key, String token, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields) throws ApiException {
        getMembersActionsByIdMemberWithHttpInfo(idMember, key, token, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields);
    }

    /**
     * getMembersActionsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param entities  true or false (optional)
     * @param display  true or false (optional)
     * @param filter all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional, default to all)
     * @param fields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param limit a number from 0 to 1000 (optional, default to 50)
     * @param format One of: count, list or minimal (optional, default to list)
     * @param since A date, null or lastView (optional)
     * @param before A date, or null (optional)
     * @param page Page * limit must be less than 1000 (optional, default to 0)
     * @param idModels Only return actions related to these model ids (optional)
     * @param member  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param memberCreator  true or false (optional)
     * @param memberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersActionsByIdMemberWithHttpInfo(String idMember, String key, String token, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields) throws ApiException {
        okhttp3.Call localVarCall = getMembersActionsByIdMemberValidateBeforeCall(idMember, key, token, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersActionsByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param entities  true or false (optional)
     * @param display  true or false (optional)
     * @param filter all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional, default to all)
     * @param fields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param limit a number from 0 to 1000 (optional, default to 50)
     * @param format One of: count, list or minimal (optional, default to list)
     * @param since A date, null or lastView (optional)
     * @param before A date, or null (optional)
     * @param page Page * limit must be less than 1000 (optional, default to 0)
     * @param idModels Only return actions related to these model ids (optional)
     * @param member  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param memberCreator  true or false (optional)
     * @param memberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersActionsByIdMemberAsync(String idMember, String key, String token, String entities, String display, String filter, String fields, String limit, String format, String since, String before, String page, String idModels, String member, String memberFields, String memberCreator, String memberCreatorFields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersActionsByIdMemberValidateBeforeCall(idMember, key, token, entities, display, filter, fields, limit, format, since, before, page, idModels, member, memberFields, memberCreator, memberCreatorFields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersBoardBackgroundsByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: all, custom, default, none or premium (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersBoardBackgroundsByIdMemberCall(String idMember, String key, String token, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boardBackgrounds"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersBoardBackgroundsByIdMemberValidateBeforeCall(String idMember, String key, String token, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersBoardBackgroundsByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersBoardBackgroundsByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersBoardBackgroundsByIdMember(Async)");
        }

        return getMembersBoardBackgroundsByIdMemberCall(idMember, key, token, filter, _callback);

    }

    /**
     * getMembersBoardBackgroundsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: all, custom, default, none or premium (optional, default to all)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersBoardBackgroundsByIdMember(String idMember, String key, String token, String filter) throws ApiException {
        getMembersBoardBackgroundsByIdMemberWithHttpInfo(idMember, key, token, filter);
    }

    /**
     * getMembersBoardBackgroundsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: all, custom, default, none or premium (optional, default to all)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersBoardBackgroundsByIdMemberWithHttpInfo(String idMember, String key, String token, String filter) throws ApiException {
        okhttp3.Call localVarCall = getMembersBoardBackgroundsByIdMemberValidateBeforeCall(idMember, key, token, filter, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersBoardBackgroundsByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: all, custom, default, none or premium (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersBoardBackgroundsByIdMemberAsync(String idMember, String key, String token, String filter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersBoardBackgroundsByIdMemberValidateBeforeCall(idMember, key, token, filter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersBoardBackgroundsByIdMemberByIdBoardBackground
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersBoardBackgroundsByIdMemberByIdBoardBackgroundCall(String idMember, String idBoardBackground, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boardBackgrounds/{idBoardBackground}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idBoardBackground" + "}", localVarApiClient.escapeString(idBoardBackground.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersBoardBackgroundsByIdMemberByIdBoardBackgroundValidateBeforeCall(String idMember, String idBoardBackground, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersBoardBackgroundsByIdMemberByIdBoardBackground(Async)");
        }

        // verify the required parameter 'idBoardBackground' is set
        if (idBoardBackground == null) {
            throw new ApiException("Missing the required parameter 'idBoardBackground' when calling getMembersBoardBackgroundsByIdMemberByIdBoardBackground(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersBoardBackgroundsByIdMemberByIdBoardBackground(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersBoardBackgroundsByIdMemberByIdBoardBackground(Async)");
        }

        return getMembersBoardBackgroundsByIdMemberByIdBoardBackgroundCall(idMember, idBoardBackground, key, token, fields, _callback);

    }

    /**
     * getMembersBoardBackgroundsByIdMemberByIdBoardBackground()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile (optional, default to all)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersBoardBackgroundsByIdMemberByIdBoardBackground(String idMember, String idBoardBackground, String key, String token, String fields) throws ApiException {
        getMembersBoardBackgroundsByIdMemberByIdBoardBackgroundWithHttpInfo(idMember, idBoardBackground, key, token, fields);
    }

    /**
     * getMembersBoardBackgroundsByIdMemberByIdBoardBackground()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile (optional, default to all)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersBoardBackgroundsByIdMemberByIdBoardBackgroundWithHttpInfo(String idMember, String idBoardBackground, String key, String token, String fields) throws ApiException {
        okhttp3.Call localVarCall = getMembersBoardBackgroundsByIdMemberByIdBoardBackgroundValidateBeforeCall(idMember, idBoardBackground, key, token, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersBoardBackgroundsByIdMemberByIdBoardBackground() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersBoardBackgroundsByIdMemberByIdBoardBackgroundAsync(String idMember, String idBoardBackground, String key, String token, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersBoardBackgroundsByIdMemberByIdBoardBackgroundValidateBeforeCall(idMember, idBoardBackground, key, token, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersBoardStarsByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersBoardStarsByIdMemberCall(String idMember, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boardStars"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersBoardStarsByIdMemberValidateBeforeCall(String idMember, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersBoardStarsByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersBoardStarsByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersBoardStarsByIdMember(Async)");
        }

        return getMembersBoardStarsByIdMemberCall(idMember, key, token, _callback);

    }

    /**
     * getMembersBoardStarsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersBoardStarsByIdMember(String idMember, String key, String token) throws ApiException {
        getMembersBoardStarsByIdMemberWithHttpInfo(idMember, key, token);
    }

    /**
     * getMembersBoardStarsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersBoardStarsByIdMemberWithHttpInfo(String idMember, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = getMembersBoardStarsByIdMemberValidateBeforeCall(idMember, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersBoardStarsByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersBoardStarsByIdMemberAsync(String idMember, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersBoardStarsByIdMemberValidateBeforeCall(idMember, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersBoardStarsByIdMemberByIdBoardStar
     * @param idMember idMember or username (required)
     * @param idBoardStar idBoardStar (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersBoardStarsByIdMemberByIdBoardStarCall(String idMember, String idBoardStar, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boardStars/{idBoardStar}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idBoardStar" + "}", localVarApiClient.escapeString(idBoardStar.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersBoardStarsByIdMemberByIdBoardStarValidateBeforeCall(String idMember, String idBoardStar, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersBoardStarsByIdMemberByIdBoardStar(Async)");
        }

        // verify the required parameter 'idBoardStar' is set
        if (idBoardStar == null) {
            throw new ApiException("Missing the required parameter 'idBoardStar' when calling getMembersBoardStarsByIdMemberByIdBoardStar(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersBoardStarsByIdMemberByIdBoardStar(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersBoardStarsByIdMemberByIdBoardStar(Async)");
        }

        return getMembersBoardStarsByIdMemberByIdBoardStarCall(idMember, idBoardStar, key, token, _callback);

    }

    /**
     * getMembersBoardStarsByIdMemberByIdBoardStar()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardStar idBoardStar (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersBoardStarsByIdMemberByIdBoardStar(String idMember, String idBoardStar, String key, String token) throws ApiException {
        getMembersBoardStarsByIdMemberByIdBoardStarWithHttpInfo(idMember, idBoardStar, key, token);
    }

    /**
     * getMembersBoardStarsByIdMemberByIdBoardStar()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardStar idBoardStar (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersBoardStarsByIdMemberByIdBoardStarWithHttpInfo(String idMember, String idBoardStar, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = getMembersBoardStarsByIdMemberByIdBoardStarValidateBeforeCall(idMember, idBoardStar, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersBoardStarsByIdMemberByIdBoardStar() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param idBoardStar idBoardStar (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersBoardStarsByIdMemberByIdBoardStarAsync(String idMember, String idBoardStar, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersBoardStarsByIdMemberByIdBoardStarValidateBeforeCall(idMember, idBoardStar, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersBoardsByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned (optional, default to all)
     * @param fields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to all)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param actionsEntities  true or false (optional)
     * @param actionsLimit a number from 0 to 1000 (optional, default to 50)
     * @param actionsFormat One of: count, list or minimal (optional, default to list)
     * @param actionsSince A date, null or lastView (optional)
     * @param actionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param memberships all or a comma-separated list of: active, admin, deactivated, me or normal (optional, default to none)
     * @param organization  true or false (optional)
     * @param organizationFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to name and displayName)
     * @param lists One of: all, closed, none or open (optional, default to none)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersBoardsByIdMemberCall(String idMember, String key, String token, String filter, String fields, String actions, String actionsEntities, String actionsLimit, String actionsFormat, String actionsSince, String actionFields, String memberships, String organization, String organizationFields, String lists, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boards"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (actions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions", actions));
        }

        if (actionsEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_entities", actionsEntities));
        }

        if (actionsLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_limit", actionsLimit));
        }

        if (actionsFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_format", actionsFormat));
        }

        if (actionsSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_since", actionsSince));
        }

        if (actionFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_fields", actionFields));
        }

        if (memberships != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberships", memberships));
        }

        if (organization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization", organization));
        }

        if (organizationFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_fields", organizationFields));
        }

        if (lists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lists", lists));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersBoardsByIdMemberValidateBeforeCall(String idMember, String key, String token, String filter, String fields, String actions, String actionsEntities, String actionsLimit, String actionsFormat, String actionsSince, String actionFields, String memberships, String organization, String organizationFields, String lists, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersBoardsByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersBoardsByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersBoardsByIdMember(Async)");
        }

        return getMembersBoardsByIdMemberCall(idMember, key, token, filter, fields, actions, actionsEntities, actionsLimit, actionsFormat, actionsSince, actionFields, memberships, organization, organizationFields, lists, _callback);

    }

    /**
     * getMembersBoardsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned (optional, default to all)
     * @param fields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to all)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param actionsEntities  true or false (optional)
     * @param actionsLimit a number from 0 to 1000 (optional, default to 50)
     * @param actionsFormat One of: count, list or minimal (optional, default to list)
     * @param actionsSince A date, null or lastView (optional)
     * @param actionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param memberships all or a comma-separated list of: active, admin, deactivated, me or normal (optional, default to none)
     * @param organization  true or false (optional)
     * @param organizationFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to name and displayName)
     * @param lists One of: all, closed, none or open (optional, default to none)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersBoardsByIdMember(String idMember, String key, String token, String filter, String fields, String actions, String actionsEntities, String actionsLimit, String actionsFormat, String actionsSince, String actionFields, String memberships, String organization, String organizationFields, String lists) throws ApiException {
        getMembersBoardsByIdMemberWithHttpInfo(idMember, key, token, filter, fields, actions, actionsEntities, actionsLimit, actionsFormat, actionsSince, actionFields, memberships, organization, organizationFields, lists);
    }

    /**
     * getMembersBoardsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned (optional, default to all)
     * @param fields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to all)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param actionsEntities  true or false (optional)
     * @param actionsLimit a number from 0 to 1000 (optional, default to 50)
     * @param actionsFormat One of: count, list or minimal (optional, default to list)
     * @param actionsSince A date, null or lastView (optional)
     * @param actionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param memberships all or a comma-separated list of: active, admin, deactivated, me or normal (optional, default to none)
     * @param organization  true or false (optional)
     * @param organizationFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to name and displayName)
     * @param lists One of: all, closed, none or open (optional, default to none)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersBoardsByIdMemberWithHttpInfo(String idMember, String key, String token, String filter, String fields, String actions, String actionsEntities, String actionsLimit, String actionsFormat, String actionsSince, String actionFields, String memberships, String organization, String organizationFields, String lists) throws ApiException {
        okhttp3.Call localVarCall = getMembersBoardsByIdMemberValidateBeforeCall(idMember, key, token, filter, fields, actions, actionsEntities, actionsLimit, actionsFormat, actionsSince, actionFields, memberships, organization, organizationFields, lists, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersBoardsByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned (optional, default to all)
     * @param fields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to all)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param actionsEntities  true or false (optional)
     * @param actionsLimit a number from 0 to 1000 (optional, default to 50)
     * @param actionsFormat One of: count, list or minimal (optional, default to list)
     * @param actionsSince A date, null or lastView (optional)
     * @param actionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param memberships all or a comma-separated list of: active, admin, deactivated, me or normal (optional, default to none)
     * @param organization  true or false (optional)
     * @param organizationFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to name and displayName)
     * @param lists One of: all, closed, none or open (optional, default to none)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersBoardsByIdMemberAsync(String idMember, String key, String token, String filter, String fields, String actions, String actionsEntities, String actionsLimit, String actionsFormat, String actionsSince, String actionFields, String memberships, String organization, String organizationFields, String lists, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersBoardsByIdMemberValidateBeforeCall(idMember, key, token, filter, fields, actions, actionsEntities, actionsLimit, actionsFormat, actionsSince, actionFields, memberships, organization, organizationFields, lists, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersBoardsByIdMemberByFilter
     * @param idMember idMember or username (required)
     * @param filter filter (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersBoardsByIdMemberByFilterCall(String idMember, String filter, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boards/{filter}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "filter" + "}", localVarApiClient.escapeString(filter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersBoardsByIdMemberByFilterValidateBeforeCall(String idMember, String filter, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersBoardsByIdMemberByFilter(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling getMembersBoardsByIdMemberByFilter(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersBoardsByIdMemberByFilter(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersBoardsByIdMemberByFilter(Async)");
        }

        return getMembersBoardsByIdMemberByFilterCall(idMember, filter, key, token, _callback);

    }

    /**
     * getMembersBoardsByIdMemberByFilter()
     * 
     * @param idMember idMember or username (required)
     * @param filter filter (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersBoardsByIdMemberByFilter(String idMember, String filter, String key, String token) throws ApiException {
        getMembersBoardsByIdMemberByFilterWithHttpInfo(idMember, filter, key, token);
    }

    /**
     * getMembersBoardsByIdMemberByFilter()
     * 
     * @param idMember idMember or username (required)
     * @param filter filter (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersBoardsByIdMemberByFilterWithHttpInfo(String idMember, String filter, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = getMembersBoardsByIdMemberByFilterValidateBeforeCall(idMember, filter, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersBoardsByIdMemberByFilter() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param filter filter (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersBoardsByIdMemberByFilterAsync(String idMember, String filter, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersBoardsByIdMemberByFilterValidateBeforeCall(idMember, filter, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersBoardsInvitedByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersBoardsInvitedByIdMemberCall(String idMember, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boardsInvited"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersBoardsInvitedByIdMemberValidateBeforeCall(String idMember, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersBoardsInvitedByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersBoardsInvitedByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersBoardsInvitedByIdMember(Async)");
        }

        return getMembersBoardsInvitedByIdMemberCall(idMember, key, token, fields, _callback);

    }

    /**
     * getMembersBoardsInvitedByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to all)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersBoardsInvitedByIdMember(String idMember, String key, String token, String fields) throws ApiException {
        getMembersBoardsInvitedByIdMemberWithHttpInfo(idMember, key, token, fields);
    }

    /**
     * getMembersBoardsInvitedByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to all)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersBoardsInvitedByIdMemberWithHttpInfo(String idMember, String key, String token, String fields) throws ApiException {
        okhttp3.Call localVarCall = getMembersBoardsInvitedByIdMemberValidateBeforeCall(idMember, key, token, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersBoardsInvitedByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersBoardsInvitedByIdMemberAsync(String idMember, String key, String token, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersBoardsInvitedByIdMemberValidateBeforeCall(idMember, key, token, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersBoardsInvitedByIdMemberByField
     * @param idMember idMember or username (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersBoardsInvitedByIdMemberByFieldCall(String idMember, String field, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boardsInvited/{field}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersBoardsInvitedByIdMemberByFieldValidateBeforeCall(String idMember, String field, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersBoardsInvitedByIdMemberByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getMembersBoardsInvitedByIdMemberByField(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersBoardsInvitedByIdMemberByField(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersBoardsInvitedByIdMemberByField(Async)");
        }

        return getMembersBoardsInvitedByIdMemberByFieldCall(idMember, field, key, token, _callback);

    }

    /**
     * getMembersBoardsInvitedByIdMemberByField()
     * 
     * @param idMember idMember or username (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersBoardsInvitedByIdMemberByField(String idMember, String field, String key, String token) throws ApiException {
        getMembersBoardsInvitedByIdMemberByFieldWithHttpInfo(idMember, field, key, token);
    }

    /**
     * getMembersBoardsInvitedByIdMemberByField()
     * 
     * @param idMember idMember or username (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersBoardsInvitedByIdMemberByFieldWithHttpInfo(String idMember, String field, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = getMembersBoardsInvitedByIdMemberByFieldValidateBeforeCall(idMember, field, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersBoardsInvitedByIdMemberByField() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersBoardsInvitedByIdMemberByFieldAsync(String idMember, String field, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersBoardsInvitedByIdMemberByFieldValidateBeforeCall(idMember, field, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param actionsEntities  true or false (optional)
     * @param actionsDisplay  true or false (optional)
     * @param actionsLimit a number from 0 to 1000 (optional, default to 50)
     * @param actionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param actionSince A date, null or lastView (optional)
     * @param actionBefore A date, or null (optional)
     * @param cards One of: all, closed, none, open or visible (optional, default to none)
     * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param cardMembers  true or false (optional)
     * @param cardMemberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param cardAttachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param cardAttachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to url and previews)
     * @param cardStickers  true or false (optional)
     * @param boards all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned (optional)
     * @param boardFields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name, closed, idOrganization and pinned)
     * @param boardActions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param boardActionsEntities  true or false (optional)
     * @param boardActionsDisplay  true or false (optional)
     * @param boardActionsFormat One of: count, list or minimal (optional, default to list)
     * @param boardActionsSince A date, null or lastView (optional)
     * @param boardActionsLimit a number from 0 to 1000 (optional, default to 50)
     * @param boardActionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param boardLists One of: all, closed, none or open (optional, default to none)
     * @param boardMemberships all or a comma-separated list of: active, admin, deactivated, me or normal (optional, default to none)
     * @param boardOrganization  true or false (optional)
     * @param boardOrganizationFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to name and displayName)
     * @param boardsInvited all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned (optional)
     * @param boardsInvitedFields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name, closed, idOrganization and pinned)
     * @param boardStars  true or false (optional)
     * @param savedSearches  true or false (optional)
     * @param organizations One of: all, members, none or public (optional, default to none)
     * @param organizationFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to all)
     * @param organizationPaidAccount  true or false (optional)
     * @param organizationsInvited One of: all, members, none or public (optional, default to none)
     * @param organizationsInvitedFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to all)
     * @param notifications all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard (optional)
     * @param notificationsEntities  true or false (optional)
     * @param notificationsDisplay  true or false (optional)
     * @param notificationsLimit a number from 1 to 1000 (optional, default to 50)
     * @param notificationFields all or a comma-separated list of: data, date, idMemberCreator, type or unread (optional, default to all)
     * @param notificationMemberCreator  true or false (optional)
     * @param notificationMemberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param notificationBefore An id, or null (optional)
     * @param notificationSince An id, or null (optional)
     * @param tokens One of: all or none (optional, default to none)
     * @param paidAccount  true or false (optional)
     * @param boardBackgrounds One of: all, custom, default, none or premium (optional, default to none)
     * @param customBoardBackgrounds One of: all or none (optional, default to none)
     * @param customStickers One of: all or none (optional, default to none)
     * @param customEmoji One of: all or none (optional, default to none)
     * @param fields all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersByIdMemberCall(String idMember, String key, String token, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String actionSince, String actionBefore, String cards, String cardFields, String cardMembers, String cardMemberFields, String cardAttachments, String cardAttachmentFields, String cardStickers, String boards, String boardFields, String boardActions, String boardActionsEntities, String boardActionsDisplay, String boardActionsFormat, String boardActionsSince, String boardActionsLimit, String boardActionFields, String boardLists, String boardMemberships, String boardOrganization, String boardOrganizationFields, String boardsInvited, String boardsInvitedFields, String boardStars, String savedSearches, String organizations, String organizationFields, String organizationPaidAccount, String organizationsInvited, String organizationsInvitedFields, String notifications, String notificationsEntities, String notificationsDisplay, String notificationsLimit, String notificationFields, String notificationMemberCreator, String notificationMemberCreatorFields, String notificationBefore, String notificationSince, String tokens, String paidAccount, String boardBackgrounds, String customBoardBackgrounds, String customStickers, String customEmoji, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (actions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions", actions));
        }

        if (actionsEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_entities", actionsEntities));
        }

        if (actionsDisplay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_display", actionsDisplay));
        }

        if (actionsLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions_limit", actionsLimit));
        }

        if (actionFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_fields", actionFields));
        }

        if (actionSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_since", actionSince));
        }

        if (actionBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_before", actionBefore));
        }

        if (cards != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cards", cards));
        }

        if (cardFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_fields", cardFields));
        }

        if (cardMembers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_members", cardMembers));
        }

        if (cardMemberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_member_fields", cardMemberFields));
        }

        if (cardAttachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_attachments", cardAttachments));
        }

        if (cardAttachmentFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_attachment_fields", cardAttachmentFields));
        }

        if (cardStickers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("card_stickers", cardStickers));
        }

        if (boards != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boards", boards));
        }

        if (boardFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_fields", boardFields));
        }

        if (boardActions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_actions", boardActions));
        }

        if (boardActionsEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_actions_entities", boardActionsEntities));
        }

        if (boardActionsDisplay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_actions_display", boardActionsDisplay));
        }

        if (boardActionsFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_actions_format", boardActionsFormat));
        }

        if (boardActionsSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_actions_since", boardActionsSince));
        }

        if (boardActionsLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_actions_limit", boardActionsLimit));
        }

        if (boardActionFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_action_fields", boardActionFields));
        }

        if (boardLists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_lists", boardLists));
        }

        if (boardMemberships != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_memberships", boardMemberships));
        }

        if (boardOrganization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_organization", boardOrganization));
        }

        if (boardOrganizationFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_organization_fields", boardOrganizationFields));
        }

        if (boardsInvited != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boardsInvited", boardsInvited));
        }

        if (boardsInvitedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boardsInvited_fields", boardsInvitedFields));
        }

        if (boardStars != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boardStars", boardStars));
        }

        if (savedSearches != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("savedSearches", savedSearches));
        }

        if (organizations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organizations", organizations));
        }

        if (organizationFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_fields", organizationFields));
        }

        if (organizationPaidAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organization_paid_account", organizationPaidAccount));
        }

        if (organizationsInvited != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organizationsInvited", organizationsInvited));
        }

        if (organizationsInvitedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("organizationsInvited_fields", organizationsInvitedFields));
        }

        if (notifications != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notifications", notifications));
        }

        if (notificationsEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notifications_entities", notificationsEntities));
        }

        if (notificationsDisplay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notifications_display", notificationsDisplay));
        }

        if (notificationsLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notifications_limit", notificationsLimit));
        }

        if (notificationFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notification_fields", notificationFields));
        }

        if (notificationMemberCreator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notification_memberCreator", notificationMemberCreator));
        }

        if (notificationMemberCreatorFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notification_memberCreator_fields", notificationMemberCreatorFields));
        }

        if (notificationBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notification_before", notificationBefore));
        }

        if (notificationSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notification_since", notificationSince));
        }

        if (tokens != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tokens", tokens));
        }

        if (paidAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paid_account", paidAccount));
        }

        if (boardBackgrounds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boardBackgrounds", boardBackgrounds));
        }

        if (customBoardBackgrounds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customBoardBackgrounds", customBoardBackgrounds));
        }

        if (customStickers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customStickers", customStickers));
        }

        if (customEmoji != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customEmoji", customEmoji));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersByIdMemberValidateBeforeCall(String idMember, String key, String token, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String actionSince, String actionBefore, String cards, String cardFields, String cardMembers, String cardMemberFields, String cardAttachments, String cardAttachmentFields, String cardStickers, String boards, String boardFields, String boardActions, String boardActionsEntities, String boardActionsDisplay, String boardActionsFormat, String boardActionsSince, String boardActionsLimit, String boardActionFields, String boardLists, String boardMemberships, String boardOrganization, String boardOrganizationFields, String boardsInvited, String boardsInvitedFields, String boardStars, String savedSearches, String organizations, String organizationFields, String organizationPaidAccount, String organizationsInvited, String organizationsInvitedFields, String notifications, String notificationsEntities, String notificationsDisplay, String notificationsLimit, String notificationFields, String notificationMemberCreator, String notificationMemberCreatorFields, String notificationBefore, String notificationSince, String tokens, String paidAccount, String boardBackgrounds, String customBoardBackgrounds, String customStickers, String customEmoji, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersByIdMember(Async)");
        }

        return getMembersByIdMemberCall(idMember, key, token, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionSince, actionBefore, cards, cardFields, cardMembers, cardMemberFields, cardAttachments, cardAttachmentFields, cardStickers, boards, boardFields, boardActions, boardActionsEntities, boardActionsDisplay, boardActionsFormat, boardActionsSince, boardActionsLimit, boardActionFields, boardLists, boardMemberships, boardOrganization, boardOrganizationFields, boardsInvited, boardsInvitedFields, boardStars, savedSearches, organizations, organizationFields, organizationPaidAccount, organizationsInvited, organizationsInvitedFields, notifications, notificationsEntities, notificationsDisplay, notificationsLimit, notificationFields, notificationMemberCreator, notificationMemberCreatorFields, notificationBefore, notificationSince, tokens, paidAccount, boardBackgrounds, customBoardBackgrounds, customStickers, customEmoji, fields, _callback);

    }

    /**
     * getMembersByIdMember()
     * If you specify &#39;me&#39; as the username, this call will respond as if you had supplied the username associated with the supplied token
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param actionsEntities  true or false (optional)
     * @param actionsDisplay  true or false (optional)
     * @param actionsLimit a number from 0 to 1000 (optional, default to 50)
     * @param actionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param actionSince A date, null or lastView (optional)
     * @param actionBefore A date, or null (optional)
     * @param cards One of: all, closed, none, open or visible (optional, default to none)
     * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param cardMembers  true or false (optional)
     * @param cardMemberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param cardAttachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param cardAttachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to url and previews)
     * @param cardStickers  true or false (optional)
     * @param boards all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned (optional)
     * @param boardFields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name, closed, idOrganization and pinned)
     * @param boardActions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param boardActionsEntities  true or false (optional)
     * @param boardActionsDisplay  true or false (optional)
     * @param boardActionsFormat One of: count, list or minimal (optional, default to list)
     * @param boardActionsSince A date, null or lastView (optional)
     * @param boardActionsLimit a number from 0 to 1000 (optional, default to 50)
     * @param boardActionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param boardLists One of: all, closed, none or open (optional, default to none)
     * @param boardMemberships all or a comma-separated list of: active, admin, deactivated, me or normal (optional, default to none)
     * @param boardOrganization  true or false (optional)
     * @param boardOrganizationFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to name and displayName)
     * @param boardsInvited all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned (optional)
     * @param boardsInvitedFields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name, closed, idOrganization and pinned)
     * @param boardStars  true or false (optional)
     * @param savedSearches  true or false (optional)
     * @param organizations One of: all, members, none or public (optional, default to none)
     * @param organizationFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to all)
     * @param organizationPaidAccount  true or false (optional)
     * @param organizationsInvited One of: all, members, none or public (optional, default to none)
     * @param organizationsInvitedFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to all)
     * @param notifications all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard (optional)
     * @param notificationsEntities  true or false (optional)
     * @param notificationsDisplay  true or false (optional)
     * @param notificationsLimit a number from 1 to 1000 (optional, default to 50)
     * @param notificationFields all or a comma-separated list of: data, date, idMemberCreator, type or unread (optional, default to all)
     * @param notificationMemberCreator  true or false (optional)
     * @param notificationMemberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param notificationBefore An id, or null (optional)
     * @param notificationSince An id, or null (optional)
     * @param tokens One of: all or none (optional, default to none)
     * @param paidAccount  true or false (optional)
     * @param boardBackgrounds One of: all, custom, default, none or premium (optional, default to none)
     * @param customBoardBackgrounds One of: all or none (optional, default to none)
     * @param customStickers One of: all or none (optional, default to none)
     * @param customEmoji One of: all or none (optional, default to none)
     * @param fields all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username (optional, default to all)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersByIdMember(String idMember, String key, String token, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String actionSince, String actionBefore, String cards, String cardFields, String cardMembers, String cardMemberFields, String cardAttachments, String cardAttachmentFields, String cardStickers, String boards, String boardFields, String boardActions, String boardActionsEntities, String boardActionsDisplay, String boardActionsFormat, String boardActionsSince, String boardActionsLimit, String boardActionFields, String boardLists, String boardMemberships, String boardOrganization, String boardOrganizationFields, String boardsInvited, String boardsInvitedFields, String boardStars, String savedSearches, String organizations, String organizationFields, String organizationPaidAccount, String organizationsInvited, String organizationsInvitedFields, String notifications, String notificationsEntities, String notificationsDisplay, String notificationsLimit, String notificationFields, String notificationMemberCreator, String notificationMemberCreatorFields, String notificationBefore, String notificationSince, String tokens, String paidAccount, String boardBackgrounds, String customBoardBackgrounds, String customStickers, String customEmoji, String fields) throws ApiException {
        getMembersByIdMemberWithHttpInfo(idMember, key, token, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionSince, actionBefore, cards, cardFields, cardMembers, cardMemberFields, cardAttachments, cardAttachmentFields, cardStickers, boards, boardFields, boardActions, boardActionsEntities, boardActionsDisplay, boardActionsFormat, boardActionsSince, boardActionsLimit, boardActionFields, boardLists, boardMemberships, boardOrganization, boardOrganizationFields, boardsInvited, boardsInvitedFields, boardStars, savedSearches, organizations, organizationFields, organizationPaidAccount, organizationsInvited, organizationsInvitedFields, notifications, notificationsEntities, notificationsDisplay, notificationsLimit, notificationFields, notificationMemberCreator, notificationMemberCreatorFields, notificationBefore, notificationSince, tokens, paidAccount, boardBackgrounds, customBoardBackgrounds, customStickers, customEmoji, fields);
    }

    /**
     * getMembersByIdMember()
     * If you specify &#39;me&#39; as the username, this call will respond as if you had supplied the username associated with the supplied token
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param actionsEntities  true or false (optional)
     * @param actionsDisplay  true or false (optional)
     * @param actionsLimit a number from 0 to 1000 (optional, default to 50)
     * @param actionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param actionSince A date, null or lastView (optional)
     * @param actionBefore A date, or null (optional)
     * @param cards One of: all, closed, none, open or visible (optional, default to none)
     * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param cardMembers  true or false (optional)
     * @param cardMemberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param cardAttachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param cardAttachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to url and previews)
     * @param cardStickers  true or false (optional)
     * @param boards all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned (optional)
     * @param boardFields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name, closed, idOrganization and pinned)
     * @param boardActions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param boardActionsEntities  true or false (optional)
     * @param boardActionsDisplay  true or false (optional)
     * @param boardActionsFormat One of: count, list or minimal (optional, default to list)
     * @param boardActionsSince A date, null or lastView (optional)
     * @param boardActionsLimit a number from 0 to 1000 (optional, default to 50)
     * @param boardActionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param boardLists One of: all, closed, none or open (optional, default to none)
     * @param boardMemberships all or a comma-separated list of: active, admin, deactivated, me or normal (optional, default to none)
     * @param boardOrganization  true or false (optional)
     * @param boardOrganizationFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to name and displayName)
     * @param boardsInvited all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned (optional)
     * @param boardsInvitedFields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name, closed, idOrganization and pinned)
     * @param boardStars  true or false (optional)
     * @param savedSearches  true or false (optional)
     * @param organizations One of: all, members, none or public (optional, default to none)
     * @param organizationFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to all)
     * @param organizationPaidAccount  true or false (optional)
     * @param organizationsInvited One of: all, members, none or public (optional, default to none)
     * @param organizationsInvitedFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to all)
     * @param notifications all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard (optional)
     * @param notificationsEntities  true or false (optional)
     * @param notificationsDisplay  true or false (optional)
     * @param notificationsLimit a number from 1 to 1000 (optional, default to 50)
     * @param notificationFields all or a comma-separated list of: data, date, idMemberCreator, type or unread (optional, default to all)
     * @param notificationMemberCreator  true or false (optional)
     * @param notificationMemberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param notificationBefore An id, or null (optional)
     * @param notificationSince An id, or null (optional)
     * @param tokens One of: all or none (optional, default to none)
     * @param paidAccount  true or false (optional)
     * @param boardBackgrounds One of: all, custom, default, none or premium (optional, default to none)
     * @param customBoardBackgrounds One of: all or none (optional, default to none)
     * @param customStickers One of: all or none (optional, default to none)
     * @param customEmoji One of: all or none (optional, default to none)
     * @param fields all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username (optional, default to all)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersByIdMemberWithHttpInfo(String idMember, String key, String token, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String actionSince, String actionBefore, String cards, String cardFields, String cardMembers, String cardMemberFields, String cardAttachments, String cardAttachmentFields, String cardStickers, String boards, String boardFields, String boardActions, String boardActionsEntities, String boardActionsDisplay, String boardActionsFormat, String boardActionsSince, String boardActionsLimit, String boardActionFields, String boardLists, String boardMemberships, String boardOrganization, String boardOrganizationFields, String boardsInvited, String boardsInvitedFields, String boardStars, String savedSearches, String organizations, String organizationFields, String organizationPaidAccount, String organizationsInvited, String organizationsInvitedFields, String notifications, String notificationsEntities, String notificationsDisplay, String notificationsLimit, String notificationFields, String notificationMemberCreator, String notificationMemberCreatorFields, String notificationBefore, String notificationSince, String tokens, String paidAccount, String boardBackgrounds, String customBoardBackgrounds, String customStickers, String customEmoji, String fields) throws ApiException {
        okhttp3.Call localVarCall = getMembersByIdMemberValidateBeforeCall(idMember, key, token, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionSince, actionBefore, cards, cardFields, cardMembers, cardMemberFields, cardAttachments, cardAttachmentFields, cardStickers, boards, boardFields, boardActions, boardActionsEntities, boardActionsDisplay, boardActionsFormat, boardActionsSince, boardActionsLimit, boardActionFields, boardLists, boardMemberships, boardOrganization, boardOrganizationFields, boardsInvited, boardsInvitedFields, boardStars, savedSearches, organizations, organizationFields, organizationPaidAccount, organizationsInvited, organizationsInvitedFields, notifications, notificationsEntities, notificationsDisplay, notificationsLimit, notificationFields, notificationMemberCreator, notificationMemberCreatorFields, notificationBefore, notificationSince, tokens, paidAccount, boardBackgrounds, customBoardBackgrounds, customStickers, customEmoji, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersByIdMember() (asynchronously)
     * If you specify &#39;me&#39; as the username, this call will respond as if you had supplied the username associated with the supplied token
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param actionsEntities  true or false (optional)
     * @param actionsDisplay  true or false (optional)
     * @param actionsLimit a number from 0 to 1000 (optional, default to 50)
     * @param actionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param actionSince A date, null or lastView (optional)
     * @param actionBefore A date, or null (optional)
     * @param cards One of: all, closed, none, open or visible (optional, default to none)
     * @param cardFields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param cardMembers  true or false (optional)
     * @param cardMemberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param cardAttachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param cardAttachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to url and previews)
     * @param cardStickers  true or false (optional)
     * @param boards all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned (optional)
     * @param boardFields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name, closed, idOrganization and pinned)
     * @param boardActions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param boardActionsEntities  true or false (optional)
     * @param boardActionsDisplay  true or false (optional)
     * @param boardActionsFormat One of: count, list or minimal (optional, default to list)
     * @param boardActionsSince A date, null or lastView (optional)
     * @param boardActionsLimit a number from 0 to 1000 (optional, default to 50)
     * @param boardActionFields all or a comma-separated list of: data, date, idMemberCreator or type (optional, default to all)
     * @param boardLists One of: all, closed, none or open (optional, default to none)
     * @param boardMemberships all or a comma-separated list of: active, admin, deactivated, me or normal (optional, default to none)
     * @param boardOrganization  true or false (optional)
     * @param boardOrganizationFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to name and displayName)
     * @param boardsInvited all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned (optional)
     * @param boardsInvitedFields all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url (optional, default to name, closed, idOrganization and pinned)
     * @param boardStars  true or false (optional)
     * @param savedSearches  true or false (optional)
     * @param organizations One of: all, members, none or public (optional, default to none)
     * @param organizationFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to all)
     * @param organizationPaidAccount  true or false (optional)
     * @param organizationsInvited One of: all, members, none or public (optional, default to none)
     * @param organizationsInvitedFields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to all)
     * @param notifications all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard (optional)
     * @param notificationsEntities  true or false (optional)
     * @param notificationsDisplay  true or false (optional)
     * @param notificationsLimit a number from 1 to 1000 (optional, default to 50)
     * @param notificationFields all or a comma-separated list of: data, date, idMemberCreator, type or unread (optional, default to all)
     * @param notificationMemberCreator  true or false (optional)
     * @param notificationMemberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param notificationBefore An id, or null (optional)
     * @param notificationSince An id, or null (optional)
     * @param tokens One of: all or none (optional, default to none)
     * @param paidAccount  true or false (optional)
     * @param boardBackgrounds One of: all, custom, default, none or premium (optional, default to none)
     * @param customBoardBackgrounds One of: all or none (optional, default to none)
     * @param customStickers One of: all or none (optional, default to none)
     * @param customEmoji One of: all or none (optional, default to none)
     * @param fields all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersByIdMemberAsync(String idMember, String key, String token, String actions, String actionsEntities, String actionsDisplay, String actionsLimit, String actionFields, String actionSince, String actionBefore, String cards, String cardFields, String cardMembers, String cardMemberFields, String cardAttachments, String cardAttachmentFields, String cardStickers, String boards, String boardFields, String boardActions, String boardActionsEntities, String boardActionsDisplay, String boardActionsFormat, String boardActionsSince, String boardActionsLimit, String boardActionFields, String boardLists, String boardMemberships, String boardOrganization, String boardOrganizationFields, String boardsInvited, String boardsInvitedFields, String boardStars, String savedSearches, String organizations, String organizationFields, String organizationPaidAccount, String organizationsInvited, String organizationsInvitedFields, String notifications, String notificationsEntities, String notificationsDisplay, String notificationsLimit, String notificationFields, String notificationMemberCreator, String notificationMemberCreatorFields, String notificationBefore, String notificationSince, String tokens, String paidAccount, String boardBackgrounds, String customBoardBackgrounds, String customStickers, String customEmoji, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersByIdMemberValidateBeforeCall(idMember, key, token, actions, actionsEntities, actionsDisplay, actionsLimit, actionFields, actionSince, actionBefore, cards, cardFields, cardMembers, cardMemberFields, cardAttachments, cardAttachmentFields, cardStickers, boards, boardFields, boardActions, boardActionsEntities, boardActionsDisplay, boardActionsFormat, boardActionsSince, boardActionsLimit, boardActionFields, boardLists, boardMemberships, boardOrganization, boardOrganizationFields, boardsInvited, boardsInvitedFields, boardStars, savedSearches, organizations, organizationFields, organizationPaidAccount, organizationsInvited, organizationsInvitedFields, notifications, notificationsEntities, notificationsDisplay, notificationsLimit, notificationFields, notificationMemberCreator, notificationMemberCreatorFields, notificationBefore, notificationSince, tokens, paidAccount, boardBackgrounds, customBoardBackgrounds, customStickers, customEmoji, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersByIdMemberByField
     * @param idMember idMember or username (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersByIdMemberByFieldCall(String idMember, String field, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/{field}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersByIdMemberByFieldValidateBeforeCall(String idMember, String field, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersByIdMemberByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getMembersByIdMemberByField(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersByIdMemberByField(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersByIdMemberByField(Async)");
        }

        return getMembersByIdMemberByFieldCall(idMember, field, key, token, _callback);

    }

    /**
     * getMembersByIdMemberByField()
     * 
     * @param idMember idMember or username (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersByIdMemberByField(String idMember, String field, String key, String token) throws ApiException {
        getMembersByIdMemberByFieldWithHttpInfo(idMember, field, key, token);
    }

    /**
     * getMembersByIdMemberByField()
     * 
     * @param idMember idMember or username (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersByIdMemberByFieldWithHttpInfo(String idMember, String field, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = getMembersByIdMemberByFieldValidateBeforeCall(idMember, field, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersByIdMemberByField() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersByIdMemberByFieldAsync(String idMember, String field, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersByIdMemberByFieldValidateBeforeCall(idMember, field, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersCardsByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param attachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param attachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param stickers  true or false (optional)
     * @param members  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param checkItemStates  true or false (optional)
     * @param checklists One of: all or none (optional, default to none)
     * @param limit a number from 1 to 1000 (optional)
     * @param since A date, or null (optional)
     * @param before A date, or null (optional)
     * @param filter One of: all, closed, none, open or visible (optional, default to visible)
     * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersCardsByIdMemberCall(String idMember, String key, String token, String actions, String attachments, String attachmentFields, String stickers, String members, String memberFields, String checkItemStates, String checklists, String limit, String since, String before, String filter, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/cards"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (actions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actions", actions));
        }

        if (attachments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachments", attachments));
        }

        if (attachmentFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachment_fields", attachmentFields));
        }

        if (stickers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stickers", stickers));
        }

        if (members != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("members", members));
        }

        if (memberFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_fields", memberFields));
        }

        if (checkItemStates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkItemStates", checkItemStates));
        }

        if (checklists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checklists", checklists));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersCardsByIdMemberValidateBeforeCall(String idMember, String key, String token, String actions, String attachments, String attachmentFields, String stickers, String members, String memberFields, String checkItemStates, String checklists, String limit, String since, String before, String filter, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersCardsByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersCardsByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersCardsByIdMember(Async)");
        }

        return getMembersCardsByIdMemberCall(idMember, key, token, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields, _callback);

    }

    /**
     * getMembersCardsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param attachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param attachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param stickers  true or false (optional)
     * @param members  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param checkItemStates  true or false (optional)
     * @param checklists One of: all or none (optional, default to none)
     * @param limit a number from 1 to 1000 (optional)
     * @param since A date, or null (optional)
     * @param before A date, or null (optional)
     * @param filter One of: all, closed, none, open or visible (optional, default to visible)
     * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersCardsByIdMember(String idMember, String key, String token, String actions, String attachments, String attachmentFields, String stickers, String members, String memberFields, String checkItemStates, String checklists, String limit, String since, String before, String filter, String fields) throws ApiException {
        getMembersCardsByIdMemberWithHttpInfo(idMember, key, token, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields);
    }

    /**
     * getMembersCardsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param attachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param attachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param stickers  true or false (optional)
     * @param members  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param checkItemStates  true or false (optional)
     * @param checklists One of: all or none (optional, default to none)
     * @param limit a number from 1 to 1000 (optional)
     * @param since A date, or null (optional)
     * @param before A date, or null (optional)
     * @param filter One of: all, closed, none, open or visible (optional, default to visible)
     * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersCardsByIdMemberWithHttpInfo(String idMember, String key, String token, String actions, String attachments, String attachmentFields, String stickers, String members, String memberFields, String checkItemStates, String checklists, String limit, String since, String before, String filter, String fields) throws ApiException {
        okhttp3.Call localVarCall = getMembersCardsByIdMemberValidateBeforeCall(idMember, key, token, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersCardsByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param actions all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization (optional)
     * @param attachments A boolean value or &amp;quot;cover&amp;quot; for only card cover attachments (optional)
     * @param attachmentFields all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url (optional, default to all)
     * @param stickers  true or false (optional)
     * @param members  true or false (optional)
     * @param memberFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param checkItemStates  true or false (optional)
     * @param checklists One of: all or none (optional, default to none)
     * @param limit a number from 1 to 1000 (optional)
     * @param since A date, or null (optional)
     * @param before A date, or null (optional)
     * @param filter One of: all, closed, none, open or visible (optional, default to visible)
     * @param fields all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersCardsByIdMemberAsync(String idMember, String key, String token, String actions, String attachments, String attachmentFields, String stickers, String members, String memberFields, String checkItemStates, String checklists, String limit, String since, String before, String filter, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersCardsByIdMemberValidateBeforeCall(idMember, key, token, actions, attachments, attachmentFields, stickers, members, memberFields, checkItemStates, checklists, limit, since, before, filter, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersCardsByIdMemberByFilter
     * @param idMember idMember or username (required)
     * @param filter filter (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersCardsByIdMemberByFilterCall(String idMember, String filter, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/cards/{filter}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "filter" + "}", localVarApiClient.escapeString(filter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersCardsByIdMemberByFilterValidateBeforeCall(String idMember, String filter, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersCardsByIdMemberByFilter(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling getMembersCardsByIdMemberByFilter(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersCardsByIdMemberByFilter(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersCardsByIdMemberByFilter(Async)");
        }

        return getMembersCardsByIdMemberByFilterCall(idMember, filter, key, token, _callback);

    }

    /**
     * getMembersCardsByIdMemberByFilter()
     * 
     * @param idMember idMember or username (required)
     * @param filter filter (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersCardsByIdMemberByFilter(String idMember, String filter, String key, String token) throws ApiException {
        getMembersCardsByIdMemberByFilterWithHttpInfo(idMember, filter, key, token);
    }

    /**
     * getMembersCardsByIdMemberByFilter()
     * 
     * @param idMember idMember or username (required)
     * @param filter filter (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersCardsByIdMemberByFilterWithHttpInfo(String idMember, String filter, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = getMembersCardsByIdMemberByFilterValidateBeforeCall(idMember, filter, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersCardsByIdMemberByFilter() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param filter filter (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersCardsByIdMemberByFilterAsync(String idMember, String filter, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersCardsByIdMemberByFilterValidateBeforeCall(idMember, filter, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersCustomBoardBackgroundsByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: all or none (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersCustomBoardBackgroundsByIdMemberCall(String idMember, String key, String token, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/customBoardBackgrounds"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersCustomBoardBackgroundsByIdMemberValidateBeforeCall(String idMember, String key, String token, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersCustomBoardBackgroundsByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersCustomBoardBackgroundsByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersCustomBoardBackgroundsByIdMember(Async)");
        }

        return getMembersCustomBoardBackgroundsByIdMemberCall(idMember, key, token, filter, _callback);

    }

    /**
     * getMembersCustomBoardBackgroundsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: all or none (optional, default to all)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersCustomBoardBackgroundsByIdMember(String idMember, String key, String token, String filter) throws ApiException {
        getMembersCustomBoardBackgroundsByIdMemberWithHttpInfo(idMember, key, token, filter);
    }

    /**
     * getMembersCustomBoardBackgroundsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: all or none (optional, default to all)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersCustomBoardBackgroundsByIdMemberWithHttpInfo(String idMember, String key, String token, String filter) throws ApiException {
        okhttp3.Call localVarCall = getMembersCustomBoardBackgroundsByIdMemberValidateBeforeCall(idMember, key, token, filter, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersCustomBoardBackgroundsByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: all or none (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersCustomBoardBackgroundsByIdMemberAsync(String idMember, String key, String token, String filter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersCustomBoardBackgroundsByIdMemberValidateBeforeCall(idMember, key, token, filter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundCall(String idMember, String idBoardBackground, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/customBoardBackgrounds/{idBoardBackground}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idBoardBackground" + "}", localVarApiClient.escapeString(idBoardBackground.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundValidateBeforeCall(String idMember, String idBoardBackground, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground(Async)");
        }

        // verify the required parameter 'idBoardBackground' is set
        if (idBoardBackground == null) {
            throw new ApiException("Missing the required parameter 'idBoardBackground' when calling getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground(Async)");
        }

        return getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundCall(idMember, idBoardBackground, key, token, fields, _callback);

    }

    /**
     * getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile (optional, default to all)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground(String idMember, String idBoardBackground, String key, String token, String fields) throws ApiException {
        getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundWithHttpInfo(idMember, idBoardBackground, key, token, fields);
    }

    /**
     * getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile (optional, default to all)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundWithHttpInfo(String idMember, String idBoardBackground, String key, String token, String fields) throws ApiException {
        okhttp3.Call localVarCall = getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundValidateBeforeCall(idMember, idBoardBackground, key, token, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundAsync(String idMember, String idBoardBackground, String key, String token, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundValidateBeforeCall(idMember, idBoardBackground, key, token, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersCustomEmojiByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: all or none (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersCustomEmojiByIdMemberCall(String idMember, String key, String token, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/customEmoji"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersCustomEmojiByIdMemberValidateBeforeCall(String idMember, String key, String token, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersCustomEmojiByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersCustomEmojiByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersCustomEmojiByIdMember(Async)");
        }

        return getMembersCustomEmojiByIdMemberCall(idMember, key, token, filter, _callback);

    }

    /**
     * getMembersCustomEmojiByIdMember()
     * This gets the list of all of the user’s uploaded emoji
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: all or none (optional, default to all)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersCustomEmojiByIdMember(String idMember, String key, String token, String filter) throws ApiException {
        getMembersCustomEmojiByIdMemberWithHttpInfo(idMember, key, token, filter);
    }

    /**
     * getMembersCustomEmojiByIdMember()
     * This gets the list of all of the user’s uploaded emoji
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: all or none (optional, default to all)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersCustomEmojiByIdMemberWithHttpInfo(String idMember, String key, String token, String filter) throws ApiException {
        okhttp3.Call localVarCall = getMembersCustomEmojiByIdMemberValidateBeforeCall(idMember, key, token, filter, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersCustomEmojiByIdMember() (asynchronously)
     * This gets the list of all of the user’s uploaded emoji
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: all or none (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersCustomEmojiByIdMemberAsync(String idMember, String key, String token, String filter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersCustomEmojiByIdMemberValidateBeforeCall(idMember, key, token, filter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersCustomEmojiByIdMemberByIdCustomEmoji
     * @param idMember idMember or username (required)
     * @param idCustomEmoji idCustomEmoji (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: name or url (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersCustomEmojiByIdMemberByIdCustomEmojiCall(String idMember, String idCustomEmoji, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/customEmoji/{idCustomEmoji}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idCustomEmoji" + "}", localVarApiClient.escapeString(idCustomEmoji.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersCustomEmojiByIdMemberByIdCustomEmojiValidateBeforeCall(String idMember, String idCustomEmoji, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersCustomEmojiByIdMemberByIdCustomEmoji(Async)");
        }

        // verify the required parameter 'idCustomEmoji' is set
        if (idCustomEmoji == null) {
            throw new ApiException("Missing the required parameter 'idCustomEmoji' when calling getMembersCustomEmojiByIdMemberByIdCustomEmoji(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersCustomEmojiByIdMemberByIdCustomEmoji(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersCustomEmojiByIdMemberByIdCustomEmoji(Async)");
        }

        return getMembersCustomEmojiByIdMemberByIdCustomEmojiCall(idMember, idCustomEmoji, key, token, fields, _callback);

    }

    /**
     * getMembersCustomEmojiByIdMemberByIdCustomEmoji()
     * 
     * @param idMember idMember or username (required)
     * @param idCustomEmoji idCustomEmoji (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: name or url (optional, default to all)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersCustomEmojiByIdMemberByIdCustomEmoji(String idMember, String idCustomEmoji, String key, String token, String fields) throws ApiException {
        getMembersCustomEmojiByIdMemberByIdCustomEmojiWithHttpInfo(idMember, idCustomEmoji, key, token, fields);
    }

    /**
     * getMembersCustomEmojiByIdMemberByIdCustomEmoji()
     * 
     * @param idMember idMember or username (required)
     * @param idCustomEmoji idCustomEmoji (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: name or url (optional, default to all)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersCustomEmojiByIdMemberByIdCustomEmojiWithHttpInfo(String idMember, String idCustomEmoji, String key, String token, String fields) throws ApiException {
        okhttp3.Call localVarCall = getMembersCustomEmojiByIdMemberByIdCustomEmojiValidateBeforeCall(idMember, idCustomEmoji, key, token, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersCustomEmojiByIdMemberByIdCustomEmoji() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param idCustomEmoji idCustomEmoji (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: name or url (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersCustomEmojiByIdMemberByIdCustomEmojiAsync(String idMember, String idCustomEmoji, String key, String token, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersCustomEmojiByIdMemberByIdCustomEmojiValidateBeforeCall(idMember, idCustomEmoji, key, token, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersCustomStickersByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: all or none (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersCustomStickersByIdMemberCall(String idMember, String key, String token, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/customStickers"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersCustomStickersByIdMemberValidateBeforeCall(String idMember, String key, String token, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersCustomStickersByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersCustomStickersByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersCustomStickersByIdMember(Async)");
        }

        return getMembersCustomStickersByIdMemberCall(idMember, key, token, filter, _callback);

    }

    /**
     * getMembersCustomStickersByIdMember()
     * This gets a list of all of the user’s uploaded stickers
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: all or none (optional, default to all)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersCustomStickersByIdMember(String idMember, String key, String token, String filter) throws ApiException {
        getMembersCustomStickersByIdMemberWithHttpInfo(idMember, key, token, filter);
    }

    /**
     * getMembersCustomStickersByIdMember()
     * This gets a list of all of the user’s uploaded stickers
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: all or none (optional, default to all)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersCustomStickersByIdMemberWithHttpInfo(String idMember, String key, String token, String filter) throws ApiException {
        okhttp3.Call localVarCall = getMembersCustomStickersByIdMemberValidateBeforeCall(idMember, key, token, filter, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersCustomStickersByIdMember() (asynchronously)
     * This gets a list of all of the user’s uploaded stickers
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: all or none (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersCustomStickersByIdMemberAsync(String idMember, String key, String token, String filter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersCustomStickersByIdMemberValidateBeforeCall(idMember, key, token, filter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersCustomStickersByIdMemberByIdCustomSticker
     * @param idMember idMember or username (required)
     * @param idCustomSticker idCustomSticker (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: scaled or url (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersCustomStickersByIdMemberByIdCustomStickerCall(String idMember, String idCustomSticker, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/customStickers/{idCustomSticker}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idCustomSticker" + "}", localVarApiClient.escapeString(idCustomSticker.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersCustomStickersByIdMemberByIdCustomStickerValidateBeforeCall(String idMember, String idCustomSticker, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersCustomStickersByIdMemberByIdCustomSticker(Async)");
        }

        // verify the required parameter 'idCustomSticker' is set
        if (idCustomSticker == null) {
            throw new ApiException("Missing the required parameter 'idCustomSticker' when calling getMembersCustomStickersByIdMemberByIdCustomSticker(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersCustomStickersByIdMemberByIdCustomSticker(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersCustomStickersByIdMemberByIdCustomSticker(Async)");
        }

        return getMembersCustomStickersByIdMemberByIdCustomStickerCall(idMember, idCustomSticker, key, token, fields, _callback);

    }

    /**
     * getMembersCustomStickersByIdMemberByIdCustomSticker()
     * 
     * @param idMember idMember or username (required)
     * @param idCustomSticker idCustomSticker (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: scaled or url (optional, default to all)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersCustomStickersByIdMemberByIdCustomSticker(String idMember, String idCustomSticker, String key, String token, String fields) throws ApiException {
        getMembersCustomStickersByIdMemberByIdCustomStickerWithHttpInfo(idMember, idCustomSticker, key, token, fields);
    }

    /**
     * getMembersCustomStickersByIdMemberByIdCustomSticker()
     * 
     * @param idMember idMember or username (required)
     * @param idCustomSticker idCustomSticker (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: scaled or url (optional, default to all)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersCustomStickersByIdMemberByIdCustomStickerWithHttpInfo(String idMember, String idCustomSticker, String key, String token, String fields) throws ApiException {
        okhttp3.Call localVarCall = getMembersCustomStickersByIdMemberByIdCustomStickerValidateBeforeCall(idMember, idCustomSticker, key, token, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersCustomStickersByIdMemberByIdCustomSticker() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param idCustomSticker idCustomSticker (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: scaled or url (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersCustomStickersByIdMemberByIdCustomStickerAsync(String idMember, String idCustomSticker, String key, String token, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersCustomStickersByIdMemberByIdCustomStickerValidateBeforeCall(idMember, idCustomSticker, key, token, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersDeltasByIdMember
     * @param idMember idMember or username (required)
     * @param tags A valid tag for subscribing (required)
     * @param ixLastUpdate a number from -1 to Infinity (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersDeltasByIdMemberCall(String idMember, String tags, String ixLastUpdate, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/deltas"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (ixLastUpdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ixLastUpdate", ixLastUpdate));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersDeltasByIdMemberValidateBeforeCall(String idMember, String tags, String ixLastUpdate, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersDeltasByIdMember(Async)");
        }

        // verify the required parameter 'tags' is set
        if (tags == null) {
            throw new ApiException("Missing the required parameter 'tags' when calling getMembersDeltasByIdMember(Async)");
        }

        // verify the required parameter 'ixLastUpdate' is set
        if (ixLastUpdate == null) {
            throw new ApiException("Missing the required parameter 'ixLastUpdate' when calling getMembersDeltasByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersDeltasByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersDeltasByIdMember(Async)");
        }

        return getMembersDeltasByIdMemberCall(idMember, tags, ixLastUpdate, key, token, _callback);

    }

    /**
     * getMembersDeltasByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param tags A valid tag for subscribing (required)
     * @param ixLastUpdate a number from -1 to Infinity (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersDeltasByIdMember(String idMember, String tags, String ixLastUpdate, String key, String token) throws ApiException {
        getMembersDeltasByIdMemberWithHttpInfo(idMember, tags, ixLastUpdate, key, token);
    }

    /**
     * getMembersDeltasByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param tags A valid tag for subscribing (required)
     * @param ixLastUpdate a number from -1 to Infinity (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersDeltasByIdMemberWithHttpInfo(String idMember, String tags, String ixLastUpdate, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = getMembersDeltasByIdMemberValidateBeforeCall(idMember, tags, ixLastUpdate, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersDeltasByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param tags A valid tag for subscribing (required)
     * @param ixLastUpdate a number from -1 to Infinity (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersDeltasByIdMemberAsync(String idMember, String tags, String ixLastUpdate, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersDeltasByIdMemberValidateBeforeCall(idMember, tags, ixLastUpdate, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersNotificationsByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param entities  true or false (optional)
     * @param display  true or false (optional)
     * @param filter all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard (optional, default to all)
     * @param readFilter One of: all, read or unread (optional, default to all)
     * @param fields all or a comma-separated list of: data, date, idMemberCreator, type or unread (optional, default to all)
     * @param limit a number from 1 to 1000 (optional, default to 50)
     * @param page a number from 0 to 100 (optional, default to 0)
     * @param before An id, or null (optional)
     * @param since An id, or null (optional)
     * @param memberCreator  true or false (optional)
     * @param memberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersNotificationsByIdMemberCall(String idMember, String key, String token, String entities, String display, String filter, String readFilter, String fields, String limit, String page, String before, String since, String memberCreator, String memberCreatorFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/notifications"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entities", entities));
        }

        if (display != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("display", display));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (readFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("read_filter", readFilter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (memberCreator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberCreator", memberCreator));
        }

        if (memberCreatorFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberCreator_fields", memberCreatorFields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersNotificationsByIdMemberValidateBeforeCall(String idMember, String key, String token, String entities, String display, String filter, String readFilter, String fields, String limit, String page, String before, String since, String memberCreator, String memberCreatorFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersNotificationsByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersNotificationsByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersNotificationsByIdMember(Async)");
        }

        return getMembersNotificationsByIdMemberCall(idMember, key, token, entities, display, filter, readFilter, fields, limit, page, before, since, memberCreator, memberCreatorFields, _callback);

    }

    /**
     * getMembersNotificationsByIdMember()
     * You can only read the notifications for the member associated with the supplied token
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param entities  true or false (optional)
     * @param display  true or false (optional)
     * @param filter all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard (optional, default to all)
     * @param readFilter One of: all, read or unread (optional, default to all)
     * @param fields all or a comma-separated list of: data, date, idMemberCreator, type or unread (optional, default to all)
     * @param limit a number from 1 to 1000 (optional, default to 50)
     * @param page a number from 0 to 100 (optional, default to 0)
     * @param before An id, or null (optional)
     * @param since An id, or null (optional)
     * @param memberCreator  true or false (optional)
     * @param memberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersNotificationsByIdMember(String idMember, String key, String token, String entities, String display, String filter, String readFilter, String fields, String limit, String page, String before, String since, String memberCreator, String memberCreatorFields) throws ApiException {
        getMembersNotificationsByIdMemberWithHttpInfo(idMember, key, token, entities, display, filter, readFilter, fields, limit, page, before, since, memberCreator, memberCreatorFields);
    }

    /**
     * getMembersNotificationsByIdMember()
     * You can only read the notifications for the member associated with the supplied token
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param entities  true or false (optional)
     * @param display  true or false (optional)
     * @param filter all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard (optional, default to all)
     * @param readFilter One of: all, read or unread (optional, default to all)
     * @param fields all or a comma-separated list of: data, date, idMemberCreator, type or unread (optional, default to all)
     * @param limit a number from 1 to 1000 (optional, default to 50)
     * @param page a number from 0 to 100 (optional, default to 0)
     * @param before An id, or null (optional)
     * @param since An id, or null (optional)
     * @param memberCreator  true or false (optional)
     * @param memberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersNotificationsByIdMemberWithHttpInfo(String idMember, String key, String token, String entities, String display, String filter, String readFilter, String fields, String limit, String page, String before, String since, String memberCreator, String memberCreatorFields) throws ApiException {
        okhttp3.Call localVarCall = getMembersNotificationsByIdMemberValidateBeforeCall(idMember, key, token, entities, display, filter, readFilter, fields, limit, page, before, since, memberCreator, memberCreatorFields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersNotificationsByIdMember() (asynchronously)
     * You can only read the notifications for the member associated with the supplied token
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param entities  true or false (optional)
     * @param display  true or false (optional)
     * @param filter all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard (optional, default to all)
     * @param readFilter One of: all, read or unread (optional, default to all)
     * @param fields all or a comma-separated list of: data, date, idMemberCreator, type or unread (optional, default to all)
     * @param limit a number from 1 to 1000 (optional, default to 50)
     * @param page a number from 0 to 100 (optional, default to 0)
     * @param before An id, or null (optional)
     * @param since An id, or null (optional)
     * @param memberCreator  true or false (optional)
     * @param memberCreatorFields all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username (optional, default to avatarHash, fullName, initials and username)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersNotificationsByIdMemberAsync(String idMember, String key, String token, String entities, String display, String filter, String readFilter, String fields, String limit, String page, String before, String since, String memberCreator, String memberCreatorFields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersNotificationsByIdMemberValidateBeforeCall(idMember, key, token, entities, display, filter, readFilter, fields, limit, page, before, since, memberCreator, memberCreatorFields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersNotificationsByIdMemberByFilter
     * @param idMember idMember or username (required)
     * @param filter filter (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersNotificationsByIdMemberByFilterCall(String idMember, String filter, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/notifications/{filter}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "filter" + "}", localVarApiClient.escapeString(filter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersNotificationsByIdMemberByFilterValidateBeforeCall(String idMember, String filter, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersNotificationsByIdMemberByFilter(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling getMembersNotificationsByIdMemberByFilter(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersNotificationsByIdMemberByFilter(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersNotificationsByIdMemberByFilter(Async)");
        }

        return getMembersNotificationsByIdMemberByFilterCall(idMember, filter, key, token, _callback);

    }

    /**
     * getMembersNotificationsByIdMemberByFilter()
     * 
     * @param idMember idMember or username (required)
     * @param filter filter (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersNotificationsByIdMemberByFilter(String idMember, String filter, String key, String token) throws ApiException {
        getMembersNotificationsByIdMemberByFilterWithHttpInfo(idMember, filter, key, token);
    }

    /**
     * getMembersNotificationsByIdMemberByFilter()
     * 
     * @param idMember idMember or username (required)
     * @param filter filter (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersNotificationsByIdMemberByFilterWithHttpInfo(String idMember, String filter, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = getMembersNotificationsByIdMemberByFilterValidateBeforeCall(idMember, filter, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersNotificationsByIdMemberByFilter() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param filter filter (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersNotificationsByIdMemberByFilterAsync(String idMember, String filter, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersNotificationsByIdMemberByFilterValidateBeforeCall(idMember, filter, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersOrganizationsByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: all, members, none or public (optional, default to all)
     * @param fields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to all)
     * @param paidAccount  true or false (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersOrganizationsByIdMemberCall(String idMember, String key, String token, String filter, String fields, String paidAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/organizations"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (paidAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paid_account", paidAccount));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersOrganizationsByIdMemberValidateBeforeCall(String idMember, String key, String token, String filter, String fields, String paidAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersOrganizationsByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersOrganizationsByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersOrganizationsByIdMember(Async)");
        }

        return getMembersOrganizationsByIdMemberCall(idMember, key, token, filter, fields, paidAccount, _callback);

    }

    /**
     * getMembersOrganizationsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: all, members, none or public (optional, default to all)
     * @param fields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to all)
     * @param paidAccount  true or false (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersOrganizationsByIdMember(String idMember, String key, String token, String filter, String fields, String paidAccount) throws ApiException {
        getMembersOrganizationsByIdMemberWithHttpInfo(idMember, key, token, filter, fields, paidAccount);
    }

    /**
     * getMembersOrganizationsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: all, members, none or public (optional, default to all)
     * @param fields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to all)
     * @param paidAccount  true or false (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersOrganizationsByIdMemberWithHttpInfo(String idMember, String key, String token, String filter, String fields, String paidAccount) throws ApiException {
        okhttp3.Call localVarCall = getMembersOrganizationsByIdMemberValidateBeforeCall(idMember, key, token, filter, fields, paidAccount, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersOrganizationsByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: all, members, none or public (optional, default to all)
     * @param fields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to all)
     * @param paidAccount  true or false (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersOrganizationsByIdMemberAsync(String idMember, String key, String token, String filter, String fields, String paidAccount, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersOrganizationsByIdMemberValidateBeforeCall(idMember, key, token, filter, fields, paidAccount, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersOrganizationsByIdMemberByFilter
     * @param idMember idMember or username (required)
     * @param filter filter (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersOrganizationsByIdMemberByFilterCall(String idMember, String filter, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/organizations/{filter}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "filter" + "}", localVarApiClient.escapeString(filter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersOrganizationsByIdMemberByFilterValidateBeforeCall(String idMember, String filter, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersOrganizationsByIdMemberByFilter(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling getMembersOrganizationsByIdMemberByFilter(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersOrganizationsByIdMemberByFilter(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersOrganizationsByIdMemberByFilter(Async)");
        }

        return getMembersOrganizationsByIdMemberByFilterCall(idMember, filter, key, token, _callback);

    }

    /**
     * getMembersOrganizationsByIdMemberByFilter()
     * 
     * @param idMember idMember or username (required)
     * @param filter filter (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersOrganizationsByIdMemberByFilter(String idMember, String filter, String key, String token) throws ApiException {
        getMembersOrganizationsByIdMemberByFilterWithHttpInfo(idMember, filter, key, token);
    }

    /**
     * getMembersOrganizationsByIdMemberByFilter()
     * 
     * @param idMember idMember or username (required)
     * @param filter filter (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersOrganizationsByIdMemberByFilterWithHttpInfo(String idMember, String filter, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = getMembersOrganizationsByIdMemberByFilterValidateBeforeCall(idMember, filter, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersOrganizationsByIdMemberByFilter() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param filter filter (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersOrganizationsByIdMemberByFilterAsync(String idMember, String filter, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersOrganizationsByIdMemberByFilterValidateBeforeCall(idMember, filter, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersOrganizationsInvitedByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersOrganizationsInvitedByIdMemberCall(String idMember, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/organizationsInvited"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersOrganizationsInvitedByIdMemberValidateBeforeCall(String idMember, String key, String token, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersOrganizationsInvitedByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersOrganizationsInvitedByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersOrganizationsInvitedByIdMember(Async)");
        }

        return getMembersOrganizationsInvitedByIdMemberCall(idMember, key, token, fields, _callback);

    }

    /**
     * getMembersOrganizationsInvitedByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to all)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersOrganizationsInvitedByIdMember(String idMember, String key, String token, String fields) throws ApiException {
        getMembersOrganizationsInvitedByIdMemberWithHttpInfo(idMember, key, token, fields);
    }

    /**
     * getMembersOrganizationsInvitedByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to all)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersOrganizationsInvitedByIdMemberWithHttpInfo(String idMember, String key, String token, String fields) throws ApiException {
        okhttp3.Call localVarCall = getMembersOrganizationsInvitedByIdMemberValidateBeforeCall(idMember, key, token, fields, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersOrganizationsInvitedByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param fields all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersOrganizationsInvitedByIdMemberAsync(String idMember, String key, String token, String fields, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersOrganizationsInvitedByIdMemberValidateBeforeCall(idMember, key, token, fields, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersOrganizationsInvitedByIdMemberByField
     * @param idMember idMember or username (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersOrganizationsInvitedByIdMemberByFieldCall(String idMember, String field, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/organizationsInvited/{field}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "field" + "}", localVarApiClient.escapeString(field.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersOrganizationsInvitedByIdMemberByFieldValidateBeforeCall(String idMember, String field, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersOrganizationsInvitedByIdMemberByField(Async)");
        }

        // verify the required parameter 'field' is set
        if (field == null) {
            throw new ApiException("Missing the required parameter 'field' when calling getMembersOrganizationsInvitedByIdMemberByField(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersOrganizationsInvitedByIdMemberByField(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersOrganizationsInvitedByIdMemberByField(Async)");
        }

        return getMembersOrganizationsInvitedByIdMemberByFieldCall(idMember, field, key, token, _callback);

    }

    /**
     * getMembersOrganizationsInvitedByIdMemberByField()
     * 
     * @param idMember idMember or username (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersOrganizationsInvitedByIdMemberByField(String idMember, String field, String key, String token) throws ApiException {
        getMembersOrganizationsInvitedByIdMemberByFieldWithHttpInfo(idMember, field, key, token);
    }

    /**
     * getMembersOrganizationsInvitedByIdMemberByField()
     * 
     * @param idMember idMember or username (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersOrganizationsInvitedByIdMemberByFieldWithHttpInfo(String idMember, String field, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = getMembersOrganizationsInvitedByIdMemberByFieldValidateBeforeCall(idMember, field, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersOrganizationsInvitedByIdMemberByField() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param field field (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersOrganizationsInvitedByIdMemberByFieldAsync(String idMember, String field, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersOrganizationsInvitedByIdMemberByFieldValidateBeforeCall(idMember, field, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersSavedSearchesByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersSavedSearchesByIdMemberCall(String idMember, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/savedSearches"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersSavedSearchesByIdMemberValidateBeforeCall(String idMember, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersSavedSearchesByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersSavedSearchesByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersSavedSearchesByIdMember(Async)");
        }

        return getMembersSavedSearchesByIdMemberCall(idMember, key, token, _callback);

    }

    /**
     * getMembersSavedSearchesByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersSavedSearchesByIdMember(String idMember, String key, String token) throws ApiException {
        getMembersSavedSearchesByIdMemberWithHttpInfo(idMember, key, token);
    }

    /**
     * getMembersSavedSearchesByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersSavedSearchesByIdMemberWithHttpInfo(String idMember, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = getMembersSavedSearchesByIdMemberValidateBeforeCall(idMember, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersSavedSearchesByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersSavedSearchesByIdMemberAsync(String idMember, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersSavedSearchesByIdMemberValidateBeforeCall(idMember, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersSavedSearchesByIdMemberByIdSavedSearch
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersSavedSearchesByIdMemberByIdSavedSearchCall(String idMember, String idSavedSearch, String key, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/savedSearches/{idSavedSearch}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idSavedSearch" + "}", localVarApiClient.escapeString(idSavedSearch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersSavedSearchesByIdMemberByIdSavedSearchValidateBeforeCall(String idMember, String idSavedSearch, String key, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersSavedSearchesByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'idSavedSearch' is set
        if (idSavedSearch == null) {
            throw new ApiException("Missing the required parameter 'idSavedSearch' when calling getMembersSavedSearchesByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersSavedSearchesByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersSavedSearchesByIdMemberByIdSavedSearch(Async)");
        }

        return getMembersSavedSearchesByIdMemberByIdSavedSearchCall(idMember, idSavedSearch, key, token, _callback);

    }

    /**
     * getMembersSavedSearchesByIdMemberByIdSavedSearch()
     * 
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersSavedSearchesByIdMemberByIdSavedSearch(String idMember, String idSavedSearch, String key, String token) throws ApiException {
        getMembersSavedSearchesByIdMemberByIdSavedSearchWithHttpInfo(idMember, idSavedSearch, key, token);
    }

    /**
     * getMembersSavedSearchesByIdMemberByIdSavedSearch()
     * 
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersSavedSearchesByIdMemberByIdSavedSearchWithHttpInfo(String idMember, String idSavedSearch, String key, String token) throws ApiException {
        okhttp3.Call localVarCall = getMembersSavedSearchesByIdMemberByIdSavedSearchValidateBeforeCall(idMember, idSavedSearch, key, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersSavedSearchesByIdMemberByIdSavedSearch() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersSavedSearchesByIdMemberByIdSavedSearchAsync(String idMember, String idSavedSearch, String key, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersSavedSearchesByIdMemberByIdSavedSearchValidateBeforeCall(idMember, idSavedSearch, key, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMembersTokensByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: all or none (optional, default to all)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersTokensByIdMemberCall(String idMember, String key, String token, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{idMember}/tokens"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMembersTokensByIdMemberValidateBeforeCall(String idMember, String key, String token, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling getMembersTokensByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMembersTokensByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getMembersTokensByIdMember(Async)");
        }

        return getMembersTokensByIdMemberCall(idMember, key, token, filter, _callback);

    }

    /**
     * getMembersTokensByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: all or none (optional, default to all)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void getMembersTokensByIdMember(String idMember, String key, String token, String filter) throws ApiException {
        getMembersTokensByIdMemberWithHttpInfo(idMember, key, token, filter);
    }

    /**
     * getMembersTokensByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: all or none (optional, default to all)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMembersTokensByIdMemberWithHttpInfo(String idMember, String key, String token, String filter) throws ApiException {
        okhttp3.Call localVarCall = getMembersTokensByIdMemberValidateBeforeCall(idMember, key, token, filter, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * getMembersTokensByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param filter One of: all or none (optional, default to all)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMembersTokensByIdMemberAsync(String idMember, String key, String token, String filter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMembersTokensByIdMemberValidateBeforeCall(idMember, key, token, filter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMembersAvatarSourceByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersAvatarSource Attributes of \&quot;Members Avatar Source\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersAvatarSourceByIdMemberCall(String idMember, String key, String token, MembersAvatarSource membersAvatarSource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersAvatarSource;

        // create path and map variables
        String localVarPath = "/members/{idMember}/avatarSource"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMembersAvatarSourceByIdMemberValidateBeforeCall(String idMember, String key, String token, MembersAvatarSource membersAvatarSource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateMembersAvatarSourceByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateMembersAvatarSourceByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateMembersAvatarSourceByIdMember(Async)");
        }

        // verify the required parameter 'membersAvatarSource' is set
        if (membersAvatarSource == null) {
            throw new ApiException("Missing the required parameter 'membersAvatarSource' when calling updateMembersAvatarSourceByIdMember(Async)");
        }

        return updateMembersAvatarSourceByIdMemberCall(idMember, key, token, membersAvatarSource, _callback);

    }

    /**
     * updateMembersAvatarSourceByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersAvatarSource Attributes of \&quot;Members Avatar Source\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateMembersAvatarSourceByIdMember(String idMember, String key, String token, MembersAvatarSource membersAvatarSource) throws ApiException {
        updateMembersAvatarSourceByIdMemberWithHttpInfo(idMember, key, token, membersAvatarSource);
    }

    /**
     * updateMembersAvatarSourceByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersAvatarSource Attributes of \&quot;Members Avatar Source\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateMembersAvatarSourceByIdMemberWithHttpInfo(String idMember, String key, String token, MembersAvatarSource membersAvatarSource) throws ApiException {
        okhttp3.Call localVarCall = updateMembersAvatarSourceByIdMemberValidateBeforeCall(idMember, key, token, membersAvatarSource, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateMembersAvatarSourceByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersAvatarSource Attributes of \&quot;Members Avatar Source\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersAvatarSourceByIdMemberAsync(String idMember, String key, String token, MembersAvatarSource membersAvatarSource, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMembersAvatarSourceByIdMemberValidateBeforeCall(idMember, key, token, membersAvatarSource, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMembersBioByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersBio Attributes of \&quot;Members Bio\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersBioByIdMemberCall(String idMember, String key, String token, MembersBio membersBio, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersBio;

        // create path and map variables
        String localVarPath = "/members/{idMember}/bio"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMembersBioByIdMemberValidateBeforeCall(String idMember, String key, String token, MembersBio membersBio, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateMembersBioByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateMembersBioByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateMembersBioByIdMember(Async)");
        }

        // verify the required parameter 'membersBio' is set
        if (membersBio == null) {
            throw new ApiException("Missing the required parameter 'membersBio' when calling updateMembersBioByIdMember(Async)");
        }

        return updateMembersBioByIdMemberCall(idMember, key, token, membersBio, _callback);

    }

    /**
     * updateMembersBioByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersBio Attributes of \&quot;Members Bio\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateMembersBioByIdMember(String idMember, String key, String token, MembersBio membersBio) throws ApiException {
        updateMembersBioByIdMemberWithHttpInfo(idMember, key, token, membersBio);
    }

    /**
     * updateMembersBioByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersBio Attributes of \&quot;Members Bio\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateMembersBioByIdMemberWithHttpInfo(String idMember, String key, String token, MembersBio membersBio) throws ApiException {
        okhttp3.Call localVarCall = updateMembersBioByIdMemberValidateBeforeCall(idMember, key, token, membersBio, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateMembersBioByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersBio Attributes of \&quot;Members Bio\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersBioByIdMemberAsync(String idMember, String key, String token, MembersBio membersBio, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMembersBioByIdMemberValidateBeforeCall(idMember, key, token, membersBio, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMembersBoardBackgroundsByIdMemberByIdBoardBackground
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersBoardBackgrounds Attributes of \&quot;Members Board Backgrounds\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersBoardBackgroundsByIdMemberByIdBoardBackgroundCall(String idMember, String idBoardBackground, String key, String token, MembersBoardBackgrounds membersBoardBackgrounds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersBoardBackgrounds;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boardBackgrounds/{idBoardBackground}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idBoardBackground" + "}", localVarApiClient.escapeString(idBoardBackground.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMembersBoardBackgroundsByIdMemberByIdBoardBackgroundValidateBeforeCall(String idMember, String idBoardBackground, String key, String token, MembersBoardBackgrounds membersBoardBackgrounds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateMembersBoardBackgroundsByIdMemberByIdBoardBackground(Async)");
        }

        // verify the required parameter 'idBoardBackground' is set
        if (idBoardBackground == null) {
            throw new ApiException("Missing the required parameter 'idBoardBackground' when calling updateMembersBoardBackgroundsByIdMemberByIdBoardBackground(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateMembersBoardBackgroundsByIdMemberByIdBoardBackground(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateMembersBoardBackgroundsByIdMemberByIdBoardBackground(Async)");
        }

        // verify the required parameter 'membersBoardBackgrounds' is set
        if (membersBoardBackgrounds == null) {
            throw new ApiException("Missing the required parameter 'membersBoardBackgrounds' when calling updateMembersBoardBackgroundsByIdMemberByIdBoardBackground(Async)");
        }

        return updateMembersBoardBackgroundsByIdMemberByIdBoardBackgroundCall(idMember, idBoardBackground, key, token, membersBoardBackgrounds, _callback);

    }

    /**
     * updateMembersBoardBackgroundsByIdMemberByIdBoardBackground()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersBoardBackgrounds Attributes of \&quot;Members Board Backgrounds\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateMembersBoardBackgroundsByIdMemberByIdBoardBackground(String idMember, String idBoardBackground, String key, String token, MembersBoardBackgrounds membersBoardBackgrounds) throws ApiException {
        updateMembersBoardBackgroundsByIdMemberByIdBoardBackgroundWithHttpInfo(idMember, idBoardBackground, key, token, membersBoardBackgrounds);
    }

    /**
     * updateMembersBoardBackgroundsByIdMemberByIdBoardBackground()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersBoardBackgrounds Attributes of \&quot;Members Board Backgrounds\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateMembersBoardBackgroundsByIdMemberByIdBoardBackgroundWithHttpInfo(String idMember, String idBoardBackground, String key, String token, MembersBoardBackgrounds membersBoardBackgrounds) throws ApiException {
        okhttp3.Call localVarCall = updateMembersBoardBackgroundsByIdMemberByIdBoardBackgroundValidateBeforeCall(idMember, idBoardBackground, key, token, membersBoardBackgrounds, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateMembersBoardBackgroundsByIdMemberByIdBoardBackground() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersBoardBackgrounds Attributes of \&quot;Members Board Backgrounds\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersBoardBackgroundsByIdMemberByIdBoardBackgroundAsync(String idMember, String idBoardBackground, String key, String token, MembersBoardBackgrounds membersBoardBackgrounds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMembersBoardBackgroundsByIdMemberByIdBoardBackgroundValidateBeforeCall(idMember, idBoardBackground, key, token, membersBoardBackgrounds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMembersBoardStarsByIdMemberByIdBoardStar
     * @param idMember idMember or username (required)
     * @param idBoardStar idBoardStar (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersBoardStars Attributes of \&quot;Members Board Stars\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersBoardStarsByIdMemberByIdBoardStarCall(String idMember, String idBoardStar, String key, String token, MembersBoardStars membersBoardStars, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersBoardStars;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boardStars/{idBoardStar}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idBoardStar" + "}", localVarApiClient.escapeString(idBoardStar.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMembersBoardStarsByIdMemberByIdBoardStarValidateBeforeCall(String idMember, String idBoardStar, String key, String token, MembersBoardStars membersBoardStars, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateMembersBoardStarsByIdMemberByIdBoardStar(Async)");
        }

        // verify the required parameter 'idBoardStar' is set
        if (idBoardStar == null) {
            throw new ApiException("Missing the required parameter 'idBoardStar' when calling updateMembersBoardStarsByIdMemberByIdBoardStar(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateMembersBoardStarsByIdMemberByIdBoardStar(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateMembersBoardStarsByIdMemberByIdBoardStar(Async)");
        }

        // verify the required parameter 'membersBoardStars' is set
        if (membersBoardStars == null) {
            throw new ApiException("Missing the required parameter 'membersBoardStars' when calling updateMembersBoardStarsByIdMemberByIdBoardStar(Async)");
        }

        return updateMembersBoardStarsByIdMemberByIdBoardStarCall(idMember, idBoardStar, key, token, membersBoardStars, _callback);

    }

    /**
     * updateMembersBoardStarsByIdMemberByIdBoardStar()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardStar idBoardStar (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersBoardStars Attributes of \&quot;Members Board Stars\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateMembersBoardStarsByIdMemberByIdBoardStar(String idMember, String idBoardStar, String key, String token, MembersBoardStars membersBoardStars) throws ApiException {
        updateMembersBoardStarsByIdMemberByIdBoardStarWithHttpInfo(idMember, idBoardStar, key, token, membersBoardStars);
    }

    /**
     * updateMembersBoardStarsByIdMemberByIdBoardStar()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardStar idBoardStar (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersBoardStars Attributes of \&quot;Members Board Stars\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateMembersBoardStarsByIdMemberByIdBoardStarWithHttpInfo(String idMember, String idBoardStar, String key, String token, MembersBoardStars membersBoardStars) throws ApiException {
        okhttp3.Call localVarCall = updateMembersBoardStarsByIdMemberByIdBoardStarValidateBeforeCall(idMember, idBoardStar, key, token, membersBoardStars, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateMembersBoardStarsByIdMemberByIdBoardStar() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param idBoardStar idBoardStar (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersBoardStars Attributes of \&quot;Members Board Stars\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersBoardStarsByIdMemberByIdBoardStarAsync(String idMember, String idBoardStar, String key, String token, MembersBoardStars membersBoardStars, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMembersBoardStarsByIdMemberByIdBoardStarValidateBeforeCall(idMember, idBoardStar, key, token, membersBoardStars, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar
     * @param idMember idMember or username (required)
     * @param idBoardStar idBoardStar (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersBoardStarsIdBoard Attributes of \&quot;Members Board Stars Id Board\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersBoardStarsIdBoardByIdMemberByIdBoardStarCall(String idMember, String idBoardStar, String key, String token, MembersBoardStarsIdBoard membersBoardStarsIdBoard, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersBoardStarsIdBoard;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boardStars/{idBoardStar}/idBoard"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idBoardStar" + "}", localVarApiClient.escapeString(idBoardStar.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMembersBoardStarsIdBoardByIdMemberByIdBoardStarValidateBeforeCall(String idMember, String idBoardStar, String key, String token, MembersBoardStarsIdBoard membersBoardStarsIdBoard, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar(Async)");
        }

        // verify the required parameter 'idBoardStar' is set
        if (idBoardStar == null) {
            throw new ApiException("Missing the required parameter 'idBoardStar' when calling updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar(Async)");
        }

        // verify the required parameter 'membersBoardStarsIdBoard' is set
        if (membersBoardStarsIdBoard == null) {
            throw new ApiException("Missing the required parameter 'membersBoardStarsIdBoard' when calling updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar(Async)");
        }

        return updateMembersBoardStarsIdBoardByIdMemberByIdBoardStarCall(idMember, idBoardStar, key, token, membersBoardStarsIdBoard, _callback);

    }

    /**
     * updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardStar idBoardStar (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersBoardStarsIdBoard Attributes of \&quot;Members Board Stars Id Board\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar(String idMember, String idBoardStar, String key, String token, MembersBoardStarsIdBoard membersBoardStarsIdBoard) throws ApiException {
        updateMembersBoardStarsIdBoardByIdMemberByIdBoardStarWithHttpInfo(idMember, idBoardStar, key, token, membersBoardStarsIdBoard);
    }

    /**
     * updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardStar idBoardStar (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersBoardStarsIdBoard Attributes of \&quot;Members Board Stars Id Board\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateMembersBoardStarsIdBoardByIdMemberByIdBoardStarWithHttpInfo(String idMember, String idBoardStar, String key, String token, MembersBoardStarsIdBoard membersBoardStarsIdBoard) throws ApiException {
        okhttp3.Call localVarCall = updateMembersBoardStarsIdBoardByIdMemberByIdBoardStarValidateBeforeCall(idMember, idBoardStar, key, token, membersBoardStarsIdBoard, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param idBoardStar idBoardStar (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersBoardStarsIdBoard Attributes of \&quot;Members Board Stars Id Board\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersBoardStarsIdBoardByIdMemberByIdBoardStarAsync(String idMember, String idBoardStar, String key, String token, MembersBoardStarsIdBoard membersBoardStarsIdBoard, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMembersBoardStarsIdBoardByIdMemberByIdBoardStarValidateBeforeCall(idMember, idBoardStar, key, token, membersBoardStarsIdBoard, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMembersBoardStarsPosByIdMemberByIdBoardStar
     * @param idMember idMember or username (required)
     * @param idBoardStar idBoardStar (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersBoardStarsPos Attributes of \&quot;Members Board Stars Pos\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersBoardStarsPosByIdMemberByIdBoardStarCall(String idMember, String idBoardStar, String key, String token, MembersBoardStarsPos membersBoardStarsPos, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersBoardStarsPos;

        // create path and map variables
        String localVarPath = "/members/{idMember}/boardStars/{idBoardStar}/pos"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idBoardStar" + "}", localVarApiClient.escapeString(idBoardStar.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMembersBoardStarsPosByIdMemberByIdBoardStarValidateBeforeCall(String idMember, String idBoardStar, String key, String token, MembersBoardStarsPos membersBoardStarsPos, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateMembersBoardStarsPosByIdMemberByIdBoardStar(Async)");
        }

        // verify the required parameter 'idBoardStar' is set
        if (idBoardStar == null) {
            throw new ApiException("Missing the required parameter 'idBoardStar' when calling updateMembersBoardStarsPosByIdMemberByIdBoardStar(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateMembersBoardStarsPosByIdMemberByIdBoardStar(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateMembersBoardStarsPosByIdMemberByIdBoardStar(Async)");
        }

        // verify the required parameter 'membersBoardStarsPos' is set
        if (membersBoardStarsPos == null) {
            throw new ApiException("Missing the required parameter 'membersBoardStarsPos' when calling updateMembersBoardStarsPosByIdMemberByIdBoardStar(Async)");
        }

        return updateMembersBoardStarsPosByIdMemberByIdBoardStarCall(idMember, idBoardStar, key, token, membersBoardStarsPos, _callback);

    }

    /**
     * updateMembersBoardStarsPosByIdMemberByIdBoardStar()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardStar idBoardStar (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersBoardStarsPos Attributes of \&quot;Members Board Stars Pos\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateMembersBoardStarsPosByIdMemberByIdBoardStar(String idMember, String idBoardStar, String key, String token, MembersBoardStarsPos membersBoardStarsPos) throws ApiException {
        updateMembersBoardStarsPosByIdMemberByIdBoardStarWithHttpInfo(idMember, idBoardStar, key, token, membersBoardStarsPos);
    }

    /**
     * updateMembersBoardStarsPosByIdMemberByIdBoardStar()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardStar idBoardStar (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersBoardStarsPos Attributes of \&quot;Members Board Stars Pos\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateMembersBoardStarsPosByIdMemberByIdBoardStarWithHttpInfo(String idMember, String idBoardStar, String key, String token, MembersBoardStarsPos membersBoardStarsPos) throws ApiException {
        okhttp3.Call localVarCall = updateMembersBoardStarsPosByIdMemberByIdBoardStarValidateBeforeCall(idMember, idBoardStar, key, token, membersBoardStarsPos, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateMembersBoardStarsPosByIdMemberByIdBoardStar() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param idBoardStar idBoardStar (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersBoardStarsPos Attributes of \&quot;Members Board Stars Pos\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersBoardStarsPosByIdMemberByIdBoardStarAsync(String idMember, String idBoardStar, String key, String token, MembersBoardStarsPos membersBoardStarsPos, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMembersBoardStarsPosByIdMemberByIdBoardStarValidateBeforeCall(idMember, idBoardStar, key, token, membersBoardStarsPos, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMembersByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param members Attributes of \&quot;Members\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersByIdMemberCall(String idMember, String key, String token, Members members, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = members;

        // create path and map variables
        String localVarPath = "/members/{idMember}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMembersByIdMemberValidateBeforeCall(String idMember, String key, String token, Members members, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateMembersByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateMembersByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateMembersByIdMember(Async)");
        }

        // verify the required parameter 'members' is set
        if (members == null) {
            throw new ApiException("Missing the required parameter 'members' when calling updateMembersByIdMember(Async)");
        }

        return updateMembersByIdMemberCall(idMember, key, token, members, _callback);

    }

    /**
     * updateMembersByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param members Attributes of \&quot;Members\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateMembersByIdMember(String idMember, String key, String token, Members members) throws ApiException {
        updateMembersByIdMemberWithHttpInfo(idMember, key, token, members);
    }

    /**
     * updateMembersByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param members Attributes of \&quot;Members\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateMembersByIdMemberWithHttpInfo(String idMember, String key, String token, Members members) throws ApiException {
        okhttp3.Call localVarCall = updateMembersByIdMemberValidateBeforeCall(idMember, key, token, members, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateMembersByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param members Attributes of \&quot;Members\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersByIdMemberAsync(String idMember, String key, String token, Members members, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMembersByIdMemberValidateBeforeCall(idMember, key, token, members, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersCustomBoardBackgrounds Attributes of \&quot;Members Custom Board Backgrounds\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundCall(String idMember, String idBoardBackground, String key, String token, MembersCustomBoardBackgrounds membersCustomBoardBackgrounds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersCustomBoardBackgrounds;

        // create path and map variables
        String localVarPath = "/members/{idMember}/customBoardBackgrounds/{idBoardBackground}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idBoardBackground" + "}", localVarApiClient.escapeString(idBoardBackground.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundValidateBeforeCall(String idMember, String idBoardBackground, String key, String token, MembersCustomBoardBackgrounds membersCustomBoardBackgrounds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground(Async)");
        }

        // verify the required parameter 'idBoardBackground' is set
        if (idBoardBackground == null) {
            throw new ApiException("Missing the required parameter 'idBoardBackground' when calling updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground(Async)");
        }

        // verify the required parameter 'membersCustomBoardBackgrounds' is set
        if (membersCustomBoardBackgrounds == null) {
            throw new ApiException("Missing the required parameter 'membersCustomBoardBackgrounds' when calling updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground(Async)");
        }

        return updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundCall(idMember, idBoardBackground, key, token, membersCustomBoardBackgrounds, _callback);

    }

    /**
     * updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersCustomBoardBackgrounds Attributes of \&quot;Members Custom Board Backgrounds\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground(String idMember, String idBoardBackground, String key, String token, MembersCustomBoardBackgrounds membersCustomBoardBackgrounds) throws ApiException {
        updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundWithHttpInfo(idMember, idBoardBackground, key, token, membersCustomBoardBackgrounds);
    }

    /**
     * updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
     * 
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersCustomBoardBackgrounds Attributes of \&quot;Members Custom Board Backgrounds\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundWithHttpInfo(String idMember, String idBoardBackground, String key, String token, MembersCustomBoardBackgrounds membersCustomBoardBackgrounds) throws ApiException {
        okhttp3.Call localVarCall = updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundValidateBeforeCall(idMember, idBoardBackground, key, token, membersCustomBoardBackgrounds, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param idBoardBackground idBoardBackground (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersCustomBoardBackgrounds Attributes of \&quot;Members Custom Board Backgrounds\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundAsync(String idMember, String idBoardBackground, String key, String token, MembersCustomBoardBackgrounds membersCustomBoardBackgrounds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundValidateBeforeCall(idMember, idBoardBackground, key, token, membersCustomBoardBackgrounds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMembersFullNameByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersFullName Attributes of \&quot;Members Full Name\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersFullNameByIdMemberCall(String idMember, String key, String token, MembersFullName membersFullName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersFullName;

        // create path and map variables
        String localVarPath = "/members/{idMember}/fullName"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMembersFullNameByIdMemberValidateBeforeCall(String idMember, String key, String token, MembersFullName membersFullName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateMembersFullNameByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateMembersFullNameByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateMembersFullNameByIdMember(Async)");
        }

        // verify the required parameter 'membersFullName' is set
        if (membersFullName == null) {
            throw new ApiException("Missing the required parameter 'membersFullName' when calling updateMembersFullNameByIdMember(Async)");
        }

        return updateMembersFullNameByIdMemberCall(idMember, key, token, membersFullName, _callback);

    }

    /**
     * updateMembersFullNameByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersFullName Attributes of \&quot;Members Full Name\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateMembersFullNameByIdMember(String idMember, String key, String token, MembersFullName membersFullName) throws ApiException {
        updateMembersFullNameByIdMemberWithHttpInfo(idMember, key, token, membersFullName);
    }

    /**
     * updateMembersFullNameByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersFullName Attributes of \&quot;Members Full Name\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateMembersFullNameByIdMemberWithHttpInfo(String idMember, String key, String token, MembersFullName membersFullName) throws ApiException {
        okhttp3.Call localVarCall = updateMembersFullNameByIdMemberValidateBeforeCall(idMember, key, token, membersFullName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateMembersFullNameByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersFullName Attributes of \&quot;Members Full Name\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersFullNameByIdMemberAsync(String idMember, String key, String token, MembersFullName membersFullName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMembersFullNameByIdMemberValidateBeforeCall(idMember, key, token, membersFullName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMembersInitialsByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersInitials Attributes of \&quot;Members Initials\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersInitialsByIdMemberCall(String idMember, String key, String token, MembersInitials membersInitials, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersInitials;

        // create path and map variables
        String localVarPath = "/members/{idMember}/initials"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMembersInitialsByIdMemberValidateBeforeCall(String idMember, String key, String token, MembersInitials membersInitials, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateMembersInitialsByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateMembersInitialsByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateMembersInitialsByIdMember(Async)");
        }

        // verify the required parameter 'membersInitials' is set
        if (membersInitials == null) {
            throw new ApiException("Missing the required parameter 'membersInitials' when calling updateMembersInitialsByIdMember(Async)");
        }

        return updateMembersInitialsByIdMemberCall(idMember, key, token, membersInitials, _callback);

    }

    /**
     * updateMembersInitialsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersInitials Attributes of \&quot;Members Initials\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateMembersInitialsByIdMember(String idMember, String key, String token, MembersInitials membersInitials) throws ApiException {
        updateMembersInitialsByIdMemberWithHttpInfo(idMember, key, token, membersInitials);
    }

    /**
     * updateMembersInitialsByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersInitials Attributes of \&quot;Members Initials\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateMembersInitialsByIdMemberWithHttpInfo(String idMember, String key, String token, MembersInitials membersInitials) throws ApiException {
        okhttp3.Call localVarCall = updateMembersInitialsByIdMemberValidateBeforeCall(idMember, key, token, membersInitials, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateMembersInitialsByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersInitials Attributes of \&quot;Members Initials\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersInitialsByIdMemberAsync(String idMember, String key, String token, MembersInitials membersInitials, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMembersInitialsByIdMemberValidateBeforeCall(idMember, key, token, membersInitials, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMembersPrefsColorBlindByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsColorBlind Attributes of \&quot;Prefs Color Blind\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersPrefsColorBlindByIdMemberCall(String idMember, String key, String token, PrefsColorBlind prefsColorBlind, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsColorBlind;

        // create path and map variables
        String localVarPath = "/members/{idMember}/prefs/colorBlind"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMembersPrefsColorBlindByIdMemberValidateBeforeCall(String idMember, String key, String token, PrefsColorBlind prefsColorBlind, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateMembersPrefsColorBlindByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateMembersPrefsColorBlindByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateMembersPrefsColorBlindByIdMember(Async)");
        }

        // verify the required parameter 'prefsColorBlind' is set
        if (prefsColorBlind == null) {
            throw new ApiException("Missing the required parameter 'prefsColorBlind' when calling updateMembersPrefsColorBlindByIdMember(Async)");
        }

        return updateMembersPrefsColorBlindByIdMemberCall(idMember, key, token, prefsColorBlind, _callback);

    }

    /**
     * updateMembersPrefsColorBlindByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsColorBlind Attributes of \&quot;Prefs Color Blind\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateMembersPrefsColorBlindByIdMember(String idMember, String key, String token, PrefsColorBlind prefsColorBlind) throws ApiException {
        updateMembersPrefsColorBlindByIdMemberWithHttpInfo(idMember, key, token, prefsColorBlind);
    }

    /**
     * updateMembersPrefsColorBlindByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsColorBlind Attributes of \&quot;Prefs Color Blind\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateMembersPrefsColorBlindByIdMemberWithHttpInfo(String idMember, String key, String token, PrefsColorBlind prefsColorBlind) throws ApiException {
        okhttp3.Call localVarCall = updateMembersPrefsColorBlindByIdMemberValidateBeforeCall(idMember, key, token, prefsColorBlind, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateMembersPrefsColorBlindByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsColorBlind Attributes of \&quot;Prefs Color Blind\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersPrefsColorBlindByIdMemberAsync(String idMember, String key, String token, PrefsColorBlind prefsColorBlind, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMembersPrefsColorBlindByIdMemberValidateBeforeCall(idMember, key, token, prefsColorBlind, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMembersPrefsLocaleByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsLocale Attributes of \&quot;Prefs Locale\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersPrefsLocaleByIdMemberCall(String idMember, String key, String token, PrefsLocale prefsLocale, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsLocale;

        // create path and map variables
        String localVarPath = "/members/{idMember}/prefs/locale"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMembersPrefsLocaleByIdMemberValidateBeforeCall(String idMember, String key, String token, PrefsLocale prefsLocale, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateMembersPrefsLocaleByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateMembersPrefsLocaleByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateMembersPrefsLocaleByIdMember(Async)");
        }

        // verify the required parameter 'prefsLocale' is set
        if (prefsLocale == null) {
            throw new ApiException("Missing the required parameter 'prefsLocale' when calling updateMembersPrefsLocaleByIdMember(Async)");
        }

        return updateMembersPrefsLocaleByIdMemberCall(idMember, key, token, prefsLocale, _callback);

    }

    /**
     * updateMembersPrefsLocaleByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsLocale Attributes of \&quot;Prefs Locale\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateMembersPrefsLocaleByIdMember(String idMember, String key, String token, PrefsLocale prefsLocale) throws ApiException {
        updateMembersPrefsLocaleByIdMemberWithHttpInfo(idMember, key, token, prefsLocale);
    }

    /**
     * updateMembersPrefsLocaleByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsLocale Attributes of \&quot;Prefs Locale\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateMembersPrefsLocaleByIdMemberWithHttpInfo(String idMember, String key, String token, PrefsLocale prefsLocale) throws ApiException {
        okhttp3.Call localVarCall = updateMembersPrefsLocaleByIdMemberValidateBeforeCall(idMember, key, token, prefsLocale, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateMembersPrefsLocaleByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsLocale Attributes of \&quot;Prefs Locale\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersPrefsLocaleByIdMemberAsync(String idMember, String key, String token, PrefsLocale prefsLocale, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMembersPrefsLocaleByIdMemberValidateBeforeCall(idMember, key, token, prefsLocale, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMembersPrefsMinutesBetweenSummariesByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsMinutesBetweenSummaries Attributes of \&quot;Prefs Minutes Between Summaries\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersPrefsMinutesBetweenSummariesByIdMemberCall(String idMember, String key, String token, PrefsMinutesBetweenSummaries prefsMinutesBetweenSummaries, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefsMinutesBetweenSummaries;

        // create path and map variables
        String localVarPath = "/members/{idMember}/prefs/minutesBetweenSummaries"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMembersPrefsMinutesBetweenSummariesByIdMemberValidateBeforeCall(String idMember, String key, String token, PrefsMinutesBetweenSummaries prefsMinutesBetweenSummaries, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateMembersPrefsMinutesBetweenSummariesByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateMembersPrefsMinutesBetweenSummariesByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateMembersPrefsMinutesBetweenSummariesByIdMember(Async)");
        }

        // verify the required parameter 'prefsMinutesBetweenSummaries' is set
        if (prefsMinutesBetweenSummaries == null) {
            throw new ApiException("Missing the required parameter 'prefsMinutesBetweenSummaries' when calling updateMembersPrefsMinutesBetweenSummariesByIdMember(Async)");
        }

        return updateMembersPrefsMinutesBetweenSummariesByIdMemberCall(idMember, key, token, prefsMinutesBetweenSummaries, _callback);

    }

    /**
     * updateMembersPrefsMinutesBetweenSummariesByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsMinutesBetweenSummaries Attributes of \&quot;Prefs Minutes Between Summaries\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateMembersPrefsMinutesBetweenSummariesByIdMember(String idMember, String key, String token, PrefsMinutesBetweenSummaries prefsMinutesBetweenSummaries) throws ApiException {
        updateMembersPrefsMinutesBetweenSummariesByIdMemberWithHttpInfo(idMember, key, token, prefsMinutesBetweenSummaries);
    }

    /**
     * updateMembersPrefsMinutesBetweenSummariesByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsMinutesBetweenSummaries Attributes of \&quot;Prefs Minutes Between Summaries\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateMembersPrefsMinutesBetweenSummariesByIdMemberWithHttpInfo(String idMember, String key, String token, PrefsMinutesBetweenSummaries prefsMinutesBetweenSummaries) throws ApiException {
        okhttp3.Call localVarCall = updateMembersPrefsMinutesBetweenSummariesByIdMemberValidateBeforeCall(idMember, key, token, prefsMinutesBetweenSummaries, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateMembersPrefsMinutesBetweenSummariesByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param prefsMinutesBetweenSummaries Attributes of \&quot;Prefs Minutes Between Summaries\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersPrefsMinutesBetweenSummariesByIdMemberAsync(String idMember, String key, String token, PrefsMinutesBetweenSummaries prefsMinutesBetweenSummaries, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMembersPrefsMinutesBetweenSummariesByIdMemberValidateBeforeCall(idMember, key, token, prefsMinutesBetweenSummaries, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMembersSavedSearchesByIdMemberByIdSavedSearch
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersSavedSearches Attributes of \&quot;Members Saved Searches\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersSavedSearchesByIdMemberByIdSavedSearchCall(String idMember, String idSavedSearch, String key, String token, MembersSavedSearches membersSavedSearches, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersSavedSearches;

        // create path and map variables
        String localVarPath = "/members/{idMember}/savedSearches/{idSavedSearch}"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idSavedSearch" + "}", localVarApiClient.escapeString(idSavedSearch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMembersSavedSearchesByIdMemberByIdSavedSearchValidateBeforeCall(String idMember, String idSavedSearch, String key, String token, MembersSavedSearches membersSavedSearches, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateMembersSavedSearchesByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'idSavedSearch' is set
        if (idSavedSearch == null) {
            throw new ApiException("Missing the required parameter 'idSavedSearch' when calling updateMembersSavedSearchesByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateMembersSavedSearchesByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateMembersSavedSearchesByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'membersSavedSearches' is set
        if (membersSavedSearches == null) {
            throw new ApiException("Missing the required parameter 'membersSavedSearches' when calling updateMembersSavedSearchesByIdMemberByIdSavedSearch(Async)");
        }

        return updateMembersSavedSearchesByIdMemberByIdSavedSearchCall(idMember, idSavedSearch, key, token, membersSavedSearches, _callback);

    }

    /**
     * updateMembersSavedSearchesByIdMemberByIdSavedSearch()
     * 
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersSavedSearches Attributes of \&quot;Members Saved Searches\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateMembersSavedSearchesByIdMemberByIdSavedSearch(String idMember, String idSavedSearch, String key, String token, MembersSavedSearches membersSavedSearches) throws ApiException {
        updateMembersSavedSearchesByIdMemberByIdSavedSearchWithHttpInfo(idMember, idSavedSearch, key, token, membersSavedSearches);
    }

    /**
     * updateMembersSavedSearchesByIdMemberByIdSavedSearch()
     * 
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersSavedSearches Attributes of \&quot;Members Saved Searches\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateMembersSavedSearchesByIdMemberByIdSavedSearchWithHttpInfo(String idMember, String idSavedSearch, String key, String token, MembersSavedSearches membersSavedSearches) throws ApiException {
        okhttp3.Call localVarCall = updateMembersSavedSearchesByIdMemberByIdSavedSearchValidateBeforeCall(idMember, idSavedSearch, key, token, membersSavedSearches, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateMembersSavedSearchesByIdMemberByIdSavedSearch() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersSavedSearches Attributes of \&quot;Members Saved Searches\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersSavedSearchesByIdMemberByIdSavedSearchAsync(String idMember, String idSavedSearch, String key, String token, MembersSavedSearches membersSavedSearches, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMembersSavedSearchesByIdMemberByIdSavedSearchValidateBeforeCall(idMember, idSavedSearch, key, token, membersSavedSearches, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMembersSavedSearchesNameByIdMemberByIdSavedSearch
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersSavedSearchesName Attributes of \&quot;Members Saved Searches Name\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersSavedSearchesNameByIdMemberByIdSavedSearchCall(String idMember, String idSavedSearch, String key, String token, MembersSavedSearchesName membersSavedSearchesName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersSavedSearchesName;

        // create path and map variables
        String localVarPath = "/members/{idMember}/savedSearches/{idSavedSearch}/name"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idSavedSearch" + "}", localVarApiClient.escapeString(idSavedSearch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMembersSavedSearchesNameByIdMemberByIdSavedSearchValidateBeforeCall(String idMember, String idSavedSearch, String key, String token, MembersSavedSearchesName membersSavedSearchesName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateMembersSavedSearchesNameByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'idSavedSearch' is set
        if (idSavedSearch == null) {
            throw new ApiException("Missing the required parameter 'idSavedSearch' when calling updateMembersSavedSearchesNameByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateMembersSavedSearchesNameByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateMembersSavedSearchesNameByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'membersSavedSearchesName' is set
        if (membersSavedSearchesName == null) {
            throw new ApiException("Missing the required parameter 'membersSavedSearchesName' when calling updateMembersSavedSearchesNameByIdMemberByIdSavedSearch(Async)");
        }

        return updateMembersSavedSearchesNameByIdMemberByIdSavedSearchCall(idMember, idSavedSearch, key, token, membersSavedSearchesName, _callback);

    }

    /**
     * updateMembersSavedSearchesNameByIdMemberByIdSavedSearch()
     * 
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersSavedSearchesName Attributes of \&quot;Members Saved Searches Name\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateMembersSavedSearchesNameByIdMemberByIdSavedSearch(String idMember, String idSavedSearch, String key, String token, MembersSavedSearchesName membersSavedSearchesName) throws ApiException {
        updateMembersSavedSearchesNameByIdMemberByIdSavedSearchWithHttpInfo(idMember, idSavedSearch, key, token, membersSavedSearchesName);
    }

    /**
     * updateMembersSavedSearchesNameByIdMemberByIdSavedSearch()
     * 
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersSavedSearchesName Attributes of \&quot;Members Saved Searches Name\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateMembersSavedSearchesNameByIdMemberByIdSavedSearchWithHttpInfo(String idMember, String idSavedSearch, String key, String token, MembersSavedSearchesName membersSavedSearchesName) throws ApiException {
        okhttp3.Call localVarCall = updateMembersSavedSearchesNameByIdMemberByIdSavedSearchValidateBeforeCall(idMember, idSavedSearch, key, token, membersSavedSearchesName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateMembersSavedSearchesNameByIdMemberByIdSavedSearch() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersSavedSearchesName Attributes of \&quot;Members Saved Searches Name\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersSavedSearchesNameByIdMemberByIdSavedSearchAsync(String idMember, String idSavedSearch, String key, String token, MembersSavedSearchesName membersSavedSearchesName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMembersSavedSearchesNameByIdMemberByIdSavedSearchValidateBeforeCall(idMember, idSavedSearch, key, token, membersSavedSearchesName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMembersSavedSearchesPosByIdMemberByIdSavedSearch
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersSavedSearchesPos Attributes of \&quot;Members Saved Searches Pos\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersSavedSearchesPosByIdMemberByIdSavedSearchCall(String idMember, String idSavedSearch, String key, String token, MembersSavedSearchesPos membersSavedSearchesPos, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersSavedSearchesPos;

        // create path and map variables
        String localVarPath = "/members/{idMember}/savedSearches/{idSavedSearch}/pos"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idSavedSearch" + "}", localVarApiClient.escapeString(idSavedSearch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMembersSavedSearchesPosByIdMemberByIdSavedSearchValidateBeforeCall(String idMember, String idSavedSearch, String key, String token, MembersSavedSearchesPos membersSavedSearchesPos, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateMembersSavedSearchesPosByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'idSavedSearch' is set
        if (idSavedSearch == null) {
            throw new ApiException("Missing the required parameter 'idSavedSearch' when calling updateMembersSavedSearchesPosByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateMembersSavedSearchesPosByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateMembersSavedSearchesPosByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'membersSavedSearchesPos' is set
        if (membersSavedSearchesPos == null) {
            throw new ApiException("Missing the required parameter 'membersSavedSearchesPos' when calling updateMembersSavedSearchesPosByIdMemberByIdSavedSearch(Async)");
        }

        return updateMembersSavedSearchesPosByIdMemberByIdSavedSearchCall(idMember, idSavedSearch, key, token, membersSavedSearchesPos, _callback);

    }

    /**
     * updateMembersSavedSearchesPosByIdMemberByIdSavedSearch()
     * 
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersSavedSearchesPos Attributes of \&quot;Members Saved Searches Pos\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateMembersSavedSearchesPosByIdMemberByIdSavedSearch(String idMember, String idSavedSearch, String key, String token, MembersSavedSearchesPos membersSavedSearchesPos) throws ApiException {
        updateMembersSavedSearchesPosByIdMemberByIdSavedSearchWithHttpInfo(idMember, idSavedSearch, key, token, membersSavedSearchesPos);
    }

    /**
     * updateMembersSavedSearchesPosByIdMemberByIdSavedSearch()
     * 
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersSavedSearchesPos Attributes of \&quot;Members Saved Searches Pos\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateMembersSavedSearchesPosByIdMemberByIdSavedSearchWithHttpInfo(String idMember, String idSavedSearch, String key, String token, MembersSavedSearchesPos membersSavedSearchesPos) throws ApiException {
        okhttp3.Call localVarCall = updateMembersSavedSearchesPosByIdMemberByIdSavedSearchValidateBeforeCall(idMember, idSavedSearch, key, token, membersSavedSearchesPos, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateMembersSavedSearchesPosByIdMemberByIdSavedSearch() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersSavedSearchesPos Attributes of \&quot;Members Saved Searches Pos\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersSavedSearchesPosByIdMemberByIdSavedSearchAsync(String idMember, String idSavedSearch, String key, String token, MembersSavedSearchesPos membersSavedSearchesPos, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMembersSavedSearchesPosByIdMemberByIdSavedSearchValidateBeforeCall(idMember, idSavedSearch, key, token, membersSavedSearchesPos, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersSavedSearchesQuery Attributes of \&quot;Members Saved Searches Query\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersSavedSearchesQueryByIdMemberByIdSavedSearchCall(String idMember, String idSavedSearch, String key, String token, MembersSavedSearchesQuery membersSavedSearchesQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersSavedSearchesQuery;

        // create path and map variables
        String localVarPath = "/members/{idMember}/savedSearches/{idSavedSearch}/query"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()))
            .replace("{" + "idSavedSearch" + "}", localVarApiClient.escapeString(idSavedSearch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMembersSavedSearchesQueryByIdMemberByIdSavedSearchValidateBeforeCall(String idMember, String idSavedSearch, String key, String token, MembersSavedSearchesQuery membersSavedSearchesQuery, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'idSavedSearch' is set
        if (idSavedSearch == null) {
            throw new ApiException("Missing the required parameter 'idSavedSearch' when calling updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch(Async)");
        }

        // verify the required parameter 'membersSavedSearchesQuery' is set
        if (membersSavedSearchesQuery == null) {
            throw new ApiException("Missing the required parameter 'membersSavedSearchesQuery' when calling updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch(Async)");
        }

        return updateMembersSavedSearchesQueryByIdMemberByIdSavedSearchCall(idMember, idSavedSearch, key, token, membersSavedSearchesQuery, _callback);

    }

    /**
     * updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch()
     * 
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersSavedSearchesQuery Attributes of \&quot;Members Saved Searches Query\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch(String idMember, String idSavedSearch, String key, String token, MembersSavedSearchesQuery membersSavedSearchesQuery) throws ApiException {
        updateMembersSavedSearchesQueryByIdMemberByIdSavedSearchWithHttpInfo(idMember, idSavedSearch, key, token, membersSavedSearchesQuery);
    }

    /**
     * updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch()
     * 
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersSavedSearchesQuery Attributes of \&quot;Members Saved Searches Query\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateMembersSavedSearchesQueryByIdMemberByIdSavedSearchWithHttpInfo(String idMember, String idSavedSearch, String key, String token, MembersSavedSearchesQuery membersSavedSearchesQuery) throws ApiException {
        okhttp3.Call localVarCall = updateMembersSavedSearchesQueryByIdMemberByIdSavedSearchValidateBeforeCall(idMember, idSavedSearch, key, token, membersSavedSearchesQuery, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param idSavedSearch idSavedSearch (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersSavedSearchesQuery Attributes of \&quot;Members Saved Searches Query\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersSavedSearchesQueryByIdMemberByIdSavedSearchAsync(String idMember, String idSavedSearch, String key, String token, MembersSavedSearchesQuery membersSavedSearchesQuery, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMembersSavedSearchesQueryByIdMemberByIdSavedSearchValidateBeforeCall(idMember, idSavedSearch, key, token, membersSavedSearchesQuery, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMembersUsernameByIdMember
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersUsername Attributes of \&quot;Members Username\&quot; to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersUsernameByIdMemberCall(String idMember, String key, String token, MembersUsername membersUsername, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersUsername;

        // create path and map variables
        String localVarPath = "/members/{idMember}/username"
            .replace("{" + "idMember" + "}", localVarApiClient.escapeString(idMember.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMembersUsernameByIdMemberValidateBeforeCall(String idMember, String key, String token, MembersUsername membersUsername, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idMember' is set
        if (idMember == null) {
            throw new ApiException("Missing the required parameter 'idMember' when calling updateMembersUsernameByIdMember(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateMembersUsernameByIdMember(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateMembersUsernameByIdMember(Async)");
        }

        // verify the required parameter 'membersUsername' is set
        if (membersUsername == null) {
            throw new ApiException("Missing the required parameter 'membersUsername' when calling updateMembersUsernameByIdMember(Async)");
        }

        return updateMembersUsernameByIdMemberCall(idMember, key, token, membersUsername, _callback);

    }

    /**
     * updateMembersUsernameByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersUsername Attributes of \&quot;Members Username\&quot; to be updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public void updateMembersUsernameByIdMember(String idMember, String key, String token, MembersUsername membersUsername) throws ApiException {
        updateMembersUsernameByIdMemberWithHttpInfo(idMember, key, token, membersUsername);
    }

    /**
     * updateMembersUsernameByIdMember()
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersUsername Attributes of \&quot;Members Username\&quot; to be updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateMembersUsernameByIdMemberWithHttpInfo(String idMember, String key, String token, MembersUsername membersUsername) throws ApiException {
        okhttp3.Call localVarCall = updateMembersUsernameByIdMemberValidateBeforeCall(idMember, key, token, membersUsername, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * updateMembersUsernameByIdMember() (asynchronously)
     * 
     * @param idMember idMember or username (required)
     * @param key &lt;a href&#x3D;\&quot;https://trello.com/1/appKey/generate\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Generate your application key&lt;/a&gt; (required)
     * @param token &lt;a href&#x3D;\&quot;https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\&quot;  target&#x3D;\&quot;_blank\&quot;&gt;Getting a token from a user&lt;/a&gt; (required)
     * @param membersUsername Attributes of \&quot;Members Username\&quot; to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Server rejection </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMembersUsernameByIdMemberAsync(String idMember, String key, String token, MembersUsername membersUsername, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMembersUsernameByIdMemberValidateBeforeCall(idMember, key, token, membersUsername, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
