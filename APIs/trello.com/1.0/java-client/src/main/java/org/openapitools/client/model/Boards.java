/*
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Boards
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:42.043299-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Boards {
  public static final String SERIALIZED_NAME_CLOSED = "closed";
  @SerializedName(SERIALIZED_NAME_CLOSED)
  private String closed;

  public static final String SERIALIZED_NAME_DESC = "desc";
  @SerializedName(SERIALIZED_NAME_DESC)
  private String desc;

  public static final String SERIALIZED_NAME_ID_BOARD_SOURCE = "idBoardSource";
  @SerializedName(SERIALIZED_NAME_ID_BOARD_SOURCE)
  private String idBoardSource;

  public static final String SERIALIZED_NAME_ID_ORGANIZATION = "idOrganization";
  @SerializedName(SERIALIZED_NAME_ID_ORGANIZATION)
  private String idOrganization;

  public static final String SERIALIZED_NAME_KEEP_FROM_SOURCE = "keepFromSource";
  @SerializedName(SERIALIZED_NAME_KEEP_FROM_SOURCE)
  private String keepFromSource;

  public static final String SERIALIZED_NAME_LABEL_NAMES_BLUE = "labelNames/blue";
  @SerializedName(SERIALIZED_NAME_LABEL_NAMES_BLUE)
  private String labelNamesBlue;

  public static final String SERIALIZED_NAME_LABEL_NAMES_GREEN = "labelNames/green";
  @SerializedName(SERIALIZED_NAME_LABEL_NAMES_GREEN)
  private String labelNamesGreen;

  public static final String SERIALIZED_NAME_LABEL_NAMES_ORANGE = "labelNames/orange";
  @SerializedName(SERIALIZED_NAME_LABEL_NAMES_ORANGE)
  private String labelNamesOrange;

  public static final String SERIALIZED_NAME_LABEL_NAMES_PURPLE = "labelNames/purple";
  @SerializedName(SERIALIZED_NAME_LABEL_NAMES_PURPLE)
  private String labelNamesPurple;

  public static final String SERIALIZED_NAME_LABEL_NAMES_RED = "labelNames/red";
  @SerializedName(SERIALIZED_NAME_LABEL_NAMES_RED)
  private String labelNamesRed;

  public static final String SERIALIZED_NAME_LABEL_NAMES_YELLOW = "labelNames/yellow";
  @SerializedName(SERIALIZED_NAME_LABEL_NAMES_YELLOW)
  private String labelNamesYellow;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POWER_UPS = "powerUps";
  @SerializedName(SERIALIZED_NAME_POWER_UPS)
  private String powerUps;

  public static final String SERIALIZED_NAME_PREFS_BACKGROUND = "prefs/background";
  @SerializedName(SERIALIZED_NAME_PREFS_BACKGROUND)
  private String prefsBackground;

  public static final String SERIALIZED_NAME_PREFS_CALENDAR_FEED_ENABLED = "prefs/calendarFeedEnabled";
  @SerializedName(SERIALIZED_NAME_PREFS_CALENDAR_FEED_ENABLED)
  private String prefsCalendarFeedEnabled;

  public static final String SERIALIZED_NAME_PREFS_CARD_AGING = "prefs/cardAging";
  @SerializedName(SERIALIZED_NAME_PREFS_CARD_AGING)
  private String prefsCardAging;

  public static final String SERIALIZED_NAME_PREFS_CARD_COVERS = "prefs/cardCovers";
  @SerializedName(SERIALIZED_NAME_PREFS_CARD_COVERS)
  private String prefsCardCovers;

  public static final String SERIALIZED_NAME_PREFS_COMMENTS = "prefs/comments";
  @SerializedName(SERIALIZED_NAME_PREFS_COMMENTS)
  private String prefsComments;

  public static final String SERIALIZED_NAME_PREFS_INVITATIONS = "prefs/invitations";
  @SerializedName(SERIALIZED_NAME_PREFS_INVITATIONS)
  private String prefsInvitations;

  public static final String SERIALIZED_NAME_PREFS_PERMISSION_LEVEL = "prefs/permissionLevel";
  @SerializedName(SERIALIZED_NAME_PREFS_PERMISSION_LEVEL)
  private String prefsPermissionLevel;

  public static final String SERIALIZED_NAME_PREFS_SELF_JOIN = "prefs/selfJoin";
  @SerializedName(SERIALIZED_NAME_PREFS_SELF_JOIN)
  private String prefsSelfJoin;

  public static final String SERIALIZED_NAME_PREFS_VOTING = "prefs/voting";
  @SerializedName(SERIALIZED_NAME_PREFS_VOTING)
  private String prefsVoting;

  public static final String SERIALIZED_NAME_PREFS_BACKGROUND = "prefs_background";
  @SerializedName(SERIALIZED_NAME_PREFS_BACKGROUND)
  private String prefsBackground;

  public static final String SERIALIZED_NAME_PREFS_CARD_AGING = "prefs_cardAging";
  @SerializedName(SERIALIZED_NAME_PREFS_CARD_AGING)
  private String prefsCardAging;

  public static final String SERIALIZED_NAME_PREFS_CARD_COVERS = "prefs_cardCovers";
  @SerializedName(SERIALIZED_NAME_PREFS_CARD_COVERS)
  private String prefsCardCovers;

  public static final String SERIALIZED_NAME_PREFS_COMMENTS = "prefs_comments";
  @SerializedName(SERIALIZED_NAME_PREFS_COMMENTS)
  private String prefsComments;

  public static final String SERIALIZED_NAME_PREFS_INVITATIONS = "prefs_invitations";
  @SerializedName(SERIALIZED_NAME_PREFS_INVITATIONS)
  private String prefsInvitations;

  public static final String SERIALIZED_NAME_PREFS_PERMISSION_LEVEL = "prefs_permissionLevel";
  @SerializedName(SERIALIZED_NAME_PREFS_PERMISSION_LEVEL)
  private String prefsPermissionLevel;

  public static final String SERIALIZED_NAME_PREFS_SELF_JOIN = "prefs_selfJoin";
  @SerializedName(SERIALIZED_NAME_PREFS_SELF_JOIN)
  private String prefsSelfJoin;

  public static final String SERIALIZED_NAME_PREFS_VOTING = "prefs_voting";
  @SerializedName(SERIALIZED_NAME_PREFS_VOTING)
  private String prefsVoting;

  public static final String SERIALIZED_NAME_SUBSCRIBED = "subscribed";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBED)
  private String subscribed;

  public Boards() {
  }

  public Boards closed(String closed) {
    this.closed = closed;
    return this;
  }

  /**
   *  true or false
   * @return closed
   */
  @javax.annotation.Nullable
  public String getClosed() {
    return closed;
  }

  public void setClosed(String closed) {
    this.closed = closed;
  }


  public Boards desc(String desc) {
    this.desc = desc;
    return this;
  }

  /**
   * a string with a length from 0 to 16384
   * @return desc
   */
  @javax.annotation.Nullable
  public String getDesc() {
    return desc;
  }

  public void setDesc(String desc) {
    this.desc = desc;
  }


  public Boards idBoardSource(String idBoardSource) {
    this.idBoardSource = idBoardSource;
    return this;
  }

  /**
   * The id of the board to copy into the new board
   * @return idBoardSource
   */
  @javax.annotation.Nullable
  public String getIdBoardSource() {
    return idBoardSource;
  }

  public void setIdBoardSource(String idBoardSource) {
    this.idBoardSource = idBoardSource;
  }


  public Boards idOrganization(String idOrganization) {
    this.idOrganization = idOrganization;
    return this;
  }

  /**
   * The id or name of the organization to add the board to.
   * @return idOrganization
   */
  @javax.annotation.Nullable
  public String getIdOrganization() {
    return idOrganization;
  }

  public void setIdOrganization(String idOrganization) {
    this.idOrganization = idOrganization;
  }


  public Boards keepFromSource(String keepFromSource) {
    this.keepFromSource = keepFromSource;
    return this;
  }

  /**
   * Components of the source board to copy.
   * @return keepFromSource
   */
  @javax.annotation.Nullable
  public String getKeepFromSource() {
    return keepFromSource;
  }

  public void setKeepFromSource(String keepFromSource) {
    this.keepFromSource = keepFromSource;
  }


  public Boards labelNamesBlue(String labelNamesBlue) {
    this.labelNamesBlue = labelNamesBlue;
    return this;
  }

  /**
   * a string with a length from 0 to 16384
   * @return labelNamesBlue
   */
  @javax.annotation.Nullable
  public String getLabelNamesBlue() {
    return labelNamesBlue;
  }

  public void setLabelNamesBlue(String labelNamesBlue) {
    this.labelNamesBlue = labelNamesBlue;
  }


  public Boards labelNamesGreen(String labelNamesGreen) {
    this.labelNamesGreen = labelNamesGreen;
    return this;
  }

  /**
   * a string with a length from 0 to 16384
   * @return labelNamesGreen
   */
  @javax.annotation.Nullable
  public String getLabelNamesGreen() {
    return labelNamesGreen;
  }

  public void setLabelNamesGreen(String labelNamesGreen) {
    this.labelNamesGreen = labelNamesGreen;
  }


  public Boards labelNamesOrange(String labelNamesOrange) {
    this.labelNamesOrange = labelNamesOrange;
    return this;
  }

  /**
   * a string with a length from 0 to 16384
   * @return labelNamesOrange
   */
  @javax.annotation.Nullable
  public String getLabelNamesOrange() {
    return labelNamesOrange;
  }

  public void setLabelNamesOrange(String labelNamesOrange) {
    this.labelNamesOrange = labelNamesOrange;
  }


  public Boards labelNamesPurple(String labelNamesPurple) {
    this.labelNamesPurple = labelNamesPurple;
    return this;
  }

  /**
   * a string with a length from 0 to 16384
   * @return labelNamesPurple
   */
  @javax.annotation.Nullable
  public String getLabelNamesPurple() {
    return labelNamesPurple;
  }

  public void setLabelNamesPurple(String labelNamesPurple) {
    this.labelNamesPurple = labelNamesPurple;
  }


  public Boards labelNamesRed(String labelNamesRed) {
    this.labelNamesRed = labelNamesRed;
    return this;
  }

  /**
   * a string with a length from 0 to 16384
   * @return labelNamesRed
   */
  @javax.annotation.Nullable
  public String getLabelNamesRed() {
    return labelNamesRed;
  }

  public void setLabelNamesRed(String labelNamesRed) {
    this.labelNamesRed = labelNamesRed;
  }


  public Boards labelNamesYellow(String labelNamesYellow) {
    this.labelNamesYellow = labelNamesYellow;
    return this;
  }

  /**
   * a string with a length from 0 to 16384
   * @return labelNamesYellow
   */
  @javax.annotation.Nullable
  public String getLabelNamesYellow() {
    return labelNamesYellow;
  }

  public void setLabelNamesYellow(String labelNamesYellow) {
    this.labelNamesYellow = labelNamesYellow;
  }


  public Boards name(String name) {
    this.name = name;
    return this;
  }

  /**
   * a string with a length from 1 to 16384
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Boards powerUps(String powerUps) {
    this.powerUps = powerUps;
    return this;
  }

  /**
   * all or a comma-separated list of: calendar, cardAging, recap or voting
   * @return powerUps
   */
  @javax.annotation.Nullable
  public String getPowerUps() {
    return powerUps;
  }

  public void setPowerUps(String powerUps) {
    this.powerUps = powerUps;
  }


  public Boards prefsBackground(String prefsBackground) {
    this.prefsBackground = prefsBackground;
    return this;
  }

  /**
   * A standard background name, or the id of a custom background
   * @return prefsBackground
   */
  @javax.annotation.Nullable
  public String getPrefsBackground() {
    return prefsBackground;
  }

  public void setPrefsBackground(String prefsBackground) {
    this.prefsBackground = prefsBackground;
  }


  public Boards prefsCalendarFeedEnabled(String prefsCalendarFeedEnabled) {
    this.prefsCalendarFeedEnabled = prefsCalendarFeedEnabled;
    return this;
  }

  /**
   *  true or false
   * @return prefsCalendarFeedEnabled
   */
  @javax.annotation.Nullable
  public String getPrefsCalendarFeedEnabled() {
    return prefsCalendarFeedEnabled;
  }

  public void setPrefsCalendarFeedEnabled(String prefsCalendarFeedEnabled) {
    this.prefsCalendarFeedEnabled = prefsCalendarFeedEnabled;
  }


  public Boards prefsCardAging(String prefsCardAging) {
    this.prefsCardAging = prefsCardAging;
    return this;
  }

  /**
   * One of: pirate or regular
   * @return prefsCardAging
   */
  @javax.annotation.Nullable
  public String getPrefsCardAging() {
    return prefsCardAging;
  }

  public void setPrefsCardAging(String prefsCardAging) {
    this.prefsCardAging = prefsCardAging;
  }


  public Boards prefsCardCovers(String prefsCardCovers) {
    this.prefsCardCovers = prefsCardCovers;
    return this;
  }

  /**
   *  true or false
   * @return prefsCardCovers
   */
  @javax.annotation.Nullable
  public String getPrefsCardCovers() {
    return prefsCardCovers;
  }

  public void setPrefsCardCovers(String prefsCardCovers) {
    this.prefsCardCovers = prefsCardCovers;
  }


  public Boards prefsComments(String prefsComments) {
    this.prefsComments = prefsComments;
    return this;
  }

  /**
   * One of: disabled, members, observers, org or public
   * @return prefsComments
   */
  @javax.annotation.Nullable
  public String getPrefsComments() {
    return prefsComments;
  }

  public void setPrefsComments(String prefsComments) {
    this.prefsComments = prefsComments;
  }


  public Boards prefsInvitations(String prefsInvitations) {
    this.prefsInvitations = prefsInvitations;
    return this;
  }

  /**
   * One of: admins or members
   * @return prefsInvitations
   */
  @javax.annotation.Nullable
  public String getPrefsInvitations() {
    return prefsInvitations;
  }

  public void setPrefsInvitations(String prefsInvitations) {
    this.prefsInvitations = prefsInvitations;
  }


  public Boards prefsPermissionLevel(String prefsPermissionLevel) {
    this.prefsPermissionLevel = prefsPermissionLevel;
    return this;
  }

  /**
   * One of: org, private or public
   * @return prefsPermissionLevel
   */
  @javax.annotation.Nullable
  public String getPrefsPermissionLevel() {
    return prefsPermissionLevel;
  }

  public void setPrefsPermissionLevel(String prefsPermissionLevel) {
    this.prefsPermissionLevel = prefsPermissionLevel;
  }


  public Boards prefsSelfJoin(String prefsSelfJoin) {
    this.prefsSelfJoin = prefsSelfJoin;
    return this;
  }

  /**
   *  true or false
   * @return prefsSelfJoin
   */
  @javax.annotation.Nullable
  public String getPrefsSelfJoin() {
    return prefsSelfJoin;
  }

  public void setPrefsSelfJoin(String prefsSelfJoin) {
    this.prefsSelfJoin = prefsSelfJoin;
  }


  public Boards prefsVoting(String prefsVoting) {
    this.prefsVoting = prefsVoting;
    return this;
  }

  /**
   * One of: disabled, members, observers, org or public
   * @return prefsVoting
   */
  @javax.annotation.Nullable
  public String getPrefsVoting() {
    return prefsVoting;
  }

  public void setPrefsVoting(String prefsVoting) {
    this.prefsVoting = prefsVoting;
  }


  public Boards prefsBackground(String prefsBackground) {
    this.prefsBackground = prefsBackground;
    return this;
  }

  /**
   * a string with a length from 0 to 16384
   * @return prefsBackground
   */
  @javax.annotation.Nullable
  public String getPrefsBackground() {
    return prefsBackground;
  }

  public void setPrefsBackground(String prefsBackground) {
    this.prefsBackground = prefsBackground;
  }


  public Boards prefsCardAging(String prefsCardAging) {
    this.prefsCardAging = prefsCardAging;
    return this;
  }

  /**
   * One of: pirate or regular
   * @return prefsCardAging
   */
  @javax.annotation.Nullable
  public String getPrefsCardAging() {
    return prefsCardAging;
  }

  public void setPrefsCardAging(String prefsCardAging) {
    this.prefsCardAging = prefsCardAging;
  }


  public Boards prefsCardCovers(String prefsCardCovers) {
    this.prefsCardCovers = prefsCardCovers;
    return this;
  }

  /**
   *  true or false
   * @return prefsCardCovers
   */
  @javax.annotation.Nullable
  public String getPrefsCardCovers() {
    return prefsCardCovers;
  }

  public void setPrefsCardCovers(String prefsCardCovers) {
    this.prefsCardCovers = prefsCardCovers;
  }


  public Boards prefsComments(String prefsComments) {
    this.prefsComments = prefsComments;
    return this;
  }

  /**
   * One of: disabled, members, observers, org or public
   * @return prefsComments
   */
  @javax.annotation.Nullable
  public String getPrefsComments() {
    return prefsComments;
  }

  public void setPrefsComments(String prefsComments) {
    this.prefsComments = prefsComments;
  }


  public Boards prefsInvitations(String prefsInvitations) {
    this.prefsInvitations = prefsInvitations;
    return this;
  }

  /**
   * One of: admins or members
   * @return prefsInvitations
   */
  @javax.annotation.Nullable
  public String getPrefsInvitations() {
    return prefsInvitations;
  }

  public void setPrefsInvitations(String prefsInvitations) {
    this.prefsInvitations = prefsInvitations;
  }


  public Boards prefsPermissionLevel(String prefsPermissionLevel) {
    this.prefsPermissionLevel = prefsPermissionLevel;
    return this;
  }

  /**
   * One of: org, private or public
   * @return prefsPermissionLevel
   */
  @javax.annotation.Nullable
  public String getPrefsPermissionLevel() {
    return prefsPermissionLevel;
  }

  public void setPrefsPermissionLevel(String prefsPermissionLevel) {
    this.prefsPermissionLevel = prefsPermissionLevel;
  }


  public Boards prefsSelfJoin(String prefsSelfJoin) {
    this.prefsSelfJoin = prefsSelfJoin;
    return this;
  }

  /**
   *  true or false
   * @return prefsSelfJoin
   */
  @javax.annotation.Nullable
  public String getPrefsSelfJoin() {
    return prefsSelfJoin;
  }

  public void setPrefsSelfJoin(String prefsSelfJoin) {
    this.prefsSelfJoin = prefsSelfJoin;
  }


  public Boards prefsVoting(String prefsVoting) {
    this.prefsVoting = prefsVoting;
    return this;
  }

  /**
   * One of: disabled, members, observers, org or public
   * @return prefsVoting
   */
  @javax.annotation.Nullable
  public String getPrefsVoting() {
    return prefsVoting;
  }

  public void setPrefsVoting(String prefsVoting) {
    this.prefsVoting = prefsVoting;
  }


  public Boards subscribed(String subscribed) {
    this.subscribed = subscribed;
    return this;
  }

  /**
   *  true or false
   * @return subscribed
   */
  @javax.annotation.Nullable
  public String getSubscribed() {
    return subscribed;
  }

  public void setSubscribed(String subscribed) {
    this.subscribed = subscribed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Boards boards = (Boards) o;
    return Objects.equals(this.closed, boards.closed) &&
        Objects.equals(this.desc, boards.desc) &&
        Objects.equals(this.idBoardSource, boards.idBoardSource) &&
        Objects.equals(this.idOrganization, boards.idOrganization) &&
        Objects.equals(this.keepFromSource, boards.keepFromSource) &&
        Objects.equals(this.labelNamesBlue, boards.labelNamesBlue) &&
        Objects.equals(this.labelNamesGreen, boards.labelNamesGreen) &&
        Objects.equals(this.labelNamesOrange, boards.labelNamesOrange) &&
        Objects.equals(this.labelNamesPurple, boards.labelNamesPurple) &&
        Objects.equals(this.labelNamesRed, boards.labelNamesRed) &&
        Objects.equals(this.labelNamesYellow, boards.labelNamesYellow) &&
        Objects.equals(this.name, boards.name) &&
        Objects.equals(this.powerUps, boards.powerUps) &&
        Objects.equals(this.prefsBackground, boards.prefsBackground) &&
        Objects.equals(this.prefsCalendarFeedEnabled, boards.prefsCalendarFeedEnabled) &&
        Objects.equals(this.prefsCardAging, boards.prefsCardAging) &&
        Objects.equals(this.prefsCardCovers, boards.prefsCardCovers) &&
        Objects.equals(this.prefsComments, boards.prefsComments) &&
        Objects.equals(this.prefsInvitations, boards.prefsInvitations) &&
        Objects.equals(this.prefsPermissionLevel, boards.prefsPermissionLevel) &&
        Objects.equals(this.prefsSelfJoin, boards.prefsSelfJoin) &&
        Objects.equals(this.prefsVoting, boards.prefsVoting) &&
        Objects.equals(this.prefsBackground, boards.prefsBackground) &&
        Objects.equals(this.prefsCardAging, boards.prefsCardAging) &&
        Objects.equals(this.prefsCardCovers, boards.prefsCardCovers) &&
        Objects.equals(this.prefsComments, boards.prefsComments) &&
        Objects.equals(this.prefsInvitations, boards.prefsInvitations) &&
        Objects.equals(this.prefsPermissionLevel, boards.prefsPermissionLevel) &&
        Objects.equals(this.prefsSelfJoin, boards.prefsSelfJoin) &&
        Objects.equals(this.prefsVoting, boards.prefsVoting) &&
        Objects.equals(this.subscribed, boards.subscribed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(closed, desc, idBoardSource, idOrganization, keepFromSource, labelNamesBlue, labelNamesGreen, labelNamesOrange, labelNamesPurple, labelNamesRed, labelNamesYellow, name, powerUps, prefsBackground, prefsCalendarFeedEnabled, prefsCardAging, prefsCardCovers, prefsComments, prefsInvitations, prefsPermissionLevel, prefsSelfJoin, prefsVoting, prefsBackground, prefsCardAging, prefsCardCovers, prefsComments, prefsInvitations, prefsPermissionLevel, prefsSelfJoin, prefsVoting, subscribed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Boards {\n");
    sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
    sb.append("    desc: ").append(toIndentedString(desc)).append("\n");
    sb.append("    idBoardSource: ").append(toIndentedString(idBoardSource)).append("\n");
    sb.append("    idOrganization: ").append(toIndentedString(idOrganization)).append("\n");
    sb.append("    keepFromSource: ").append(toIndentedString(keepFromSource)).append("\n");
    sb.append("    labelNamesBlue: ").append(toIndentedString(labelNamesBlue)).append("\n");
    sb.append("    labelNamesGreen: ").append(toIndentedString(labelNamesGreen)).append("\n");
    sb.append("    labelNamesOrange: ").append(toIndentedString(labelNamesOrange)).append("\n");
    sb.append("    labelNamesPurple: ").append(toIndentedString(labelNamesPurple)).append("\n");
    sb.append("    labelNamesRed: ").append(toIndentedString(labelNamesRed)).append("\n");
    sb.append("    labelNamesYellow: ").append(toIndentedString(labelNamesYellow)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    powerUps: ").append(toIndentedString(powerUps)).append("\n");
    sb.append("    prefsBackground: ").append(toIndentedString(prefsBackground)).append("\n");
    sb.append("    prefsCalendarFeedEnabled: ").append(toIndentedString(prefsCalendarFeedEnabled)).append("\n");
    sb.append("    prefsCardAging: ").append(toIndentedString(prefsCardAging)).append("\n");
    sb.append("    prefsCardCovers: ").append(toIndentedString(prefsCardCovers)).append("\n");
    sb.append("    prefsComments: ").append(toIndentedString(prefsComments)).append("\n");
    sb.append("    prefsInvitations: ").append(toIndentedString(prefsInvitations)).append("\n");
    sb.append("    prefsPermissionLevel: ").append(toIndentedString(prefsPermissionLevel)).append("\n");
    sb.append("    prefsSelfJoin: ").append(toIndentedString(prefsSelfJoin)).append("\n");
    sb.append("    prefsVoting: ").append(toIndentedString(prefsVoting)).append("\n");
    sb.append("    prefsBackground: ").append(toIndentedString(prefsBackground)).append("\n");
    sb.append("    prefsCardAging: ").append(toIndentedString(prefsCardAging)).append("\n");
    sb.append("    prefsCardCovers: ").append(toIndentedString(prefsCardCovers)).append("\n");
    sb.append("    prefsComments: ").append(toIndentedString(prefsComments)).append("\n");
    sb.append("    prefsInvitations: ").append(toIndentedString(prefsInvitations)).append("\n");
    sb.append("    prefsPermissionLevel: ").append(toIndentedString(prefsPermissionLevel)).append("\n");
    sb.append("    prefsSelfJoin: ").append(toIndentedString(prefsSelfJoin)).append("\n");
    sb.append("    prefsVoting: ").append(toIndentedString(prefsVoting)).append("\n");
    sb.append("    subscribed: ").append(toIndentedString(subscribed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("closed");
    openapiFields.add("desc");
    openapiFields.add("idBoardSource");
    openapiFields.add("idOrganization");
    openapiFields.add("keepFromSource");
    openapiFields.add("labelNames/blue");
    openapiFields.add("labelNames/green");
    openapiFields.add("labelNames/orange");
    openapiFields.add("labelNames/purple");
    openapiFields.add("labelNames/red");
    openapiFields.add("labelNames/yellow");
    openapiFields.add("name");
    openapiFields.add("powerUps");
    openapiFields.add("prefs/background");
    openapiFields.add("prefs/calendarFeedEnabled");
    openapiFields.add("prefs/cardAging");
    openapiFields.add("prefs/cardCovers");
    openapiFields.add("prefs/comments");
    openapiFields.add("prefs/invitations");
    openapiFields.add("prefs/permissionLevel");
    openapiFields.add("prefs/selfJoin");
    openapiFields.add("prefs/voting");
    openapiFields.add("prefs_background");
    openapiFields.add("prefs_cardAging");
    openapiFields.add("prefs_cardCovers");
    openapiFields.add("prefs_comments");
    openapiFields.add("prefs_invitations");
    openapiFields.add("prefs_permissionLevel");
    openapiFields.add("prefs_selfJoin");
    openapiFields.add("prefs_voting");
    openapiFields.add("subscribed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Boards
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Boards.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Boards is not found in the empty JSON string", Boards.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Boards.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Boards` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("closed") != null && !jsonObj.get("closed").isJsonNull()) && !jsonObj.get("closed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closed").toString()));
      }
      if ((jsonObj.get("desc") != null && !jsonObj.get("desc").isJsonNull()) && !jsonObj.get("desc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `desc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("desc").toString()));
      }
      if ((jsonObj.get("idBoardSource") != null && !jsonObj.get("idBoardSource").isJsonNull()) && !jsonObj.get("idBoardSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idBoardSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idBoardSource").toString()));
      }
      if ((jsonObj.get("idOrganization") != null && !jsonObj.get("idOrganization").isJsonNull()) && !jsonObj.get("idOrganization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idOrganization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idOrganization").toString()));
      }
      if ((jsonObj.get("keepFromSource") != null && !jsonObj.get("keepFromSource").isJsonNull()) && !jsonObj.get("keepFromSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keepFromSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keepFromSource").toString()));
      }
      if ((jsonObj.get("labelNames/blue") != null && !jsonObj.get("labelNames/blue").isJsonNull()) && !jsonObj.get("labelNames/blue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelNames/blue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelNames/blue").toString()));
      }
      if ((jsonObj.get("labelNames/green") != null && !jsonObj.get("labelNames/green").isJsonNull()) && !jsonObj.get("labelNames/green").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelNames/green` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelNames/green").toString()));
      }
      if ((jsonObj.get("labelNames/orange") != null && !jsonObj.get("labelNames/orange").isJsonNull()) && !jsonObj.get("labelNames/orange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelNames/orange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelNames/orange").toString()));
      }
      if ((jsonObj.get("labelNames/purple") != null && !jsonObj.get("labelNames/purple").isJsonNull()) && !jsonObj.get("labelNames/purple").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelNames/purple` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelNames/purple").toString()));
      }
      if ((jsonObj.get("labelNames/red") != null && !jsonObj.get("labelNames/red").isJsonNull()) && !jsonObj.get("labelNames/red").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelNames/red` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelNames/red").toString()));
      }
      if ((jsonObj.get("labelNames/yellow") != null && !jsonObj.get("labelNames/yellow").isJsonNull()) && !jsonObj.get("labelNames/yellow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelNames/yellow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelNames/yellow").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("powerUps") != null && !jsonObj.get("powerUps").isJsonNull()) && !jsonObj.get("powerUps").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `powerUps` to be a primitive type in the JSON string but got `%s`", jsonObj.get("powerUps").toString()));
      }
      if ((jsonObj.get("prefs/background") != null && !jsonObj.get("prefs/background").isJsonNull()) && !jsonObj.get("prefs/background").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefs/background` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefs/background").toString()));
      }
      if ((jsonObj.get("prefs/calendarFeedEnabled") != null && !jsonObj.get("prefs/calendarFeedEnabled").isJsonNull()) && !jsonObj.get("prefs/calendarFeedEnabled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefs/calendarFeedEnabled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefs/calendarFeedEnabled").toString()));
      }
      if ((jsonObj.get("prefs/cardAging") != null && !jsonObj.get("prefs/cardAging").isJsonNull()) && !jsonObj.get("prefs/cardAging").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefs/cardAging` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefs/cardAging").toString()));
      }
      if ((jsonObj.get("prefs/cardCovers") != null && !jsonObj.get("prefs/cardCovers").isJsonNull()) && !jsonObj.get("prefs/cardCovers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefs/cardCovers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefs/cardCovers").toString()));
      }
      if ((jsonObj.get("prefs/comments") != null && !jsonObj.get("prefs/comments").isJsonNull()) && !jsonObj.get("prefs/comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefs/comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefs/comments").toString()));
      }
      if ((jsonObj.get("prefs/invitations") != null && !jsonObj.get("prefs/invitations").isJsonNull()) && !jsonObj.get("prefs/invitations").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefs/invitations` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefs/invitations").toString()));
      }
      if ((jsonObj.get("prefs/permissionLevel") != null && !jsonObj.get("prefs/permissionLevel").isJsonNull()) && !jsonObj.get("prefs/permissionLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefs/permissionLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefs/permissionLevel").toString()));
      }
      if ((jsonObj.get("prefs/selfJoin") != null && !jsonObj.get("prefs/selfJoin").isJsonNull()) && !jsonObj.get("prefs/selfJoin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefs/selfJoin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefs/selfJoin").toString()));
      }
      if ((jsonObj.get("prefs/voting") != null && !jsonObj.get("prefs/voting").isJsonNull()) && !jsonObj.get("prefs/voting").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefs/voting` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefs/voting").toString()));
      }
      if ((jsonObj.get("prefs_background") != null && !jsonObj.get("prefs_background").isJsonNull()) && !jsonObj.get("prefs_background").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefs_background` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefs_background").toString()));
      }
      if ((jsonObj.get("prefs_cardAging") != null && !jsonObj.get("prefs_cardAging").isJsonNull()) && !jsonObj.get("prefs_cardAging").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefs_cardAging` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefs_cardAging").toString()));
      }
      if ((jsonObj.get("prefs_cardCovers") != null && !jsonObj.get("prefs_cardCovers").isJsonNull()) && !jsonObj.get("prefs_cardCovers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefs_cardCovers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefs_cardCovers").toString()));
      }
      if ((jsonObj.get("prefs_comments") != null && !jsonObj.get("prefs_comments").isJsonNull()) && !jsonObj.get("prefs_comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefs_comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefs_comments").toString()));
      }
      if ((jsonObj.get("prefs_invitations") != null && !jsonObj.get("prefs_invitations").isJsonNull()) && !jsonObj.get("prefs_invitations").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefs_invitations` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefs_invitations").toString()));
      }
      if ((jsonObj.get("prefs_permissionLevel") != null && !jsonObj.get("prefs_permissionLevel").isJsonNull()) && !jsonObj.get("prefs_permissionLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefs_permissionLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefs_permissionLevel").toString()));
      }
      if ((jsonObj.get("prefs_selfJoin") != null && !jsonObj.get("prefs_selfJoin").isJsonNull()) && !jsonObj.get("prefs_selfJoin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefs_selfJoin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefs_selfJoin").toString()));
      }
      if ((jsonObj.get("prefs_voting") != null && !jsonObj.get("prefs_voting").isJsonNull()) && !jsonObj.get("prefs_voting").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefs_voting` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefs_voting").toString()));
      }
      if ((jsonObj.get("subscribed") != null && !jsonObj.get("subscribed").isJsonNull()) && !jsonObj.get("subscribed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscribed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscribed").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Boards.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Boards' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Boards> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Boards.class));

       return (TypeAdapter<T>) new TypeAdapter<Boards>() {
           @Override
           public void write(JsonWriter out, Boards value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Boards read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Boards given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Boards
   * @throws IOException if the JSON string is invalid with respect to Boards
   */
  public static Boards fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Boards.class);
  }

  /**
   * Convert an instance of Boards to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

