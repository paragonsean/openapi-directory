/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBoards.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBoards::OAIBoards(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBoards::OAIBoards() {
    this->initializeModel();
}

OAIBoards::~OAIBoards() {}

void OAIBoards::initializeModel() {

    m_closed_isSet = false;
    m_closed_isValid = false;

    m_desc_isSet = false;
    m_desc_isValid = false;

    m_id_board_source_isSet = false;
    m_id_board_source_isValid = false;

    m_id_organization_isSet = false;
    m_id_organization_isValid = false;

    m_keep_from_source_isSet = false;
    m_keep_from_source_isValid = false;

    m_label_names_blue_isSet = false;
    m_label_names_blue_isValid = false;

    m_label_names_green_isSet = false;
    m_label_names_green_isValid = false;

    m_label_names_orange_isSet = false;
    m_label_names_orange_isValid = false;

    m_label_names_purple_isSet = false;
    m_label_names_purple_isValid = false;

    m_label_names_red_isSet = false;
    m_label_names_red_isValid = false;

    m_label_names_yellow_isSet = false;
    m_label_names_yellow_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_power_ups_isSet = false;
    m_power_ups_isValid = false;

    m_prefs_background_isSet = false;
    m_prefs_background_isValid = false;

    m_prefs_calendar_feed_enabled_isSet = false;
    m_prefs_calendar_feed_enabled_isValid = false;

    m_prefs_card_aging_isSet = false;
    m_prefs_card_aging_isValid = false;

    m_prefs_card_covers_isSet = false;
    m_prefs_card_covers_isValid = false;

    m_prefs_comments_isSet = false;
    m_prefs_comments_isValid = false;

    m_prefs_invitations_isSet = false;
    m_prefs_invitations_isValid = false;

    m_prefs_permission_level_isSet = false;
    m_prefs_permission_level_isValid = false;

    m_prefs_self_join_isSet = false;
    m_prefs_self_join_isValid = false;

    m_prefs_voting_isSet = false;
    m_prefs_voting_isValid = false;

    m_prefs_background_isSet = false;
    m_prefs_background_isValid = false;

    m_prefs_card_aging_isSet = false;
    m_prefs_card_aging_isValid = false;

    m_prefs_card_covers_isSet = false;
    m_prefs_card_covers_isValid = false;

    m_prefs_comments_isSet = false;
    m_prefs_comments_isValid = false;

    m_prefs_invitations_isSet = false;
    m_prefs_invitations_isValid = false;

    m_prefs_permission_level_isSet = false;
    m_prefs_permission_level_isValid = false;

    m_prefs_self_join_isSet = false;
    m_prefs_self_join_isValid = false;

    m_prefs_voting_isSet = false;
    m_prefs_voting_isValid = false;

    m_subscribed_isSet = false;
    m_subscribed_isValid = false;
}

void OAIBoards::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBoards::fromJsonObject(QJsonObject json) {

    m_closed_isValid = ::OpenAPI::fromJsonValue(m_closed, json[QString("closed")]);
    m_closed_isSet = !json[QString("closed")].isNull() && m_closed_isValid;

    m_desc_isValid = ::OpenAPI::fromJsonValue(m_desc, json[QString("desc")]);
    m_desc_isSet = !json[QString("desc")].isNull() && m_desc_isValid;

    m_id_board_source_isValid = ::OpenAPI::fromJsonValue(m_id_board_source, json[QString("idBoardSource")]);
    m_id_board_source_isSet = !json[QString("idBoardSource")].isNull() && m_id_board_source_isValid;

    m_id_organization_isValid = ::OpenAPI::fromJsonValue(m_id_organization, json[QString("idOrganization")]);
    m_id_organization_isSet = !json[QString("idOrganization")].isNull() && m_id_organization_isValid;

    m_keep_from_source_isValid = ::OpenAPI::fromJsonValue(m_keep_from_source, json[QString("keepFromSource")]);
    m_keep_from_source_isSet = !json[QString("keepFromSource")].isNull() && m_keep_from_source_isValid;

    m_label_names_blue_isValid = ::OpenAPI::fromJsonValue(m_label_names_blue, json[QString("labelNames/blue")]);
    m_label_names_blue_isSet = !json[QString("labelNames/blue")].isNull() && m_label_names_blue_isValid;

    m_label_names_green_isValid = ::OpenAPI::fromJsonValue(m_label_names_green, json[QString("labelNames/green")]);
    m_label_names_green_isSet = !json[QString("labelNames/green")].isNull() && m_label_names_green_isValid;

    m_label_names_orange_isValid = ::OpenAPI::fromJsonValue(m_label_names_orange, json[QString("labelNames/orange")]);
    m_label_names_orange_isSet = !json[QString("labelNames/orange")].isNull() && m_label_names_orange_isValid;

    m_label_names_purple_isValid = ::OpenAPI::fromJsonValue(m_label_names_purple, json[QString("labelNames/purple")]);
    m_label_names_purple_isSet = !json[QString("labelNames/purple")].isNull() && m_label_names_purple_isValid;

    m_label_names_red_isValid = ::OpenAPI::fromJsonValue(m_label_names_red, json[QString("labelNames/red")]);
    m_label_names_red_isSet = !json[QString("labelNames/red")].isNull() && m_label_names_red_isValid;

    m_label_names_yellow_isValid = ::OpenAPI::fromJsonValue(m_label_names_yellow, json[QString("labelNames/yellow")]);
    m_label_names_yellow_isSet = !json[QString("labelNames/yellow")].isNull() && m_label_names_yellow_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_power_ups_isValid = ::OpenAPI::fromJsonValue(m_power_ups, json[QString("powerUps")]);
    m_power_ups_isSet = !json[QString("powerUps")].isNull() && m_power_ups_isValid;

    m_prefs_background_isValid = ::OpenAPI::fromJsonValue(m_prefs_background, json[QString("prefs/background")]);
    m_prefs_background_isSet = !json[QString("prefs/background")].isNull() && m_prefs_background_isValid;

    m_prefs_calendar_feed_enabled_isValid = ::OpenAPI::fromJsonValue(m_prefs_calendar_feed_enabled, json[QString("prefs/calendarFeedEnabled")]);
    m_prefs_calendar_feed_enabled_isSet = !json[QString("prefs/calendarFeedEnabled")].isNull() && m_prefs_calendar_feed_enabled_isValid;

    m_prefs_card_aging_isValid = ::OpenAPI::fromJsonValue(m_prefs_card_aging, json[QString("prefs/cardAging")]);
    m_prefs_card_aging_isSet = !json[QString("prefs/cardAging")].isNull() && m_prefs_card_aging_isValid;

    m_prefs_card_covers_isValid = ::OpenAPI::fromJsonValue(m_prefs_card_covers, json[QString("prefs/cardCovers")]);
    m_prefs_card_covers_isSet = !json[QString("prefs/cardCovers")].isNull() && m_prefs_card_covers_isValid;

    m_prefs_comments_isValid = ::OpenAPI::fromJsonValue(m_prefs_comments, json[QString("prefs/comments")]);
    m_prefs_comments_isSet = !json[QString("prefs/comments")].isNull() && m_prefs_comments_isValid;

    m_prefs_invitations_isValid = ::OpenAPI::fromJsonValue(m_prefs_invitations, json[QString("prefs/invitations")]);
    m_prefs_invitations_isSet = !json[QString("prefs/invitations")].isNull() && m_prefs_invitations_isValid;

    m_prefs_permission_level_isValid = ::OpenAPI::fromJsonValue(m_prefs_permission_level, json[QString("prefs/permissionLevel")]);
    m_prefs_permission_level_isSet = !json[QString("prefs/permissionLevel")].isNull() && m_prefs_permission_level_isValid;

    m_prefs_self_join_isValid = ::OpenAPI::fromJsonValue(m_prefs_self_join, json[QString("prefs/selfJoin")]);
    m_prefs_self_join_isSet = !json[QString("prefs/selfJoin")].isNull() && m_prefs_self_join_isValid;

    m_prefs_voting_isValid = ::OpenAPI::fromJsonValue(m_prefs_voting, json[QString("prefs/voting")]);
    m_prefs_voting_isSet = !json[QString("prefs/voting")].isNull() && m_prefs_voting_isValid;

    m_prefs_background_isValid = ::OpenAPI::fromJsonValue(m_prefs_background, json[QString("prefs_background")]);
    m_prefs_background_isSet = !json[QString("prefs_background")].isNull() && m_prefs_background_isValid;

    m_prefs_card_aging_isValid = ::OpenAPI::fromJsonValue(m_prefs_card_aging, json[QString("prefs_cardAging")]);
    m_prefs_card_aging_isSet = !json[QString("prefs_cardAging")].isNull() && m_prefs_card_aging_isValid;

    m_prefs_card_covers_isValid = ::OpenAPI::fromJsonValue(m_prefs_card_covers, json[QString("prefs_cardCovers")]);
    m_prefs_card_covers_isSet = !json[QString("prefs_cardCovers")].isNull() && m_prefs_card_covers_isValid;

    m_prefs_comments_isValid = ::OpenAPI::fromJsonValue(m_prefs_comments, json[QString("prefs_comments")]);
    m_prefs_comments_isSet = !json[QString("prefs_comments")].isNull() && m_prefs_comments_isValid;

    m_prefs_invitations_isValid = ::OpenAPI::fromJsonValue(m_prefs_invitations, json[QString("prefs_invitations")]);
    m_prefs_invitations_isSet = !json[QString("prefs_invitations")].isNull() && m_prefs_invitations_isValid;

    m_prefs_permission_level_isValid = ::OpenAPI::fromJsonValue(m_prefs_permission_level, json[QString("prefs_permissionLevel")]);
    m_prefs_permission_level_isSet = !json[QString("prefs_permissionLevel")].isNull() && m_prefs_permission_level_isValid;

    m_prefs_self_join_isValid = ::OpenAPI::fromJsonValue(m_prefs_self_join, json[QString("prefs_selfJoin")]);
    m_prefs_self_join_isSet = !json[QString("prefs_selfJoin")].isNull() && m_prefs_self_join_isValid;

    m_prefs_voting_isValid = ::OpenAPI::fromJsonValue(m_prefs_voting, json[QString("prefs_voting")]);
    m_prefs_voting_isSet = !json[QString("prefs_voting")].isNull() && m_prefs_voting_isValid;

    m_subscribed_isValid = ::OpenAPI::fromJsonValue(m_subscribed, json[QString("subscribed")]);
    m_subscribed_isSet = !json[QString("subscribed")].isNull() && m_subscribed_isValid;
}

QString OAIBoards::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBoards::asJsonObject() const {
    QJsonObject obj;
    if (m_closed_isSet) {
        obj.insert(QString("closed"), ::OpenAPI::toJsonValue(m_closed));
    }
    if (m_desc_isSet) {
        obj.insert(QString("desc"), ::OpenAPI::toJsonValue(m_desc));
    }
    if (m_id_board_source_isSet) {
        obj.insert(QString("idBoardSource"), ::OpenAPI::toJsonValue(m_id_board_source));
    }
    if (m_id_organization_isSet) {
        obj.insert(QString("idOrganization"), ::OpenAPI::toJsonValue(m_id_organization));
    }
    if (m_keep_from_source_isSet) {
        obj.insert(QString("keepFromSource"), ::OpenAPI::toJsonValue(m_keep_from_source));
    }
    if (m_label_names_blue_isSet) {
        obj.insert(QString("labelNames/blue"), ::OpenAPI::toJsonValue(m_label_names_blue));
    }
    if (m_label_names_green_isSet) {
        obj.insert(QString("labelNames/green"), ::OpenAPI::toJsonValue(m_label_names_green));
    }
    if (m_label_names_orange_isSet) {
        obj.insert(QString("labelNames/orange"), ::OpenAPI::toJsonValue(m_label_names_orange));
    }
    if (m_label_names_purple_isSet) {
        obj.insert(QString("labelNames/purple"), ::OpenAPI::toJsonValue(m_label_names_purple));
    }
    if (m_label_names_red_isSet) {
        obj.insert(QString("labelNames/red"), ::OpenAPI::toJsonValue(m_label_names_red));
    }
    if (m_label_names_yellow_isSet) {
        obj.insert(QString("labelNames/yellow"), ::OpenAPI::toJsonValue(m_label_names_yellow));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_power_ups_isSet) {
        obj.insert(QString("powerUps"), ::OpenAPI::toJsonValue(m_power_ups));
    }
    if (m_prefs_background_isSet) {
        obj.insert(QString("prefs/background"), ::OpenAPI::toJsonValue(m_prefs_background));
    }
    if (m_prefs_calendar_feed_enabled_isSet) {
        obj.insert(QString("prefs/calendarFeedEnabled"), ::OpenAPI::toJsonValue(m_prefs_calendar_feed_enabled));
    }
    if (m_prefs_card_aging_isSet) {
        obj.insert(QString("prefs/cardAging"), ::OpenAPI::toJsonValue(m_prefs_card_aging));
    }
    if (m_prefs_card_covers_isSet) {
        obj.insert(QString("prefs/cardCovers"), ::OpenAPI::toJsonValue(m_prefs_card_covers));
    }
    if (m_prefs_comments_isSet) {
        obj.insert(QString("prefs/comments"), ::OpenAPI::toJsonValue(m_prefs_comments));
    }
    if (m_prefs_invitations_isSet) {
        obj.insert(QString("prefs/invitations"), ::OpenAPI::toJsonValue(m_prefs_invitations));
    }
    if (m_prefs_permission_level_isSet) {
        obj.insert(QString("prefs/permissionLevel"), ::OpenAPI::toJsonValue(m_prefs_permission_level));
    }
    if (m_prefs_self_join_isSet) {
        obj.insert(QString("prefs/selfJoin"), ::OpenAPI::toJsonValue(m_prefs_self_join));
    }
    if (m_prefs_voting_isSet) {
        obj.insert(QString("prefs/voting"), ::OpenAPI::toJsonValue(m_prefs_voting));
    }
    if (m_prefs_background_isSet) {
        obj.insert(QString("prefs_background"), ::OpenAPI::toJsonValue(m_prefs_background));
    }
    if (m_prefs_card_aging_isSet) {
        obj.insert(QString("prefs_cardAging"), ::OpenAPI::toJsonValue(m_prefs_card_aging));
    }
    if (m_prefs_card_covers_isSet) {
        obj.insert(QString("prefs_cardCovers"), ::OpenAPI::toJsonValue(m_prefs_card_covers));
    }
    if (m_prefs_comments_isSet) {
        obj.insert(QString("prefs_comments"), ::OpenAPI::toJsonValue(m_prefs_comments));
    }
    if (m_prefs_invitations_isSet) {
        obj.insert(QString("prefs_invitations"), ::OpenAPI::toJsonValue(m_prefs_invitations));
    }
    if (m_prefs_permission_level_isSet) {
        obj.insert(QString("prefs_permissionLevel"), ::OpenAPI::toJsonValue(m_prefs_permission_level));
    }
    if (m_prefs_self_join_isSet) {
        obj.insert(QString("prefs_selfJoin"), ::OpenAPI::toJsonValue(m_prefs_self_join));
    }
    if (m_prefs_voting_isSet) {
        obj.insert(QString("prefs_voting"), ::OpenAPI::toJsonValue(m_prefs_voting));
    }
    if (m_subscribed_isSet) {
        obj.insert(QString("subscribed"), ::OpenAPI::toJsonValue(m_subscribed));
    }
    return obj;
}

QString OAIBoards::getClosed() const {
    return m_closed;
}
void OAIBoards::setClosed(const QString &closed) {
    m_closed = closed;
    m_closed_isSet = true;
}

bool OAIBoards::is_closed_Set() const{
    return m_closed_isSet;
}

bool OAIBoards::is_closed_Valid() const{
    return m_closed_isValid;
}

QString OAIBoards::getDesc() const {
    return m_desc;
}
void OAIBoards::setDesc(const QString &desc) {
    m_desc = desc;
    m_desc_isSet = true;
}

bool OAIBoards::is_desc_Set() const{
    return m_desc_isSet;
}

bool OAIBoards::is_desc_Valid() const{
    return m_desc_isValid;
}

QString OAIBoards::getIdBoardSource() const {
    return m_id_board_source;
}
void OAIBoards::setIdBoardSource(const QString &id_board_source) {
    m_id_board_source = id_board_source;
    m_id_board_source_isSet = true;
}

bool OAIBoards::is_id_board_source_Set() const{
    return m_id_board_source_isSet;
}

bool OAIBoards::is_id_board_source_Valid() const{
    return m_id_board_source_isValid;
}

QString OAIBoards::getIdOrganization() const {
    return m_id_organization;
}
void OAIBoards::setIdOrganization(const QString &id_organization) {
    m_id_organization = id_organization;
    m_id_organization_isSet = true;
}

bool OAIBoards::is_id_organization_Set() const{
    return m_id_organization_isSet;
}

bool OAIBoards::is_id_organization_Valid() const{
    return m_id_organization_isValid;
}

QString OAIBoards::getKeepFromSource() const {
    return m_keep_from_source;
}
void OAIBoards::setKeepFromSource(const QString &keep_from_source) {
    m_keep_from_source = keep_from_source;
    m_keep_from_source_isSet = true;
}

bool OAIBoards::is_keep_from_source_Set() const{
    return m_keep_from_source_isSet;
}

bool OAIBoards::is_keep_from_source_Valid() const{
    return m_keep_from_source_isValid;
}

QString OAIBoards::getLabelNamesBlue() const {
    return m_label_names_blue;
}
void OAIBoards::setLabelNamesBlue(const QString &label_names_blue) {
    m_label_names_blue = label_names_blue;
    m_label_names_blue_isSet = true;
}

bool OAIBoards::is_label_names_blue_Set() const{
    return m_label_names_blue_isSet;
}

bool OAIBoards::is_label_names_blue_Valid() const{
    return m_label_names_blue_isValid;
}

QString OAIBoards::getLabelNamesGreen() const {
    return m_label_names_green;
}
void OAIBoards::setLabelNamesGreen(const QString &label_names_green) {
    m_label_names_green = label_names_green;
    m_label_names_green_isSet = true;
}

bool OAIBoards::is_label_names_green_Set() const{
    return m_label_names_green_isSet;
}

bool OAIBoards::is_label_names_green_Valid() const{
    return m_label_names_green_isValid;
}

QString OAIBoards::getLabelNamesOrange() const {
    return m_label_names_orange;
}
void OAIBoards::setLabelNamesOrange(const QString &label_names_orange) {
    m_label_names_orange = label_names_orange;
    m_label_names_orange_isSet = true;
}

bool OAIBoards::is_label_names_orange_Set() const{
    return m_label_names_orange_isSet;
}

bool OAIBoards::is_label_names_orange_Valid() const{
    return m_label_names_orange_isValid;
}

QString OAIBoards::getLabelNamesPurple() const {
    return m_label_names_purple;
}
void OAIBoards::setLabelNamesPurple(const QString &label_names_purple) {
    m_label_names_purple = label_names_purple;
    m_label_names_purple_isSet = true;
}

bool OAIBoards::is_label_names_purple_Set() const{
    return m_label_names_purple_isSet;
}

bool OAIBoards::is_label_names_purple_Valid() const{
    return m_label_names_purple_isValid;
}

QString OAIBoards::getLabelNamesRed() const {
    return m_label_names_red;
}
void OAIBoards::setLabelNamesRed(const QString &label_names_red) {
    m_label_names_red = label_names_red;
    m_label_names_red_isSet = true;
}

bool OAIBoards::is_label_names_red_Set() const{
    return m_label_names_red_isSet;
}

bool OAIBoards::is_label_names_red_Valid() const{
    return m_label_names_red_isValid;
}

QString OAIBoards::getLabelNamesYellow() const {
    return m_label_names_yellow;
}
void OAIBoards::setLabelNamesYellow(const QString &label_names_yellow) {
    m_label_names_yellow = label_names_yellow;
    m_label_names_yellow_isSet = true;
}

bool OAIBoards::is_label_names_yellow_Set() const{
    return m_label_names_yellow_isSet;
}

bool OAIBoards::is_label_names_yellow_Valid() const{
    return m_label_names_yellow_isValid;
}

QString OAIBoards::getName() const {
    return m_name;
}
void OAIBoards::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBoards::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBoards::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIBoards::getPowerUps() const {
    return m_power_ups;
}
void OAIBoards::setPowerUps(const QString &power_ups) {
    m_power_ups = power_ups;
    m_power_ups_isSet = true;
}

bool OAIBoards::is_power_ups_Set() const{
    return m_power_ups_isSet;
}

bool OAIBoards::is_power_ups_Valid() const{
    return m_power_ups_isValid;
}

QString OAIBoards::getPrefsBackground() const {
    return m_prefs_background;
}
void OAIBoards::setPrefsBackground(const QString &prefs_background) {
    m_prefs_background = prefs_background;
    m_prefs_background_isSet = true;
}

bool OAIBoards::is_prefs_background_Set() const{
    return m_prefs_background_isSet;
}

bool OAIBoards::is_prefs_background_Valid() const{
    return m_prefs_background_isValid;
}

QString OAIBoards::getPrefsCalendarFeedEnabled() const {
    return m_prefs_calendar_feed_enabled;
}
void OAIBoards::setPrefsCalendarFeedEnabled(const QString &prefs_calendar_feed_enabled) {
    m_prefs_calendar_feed_enabled = prefs_calendar_feed_enabled;
    m_prefs_calendar_feed_enabled_isSet = true;
}

bool OAIBoards::is_prefs_calendar_feed_enabled_Set() const{
    return m_prefs_calendar_feed_enabled_isSet;
}

bool OAIBoards::is_prefs_calendar_feed_enabled_Valid() const{
    return m_prefs_calendar_feed_enabled_isValid;
}

QString OAIBoards::getPrefsCardAging() const {
    return m_prefs_card_aging;
}
void OAIBoards::setPrefsCardAging(const QString &prefs_card_aging) {
    m_prefs_card_aging = prefs_card_aging;
    m_prefs_card_aging_isSet = true;
}

bool OAIBoards::is_prefs_card_aging_Set() const{
    return m_prefs_card_aging_isSet;
}

bool OAIBoards::is_prefs_card_aging_Valid() const{
    return m_prefs_card_aging_isValid;
}

QString OAIBoards::getPrefsCardCovers() const {
    return m_prefs_card_covers;
}
void OAIBoards::setPrefsCardCovers(const QString &prefs_card_covers) {
    m_prefs_card_covers = prefs_card_covers;
    m_prefs_card_covers_isSet = true;
}

bool OAIBoards::is_prefs_card_covers_Set() const{
    return m_prefs_card_covers_isSet;
}

bool OAIBoards::is_prefs_card_covers_Valid() const{
    return m_prefs_card_covers_isValid;
}

QString OAIBoards::getPrefsComments() const {
    return m_prefs_comments;
}
void OAIBoards::setPrefsComments(const QString &prefs_comments) {
    m_prefs_comments = prefs_comments;
    m_prefs_comments_isSet = true;
}

bool OAIBoards::is_prefs_comments_Set() const{
    return m_prefs_comments_isSet;
}

bool OAIBoards::is_prefs_comments_Valid() const{
    return m_prefs_comments_isValid;
}

QString OAIBoards::getPrefsInvitations() const {
    return m_prefs_invitations;
}
void OAIBoards::setPrefsInvitations(const QString &prefs_invitations) {
    m_prefs_invitations = prefs_invitations;
    m_prefs_invitations_isSet = true;
}

bool OAIBoards::is_prefs_invitations_Set() const{
    return m_prefs_invitations_isSet;
}

bool OAIBoards::is_prefs_invitations_Valid() const{
    return m_prefs_invitations_isValid;
}

QString OAIBoards::getPrefsPermissionLevel() const {
    return m_prefs_permission_level;
}
void OAIBoards::setPrefsPermissionLevel(const QString &prefs_permission_level) {
    m_prefs_permission_level = prefs_permission_level;
    m_prefs_permission_level_isSet = true;
}

bool OAIBoards::is_prefs_permission_level_Set() const{
    return m_prefs_permission_level_isSet;
}

bool OAIBoards::is_prefs_permission_level_Valid() const{
    return m_prefs_permission_level_isValid;
}

QString OAIBoards::getPrefsSelfJoin() const {
    return m_prefs_self_join;
}
void OAIBoards::setPrefsSelfJoin(const QString &prefs_self_join) {
    m_prefs_self_join = prefs_self_join;
    m_prefs_self_join_isSet = true;
}

bool OAIBoards::is_prefs_self_join_Set() const{
    return m_prefs_self_join_isSet;
}

bool OAIBoards::is_prefs_self_join_Valid() const{
    return m_prefs_self_join_isValid;
}

QString OAIBoards::getPrefsVoting() const {
    return m_prefs_voting;
}
void OAIBoards::setPrefsVoting(const QString &prefs_voting) {
    m_prefs_voting = prefs_voting;
    m_prefs_voting_isSet = true;
}

bool OAIBoards::is_prefs_voting_Set() const{
    return m_prefs_voting_isSet;
}

bool OAIBoards::is_prefs_voting_Valid() const{
    return m_prefs_voting_isValid;
}

QString OAIBoards::getPrefsBackground() const {
    return m_prefs_background;
}
void OAIBoards::setPrefsBackground(const QString &prefs_background) {
    m_prefs_background = prefs_background;
    m_prefs_background_isSet = true;
}

bool OAIBoards::is_prefs_background_Set() const{
    return m_prefs_background_isSet;
}

bool OAIBoards::is_prefs_background_Valid() const{
    return m_prefs_background_isValid;
}

QString OAIBoards::getPrefsCardAging() const {
    return m_prefs_card_aging;
}
void OAIBoards::setPrefsCardAging(const QString &prefs_card_aging) {
    m_prefs_card_aging = prefs_card_aging;
    m_prefs_card_aging_isSet = true;
}

bool OAIBoards::is_prefs_card_aging_Set() const{
    return m_prefs_card_aging_isSet;
}

bool OAIBoards::is_prefs_card_aging_Valid() const{
    return m_prefs_card_aging_isValid;
}

QString OAIBoards::getPrefsCardCovers() const {
    return m_prefs_card_covers;
}
void OAIBoards::setPrefsCardCovers(const QString &prefs_card_covers) {
    m_prefs_card_covers = prefs_card_covers;
    m_prefs_card_covers_isSet = true;
}

bool OAIBoards::is_prefs_card_covers_Set() const{
    return m_prefs_card_covers_isSet;
}

bool OAIBoards::is_prefs_card_covers_Valid() const{
    return m_prefs_card_covers_isValid;
}

QString OAIBoards::getPrefsComments() const {
    return m_prefs_comments;
}
void OAIBoards::setPrefsComments(const QString &prefs_comments) {
    m_prefs_comments = prefs_comments;
    m_prefs_comments_isSet = true;
}

bool OAIBoards::is_prefs_comments_Set() const{
    return m_prefs_comments_isSet;
}

bool OAIBoards::is_prefs_comments_Valid() const{
    return m_prefs_comments_isValid;
}

QString OAIBoards::getPrefsInvitations() const {
    return m_prefs_invitations;
}
void OAIBoards::setPrefsInvitations(const QString &prefs_invitations) {
    m_prefs_invitations = prefs_invitations;
    m_prefs_invitations_isSet = true;
}

bool OAIBoards::is_prefs_invitations_Set() const{
    return m_prefs_invitations_isSet;
}

bool OAIBoards::is_prefs_invitations_Valid() const{
    return m_prefs_invitations_isValid;
}

QString OAIBoards::getPrefsPermissionLevel() const {
    return m_prefs_permission_level;
}
void OAIBoards::setPrefsPermissionLevel(const QString &prefs_permission_level) {
    m_prefs_permission_level = prefs_permission_level;
    m_prefs_permission_level_isSet = true;
}

bool OAIBoards::is_prefs_permission_level_Set() const{
    return m_prefs_permission_level_isSet;
}

bool OAIBoards::is_prefs_permission_level_Valid() const{
    return m_prefs_permission_level_isValid;
}

QString OAIBoards::getPrefsSelfJoin() const {
    return m_prefs_self_join;
}
void OAIBoards::setPrefsSelfJoin(const QString &prefs_self_join) {
    m_prefs_self_join = prefs_self_join;
    m_prefs_self_join_isSet = true;
}

bool OAIBoards::is_prefs_self_join_Set() const{
    return m_prefs_self_join_isSet;
}

bool OAIBoards::is_prefs_self_join_Valid() const{
    return m_prefs_self_join_isValid;
}

QString OAIBoards::getPrefsVoting() const {
    return m_prefs_voting;
}
void OAIBoards::setPrefsVoting(const QString &prefs_voting) {
    m_prefs_voting = prefs_voting;
    m_prefs_voting_isSet = true;
}

bool OAIBoards::is_prefs_voting_Set() const{
    return m_prefs_voting_isSet;
}

bool OAIBoards::is_prefs_voting_Valid() const{
    return m_prefs_voting_isValid;
}

QString OAIBoards::getSubscribed() const {
    return m_subscribed;
}
void OAIBoards::setSubscribed(const QString &subscribed) {
    m_subscribed = subscribed;
    m_subscribed_isSet = true;
}

bool OAIBoards::is_subscribed_Set() const{
    return m_subscribed_isSet;
}

bool OAIBoards::is_subscribed_Valid() const{
    return m_subscribed_isValid;
}

bool OAIBoards::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_board_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keep_from_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_names_blue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_names_green_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_names_orange_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_names_purple_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_names_red_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_names_yellow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_ups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs_background_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs_calendar_feed_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs_card_aging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs_card_covers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs_invitations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs_permission_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs_self_join_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs_voting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs_background_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs_card_aging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs_card_covers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs_invitations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs_permission_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs_self_join_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs_voting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscribed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBoards::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
