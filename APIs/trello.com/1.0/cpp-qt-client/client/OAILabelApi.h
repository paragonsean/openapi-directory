/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILabelApi_H
#define OAI_OAILabelApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILabels.h"
#include "OAILabels_color.h"
#include "OAILabels_name.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILabelApi : public QObject {
    Q_OBJECT

public:
    OAILabelApi(const int timeOut = 0);
    ~OAILabelApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_labels OAILabels [required]
    */
    virtual void addLabels(const QString &key, const QString &token, const OAILabels &oai_labels);

    /**
    * @param[in]  id_label QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void deleteLabelsByIdLabel(const QString &id_label, const QString &key, const QString &token);

    /**
    * @param[in]  id_label QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getLabelsBoardByIdLabel(const QString &id_label, const QString &key, const QString &token, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_label QString [required]
    * @param[in]  field QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getLabelsBoardByIdLabelByField(const QString &id_label, const QString &field, const QString &key, const QString &token);

    /**
    * @param[in]  id_label QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getLabelsByIdLabel(const QString &id_label, const QString &key, const QString &token, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_label QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_labels OAILabels [required]
    */
    virtual void updateLabelsByIdLabel(const QString &id_label, const QString &key, const QString &token, const OAILabels &oai_labels);

    /**
    * @param[in]  id_label QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_labels_color OAILabels_color [required]
    */
    virtual void updateLabelsColorByIdLabel(const QString &id_label, const QString &key, const QString &token, const OAILabels_color &oai_labels_color);

    /**
    * @param[in]  id_label QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_labels_name OAILabels_name [required]
    */
    virtual void updateLabelsNameByIdLabel(const QString &id_label, const QString &key, const QString &token, const OAILabels_name &oai_labels_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addLabelsCallback(OAIHttpRequestWorker *worker);
    void deleteLabelsByIdLabelCallback(OAIHttpRequestWorker *worker);
    void getLabelsBoardByIdLabelCallback(OAIHttpRequestWorker *worker);
    void getLabelsBoardByIdLabelByFieldCallback(OAIHttpRequestWorker *worker);
    void getLabelsByIdLabelCallback(OAIHttpRequestWorker *worker);
    void updateLabelsByIdLabelCallback(OAIHttpRequestWorker *worker);
    void updateLabelsColorByIdLabelCallback(OAIHttpRequestWorker *worker);
    void updateLabelsNameByIdLabelCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addLabelsSignal();
    void deleteLabelsByIdLabelSignal();
    void getLabelsBoardByIdLabelSignal();
    void getLabelsBoardByIdLabelByFieldSignal();
    void getLabelsByIdLabelSignal();
    void updateLabelsByIdLabelSignal();
    void updateLabelsColorByIdLabelSignal();
    void updateLabelsNameByIdLabelSignal();


    void addLabelsSignalFull(OAIHttpRequestWorker *worker);
    void deleteLabelsByIdLabelSignalFull(OAIHttpRequestWorker *worker);
    void getLabelsBoardByIdLabelSignalFull(OAIHttpRequestWorker *worker);
    void getLabelsBoardByIdLabelByFieldSignalFull(OAIHttpRequestWorker *worker);
    void getLabelsByIdLabelSignalFull(OAIHttpRequestWorker *worker);
    void updateLabelsByIdLabelSignalFull(OAIHttpRequestWorker *worker);
    void updateLabelsColorByIdLabelSignalFull(OAIHttpRequestWorker *worker);
    void updateLabelsNameByIdLabelSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addLabelsSignalError() instead")
    void addLabelsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addLabelsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLabelsByIdLabelSignalError() instead")
    void deleteLabelsByIdLabelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLabelsByIdLabelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLabelsBoardByIdLabelSignalError() instead")
    void getLabelsBoardByIdLabelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getLabelsBoardByIdLabelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLabelsBoardByIdLabelByFieldSignalError() instead")
    void getLabelsBoardByIdLabelByFieldSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getLabelsBoardByIdLabelByFieldSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLabelsByIdLabelSignalError() instead")
    void getLabelsByIdLabelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getLabelsByIdLabelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLabelsByIdLabelSignalError() instead")
    void updateLabelsByIdLabelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateLabelsByIdLabelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLabelsColorByIdLabelSignalError() instead")
    void updateLabelsColorByIdLabelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateLabelsColorByIdLabelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLabelsNameByIdLabelSignalError() instead")
    void updateLabelsNameByIdLabelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateLabelsNameByIdLabelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addLabelsSignalErrorFull() instead")
    void addLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLabelsByIdLabelSignalErrorFull() instead")
    void deleteLabelsByIdLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLabelsByIdLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLabelsBoardByIdLabelSignalErrorFull() instead")
    void getLabelsBoardByIdLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLabelsBoardByIdLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLabelsBoardByIdLabelByFieldSignalErrorFull() instead")
    void getLabelsBoardByIdLabelByFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLabelsBoardByIdLabelByFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLabelsByIdLabelSignalErrorFull() instead")
    void getLabelsByIdLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLabelsByIdLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLabelsByIdLabelSignalErrorFull() instead")
    void updateLabelsByIdLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLabelsByIdLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLabelsColorByIdLabelSignalErrorFull() instead")
    void updateLabelsColorByIdLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLabelsColorByIdLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLabelsNameByIdLabelSignalErrorFull() instead")
    void updateLabelsNameByIdLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLabelsNameByIdLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
