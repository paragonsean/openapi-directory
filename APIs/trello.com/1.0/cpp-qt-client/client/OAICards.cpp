/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICards.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICards::OAICards(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICards::OAICards() {
    this->initializeModel();
}

OAICards::~OAICards() {}

void OAICards::initializeModel() {

    m_closed_isSet = false;
    m_closed_isValid = false;

    m_desc_isSet = false;
    m_desc_isValid = false;

    m_due_isSet = false;
    m_due_isValid = false;

    m_file_source_isSet = false;
    m_file_source_isValid = false;

    m_id_attachment_cover_isSet = false;
    m_id_attachment_cover_isValid = false;

    m_id_board_isSet = false;
    m_id_board_isValid = false;

    m_id_card_source_isSet = false;
    m_id_card_source_isValid = false;

    m_id_labels_isSet = false;
    m_id_labels_isValid = false;

    m_id_list_isSet = false;
    m_id_list_isValid = false;

    m_id_members_isSet = false;
    m_id_members_isValid = false;

    m_keep_from_source_isSet = false;
    m_keep_from_source_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pos_isSet = false;
    m_pos_isValid = false;

    m_subscribed_isSet = false;
    m_subscribed_isValid = false;

    m_url_source_isSet = false;
    m_url_source_isValid = false;
}

void OAICards::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICards::fromJsonObject(QJsonObject json) {

    m_closed_isValid = ::OpenAPI::fromJsonValue(m_closed, json[QString("closed")]);
    m_closed_isSet = !json[QString("closed")].isNull() && m_closed_isValid;

    m_desc_isValid = ::OpenAPI::fromJsonValue(m_desc, json[QString("desc")]);
    m_desc_isSet = !json[QString("desc")].isNull() && m_desc_isValid;

    m_due_isValid = ::OpenAPI::fromJsonValue(m_due, json[QString("due")]);
    m_due_isSet = !json[QString("due")].isNull() && m_due_isValid;

    m_file_source_isValid = ::OpenAPI::fromJsonValue(m_file_source, json[QString("fileSource")]);
    m_file_source_isSet = !json[QString("fileSource")].isNull() && m_file_source_isValid;

    m_id_attachment_cover_isValid = ::OpenAPI::fromJsonValue(m_id_attachment_cover, json[QString("idAttachmentCover")]);
    m_id_attachment_cover_isSet = !json[QString("idAttachmentCover")].isNull() && m_id_attachment_cover_isValid;

    m_id_board_isValid = ::OpenAPI::fromJsonValue(m_id_board, json[QString("idBoard")]);
    m_id_board_isSet = !json[QString("idBoard")].isNull() && m_id_board_isValid;

    m_id_card_source_isValid = ::OpenAPI::fromJsonValue(m_id_card_source, json[QString("idCardSource")]);
    m_id_card_source_isSet = !json[QString("idCardSource")].isNull() && m_id_card_source_isValid;

    m_id_labels_isValid = ::OpenAPI::fromJsonValue(m_id_labels, json[QString("idLabels")]);
    m_id_labels_isSet = !json[QString("idLabels")].isNull() && m_id_labels_isValid;

    m_id_list_isValid = ::OpenAPI::fromJsonValue(m_id_list, json[QString("idList")]);
    m_id_list_isSet = !json[QString("idList")].isNull() && m_id_list_isValid;

    m_id_members_isValid = ::OpenAPI::fromJsonValue(m_id_members, json[QString("idMembers")]);
    m_id_members_isSet = !json[QString("idMembers")].isNull() && m_id_members_isValid;

    m_keep_from_source_isValid = ::OpenAPI::fromJsonValue(m_keep_from_source, json[QString("keepFromSource")]);
    m_keep_from_source_isSet = !json[QString("keepFromSource")].isNull() && m_keep_from_source_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pos_isValid = ::OpenAPI::fromJsonValue(m_pos, json[QString("pos")]);
    m_pos_isSet = !json[QString("pos")].isNull() && m_pos_isValid;

    m_subscribed_isValid = ::OpenAPI::fromJsonValue(m_subscribed, json[QString("subscribed")]);
    m_subscribed_isSet = !json[QString("subscribed")].isNull() && m_subscribed_isValid;

    m_url_source_isValid = ::OpenAPI::fromJsonValue(m_url_source, json[QString("urlSource")]);
    m_url_source_isSet = !json[QString("urlSource")].isNull() && m_url_source_isValid;
}

QString OAICards::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICards::asJsonObject() const {
    QJsonObject obj;
    if (m_closed_isSet) {
        obj.insert(QString("closed"), ::OpenAPI::toJsonValue(m_closed));
    }
    if (m_desc_isSet) {
        obj.insert(QString("desc"), ::OpenAPI::toJsonValue(m_desc));
    }
    if (m_due_isSet) {
        obj.insert(QString("due"), ::OpenAPI::toJsonValue(m_due));
    }
    if (m_file_source_isSet) {
        obj.insert(QString("fileSource"), ::OpenAPI::toJsonValue(m_file_source));
    }
    if (m_id_attachment_cover_isSet) {
        obj.insert(QString("idAttachmentCover"), ::OpenAPI::toJsonValue(m_id_attachment_cover));
    }
    if (m_id_board_isSet) {
        obj.insert(QString("idBoard"), ::OpenAPI::toJsonValue(m_id_board));
    }
    if (m_id_card_source_isSet) {
        obj.insert(QString("idCardSource"), ::OpenAPI::toJsonValue(m_id_card_source));
    }
    if (m_id_labels_isSet) {
        obj.insert(QString("idLabels"), ::OpenAPI::toJsonValue(m_id_labels));
    }
    if (m_id_list_isSet) {
        obj.insert(QString("idList"), ::OpenAPI::toJsonValue(m_id_list));
    }
    if (m_id_members_isSet) {
        obj.insert(QString("idMembers"), ::OpenAPI::toJsonValue(m_id_members));
    }
    if (m_keep_from_source_isSet) {
        obj.insert(QString("keepFromSource"), ::OpenAPI::toJsonValue(m_keep_from_source));
    }
    if (m_labels_isSet) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pos_isSet) {
        obj.insert(QString("pos"), ::OpenAPI::toJsonValue(m_pos));
    }
    if (m_subscribed_isSet) {
        obj.insert(QString("subscribed"), ::OpenAPI::toJsonValue(m_subscribed));
    }
    if (m_url_source_isSet) {
        obj.insert(QString("urlSource"), ::OpenAPI::toJsonValue(m_url_source));
    }
    return obj;
}

QString OAICards::getClosed() const {
    return m_closed;
}
void OAICards::setClosed(const QString &closed) {
    m_closed = closed;
    m_closed_isSet = true;
}

bool OAICards::is_closed_Set() const{
    return m_closed_isSet;
}

bool OAICards::is_closed_Valid() const{
    return m_closed_isValid;
}

QString OAICards::getDesc() const {
    return m_desc;
}
void OAICards::setDesc(const QString &desc) {
    m_desc = desc;
    m_desc_isSet = true;
}

bool OAICards::is_desc_Set() const{
    return m_desc_isSet;
}

bool OAICards::is_desc_Valid() const{
    return m_desc_isValid;
}

QString OAICards::getDue() const {
    return m_due;
}
void OAICards::setDue(const QString &due) {
    m_due = due;
    m_due_isSet = true;
}

bool OAICards::is_due_Set() const{
    return m_due_isSet;
}

bool OAICards::is_due_Valid() const{
    return m_due_isValid;
}

QString OAICards::getFileSource() const {
    return m_file_source;
}
void OAICards::setFileSource(const QString &file_source) {
    m_file_source = file_source;
    m_file_source_isSet = true;
}

bool OAICards::is_file_source_Set() const{
    return m_file_source_isSet;
}

bool OAICards::is_file_source_Valid() const{
    return m_file_source_isValid;
}

QString OAICards::getIdAttachmentCover() const {
    return m_id_attachment_cover;
}
void OAICards::setIdAttachmentCover(const QString &id_attachment_cover) {
    m_id_attachment_cover = id_attachment_cover;
    m_id_attachment_cover_isSet = true;
}

bool OAICards::is_id_attachment_cover_Set() const{
    return m_id_attachment_cover_isSet;
}

bool OAICards::is_id_attachment_cover_Valid() const{
    return m_id_attachment_cover_isValid;
}

QString OAICards::getIdBoard() const {
    return m_id_board;
}
void OAICards::setIdBoard(const QString &id_board) {
    m_id_board = id_board;
    m_id_board_isSet = true;
}

bool OAICards::is_id_board_Set() const{
    return m_id_board_isSet;
}

bool OAICards::is_id_board_Valid() const{
    return m_id_board_isValid;
}

QString OAICards::getIdCardSource() const {
    return m_id_card_source;
}
void OAICards::setIdCardSource(const QString &id_card_source) {
    m_id_card_source = id_card_source;
    m_id_card_source_isSet = true;
}

bool OAICards::is_id_card_source_Set() const{
    return m_id_card_source_isSet;
}

bool OAICards::is_id_card_source_Valid() const{
    return m_id_card_source_isValid;
}

QString OAICards::getIdLabels() const {
    return m_id_labels;
}
void OAICards::setIdLabels(const QString &id_labels) {
    m_id_labels = id_labels;
    m_id_labels_isSet = true;
}

bool OAICards::is_id_labels_Set() const{
    return m_id_labels_isSet;
}

bool OAICards::is_id_labels_Valid() const{
    return m_id_labels_isValid;
}

QString OAICards::getIdList() const {
    return m_id_list;
}
void OAICards::setIdList(const QString &id_list) {
    m_id_list = id_list;
    m_id_list_isSet = true;
}

bool OAICards::is_id_list_Set() const{
    return m_id_list_isSet;
}

bool OAICards::is_id_list_Valid() const{
    return m_id_list_isValid;
}

QString OAICards::getIdMembers() const {
    return m_id_members;
}
void OAICards::setIdMembers(const QString &id_members) {
    m_id_members = id_members;
    m_id_members_isSet = true;
}

bool OAICards::is_id_members_Set() const{
    return m_id_members_isSet;
}

bool OAICards::is_id_members_Valid() const{
    return m_id_members_isValid;
}

QString OAICards::getKeepFromSource() const {
    return m_keep_from_source;
}
void OAICards::setKeepFromSource(const QString &keep_from_source) {
    m_keep_from_source = keep_from_source;
    m_keep_from_source_isSet = true;
}

bool OAICards::is_keep_from_source_Set() const{
    return m_keep_from_source_isSet;
}

bool OAICards::is_keep_from_source_Valid() const{
    return m_keep_from_source_isValid;
}

QString OAICards::getLabels() const {
    return m_labels;
}
void OAICards::setLabels(const QString &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAICards::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAICards::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAICards::getName() const {
    return m_name;
}
void OAICards::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICards::is_name_Set() const{
    return m_name_isSet;
}

bool OAICards::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICards::getPos() const {
    return m_pos;
}
void OAICards::setPos(const QString &pos) {
    m_pos = pos;
    m_pos_isSet = true;
}

bool OAICards::is_pos_Set() const{
    return m_pos_isSet;
}

bool OAICards::is_pos_Valid() const{
    return m_pos_isValid;
}

QString OAICards::getSubscribed() const {
    return m_subscribed;
}
void OAICards::setSubscribed(const QString &subscribed) {
    m_subscribed = subscribed;
    m_subscribed_isSet = true;
}

bool OAICards::is_subscribed_Set() const{
    return m_subscribed_isSet;
}

bool OAICards::is_subscribed_Valid() const{
    return m_subscribed_isValid;
}

QString OAICards::getUrlSource() const {
    return m_url_source;
}
void OAICards::setUrlSource(const QString &url_source) {
    m_url_source = url_source;
    m_url_source_isSet = true;
}

bool OAICards::is_url_source_Set() const{
    return m_url_source_isSet;
}

bool OAICards::is_url_source_Valid() const{
    return m_url_source_isValid;
}

bool OAICards::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_attachment_cover_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_board_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_card_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_labels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_members_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keep_from_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscribed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICards::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
