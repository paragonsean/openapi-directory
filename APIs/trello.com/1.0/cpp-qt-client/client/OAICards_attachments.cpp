/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICards_attachments.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICards_attachments::OAICards_attachments(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICards_attachments::OAICards_attachments() {
    this->initializeModel();
}

OAICards_attachments::~OAICards_attachments() {}

void OAICards_attachments::initializeModel() {

    m_file_isSet = false;
    m_file_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAICards_attachments::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICards_attachments::fromJsonObject(QJsonObject json) {

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAICards_attachments::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICards_attachments::asJsonObject() const {
    QJsonObject obj;
    if (m_file_isSet) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAICards_attachments::getFile() const {
    return m_file;
}
void OAICards_attachments::setFile(const QString &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAICards_attachments::is_file_Set() const{
    return m_file_isSet;
}

bool OAICards_attachments::is_file_Valid() const{
    return m_file_isValid;
}

QString OAICards_attachments::getMimeType() const {
    return m_mime_type;
}
void OAICards_attachments::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAICards_attachments::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAICards_attachments::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QString OAICards_attachments::getName() const {
    return m_name;
}
void OAICards_attachments::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICards_attachments::is_name_Set() const{
    return m_name_isSet;
}

bool OAICards_attachments::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICards_attachments::getUrl() const {
    return m_url;
}
void OAICards_attachments::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICards_attachments::is_url_Set() const{
    return m_url_isSet;
}

bool OAICards_attachments::is_url_Valid() const{
    return m_url_isValid;
}

bool OAICards_attachments::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICards_attachments::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
