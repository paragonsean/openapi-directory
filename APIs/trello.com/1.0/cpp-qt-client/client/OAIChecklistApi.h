/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIChecklistApi_H
#define OAI_OAIChecklistApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChecklists.h"
#include "OAIChecklists_checkItems.h"
#include "OAIChecklists_idCard.h"
#include "OAIChecklists_name.h"
#include "OAIChecklists_pos.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIChecklistApi : public QObject {
    Q_OBJECT

public:
    OAIChecklistApi(const int timeOut = 0);
    ~OAIChecklistApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_checklists OAIChecklists [required]
    */
    virtual void addChecklists(const QString &key, const QString &token, const OAIChecklists &oai_checklists);

    /**
    * @param[in]  id_checklist QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_checklists_check_items OAIChecklists_checkItems [required]
    */
    virtual void addChecklistsCheckItemsByIdChecklist(const QString &id_checklist, const QString &key, const QString &token, const OAIChecklists_checkItems &oai_checklists_check_items);

    /**
    * @param[in]  id_checklist QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void deleteChecklistsByIdChecklist(const QString &id_checklist, const QString &key, const QString &token);

    /**
    * @param[in]  id_checklist QString [required]
    * @param[in]  id_check_item QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void deleteChecklistsCheckItemsByIdChecklistByIdCheckItem(const QString &id_checklist, const QString &id_check_item, const QString &key, const QString &token);

    /**
    * @param[in]  id_checklist QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getChecklistsBoardByIdChecklist(const QString &id_checklist, const QString &key, const QString &token, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_checklist QString [required]
    * @param[in]  field QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getChecklistsBoardByIdChecklistByField(const QString &id_checklist, const QString &field, const QString &key, const QString &token);

    /**
    * @param[in]  id_checklist QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  cards QString [optional]
    * @param[in]  card_fields QString [optional]
    * @param[in]  check_items QString [optional]
    * @param[in]  check_item_fields QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getChecklistsByIdChecklist(const QString &id_checklist, const QString &key, const QString &token, const ::OpenAPI::OptionalParam<QString> &cards = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &card_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &check_items = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &check_item_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_checklist QString [required]
    * @param[in]  field QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getChecklistsByIdChecklistByField(const QString &id_checklist, const QString &field, const QString &key, const QString &token);

    /**
    * @param[in]  id_checklist QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  actions QString [optional]
    * @param[in]  attachments QString [optional]
    * @param[in]  attachment_fields QString [optional]
    * @param[in]  stickers QString [optional]
    * @param[in]  members QString [optional]
    * @param[in]  member_fields QString [optional]
    * @param[in]  check_item_states QString [optional]
    * @param[in]  checklists QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  since QString [optional]
    * @param[in]  before QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getChecklistsCardsByIdChecklist(const QString &id_checklist, const QString &key, const QString &token, const ::OpenAPI::OptionalParam<QString> &actions = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attachments = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attachment_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stickers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &members = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &member_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &check_item_states = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &checklists = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_checklist QString [required]
    * @param[in]  filter QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getChecklistsCardsByIdChecklistByFilter(const QString &id_checklist, const QString &filter, const QString &key, const QString &token);

    /**
    * @param[in]  id_checklist QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getChecklistsCheckItemsByIdChecklist(const QString &id_checklist, const QString &key, const QString &token, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_checklist QString [required]
    * @param[in]  id_check_item QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getChecklistsCheckItemsByIdChecklistByIdCheckItem(const QString &id_checklist, const QString &id_check_item, const QString &key, const QString &token, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_checklist QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_checklists OAIChecklists [required]
    */
    virtual void updateChecklistsByIdChecklist(const QString &id_checklist, const QString &key, const QString &token, const OAIChecklists &oai_checklists);

    /**
    * @param[in]  id_checklist QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_checklists_id_card OAIChecklists_idCard [required]
    */
    virtual void updateChecklistsIdCardByIdChecklist(const QString &id_checklist, const QString &key, const QString &token, const OAIChecklists_idCard &oai_checklists_id_card);

    /**
    * @param[in]  id_checklist QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_checklists_name OAIChecklists_name [required]
    */
    virtual void updateChecklistsNameByIdChecklist(const QString &id_checklist, const QString &key, const QString &token, const OAIChecklists_name &oai_checklists_name);

    /**
    * @param[in]  id_checklist QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_checklists_pos OAIChecklists_pos [required]
    */
    virtual void updateChecklistsPosByIdChecklist(const QString &id_checklist, const QString &key, const QString &token, const OAIChecklists_pos &oai_checklists_pos);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addChecklistsCallback(OAIHttpRequestWorker *worker);
    void addChecklistsCheckItemsByIdChecklistCallback(OAIHttpRequestWorker *worker);
    void deleteChecklistsByIdChecklistCallback(OAIHttpRequestWorker *worker);
    void deleteChecklistsCheckItemsByIdChecklistByIdCheckItemCallback(OAIHttpRequestWorker *worker);
    void getChecklistsBoardByIdChecklistCallback(OAIHttpRequestWorker *worker);
    void getChecklistsBoardByIdChecklistByFieldCallback(OAIHttpRequestWorker *worker);
    void getChecklistsByIdChecklistCallback(OAIHttpRequestWorker *worker);
    void getChecklistsByIdChecklistByFieldCallback(OAIHttpRequestWorker *worker);
    void getChecklistsCardsByIdChecklistCallback(OAIHttpRequestWorker *worker);
    void getChecklistsCardsByIdChecklistByFilterCallback(OAIHttpRequestWorker *worker);
    void getChecklistsCheckItemsByIdChecklistCallback(OAIHttpRequestWorker *worker);
    void getChecklistsCheckItemsByIdChecklistByIdCheckItemCallback(OAIHttpRequestWorker *worker);
    void updateChecklistsByIdChecklistCallback(OAIHttpRequestWorker *worker);
    void updateChecklistsIdCardByIdChecklistCallback(OAIHttpRequestWorker *worker);
    void updateChecklistsNameByIdChecklistCallback(OAIHttpRequestWorker *worker);
    void updateChecklistsPosByIdChecklistCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addChecklistsSignal();
    void addChecklistsCheckItemsByIdChecklistSignal();
    void deleteChecklistsByIdChecklistSignal();
    void deleteChecklistsCheckItemsByIdChecklistByIdCheckItemSignal();
    void getChecklistsBoardByIdChecklistSignal();
    void getChecklistsBoardByIdChecklistByFieldSignal();
    void getChecklistsByIdChecklistSignal();
    void getChecklistsByIdChecklistByFieldSignal();
    void getChecklistsCardsByIdChecklistSignal();
    void getChecklistsCardsByIdChecklistByFilterSignal();
    void getChecklistsCheckItemsByIdChecklistSignal();
    void getChecklistsCheckItemsByIdChecklistByIdCheckItemSignal();
    void updateChecklistsByIdChecklistSignal();
    void updateChecklistsIdCardByIdChecklistSignal();
    void updateChecklistsNameByIdChecklistSignal();
    void updateChecklistsPosByIdChecklistSignal();


    void addChecklistsSignalFull(OAIHttpRequestWorker *worker);
    void addChecklistsCheckItemsByIdChecklistSignalFull(OAIHttpRequestWorker *worker);
    void deleteChecklistsByIdChecklistSignalFull(OAIHttpRequestWorker *worker);
    void deleteChecklistsCheckItemsByIdChecklistByIdCheckItemSignalFull(OAIHttpRequestWorker *worker);
    void getChecklistsBoardByIdChecklistSignalFull(OAIHttpRequestWorker *worker);
    void getChecklistsBoardByIdChecklistByFieldSignalFull(OAIHttpRequestWorker *worker);
    void getChecklistsByIdChecklistSignalFull(OAIHttpRequestWorker *worker);
    void getChecklistsByIdChecklistByFieldSignalFull(OAIHttpRequestWorker *worker);
    void getChecklistsCardsByIdChecklistSignalFull(OAIHttpRequestWorker *worker);
    void getChecklistsCardsByIdChecklistByFilterSignalFull(OAIHttpRequestWorker *worker);
    void getChecklistsCheckItemsByIdChecklistSignalFull(OAIHttpRequestWorker *worker);
    void getChecklistsCheckItemsByIdChecklistByIdCheckItemSignalFull(OAIHttpRequestWorker *worker);
    void updateChecklistsByIdChecklistSignalFull(OAIHttpRequestWorker *worker);
    void updateChecklistsIdCardByIdChecklistSignalFull(OAIHttpRequestWorker *worker);
    void updateChecklistsNameByIdChecklistSignalFull(OAIHttpRequestWorker *worker);
    void updateChecklistsPosByIdChecklistSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addChecklistsSignalError() instead")
    void addChecklistsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addChecklistsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addChecklistsCheckItemsByIdChecklistSignalError() instead")
    void addChecklistsCheckItemsByIdChecklistSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addChecklistsCheckItemsByIdChecklistSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChecklistsByIdChecklistSignalError() instead")
    void deleteChecklistsByIdChecklistSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChecklistsByIdChecklistSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChecklistsCheckItemsByIdChecklistByIdCheckItemSignalError() instead")
    void deleteChecklistsCheckItemsByIdChecklistByIdCheckItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChecklistsCheckItemsByIdChecklistByIdCheckItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChecklistsBoardByIdChecklistSignalError() instead")
    void getChecklistsBoardByIdChecklistSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getChecklistsBoardByIdChecklistSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChecklistsBoardByIdChecklistByFieldSignalError() instead")
    void getChecklistsBoardByIdChecklistByFieldSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getChecklistsBoardByIdChecklistByFieldSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChecklistsByIdChecklistSignalError() instead")
    void getChecklistsByIdChecklistSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getChecklistsByIdChecklistSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChecklistsByIdChecklistByFieldSignalError() instead")
    void getChecklistsByIdChecklistByFieldSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getChecklistsByIdChecklistByFieldSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChecklistsCardsByIdChecklistSignalError() instead")
    void getChecklistsCardsByIdChecklistSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getChecklistsCardsByIdChecklistSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChecklistsCardsByIdChecklistByFilterSignalError() instead")
    void getChecklistsCardsByIdChecklistByFilterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getChecklistsCardsByIdChecklistByFilterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChecklistsCheckItemsByIdChecklistSignalError() instead")
    void getChecklistsCheckItemsByIdChecklistSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getChecklistsCheckItemsByIdChecklistSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChecklistsCheckItemsByIdChecklistByIdCheckItemSignalError() instead")
    void getChecklistsCheckItemsByIdChecklistByIdCheckItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getChecklistsCheckItemsByIdChecklistByIdCheckItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChecklistsByIdChecklistSignalError() instead")
    void updateChecklistsByIdChecklistSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateChecklistsByIdChecklistSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChecklistsIdCardByIdChecklistSignalError() instead")
    void updateChecklistsIdCardByIdChecklistSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateChecklistsIdCardByIdChecklistSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChecklistsNameByIdChecklistSignalError() instead")
    void updateChecklistsNameByIdChecklistSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateChecklistsNameByIdChecklistSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChecklistsPosByIdChecklistSignalError() instead")
    void updateChecklistsPosByIdChecklistSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateChecklistsPosByIdChecklistSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addChecklistsSignalErrorFull() instead")
    void addChecklistsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addChecklistsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addChecklistsCheckItemsByIdChecklistSignalErrorFull() instead")
    void addChecklistsCheckItemsByIdChecklistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addChecklistsCheckItemsByIdChecklistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChecklistsByIdChecklistSignalErrorFull() instead")
    void deleteChecklistsByIdChecklistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChecklistsByIdChecklistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChecklistsCheckItemsByIdChecklistByIdCheckItemSignalErrorFull() instead")
    void deleteChecklistsCheckItemsByIdChecklistByIdCheckItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChecklistsCheckItemsByIdChecklistByIdCheckItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChecklistsBoardByIdChecklistSignalErrorFull() instead")
    void getChecklistsBoardByIdChecklistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChecklistsBoardByIdChecklistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChecklistsBoardByIdChecklistByFieldSignalErrorFull() instead")
    void getChecklistsBoardByIdChecklistByFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChecklistsBoardByIdChecklistByFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChecklistsByIdChecklistSignalErrorFull() instead")
    void getChecklistsByIdChecklistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChecklistsByIdChecklistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChecklistsByIdChecklistByFieldSignalErrorFull() instead")
    void getChecklistsByIdChecklistByFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChecklistsByIdChecklistByFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChecklistsCardsByIdChecklistSignalErrorFull() instead")
    void getChecklistsCardsByIdChecklistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChecklistsCardsByIdChecklistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChecklistsCardsByIdChecklistByFilterSignalErrorFull() instead")
    void getChecklistsCardsByIdChecklistByFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChecklistsCardsByIdChecklistByFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChecklistsCheckItemsByIdChecklistSignalErrorFull() instead")
    void getChecklistsCheckItemsByIdChecklistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChecklistsCheckItemsByIdChecklistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChecklistsCheckItemsByIdChecklistByIdCheckItemSignalErrorFull() instead")
    void getChecklistsCheckItemsByIdChecklistByIdCheckItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChecklistsCheckItemsByIdChecklistByIdCheckItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChecklistsByIdChecklistSignalErrorFull() instead")
    void updateChecklistsByIdChecklistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateChecklistsByIdChecklistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChecklistsIdCardByIdChecklistSignalErrorFull() instead")
    void updateChecklistsIdCardByIdChecklistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateChecklistsIdCardByIdChecklistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChecklistsNameByIdChecklistSignalErrorFull() instead")
    void updateChecklistsNameByIdChecklistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateChecklistsNameByIdChecklistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChecklistsPosByIdChecklistSignalErrorFull() instead")
    void updateChecklistsPosByIdChecklistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateChecklistsPosByIdChecklistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
