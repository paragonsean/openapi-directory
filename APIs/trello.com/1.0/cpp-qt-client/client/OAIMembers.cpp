/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMembers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMembers::OAIMembers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMembers::OAIMembers() {
    this->initializeModel();
}

OAIMembers::~OAIMembers() {}

void OAIMembers::initializeModel() {

    m_avatar_source_isSet = false;
    m_avatar_source_isValid = false;

    m_bio_isSet = false;
    m_bio_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_initials_isSet = false;
    m_initials_isValid = false;

    m_prefs_color_blind_isSet = false;
    m_prefs_color_blind_isValid = false;

    m_prefs_locale_isSet = false;
    m_prefs_locale_isValid = false;

    m_prefs_minutes_between_summaries_isSet = false;
    m_prefs_minutes_between_summaries_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIMembers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMembers::fromJsonObject(QJsonObject json) {

    m_avatar_source_isValid = ::OpenAPI::fromJsonValue(m_avatar_source, json[QString("avatarSource")]);
    m_avatar_source_isSet = !json[QString("avatarSource")].isNull() && m_avatar_source_isValid;

    m_bio_isValid = ::OpenAPI::fromJsonValue(m_bio, json[QString("bio")]);
    m_bio_isSet = !json[QString("bio")].isNull() && m_bio_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("fullName")]);
    m_full_name_isSet = !json[QString("fullName")].isNull() && m_full_name_isValid;

    m_initials_isValid = ::OpenAPI::fromJsonValue(m_initials, json[QString("initials")]);
    m_initials_isSet = !json[QString("initials")].isNull() && m_initials_isValid;

    m_prefs_color_blind_isValid = ::OpenAPI::fromJsonValue(m_prefs_color_blind, json[QString("prefs/colorBlind")]);
    m_prefs_color_blind_isSet = !json[QString("prefs/colorBlind")].isNull() && m_prefs_color_blind_isValid;

    m_prefs_locale_isValid = ::OpenAPI::fromJsonValue(m_prefs_locale, json[QString("prefs/locale")]);
    m_prefs_locale_isSet = !json[QString("prefs/locale")].isNull() && m_prefs_locale_isValid;

    m_prefs_minutes_between_summaries_isValid = ::OpenAPI::fromJsonValue(m_prefs_minutes_between_summaries, json[QString("prefs/minutesBetweenSummaries")]);
    m_prefs_minutes_between_summaries_isSet = !json[QString("prefs/minutesBetweenSummaries")].isNull() && m_prefs_minutes_between_summaries_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIMembers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMembers::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar_source_isSet) {
        obj.insert(QString("avatarSource"), ::OpenAPI::toJsonValue(m_avatar_source));
    }
    if (m_bio_isSet) {
        obj.insert(QString("bio"), ::OpenAPI::toJsonValue(m_bio));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("fullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_initials_isSet) {
        obj.insert(QString("initials"), ::OpenAPI::toJsonValue(m_initials));
    }
    if (m_prefs_color_blind_isSet) {
        obj.insert(QString("prefs/colorBlind"), ::OpenAPI::toJsonValue(m_prefs_color_blind));
    }
    if (m_prefs_locale_isSet) {
        obj.insert(QString("prefs/locale"), ::OpenAPI::toJsonValue(m_prefs_locale));
    }
    if (m_prefs_minutes_between_summaries_isSet) {
        obj.insert(QString("prefs/minutesBetweenSummaries"), ::OpenAPI::toJsonValue(m_prefs_minutes_between_summaries));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIMembers::getAvatarSource() const {
    return m_avatar_source;
}
void OAIMembers::setAvatarSource(const QString &avatar_source) {
    m_avatar_source = avatar_source;
    m_avatar_source_isSet = true;
}

bool OAIMembers::is_avatar_source_Set() const{
    return m_avatar_source_isSet;
}

bool OAIMembers::is_avatar_source_Valid() const{
    return m_avatar_source_isValid;
}

QString OAIMembers::getBio() const {
    return m_bio;
}
void OAIMembers::setBio(const QString &bio) {
    m_bio = bio;
    m_bio_isSet = true;
}

bool OAIMembers::is_bio_Set() const{
    return m_bio_isSet;
}

bool OAIMembers::is_bio_Valid() const{
    return m_bio_isValid;
}

QString OAIMembers::getFullName() const {
    return m_full_name;
}
void OAIMembers::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIMembers::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIMembers::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAIMembers::getInitials() const {
    return m_initials;
}
void OAIMembers::setInitials(const QString &initials) {
    m_initials = initials;
    m_initials_isSet = true;
}

bool OAIMembers::is_initials_Set() const{
    return m_initials_isSet;
}

bool OAIMembers::is_initials_Valid() const{
    return m_initials_isValid;
}

QString OAIMembers::getPrefsColorBlind() const {
    return m_prefs_color_blind;
}
void OAIMembers::setPrefsColorBlind(const QString &prefs_color_blind) {
    m_prefs_color_blind = prefs_color_blind;
    m_prefs_color_blind_isSet = true;
}

bool OAIMembers::is_prefs_color_blind_Set() const{
    return m_prefs_color_blind_isSet;
}

bool OAIMembers::is_prefs_color_blind_Valid() const{
    return m_prefs_color_blind_isValid;
}

QString OAIMembers::getPrefsLocale() const {
    return m_prefs_locale;
}
void OAIMembers::setPrefsLocale(const QString &prefs_locale) {
    m_prefs_locale = prefs_locale;
    m_prefs_locale_isSet = true;
}

bool OAIMembers::is_prefs_locale_Set() const{
    return m_prefs_locale_isSet;
}

bool OAIMembers::is_prefs_locale_Valid() const{
    return m_prefs_locale_isValid;
}

QString OAIMembers::getPrefsMinutesBetweenSummaries() const {
    return m_prefs_minutes_between_summaries;
}
void OAIMembers::setPrefsMinutesBetweenSummaries(const QString &prefs_minutes_between_summaries) {
    m_prefs_minutes_between_summaries = prefs_minutes_between_summaries;
    m_prefs_minutes_between_summaries_isSet = true;
}

bool OAIMembers::is_prefs_minutes_between_summaries_Set() const{
    return m_prefs_minutes_between_summaries_isSet;
}

bool OAIMembers::is_prefs_minutes_between_summaries_Valid() const{
    return m_prefs_minutes_between_summaries_isValid;
}

QString OAIMembers::getUsername() const {
    return m_username;
}
void OAIMembers::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIMembers::is_username_Set() const{
    return m_username_isSet;
}

bool OAIMembers::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIMembers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initials_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs_color_blind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs_minutes_between_summaries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMembers::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
