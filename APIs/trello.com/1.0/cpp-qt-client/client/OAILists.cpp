/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILists.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILists::OAILists(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILists::OAILists() {
    this->initializeModel();
}

OAILists::~OAILists() {}

void OAILists::initializeModel() {

    m_closed_isSet = false;
    m_closed_isValid = false;

    m_id_board_isSet = false;
    m_id_board_isValid = false;

    m_id_list_source_isSet = false;
    m_id_list_source_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pos_isSet = false;
    m_pos_isValid = false;

    m_subscribed_isSet = false;
    m_subscribed_isValid = false;
}

void OAILists::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILists::fromJsonObject(QJsonObject json) {

    m_closed_isValid = ::OpenAPI::fromJsonValue(m_closed, json[QString("closed")]);
    m_closed_isSet = !json[QString("closed")].isNull() && m_closed_isValid;

    m_id_board_isValid = ::OpenAPI::fromJsonValue(m_id_board, json[QString("idBoard")]);
    m_id_board_isSet = !json[QString("idBoard")].isNull() && m_id_board_isValid;

    m_id_list_source_isValid = ::OpenAPI::fromJsonValue(m_id_list_source, json[QString("idListSource")]);
    m_id_list_source_isSet = !json[QString("idListSource")].isNull() && m_id_list_source_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pos_isValid = ::OpenAPI::fromJsonValue(m_pos, json[QString("pos")]);
    m_pos_isSet = !json[QString("pos")].isNull() && m_pos_isValid;

    m_subscribed_isValid = ::OpenAPI::fromJsonValue(m_subscribed, json[QString("subscribed")]);
    m_subscribed_isSet = !json[QString("subscribed")].isNull() && m_subscribed_isValid;
}

QString OAILists::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILists::asJsonObject() const {
    QJsonObject obj;
    if (m_closed_isSet) {
        obj.insert(QString("closed"), ::OpenAPI::toJsonValue(m_closed));
    }
    if (m_id_board_isSet) {
        obj.insert(QString("idBoard"), ::OpenAPI::toJsonValue(m_id_board));
    }
    if (m_id_list_source_isSet) {
        obj.insert(QString("idListSource"), ::OpenAPI::toJsonValue(m_id_list_source));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pos_isSet) {
        obj.insert(QString("pos"), ::OpenAPI::toJsonValue(m_pos));
    }
    if (m_subscribed_isSet) {
        obj.insert(QString("subscribed"), ::OpenAPI::toJsonValue(m_subscribed));
    }
    return obj;
}

QString OAILists::getClosed() const {
    return m_closed;
}
void OAILists::setClosed(const QString &closed) {
    m_closed = closed;
    m_closed_isSet = true;
}

bool OAILists::is_closed_Set() const{
    return m_closed_isSet;
}

bool OAILists::is_closed_Valid() const{
    return m_closed_isValid;
}

QString OAILists::getIdBoard() const {
    return m_id_board;
}
void OAILists::setIdBoard(const QString &id_board) {
    m_id_board = id_board;
    m_id_board_isSet = true;
}

bool OAILists::is_id_board_Set() const{
    return m_id_board_isSet;
}

bool OAILists::is_id_board_Valid() const{
    return m_id_board_isValid;
}

QString OAILists::getIdListSource() const {
    return m_id_list_source;
}
void OAILists::setIdListSource(const QString &id_list_source) {
    m_id_list_source = id_list_source;
    m_id_list_source_isSet = true;
}

bool OAILists::is_id_list_source_Set() const{
    return m_id_list_source_isSet;
}

bool OAILists::is_id_list_source_Valid() const{
    return m_id_list_source_isValid;
}

QString OAILists::getName() const {
    return m_name;
}
void OAILists::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILists::is_name_Set() const{
    return m_name_isSet;
}

bool OAILists::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILists::getPos() const {
    return m_pos;
}
void OAILists::setPos(const QString &pos) {
    m_pos = pos;
    m_pos_isSet = true;
}

bool OAILists::is_pos_Set() const{
    return m_pos_isSet;
}

bool OAILists::is_pos_Valid() const{
    return m_pos_isValid;
}

QString OAILists::getSubscribed() const {
    return m_subscribed;
}
void OAILists::setSubscribed(const QString &subscribed) {
    m_subscribed = subscribed;
    m_subscribed_isSet = true;
}

bool OAILists::is_subscribed_Set() const{
    return m_subscribed_isSet;
}

bool OAILists::is_subscribed_Valid() const{
    return m_subscribed_isValid;
}

bool OAILists::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_board_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_list_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscribed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILists::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
