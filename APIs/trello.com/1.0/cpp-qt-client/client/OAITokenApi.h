/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITokenApi_H
#define OAI_OAITokenApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAITokens_webhooks.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITokenApi : public QObject {
    Q_OBJECT

public:
    OAITokenApi(const int timeOut = 0);
    ~OAITokenApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  token QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token2 QString [required]
    * @param[in]  oai_tokens_webhooks OAITokens_webhooks [required]
    */
    virtual void addTokensWebhooksByToken(const QString &token, const QString &key, const QString &token2, const OAITokens_webhooks &oai_tokens_webhooks);

    /**
    * @param[in]  token QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token2 QString [required]
    */
    virtual void deleteTokensByToken(const QString &token, const QString &key, const QString &token2);

    /**
    * @param[in]  token QString [required]
    * @param[in]  id_webhook QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token2 QString [required]
    */
    virtual void deleteTokensWebhooksByTokenByIdWebhook(const QString &token, const QString &id_webhook, const QString &key, const QString &token2);

    /**
    * @param[in]  token QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token2 QString [required]
    * @param[in]  fields QString [optional]
    * @param[in]  webhooks QString [optional]
    */
    virtual void getTokensByToken(const QString &token, const QString &key, const QString &token2, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &webhooks = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  field QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token2 QString [required]
    */
    virtual void getTokensByTokenByField(const QString &token, const QString &field, const QString &key, const QString &token2);

    /**
    * @param[in]  token QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token2 QString [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getTokensMemberByToken(const QString &token, const QString &key, const QString &token2, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  field QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token2 QString [required]
    */
    virtual void getTokensMemberByTokenByField(const QString &token, const QString &field, const QString &key, const QString &token2);

    /**
    * @param[in]  token QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token2 QString [required]
    */
    virtual void getTokensWebhooksByToken(const QString &token, const QString &key, const QString &token2);

    /**
    * @param[in]  token QString [required]
    * @param[in]  id_webhook QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token2 QString [required]
    */
    virtual void getTokensWebhooksByTokenByIdWebhook(const QString &token, const QString &id_webhook, const QString &key, const QString &token2);

    /**
    * @param[in]  token QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token2 QString [required]
    * @param[in]  oai_tokens_webhooks OAITokens_webhooks [required]
    */
    virtual void updateTokensWebhooksByToken(const QString &token, const QString &key, const QString &token2, const OAITokens_webhooks &oai_tokens_webhooks);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addTokensWebhooksByTokenCallback(OAIHttpRequestWorker *worker);
    void deleteTokensByTokenCallback(OAIHttpRequestWorker *worker);
    void deleteTokensWebhooksByTokenByIdWebhookCallback(OAIHttpRequestWorker *worker);
    void getTokensByTokenCallback(OAIHttpRequestWorker *worker);
    void getTokensByTokenByFieldCallback(OAIHttpRequestWorker *worker);
    void getTokensMemberByTokenCallback(OAIHttpRequestWorker *worker);
    void getTokensMemberByTokenByFieldCallback(OAIHttpRequestWorker *worker);
    void getTokensWebhooksByTokenCallback(OAIHttpRequestWorker *worker);
    void getTokensWebhooksByTokenByIdWebhookCallback(OAIHttpRequestWorker *worker);
    void updateTokensWebhooksByTokenCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addTokensWebhooksByTokenSignal();
    void deleteTokensByTokenSignal();
    void deleteTokensWebhooksByTokenByIdWebhookSignal();
    void getTokensByTokenSignal();
    void getTokensByTokenByFieldSignal();
    void getTokensMemberByTokenSignal();
    void getTokensMemberByTokenByFieldSignal();
    void getTokensWebhooksByTokenSignal();
    void getTokensWebhooksByTokenByIdWebhookSignal();
    void updateTokensWebhooksByTokenSignal();


    void addTokensWebhooksByTokenSignalFull(OAIHttpRequestWorker *worker);
    void deleteTokensByTokenSignalFull(OAIHttpRequestWorker *worker);
    void deleteTokensWebhooksByTokenByIdWebhookSignalFull(OAIHttpRequestWorker *worker);
    void getTokensByTokenSignalFull(OAIHttpRequestWorker *worker);
    void getTokensByTokenByFieldSignalFull(OAIHttpRequestWorker *worker);
    void getTokensMemberByTokenSignalFull(OAIHttpRequestWorker *worker);
    void getTokensMemberByTokenByFieldSignalFull(OAIHttpRequestWorker *worker);
    void getTokensWebhooksByTokenSignalFull(OAIHttpRequestWorker *worker);
    void getTokensWebhooksByTokenByIdWebhookSignalFull(OAIHttpRequestWorker *worker);
    void updateTokensWebhooksByTokenSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addTokensWebhooksByTokenSignalError() instead")
    void addTokensWebhooksByTokenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addTokensWebhooksByTokenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTokensByTokenSignalError() instead")
    void deleteTokensByTokenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTokensByTokenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTokensWebhooksByTokenByIdWebhookSignalError() instead")
    void deleteTokensWebhooksByTokenByIdWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTokensWebhooksByTokenByIdWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTokensByTokenSignalError() instead")
    void getTokensByTokenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getTokensByTokenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTokensByTokenByFieldSignalError() instead")
    void getTokensByTokenByFieldSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getTokensByTokenByFieldSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTokensMemberByTokenSignalError() instead")
    void getTokensMemberByTokenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getTokensMemberByTokenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTokensMemberByTokenByFieldSignalError() instead")
    void getTokensMemberByTokenByFieldSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getTokensMemberByTokenByFieldSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTokensWebhooksByTokenSignalError() instead")
    void getTokensWebhooksByTokenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getTokensWebhooksByTokenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTokensWebhooksByTokenByIdWebhookSignalError() instead")
    void getTokensWebhooksByTokenByIdWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getTokensWebhooksByTokenByIdWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTokensWebhooksByTokenSignalError() instead")
    void updateTokensWebhooksByTokenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateTokensWebhooksByTokenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addTokensWebhooksByTokenSignalErrorFull() instead")
    void addTokensWebhooksByTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addTokensWebhooksByTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTokensByTokenSignalErrorFull() instead")
    void deleteTokensByTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTokensByTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTokensWebhooksByTokenByIdWebhookSignalErrorFull() instead")
    void deleteTokensWebhooksByTokenByIdWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTokensWebhooksByTokenByIdWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTokensByTokenSignalErrorFull() instead")
    void getTokensByTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTokensByTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTokensByTokenByFieldSignalErrorFull() instead")
    void getTokensByTokenByFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTokensByTokenByFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTokensMemberByTokenSignalErrorFull() instead")
    void getTokensMemberByTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTokensMemberByTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTokensMemberByTokenByFieldSignalErrorFull() instead")
    void getTokensMemberByTokenByFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTokensMemberByTokenByFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTokensWebhooksByTokenSignalErrorFull() instead")
    void getTokensWebhooksByTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTokensWebhooksByTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTokensWebhooksByTokenByIdWebhookSignalErrorFull() instead")
    void getTokensWebhooksByTokenByIdWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTokensWebhooksByTokenByIdWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTokensWebhooksByTokenSignalErrorFull() instead")
    void updateTokensWebhooksByTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTokensWebhooksByTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
