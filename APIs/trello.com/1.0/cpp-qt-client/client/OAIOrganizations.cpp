/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganizations.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrganizations::OAIOrganizations(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrganizations::OAIOrganizations() {
    this->initializeModel();
}

OAIOrganizations::~OAIOrganizations() {}

void OAIOrganizations::initializeModel() {

    m_desc_isSet = false;
    m_desc_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_prefs_associated_domain_isSet = false;
    m_prefs_associated_domain_isValid = false;

    m_prefs_board_visibility_restrict_org_isSet = false;
    m_prefs_board_visibility_restrict_org_isValid = false;

    m_prefs_board_visibility_restrict_private_isSet = false;
    m_prefs_board_visibility_restrict_private_isValid = false;

    m_prefs_board_visibility_restrict_public_isSet = false;
    m_prefs_board_visibility_restrict_public_isValid = false;

    m_prefs_external_members_disabled_isSet = false;
    m_prefs_external_members_disabled_isValid = false;

    m_prefs_google_apps_version_isSet = false;
    m_prefs_google_apps_version_isValid = false;

    m_prefs_org_invite_restrict_isSet = false;
    m_prefs_org_invite_restrict_isValid = false;

    m_prefs_permission_level_isSet = false;
    m_prefs_permission_level_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAIOrganizations::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrganizations::fromJsonObject(QJsonObject json) {

    m_desc_isValid = ::OpenAPI::fromJsonValue(m_desc, json[QString("desc")]);
    m_desc_isSet = !json[QString("desc")].isNull() && m_desc_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_prefs_associated_domain_isValid = ::OpenAPI::fromJsonValue(m_prefs_associated_domain, json[QString("prefs/associatedDomain")]);
    m_prefs_associated_domain_isSet = !json[QString("prefs/associatedDomain")].isNull() && m_prefs_associated_domain_isValid;

    m_prefs_board_visibility_restrict_org_isValid = ::OpenAPI::fromJsonValue(m_prefs_board_visibility_restrict_org, json[QString("prefs/boardVisibilityRestrict/org")]);
    m_prefs_board_visibility_restrict_org_isSet = !json[QString("prefs/boardVisibilityRestrict/org")].isNull() && m_prefs_board_visibility_restrict_org_isValid;

    m_prefs_board_visibility_restrict_private_isValid = ::OpenAPI::fromJsonValue(m_prefs_board_visibility_restrict_private, json[QString("prefs/boardVisibilityRestrict/private")]);
    m_prefs_board_visibility_restrict_private_isSet = !json[QString("prefs/boardVisibilityRestrict/private")].isNull() && m_prefs_board_visibility_restrict_private_isValid;

    m_prefs_board_visibility_restrict_public_isValid = ::OpenAPI::fromJsonValue(m_prefs_board_visibility_restrict_public, json[QString("prefs/boardVisibilityRestrict/public")]);
    m_prefs_board_visibility_restrict_public_isSet = !json[QString("prefs/boardVisibilityRestrict/public")].isNull() && m_prefs_board_visibility_restrict_public_isValid;

    m_prefs_external_members_disabled_isValid = ::OpenAPI::fromJsonValue(m_prefs_external_members_disabled, json[QString("prefs/externalMembersDisabled")]);
    m_prefs_external_members_disabled_isSet = !json[QString("prefs/externalMembersDisabled")].isNull() && m_prefs_external_members_disabled_isValid;

    m_prefs_google_apps_version_isValid = ::OpenAPI::fromJsonValue(m_prefs_google_apps_version, json[QString("prefs/googleAppsVersion")]);
    m_prefs_google_apps_version_isSet = !json[QString("prefs/googleAppsVersion")].isNull() && m_prefs_google_apps_version_isValid;

    m_prefs_org_invite_restrict_isValid = ::OpenAPI::fromJsonValue(m_prefs_org_invite_restrict, json[QString("prefs/orgInviteRestrict")]);
    m_prefs_org_invite_restrict_isSet = !json[QString("prefs/orgInviteRestrict")].isNull() && m_prefs_org_invite_restrict_isValid;

    m_prefs_permission_level_isValid = ::OpenAPI::fromJsonValue(m_prefs_permission_level, json[QString("prefs/permissionLevel")]);
    m_prefs_permission_level_isSet = !json[QString("prefs/permissionLevel")].isNull() && m_prefs_permission_level_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAIOrganizations::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrganizations::asJsonObject() const {
    QJsonObject obj;
    if (m_desc_isSet) {
        obj.insert(QString("desc"), ::OpenAPI::toJsonValue(m_desc));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_prefs_associated_domain_isSet) {
        obj.insert(QString("prefs/associatedDomain"), ::OpenAPI::toJsonValue(m_prefs_associated_domain));
    }
    if (m_prefs_board_visibility_restrict_org_isSet) {
        obj.insert(QString("prefs/boardVisibilityRestrict/org"), ::OpenAPI::toJsonValue(m_prefs_board_visibility_restrict_org));
    }
    if (m_prefs_board_visibility_restrict_private_isSet) {
        obj.insert(QString("prefs/boardVisibilityRestrict/private"), ::OpenAPI::toJsonValue(m_prefs_board_visibility_restrict_private));
    }
    if (m_prefs_board_visibility_restrict_public_isSet) {
        obj.insert(QString("prefs/boardVisibilityRestrict/public"), ::OpenAPI::toJsonValue(m_prefs_board_visibility_restrict_public));
    }
    if (m_prefs_external_members_disabled_isSet) {
        obj.insert(QString("prefs/externalMembersDisabled"), ::OpenAPI::toJsonValue(m_prefs_external_members_disabled));
    }
    if (m_prefs_google_apps_version_isSet) {
        obj.insert(QString("prefs/googleAppsVersion"), ::OpenAPI::toJsonValue(m_prefs_google_apps_version));
    }
    if (m_prefs_org_invite_restrict_isSet) {
        obj.insert(QString("prefs/orgInviteRestrict"), ::OpenAPI::toJsonValue(m_prefs_org_invite_restrict));
    }
    if (m_prefs_permission_level_isSet) {
        obj.insert(QString("prefs/permissionLevel"), ::OpenAPI::toJsonValue(m_prefs_permission_level));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

QString OAIOrganizations::getDesc() const {
    return m_desc;
}
void OAIOrganizations::setDesc(const QString &desc) {
    m_desc = desc;
    m_desc_isSet = true;
}

bool OAIOrganizations::is_desc_Set() const{
    return m_desc_isSet;
}

bool OAIOrganizations::is_desc_Valid() const{
    return m_desc_isValid;
}

QString OAIOrganizations::getDisplayName() const {
    return m_display_name;
}
void OAIOrganizations::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIOrganizations::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIOrganizations::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIOrganizations::getName() const {
    return m_name;
}
void OAIOrganizations::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOrganizations::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOrganizations::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOrganizations::getPrefsAssociatedDomain() const {
    return m_prefs_associated_domain;
}
void OAIOrganizations::setPrefsAssociatedDomain(const QString &prefs_associated_domain) {
    m_prefs_associated_domain = prefs_associated_domain;
    m_prefs_associated_domain_isSet = true;
}

bool OAIOrganizations::is_prefs_associated_domain_Set() const{
    return m_prefs_associated_domain_isSet;
}

bool OAIOrganizations::is_prefs_associated_domain_Valid() const{
    return m_prefs_associated_domain_isValid;
}

QString OAIOrganizations::getPrefsBoardVisibilityRestrictOrg() const {
    return m_prefs_board_visibility_restrict_org;
}
void OAIOrganizations::setPrefsBoardVisibilityRestrictOrg(const QString &prefs_board_visibility_restrict_org) {
    m_prefs_board_visibility_restrict_org = prefs_board_visibility_restrict_org;
    m_prefs_board_visibility_restrict_org_isSet = true;
}

bool OAIOrganizations::is_prefs_board_visibility_restrict_org_Set() const{
    return m_prefs_board_visibility_restrict_org_isSet;
}

bool OAIOrganizations::is_prefs_board_visibility_restrict_org_Valid() const{
    return m_prefs_board_visibility_restrict_org_isValid;
}

QString OAIOrganizations::getPrefsBoardVisibilityRestrictPrivate() const {
    return m_prefs_board_visibility_restrict_private;
}
void OAIOrganizations::setPrefsBoardVisibilityRestrictPrivate(const QString &prefs_board_visibility_restrict_private) {
    m_prefs_board_visibility_restrict_private = prefs_board_visibility_restrict_private;
    m_prefs_board_visibility_restrict_private_isSet = true;
}

bool OAIOrganizations::is_prefs_board_visibility_restrict_private_Set() const{
    return m_prefs_board_visibility_restrict_private_isSet;
}

bool OAIOrganizations::is_prefs_board_visibility_restrict_private_Valid() const{
    return m_prefs_board_visibility_restrict_private_isValid;
}

QString OAIOrganizations::getPrefsBoardVisibilityRestrictPublic() const {
    return m_prefs_board_visibility_restrict_public;
}
void OAIOrganizations::setPrefsBoardVisibilityRestrictPublic(const QString &prefs_board_visibility_restrict_public) {
    m_prefs_board_visibility_restrict_public = prefs_board_visibility_restrict_public;
    m_prefs_board_visibility_restrict_public_isSet = true;
}

bool OAIOrganizations::is_prefs_board_visibility_restrict_public_Set() const{
    return m_prefs_board_visibility_restrict_public_isSet;
}

bool OAIOrganizations::is_prefs_board_visibility_restrict_public_Valid() const{
    return m_prefs_board_visibility_restrict_public_isValid;
}

QString OAIOrganizations::getPrefsExternalMembersDisabled() const {
    return m_prefs_external_members_disabled;
}
void OAIOrganizations::setPrefsExternalMembersDisabled(const QString &prefs_external_members_disabled) {
    m_prefs_external_members_disabled = prefs_external_members_disabled;
    m_prefs_external_members_disabled_isSet = true;
}

bool OAIOrganizations::is_prefs_external_members_disabled_Set() const{
    return m_prefs_external_members_disabled_isSet;
}

bool OAIOrganizations::is_prefs_external_members_disabled_Valid() const{
    return m_prefs_external_members_disabled_isValid;
}

QString OAIOrganizations::getPrefsGoogleAppsVersion() const {
    return m_prefs_google_apps_version;
}
void OAIOrganizations::setPrefsGoogleAppsVersion(const QString &prefs_google_apps_version) {
    m_prefs_google_apps_version = prefs_google_apps_version;
    m_prefs_google_apps_version_isSet = true;
}

bool OAIOrganizations::is_prefs_google_apps_version_Set() const{
    return m_prefs_google_apps_version_isSet;
}

bool OAIOrganizations::is_prefs_google_apps_version_Valid() const{
    return m_prefs_google_apps_version_isValid;
}

QString OAIOrganizations::getPrefsOrgInviteRestrict() const {
    return m_prefs_org_invite_restrict;
}
void OAIOrganizations::setPrefsOrgInviteRestrict(const QString &prefs_org_invite_restrict) {
    m_prefs_org_invite_restrict = prefs_org_invite_restrict;
    m_prefs_org_invite_restrict_isSet = true;
}

bool OAIOrganizations::is_prefs_org_invite_restrict_Set() const{
    return m_prefs_org_invite_restrict_isSet;
}

bool OAIOrganizations::is_prefs_org_invite_restrict_Valid() const{
    return m_prefs_org_invite_restrict_isValid;
}

QString OAIOrganizations::getPrefsPermissionLevel() const {
    return m_prefs_permission_level;
}
void OAIOrganizations::setPrefsPermissionLevel(const QString &prefs_permission_level) {
    m_prefs_permission_level = prefs_permission_level;
    m_prefs_permission_level_isSet = true;
}

bool OAIOrganizations::is_prefs_permission_level_Set() const{
    return m_prefs_permission_level_isSet;
}

bool OAIOrganizations::is_prefs_permission_level_Valid() const{
    return m_prefs_permission_level_isValid;
}

QString OAIOrganizations::getWebsite() const {
    return m_website;
}
void OAIOrganizations::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIOrganizations::is_website_Set() const{
    return m_website_isSet;
}

bool OAIOrganizations::is_website_Valid() const{
    return m_website_isValid;
}

bool OAIOrganizations::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs_associated_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs_board_visibility_restrict_org_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs_board_visibility_restrict_private_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs_board_visibility_restrict_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs_external_members_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs_google_apps_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs_org_invite_restrict_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs_permission_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrganizations::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
