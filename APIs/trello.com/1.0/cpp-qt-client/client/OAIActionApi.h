/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIActionApi_H
#define OAI_OAIActionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActions.h"
#include "OAIActions_text.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIActionApi : public QObject {
    Q_OBJECT

public:
    OAIActionApi(const int timeOut = 0);
    ~OAIActionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id_action QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void deleteActionsByIdAction(const QString &id_action, const QString &key, const QString &token);

    /**
    * @param[in]  id_action QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getActionsBoardByIdAction(const QString &id_action, const QString &key, const QString &token, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_action QString [required]
    * @param[in]  field QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getActionsBoardByIdActionByField(const QString &id_action, const QString &field, const QString &key, const QString &token);

    /**
    * @param[in]  id_action QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  display QString [optional]
    * @param[in]  entities QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  member QString [optional]
    * @param[in]  member_fields QString [optional]
    * @param[in]  member_creator QString [optional]
    * @param[in]  member_creator_fields QString [optional]
    */
    virtual void getActionsByIdAction(const QString &id_action, const QString &key, const QString &token, const ::OpenAPI::OptionalParam<QString> &display = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &member = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &member_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &member_creator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &member_creator_fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_action QString [required]
    * @param[in]  field QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getActionsByIdActionByField(const QString &id_action, const QString &field, const QString &key, const QString &token);

    /**
    * @param[in]  id_action QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getActionsCardByIdAction(const QString &id_action, const QString &key, const QString &token, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_action QString [required]
    * @param[in]  field QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getActionsCardByIdActionByField(const QString &id_action, const QString &field, const QString &key, const QString &token);

    /**
    * @param[in]  id_action QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getActionsDisplayByIdAction(const QString &id_action, const QString &key, const QString &token);

    /**
    * @param[in]  id_action QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getActionsEntitiesByIdAction(const QString &id_action, const QString &key, const QString &token);

    /**
    * @param[in]  id_action QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getActionsListByIdAction(const QString &id_action, const QString &key, const QString &token, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_action QString [required]
    * @param[in]  field QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getActionsListByIdActionByField(const QString &id_action, const QString &field, const QString &key, const QString &token);

    /**
    * @param[in]  id_action QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getActionsMemberByIdAction(const QString &id_action, const QString &key, const QString &token, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_action QString [required]
    * @param[in]  field QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getActionsMemberByIdActionByField(const QString &id_action, const QString &field, const QString &key, const QString &token);

    /**
    * @param[in]  id_action QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getActionsMemberCreatorByIdAction(const QString &id_action, const QString &key, const QString &token, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_action QString [required]
    * @param[in]  field QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getActionsMemberCreatorByIdActionByField(const QString &id_action, const QString &field, const QString &key, const QString &token);

    /**
    * @param[in]  id_action QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getActionsOrganizationByIdAction(const QString &id_action, const QString &key, const QString &token, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_action QString [required]
    * @param[in]  field QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getActionsOrganizationByIdActionByField(const QString &id_action, const QString &field, const QString &key, const QString &token);

    /**
    * @param[in]  id_action QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_actions OAIActions [required]
    */
    virtual void updateActionsByIdAction(const QString &id_action, const QString &key, const QString &token, const OAIActions &oai_actions);

    /**
    * @param[in]  id_action QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_actions_text OAIActions_text [required]
    */
    virtual void updateActionsTextByIdAction(const QString &id_action, const QString &key, const QString &token, const OAIActions_text &oai_actions_text);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteActionsByIdActionCallback(OAIHttpRequestWorker *worker);
    void getActionsBoardByIdActionCallback(OAIHttpRequestWorker *worker);
    void getActionsBoardByIdActionByFieldCallback(OAIHttpRequestWorker *worker);
    void getActionsByIdActionCallback(OAIHttpRequestWorker *worker);
    void getActionsByIdActionByFieldCallback(OAIHttpRequestWorker *worker);
    void getActionsCardByIdActionCallback(OAIHttpRequestWorker *worker);
    void getActionsCardByIdActionByFieldCallback(OAIHttpRequestWorker *worker);
    void getActionsDisplayByIdActionCallback(OAIHttpRequestWorker *worker);
    void getActionsEntitiesByIdActionCallback(OAIHttpRequestWorker *worker);
    void getActionsListByIdActionCallback(OAIHttpRequestWorker *worker);
    void getActionsListByIdActionByFieldCallback(OAIHttpRequestWorker *worker);
    void getActionsMemberByIdActionCallback(OAIHttpRequestWorker *worker);
    void getActionsMemberByIdActionByFieldCallback(OAIHttpRequestWorker *worker);
    void getActionsMemberCreatorByIdActionCallback(OAIHttpRequestWorker *worker);
    void getActionsMemberCreatorByIdActionByFieldCallback(OAIHttpRequestWorker *worker);
    void getActionsOrganizationByIdActionCallback(OAIHttpRequestWorker *worker);
    void getActionsOrganizationByIdActionByFieldCallback(OAIHttpRequestWorker *worker);
    void updateActionsByIdActionCallback(OAIHttpRequestWorker *worker);
    void updateActionsTextByIdActionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteActionsByIdActionSignal();
    void getActionsBoardByIdActionSignal();
    void getActionsBoardByIdActionByFieldSignal();
    void getActionsByIdActionSignal();
    void getActionsByIdActionByFieldSignal();
    void getActionsCardByIdActionSignal();
    void getActionsCardByIdActionByFieldSignal();
    void getActionsDisplayByIdActionSignal();
    void getActionsEntitiesByIdActionSignal();
    void getActionsListByIdActionSignal();
    void getActionsListByIdActionByFieldSignal();
    void getActionsMemberByIdActionSignal();
    void getActionsMemberByIdActionByFieldSignal();
    void getActionsMemberCreatorByIdActionSignal();
    void getActionsMemberCreatorByIdActionByFieldSignal();
    void getActionsOrganizationByIdActionSignal();
    void getActionsOrganizationByIdActionByFieldSignal();
    void updateActionsByIdActionSignal();
    void updateActionsTextByIdActionSignal();


    void deleteActionsByIdActionSignalFull(OAIHttpRequestWorker *worker);
    void getActionsBoardByIdActionSignalFull(OAIHttpRequestWorker *worker);
    void getActionsBoardByIdActionByFieldSignalFull(OAIHttpRequestWorker *worker);
    void getActionsByIdActionSignalFull(OAIHttpRequestWorker *worker);
    void getActionsByIdActionByFieldSignalFull(OAIHttpRequestWorker *worker);
    void getActionsCardByIdActionSignalFull(OAIHttpRequestWorker *worker);
    void getActionsCardByIdActionByFieldSignalFull(OAIHttpRequestWorker *worker);
    void getActionsDisplayByIdActionSignalFull(OAIHttpRequestWorker *worker);
    void getActionsEntitiesByIdActionSignalFull(OAIHttpRequestWorker *worker);
    void getActionsListByIdActionSignalFull(OAIHttpRequestWorker *worker);
    void getActionsListByIdActionByFieldSignalFull(OAIHttpRequestWorker *worker);
    void getActionsMemberByIdActionSignalFull(OAIHttpRequestWorker *worker);
    void getActionsMemberByIdActionByFieldSignalFull(OAIHttpRequestWorker *worker);
    void getActionsMemberCreatorByIdActionSignalFull(OAIHttpRequestWorker *worker);
    void getActionsMemberCreatorByIdActionByFieldSignalFull(OAIHttpRequestWorker *worker);
    void getActionsOrganizationByIdActionSignalFull(OAIHttpRequestWorker *worker);
    void getActionsOrganizationByIdActionByFieldSignalFull(OAIHttpRequestWorker *worker);
    void updateActionsByIdActionSignalFull(OAIHttpRequestWorker *worker);
    void updateActionsTextByIdActionSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteActionsByIdActionSignalError() instead")
    void deleteActionsByIdActionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteActionsByIdActionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsBoardByIdActionSignalError() instead")
    void getActionsBoardByIdActionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsBoardByIdActionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsBoardByIdActionByFieldSignalError() instead")
    void getActionsBoardByIdActionByFieldSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsBoardByIdActionByFieldSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsByIdActionSignalError() instead")
    void getActionsByIdActionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsByIdActionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsByIdActionByFieldSignalError() instead")
    void getActionsByIdActionByFieldSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsByIdActionByFieldSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsCardByIdActionSignalError() instead")
    void getActionsCardByIdActionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsCardByIdActionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsCardByIdActionByFieldSignalError() instead")
    void getActionsCardByIdActionByFieldSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsCardByIdActionByFieldSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsDisplayByIdActionSignalError() instead")
    void getActionsDisplayByIdActionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsDisplayByIdActionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsEntitiesByIdActionSignalError() instead")
    void getActionsEntitiesByIdActionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsEntitiesByIdActionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsListByIdActionSignalError() instead")
    void getActionsListByIdActionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsListByIdActionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsListByIdActionByFieldSignalError() instead")
    void getActionsListByIdActionByFieldSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsListByIdActionByFieldSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsMemberByIdActionSignalError() instead")
    void getActionsMemberByIdActionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsMemberByIdActionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsMemberByIdActionByFieldSignalError() instead")
    void getActionsMemberByIdActionByFieldSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsMemberByIdActionByFieldSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsMemberCreatorByIdActionSignalError() instead")
    void getActionsMemberCreatorByIdActionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsMemberCreatorByIdActionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsMemberCreatorByIdActionByFieldSignalError() instead")
    void getActionsMemberCreatorByIdActionByFieldSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsMemberCreatorByIdActionByFieldSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsOrganizationByIdActionSignalError() instead")
    void getActionsOrganizationByIdActionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsOrganizationByIdActionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsOrganizationByIdActionByFieldSignalError() instead")
    void getActionsOrganizationByIdActionByFieldSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsOrganizationByIdActionByFieldSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateActionsByIdActionSignalError() instead")
    void updateActionsByIdActionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateActionsByIdActionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateActionsTextByIdActionSignalError() instead")
    void updateActionsTextByIdActionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateActionsTextByIdActionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteActionsByIdActionSignalErrorFull() instead")
    void deleteActionsByIdActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteActionsByIdActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsBoardByIdActionSignalErrorFull() instead")
    void getActionsBoardByIdActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsBoardByIdActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsBoardByIdActionByFieldSignalErrorFull() instead")
    void getActionsBoardByIdActionByFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsBoardByIdActionByFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsByIdActionSignalErrorFull() instead")
    void getActionsByIdActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsByIdActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsByIdActionByFieldSignalErrorFull() instead")
    void getActionsByIdActionByFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsByIdActionByFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsCardByIdActionSignalErrorFull() instead")
    void getActionsCardByIdActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsCardByIdActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsCardByIdActionByFieldSignalErrorFull() instead")
    void getActionsCardByIdActionByFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsCardByIdActionByFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsDisplayByIdActionSignalErrorFull() instead")
    void getActionsDisplayByIdActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsDisplayByIdActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsEntitiesByIdActionSignalErrorFull() instead")
    void getActionsEntitiesByIdActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsEntitiesByIdActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsListByIdActionSignalErrorFull() instead")
    void getActionsListByIdActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsListByIdActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsListByIdActionByFieldSignalErrorFull() instead")
    void getActionsListByIdActionByFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsListByIdActionByFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsMemberByIdActionSignalErrorFull() instead")
    void getActionsMemberByIdActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsMemberByIdActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsMemberByIdActionByFieldSignalErrorFull() instead")
    void getActionsMemberByIdActionByFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsMemberByIdActionByFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsMemberCreatorByIdActionSignalErrorFull() instead")
    void getActionsMemberCreatorByIdActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsMemberCreatorByIdActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsMemberCreatorByIdActionByFieldSignalErrorFull() instead")
    void getActionsMemberCreatorByIdActionByFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsMemberCreatorByIdActionByFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsOrganizationByIdActionSignalErrorFull() instead")
    void getActionsOrganizationByIdActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsOrganizationByIdActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionsOrganizationByIdActionByFieldSignalErrorFull() instead")
    void getActionsOrganizationByIdActionByFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActionsOrganizationByIdActionByFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateActionsByIdActionSignalErrorFull() instead")
    void updateActionsByIdActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateActionsByIdActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateActionsTextByIdActionSignalErrorFull() instead")
    void updateActionsTextByIdActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateActionsTextByIdActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
