/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICards_stickers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICards_stickers::OAICards_stickers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICards_stickers::OAICards_stickers() {
    this->initializeModel();
}

OAICards_stickers::~OAICards_stickers() {}

void OAICards_stickers::initializeModel() {

    m_image_isSet = false;
    m_image_isValid = false;

    m_left_isSet = false;
    m_left_isValid = false;

    m_rotate_isSet = false;
    m_rotate_isValid = false;

    m_top_isSet = false;
    m_top_isValid = false;

    m_z_index_isSet = false;
    m_z_index_isValid = false;
}

void OAICards_stickers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICards_stickers::fromJsonObject(QJsonObject json) {

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_left_isValid = ::OpenAPI::fromJsonValue(m_left, json[QString("left")]);
    m_left_isSet = !json[QString("left")].isNull() && m_left_isValid;

    m_rotate_isValid = ::OpenAPI::fromJsonValue(m_rotate, json[QString("rotate")]);
    m_rotate_isSet = !json[QString("rotate")].isNull() && m_rotate_isValid;

    m_top_isValid = ::OpenAPI::fromJsonValue(m_top, json[QString("top")]);
    m_top_isSet = !json[QString("top")].isNull() && m_top_isValid;

    m_z_index_isValid = ::OpenAPI::fromJsonValue(m_z_index, json[QString("zIndex")]);
    m_z_index_isSet = !json[QString("zIndex")].isNull() && m_z_index_isValid;
}

QString OAICards_stickers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICards_stickers::asJsonObject() const {
    QJsonObject obj;
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_left_isSet) {
        obj.insert(QString("left"), ::OpenAPI::toJsonValue(m_left));
    }
    if (m_rotate_isSet) {
        obj.insert(QString("rotate"), ::OpenAPI::toJsonValue(m_rotate));
    }
    if (m_top_isSet) {
        obj.insert(QString("top"), ::OpenAPI::toJsonValue(m_top));
    }
    if (m_z_index_isSet) {
        obj.insert(QString("zIndex"), ::OpenAPI::toJsonValue(m_z_index));
    }
    return obj;
}

QString OAICards_stickers::getImage() const {
    return m_image;
}
void OAICards_stickers::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAICards_stickers::is_image_Set() const{
    return m_image_isSet;
}

bool OAICards_stickers::is_image_Valid() const{
    return m_image_isValid;
}

QString OAICards_stickers::getLeft() const {
    return m_left;
}
void OAICards_stickers::setLeft(const QString &left) {
    m_left = left;
    m_left_isSet = true;
}

bool OAICards_stickers::is_left_Set() const{
    return m_left_isSet;
}

bool OAICards_stickers::is_left_Valid() const{
    return m_left_isValid;
}

QString OAICards_stickers::getRotate() const {
    return m_rotate;
}
void OAICards_stickers::setRotate(const QString &rotate) {
    m_rotate = rotate;
    m_rotate_isSet = true;
}

bool OAICards_stickers::is_rotate_Set() const{
    return m_rotate_isSet;
}

bool OAICards_stickers::is_rotate_Valid() const{
    return m_rotate_isValid;
}

QString OAICards_stickers::getTop() const {
    return m_top;
}
void OAICards_stickers::setTop(const QString &top) {
    m_top = top;
    m_top_isSet = true;
}

bool OAICards_stickers::is_top_Set() const{
    return m_top_isSet;
}

bool OAICards_stickers::is_top_Valid() const{
    return m_top_isValid;
}

QString OAICards_stickers::getZIndex() const {
    return m_z_index;
}
void OAICards_stickers::setZIndex(const QString &z_index) {
    m_z_index = z_index;
    m_z_index_isSet = true;
}

bool OAICards_stickers::is_z_index_Set() const{
    return m_z_index_isSet;
}

bool OAICards_stickers::is_z_index_Valid() const{
    return m_z_index_isValid;
}

bool OAICards_stickers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_left_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_z_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICards_stickers::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
