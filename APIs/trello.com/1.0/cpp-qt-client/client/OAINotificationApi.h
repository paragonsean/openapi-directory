/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINotificationApi_H
#define OAI_OAINotificationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAINotifications.h"
#include "OAINotifications_unread.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINotificationApi : public QObject {
    Q_OBJECT

public:
    OAINotificationApi(const int timeOut = 0);
    ~OAINotificationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void addNotificationsAllRead(const QString &key, const QString &token);

    /**
    * @param[in]  id_notification QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getNotificationsBoardByIdNotification(const QString &id_notification, const QString &key, const QString &token, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_notification QString [required]
    * @param[in]  field QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getNotificationsBoardByIdNotificationByField(const QString &id_notification, const QString &field, const QString &key, const QString &token);

    /**
    * @param[in]  id_notification QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  display QString [optional]
    * @param[in]  entities QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  member_creator QString [optional]
    * @param[in]  member_creator_fields QString [optional]
    * @param[in]  board QString [optional]
    * @param[in]  board_fields QString [optional]
    * @param[in]  list QString [optional]
    * @param[in]  card QString [optional]
    * @param[in]  card_fields QString [optional]
    * @param[in]  organization QString [optional]
    * @param[in]  organization_fields QString [optional]
    * @param[in]  member QString [optional]
    * @param[in]  member_fields QString [optional]
    */
    virtual void getNotificationsByIdNotification(const QString &id_notification, const QString &key, const QString &token, const ::OpenAPI::OptionalParam<QString> &display = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &member_creator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &member_creator_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &board = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &board_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &list = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &card = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &card_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &organization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &organization_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &member = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &member_fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_notification QString [required]
    * @param[in]  field QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getNotificationsByIdNotificationByField(const QString &id_notification, const QString &field, const QString &key, const QString &token);

    /**
    * @param[in]  id_notification QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getNotificationsCardByIdNotification(const QString &id_notification, const QString &key, const QString &token, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_notification QString [required]
    * @param[in]  field QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getNotificationsCardByIdNotificationByField(const QString &id_notification, const QString &field, const QString &key, const QString &token);

    /**
    * @param[in]  id_notification QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getNotificationsDisplayByIdNotification(const QString &id_notification, const QString &key, const QString &token);

    /**
    * @param[in]  id_notification QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getNotificationsEntitiesByIdNotification(const QString &id_notification, const QString &key, const QString &token);

    /**
    * @param[in]  id_notification QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getNotificationsListByIdNotification(const QString &id_notification, const QString &key, const QString &token, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_notification QString [required]
    * @param[in]  field QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getNotificationsListByIdNotificationByField(const QString &id_notification, const QString &field, const QString &key, const QString &token);

    /**
    * @param[in]  id_notification QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getNotificationsMemberByIdNotification(const QString &id_notification, const QString &key, const QString &token, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_notification QString [required]
    * @param[in]  field QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getNotificationsMemberByIdNotificationByField(const QString &id_notification, const QString &field, const QString &key, const QString &token);

    /**
    * @param[in]  id_notification QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getNotificationsMemberCreatorByIdNotification(const QString &id_notification, const QString &key, const QString &token, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_notification QString [required]
    * @param[in]  field QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getNotificationsMemberCreatorByIdNotificationByField(const QString &id_notification, const QString &field, const QString &key, const QString &token);

    /**
    * @param[in]  id_notification QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getNotificationsOrganizationByIdNotification(const QString &id_notification, const QString &key, const QString &token, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_notification QString [required]
    * @param[in]  field QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getNotificationsOrganizationByIdNotificationByField(const QString &id_notification, const QString &field, const QString &key, const QString &token);

    /**
    * @param[in]  id_notification QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_notifications OAINotifications [required]
    */
    virtual void updateNotificationsByIdNotification(const QString &id_notification, const QString &key, const QString &token, const OAINotifications &oai_notifications);

    /**
    * @param[in]  id_notification QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_notifications_unread OAINotifications_unread [required]
    */
    virtual void updateNotificationsUnreadByIdNotification(const QString &id_notification, const QString &key, const QString &token, const OAINotifications_unread &oai_notifications_unread);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addNotificationsAllReadCallback(OAIHttpRequestWorker *worker);
    void getNotificationsBoardByIdNotificationCallback(OAIHttpRequestWorker *worker);
    void getNotificationsBoardByIdNotificationByFieldCallback(OAIHttpRequestWorker *worker);
    void getNotificationsByIdNotificationCallback(OAIHttpRequestWorker *worker);
    void getNotificationsByIdNotificationByFieldCallback(OAIHttpRequestWorker *worker);
    void getNotificationsCardByIdNotificationCallback(OAIHttpRequestWorker *worker);
    void getNotificationsCardByIdNotificationByFieldCallback(OAIHttpRequestWorker *worker);
    void getNotificationsDisplayByIdNotificationCallback(OAIHttpRequestWorker *worker);
    void getNotificationsEntitiesByIdNotificationCallback(OAIHttpRequestWorker *worker);
    void getNotificationsListByIdNotificationCallback(OAIHttpRequestWorker *worker);
    void getNotificationsListByIdNotificationByFieldCallback(OAIHttpRequestWorker *worker);
    void getNotificationsMemberByIdNotificationCallback(OAIHttpRequestWorker *worker);
    void getNotificationsMemberByIdNotificationByFieldCallback(OAIHttpRequestWorker *worker);
    void getNotificationsMemberCreatorByIdNotificationCallback(OAIHttpRequestWorker *worker);
    void getNotificationsMemberCreatorByIdNotificationByFieldCallback(OAIHttpRequestWorker *worker);
    void getNotificationsOrganizationByIdNotificationCallback(OAIHttpRequestWorker *worker);
    void getNotificationsOrganizationByIdNotificationByFieldCallback(OAIHttpRequestWorker *worker);
    void updateNotificationsByIdNotificationCallback(OAIHttpRequestWorker *worker);
    void updateNotificationsUnreadByIdNotificationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addNotificationsAllReadSignal();
    void getNotificationsBoardByIdNotificationSignal();
    void getNotificationsBoardByIdNotificationByFieldSignal();
    void getNotificationsByIdNotificationSignal();
    void getNotificationsByIdNotificationByFieldSignal();
    void getNotificationsCardByIdNotificationSignal();
    void getNotificationsCardByIdNotificationByFieldSignal();
    void getNotificationsDisplayByIdNotificationSignal();
    void getNotificationsEntitiesByIdNotificationSignal();
    void getNotificationsListByIdNotificationSignal();
    void getNotificationsListByIdNotificationByFieldSignal();
    void getNotificationsMemberByIdNotificationSignal();
    void getNotificationsMemberByIdNotificationByFieldSignal();
    void getNotificationsMemberCreatorByIdNotificationSignal();
    void getNotificationsMemberCreatorByIdNotificationByFieldSignal();
    void getNotificationsOrganizationByIdNotificationSignal();
    void getNotificationsOrganizationByIdNotificationByFieldSignal();
    void updateNotificationsByIdNotificationSignal();
    void updateNotificationsUnreadByIdNotificationSignal();


    void addNotificationsAllReadSignalFull(OAIHttpRequestWorker *worker);
    void getNotificationsBoardByIdNotificationSignalFull(OAIHttpRequestWorker *worker);
    void getNotificationsBoardByIdNotificationByFieldSignalFull(OAIHttpRequestWorker *worker);
    void getNotificationsByIdNotificationSignalFull(OAIHttpRequestWorker *worker);
    void getNotificationsByIdNotificationByFieldSignalFull(OAIHttpRequestWorker *worker);
    void getNotificationsCardByIdNotificationSignalFull(OAIHttpRequestWorker *worker);
    void getNotificationsCardByIdNotificationByFieldSignalFull(OAIHttpRequestWorker *worker);
    void getNotificationsDisplayByIdNotificationSignalFull(OAIHttpRequestWorker *worker);
    void getNotificationsEntitiesByIdNotificationSignalFull(OAIHttpRequestWorker *worker);
    void getNotificationsListByIdNotificationSignalFull(OAIHttpRequestWorker *worker);
    void getNotificationsListByIdNotificationByFieldSignalFull(OAIHttpRequestWorker *worker);
    void getNotificationsMemberByIdNotificationSignalFull(OAIHttpRequestWorker *worker);
    void getNotificationsMemberByIdNotificationByFieldSignalFull(OAIHttpRequestWorker *worker);
    void getNotificationsMemberCreatorByIdNotificationSignalFull(OAIHttpRequestWorker *worker);
    void getNotificationsMemberCreatorByIdNotificationByFieldSignalFull(OAIHttpRequestWorker *worker);
    void getNotificationsOrganizationByIdNotificationSignalFull(OAIHttpRequestWorker *worker);
    void getNotificationsOrganizationByIdNotificationByFieldSignalFull(OAIHttpRequestWorker *worker);
    void updateNotificationsByIdNotificationSignalFull(OAIHttpRequestWorker *worker);
    void updateNotificationsUnreadByIdNotificationSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addNotificationsAllReadSignalError() instead")
    void addNotificationsAllReadSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addNotificationsAllReadSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsBoardByIdNotificationSignalError() instead")
    void getNotificationsBoardByIdNotificationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsBoardByIdNotificationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsBoardByIdNotificationByFieldSignalError() instead")
    void getNotificationsBoardByIdNotificationByFieldSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsBoardByIdNotificationByFieldSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsByIdNotificationSignalError() instead")
    void getNotificationsByIdNotificationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsByIdNotificationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsByIdNotificationByFieldSignalError() instead")
    void getNotificationsByIdNotificationByFieldSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsByIdNotificationByFieldSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsCardByIdNotificationSignalError() instead")
    void getNotificationsCardByIdNotificationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsCardByIdNotificationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsCardByIdNotificationByFieldSignalError() instead")
    void getNotificationsCardByIdNotificationByFieldSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsCardByIdNotificationByFieldSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsDisplayByIdNotificationSignalError() instead")
    void getNotificationsDisplayByIdNotificationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsDisplayByIdNotificationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsEntitiesByIdNotificationSignalError() instead")
    void getNotificationsEntitiesByIdNotificationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsEntitiesByIdNotificationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsListByIdNotificationSignalError() instead")
    void getNotificationsListByIdNotificationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsListByIdNotificationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsListByIdNotificationByFieldSignalError() instead")
    void getNotificationsListByIdNotificationByFieldSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsListByIdNotificationByFieldSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsMemberByIdNotificationSignalError() instead")
    void getNotificationsMemberByIdNotificationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsMemberByIdNotificationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsMemberByIdNotificationByFieldSignalError() instead")
    void getNotificationsMemberByIdNotificationByFieldSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsMemberByIdNotificationByFieldSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsMemberCreatorByIdNotificationSignalError() instead")
    void getNotificationsMemberCreatorByIdNotificationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsMemberCreatorByIdNotificationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsMemberCreatorByIdNotificationByFieldSignalError() instead")
    void getNotificationsMemberCreatorByIdNotificationByFieldSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsMemberCreatorByIdNotificationByFieldSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsOrganizationByIdNotificationSignalError() instead")
    void getNotificationsOrganizationByIdNotificationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsOrganizationByIdNotificationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsOrganizationByIdNotificationByFieldSignalError() instead")
    void getNotificationsOrganizationByIdNotificationByFieldSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsOrganizationByIdNotificationByFieldSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNotificationsByIdNotificationSignalError() instead")
    void updateNotificationsByIdNotificationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateNotificationsByIdNotificationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNotificationsUnreadByIdNotificationSignalError() instead")
    void updateNotificationsUnreadByIdNotificationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateNotificationsUnreadByIdNotificationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addNotificationsAllReadSignalErrorFull() instead")
    void addNotificationsAllReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addNotificationsAllReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsBoardByIdNotificationSignalErrorFull() instead")
    void getNotificationsBoardByIdNotificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsBoardByIdNotificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsBoardByIdNotificationByFieldSignalErrorFull() instead")
    void getNotificationsBoardByIdNotificationByFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsBoardByIdNotificationByFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsByIdNotificationSignalErrorFull() instead")
    void getNotificationsByIdNotificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsByIdNotificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsByIdNotificationByFieldSignalErrorFull() instead")
    void getNotificationsByIdNotificationByFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsByIdNotificationByFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsCardByIdNotificationSignalErrorFull() instead")
    void getNotificationsCardByIdNotificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsCardByIdNotificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsCardByIdNotificationByFieldSignalErrorFull() instead")
    void getNotificationsCardByIdNotificationByFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsCardByIdNotificationByFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsDisplayByIdNotificationSignalErrorFull() instead")
    void getNotificationsDisplayByIdNotificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsDisplayByIdNotificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsEntitiesByIdNotificationSignalErrorFull() instead")
    void getNotificationsEntitiesByIdNotificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsEntitiesByIdNotificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsListByIdNotificationSignalErrorFull() instead")
    void getNotificationsListByIdNotificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsListByIdNotificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsListByIdNotificationByFieldSignalErrorFull() instead")
    void getNotificationsListByIdNotificationByFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsListByIdNotificationByFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsMemberByIdNotificationSignalErrorFull() instead")
    void getNotificationsMemberByIdNotificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsMemberByIdNotificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsMemberByIdNotificationByFieldSignalErrorFull() instead")
    void getNotificationsMemberByIdNotificationByFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsMemberByIdNotificationByFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsMemberCreatorByIdNotificationSignalErrorFull() instead")
    void getNotificationsMemberCreatorByIdNotificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsMemberCreatorByIdNotificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsMemberCreatorByIdNotificationByFieldSignalErrorFull() instead")
    void getNotificationsMemberCreatorByIdNotificationByFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsMemberCreatorByIdNotificationByFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsOrganizationByIdNotificationSignalErrorFull() instead")
    void getNotificationsOrganizationByIdNotificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsOrganizationByIdNotificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationsOrganizationByIdNotificationByFieldSignalErrorFull() instead")
    void getNotificationsOrganizationByIdNotificationByFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationsOrganizationByIdNotificationByFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNotificationsByIdNotificationSignalErrorFull() instead")
    void updateNotificationsByIdNotificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNotificationsByIdNotificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNotificationsUnreadByIdNotificationSignalErrorFull() instead")
    void updateNotificationsUnreadByIdNotificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNotificationsUnreadByIdNotificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
