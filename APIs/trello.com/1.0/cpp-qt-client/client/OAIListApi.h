/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIListApi_H
#define OAI_OAIListApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILists.h"
#include "OAILists_cards.h"
#include "OAILists_closed.h"
#include "OAILists_idBoard.h"
#include "OAILists_moveAllCards.h"
#include "OAILists_name.h"
#include "OAILists_pos.h"
#include "OAILists_subscribed.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIListApi : public QObject {
    Q_OBJECT

public:
    OAIListApi(const int timeOut = 0);
    ~OAIListApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_lists OAILists [required]
    */
    virtual void addLists(const QString &key, const QString &token, const OAILists &oai_lists);

    /**
    * @param[in]  id_list QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void addListsArchiveAllCardsByIdList(const QString &id_list, const QString &key, const QString &token);

    /**
    * @param[in]  id_list QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_lists_cards OAILists_cards [required]
    */
    virtual void addListsCardsByIdList(const QString &id_list, const QString &key, const QString &token, const OAILists_cards &oai_lists_cards);

    /**
    * @param[in]  id_list QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_lists_move_all_cards OAILists_moveAllCards [required]
    */
    virtual void addListsMoveAllCardsByIdList(const QString &id_list, const QString &key, const QString &token, const OAILists_moveAllCards &oai_lists_move_all_cards);

    /**
    * @param[in]  id_list QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  entities QString [optional]
    * @param[in]  display QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  since QString [optional]
    * @param[in]  before QString [optional]
    * @param[in]  page QString [optional]
    * @param[in]  id_models QString [optional]
    * @param[in]  member QString [optional]
    * @param[in]  member_fields QString [optional]
    * @param[in]  member_creator QString [optional]
    * @param[in]  member_creator_fields QString [optional]
    */
    virtual void getListsActionsByIdList(const QString &id_list, const QString &key, const QString &token, const ::OpenAPI::OptionalParam<QString> &entities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &display = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id_models = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &member = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &member_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &member_creator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &member_creator_fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_list QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getListsBoardByIdList(const QString &id_list, const QString &key, const QString &token, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_list QString [required]
    * @param[in]  field QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getListsBoardByIdListByField(const QString &id_list, const QString &field, const QString &key, const QString &token);

    /**
    * @param[in]  id_list QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  cards QString [optional]
    * @param[in]  card_fields QString [optional]
    * @param[in]  board QString [optional]
    * @param[in]  board_fields QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getListsByIdList(const QString &id_list, const QString &key, const QString &token, const ::OpenAPI::OptionalParam<QString> &cards = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &card_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &board = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &board_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_list QString [required]
    * @param[in]  field QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getListsByIdListByField(const QString &id_list, const QString &field, const QString &key, const QString &token);

    /**
    * @param[in]  id_list QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  actions QString [optional]
    * @param[in]  attachments QString [optional]
    * @param[in]  attachment_fields QString [optional]
    * @param[in]  stickers QString [optional]
    * @param[in]  members QString [optional]
    * @param[in]  member_fields QString [optional]
    * @param[in]  check_item_states QString [optional]
    * @param[in]  checklists QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  since QString [optional]
    * @param[in]  before QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  fields QString [optional]
    */
    virtual void getListsCardsByIdList(const QString &id_list, const QString &key, const QString &token, const ::OpenAPI::OptionalParam<QString> &actions = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attachments = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attachment_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stickers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &members = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &member_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &check_item_states = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &checklists = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_list QString [required]
    * @param[in]  filter QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getListsCardsByIdListByFilter(const QString &id_list, const QString &filter, const QString &key, const QString &token);

    /**
    * @param[in]  id_list QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_lists OAILists [required]
    */
    virtual void updateListsByIdList(const QString &id_list, const QString &key, const QString &token, const OAILists &oai_lists);

    /**
    * @param[in]  id_list QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_lists_closed OAILists_closed [required]
    */
    virtual void updateListsClosedByIdList(const QString &id_list, const QString &key, const QString &token, const OAILists_closed &oai_lists_closed);

    /**
    * @param[in]  id_list QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_lists_id_board OAILists_idBoard [required]
    */
    virtual void updateListsIdBoardByIdList(const QString &id_list, const QString &key, const QString &token, const OAILists_idBoard &oai_lists_id_board);

    /**
    * @param[in]  id_list QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_lists_name OAILists_name [required]
    */
    virtual void updateListsNameByIdList(const QString &id_list, const QString &key, const QString &token, const OAILists_name &oai_lists_name);

    /**
    * @param[in]  id_list QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_lists_pos OAILists_pos [required]
    */
    virtual void updateListsPosByIdList(const QString &id_list, const QString &key, const QString &token, const OAILists_pos &oai_lists_pos);

    /**
    * @param[in]  id_list QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_lists_subscribed OAILists_subscribed [required]
    */
    virtual void updateListsSubscribedByIdList(const QString &id_list, const QString &key, const QString &token, const OAILists_subscribed &oai_lists_subscribed);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addListsCallback(OAIHttpRequestWorker *worker);
    void addListsArchiveAllCardsByIdListCallback(OAIHttpRequestWorker *worker);
    void addListsCardsByIdListCallback(OAIHttpRequestWorker *worker);
    void addListsMoveAllCardsByIdListCallback(OAIHttpRequestWorker *worker);
    void getListsActionsByIdListCallback(OAIHttpRequestWorker *worker);
    void getListsBoardByIdListCallback(OAIHttpRequestWorker *worker);
    void getListsBoardByIdListByFieldCallback(OAIHttpRequestWorker *worker);
    void getListsByIdListCallback(OAIHttpRequestWorker *worker);
    void getListsByIdListByFieldCallback(OAIHttpRequestWorker *worker);
    void getListsCardsByIdListCallback(OAIHttpRequestWorker *worker);
    void getListsCardsByIdListByFilterCallback(OAIHttpRequestWorker *worker);
    void updateListsByIdListCallback(OAIHttpRequestWorker *worker);
    void updateListsClosedByIdListCallback(OAIHttpRequestWorker *worker);
    void updateListsIdBoardByIdListCallback(OAIHttpRequestWorker *worker);
    void updateListsNameByIdListCallback(OAIHttpRequestWorker *worker);
    void updateListsPosByIdListCallback(OAIHttpRequestWorker *worker);
    void updateListsSubscribedByIdListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addListsSignal();
    void addListsArchiveAllCardsByIdListSignal();
    void addListsCardsByIdListSignal();
    void addListsMoveAllCardsByIdListSignal();
    void getListsActionsByIdListSignal();
    void getListsBoardByIdListSignal();
    void getListsBoardByIdListByFieldSignal();
    void getListsByIdListSignal();
    void getListsByIdListByFieldSignal();
    void getListsCardsByIdListSignal();
    void getListsCardsByIdListByFilterSignal();
    void updateListsByIdListSignal();
    void updateListsClosedByIdListSignal();
    void updateListsIdBoardByIdListSignal();
    void updateListsNameByIdListSignal();
    void updateListsPosByIdListSignal();
    void updateListsSubscribedByIdListSignal();


    void addListsSignalFull(OAIHttpRequestWorker *worker);
    void addListsArchiveAllCardsByIdListSignalFull(OAIHttpRequestWorker *worker);
    void addListsCardsByIdListSignalFull(OAIHttpRequestWorker *worker);
    void addListsMoveAllCardsByIdListSignalFull(OAIHttpRequestWorker *worker);
    void getListsActionsByIdListSignalFull(OAIHttpRequestWorker *worker);
    void getListsBoardByIdListSignalFull(OAIHttpRequestWorker *worker);
    void getListsBoardByIdListByFieldSignalFull(OAIHttpRequestWorker *worker);
    void getListsByIdListSignalFull(OAIHttpRequestWorker *worker);
    void getListsByIdListByFieldSignalFull(OAIHttpRequestWorker *worker);
    void getListsCardsByIdListSignalFull(OAIHttpRequestWorker *worker);
    void getListsCardsByIdListByFilterSignalFull(OAIHttpRequestWorker *worker);
    void updateListsByIdListSignalFull(OAIHttpRequestWorker *worker);
    void updateListsClosedByIdListSignalFull(OAIHttpRequestWorker *worker);
    void updateListsIdBoardByIdListSignalFull(OAIHttpRequestWorker *worker);
    void updateListsNameByIdListSignalFull(OAIHttpRequestWorker *worker);
    void updateListsPosByIdListSignalFull(OAIHttpRequestWorker *worker);
    void updateListsSubscribedByIdListSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addListsSignalError() instead")
    void addListsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addListsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addListsArchiveAllCardsByIdListSignalError() instead")
    void addListsArchiveAllCardsByIdListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addListsArchiveAllCardsByIdListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addListsCardsByIdListSignalError() instead")
    void addListsCardsByIdListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addListsCardsByIdListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addListsMoveAllCardsByIdListSignalError() instead")
    void addListsMoveAllCardsByIdListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addListsMoveAllCardsByIdListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListsActionsByIdListSignalError() instead")
    void getListsActionsByIdListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getListsActionsByIdListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListsBoardByIdListSignalError() instead")
    void getListsBoardByIdListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getListsBoardByIdListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListsBoardByIdListByFieldSignalError() instead")
    void getListsBoardByIdListByFieldSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getListsBoardByIdListByFieldSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListsByIdListSignalError() instead")
    void getListsByIdListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getListsByIdListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListsByIdListByFieldSignalError() instead")
    void getListsByIdListByFieldSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getListsByIdListByFieldSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListsCardsByIdListSignalError() instead")
    void getListsCardsByIdListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getListsCardsByIdListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListsCardsByIdListByFilterSignalError() instead")
    void getListsCardsByIdListByFilterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getListsCardsByIdListByFilterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateListsByIdListSignalError() instead")
    void updateListsByIdListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateListsByIdListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateListsClosedByIdListSignalError() instead")
    void updateListsClosedByIdListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateListsClosedByIdListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateListsIdBoardByIdListSignalError() instead")
    void updateListsIdBoardByIdListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateListsIdBoardByIdListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateListsNameByIdListSignalError() instead")
    void updateListsNameByIdListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateListsNameByIdListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateListsPosByIdListSignalError() instead")
    void updateListsPosByIdListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateListsPosByIdListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateListsSubscribedByIdListSignalError() instead")
    void updateListsSubscribedByIdListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateListsSubscribedByIdListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addListsSignalErrorFull() instead")
    void addListsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addListsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addListsArchiveAllCardsByIdListSignalErrorFull() instead")
    void addListsArchiveAllCardsByIdListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addListsArchiveAllCardsByIdListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addListsCardsByIdListSignalErrorFull() instead")
    void addListsCardsByIdListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addListsCardsByIdListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addListsMoveAllCardsByIdListSignalErrorFull() instead")
    void addListsMoveAllCardsByIdListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addListsMoveAllCardsByIdListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListsActionsByIdListSignalErrorFull() instead")
    void getListsActionsByIdListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getListsActionsByIdListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListsBoardByIdListSignalErrorFull() instead")
    void getListsBoardByIdListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getListsBoardByIdListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListsBoardByIdListByFieldSignalErrorFull() instead")
    void getListsBoardByIdListByFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getListsBoardByIdListByFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListsByIdListSignalErrorFull() instead")
    void getListsByIdListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getListsByIdListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListsByIdListByFieldSignalErrorFull() instead")
    void getListsByIdListByFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getListsByIdListByFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListsCardsByIdListSignalErrorFull() instead")
    void getListsCardsByIdListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getListsCardsByIdListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListsCardsByIdListByFilterSignalErrorFull() instead")
    void getListsCardsByIdListByFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getListsCardsByIdListByFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateListsByIdListSignalErrorFull() instead")
    void updateListsByIdListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateListsByIdListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateListsClosedByIdListSignalErrorFull() instead")
    void updateListsClosedByIdListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateListsClosedByIdListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateListsIdBoardByIdListSignalErrorFull() instead")
    void updateListsIdBoardByIdListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateListsIdBoardByIdListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateListsNameByIdListSignalErrorFull() instead")
    void updateListsNameByIdListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateListsNameByIdListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateListsPosByIdListSignalErrorFull() instead")
    void updateListsPosByIdListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateListsPosByIdListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateListsSubscribedByIdListSignalErrorFull() instead")
    void updateListsSubscribedByIdListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateListsSubscribedByIdListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
