/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWebhookApi_H
#define OAI_OAIWebhookApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIWebhooks.h"
#include "OAIWebhooks_active.h"
#include "OAIWebhooks_callbackURL.h"
#include "OAIWebhooks_description.h"
#include "OAIWebhooks_idModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWebhookApi : public QObject {
    Q_OBJECT

public:
    OAIWebhookApi(const int timeOut = 0);
    ~OAIWebhookApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_webhooks OAIWebhooks [required]
    */
    virtual void addWebhooks(const QString &key, const QString &token, const OAIWebhooks &oai_webhooks);

    /**
    * @param[in]  id_webhook QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void deleteWebhooksByIdWebhook(const QString &id_webhook, const QString &key, const QString &token);

    /**
    * @param[in]  id_webhook QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getWebhooksByIdWebhook(const QString &id_webhook, const QString &key, const QString &token);

    /**
    * @param[in]  id_webhook QString [required]
    * @param[in]  field QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getWebhooksByIdWebhookByField(const QString &id_webhook, const QString &field, const QString &key, const QString &token);

    /**
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_webhooks OAIWebhooks [required]
    */
    virtual void updateWebhooks(const QString &key, const QString &token, const OAIWebhooks &oai_webhooks);

    /**
    * @param[in]  id_webhook QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_webhooks_active OAIWebhooks_active [required]
    */
    virtual void updateWebhooksActiveByIdWebhook(const QString &id_webhook, const QString &key, const QString &token, const OAIWebhooks_active &oai_webhooks_active);

    /**
    * @param[in]  id_webhook QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_webhooks OAIWebhooks [required]
    */
    virtual void updateWebhooksByIdWebhook(const QString &id_webhook, const QString &key, const QString &token, const OAIWebhooks &oai_webhooks);

    /**
    * @param[in]  id_webhook QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_webhooks_callback_url OAIWebhooks_callbackURL [required]
    */
    virtual void updateWebhooksCallbackURLByIdWebhook(const QString &id_webhook, const QString &key, const QString &token, const OAIWebhooks_callbackURL &oai_webhooks_callback_url);

    /**
    * @param[in]  id_webhook QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_webhooks_description OAIWebhooks_description [required]
    */
    virtual void updateWebhooksDescriptionByIdWebhook(const QString &id_webhook, const QString &key, const QString &token, const OAIWebhooks_description &oai_webhooks_description);

    /**
    * @param[in]  id_webhook QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_webhooks_id_model OAIWebhooks_idModel [required]
    */
    virtual void updateWebhooksIdModelByIdWebhook(const QString &id_webhook, const QString &key, const QString &token, const OAIWebhooks_idModel &oai_webhooks_id_model);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addWebhooksCallback(OAIHttpRequestWorker *worker);
    void deleteWebhooksByIdWebhookCallback(OAIHttpRequestWorker *worker);
    void getWebhooksByIdWebhookCallback(OAIHttpRequestWorker *worker);
    void getWebhooksByIdWebhookByFieldCallback(OAIHttpRequestWorker *worker);
    void updateWebhooksCallback(OAIHttpRequestWorker *worker);
    void updateWebhooksActiveByIdWebhookCallback(OAIHttpRequestWorker *worker);
    void updateWebhooksByIdWebhookCallback(OAIHttpRequestWorker *worker);
    void updateWebhooksCallbackURLByIdWebhookCallback(OAIHttpRequestWorker *worker);
    void updateWebhooksDescriptionByIdWebhookCallback(OAIHttpRequestWorker *worker);
    void updateWebhooksIdModelByIdWebhookCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addWebhooksSignal();
    void deleteWebhooksByIdWebhookSignal();
    void getWebhooksByIdWebhookSignal();
    void getWebhooksByIdWebhookByFieldSignal();
    void updateWebhooksSignal();
    void updateWebhooksActiveByIdWebhookSignal();
    void updateWebhooksByIdWebhookSignal();
    void updateWebhooksCallbackURLByIdWebhookSignal();
    void updateWebhooksDescriptionByIdWebhookSignal();
    void updateWebhooksIdModelByIdWebhookSignal();


    void addWebhooksSignalFull(OAIHttpRequestWorker *worker);
    void deleteWebhooksByIdWebhookSignalFull(OAIHttpRequestWorker *worker);
    void getWebhooksByIdWebhookSignalFull(OAIHttpRequestWorker *worker);
    void getWebhooksByIdWebhookByFieldSignalFull(OAIHttpRequestWorker *worker);
    void updateWebhooksSignalFull(OAIHttpRequestWorker *worker);
    void updateWebhooksActiveByIdWebhookSignalFull(OAIHttpRequestWorker *worker);
    void updateWebhooksByIdWebhookSignalFull(OAIHttpRequestWorker *worker);
    void updateWebhooksCallbackURLByIdWebhookSignalFull(OAIHttpRequestWorker *worker);
    void updateWebhooksDescriptionByIdWebhookSignalFull(OAIHttpRequestWorker *worker);
    void updateWebhooksIdModelByIdWebhookSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addWebhooksSignalError() instead")
    void addWebhooksSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addWebhooksSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWebhooksByIdWebhookSignalError() instead")
    void deleteWebhooksByIdWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWebhooksByIdWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWebhooksByIdWebhookSignalError() instead")
    void getWebhooksByIdWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getWebhooksByIdWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWebhooksByIdWebhookByFieldSignalError() instead")
    void getWebhooksByIdWebhookByFieldSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getWebhooksByIdWebhookByFieldSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWebhooksSignalError() instead")
    void updateWebhooksSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateWebhooksSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWebhooksActiveByIdWebhookSignalError() instead")
    void updateWebhooksActiveByIdWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateWebhooksActiveByIdWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWebhooksByIdWebhookSignalError() instead")
    void updateWebhooksByIdWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateWebhooksByIdWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWebhooksCallbackURLByIdWebhookSignalError() instead")
    void updateWebhooksCallbackURLByIdWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateWebhooksCallbackURLByIdWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWebhooksDescriptionByIdWebhookSignalError() instead")
    void updateWebhooksDescriptionByIdWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateWebhooksDescriptionByIdWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWebhooksIdModelByIdWebhookSignalError() instead")
    void updateWebhooksIdModelByIdWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateWebhooksIdModelByIdWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addWebhooksSignalErrorFull() instead")
    void addWebhooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addWebhooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWebhooksByIdWebhookSignalErrorFull() instead")
    void deleteWebhooksByIdWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWebhooksByIdWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWebhooksByIdWebhookSignalErrorFull() instead")
    void getWebhooksByIdWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWebhooksByIdWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWebhooksByIdWebhookByFieldSignalErrorFull() instead")
    void getWebhooksByIdWebhookByFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWebhooksByIdWebhookByFieldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWebhooksSignalErrorFull() instead")
    void updateWebhooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWebhooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWebhooksActiveByIdWebhookSignalErrorFull() instead")
    void updateWebhooksActiveByIdWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWebhooksActiveByIdWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWebhooksByIdWebhookSignalErrorFull() instead")
    void updateWebhooksByIdWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWebhooksByIdWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWebhooksCallbackURLByIdWebhookSignalErrorFull() instead")
    void updateWebhooksCallbackURLByIdWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWebhooksCallbackURLByIdWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWebhooksDescriptionByIdWebhookSignalErrorFull() instead")
    void updateWebhooksDescriptionByIdWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWebhooksDescriptionByIdWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWebhooksIdModelByIdWebhookSignalErrorFull() instead")
    void updateWebhooksIdModelByIdWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWebhooksIdModelByIdWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
