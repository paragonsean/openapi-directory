/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISessionApi_H
#define OAI_OAISessionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISessions.h"
#include "OAISessions_status.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISessionApi : public QObject {
    Q_OBJECT

public:
    OAISessionApi(const int timeOut = 0);
    ~OAISessionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_sessions OAISessions [required]
    */
    virtual void addSessions(const QString &key, const QString &token, const OAISessions &oai_sessions);

    /**
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    */
    virtual void getSessionsSocket(const QString &key, const QString &token);

    /**
    * @param[in]  id_session QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_sessions OAISessions [required]
    */
    virtual void updateSessionsByIdSession(const QString &id_session, const QString &key, const QString &token, const OAISessions &oai_sessions);

    /**
    * @param[in]  id_session QString [required]
    * @param[in]  key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  oai_sessions_status OAISessions_status [required]
    */
    virtual void updateSessionsStatusByIdSession(const QString &id_session, const QString &key, const QString &token, const OAISessions_status &oai_sessions_status);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addSessionsCallback(OAIHttpRequestWorker *worker);
    void getSessionsSocketCallback(OAIHttpRequestWorker *worker);
    void updateSessionsByIdSessionCallback(OAIHttpRequestWorker *worker);
    void updateSessionsStatusByIdSessionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addSessionsSignal();
    void getSessionsSocketSignal();
    void updateSessionsByIdSessionSignal();
    void updateSessionsStatusByIdSessionSignal();


    void addSessionsSignalFull(OAIHttpRequestWorker *worker);
    void getSessionsSocketSignalFull(OAIHttpRequestWorker *worker);
    void updateSessionsByIdSessionSignalFull(OAIHttpRequestWorker *worker);
    void updateSessionsStatusByIdSessionSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addSessionsSignalError() instead")
    void addSessionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addSessionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSessionsSocketSignalError() instead")
    void getSessionsSocketSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSessionsSocketSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSessionsByIdSessionSignalError() instead")
    void updateSessionsByIdSessionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateSessionsByIdSessionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSessionsStatusByIdSessionSignalError() instead")
    void updateSessionsStatusByIdSessionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateSessionsStatusByIdSessionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addSessionsSignalErrorFull() instead")
    void addSessionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addSessionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSessionsSocketSignalErrorFull() instead")
    void getSessionsSocketSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSessionsSocketSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSessionsByIdSessionSignalErrorFull() instead")
    void updateSessionsByIdSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSessionsByIdSessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSessionsStatusByIdSessionSignalErrorFull() instead")
    void updateSessionsStatusByIdSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSessionsStatusByIdSessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
