/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Search service.
* @module api/SearchApi
* @version 1.0
*/
export default class SearchApi {

    /**
    * Constructs a new SearchApi. 
    * @alias module:api/SearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getSearch operation.
     * @callback module:api/SearchApi~getSearchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSearch()
     * @param {String} query a string with a length from 1 to 16384
     * @param {String} idOrganizations A comma-separated list of objectIds, 24-character hex strings
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [idBoards = 'mine')] A comma-separated list of objectIds, 24-character hex strings
     * @param {String} [idCards] A comma-separated list of objectIds, 24-character hex strings
     * @param {String} [modelTypes = 'all')] all or a comma-separated list of: actions, boards, cards, members or organizations
     * @param {String} [boardFields = 'name and idOrganization')] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
     * @param {String} [boardsLimit = '10')] a number from 1 to 1000
     * @param {String} [cardFields = 'all')] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
     * @param {String} [cardsLimit = '10')] a number from 1 to 1000
     * @param {String} [cardsPage = '0')] a number from 0 to 100
     * @param {String} [cardBoard]  true or false
     * @param {String} [cardList]  true or false
     * @param {String} [cardMembers]  true or false
     * @param {String} [cardStickers]  true or false
     * @param {String} [cardAttachments] A boolean value or &quot;cover&quot; for only card cover attachments
     * @param {String} [organizationFields = 'name and displayName')] all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
     * @param {String} [organizationsLimit = '10')] a number from 1 to 1000
     * @param {String} [memberFields = 'avatarHash, fullName, initials, username and confirmed')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [membersLimit = '10')] a number from 1 to 1000
     * @param {String} [partial]  true or false
     * @param {module:api/SearchApi~getSearchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSearch(query, idOrganizations, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling getSearch");
      }
      // verify the required parameter 'idOrganizations' is set
      if (idOrganizations === undefined || idOrganizations === null) {
        throw new Error("Missing the required parameter 'idOrganizations' when calling getSearch");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSearch");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getSearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query,
        'idBoards': opts['idBoards'],
        'idOrganizations': idOrganizations,
        'idCards': opts['idCards'],
        'modelTypes': opts['modelTypes'],
        'board_fields': opts['boardFields'],
        'boards_limit': opts['boardsLimit'],
        'card_fields': opts['cardFields'],
        'cards_limit': opts['cardsLimit'],
        'cards_page': opts['cardsPage'],
        'card_board': opts['cardBoard'],
        'card_list': opts['cardList'],
        'card_members': opts['cardMembers'],
        'card_stickers': opts['cardStickers'],
        'card_attachments': opts['cardAttachments'],
        'organization_fields': opts['organizationFields'],
        'organizations_limit': opts['organizationsLimit'],
        'member_fields': opts['memberFields'],
        'members_limit': opts['membersLimit'],
        'partial': opts['partial'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSearchMembers operation.
     * @callback module:api/SearchApi~getSearchMembersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSearchMembers()
     * @param {String} query a string with a length from 1 to 16384
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [limit = '8')] a number from 1 to 20
     * @param {String} [idBoard] An id, or null
     * @param {String} [idOrganization] An id, or null
     * @param {String} [onlyOrgMembers] A boolean
     * @param {module:api/SearchApi~getSearchMembersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSearchMembers(query, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling getSearchMembers");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSearchMembers");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getSearchMembers");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query,
        'limit': opts['limit'],
        'idBoard': opts['idBoard'],
        'idOrganization': opts['idOrganization'],
        'onlyOrgMembers': opts['onlyOrgMembers'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/search/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
