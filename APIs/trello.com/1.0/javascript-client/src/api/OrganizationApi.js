/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Organizations from '../model/Organizations';
import OrganizationsDesc from '../model/OrganizationsDesc';
import OrganizationsDisplayName from '../model/OrganizationsDisplayName';
import OrganizationsLogo from '../model/OrganizationsLogo';
import OrganizationsMembers from '../model/OrganizationsMembers';
import OrganizationsMembersDeactivated from '../model/OrganizationsMembersDeactivated';
import OrganizationsMemberships from '../model/OrganizationsMemberships';
import OrganizationsName from '../model/OrganizationsName';
import OrganizationsWebsite from '../model/OrganizationsWebsite';
import PrefsAssociatedDomain from '../model/PrefsAssociatedDomain';
import PrefsBoardVisibilityRestrict from '../model/PrefsBoardVisibilityRestrict';
import PrefsExternalMembersDisabled from '../model/PrefsExternalMembersDisabled';
import PrefsGoogleAppsVersion from '../model/PrefsGoogleAppsVersion';
import PrefsOrgInviteRestrict from '../model/PrefsOrgInviteRestrict';
import PrefsPermissionLevel from '../model/PrefsPermissionLevel';

/**
* Organization service.
* @module api/OrganizationApi
* @version 1.0
*/
export default class OrganizationApi {

    /**
    * Constructs a new OrganizationApi. 
    * @alias module:api/OrganizationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addOrganizations operation.
     * @callback module:api/OrganizationApi~addOrganizationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addOrganizations()
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/Organizations} organizations Attributes of \"Organizations\" to be added.
     * @param {module:api/OrganizationApi~addOrganizationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addOrganizations(key, token, organizations, callback) {
      let postBody = organizations;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addOrganizations");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addOrganizations");
      }
      // verify the required parameter 'organizations' is set
      if (organizations === undefined || organizations === null) {
        throw new Error("Missing the required parameter 'organizations' when calling addOrganizations");
      }

      let pathParams = {
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addOrganizationsLogoByIdOrg operation.
     * @callback module:api/OrganizationApi~addOrganizationsLogoByIdOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addOrganizationsLogoByIdOrg()
     * @param {String} idOrg idOrg or name
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/OrganizationsLogo} organizationsLogo Attributes of \"Organizations Logo\" to be added.
     * @param {module:api/OrganizationApi~addOrganizationsLogoByIdOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addOrganizationsLogoByIdOrg(idOrg, key, token, organizationsLogo, callback) {
      let postBody = organizationsLogo;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling addOrganizationsLogoByIdOrg");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addOrganizationsLogoByIdOrg");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addOrganizationsLogoByIdOrg");
      }
      // verify the required parameter 'organizationsLogo' is set
      if (organizationsLogo === undefined || organizationsLogo === null) {
        throw new Error("Missing the required parameter 'organizationsLogo' when calling addOrganizationsLogoByIdOrg");
      }

      let pathParams = {
        'idOrg': idOrg
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/logo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationsByIdOrg operation.
     * @callback module:api/OrganizationApi~deleteOrganizationsByIdOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteOrganizationsByIdOrg()
     * @param {String} idOrg idOrg or name
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/OrganizationApi~deleteOrganizationsByIdOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationsByIdOrg(idOrg, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling deleteOrganizationsByIdOrg");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteOrganizationsByIdOrg");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteOrganizationsByIdOrg");
      }

      let pathParams = {
        'idOrg': idOrg
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationsLogoByIdOrg operation.
     * @callback module:api/OrganizationApi~deleteOrganizationsLogoByIdOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteOrganizationsLogoByIdOrg()
     * @param {String} idOrg idOrg or name
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/OrganizationApi~deleteOrganizationsLogoByIdOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationsLogoByIdOrg(idOrg, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling deleteOrganizationsLogoByIdOrg");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteOrganizationsLogoByIdOrg");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteOrganizationsLogoByIdOrg");
      }

      let pathParams = {
        'idOrg': idOrg
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/logo', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationsMembersAllByIdOrgByIdMember operation.
     * @callback module:api/OrganizationApi~deleteOrganizationsMembersAllByIdOrgByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteOrganizationsMembersAllByIdOrgByIdMember()
     * @param {String} idOrg idOrg or name
     * @param {String} idMember idMember
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/OrganizationApi~deleteOrganizationsMembersAllByIdOrgByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationsMembersAllByIdOrgByIdMember(idOrg, idMember, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling deleteOrganizationsMembersAllByIdOrgByIdMember");
      }
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling deleteOrganizationsMembersAllByIdOrgByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteOrganizationsMembersAllByIdOrgByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteOrganizationsMembersAllByIdOrgByIdMember");
      }

      let pathParams = {
        'idOrg': idOrg,
        'idMember': idMember
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/members/{idMember}/all', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationsMembersByIdOrgByIdMember operation.
     * @callback module:api/OrganizationApi~deleteOrganizationsMembersByIdOrgByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteOrganizationsMembersByIdOrgByIdMember()
     * @param {String} idOrg idOrg or name
     * @param {String} idMember idMember
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/OrganizationApi~deleteOrganizationsMembersByIdOrgByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationsMembersByIdOrgByIdMember(idOrg, idMember, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling deleteOrganizationsMembersByIdOrgByIdMember");
      }
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling deleteOrganizationsMembersByIdOrgByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteOrganizationsMembersByIdOrgByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteOrganizationsMembersByIdOrgByIdMember");
      }

      let pathParams = {
        'idOrg': idOrg,
        'idMember': idMember
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/members/{idMember}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationsPrefsAssociatedDomainByIdOrg operation.
     * @callback module:api/OrganizationApi~deleteOrganizationsPrefsAssociatedDomainByIdOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteOrganizationsPrefsAssociatedDomainByIdOrg()
     * @param {String} idOrg idOrg or name
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/OrganizationApi~deleteOrganizationsPrefsAssociatedDomainByIdOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationsPrefsAssociatedDomainByIdOrg(idOrg, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling deleteOrganizationsPrefsAssociatedDomainByIdOrg");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteOrganizationsPrefsAssociatedDomainByIdOrg");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteOrganizationsPrefsAssociatedDomainByIdOrg");
      }

      let pathParams = {
        'idOrg': idOrg
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/prefs/associatedDomain', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationsPrefsOrgInviteRestrictByIdOrg operation.
     * @callback module:api/OrganizationApi~deleteOrganizationsPrefsOrgInviteRestrictByIdOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteOrganizationsPrefsOrgInviteRestrictByIdOrg()
     * @param {String} idOrg idOrg or name
     * @param {String} value An email address with optional expansion tokens
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/OrganizationApi~deleteOrganizationsPrefsOrgInviteRestrictByIdOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrganizationsPrefsOrgInviteRestrictByIdOrg(idOrg, value, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling deleteOrganizationsPrefsOrgInviteRestrictByIdOrg");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling deleteOrganizationsPrefsOrgInviteRestrictByIdOrg");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteOrganizationsPrefsOrgInviteRestrictByIdOrg");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteOrganizationsPrefsOrgInviteRestrictByIdOrg");
      }

      let pathParams = {
        'idOrg': idOrg
      };
      let queryParams = {
        'value': value,
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/prefs/orgInviteRestrict', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationsActionsByIdOrg operation.
     * @callback module:api/OrganizationApi~getOrganizationsActionsByIdOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getOrganizationsActionsByIdOrg()
     * @param {String} idOrg idOrg or name
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [entities]  true or false
     * @param {String} [display]  true or false
     * @param {String} [filter = 'all')] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
     * @param {String} [fields = 'all')] all or a comma-separated list of: data, date, idMemberCreator or type
     * @param {String} [limit = '50')] a number from 0 to 1000
     * @param {String} [format = 'list')] One of: count, list or minimal
     * @param {String} [since] A date, null or lastView
     * @param {String} [before] A date, or null
     * @param {String} [page = '0')] Page * limit must be less than 1000
     * @param {String} [idModels] Only return actions related to these model ids
     * @param {String} [member]  true or false
     * @param {String} [memberFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [memberCreator]  true or false
     * @param {String} [memberCreatorFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {module:api/OrganizationApi~getOrganizationsActionsByIdOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganizationsActionsByIdOrg(idOrg, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling getOrganizationsActionsByIdOrg");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getOrganizationsActionsByIdOrg");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getOrganizationsActionsByIdOrg");
      }

      let pathParams = {
        'idOrg': idOrg
      };
      let queryParams = {
        'entities': opts['entities'],
        'display': opts['display'],
        'filter': opts['filter'],
        'fields': opts['fields'],
        'limit': opts['limit'],
        'format': opts['format'],
        'since': opts['since'],
        'before': opts['before'],
        'page': opts['page'],
        'idModels': opts['idModels'],
        'member': opts['member'],
        'member_fields': opts['memberFields'],
        'memberCreator': opts['memberCreator'],
        'memberCreator_fields': opts['memberCreatorFields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationsBoardsByIdOrg operation.
     * @callback module:api/OrganizationApi~getOrganizationsBoardsByIdOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getOrganizationsBoardsByIdOrg()
     * @param {String} idOrg idOrg or name
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [filter = 'all')] all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
     * @param {String} [fields = 'all')] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
     * @param {String} [actions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
     * @param {String} [actionsEntities]  true or false
     * @param {String} [actionsLimit = '50')] a number from 0 to 1000
     * @param {String} [actionsFormat = 'list')] One of: count, list or minimal
     * @param {String} [actionsSince] A date, null or lastView
     * @param {String} [actionFields = 'all')] all or a comma-separated list of: data, date, idMemberCreator or type
     * @param {String} [memberships = 'none')] all or a comma-separated list of: active, admin, deactivated, me or normal
     * @param {String} [organization]  true or false
     * @param {String} [organizationFields = 'name and displayName')] all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
     * @param {String} [lists = 'none')] One of: all, closed, none or open
     * @param {module:api/OrganizationApi~getOrganizationsBoardsByIdOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganizationsBoardsByIdOrg(idOrg, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling getOrganizationsBoardsByIdOrg");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getOrganizationsBoardsByIdOrg");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getOrganizationsBoardsByIdOrg");
      }

      let pathParams = {
        'idOrg': idOrg
      };
      let queryParams = {
        'filter': opts['filter'],
        'fields': opts['fields'],
        'actions': opts['actions'],
        'actions_entities': opts['actionsEntities'],
        'actions_limit': opts['actionsLimit'],
        'actions_format': opts['actionsFormat'],
        'actions_since': opts['actionsSince'],
        'action_fields': opts['actionFields'],
        'memberships': opts['memberships'],
        'organization': opts['organization'],
        'organization_fields': opts['organizationFields'],
        'lists': opts['lists'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/boards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationsBoardsByIdOrgByFilter operation.
     * @callback module:api/OrganizationApi~getOrganizationsBoardsByIdOrgByFilterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getOrganizationsBoardsByIdOrgByFilter()
     * @param {String} idOrg idOrg or name
     * @param {String} filter filter
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/OrganizationApi~getOrganizationsBoardsByIdOrgByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganizationsBoardsByIdOrgByFilter(idOrg, filter, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling getOrganizationsBoardsByIdOrgByFilter");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getOrganizationsBoardsByIdOrgByFilter");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getOrganizationsBoardsByIdOrgByFilter");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getOrganizationsBoardsByIdOrgByFilter");
      }

      let pathParams = {
        'idOrg': idOrg,
        'filter': filter
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/boards/{filter}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationsByIdOrg operation.
     * @callback module:api/OrganizationApi~getOrganizationsByIdOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getOrganizationsByIdOrg()
     * @param {String} idOrg idOrg or name
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [actions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
     * @param {String} [actionsEntities]  true or false
     * @param {String} [actionsDisplay]  true or false
     * @param {String} [actionsLimit = '50')] a number from 0 to 1000
     * @param {String} [actionFields = 'all')] all or a comma-separated list of: data, date, idMemberCreator or type
     * @param {String} [memberships = 'none')] all or a comma-separated list of: active, admin, deactivated, me or normal
     * @param {String} [membershipsMember]  true or false
     * @param {String} [membershipsMemberFields = 'fullName and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [members = 'none')] One of: admins, all, none, normal or owners
     * @param {String} [memberFields = 'avatarHash, fullName, initials, username and confirmed')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [memberActivity] true or false ; works for premium organizations only.
     * @param {String} [membersInvited = 'none')] One of: admins, all, none, normal or owners
     * @param {String} [membersInvitedFields = 'avatarHash, initials, fullName and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [boards = 'none')] all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
     * @param {String} [boardFields = 'all')] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
     * @param {String} [boardActions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
     * @param {String} [boardActionsEntities]  true or false
     * @param {String} [boardActionsDisplay]  true or false
     * @param {String} [boardActionsFormat = 'list')] One of: count, list or minimal
     * @param {String} [boardActionsSince] A date, null or lastView
     * @param {String} [boardActionsLimit = '50')] a number from 0 to 1000
     * @param {String} [boardActionFields = 'all')] all or a comma-separated list of: data, date, idMemberCreator or type
     * @param {String} [boardLists = 'none')] One of: all, closed, none or open
     * @param {String} [paidAccount]  true or false
     * @param {String} [fields = 'name, displayName, desc, descData, url, website, logoHash, products and powerUps')] all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
     * @param {module:api/OrganizationApi~getOrganizationsByIdOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganizationsByIdOrg(idOrg, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling getOrganizationsByIdOrg");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getOrganizationsByIdOrg");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getOrganizationsByIdOrg");
      }

      let pathParams = {
        'idOrg': idOrg
      };
      let queryParams = {
        'actions': opts['actions'],
        'actions_entities': opts['actionsEntities'],
        'actions_display': opts['actionsDisplay'],
        'actions_limit': opts['actionsLimit'],
        'action_fields': opts['actionFields'],
        'memberships': opts['memberships'],
        'memberships_member': opts['membershipsMember'],
        'memberships_member_fields': opts['membershipsMemberFields'],
        'members': opts['members'],
        'member_fields': opts['memberFields'],
        'member_activity': opts['memberActivity'],
        'membersInvited': opts['membersInvited'],
        'membersInvited_fields': opts['membersInvitedFields'],
        'boards': opts['boards'],
        'board_fields': opts['boardFields'],
        'board_actions': opts['boardActions'],
        'board_actions_entities': opts['boardActionsEntities'],
        'board_actions_display': opts['boardActionsDisplay'],
        'board_actions_format': opts['boardActionsFormat'],
        'board_actions_since': opts['boardActionsSince'],
        'board_actions_limit': opts['boardActionsLimit'],
        'board_action_fields': opts['boardActionFields'],
        'board_lists': opts['boardLists'],
        'paid_account': opts['paidAccount'],
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationsByIdOrgByField operation.
     * @callback module:api/OrganizationApi~getOrganizationsByIdOrgByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getOrganizationsByIdOrgByField()
     * @param {String} idOrg idOrg or name
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/OrganizationApi~getOrganizationsByIdOrgByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganizationsByIdOrgByField(idOrg, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling getOrganizationsByIdOrgByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getOrganizationsByIdOrgByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getOrganizationsByIdOrgByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getOrganizationsByIdOrgByField");
      }

      let pathParams = {
        'idOrg': idOrg,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationsDeltasByIdOrg operation.
     * @callback module:api/OrganizationApi~getOrganizationsDeltasByIdOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getOrganizationsDeltasByIdOrg()
     * @param {String} idOrg idOrg or name
     * @param {String} tags A valid tag for subscribing
     * @param {String} ixLastUpdate a number from -1 to Infinity
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/OrganizationApi~getOrganizationsDeltasByIdOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganizationsDeltasByIdOrg(idOrg, tags, ixLastUpdate, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling getOrganizationsDeltasByIdOrg");
      }
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling getOrganizationsDeltasByIdOrg");
      }
      // verify the required parameter 'ixLastUpdate' is set
      if (ixLastUpdate === undefined || ixLastUpdate === null) {
        throw new Error("Missing the required parameter 'ixLastUpdate' when calling getOrganizationsDeltasByIdOrg");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getOrganizationsDeltasByIdOrg");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getOrganizationsDeltasByIdOrg");
      }

      let pathParams = {
        'idOrg': idOrg
      };
      let queryParams = {
        'tags': tags,
        'ixLastUpdate': ixLastUpdate,
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/deltas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationsMembersByIdOrg operation.
     * @callback module:api/OrganizationApi~getOrganizationsMembersByIdOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getOrganizationsMembersByIdOrg()
     * @param {String} idOrg idOrg or name
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [filter = 'all')] One of: admins, all, none, normal or owners
     * @param {String} [fields = 'fullName and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [activity] true or false ; works for premium organizations only.
     * @param {module:api/OrganizationApi~getOrganizationsMembersByIdOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganizationsMembersByIdOrg(idOrg, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling getOrganizationsMembersByIdOrg");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getOrganizationsMembersByIdOrg");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getOrganizationsMembersByIdOrg");
      }

      let pathParams = {
        'idOrg': idOrg
      };
      let queryParams = {
        'filter': opts['filter'],
        'fields': opts['fields'],
        'activity': opts['activity'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationsMembersByIdOrgByFilter operation.
     * @callback module:api/OrganizationApi~getOrganizationsMembersByIdOrgByFilterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getOrganizationsMembersByIdOrgByFilter()
     * @param {String} idOrg idOrg or name
     * @param {String} filter filter
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/OrganizationApi~getOrganizationsMembersByIdOrgByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganizationsMembersByIdOrgByFilter(idOrg, filter, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling getOrganizationsMembersByIdOrgByFilter");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getOrganizationsMembersByIdOrgByFilter");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getOrganizationsMembersByIdOrgByFilter");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getOrganizationsMembersByIdOrgByFilter");
      }

      let pathParams = {
        'idOrg': idOrg,
        'filter': filter
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/members/{filter}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationsMembersCardsByIdOrgByIdMember operation.
     * @callback module:api/OrganizationApi~getOrganizationsMembersCardsByIdOrgByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getOrganizationsMembersCardsByIdOrgByIdMember()
     * @param {String} idOrg idOrg or name
     * @param {String} idMember idMember
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [actions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
     * @param {String} [attachments] A boolean value or &quot;cover&quot; for only card cover attachments
     * @param {String} [attachmentFields = 'all')] all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
     * @param {String} [members]  true or false
     * @param {String} [memberFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [checkItemStates]  true or false
     * @param {String} [checklists = 'none')] One of: all or none
     * @param {String} [board]  true or false
     * @param {String} [boardFields = 'name, desc, closed, idOrganization, pinned, url and prefs')] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
     * @param {String} [list]  true or false
     * @param {String} [listFields = 'all')] all or a comma-separated list of: closed, idBoard, name, pos or subscribed
     * @param {String} [filter = 'visible')] One of: all, closed, none, open or visible
     * @param {String} [fields = 'all')] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
     * @param {module:api/OrganizationApi~getOrganizationsMembersCardsByIdOrgByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganizationsMembersCardsByIdOrgByIdMember(idOrg, idMember, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling getOrganizationsMembersCardsByIdOrgByIdMember");
      }
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getOrganizationsMembersCardsByIdOrgByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getOrganizationsMembersCardsByIdOrgByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getOrganizationsMembersCardsByIdOrgByIdMember");
      }

      let pathParams = {
        'idOrg': idOrg,
        'idMember': idMember
      };
      let queryParams = {
        'actions': opts['actions'],
        'attachments': opts['attachments'],
        'attachment_fields': opts['attachmentFields'],
        'members': opts['members'],
        'member_fields': opts['memberFields'],
        'checkItemStates': opts['checkItemStates'],
        'checklists': opts['checklists'],
        'board': opts['board'],
        'board_fields': opts['boardFields'],
        'list': opts['list'],
        'list_fields': opts['listFields'],
        'filter': opts['filter'],
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/members/{idMember}/cards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationsMembersInvitedByIdOrg operation.
     * @callback module:api/OrganizationApi~getOrganizationsMembersInvitedByIdOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getOrganizationsMembersInvitedByIdOrg()
     * @param {String} idOrg idOrg or name
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
     * @param {module:api/OrganizationApi~getOrganizationsMembersInvitedByIdOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganizationsMembersInvitedByIdOrg(idOrg, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling getOrganizationsMembersInvitedByIdOrg");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getOrganizationsMembersInvitedByIdOrg");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getOrganizationsMembersInvitedByIdOrg");
      }

      let pathParams = {
        'idOrg': idOrg
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/membersInvited', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationsMembersInvitedByIdOrgByField operation.
     * @callback module:api/OrganizationApi~getOrganizationsMembersInvitedByIdOrgByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getOrganizationsMembersInvitedByIdOrgByField()
     * @param {String} idOrg idOrg or name
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/OrganizationApi~getOrganizationsMembersInvitedByIdOrgByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganizationsMembersInvitedByIdOrgByField(idOrg, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling getOrganizationsMembersInvitedByIdOrgByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getOrganizationsMembersInvitedByIdOrgByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getOrganizationsMembersInvitedByIdOrgByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getOrganizationsMembersInvitedByIdOrgByField");
      }

      let pathParams = {
        'idOrg': idOrg,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/membersInvited/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationsMembershipsByIdOrg operation.
     * @callback module:api/OrganizationApi~getOrganizationsMembershipsByIdOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getOrganizationsMembershipsByIdOrg()
     * @param {String} idOrg idOrg or name
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [filter = 'all')] all or a comma-separated list of: active, admin, deactivated, me or normal
     * @param {String} [member]  true or false
     * @param {String} [memberFields = 'fullName and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {module:api/OrganizationApi~getOrganizationsMembershipsByIdOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganizationsMembershipsByIdOrg(idOrg, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling getOrganizationsMembershipsByIdOrg");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getOrganizationsMembershipsByIdOrg");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getOrganizationsMembershipsByIdOrg");
      }

      let pathParams = {
        'idOrg': idOrg
      };
      let queryParams = {
        'filter': opts['filter'],
        'member': opts['member'],
        'member_fields': opts['memberFields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/memberships', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationsMembershipsByIdOrgByIdMembership operation.
     * @callback module:api/OrganizationApi~getOrganizationsMembershipsByIdOrgByIdMembershipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getOrganizationsMembershipsByIdOrgByIdMembership()
     * @param {String} idOrg idOrg or name
     * @param {String} idMembership idMembership
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [member]  true or false
     * @param {String} [memberFields = 'fullName and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {module:api/OrganizationApi~getOrganizationsMembershipsByIdOrgByIdMembershipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOrganizationsMembershipsByIdOrgByIdMembership(idOrg, idMembership, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling getOrganizationsMembershipsByIdOrgByIdMembership");
      }
      // verify the required parameter 'idMembership' is set
      if (idMembership === undefined || idMembership === null) {
        throw new Error("Missing the required parameter 'idMembership' when calling getOrganizationsMembershipsByIdOrgByIdMembership");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getOrganizationsMembershipsByIdOrgByIdMembership");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getOrganizationsMembershipsByIdOrgByIdMembership");
      }

      let pathParams = {
        'idOrg': idOrg,
        'idMembership': idMembership
      };
      let queryParams = {
        'member': opts['member'],
        'member_fields': opts['memberFields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/memberships/{idMembership}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationsByIdOrg operation.
     * @callback module:api/OrganizationApi~updateOrganizationsByIdOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateOrganizationsByIdOrg()
     * @param {String} idOrg idOrg or name
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/Organizations} organizations Attributes of \"Organizations\" to be updated.
     * @param {module:api/OrganizationApi~updateOrganizationsByIdOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateOrganizationsByIdOrg(idOrg, key, token, organizations, callback) {
      let postBody = organizations;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling updateOrganizationsByIdOrg");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateOrganizationsByIdOrg");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateOrganizationsByIdOrg");
      }
      // verify the required parameter 'organizations' is set
      if (organizations === undefined || organizations === null) {
        throw new Error("Missing the required parameter 'organizations' when calling updateOrganizationsByIdOrg");
      }

      let pathParams = {
        'idOrg': idOrg
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationsDescByIdOrg operation.
     * @callback module:api/OrganizationApi~updateOrganizationsDescByIdOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateOrganizationsDescByIdOrg()
     * @param {String} idOrg idOrg or name
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/OrganizationsDesc} organizationsDesc Attributes of \"Organizations Desc\" to be updated.
     * @param {module:api/OrganizationApi~updateOrganizationsDescByIdOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateOrganizationsDescByIdOrg(idOrg, key, token, organizationsDesc, callback) {
      let postBody = organizationsDesc;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling updateOrganizationsDescByIdOrg");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateOrganizationsDescByIdOrg");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateOrganizationsDescByIdOrg");
      }
      // verify the required parameter 'organizationsDesc' is set
      if (organizationsDesc === undefined || organizationsDesc === null) {
        throw new Error("Missing the required parameter 'organizationsDesc' when calling updateOrganizationsDescByIdOrg");
      }

      let pathParams = {
        'idOrg': idOrg
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/desc', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationsDisplayNameByIdOrg operation.
     * @callback module:api/OrganizationApi~updateOrganizationsDisplayNameByIdOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateOrganizationsDisplayNameByIdOrg()
     * @param {String} idOrg idOrg or name
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/OrganizationsDisplayName} organizationsDisplayName Attributes of \"Organizations Display Name\" to be updated.
     * @param {module:api/OrganizationApi~updateOrganizationsDisplayNameByIdOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateOrganizationsDisplayNameByIdOrg(idOrg, key, token, organizationsDisplayName, callback) {
      let postBody = organizationsDisplayName;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling updateOrganizationsDisplayNameByIdOrg");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateOrganizationsDisplayNameByIdOrg");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateOrganizationsDisplayNameByIdOrg");
      }
      // verify the required parameter 'organizationsDisplayName' is set
      if (organizationsDisplayName === undefined || organizationsDisplayName === null) {
        throw new Error("Missing the required parameter 'organizationsDisplayName' when calling updateOrganizationsDisplayNameByIdOrg");
      }

      let pathParams = {
        'idOrg': idOrg
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/displayName', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationsMembersByIdOrg operation.
     * @callback module:api/OrganizationApi~updateOrganizationsMembersByIdOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateOrganizationsMembersByIdOrg()
     * @param {String} idOrg idOrg or name
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/OrganizationsMembers} organizationsMembers Attributes of \"Organizations Members\" to be updated.
     * @param {module:api/OrganizationApi~updateOrganizationsMembersByIdOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateOrganizationsMembersByIdOrg(idOrg, key, token, organizationsMembers, callback) {
      let postBody = organizationsMembers;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling updateOrganizationsMembersByIdOrg");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateOrganizationsMembersByIdOrg");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateOrganizationsMembersByIdOrg");
      }
      // verify the required parameter 'organizationsMembers' is set
      if (organizationsMembers === undefined || organizationsMembers === null) {
        throw new Error("Missing the required parameter 'organizationsMembers' when calling updateOrganizationsMembersByIdOrg");
      }

      let pathParams = {
        'idOrg': idOrg
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/members', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationsMembersByIdOrgByIdMember operation.
     * @callback module:api/OrganizationApi~updateOrganizationsMembersByIdOrgByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateOrganizationsMembersByIdOrgByIdMember()
     * @param {String} idOrg idOrg or name
     * @param {String} idMember idMember
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/OrganizationsMembers} organizationsMembers Attributes of \"Organizations Members\" to be updated.
     * @param {module:api/OrganizationApi~updateOrganizationsMembersByIdOrgByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateOrganizationsMembersByIdOrgByIdMember(idOrg, idMember, key, token, organizationsMembers, callback) {
      let postBody = organizationsMembers;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling updateOrganizationsMembersByIdOrgByIdMember");
      }
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling updateOrganizationsMembersByIdOrgByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateOrganizationsMembersByIdOrgByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateOrganizationsMembersByIdOrgByIdMember");
      }
      // verify the required parameter 'organizationsMembers' is set
      if (organizationsMembers === undefined || organizationsMembers === null) {
        throw new Error("Missing the required parameter 'organizationsMembers' when calling updateOrganizationsMembersByIdOrgByIdMember");
      }

      let pathParams = {
        'idOrg': idOrg,
        'idMember': idMember
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/members/{idMember}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationsMembersDeactivatedByIdOrgByIdMember operation.
     * @callback module:api/OrganizationApi~updateOrganizationsMembersDeactivatedByIdOrgByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateOrganizationsMembersDeactivatedByIdOrgByIdMember()
     * @param {String} idOrg idOrg or name
     * @param {String} idMember idMember
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/OrganizationsMembersDeactivated} organizationsMembersDeactivated Attributes of \"Organizations Members Deactivated\" to be updated.
     * @param {module:api/OrganizationApi~updateOrganizationsMembersDeactivatedByIdOrgByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateOrganizationsMembersDeactivatedByIdOrgByIdMember(idOrg, idMember, key, token, organizationsMembersDeactivated, callback) {
      let postBody = organizationsMembersDeactivated;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling updateOrganizationsMembersDeactivatedByIdOrgByIdMember");
      }
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling updateOrganizationsMembersDeactivatedByIdOrgByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateOrganizationsMembersDeactivatedByIdOrgByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateOrganizationsMembersDeactivatedByIdOrgByIdMember");
      }
      // verify the required parameter 'organizationsMembersDeactivated' is set
      if (organizationsMembersDeactivated === undefined || organizationsMembersDeactivated === null) {
        throw new Error("Missing the required parameter 'organizationsMembersDeactivated' when calling updateOrganizationsMembersDeactivatedByIdOrgByIdMember");
      }

      let pathParams = {
        'idOrg': idOrg,
        'idMember': idMember
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/members/{idMember}/deactivated', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationsMembershipsByIdOrgByIdMembership operation.
     * @callback module:api/OrganizationApi~updateOrganizationsMembershipsByIdOrgByIdMembershipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateOrganizationsMembershipsByIdOrgByIdMembership()
     * @param {String} idOrg idOrg or name
     * @param {String} idMembership idMembership
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/OrganizationsMemberships} organizationsMemberships Attributes of \"Organizations Memberships\" to be updated.
     * @param {module:api/OrganizationApi~updateOrganizationsMembershipsByIdOrgByIdMembershipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateOrganizationsMembershipsByIdOrgByIdMembership(idOrg, idMembership, key, token, organizationsMemberships, callback) {
      let postBody = organizationsMemberships;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling updateOrganizationsMembershipsByIdOrgByIdMembership");
      }
      // verify the required parameter 'idMembership' is set
      if (idMembership === undefined || idMembership === null) {
        throw new Error("Missing the required parameter 'idMembership' when calling updateOrganizationsMembershipsByIdOrgByIdMembership");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateOrganizationsMembershipsByIdOrgByIdMembership");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateOrganizationsMembershipsByIdOrgByIdMembership");
      }
      // verify the required parameter 'organizationsMemberships' is set
      if (organizationsMemberships === undefined || organizationsMemberships === null) {
        throw new Error("Missing the required parameter 'organizationsMemberships' when calling updateOrganizationsMembershipsByIdOrgByIdMembership");
      }

      let pathParams = {
        'idOrg': idOrg,
        'idMembership': idMembership
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/memberships/{idMembership}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationsNameByIdOrg operation.
     * @callback module:api/OrganizationApi~updateOrganizationsNameByIdOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateOrganizationsNameByIdOrg()
     * @param {String} idOrg idOrg or name
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/OrganizationsName} organizationsName Attributes of \"Organizations Name\" to be updated.
     * @param {module:api/OrganizationApi~updateOrganizationsNameByIdOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateOrganizationsNameByIdOrg(idOrg, key, token, organizationsName, callback) {
      let postBody = organizationsName;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling updateOrganizationsNameByIdOrg");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateOrganizationsNameByIdOrg");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateOrganizationsNameByIdOrg");
      }
      // verify the required parameter 'organizationsName' is set
      if (organizationsName === undefined || organizationsName === null) {
        throw new Error("Missing the required parameter 'organizationsName' when calling updateOrganizationsNameByIdOrg");
      }

      let pathParams = {
        'idOrg': idOrg
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/name', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationsPrefsAssociatedDomainByIdOrg operation.
     * @callback module:api/OrganizationApi~updateOrganizationsPrefsAssociatedDomainByIdOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateOrganizationsPrefsAssociatedDomainByIdOrg()
     * @param {String} idOrg idOrg or name
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/PrefsAssociatedDomain} prefsAssociatedDomain Attributes of \"Prefs Associated Domain\" to be updated.
     * @param {module:api/OrganizationApi~updateOrganizationsPrefsAssociatedDomainByIdOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateOrganizationsPrefsAssociatedDomainByIdOrg(idOrg, key, token, prefsAssociatedDomain, callback) {
      let postBody = prefsAssociatedDomain;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling updateOrganizationsPrefsAssociatedDomainByIdOrg");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateOrganizationsPrefsAssociatedDomainByIdOrg");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateOrganizationsPrefsAssociatedDomainByIdOrg");
      }
      // verify the required parameter 'prefsAssociatedDomain' is set
      if (prefsAssociatedDomain === undefined || prefsAssociatedDomain === null) {
        throw new Error("Missing the required parameter 'prefsAssociatedDomain' when calling updateOrganizationsPrefsAssociatedDomainByIdOrg");
      }

      let pathParams = {
        'idOrg': idOrg
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/prefs/associatedDomain', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrg operation.
     * @callback module:api/OrganizationApi~updateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrg()
     * @param {String} idOrg idOrg or name
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/PrefsBoardVisibilityRestrict} prefsBoardVisibilityRestrict Attributes of \"Prefs Board Visibility Restrict\" to be updated.
     * @param {module:api/OrganizationApi~updateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrg(idOrg, key, token, prefsBoardVisibilityRestrict, callback) {
      let postBody = prefsBoardVisibilityRestrict;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling updateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrg");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrg");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrg");
      }
      // verify the required parameter 'prefsBoardVisibilityRestrict' is set
      if (prefsBoardVisibilityRestrict === undefined || prefsBoardVisibilityRestrict === null) {
        throw new Error("Missing the required parameter 'prefsBoardVisibilityRestrict' when calling updateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrg");
      }

      let pathParams = {
        'idOrg': idOrg
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/prefs/boardVisibilityRestrict/org', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrg operation.
     * @callback module:api/OrganizationApi~updateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrg()
     * @param {String} idOrg idOrg or name
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/PrefsBoardVisibilityRestrict} prefsBoardVisibilityRestrict Attributes of \"Prefs Board Visibility Restrict\" to be updated.
     * @param {module:api/OrganizationApi~updateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrg(idOrg, key, token, prefsBoardVisibilityRestrict, callback) {
      let postBody = prefsBoardVisibilityRestrict;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling updateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrg");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrg");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrg");
      }
      // verify the required parameter 'prefsBoardVisibilityRestrict' is set
      if (prefsBoardVisibilityRestrict === undefined || prefsBoardVisibilityRestrict === null) {
        throw new Error("Missing the required parameter 'prefsBoardVisibilityRestrict' when calling updateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrg");
      }

      let pathParams = {
        'idOrg': idOrg
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/prefs/boardVisibilityRestrict/private', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrg operation.
     * @callback module:api/OrganizationApi~updateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrg()
     * @param {String} idOrg idOrg or name
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/PrefsBoardVisibilityRestrict} prefsBoardVisibilityRestrict Attributes of \"Prefs Board Visibility Restrict\" to be updated.
     * @param {module:api/OrganizationApi~updateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrg(idOrg, key, token, prefsBoardVisibilityRestrict, callback) {
      let postBody = prefsBoardVisibilityRestrict;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling updateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrg");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrg");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrg");
      }
      // verify the required parameter 'prefsBoardVisibilityRestrict' is set
      if (prefsBoardVisibilityRestrict === undefined || prefsBoardVisibilityRestrict === null) {
        throw new Error("Missing the required parameter 'prefsBoardVisibilityRestrict' when calling updateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrg");
      }

      let pathParams = {
        'idOrg': idOrg
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/prefs/boardVisibilityRestrict/public', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationsPrefsExternalMembersDisabledByIdOrg operation.
     * @callback module:api/OrganizationApi~updateOrganizationsPrefsExternalMembersDisabledByIdOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateOrganizationsPrefsExternalMembersDisabledByIdOrg()
     * @param {String} idOrg idOrg or name
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/PrefsExternalMembersDisabled} prefsExternalMembersDisabled Attributes of \"Prefs External Members Disabled\" to be updated.
     * @param {module:api/OrganizationApi~updateOrganizationsPrefsExternalMembersDisabledByIdOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateOrganizationsPrefsExternalMembersDisabledByIdOrg(idOrg, key, token, prefsExternalMembersDisabled, callback) {
      let postBody = prefsExternalMembersDisabled;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling updateOrganizationsPrefsExternalMembersDisabledByIdOrg");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateOrganizationsPrefsExternalMembersDisabledByIdOrg");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateOrganizationsPrefsExternalMembersDisabledByIdOrg");
      }
      // verify the required parameter 'prefsExternalMembersDisabled' is set
      if (prefsExternalMembersDisabled === undefined || prefsExternalMembersDisabled === null) {
        throw new Error("Missing the required parameter 'prefsExternalMembersDisabled' when calling updateOrganizationsPrefsExternalMembersDisabledByIdOrg");
      }

      let pathParams = {
        'idOrg': idOrg
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/prefs/externalMembersDisabled', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationsPrefsGoogleAppsVersionByIdOrg operation.
     * @callback module:api/OrganizationApi~updateOrganizationsPrefsGoogleAppsVersionByIdOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateOrganizationsPrefsGoogleAppsVersionByIdOrg()
     * @param {String} idOrg idOrg or name
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/PrefsGoogleAppsVersion} prefsGoogleAppsVersion Attributes of \"Prefs Google Apps Version\" to be updated.
     * @param {module:api/OrganizationApi~updateOrganizationsPrefsGoogleAppsVersionByIdOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateOrganizationsPrefsGoogleAppsVersionByIdOrg(idOrg, key, token, prefsGoogleAppsVersion, callback) {
      let postBody = prefsGoogleAppsVersion;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling updateOrganizationsPrefsGoogleAppsVersionByIdOrg");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateOrganizationsPrefsGoogleAppsVersionByIdOrg");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateOrganizationsPrefsGoogleAppsVersionByIdOrg");
      }
      // verify the required parameter 'prefsGoogleAppsVersion' is set
      if (prefsGoogleAppsVersion === undefined || prefsGoogleAppsVersion === null) {
        throw new Error("Missing the required parameter 'prefsGoogleAppsVersion' when calling updateOrganizationsPrefsGoogleAppsVersionByIdOrg");
      }

      let pathParams = {
        'idOrg': idOrg
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/prefs/googleAppsVersion', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationsPrefsOrgInviteRestrictByIdOrg operation.
     * @callback module:api/OrganizationApi~updateOrganizationsPrefsOrgInviteRestrictByIdOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateOrganizationsPrefsOrgInviteRestrictByIdOrg()
     * @param {String} idOrg idOrg or name
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/PrefsOrgInviteRestrict} prefsOrgInviteRestrict Attributes of \"Prefs Org Invite Restrict\" to be updated.
     * @param {module:api/OrganizationApi~updateOrganizationsPrefsOrgInviteRestrictByIdOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateOrganizationsPrefsOrgInviteRestrictByIdOrg(idOrg, key, token, prefsOrgInviteRestrict, callback) {
      let postBody = prefsOrgInviteRestrict;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling updateOrganizationsPrefsOrgInviteRestrictByIdOrg");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateOrganizationsPrefsOrgInviteRestrictByIdOrg");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateOrganizationsPrefsOrgInviteRestrictByIdOrg");
      }
      // verify the required parameter 'prefsOrgInviteRestrict' is set
      if (prefsOrgInviteRestrict === undefined || prefsOrgInviteRestrict === null) {
        throw new Error("Missing the required parameter 'prefsOrgInviteRestrict' when calling updateOrganizationsPrefsOrgInviteRestrictByIdOrg");
      }

      let pathParams = {
        'idOrg': idOrg
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/prefs/orgInviteRestrict', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationsPrefsPermissionLevelByIdOrg operation.
     * @callback module:api/OrganizationApi~updateOrganizationsPrefsPermissionLevelByIdOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateOrganizationsPrefsPermissionLevelByIdOrg()
     * @param {String} idOrg idOrg or name
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/PrefsPermissionLevel} prefsPermissionLevel Attributes of \"Prefs Permission Level\" to be updated.
     * @param {module:api/OrganizationApi~updateOrganizationsPrefsPermissionLevelByIdOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateOrganizationsPrefsPermissionLevelByIdOrg(idOrg, key, token, prefsPermissionLevel, callback) {
      let postBody = prefsPermissionLevel;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling updateOrganizationsPrefsPermissionLevelByIdOrg");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateOrganizationsPrefsPermissionLevelByIdOrg");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateOrganizationsPrefsPermissionLevelByIdOrg");
      }
      // verify the required parameter 'prefsPermissionLevel' is set
      if (prefsPermissionLevel === undefined || prefsPermissionLevel === null) {
        throw new Error("Missing the required parameter 'prefsPermissionLevel' when calling updateOrganizationsPrefsPermissionLevelByIdOrg");
      }

      let pathParams = {
        'idOrg': idOrg
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/prefs/permissionLevel', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationsWebsiteByIdOrg operation.
     * @callback module:api/OrganizationApi~updateOrganizationsWebsiteByIdOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateOrganizationsWebsiteByIdOrg()
     * @param {String} idOrg idOrg or name
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/OrganizationsWebsite} organizationsWebsite Attributes of \"Organizations Website\" to be updated.
     * @param {module:api/OrganizationApi~updateOrganizationsWebsiteByIdOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateOrganizationsWebsiteByIdOrg(idOrg, key, token, organizationsWebsite, callback) {
      let postBody = organizationsWebsite;
      // verify the required parameter 'idOrg' is set
      if (idOrg === undefined || idOrg === null) {
        throw new Error("Missing the required parameter 'idOrg' when calling updateOrganizationsWebsiteByIdOrg");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateOrganizationsWebsiteByIdOrg");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateOrganizationsWebsiteByIdOrg");
      }
      // verify the required parameter 'organizationsWebsite' is set
      if (organizationsWebsite === undefined || organizationsWebsite === null) {
        throw new Error("Missing the required parameter 'organizationsWebsite' when calling updateOrganizationsWebsiteByIdOrg");
      }

      let pathParams = {
        'idOrg': idOrg
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{idOrg}/website', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
