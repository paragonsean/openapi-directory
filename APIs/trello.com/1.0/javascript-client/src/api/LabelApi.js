/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Labels from '../model/Labels';
import LabelsColor from '../model/LabelsColor';
import LabelsName from '../model/LabelsName';

/**
* Label service.
* @module api/LabelApi
* @version 1.0
*/
export default class LabelApi {

    /**
    * Constructs a new LabelApi. 
    * @alias module:api/LabelApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addLabels operation.
     * @callback module:api/LabelApi~addLabelsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addLabels()
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/Labels} labels Attributes of \"Labels\" to be added.
     * @param {module:api/LabelApi~addLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addLabels(key, token, labels, callback) {
      let postBody = labels;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addLabels");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addLabels");
      }
      // verify the required parameter 'labels' is set
      if (labels === undefined || labels === null) {
        throw new Error("Missing the required parameter 'labels' when calling addLabels");
      }

      let pathParams = {
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLabelsByIdLabel operation.
     * @callback module:api/LabelApi~deleteLabelsByIdLabelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteLabelsByIdLabel()
     * @param {String} idLabel idLabel
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/LabelApi~deleteLabelsByIdLabelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteLabelsByIdLabel(idLabel, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idLabel' is set
      if (idLabel === undefined || idLabel === null) {
        throw new Error("Missing the required parameter 'idLabel' when calling deleteLabelsByIdLabel");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteLabelsByIdLabel");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteLabelsByIdLabel");
      }

      let pathParams = {
        'idLabel': idLabel
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/labels/{idLabel}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLabelsBoardByIdLabel operation.
     * @callback module:api/LabelApi~getLabelsBoardByIdLabelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getLabelsBoardByIdLabel()
     * @param {String} idLabel idLabel
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
     * @param {module:api/LabelApi~getLabelsBoardByIdLabelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getLabelsBoardByIdLabel(idLabel, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idLabel' is set
      if (idLabel === undefined || idLabel === null) {
        throw new Error("Missing the required parameter 'idLabel' when calling getLabelsBoardByIdLabel");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getLabelsBoardByIdLabel");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getLabelsBoardByIdLabel");
      }

      let pathParams = {
        'idLabel': idLabel
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/labels/{idLabel}/board', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLabelsBoardByIdLabelByField operation.
     * @callback module:api/LabelApi~getLabelsBoardByIdLabelByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getLabelsBoardByIdLabelByField()
     * @param {String} idLabel idLabel
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/LabelApi~getLabelsBoardByIdLabelByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getLabelsBoardByIdLabelByField(idLabel, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idLabel' is set
      if (idLabel === undefined || idLabel === null) {
        throw new Error("Missing the required parameter 'idLabel' when calling getLabelsBoardByIdLabelByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getLabelsBoardByIdLabelByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getLabelsBoardByIdLabelByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getLabelsBoardByIdLabelByField");
      }

      let pathParams = {
        'idLabel': idLabel,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/labels/{idLabel}/board/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLabelsByIdLabel operation.
     * @callback module:api/LabelApi~getLabelsByIdLabelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getLabelsByIdLabel()
     * @param {String} idLabel idLabel
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: color, idBoard, name or uses
     * @param {module:api/LabelApi~getLabelsByIdLabelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getLabelsByIdLabel(idLabel, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idLabel' is set
      if (idLabel === undefined || idLabel === null) {
        throw new Error("Missing the required parameter 'idLabel' when calling getLabelsByIdLabel");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getLabelsByIdLabel");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getLabelsByIdLabel");
      }

      let pathParams = {
        'idLabel': idLabel
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/labels/{idLabel}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLabelsByIdLabel operation.
     * @callback module:api/LabelApi~updateLabelsByIdLabelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateLabelsByIdLabel()
     * @param {String} idLabel idLabel
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/Labels} labels Attributes of \"Labels\" to be updated.
     * @param {module:api/LabelApi~updateLabelsByIdLabelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateLabelsByIdLabel(idLabel, key, token, labels, callback) {
      let postBody = labels;
      // verify the required parameter 'idLabel' is set
      if (idLabel === undefined || idLabel === null) {
        throw new Error("Missing the required parameter 'idLabel' when calling updateLabelsByIdLabel");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateLabelsByIdLabel");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateLabelsByIdLabel");
      }
      // verify the required parameter 'labels' is set
      if (labels === undefined || labels === null) {
        throw new Error("Missing the required parameter 'labels' when calling updateLabelsByIdLabel");
      }

      let pathParams = {
        'idLabel': idLabel
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/labels/{idLabel}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLabelsColorByIdLabel operation.
     * @callback module:api/LabelApi~updateLabelsColorByIdLabelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateLabelsColorByIdLabel()
     * @param {String} idLabel idLabel
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/LabelsColor} labelsColor Attributes of \"Labels Color\" to be updated.
     * @param {module:api/LabelApi~updateLabelsColorByIdLabelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateLabelsColorByIdLabel(idLabel, key, token, labelsColor, callback) {
      let postBody = labelsColor;
      // verify the required parameter 'idLabel' is set
      if (idLabel === undefined || idLabel === null) {
        throw new Error("Missing the required parameter 'idLabel' when calling updateLabelsColorByIdLabel");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateLabelsColorByIdLabel");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateLabelsColorByIdLabel");
      }
      // verify the required parameter 'labelsColor' is set
      if (labelsColor === undefined || labelsColor === null) {
        throw new Error("Missing the required parameter 'labelsColor' when calling updateLabelsColorByIdLabel");
      }

      let pathParams = {
        'idLabel': idLabel
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/labels/{idLabel}/color', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLabelsNameByIdLabel operation.
     * @callback module:api/LabelApi~updateLabelsNameByIdLabelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateLabelsNameByIdLabel()
     * @param {String} idLabel idLabel
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/LabelsName} labelsName Attributes of \"Labels Name\" to be updated.
     * @param {module:api/LabelApi~updateLabelsNameByIdLabelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateLabelsNameByIdLabel(idLabel, key, token, labelsName, callback) {
      let postBody = labelsName;
      // verify the required parameter 'idLabel' is set
      if (idLabel === undefined || idLabel === null) {
        throw new Error("Missing the required parameter 'idLabel' when calling updateLabelsNameByIdLabel");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateLabelsNameByIdLabel");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateLabelsNameByIdLabel");
      }
      // verify the required parameter 'labelsName' is set
      if (labelsName === undefined || labelsName === null) {
        throw new Error("Missing the required parameter 'labelsName' when calling updateLabelsNameByIdLabel");
      }

      let pathParams = {
        'idLabel': idLabel
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/labels/{idLabel}/name', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
