/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Actions from '../model/Actions';
import ActionsText from '../model/ActionsText';

/**
* Action service.
* @module api/ActionApi
* @version 1.0
*/
export default class ActionApi {

    /**
    * Constructs a new ActionApi. 
    * @alias module:api/ActionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteActionsByIdAction operation.
     * @callback module:api/ActionApi~deleteActionsByIdActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteActionsByIdAction()
     * @param {String} idAction idAction
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/ActionApi~deleteActionsByIdActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteActionsByIdAction(idAction, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idAction' is set
      if (idAction === undefined || idAction === null) {
        throw new Error("Missing the required parameter 'idAction' when calling deleteActionsByIdAction");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteActionsByIdAction");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteActionsByIdAction");
      }

      let pathParams = {
        'idAction': idAction
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actions/{idAction}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getActionsBoardByIdAction operation.
     * @callback module:api/ActionApi~getActionsBoardByIdActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getActionsBoardByIdAction()
     * @param {String} idAction idAction
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
     * @param {module:api/ActionApi~getActionsBoardByIdActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getActionsBoardByIdAction(idAction, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idAction' is set
      if (idAction === undefined || idAction === null) {
        throw new Error("Missing the required parameter 'idAction' when calling getActionsBoardByIdAction");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getActionsBoardByIdAction");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getActionsBoardByIdAction");
      }

      let pathParams = {
        'idAction': idAction
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actions/{idAction}/board', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getActionsBoardByIdActionByField operation.
     * @callback module:api/ActionApi~getActionsBoardByIdActionByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getActionsBoardByIdActionByField()
     * @param {String} idAction idAction
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/ActionApi~getActionsBoardByIdActionByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getActionsBoardByIdActionByField(idAction, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idAction' is set
      if (idAction === undefined || idAction === null) {
        throw new Error("Missing the required parameter 'idAction' when calling getActionsBoardByIdActionByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getActionsBoardByIdActionByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getActionsBoardByIdActionByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getActionsBoardByIdActionByField");
      }

      let pathParams = {
        'idAction': idAction,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actions/{idAction}/board/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getActionsByIdAction operation.
     * @callback module:api/ActionApi~getActionsByIdActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getActionsByIdAction()
     * @param {String} idAction idAction
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [display]  true or false
     * @param {String} [entities]  true or false
     * @param {String} [fields = 'all')] all or a comma-separated list of: data, date, idMemberCreator or type
     * @param {String} [member]  true or false
     * @param {String} [memberFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [memberCreator]  true or false
     * @param {String} [memberCreatorFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {module:api/ActionApi~getActionsByIdActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getActionsByIdAction(idAction, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idAction' is set
      if (idAction === undefined || idAction === null) {
        throw new Error("Missing the required parameter 'idAction' when calling getActionsByIdAction");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getActionsByIdAction");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getActionsByIdAction");
      }

      let pathParams = {
        'idAction': idAction
      };
      let queryParams = {
        'display': opts['display'],
        'entities': opts['entities'],
        'fields': opts['fields'],
        'member': opts['member'],
        'member_fields': opts['memberFields'],
        'memberCreator': opts['memberCreator'],
        'memberCreator_fields': opts['memberCreatorFields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actions/{idAction}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getActionsByIdActionByField operation.
     * @callback module:api/ActionApi~getActionsByIdActionByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getActionsByIdActionByField()
     * @param {String} idAction idAction
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/ActionApi~getActionsByIdActionByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getActionsByIdActionByField(idAction, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idAction' is set
      if (idAction === undefined || idAction === null) {
        throw new Error("Missing the required parameter 'idAction' when calling getActionsByIdActionByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getActionsByIdActionByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getActionsByIdActionByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getActionsByIdActionByField");
      }

      let pathParams = {
        'idAction': idAction,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actions/{idAction}/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getActionsCardByIdAction operation.
     * @callback module:api/ActionApi~getActionsCardByIdActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getActionsCardByIdAction()
     * @param {String} idAction idAction
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
     * @param {module:api/ActionApi~getActionsCardByIdActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getActionsCardByIdAction(idAction, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idAction' is set
      if (idAction === undefined || idAction === null) {
        throw new Error("Missing the required parameter 'idAction' when calling getActionsCardByIdAction");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getActionsCardByIdAction");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getActionsCardByIdAction");
      }

      let pathParams = {
        'idAction': idAction
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actions/{idAction}/card', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getActionsCardByIdActionByField operation.
     * @callback module:api/ActionApi~getActionsCardByIdActionByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getActionsCardByIdActionByField()
     * @param {String} idAction idAction
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/ActionApi~getActionsCardByIdActionByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getActionsCardByIdActionByField(idAction, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idAction' is set
      if (idAction === undefined || idAction === null) {
        throw new Error("Missing the required parameter 'idAction' when calling getActionsCardByIdActionByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getActionsCardByIdActionByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getActionsCardByIdActionByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getActionsCardByIdActionByField");
      }

      let pathParams = {
        'idAction': idAction,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actions/{idAction}/card/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getActionsDisplayByIdAction operation.
     * @callback module:api/ActionApi~getActionsDisplayByIdActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getActionsDisplayByIdAction()
     * @param {String} idAction idAction
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/ActionApi~getActionsDisplayByIdActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getActionsDisplayByIdAction(idAction, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idAction' is set
      if (idAction === undefined || idAction === null) {
        throw new Error("Missing the required parameter 'idAction' when calling getActionsDisplayByIdAction");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getActionsDisplayByIdAction");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getActionsDisplayByIdAction");
      }

      let pathParams = {
        'idAction': idAction
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actions/{idAction}/display', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getActionsEntitiesByIdAction operation.
     * @callback module:api/ActionApi~getActionsEntitiesByIdActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getActionsEntitiesByIdAction()
     * @param {String} idAction idAction
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/ActionApi~getActionsEntitiesByIdActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getActionsEntitiesByIdAction(idAction, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idAction' is set
      if (idAction === undefined || idAction === null) {
        throw new Error("Missing the required parameter 'idAction' when calling getActionsEntitiesByIdAction");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getActionsEntitiesByIdAction");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getActionsEntitiesByIdAction");
      }

      let pathParams = {
        'idAction': idAction
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actions/{idAction}/entities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getActionsListByIdAction operation.
     * @callback module:api/ActionApi~getActionsListByIdActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getActionsListByIdAction()
     * @param {String} idAction idAction
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: closed, idBoard, name, pos or subscribed
     * @param {module:api/ActionApi~getActionsListByIdActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getActionsListByIdAction(idAction, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idAction' is set
      if (idAction === undefined || idAction === null) {
        throw new Error("Missing the required parameter 'idAction' when calling getActionsListByIdAction");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getActionsListByIdAction");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getActionsListByIdAction");
      }

      let pathParams = {
        'idAction': idAction
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actions/{idAction}/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getActionsListByIdActionByField operation.
     * @callback module:api/ActionApi~getActionsListByIdActionByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getActionsListByIdActionByField()
     * @param {String} idAction idAction
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/ActionApi~getActionsListByIdActionByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getActionsListByIdActionByField(idAction, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idAction' is set
      if (idAction === undefined || idAction === null) {
        throw new Error("Missing the required parameter 'idAction' when calling getActionsListByIdActionByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getActionsListByIdActionByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getActionsListByIdActionByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getActionsListByIdActionByField");
      }

      let pathParams = {
        'idAction': idAction,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actions/{idAction}/list/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getActionsMemberByIdAction operation.
     * @callback module:api/ActionApi~getActionsMemberByIdActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getActionsMemberByIdAction()
     * @param {String} idAction idAction
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
     * @param {module:api/ActionApi~getActionsMemberByIdActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getActionsMemberByIdAction(idAction, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idAction' is set
      if (idAction === undefined || idAction === null) {
        throw new Error("Missing the required parameter 'idAction' when calling getActionsMemberByIdAction");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getActionsMemberByIdAction");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getActionsMemberByIdAction");
      }

      let pathParams = {
        'idAction': idAction
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actions/{idAction}/member', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getActionsMemberByIdActionByField operation.
     * @callback module:api/ActionApi~getActionsMemberByIdActionByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getActionsMemberByIdActionByField()
     * @param {String} idAction idAction
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/ActionApi~getActionsMemberByIdActionByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getActionsMemberByIdActionByField(idAction, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idAction' is set
      if (idAction === undefined || idAction === null) {
        throw new Error("Missing the required parameter 'idAction' when calling getActionsMemberByIdActionByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getActionsMemberByIdActionByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getActionsMemberByIdActionByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getActionsMemberByIdActionByField");
      }

      let pathParams = {
        'idAction': idAction,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actions/{idAction}/member/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getActionsMemberCreatorByIdAction operation.
     * @callback module:api/ActionApi~getActionsMemberCreatorByIdActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getActionsMemberCreatorByIdAction()
     * @param {String} idAction idAction
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
     * @param {module:api/ActionApi~getActionsMemberCreatorByIdActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getActionsMemberCreatorByIdAction(idAction, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idAction' is set
      if (idAction === undefined || idAction === null) {
        throw new Error("Missing the required parameter 'idAction' when calling getActionsMemberCreatorByIdAction");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getActionsMemberCreatorByIdAction");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getActionsMemberCreatorByIdAction");
      }

      let pathParams = {
        'idAction': idAction
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actions/{idAction}/memberCreator', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getActionsMemberCreatorByIdActionByField operation.
     * @callback module:api/ActionApi~getActionsMemberCreatorByIdActionByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getActionsMemberCreatorByIdActionByField()
     * @param {String} idAction idAction
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/ActionApi~getActionsMemberCreatorByIdActionByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getActionsMemberCreatorByIdActionByField(idAction, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idAction' is set
      if (idAction === undefined || idAction === null) {
        throw new Error("Missing the required parameter 'idAction' when calling getActionsMemberCreatorByIdActionByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getActionsMemberCreatorByIdActionByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getActionsMemberCreatorByIdActionByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getActionsMemberCreatorByIdActionByField");
      }

      let pathParams = {
        'idAction': idAction,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actions/{idAction}/memberCreator/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getActionsOrganizationByIdAction operation.
     * @callback module:api/ActionApi~getActionsOrganizationByIdActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getActionsOrganizationByIdAction()
     * @param {String} idAction idAction
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
     * @param {module:api/ActionApi~getActionsOrganizationByIdActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getActionsOrganizationByIdAction(idAction, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idAction' is set
      if (idAction === undefined || idAction === null) {
        throw new Error("Missing the required parameter 'idAction' when calling getActionsOrganizationByIdAction");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getActionsOrganizationByIdAction");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getActionsOrganizationByIdAction");
      }

      let pathParams = {
        'idAction': idAction
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actions/{idAction}/organization', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getActionsOrganizationByIdActionByField operation.
     * @callback module:api/ActionApi~getActionsOrganizationByIdActionByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getActionsOrganizationByIdActionByField()
     * @param {String} idAction idAction
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/ActionApi~getActionsOrganizationByIdActionByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getActionsOrganizationByIdActionByField(idAction, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idAction' is set
      if (idAction === undefined || idAction === null) {
        throw new Error("Missing the required parameter 'idAction' when calling getActionsOrganizationByIdActionByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getActionsOrganizationByIdActionByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getActionsOrganizationByIdActionByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getActionsOrganizationByIdActionByField");
      }

      let pathParams = {
        'idAction': idAction,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actions/{idAction}/organization/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateActionsByIdAction operation.
     * @callback module:api/ActionApi~updateActionsByIdActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateActionsByIdAction()
     * @param {String} idAction idAction
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/Actions} actions Attributes of \"Actions\" to be updated.
     * @param {module:api/ActionApi~updateActionsByIdActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateActionsByIdAction(idAction, key, token, actions, callback) {
      let postBody = actions;
      // verify the required parameter 'idAction' is set
      if (idAction === undefined || idAction === null) {
        throw new Error("Missing the required parameter 'idAction' when calling updateActionsByIdAction");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateActionsByIdAction");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateActionsByIdAction");
      }
      // verify the required parameter 'actions' is set
      if (actions === undefined || actions === null) {
        throw new Error("Missing the required parameter 'actions' when calling updateActionsByIdAction");
      }

      let pathParams = {
        'idAction': idAction
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actions/{idAction}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateActionsTextByIdAction operation.
     * @callback module:api/ActionApi~updateActionsTextByIdActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateActionsTextByIdAction()
     * @param {String} idAction idAction
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/ActionsText} actionsText Attributes of \"Actions Text\" to be updated.
     * @param {module:api/ActionApi~updateActionsTextByIdActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateActionsTextByIdAction(idAction, key, token, actionsText, callback) {
      let postBody = actionsText;
      // verify the required parameter 'idAction' is set
      if (idAction === undefined || idAction === null) {
        throw new Error("Missing the required parameter 'idAction' when calling updateActionsTextByIdAction");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateActionsTextByIdAction");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateActionsTextByIdAction");
      }
      // verify the required parameter 'actionsText' is set
      if (actionsText === undefined || actionsText === null) {
        throw new Error("Missing the required parameter 'actionsText' when calling updateActionsTextByIdAction");
      }

      let pathParams = {
        'idAction': idAction
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/actions/{idAction}/text', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
