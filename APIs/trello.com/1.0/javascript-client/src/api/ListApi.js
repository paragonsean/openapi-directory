/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Lists from '../model/Lists';
import ListsCards from '../model/ListsCards';
import ListsClosed from '../model/ListsClosed';
import ListsIdBoard from '../model/ListsIdBoard';
import ListsMoveAllCards from '../model/ListsMoveAllCards';
import ListsName from '../model/ListsName';
import ListsPos from '../model/ListsPos';
import ListsSubscribed from '../model/ListsSubscribed';

/**
* List service.
* @module api/ListApi
* @version 1.0
*/
export default class ListApi {

    /**
    * Constructs a new ListApi. 
    * @alias module:api/ListApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addLists operation.
     * @callback module:api/ListApi~addListsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addLists()
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/Lists} lists Attributes of \"Lists\" to be added.
     * @param {module:api/ListApi~addListsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addLists(key, token, lists, callback) {
      let postBody = lists;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addLists");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addLists");
      }
      // verify the required parameter 'lists' is set
      if (lists === undefined || lists === null) {
        throw new Error("Missing the required parameter 'lists' when calling addLists");
      }

      let pathParams = {
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addListsArchiveAllCardsByIdList operation.
     * @callback module:api/ListApi~addListsArchiveAllCardsByIdListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addListsArchiveAllCardsByIdList()
     * @param {String} idList idList
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/ListApi~addListsArchiveAllCardsByIdListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addListsArchiveAllCardsByIdList(idList, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idList' is set
      if (idList === undefined || idList === null) {
        throw new Error("Missing the required parameter 'idList' when calling addListsArchiveAllCardsByIdList");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addListsArchiveAllCardsByIdList");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addListsArchiveAllCardsByIdList");
      }

      let pathParams = {
        'idList': idList
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lists/{idList}/archiveAllCards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addListsCardsByIdList operation.
     * @callback module:api/ListApi~addListsCardsByIdListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addListsCardsByIdList()
     * @param {String} idList idList
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/ListsCards} listsCards Attributes of \"Lists Cards\" to be added.
     * @param {module:api/ListApi~addListsCardsByIdListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addListsCardsByIdList(idList, key, token, listsCards, callback) {
      let postBody = listsCards;
      // verify the required parameter 'idList' is set
      if (idList === undefined || idList === null) {
        throw new Error("Missing the required parameter 'idList' when calling addListsCardsByIdList");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addListsCardsByIdList");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addListsCardsByIdList");
      }
      // verify the required parameter 'listsCards' is set
      if (listsCards === undefined || listsCards === null) {
        throw new Error("Missing the required parameter 'listsCards' when calling addListsCardsByIdList");
      }

      let pathParams = {
        'idList': idList
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lists/{idList}/cards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addListsMoveAllCardsByIdList operation.
     * @callback module:api/ListApi~addListsMoveAllCardsByIdListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addListsMoveAllCardsByIdList()
     * @param {String} idList idList
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/ListsMoveAllCards} listsMoveAllCards Attributes of \"Lists Move All Cards\" to be added.
     * @param {module:api/ListApi~addListsMoveAllCardsByIdListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addListsMoveAllCardsByIdList(idList, key, token, listsMoveAllCards, callback) {
      let postBody = listsMoveAllCards;
      // verify the required parameter 'idList' is set
      if (idList === undefined || idList === null) {
        throw new Error("Missing the required parameter 'idList' when calling addListsMoveAllCardsByIdList");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addListsMoveAllCardsByIdList");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addListsMoveAllCardsByIdList");
      }
      // verify the required parameter 'listsMoveAllCards' is set
      if (listsMoveAllCards === undefined || listsMoveAllCards === null) {
        throw new Error("Missing the required parameter 'listsMoveAllCards' when calling addListsMoveAllCardsByIdList");
      }

      let pathParams = {
        'idList': idList
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lists/{idList}/moveAllCards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getListsActionsByIdList operation.
     * @callback module:api/ListApi~getListsActionsByIdListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getListsActionsByIdList()
     * @param {String} idList idList
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [entities]  true or false
     * @param {String} [display]  true or false
     * @param {String} [filter = 'all')] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
     * @param {String} [fields = 'all')] all or a comma-separated list of: data, date, idMemberCreator or type
     * @param {String} [limit = '50')] a number from 0 to 1000
     * @param {String} [format = 'list')] One of: count, list or minimal
     * @param {String} [since] A date, null or lastView
     * @param {String} [before] A date, or null
     * @param {String} [page = '0')] Page * limit must be less than 1000
     * @param {String} [idModels] Only return actions related to these model ids
     * @param {String} [member]  true or false
     * @param {String} [memberFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [memberCreator]  true or false
     * @param {String} [memberCreatorFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {module:api/ListApi~getListsActionsByIdListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getListsActionsByIdList(idList, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idList' is set
      if (idList === undefined || idList === null) {
        throw new Error("Missing the required parameter 'idList' when calling getListsActionsByIdList");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getListsActionsByIdList");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getListsActionsByIdList");
      }

      let pathParams = {
        'idList': idList
      };
      let queryParams = {
        'entities': opts['entities'],
        'display': opts['display'],
        'filter': opts['filter'],
        'fields': opts['fields'],
        'limit': opts['limit'],
        'format': opts['format'],
        'since': opts['since'],
        'before': opts['before'],
        'page': opts['page'],
        'idModels': opts['idModels'],
        'member': opts['member'],
        'member_fields': opts['memberFields'],
        'memberCreator': opts['memberCreator'],
        'memberCreator_fields': opts['memberCreatorFields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lists/{idList}/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getListsBoardByIdList operation.
     * @callback module:api/ListApi~getListsBoardByIdListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getListsBoardByIdList()
     * @param {String} idList idList
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
     * @param {module:api/ListApi~getListsBoardByIdListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getListsBoardByIdList(idList, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idList' is set
      if (idList === undefined || idList === null) {
        throw new Error("Missing the required parameter 'idList' when calling getListsBoardByIdList");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getListsBoardByIdList");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getListsBoardByIdList");
      }

      let pathParams = {
        'idList': idList
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lists/{idList}/board', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getListsBoardByIdListByField operation.
     * @callback module:api/ListApi~getListsBoardByIdListByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getListsBoardByIdListByField()
     * @param {String} idList idList
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/ListApi~getListsBoardByIdListByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getListsBoardByIdListByField(idList, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idList' is set
      if (idList === undefined || idList === null) {
        throw new Error("Missing the required parameter 'idList' when calling getListsBoardByIdListByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getListsBoardByIdListByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getListsBoardByIdListByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getListsBoardByIdListByField");
      }

      let pathParams = {
        'idList': idList,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lists/{idList}/board/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getListsByIdList operation.
     * @callback module:api/ListApi~getListsByIdListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getListsByIdList()
     * @param {String} idList idList
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [cards = 'none')] One of: all, closed, none or open
     * @param {String} [cardFields = 'all')] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
     * @param {String} [board]  true or false
     * @param {String} [boardFields = 'name, desc, descData, closed, idOrganization, pinned, url and prefs')] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
     * @param {String} [fields = 'name, closed, idBoard and pos')] all or a comma-separated list of: closed, idBoard, name, pos or subscribed
     * @param {module:api/ListApi~getListsByIdListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getListsByIdList(idList, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idList' is set
      if (idList === undefined || idList === null) {
        throw new Error("Missing the required parameter 'idList' when calling getListsByIdList");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getListsByIdList");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getListsByIdList");
      }

      let pathParams = {
        'idList': idList
      };
      let queryParams = {
        'cards': opts['cards'],
        'card_fields': opts['cardFields'],
        'board': opts['board'],
        'board_fields': opts['boardFields'],
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lists/{idList}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getListsByIdListByField operation.
     * @callback module:api/ListApi~getListsByIdListByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getListsByIdListByField()
     * @param {String} idList idList
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/ListApi~getListsByIdListByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getListsByIdListByField(idList, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idList' is set
      if (idList === undefined || idList === null) {
        throw new Error("Missing the required parameter 'idList' when calling getListsByIdListByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getListsByIdListByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getListsByIdListByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getListsByIdListByField");
      }

      let pathParams = {
        'idList': idList,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lists/{idList}/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getListsCardsByIdList operation.
     * @callback module:api/ListApi~getListsCardsByIdListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getListsCardsByIdList()
     * @param {String} idList idList
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [actions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
     * @param {String} [attachments] A boolean value or &quot;cover&quot; for only card cover attachments
     * @param {String} [attachmentFields = 'all')] all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
     * @param {String} [stickers]  true or false
     * @param {String} [members]  true or false
     * @param {String} [memberFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [checkItemStates]  true or false
     * @param {String} [checklists = 'none')] One of: all or none
     * @param {String} [limit] a number from 1 to 1000
     * @param {String} [since] A date, or null
     * @param {String} [before] A date, or null
     * @param {String} [filter = 'open')] One of: all, closed, none or open
     * @param {String} [fields = 'all')] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
     * @param {module:api/ListApi~getListsCardsByIdListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getListsCardsByIdList(idList, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idList' is set
      if (idList === undefined || idList === null) {
        throw new Error("Missing the required parameter 'idList' when calling getListsCardsByIdList");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getListsCardsByIdList");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getListsCardsByIdList");
      }

      let pathParams = {
        'idList': idList
      };
      let queryParams = {
        'actions': opts['actions'],
        'attachments': opts['attachments'],
        'attachment_fields': opts['attachmentFields'],
        'stickers': opts['stickers'],
        'members': opts['members'],
        'member_fields': opts['memberFields'],
        'checkItemStates': opts['checkItemStates'],
        'checklists': opts['checklists'],
        'limit': opts['limit'],
        'since': opts['since'],
        'before': opts['before'],
        'filter': opts['filter'],
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lists/{idList}/cards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getListsCardsByIdListByFilter operation.
     * @callback module:api/ListApi~getListsCardsByIdListByFilterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getListsCardsByIdListByFilter()
     * @param {String} idList idList
     * @param {String} filter filter
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/ListApi~getListsCardsByIdListByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getListsCardsByIdListByFilter(idList, filter, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idList' is set
      if (idList === undefined || idList === null) {
        throw new Error("Missing the required parameter 'idList' when calling getListsCardsByIdListByFilter");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getListsCardsByIdListByFilter");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getListsCardsByIdListByFilter");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getListsCardsByIdListByFilter");
      }

      let pathParams = {
        'idList': idList,
        'filter': filter
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lists/{idList}/cards/{filter}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateListsByIdList operation.
     * @callback module:api/ListApi~updateListsByIdListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateListsByIdList()
     * @param {String} idList idList
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/Lists} lists Attributes of \"Lists\" to be updated.
     * @param {module:api/ListApi~updateListsByIdListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateListsByIdList(idList, key, token, lists, callback) {
      let postBody = lists;
      // verify the required parameter 'idList' is set
      if (idList === undefined || idList === null) {
        throw new Error("Missing the required parameter 'idList' when calling updateListsByIdList");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateListsByIdList");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateListsByIdList");
      }
      // verify the required parameter 'lists' is set
      if (lists === undefined || lists === null) {
        throw new Error("Missing the required parameter 'lists' when calling updateListsByIdList");
      }

      let pathParams = {
        'idList': idList
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lists/{idList}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateListsClosedByIdList operation.
     * @callback module:api/ListApi~updateListsClosedByIdListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateListsClosedByIdList()
     * @param {String} idList idList
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/ListsClosed} listsClosed Attributes of \"Lists Closed\" to be updated.
     * @param {module:api/ListApi~updateListsClosedByIdListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateListsClosedByIdList(idList, key, token, listsClosed, callback) {
      let postBody = listsClosed;
      // verify the required parameter 'idList' is set
      if (idList === undefined || idList === null) {
        throw new Error("Missing the required parameter 'idList' when calling updateListsClosedByIdList");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateListsClosedByIdList");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateListsClosedByIdList");
      }
      // verify the required parameter 'listsClosed' is set
      if (listsClosed === undefined || listsClosed === null) {
        throw new Error("Missing the required parameter 'listsClosed' when calling updateListsClosedByIdList");
      }

      let pathParams = {
        'idList': idList
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lists/{idList}/closed', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateListsIdBoardByIdList operation.
     * @callback module:api/ListApi~updateListsIdBoardByIdListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateListsIdBoardByIdList()
     * @param {String} idList idList
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/ListsIdBoard} listsIdBoard Attributes of \"Lists Id Board\" to be updated.
     * @param {module:api/ListApi~updateListsIdBoardByIdListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateListsIdBoardByIdList(idList, key, token, listsIdBoard, callback) {
      let postBody = listsIdBoard;
      // verify the required parameter 'idList' is set
      if (idList === undefined || idList === null) {
        throw new Error("Missing the required parameter 'idList' when calling updateListsIdBoardByIdList");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateListsIdBoardByIdList");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateListsIdBoardByIdList");
      }
      // verify the required parameter 'listsIdBoard' is set
      if (listsIdBoard === undefined || listsIdBoard === null) {
        throw new Error("Missing the required parameter 'listsIdBoard' when calling updateListsIdBoardByIdList");
      }

      let pathParams = {
        'idList': idList
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lists/{idList}/idBoard', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateListsNameByIdList operation.
     * @callback module:api/ListApi~updateListsNameByIdListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateListsNameByIdList()
     * @param {String} idList idList
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/ListsName} listsName Attributes of \"Lists Name\" to be updated.
     * @param {module:api/ListApi~updateListsNameByIdListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateListsNameByIdList(idList, key, token, listsName, callback) {
      let postBody = listsName;
      // verify the required parameter 'idList' is set
      if (idList === undefined || idList === null) {
        throw new Error("Missing the required parameter 'idList' when calling updateListsNameByIdList");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateListsNameByIdList");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateListsNameByIdList");
      }
      // verify the required parameter 'listsName' is set
      if (listsName === undefined || listsName === null) {
        throw new Error("Missing the required parameter 'listsName' when calling updateListsNameByIdList");
      }

      let pathParams = {
        'idList': idList
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lists/{idList}/name', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateListsPosByIdList operation.
     * @callback module:api/ListApi~updateListsPosByIdListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateListsPosByIdList()
     * @param {String} idList idList
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/ListsPos} listsPos Attributes of \"Lists Pos\" to be updated.
     * @param {module:api/ListApi~updateListsPosByIdListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateListsPosByIdList(idList, key, token, listsPos, callback) {
      let postBody = listsPos;
      // verify the required parameter 'idList' is set
      if (idList === undefined || idList === null) {
        throw new Error("Missing the required parameter 'idList' when calling updateListsPosByIdList");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateListsPosByIdList");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateListsPosByIdList");
      }
      // verify the required parameter 'listsPos' is set
      if (listsPos === undefined || listsPos === null) {
        throw new Error("Missing the required parameter 'listsPos' when calling updateListsPosByIdList");
      }

      let pathParams = {
        'idList': idList
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lists/{idList}/pos', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateListsSubscribedByIdList operation.
     * @callback module:api/ListApi~updateListsSubscribedByIdListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateListsSubscribedByIdList()
     * @param {String} idList idList
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/ListsSubscribed} listsSubscribed Attributes of \"Lists Subscribed\" to be updated.
     * @param {module:api/ListApi~updateListsSubscribedByIdListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateListsSubscribedByIdList(idList, key, token, listsSubscribed, callback) {
      let postBody = listsSubscribed;
      // verify the required parameter 'idList' is set
      if (idList === undefined || idList === null) {
        throw new Error("Missing the required parameter 'idList' when calling updateListsSubscribedByIdList");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateListsSubscribedByIdList");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateListsSubscribedByIdList");
      }
      // verify the required parameter 'listsSubscribed' is set
      if (listsSubscribed === undefined || listsSubscribed === null) {
        throw new Error("Missing the required parameter 'listsSubscribed' when calling updateListsSubscribedByIdList");
      }

      let pathParams = {
        'idList': idList
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lists/{idList}/subscribed', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
