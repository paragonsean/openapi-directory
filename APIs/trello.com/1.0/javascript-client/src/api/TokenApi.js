/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TokensWebhooks from '../model/TokensWebhooks';

/**
* Token service.
* @module api/TokenApi
* @version 1.0
*/
export default class TokenApi {

    /**
    * Constructs a new TokenApi. 
    * @alias module:api/TokenApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addTokensWebhooksByToken operation.
     * @callback module:api/TokenApi~addTokensWebhooksByTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addTokensWebhooksByToken()
     * @param {String} token token
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token2 <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/TokensWebhooks} tokensWebhooks Attributes of \"Tokens Webhooks\" to be added.
     * @param {module:api/TokenApi~addTokensWebhooksByTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addTokensWebhooksByToken(token, key, token2, tokensWebhooks, callback) {
      let postBody = tokensWebhooks;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addTokensWebhooksByToken");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addTokensWebhooksByToken");
      }
      // verify the required parameter 'token2' is set
      if (token2 === undefined || token2 === null) {
        throw new Error("Missing the required parameter 'token2' when calling addTokensWebhooksByToken");
      }
      // verify the required parameter 'tokensWebhooks' is set
      if (tokensWebhooks === undefined || tokensWebhooks === null) {
        throw new Error("Missing the required parameter 'tokensWebhooks' when calling addTokensWebhooksByToken");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
        'key': key,
        'token': token2
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tokens/{token}/webhooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTokensByToken operation.
     * @callback module:api/TokenApi~deleteTokensByTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteTokensByToken()
     * @param {String} token token
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token2 <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/TokenApi~deleteTokensByTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTokensByToken(token, key, token2, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteTokensByToken");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteTokensByToken");
      }
      // verify the required parameter 'token2' is set
      if (token2 === undefined || token2 === null) {
        throw new Error("Missing the required parameter 'token2' when calling deleteTokensByToken");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
        'key': key,
        'token': token2
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tokens/{token}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTokensWebhooksByTokenByIdWebhook operation.
     * @callback module:api/TokenApi~deleteTokensWebhooksByTokenByIdWebhookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteTokensWebhooksByTokenByIdWebhook()
     * @param {String} token token
     * @param {String} idWebhook idWebhook
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token2 <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/TokenApi~deleteTokensWebhooksByTokenByIdWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTokensWebhooksByTokenByIdWebhook(token, idWebhook, key, token2, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteTokensWebhooksByTokenByIdWebhook");
      }
      // verify the required parameter 'idWebhook' is set
      if (idWebhook === undefined || idWebhook === null) {
        throw new Error("Missing the required parameter 'idWebhook' when calling deleteTokensWebhooksByTokenByIdWebhook");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteTokensWebhooksByTokenByIdWebhook");
      }
      // verify the required parameter 'token2' is set
      if (token2 === undefined || token2 === null) {
        throw new Error("Missing the required parameter 'token2' when calling deleteTokensWebhooksByTokenByIdWebhook");
      }

      let pathParams = {
        'token': token,
        'idWebhook': idWebhook
      };
      let queryParams = {
        'key': key,
        'token': token2
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tokens/{token}/webhooks/{idWebhook}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTokensByToken operation.
     * @callback module:api/TokenApi~getTokensByTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getTokensByToken()
     * @param {String} token token
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token2 <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: dateCreated, dateExpires, idMember, identifier or permissions
     * @param {String} [webhooks]  true or false
     * @param {module:api/TokenApi~getTokensByTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTokensByToken(token, key, token2, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getTokensByToken");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getTokensByToken");
      }
      // verify the required parameter 'token2' is set
      if (token2 === undefined || token2 === null) {
        throw new Error("Missing the required parameter 'token2' when calling getTokensByToken");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
        'fields': opts['fields'],
        'webhooks': opts['webhooks'],
        'key': key,
        'token': token2
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tokens/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTokensByTokenByField operation.
     * @callback module:api/TokenApi~getTokensByTokenByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getTokensByTokenByField()
     * @param {String} token token
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token2 <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/TokenApi~getTokensByTokenByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTokensByTokenByField(token, field, key, token2, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getTokensByTokenByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getTokensByTokenByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getTokensByTokenByField");
      }
      // verify the required parameter 'token2' is set
      if (token2 === undefined || token2 === null) {
        throw new Error("Missing the required parameter 'token2' when calling getTokensByTokenByField");
      }

      let pathParams = {
        'token': token,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token2
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tokens/{token}/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTokensMemberByToken operation.
     * @callback module:api/TokenApi~getTokensMemberByTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getTokensMemberByToken()
     * @param {String} token token
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token2 <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
     * @param {module:api/TokenApi~getTokensMemberByTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTokensMemberByToken(token, key, token2, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getTokensMemberByToken");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getTokensMemberByToken");
      }
      // verify the required parameter 'token2' is set
      if (token2 === undefined || token2 === null) {
        throw new Error("Missing the required parameter 'token2' when calling getTokensMemberByToken");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token2
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tokens/{token}/member', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTokensMemberByTokenByField operation.
     * @callback module:api/TokenApi~getTokensMemberByTokenByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getTokensMemberByTokenByField()
     * @param {String} token token
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token2 <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/TokenApi~getTokensMemberByTokenByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTokensMemberByTokenByField(token, field, key, token2, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getTokensMemberByTokenByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getTokensMemberByTokenByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getTokensMemberByTokenByField");
      }
      // verify the required parameter 'token2' is set
      if (token2 === undefined || token2 === null) {
        throw new Error("Missing the required parameter 'token2' when calling getTokensMemberByTokenByField");
      }

      let pathParams = {
        'token': token,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token2
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tokens/{token}/member/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTokensWebhooksByToken operation.
     * @callback module:api/TokenApi~getTokensWebhooksByTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getTokensWebhooksByToken()
     * @param {String} token token
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token2 <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/TokenApi~getTokensWebhooksByTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTokensWebhooksByToken(token, key, token2, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getTokensWebhooksByToken");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getTokensWebhooksByToken");
      }
      // verify the required parameter 'token2' is set
      if (token2 === undefined || token2 === null) {
        throw new Error("Missing the required parameter 'token2' when calling getTokensWebhooksByToken");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
        'key': key,
        'token': token2
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tokens/{token}/webhooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTokensWebhooksByTokenByIdWebhook operation.
     * @callback module:api/TokenApi~getTokensWebhooksByTokenByIdWebhookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getTokensWebhooksByTokenByIdWebhook()
     * @param {String} token token
     * @param {String} idWebhook idWebhook
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token2 <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/TokenApi~getTokensWebhooksByTokenByIdWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTokensWebhooksByTokenByIdWebhook(token, idWebhook, key, token2, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getTokensWebhooksByTokenByIdWebhook");
      }
      // verify the required parameter 'idWebhook' is set
      if (idWebhook === undefined || idWebhook === null) {
        throw new Error("Missing the required parameter 'idWebhook' when calling getTokensWebhooksByTokenByIdWebhook");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getTokensWebhooksByTokenByIdWebhook");
      }
      // verify the required parameter 'token2' is set
      if (token2 === undefined || token2 === null) {
        throw new Error("Missing the required parameter 'token2' when calling getTokensWebhooksByTokenByIdWebhook");
      }

      let pathParams = {
        'token': token,
        'idWebhook': idWebhook
      };
      let queryParams = {
        'key': key,
        'token': token2
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tokens/{token}/webhooks/{idWebhook}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTokensWebhooksByToken operation.
     * @callback module:api/TokenApi~updateTokensWebhooksByTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateTokensWebhooksByToken()
     * @param {String} token token
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token2 <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/TokensWebhooks} tokensWebhooks Attributes of \"Tokens Webhooks\" to be updated.
     * @param {module:api/TokenApi~updateTokensWebhooksByTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateTokensWebhooksByToken(token, key, token2, tokensWebhooks, callback) {
      let postBody = tokensWebhooks;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateTokensWebhooksByToken");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateTokensWebhooksByToken");
      }
      // verify the required parameter 'token2' is set
      if (token2 === undefined || token2 === null) {
        throw new Error("Missing the required parameter 'token2' when calling updateTokensWebhooksByToken");
      }
      // verify the required parameter 'tokensWebhooks' is set
      if (tokensWebhooks === undefined || tokensWebhooks === null) {
        throw new Error("Missing the required parameter 'tokensWebhooks' when calling updateTokensWebhooksByToken");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
        'key': key,
        'token': token2
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tokens/{token}/webhooks', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
