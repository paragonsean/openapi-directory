/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Sessions from '../model/Sessions';
import SessionsStatus from '../model/SessionsStatus';

/**
* Session service.
* @module api/SessionApi
* @version 1.0
*/
export default class SessionApi {

    /**
    * Constructs a new SessionApi. 
    * @alias module:api/SessionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addSessions operation.
     * @callback module:api/SessionApi~addSessionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addSessions()
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/Sessions} sessions Attributes of \"Sessions\" to be added.
     * @param {module:api/SessionApi~addSessionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addSessions(key, token, sessions, callback) {
      let postBody = sessions;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addSessions");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addSessions");
      }
      // verify the required parameter 'sessions' is set
      if (sessions === undefined || sessions === null) {
        throw new Error("Missing the required parameter 'sessions' when calling addSessions");
      }

      let pathParams = {
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSessionsSocket operation.
     * @callback module:api/SessionApi~getSessionsSocketCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSessionsSocket()
     * This is the route for WebSocket requests.  See the socket API reference for a description of WebSocket usage.
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/SessionApi~getSessionsSocketCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSessionsSocket(key, token, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getSessionsSocket");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getSessionsSocket");
      }

      let pathParams = {
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessions/socket', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSessionsByIdSession operation.
     * @callback module:api/SessionApi~updateSessionsByIdSessionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateSessionsByIdSession()
     * @param {String} idSession idSession
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/Sessions} sessions Attributes of \"Sessions\" to be updated.
     * @param {module:api/SessionApi~updateSessionsByIdSessionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateSessionsByIdSession(idSession, key, token, sessions, callback) {
      let postBody = sessions;
      // verify the required parameter 'idSession' is set
      if (idSession === undefined || idSession === null) {
        throw new Error("Missing the required parameter 'idSession' when calling updateSessionsByIdSession");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateSessionsByIdSession");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateSessionsByIdSession");
      }
      // verify the required parameter 'sessions' is set
      if (sessions === undefined || sessions === null) {
        throw new Error("Missing the required parameter 'sessions' when calling updateSessionsByIdSession");
      }

      let pathParams = {
        'idSession': idSession
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessions/{idSession}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSessionsStatusByIdSession operation.
     * @callback module:api/SessionApi~updateSessionsStatusByIdSessionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateSessionsStatusByIdSession()
     * @param {String} idSession idSession
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/SessionsStatus} sessionsStatus Attributes of \"Sessions Status\" to be updated.
     * @param {module:api/SessionApi~updateSessionsStatusByIdSessionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateSessionsStatusByIdSession(idSession, key, token, sessionsStatus, callback) {
      let postBody = sessionsStatus;
      // verify the required parameter 'idSession' is set
      if (idSession === undefined || idSession === null) {
        throw new Error("Missing the required parameter 'idSession' when calling updateSessionsStatusByIdSession");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateSessionsStatusByIdSession");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateSessionsStatusByIdSession");
      }
      // verify the required parameter 'sessionsStatus' is set
      if (sessionsStatus === undefined || sessionsStatus === null) {
        throw new Error("Missing the required parameter 'sessionsStatus' when calling updateSessionsStatusByIdSession");
      }

      let pathParams = {
        'idSession': idSession
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessions/{idSession}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
