/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Notifications from '../model/Notifications';
import NotificationsUnread from '../model/NotificationsUnread';

/**
* Notification service.
* @module api/NotificationApi
* @version 1.0
*/
export default class NotificationApi {

    /**
    * Constructs a new NotificationApi. 
    * @alias module:api/NotificationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addNotificationsAllRead operation.
     * @callback module:api/NotificationApi~addNotificationsAllReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addNotificationsAllRead()
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/NotificationApi~addNotificationsAllReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addNotificationsAllRead(key, token, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addNotificationsAllRead");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addNotificationsAllRead");
      }

      let pathParams = {
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/all/read', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationsBoardByIdNotification operation.
     * @callback module:api/NotificationApi~getNotificationsBoardByIdNotificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getNotificationsBoardByIdNotification()
     * @param {String} idNotification idNotification
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
     * @param {module:api/NotificationApi~getNotificationsBoardByIdNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNotificationsBoardByIdNotification(idNotification, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idNotification' is set
      if (idNotification === undefined || idNotification === null) {
        throw new Error("Missing the required parameter 'idNotification' when calling getNotificationsBoardByIdNotification");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getNotificationsBoardByIdNotification");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getNotificationsBoardByIdNotification");
      }

      let pathParams = {
        'idNotification': idNotification
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/{idNotification}/board', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationsBoardByIdNotificationByField operation.
     * @callback module:api/NotificationApi~getNotificationsBoardByIdNotificationByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getNotificationsBoardByIdNotificationByField()
     * @param {String} idNotification idNotification
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/NotificationApi~getNotificationsBoardByIdNotificationByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNotificationsBoardByIdNotificationByField(idNotification, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idNotification' is set
      if (idNotification === undefined || idNotification === null) {
        throw new Error("Missing the required parameter 'idNotification' when calling getNotificationsBoardByIdNotificationByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getNotificationsBoardByIdNotificationByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getNotificationsBoardByIdNotificationByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getNotificationsBoardByIdNotificationByField");
      }

      let pathParams = {
        'idNotification': idNotification,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/{idNotification}/board/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationsByIdNotification operation.
     * @callback module:api/NotificationApi~getNotificationsByIdNotificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getNotificationsByIdNotification()
     * @param {String} idNotification idNotification
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [display]  true or false
     * @param {String} [entities]  true or false
     * @param {String} [fields = 'all')] all or a comma-separated list of: data, date, idMemberCreator, type or unread
     * @param {String} [memberCreator]  true or false
     * @param {String} [memberCreatorFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [board]  true or false
     * @param {String} [boardFields = 'name')] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
     * @param {String} [list]  true or false
     * @param {String} [card]  true or false
     * @param {String} [cardFields = 'name')] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
     * @param {String} [organization]  true or false
     * @param {String} [organizationFields = 'displayName')] all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
     * @param {String} [member]  true or false
     * @param {String} [memberFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {module:api/NotificationApi~getNotificationsByIdNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNotificationsByIdNotification(idNotification, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idNotification' is set
      if (idNotification === undefined || idNotification === null) {
        throw new Error("Missing the required parameter 'idNotification' when calling getNotificationsByIdNotification");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getNotificationsByIdNotification");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getNotificationsByIdNotification");
      }

      let pathParams = {
        'idNotification': idNotification
      };
      let queryParams = {
        'display': opts['display'],
        'entities': opts['entities'],
        'fields': opts['fields'],
        'memberCreator': opts['memberCreator'],
        'memberCreator_fields': opts['memberCreatorFields'],
        'board': opts['board'],
        'board_fields': opts['boardFields'],
        'list': opts['list'],
        'card': opts['card'],
        'card_fields': opts['cardFields'],
        'organization': opts['organization'],
        'organization_fields': opts['organizationFields'],
        'member': opts['member'],
        'member_fields': opts['memberFields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/{idNotification}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationsByIdNotificationByField operation.
     * @callback module:api/NotificationApi~getNotificationsByIdNotificationByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getNotificationsByIdNotificationByField()
     * @param {String} idNotification idNotification
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/NotificationApi~getNotificationsByIdNotificationByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNotificationsByIdNotificationByField(idNotification, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idNotification' is set
      if (idNotification === undefined || idNotification === null) {
        throw new Error("Missing the required parameter 'idNotification' when calling getNotificationsByIdNotificationByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getNotificationsByIdNotificationByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getNotificationsByIdNotificationByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getNotificationsByIdNotificationByField");
      }

      let pathParams = {
        'idNotification': idNotification,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/{idNotification}/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationsCardByIdNotification operation.
     * @callback module:api/NotificationApi~getNotificationsCardByIdNotificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getNotificationsCardByIdNotification()
     * @param {String} idNotification idNotification
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
     * @param {module:api/NotificationApi~getNotificationsCardByIdNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNotificationsCardByIdNotification(idNotification, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idNotification' is set
      if (idNotification === undefined || idNotification === null) {
        throw new Error("Missing the required parameter 'idNotification' when calling getNotificationsCardByIdNotification");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getNotificationsCardByIdNotification");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getNotificationsCardByIdNotification");
      }

      let pathParams = {
        'idNotification': idNotification
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/{idNotification}/card', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationsCardByIdNotificationByField operation.
     * @callback module:api/NotificationApi~getNotificationsCardByIdNotificationByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getNotificationsCardByIdNotificationByField()
     * @param {String} idNotification idNotification
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/NotificationApi~getNotificationsCardByIdNotificationByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNotificationsCardByIdNotificationByField(idNotification, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idNotification' is set
      if (idNotification === undefined || idNotification === null) {
        throw new Error("Missing the required parameter 'idNotification' when calling getNotificationsCardByIdNotificationByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getNotificationsCardByIdNotificationByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getNotificationsCardByIdNotificationByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getNotificationsCardByIdNotificationByField");
      }

      let pathParams = {
        'idNotification': idNotification,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/{idNotification}/card/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationsDisplayByIdNotification operation.
     * @callback module:api/NotificationApi~getNotificationsDisplayByIdNotificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getNotificationsDisplayByIdNotification()
     * @param {String} idNotification idNotification
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/NotificationApi~getNotificationsDisplayByIdNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNotificationsDisplayByIdNotification(idNotification, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idNotification' is set
      if (idNotification === undefined || idNotification === null) {
        throw new Error("Missing the required parameter 'idNotification' when calling getNotificationsDisplayByIdNotification");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getNotificationsDisplayByIdNotification");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getNotificationsDisplayByIdNotification");
      }

      let pathParams = {
        'idNotification': idNotification
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/{idNotification}/display', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationsEntitiesByIdNotification operation.
     * @callback module:api/NotificationApi~getNotificationsEntitiesByIdNotificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getNotificationsEntitiesByIdNotification()
     * @param {String} idNotification idNotification
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/NotificationApi~getNotificationsEntitiesByIdNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNotificationsEntitiesByIdNotification(idNotification, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idNotification' is set
      if (idNotification === undefined || idNotification === null) {
        throw new Error("Missing the required parameter 'idNotification' when calling getNotificationsEntitiesByIdNotification");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getNotificationsEntitiesByIdNotification");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getNotificationsEntitiesByIdNotification");
      }

      let pathParams = {
        'idNotification': idNotification
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/{idNotification}/entities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationsListByIdNotification operation.
     * @callback module:api/NotificationApi~getNotificationsListByIdNotificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getNotificationsListByIdNotification()
     * @param {String} idNotification idNotification
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: closed, idBoard, name, pos or subscribed
     * @param {module:api/NotificationApi~getNotificationsListByIdNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNotificationsListByIdNotification(idNotification, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idNotification' is set
      if (idNotification === undefined || idNotification === null) {
        throw new Error("Missing the required parameter 'idNotification' when calling getNotificationsListByIdNotification");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getNotificationsListByIdNotification");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getNotificationsListByIdNotification");
      }

      let pathParams = {
        'idNotification': idNotification
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/{idNotification}/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationsListByIdNotificationByField operation.
     * @callback module:api/NotificationApi~getNotificationsListByIdNotificationByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getNotificationsListByIdNotificationByField()
     * @param {String} idNotification idNotification
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/NotificationApi~getNotificationsListByIdNotificationByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNotificationsListByIdNotificationByField(idNotification, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idNotification' is set
      if (idNotification === undefined || idNotification === null) {
        throw new Error("Missing the required parameter 'idNotification' when calling getNotificationsListByIdNotificationByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getNotificationsListByIdNotificationByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getNotificationsListByIdNotificationByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getNotificationsListByIdNotificationByField");
      }

      let pathParams = {
        'idNotification': idNotification,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/{idNotification}/list/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationsMemberByIdNotification operation.
     * @callback module:api/NotificationApi~getNotificationsMemberByIdNotificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getNotificationsMemberByIdNotification()
     * @param {String} idNotification idNotification
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
     * @param {module:api/NotificationApi~getNotificationsMemberByIdNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNotificationsMemberByIdNotification(idNotification, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idNotification' is set
      if (idNotification === undefined || idNotification === null) {
        throw new Error("Missing the required parameter 'idNotification' when calling getNotificationsMemberByIdNotification");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getNotificationsMemberByIdNotification");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getNotificationsMemberByIdNotification");
      }

      let pathParams = {
        'idNotification': idNotification
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/{idNotification}/member', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationsMemberByIdNotificationByField operation.
     * @callback module:api/NotificationApi~getNotificationsMemberByIdNotificationByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getNotificationsMemberByIdNotificationByField()
     * @param {String} idNotification idNotification
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/NotificationApi~getNotificationsMemberByIdNotificationByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNotificationsMemberByIdNotificationByField(idNotification, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idNotification' is set
      if (idNotification === undefined || idNotification === null) {
        throw new Error("Missing the required parameter 'idNotification' when calling getNotificationsMemberByIdNotificationByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getNotificationsMemberByIdNotificationByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getNotificationsMemberByIdNotificationByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getNotificationsMemberByIdNotificationByField");
      }

      let pathParams = {
        'idNotification': idNotification,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/{idNotification}/member/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationsMemberCreatorByIdNotification operation.
     * @callback module:api/NotificationApi~getNotificationsMemberCreatorByIdNotificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getNotificationsMemberCreatorByIdNotification()
     * @param {String} idNotification idNotification
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
     * @param {module:api/NotificationApi~getNotificationsMemberCreatorByIdNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNotificationsMemberCreatorByIdNotification(idNotification, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idNotification' is set
      if (idNotification === undefined || idNotification === null) {
        throw new Error("Missing the required parameter 'idNotification' when calling getNotificationsMemberCreatorByIdNotification");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getNotificationsMemberCreatorByIdNotification");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getNotificationsMemberCreatorByIdNotification");
      }

      let pathParams = {
        'idNotification': idNotification
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/{idNotification}/memberCreator', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationsMemberCreatorByIdNotificationByField operation.
     * @callback module:api/NotificationApi~getNotificationsMemberCreatorByIdNotificationByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getNotificationsMemberCreatorByIdNotificationByField()
     * @param {String} idNotification idNotification
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/NotificationApi~getNotificationsMemberCreatorByIdNotificationByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNotificationsMemberCreatorByIdNotificationByField(idNotification, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idNotification' is set
      if (idNotification === undefined || idNotification === null) {
        throw new Error("Missing the required parameter 'idNotification' when calling getNotificationsMemberCreatorByIdNotificationByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getNotificationsMemberCreatorByIdNotificationByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getNotificationsMemberCreatorByIdNotificationByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getNotificationsMemberCreatorByIdNotificationByField");
      }

      let pathParams = {
        'idNotification': idNotification,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/{idNotification}/memberCreator/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationsOrganizationByIdNotification operation.
     * @callback module:api/NotificationApi~getNotificationsOrganizationByIdNotificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getNotificationsOrganizationByIdNotification()
     * @param {String} idNotification idNotification
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
     * @param {module:api/NotificationApi~getNotificationsOrganizationByIdNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNotificationsOrganizationByIdNotification(idNotification, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idNotification' is set
      if (idNotification === undefined || idNotification === null) {
        throw new Error("Missing the required parameter 'idNotification' when calling getNotificationsOrganizationByIdNotification");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getNotificationsOrganizationByIdNotification");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getNotificationsOrganizationByIdNotification");
      }

      let pathParams = {
        'idNotification': idNotification
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/{idNotification}/organization', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationsOrganizationByIdNotificationByField operation.
     * @callback module:api/NotificationApi~getNotificationsOrganizationByIdNotificationByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getNotificationsOrganizationByIdNotificationByField()
     * @param {String} idNotification idNotification
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/NotificationApi~getNotificationsOrganizationByIdNotificationByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNotificationsOrganizationByIdNotificationByField(idNotification, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idNotification' is set
      if (idNotification === undefined || idNotification === null) {
        throw new Error("Missing the required parameter 'idNotification' when calling getNotificationsOrganizationByIdNotificationByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getNotificationsOrganizationByIdNotificationByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getNotificationsOrganizationByIdNotificationByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getNotificationsOrganizationByIdNotificationByField");
      }

      let pathParams = {
        'idNotification': idNotification,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/{idNotification}/organization/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNotificationsByIdNotification operation.
     * @callback module:api/NotificationApi~updateNotificationsByIdNotificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateNotificationsByIdNotification()
     * @param {String} idNotification idNotification
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/Notifications} notifications Attributes of \"Notifications\" to be updated.
     * @param {module:api/NotificationApi~updateNotificationsByIdNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateNotificationsByIdNotification(idNotification, key, token, notifications, callback) {
      let postBody = notifications;
      // verify the required parameter 'idNotification' is set
      if (idNotification === undefined || idNotification === null) {
        throw new Error("Missing the required parameter 'idNotification' when calling updateNotificationsByIdNotification");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateNotificationsByIdNotification");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateNotificationsByIdNotification");
      }
      // verify the required parameter 'notifications' is set
      if (notifications === undefined || notifications === null) {
        throw new Error("Missing the required parameter 'notifications' when calling updateNotificationsByIdNotification");
      }

      let pathParams = {
        'idNotification': idNotification
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/{idNotification}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNotificationsUnreadByIdNotification operation.
     * @callback module:api/NotificationApi~updateNotificationsUnreadByIdNotificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateNotificationsUnreadByIdNotification()
     * @param {String} idNotification idNotification
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/NotificationsUnread} notificationsUnread Attributes of \"Notifications Unread\" to be updated.
     * @param {module:api/NotificationApi~updateNotificationsUnreadByIdNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateNotificationsUnreadByIdNotification(idNotification, key, token, notificationsUnread, callback) {
      let postBody = notificationsUnread;
      // verify the required parameter 'idNotification' is set
      if (idNotification === undefined || idNotification === null) {
        throw new Error("Missing the required parameter 'idNotification' when calling updateNotificationsUnreadByIdNotification");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateNotificationsUnreadByIdNotification");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateNotificationsUnreadByIdNotification");
      }
      // verify the required parameter 'notificationsUnread' is set
      if (notificationsUnread === undefined || notificationsUnread === null) {
        throw new Error("Missing the required parameter 'notificationsUnread' when calling updateNotificationsUnreadByIdNotification");
      }

      let pathParams = {
        'idNotification': idNotification
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/{idNotification}/unread', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
