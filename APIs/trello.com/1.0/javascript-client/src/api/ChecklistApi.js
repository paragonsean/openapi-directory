/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Checklists from '../model/Checklists';
import ChecklistsCheckItems from '../model/ChecklistsCheckItems';
import ChecklistsIdCard from '../model/ChecklistsIdCard';
import ChecklistsName from '../model/ChecklistsName';
import ChecklistsPos from '../model/ChecklistsPos';

/**
* Checklist service.
* @module api/ChecklistApi
* @version 1.0
*/
export default class ChecklistApi {

    /**
    * Constructs a new ChecklistApi. 
    * @alias module:api/ChecklistApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addChecklists operation.
     * @callback module:api/ChecklistApi~addChecklistsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addChecklists()
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/Checklists} checklists Attributes of \"Checklists\" to be added.
     * @param {module:api/ChecklistApi~addChecklistsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addChecklists(key, token, checklists, callback) {
      let postBody = checklists;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addChecklists");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addChecklists");
      }
      // verify the required parameter 'checklists' is set
      if (checklists === undefined || checklists === null) {
        throw new Error("Missing the required parameter 'checklists' when calling addChecklists");
      }

      let pathParams = {
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/checklists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addChecklistsCheckItemsByIdChecklist operation.
     * @callback module:api/ChecklistApi~addChecklistsCheckItemsByIdChecklistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addChecklistsCheckItemsByIdChecklist()
     * @param {String} idChecklist idChecklist
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/ChecklistsCheckItems} checklistsCheckItems Attributes of \"Checklists Check Items\" to be added.
     * @param {module:api/ChecklistApi~addChecklistsCheckItemsByIdChecklistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addChecklistsCheckItemsByIdChecklist(idChecklist, key, token, checklistsCheckItems, callback) {
      let postBody = checklistsCheckItems;
      // verify the required parameter 'idChecklist' is set
      if (idChecklist === undefined || idChecklist === null) {
        throw new Error("Missing the required parameter 'idChecklist' when calling addChecklistsCheckItemsByIdChecklist");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addChecklistsCheckItemsByIdChecklist");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addChecklistsCheckItemsByIdChecklist");
      }
      // verify the required parameter 'checklistsCheckItems' is set
      if (checklistsCheckItems === undefined || checklistsCheckItems === null) {
        throw new Error("Missing the required parameter 'checklistsCheckItems' when calling addChecklistsCheckItemsByIdChecklist");
      }

      let pathParams = {
        'idChecklist': idChecklist
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/checklists/{idChecklist}/checkItems', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChecklistsByIdChecklist operation.
     * @callback module:api/ChecklistApi~deleteChecklistsByIdChecklistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteChecklistsByIdChecklist()
     * @param {String} idChecklist idChecklist
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/ChecklistApi~deleteChecklistsByIdChecklistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteChecklistsByIdChecklist(idChecklist, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idChecklist' is set
      if (idChecklist === undefined || idChecklist === null) {
        throw new Error("Missing the required parameter 'idChecklist' when calling deleteChecklistsByIdChecklist");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteChecklistsByIdChecklist");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteChecklistsByIdChecklist");
      }

      let pathParams = {
        'idChecklist': idChecklist
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/checklists/{idChecklist}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChecklistsCheckItemsByIdChecklistByIdCheckItem operation.
     * @callback module:api/ChecklistApi~deleteChecklistsCheckItemsByIdChecklistByIdCheckItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteChecklistsCheckItemsByIdChecklistByIdCheckItem()
     * @param {String} idChecklist idChecklist
     * @param {String} idCheckItem idCheckItem
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/ChecklistApi~deleteChecklistsCheckItemsByIdChecklistByIdCheckItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteChecklistsCheckItemsByIdChecklistByIdCheckItem(idChecklist, idCheckItem, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idChecklist' is set
      if (idChecklist === undefined || idChecklist === null) {
        throw new Error("Missing the required parameter 'idChecklist' when calling deleteChecklistsCheckItemsByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'idCheckItem' is set
      if (idCheckItem === undefined || idCheckItem === null) {
        throw new Error("Missing the required parameter 'idCheckItem' when calling deleteChecklistsCheckItemsByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteChecklistsCheckItemsByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteChecklistsCheckItemsByIdChecklistByIdCheckItem");
      }

      let pathParams = {
        'idChecklist': idChecklist,
        'idCheckItem': idCheckItem
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/checklists/{idChecklist}/checkItems/{idCheckItem}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChecklistsBoardByIdChecklist operation.
     * @callback module:api/ChecklistApi~getChecklistsBoardByIdChecklistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getChecklistsBoardByIdChecklist()
     * @param {String} idChecklist idChecklist
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
     * @param {module:api/ChecklistApi~getChecklistsBoardByIdChecklistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getChecklistsBoardByIdChecklist(idChecklist, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idChecklist' is set
      if (idChecklist === undefined || idChecklist === null) {
        throw new Error("Missing the required parameter 'idChecklist' when calling getChecklistsBoardByIdChecklist");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getChecklistsBoardByIdChecklist");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getChecklistsBoardByIdChecklist");
      }

      let pathParams = {
        'idChecklist': idChecklist
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/checklists/{idChecklist}/board', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChecklistsBoardByIdChecklistByField operation.
     * @callback module:api/ChecklistApi~getChecklistsBoardByIdChecklistByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getChecklistsBoardByIdChecklistByField()
     * @param {String} idChecklist idChecklist
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/ChecklistApi~getChecklistsBoardByIdChecklistByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getChecklistsBoardByIdChecklistByField(idChecklist, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idChecklist' is set
      if (idChecklist === undefined || idChecklist === null) {
        throw new Error("Missing the required parameter 'idChecklist' when calling getChecklistsBoardByIdChecklistByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getChecklistsBoardByIdChecklistByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getChecklistsBoardByIdChecklistByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getChecklistsBoardByIdChecklistByField");
      }

      let pathParams = {
        'idChecklist': idChecklist,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/checklists/{idChecklist}/board/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChecklistsByIdChecklist operation.
     * @callback module:api/ChecklistApi~getChecklistsByIdChecklistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getChecklistsByIdChecklist()
     * @param {String} idChecklist idChecklist
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [cards = 'none')] One of: all, closed, none, open or visible
     * @param {String} [cardFields = 'all')] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
     * @param {String} [checkItems = 'all')] One of: all or none
     * @param {String} [checkItemFields = 'name, nameData, pos and state')] all or a comma-separated list of: name, nameData, pos, state or type
     * @param {String} [fields = 'all')] all or a comma-separated list of: idBoard, idCard, name or pos
     * @param {module:api/ChecklistApi~getChecklistsByIdChecklistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getChecklistsByIdChecklist(idChecklist, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idChecklist' is set
      if (idChecklist === undefined || idChecklist === null) {
        throw new Error("Missing the required parameter 'idChecklist' when calling getChecklistsByIdChecklist");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getChecklistsByIdChecklist");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getChecklistsByIdChecklist");
      }

      let pathParams = {
        'idChecklist': idChecklist
      };
      let queryParams = {
        'cards': opts['cards'],
        'card_fields': opts['cardFields'],
        'checkItems': opts['checkItems'],
        'checkItem_fields': opts['checkItemFields'],
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/checklists/{idChecklist}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChecklistsByIdChecklistByField operation.
     * @callback module:api/ChecklistApi~getChecklistsByIdChecklistByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getChecklistsByIdChecklistByField()
     * @param {String} idChecklist idChecklist
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/ChecklistApi~getChecklistsByIdChecklistByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getChecklistsByIdChecklistByField(idChecklist, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idChecklist' is set
      if (idChecklist === undefined || idChecklist === null) {
        throw new Error("Missing the required parameter 'idChecklist' when calling getChecklistsByIdChecklistByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getChecklistsByIdChecklistByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getChecklistsByIdChecklistByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getChecklistsByIdChecklistByField");
      }

      let pathParams = {
        'idChecklist': idChecklist,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/checklists/{idChecklist}/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChecklistsCardsByIdChecklist operation.
     * @callback module:api/ChecklistApi~getChecklistsCardsByIdChecklistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getChecklistsCardsByIdChecklist()
     * @param {String} idChecklist idChecklist
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [actions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
     * @param {String} [attachments] A boolean value or &quot;cover&quot; for only card cover attachments
     * @param {String} [attachmentFields = 'all')] all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
     * @param {String} [stickers]  true or false
     * @param {String} [members]  true or false
     * @param {String} [memberFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [checkItemStates]  true or false
     * @param {String} [checklists = 'none')] One of: all or none
     * @param {String} [limit] a number from 1 to 1000
     * @param {String} [since] A date, or null
     * @param {String} [before] A date, or null
     * @param {String} [filter = 'open')] One of: all, closed, none or open
     * @param {String} [fields = 'all')] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
     * @param {module:api/ChecklistApi~getChecklistsCardsByIdChecklistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getChecklistsCardsByIdChecklist(idChecklist, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idChecklist' is set
      if (idChecklist === undefined || idChecklist === null) {
        throw new Error("Missing the required parameter 'idChecklist' when calling getChecklistsCardsByIdChecklist");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getChecklistsCardsByIdChecklist");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getChecklistsCardsByIdChecklist");
      }

      let pathParams = {
        'idChecklist': idChecklist
      };
      let queryParams = {
        'actions': opts['actions'],
        'attachments': opts['attachments'],
        'attachment_fields': opts['attachmentFields'],
        'stickers': opts['stickers'],
        'members': opts['members'],
        'member_fields': opts['memberFields'],
        'checkItemStates': opts['checkItemStates'],
        'checklists': opts['checklists'],
        'limit': opts['limit'],
        'since': opts['since'],
        'before': opts['before'],
        'filter': opts['filter'],
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/checklists/{idChecklist}/cards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChecklistsCardsByIdChecklistByFilter operation.
     * @callback module:api/ChecklistApi~getChecklistsCardsByIdChecklistByFilterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getChecklistsCardsByIdChecklistByFilter()
     * @param {String} idChecklist idChecklist
     * @param {String} filter filter
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/ChecklistApi~getChecklistsCardsByIdChecklistByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getChecklistsCardsByIdChecklistByFilter(idChecklist, filter, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idChecklist' is set
      if (idChecklist === undefined || idChecklist === null) {
        throw new Error("Missing the required parameter 'idChecklist' when calling getChecklistsCardsByIdChecklistByFilter");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getChecklistsCardsByIdChecklistByFilter");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getChecklistsCardsByIdChecklistByFilter");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getChecklistsCardsByIdChecklistByFilter");
      }

      let pathParams = {
        'idChecklist': idChecklist,
        'filter': filter
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/checklists/{idChecklist}/cards/{filter}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChecklistsCheckItemsByIdChecklist operation.
     * @callback module:api/ChecklistApi~getChecklistsCheckItemsByIdChecklistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getChecklistsCheckItemsByIdChecklist()
     * @param {String} idChecklist idChecklist
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [filter = 'all')] One of: all or none
     * @param {String} [fields = 'name, nameData, pos and state')] all or a comma-separated list of: name, nameData, pos, state or type
     * @param {module:api/ChecklistApi~getChecklistsCheckItemsByIdChecklistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getChecklistsCheckItemsByIdChecklist(idChecklist, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idChecklist' is set
      if (idChecklist === undefined || idChecklist === null) {
        throw new Error("Missing the required parameter 'idChecklist' when calling getChecklistsCheckItemsByIdChecklist");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getChecklistsCheckItemsByIdChecklist");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getChecklistsCheckItemsByIdChecklist");
      }

      let pathParams = {
        'idChecklist': idChecklist
      };
      let queryParams = {
        'filter': opts['filter'],
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/checklists/{idChecklist}/checkItems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChecklistsCheckItemsByIdChecklistByIdCheckItem operation.
     * @callback module:api/ChecklistApi~getChecklistsCheckItemsByIdChecklistByIdCheckItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getChecklistsCheckItemsByIdChecklistByIdCheckItem()
     * @param {String} idChecklist idChecklist
     * @param {String} idCheckItem idCheckItem
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'name, nameData, pos and state')] all or a comma-separated list of: name, nameData, pos, state or type
     * @param {module:api/ChecklistApi~getChecklistsCheckItemsByIdChecklistByIdCheckItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getChecklistsCheckItemsByIdChecklistByIdCheckItem(idChecklist, idCheckItem, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idChecklist' is set
      if (idChecklist === undefined || idChecklist === null) {
        throw new Error("Missing the required parameter 'idChecklist' when calling getChecklistsCheckItemsByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'idCheckItem' is set
      if (idCheckItem === undefined || idCheckItem === null) {
        throw new Error("Missing the required parameter 'idCheckItem' when calling getChecklistsCheckItemsByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getChecklistsCheckItemsByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getChecklistsCheckItemsByIdChecklistByIdCheckItem");
      }

      let pathParams = {
        'idChecklist': idChecklist,
        'idCheckItem': idCheckItem
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/checklists/{idChecklist}/checkItems/{idCheckItem}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChecklistsByIdChecklist operation.
     * @callback module:api/ChecklistApi~updateChecklistsByIdChecklistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateChecklistsByIdChecklist()
     * @param {String} idChecklist idChecklist
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/Checklists} checklists Attributes of \"Checklists\" to be updated.
     * @param {module:api/ChecklistApi~updateChecklistsByIdChecklistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateChecklistsByIdChecklist(idChecklist, key, token, checklists, callback) {
      let postBody = checklists;
      // verify the required parameter 'idChecklist' is set
      if (idChecklist === undefined || idChecklist === null) {
        throw new Error("Missing the required parameter 'idChecklist' when calling updateChecklistsByIdChecklist");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateChecklistsByIdChecklist");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateChecklistsByIdChecklist");
      }
      // verify the required parameter 'checklists' is set
      if (checklists === undefined || checklists === null) {
        throw new Error("Missing the required parameter 'checklists' when calling updateChecklistsByIdChecklist");
      }

      let pathParams = {
        'idChecklist': idChecklist
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/checklists/{idChecklist}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChecklistsIdCardByIdChecklist operation.
     * @callback module:api/ChecklistApi~updateChecklistsIdCardByIdChecklistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateChecklistsIdCardByIdChecklist()
     * @param {String} idChecklist idChecklist
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/ChecklistsIdCard} checklistsIdCard Attributes of \"Checklists Id Card\" to be updated.
     * @param {module:api/ChecklistApi~updateChecklistsIdCardByIdChecklistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateChecklistsIdCardByIdChecklist(idChecklist, key, token, checklistsIdCard, callback) {
      let postBody = checklistsIdCard;
      // verify the required parameter 'idChecklist' is set
      if (idChecklist === undefined || idChecklist === null) {
        throw new Error("Missing the required parameter 'idChecklist' when calling updateChecklistsIdCardByIdChecklist");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateChecklistsIdCardByIdChecklist");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateChecklistsIdCardByIdChecklist");
      }
      // verify the required parameter 'checklistsIdCard' is set
      if (checklistsIdCard === undefined || checklistsIdCard === null) {
        throw new Error("Missing the required parameter 'checklistsIdCard' when calling updateChecklistsIdCardByIdChecklist");
      }

      let pathParams = {
        'idChecklist': idChecklist
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/checklists/{idChecklist}/idCard', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChecklistsNameByIdChecklist operation.
     * @callback module:api/ChecklistApi~updateChecklistsNameByIdChecklistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateChecklistsNameByIdChecklist()
     * @param {String} idChecklist idChecklist
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/ChecklistsName} checklistsName Attributes of \"Checklists Name\" to be updated.
     * @param {module:api/ChecklistApi~updateChecklistsNameByIdChecklistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateChecklistsNameByIdChecklist(idChecklist, key, token, checklistsName, callback) {
      let postBody = checklistsName;
      // verify the required parameter 'idChecklist' is set
      if (idChecklist === undefined || idChecklist === null) {
        throw new Error("Missing the required parameter 'idChecklist' when calling updateChecklistsNameByIdChecklist");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateChecklistsNameByIdChecklist");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateChecklistsNameByIdChecklist");
      }
      // verify the required parameter 'checklistsName' is set
      if (checklistsName === undefined || checklistsName === null) {
        throw new Error("Missing the required parameter 'checklistsName' when calling updateChecklistsNameByIdChecklist");
      }

      let pathParams = {
        'idChecklist': idChecklist
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/checklists/{idChecklist}/name', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChecklistsPosByIdChecklist operation.
     * @callback module:api/ChecklistApi~updateChecklistsPosByIdChecklistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateChecklistsPosByIdChecklist()
     * @param {String} idChecklist idChecklist
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/ChecklistsPos} checklistsPos Attributes of \"Checklists Pos\" to be updated.
     * @param {module:api/ChecklistApi~updateChecklistsPosByIdChecklistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateChecklistsPosByIdChecklist(idChecklist, key, token, checklistsPos, callback) {
      let postBody = checklistsPos;
      // verify the required parameter 'idChecklist' is set
      if (idChecklist === undefined || idChecklist === null) {
        throw new Error("Missing the required parameter 'idChecklist' when calling updateChecklistsPosByIdChecklist");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateChecklistsPosByIdChecklist");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateChecklistsPosByIdChecklist");
      }
      // verify the required parameter 'checklistsPos' is set
      if (checklistsPos === undefined || checklistsPos === null) {
        throw new Error("Missing the required parameter 'checklistsPos' when calling updateChecklistsPosByIdChecklist");
      }

      let pathParams = {
        'idChecklist': idChecklist
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/checklists/{idChecklist}/pos', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
