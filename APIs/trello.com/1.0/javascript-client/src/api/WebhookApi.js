/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Webhooks from '../model/Webhooks';
import WebhooksActive from '../model/WebhooksActive';
import WebhooksCallbackURL from '../model/WebhooksCallbackURL';
import WebhooksDescription from '../model/WebhooksDescription';
import WebhooksIdModel from '../model/WebhooksIdModel';

/**
* Webhook service.
* @module api/WebhookApi
* @version 1.0
*/
export default class WebhookApi {

    /**
    * Constructs a new WebhookApi. 
    * @alias module:api/WebhookApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addWebhooks operation.
     * @callback module:api/WebhookApi~addWebhooksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addWebhooks()
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/Webhooks} webhooks Attributes of \"Webhooks\" to be added.
     * @param {module:api/WebhookApi~addWebhooksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addWebhooks(key, token, webhooks, callback) {
      let postBody = webhooks;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addWebhooks");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addWebhooks");
      }
      // verify the required parameter 'webhooks' is set
      if (webhooks === undefined || webhooks === null) {
        throw new Error("Missing the required parameter 'webhooks' when calling addWebhooks");
      }

      let pathParams = {
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/webhooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWebhooksByIdWebhook operation.
     * @callback module:api/WebhookApi~deleteWebhooksByIdWebhookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteWebhooksByIdWebhook()
     * @param {String} idWebhook idWebhook
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/WebhookApi~deleteWebhooksByIdWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWebhooksByIdWebhook(idWebhook, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idWebhook' is set
      if (idWebhook === undefined || idWebhook === null) {
        throw new Error("Missing the required parameter 'idWebhook' when calling deleteWebhooksByIdWebhook");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteWebhooksByIdWebhook");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteWebhooksByIdWebhook");
      }

      let pathParams = {
        'idWebhook': idWebhook
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/webhooks/{idWebhook}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWebhooksByIdWebhook operation.
     * @callback module:api/WebhookApi~getWebhooksByIdWebhookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getWebhooksByIdWebhook()
     * @param {String} idWebhook idWebhook
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/WebhookApi~getWebhooksByIdWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getWebhooksByIdWebhook(idWebhook, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idWebhook' is set
      if (idWebhook === undefined || idWebhook === null) {
        throw new Error("Missing the required parameter 'idWebhook' when calling getWebhooksByIdWebhook");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getWebhooksByIdWebhook");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getWebhooksByIdWebhook");
      }

      let pathParams = {
        'idWebhook': idWebhook
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/webhooks/{idWebhook}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWebhooksByIdWebhookByField operation.
     * @callback module:api/WebhookApi~getWebhooksByIdWebhookByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getWebhooksByIdWebhookByField()
     * @param {String} idWebhook idWebhook
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/WebhookApi~getWebhooksByIdWebhookByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getWebhooksByIdWebhookByField(idWebhook, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idWebhook' is set
      if (idWebhook === undefined || idWebhook === null) {
        throw new Error("Missing the required parameter 'idWebhook' when calling getWebhooksByIdWebhookByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getWebhooksByIdWebhookByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getWebhooksByIdWebhookByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getWebhooksByIdWebhookByField");
      }

      let pathParams = {
        'idWebhook': idWebhook,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/webhooks/{idWebhook}/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWebhooks operation.
     * @callback module:api/WebhookApi~updateWebhooksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateWebhooks()
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/Webhooks} webhooks Attributes of \"Webhooks\" to be updated.
     * @param {module:api/WebhookApi~updateWebhooksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateWebhooks(key, token, webhooks, callback) {
      let postBody = webhooks;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateWebhooks");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateWebhooks");
      }
      // verify the required parameter 'webhooks' is set
      if (webhooks === undefined || webhooks === null) {
        throw new Error("Missing the required parameter 'webhooks' when calling updateWebhooks");
      }

      let pathParams = {
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/webhooks/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWebhooksActiveByIdWebhook operation.
     * @callback module:api/WebhookApi~updateWebhooksActiveByIdWebhookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateWebhooksActiveByIdWebhook()
     * @param {String} idWebhook idWebhook
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/WebhooksActive} webhooksActive Attributes of \"Webhooks Active\" to be updated.
     * @param {module:api/WebhookApi~updateWebhooksActiveByIdWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateWebhooksActiveByIdWebhook(idWebhook, key, token, webhooksActive, callback) {
      let postBody = webhooksActive;
      // verify the required parameter 'idWebhook' is set
      if (idWebhook === undefined || idWebhook === null) {
        throw new Error("Missing the required parameter 'idWebhook' when calling updateWebhooksActiveByIdWebhook");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateWebhooksActiveByIdWebhook");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateWebhooksActiveByIdWebhook");
      }
      // verify the required parameter 'webhooksActive' is set
      if (webhooksActive === undefined || webhooksActive === null) {
        throw new Error("Missing the required parameter 'webhooksActive' when calling updateWebhooksActiveByIdWebhook");
      }

      let pathParams = {
        'idWebhook': idWebhook
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/webhooks/{idWebhook}/active', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWebhooksByIdWebhook operation.
     * @callback module:api/WebhookApi~updateWebhooksByIdWebhookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateWebhooksByIdWebhook()
     * @param {String} idWebhook idWebhook
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/Webhooks} webhooks Attributes of \"Webhooks\" to be updated.
     * @param {module:api/WebhookApi~updateWebhooksByIdWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateWebhooksByIdWebhook(idWebhook, key, token, webhooks, callback) {
      let postBody = webhooks;
      // verify the required parameter 'idWebhook' is set
      if (idWebhook === undefined || idWebhook === null) {
        throw new Error("Missing the required parameter 'idWebhook' when calling updateWebhooksByIdWebhook");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateWebhooksByIdWebhook");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateWebhooksByIdWebhook");
      }
      // verify the required parameter 'webhooks' is set
      if (webhooks === undefined || webhooks === null) {
        throw new Error("Missing the required parameter 'webhooks' when calling updateWebhooksByIdWebhook");
      }

      let pathParams = {
        'idWebhook': idWebhook
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/webhooks/{idWebhook}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWebhooksCallbackURLByIdWebhook operation.
     * @callback module:api/WebhookApi~updateWebhooksCallbackURLByIdWebhookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateWebhooksCallbackURLByIdWebhook()
     * @param {String} idWebhook idWebhook
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/WebhooksCallbackURL} webhooksCallbackURL Attributes of \"Webhooks Callback Url\" to be updated.
     * @param {module:api/WebhookApi~updateWebhooksCallbackURLByIdWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateWebhooksCallbackURLByIdWebhook(idWebhook, key, token, webhooksCallbackURL, callback) {
      let postBody = webhooksCallbackURL;
      // verify the required parameter 'idWebhook' is set
      if (idWebhook === undefined || idWebhook === null) {
        throw new Error("Missing the required parameter 'idWebhook' when calling updateWebhooksCallbackURLByIdWebhook");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateWebhooksCallbackURLByIdWebhook");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateWebhooksCallbackURLByIdWebhook");
      }
      // verify the required parameter 'webhooksCallbackURL' is set
      if (webhooksCallbackURL === undefined || webhooksCallbackURL === null) {
        throw new Error("Missing the required parameter 'webhooksCallbackURL' when calling updateWebhooksCallbackURLByIdWebhook");
      }

      let pathParams = {
        'idWebhook': idWebhook
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/webhooks/{idWebhook}/callbackURL', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWebhooksDescriptionByIdWebhook operation.
     * @callback module:api/WebhookApi~updateWebhooksDescriptionByIdWebhookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateWebhooksDescriptionByIdWebhook()
     * @param {String} idWebhook idWebhook
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/WebhooksDescription} webhooksDescription Attributes of \"Webhooks Description\" to be updated.
     * @param {module:api/WebhookApi~updateWebhooksDescriptionByIdWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateWebhooksDescriptionByIdWebhook(idWebhook, key, token, webhooksDescription, callback) {
      let postBody = webhooksDescription;
      // verify the required parameter 'idWebhook' is set
      if (idWebhook === undefined || idWebhook === null) {
        throw new Error("Missing the required parameter 'idWebhook' when calling updateWebhooksDescriptionByIdWebhook");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateWebhooksDescriptionByIdWebhook");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateWebhooksDescriptionByIdWebhook");
      }
      // verify the required parameter 'webhooksDescription' is set
      if (webhooksDescription === undefined || webhooksDescription === null) {
        throw new Error("Missing the required parameter 'webhooksDescription' when calling updateWebhooksDescriptionByIdWebhook");
      }

      let pathParams = {
        'idWebhook': idWebhook
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/webhooks/{idWebhook}/description', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWebhooksIdModelByIdWebhook operation.
     * @callback module:api/WebhookApi~updateWebhooksIdModelByIdWebhookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateWebhooksIdModelByIdWebhook()
     * @param {String} idWebhook idWebhook
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/WebhooksIdModel} webhooksIdModel Attributes of \"Webhooks Id Model\" to be updated.
     * @param {module:api/WebhookApi~updateWebhooksIdModelByIdWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateWebhooksIdModelByIdWebhook(idWebhook, key, token, webhooksIdModel, callback) {
      let postBody = webhooksIdModel;
      // verify the required parameter 'idWebhook' is set
      if (idWebhook === undefined || idWebhook === null) {
        throw new Error("Missing the required parameter 'idWebhook' when calling updateWebhooksIdModelByIdWebhook");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateWebhooksIdModelByIdWebhook");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateWebhooksIdModelByIdWebhook");
      }
      // verify the required parameter 'webhooksIdModel' is set
      if (webhooksIdModel === undefined || webhooksIdModel === null) {
        throw new Error("Missing the required parameter 'webhooksIdModel' when calling updateWebhooksIdModelByIdWebhook");
      }

      let pathParams = {
        'idWebhook': idWebhook
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/webhooks/{idWebhook}/idModel', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
