/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActionsComments from '../model/ActionsComments';
import Cards from '../model/Cards';
import CardsActionsComments from '../model/CardsActionsComments';
import CardsAttachments from '../model/CardsAttachments';
import CardsChecklistCheckItem from '../model/CardsChecklistCheckItem';
import CardsChecklistCheckItemName from '../model/CardsChecklistCheckItemName';
import CardsChecklistCheckItemPos from '../model/CardsChecklistCheckItemPos';
import CardsChecklistCheckItemState from '../model/CardsChecklistCheckItemState';
import CardsChecklistIdChecklistCurrentCheckItem from '../model/CardsChecklistIdChecklistCurrentCheckItem';
import CardsChecklists from '../model/CardsChecklists';
import CardsClosed from '../model/CardsClosed';
import CardsDesc from '../model/CardsDesc';
import CardsDue from '../model/CardsDue';
import CardsIdAttachmentCover from '../model/CardsIdAttachmentCover';
import CardsIdBoard from '../model/CardsIdBoard';
import CardsIdLabels from '../model/CardsIdLabels';
import CardsIdList from '../model/CardsIdList';
import CardsIdMembers from '../model/CardsIdMembers';
import CardsLabels from '../model/CardsLabels';
import CardsMembersVoted from '../model/CardsMembersVoted';
import CardsName from '../model/CardsName';
import CardsPos from '../model/CardsPos';
import CardsStickers from '../model/CardsStickers';
import CardsSubscribed from '../model/CardsSubscribed';

/**
* Card service.
* @module api/CardApi
* @version 1.0
*/
export default class CardApi {

    /**
    * Constructs a new CardApi. 
    * @alias module:api/CardApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addCards operation.
     * @callback module:api/CardApi~addCardsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addCards()
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/Cards} cards Attributes of \"Cards\" to be added.
     * @param {module:api/CardApi~addCardsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addCards(key, token, cards, callback) {
      let postBody = cards;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addCards");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addCards");
      }
      // verify the required parameter 'cards' is set
      if (cards === undefined || cards === null) {
        throw new Error("Missing the required parameter 'cards' when calling addCards");
      }

      let pathParams = {
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addCardsActionsCommentsByIdCard operation.
     * @callback module:api/CardApi~addCardsActionsCommentsByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addCardsActionsCommentsByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/ActionsComments} actionsComments Attributes of \"Actions Comments\" to be added.
     * @param {module:api/CardApi~addCardsActionsCommentsByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addCardsActionsCommentsByIdCard(idCard, key, token, actionsComments, callback) {
      let postBody = actionsComments;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling addCardsActionsCommentsByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addCardsActionsCommentsByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addCardsActionsCommentsByIdCard");
      }
      // verify the required parameter 'actionsComments' is set
      if (actionsComments === undefined || actionsComments === null) {
        throw new Error("Missing the required parameter 'actionsComments' when calling addCardsActionsCommentsByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/actions/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addCardsAttachmentsByIdCard operation.
     * @callback module:api/CardApi~addCardsAttachmentsByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addCardsAttachmentsByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/CardsAttachments} cardsAttachments Attributes of \"Cards Attachments\" to be added.
     * @param {module:api/CardApi~addCardsAttachmentsByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addCardsAttachmentsByIdCard(idCard, key, token, cardsAttachments, callback) {
      let postBody = cardsAttachments;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling addCardsAttachmentsByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addCardsAttachmentsByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addCardsAttachmentsByIdCard");
      }
      // verify the required parameter 'cardsAttachments' is set
      if (cardsAttachments === undefined || cardsAttachments === null) {
        throw new Error("Missing the required parameter 'cardsAttachments' when calling addCardsAttachmentsByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/attachments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addCardsChecklistCheckItemByIdCardByIdChecklist operation.
     * @callback module:api/CardApi~addCardsChecklistCheckItemByIdCardByIdChecklistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addCardsChecklistCheckItemByIdCardByIdChecklist()
     * @param {String} idCard card id or shortlink
     * @param {String} idChecklist idChecklist
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/CardsChecklistCheckItem} cardsChecklistCheckItem Attributes of \"Cards Checklist Check Item\" to be added.
     * @param {module:api/CardApi~addCardsChecklistCheckItemByIdCardByIdChecklistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addCardsChecklistCheckItemByIdCardByIdChecklist(idCard, idChecklist, key, token, cardsChecklistCheckItem, callback) {
      let postBody = cardsChecklistCheckItem;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling addCardsChecklistCheckItemByIdCardByIdChecklist");
      }
      // verify the required parameter 'idChecklist' is set
      if (idChecklist === undefined || idChecklist === null) {
        throw new Error("Missing the required parameter 'idChecklist' when calling addCardsChecklistCheckItemByIdCardByIdChecklist");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addCardsChecklistCheckItemByIdCardByIdChecklist");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addCardsChecklistCheckItemByIdCardByIdChecklist");
      }
      // verify the required parameter 'cardsChecklistCheckItem' is set
      if (cardsChecklistCheckItem === undefined || cardsChecklistCheckItem === null) {
        throw new Error("Missing the required parameter 'cardsChecklistCheckItem' when calling addCardsChecklistCheckItemByIdCardByIdChecklist");
      }

      let pathParams = {
        'idCard': idCard,
        'idChecklist': idChecklist
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/checklist/{idChecklist}/checkItem', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem operation.
     * @callback module:api/CardApi~addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem()
     * @param {String} idCard card id or shortlink
     * @param {String} idChecklist idChecklist
     * @param {String} idCheckItem idCheckItem
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/CardApi~addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem(idCard, idChecklist, idCheckItem, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'idChecklist' is set
      if (idChecklist === undefined || idChecklist === null) {
        throw new Error("Missing the required parameter 'idChecklist' when calling addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'idCheckItem' is set
      if (idCheckItem === undefined || idCheckItem === null) {
        throw new Error("Missing the required parameter 'idCheckItem' when calling addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem");
      }

      let pathParams = {
        'idCard': idCard,
        'idChecklist': idChecklist,
        'idCheckItem': idCheckItem
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/convertToCard', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addCardsChecklistsByIdCard operation.
     * @callback module:api/CardApi~addCardsChecklistsByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addCardsChecklistsByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/CardsChecklists} cardsChecklists Attributes of \"Cards Checklists\" to be added.
     * @param {module:api/CardApi~addCardsChecklistsByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addCardsChecklistsByIdCard(idCard, key, token, cardsChecklists, callback) {
      let postBody = cardsChecklists;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling addCardsChecklistsByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addCardsChecklistsByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addCardsChecklistsByIdCard");
      }
      // verify the required parameter 'cardsChecklists' is set
      if (cardsChecklists === undefined || cardsChecklists === null) {
        throw new Error("Missing the required parameter 'cardsChecklists' when calling addCardsChecklistsByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/checklists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addCardsIdLabelsByIdCard operation.
     * @callback module:api/CardApi~addCardsIdLabelsByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addCardsIdLabelsByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/CardsIdLabels} cardsIdLabels Attributes of \"Cards Id Labels\" to be added.
     * @param {module:api/CardApi~addCardsIdLabelsByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addCardsIdLabelsByIdCard(idCard, key, token, cardsIdLabels, callback) {
      let postBody = cardsIdLabels;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling addCardsIdLabelsByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addCardsIdLabelsByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addCardsIdLabelsByIdCard");
      }
      // verify the required parameter 'cardsIdLabels' is set
      if (cardsIdLabels === undefined || cardsIdLabels === null) {
        throw new Error("Missing the required parameter 'cardsIdLabels' when calling addCardsIdLabelsByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/idLabels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addCardsIdMembersByIdCard operation.
     * @callback module:api/CardApi~addCardsIdMembersByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addCardsIdMembersByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/CardsIdMembers} cardsIdMembers Attributes of \"Cards Id Members\" to be added.
     * @param {module:api/CardApi~addCardsIdMembersByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addCardsIdMembersByIdCard(idCard, key, token, cardsIdMembers, callback) {
      let postBody = cardsIdMembers;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling addCardsIdMembersByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addCardsIdMembersByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addCardsIdMembersByIdCard");
      }
      // verify the required parameter 'cardsIdMembers' is set
      if (cardsIdMembers === undefined || cardsIdMembers === null) {
        throw new Error("Missing the required parameter 'cardsIdMembers' when calling addCardsIdMembersByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/idMembers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addCardsLabelsByIdCard operation.
     * @callback module:api/CardApi~addCardsLabelsByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addCardsLabelsByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/CardsLabels} cardsLabels Attributes of \"Cards Labels\" to be added.
     * @param {module:api/CardApi~addCardsLabelsByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addCardsLabelsByIdCard(idCard, key, token, cardsLabels, callback) {
      let postBody = cardsLabels;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling addCardsLabelsByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addCardsLabelsByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addCardsLabelsByIdCard");
      }
      // verify the required parameter 'cardsLabels' is set
      if (cardsLabels === undefined || cardsLabels === null) {
        throw new Error("Missing the required parameter 'cardsLabels' when calling addCardsLabelsByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addCardsMarkAssociatedNotificationsReadByIdCard operation.
     * @callback module:api/CardApi~addCardsMarkAssociatedNotificationsReadByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addCardsMarkAssociatedNotificationsReadByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/CardApi~addCardsMarkAssociatedNotificationsReadByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addCardsMarkAssociatedNotificationsReadByIdCard(idCard, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling addCardsMarkAssociatedNotificationsReadByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addCardsMarkAssociatedNotificationsReadByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addCardsMarkAssociatedNotificationsReadByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/markAssociatedNotificationsRead', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addCardsMembersVotedByIdCard operation.
     * @callback module:api/CardApi~addCardsMembersVotedByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addCardsMembersVotedByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/CardsMembersVoted} cardsMembersVoted Attributes of \"Cards Members Voted\" to be added.
     * @param {module:api/CardApi~addCardsMembersVotedByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addCardsMembersVotedByIdCard(idCard, key, token, cardsMembersVoted, callback) {
      let postBody = cardsMembersVoted;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling addCardsMembersVotedByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addCardsMembersVotedByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addCardsMembersVotedByIdCard");
      }
      // verify the required parameter 'cardsMembersVoted' is set
      if (cardsMembersVoted === undefined || cardsMembersVoted === null) {
        throw new Error("Missing the required parameter 'cardsMembersVoted' when calling addCardsMembersVotedByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/membersVoted', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addCardsStickersByIdCard operation.
     * @callback module:api/CardApi~addCardsStickersByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addCardsStickersByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/CardsStickers} cardsStickers Attributes of \"Cards Stickers\" to be added.
     * @param {module:api/CardApi~addCardsStickersByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addCardsStickersByIdCard(idCard, key, token, cardsStickers, callback) {
      let postBody = cardsStickers;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling addCardsStickersByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addCardsStickersByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addCardsStickersByIdCard");
      }
      // verify the required parameter 'cardsStickers' is set
      if (cardsStickers === undefined || cardsStickers === null) {
        throw new Error("Missing the required parameter 'cardsStickers' when calling addCardsStickersByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/stickers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCardsActionsCommentsByIdCardByIdAction operation.
     * @callback module:api/CardApi~deleteCardsActionsCommentsByIdCardByIdActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteCardsActionsCommentsByIdCardByIdAction()
     * This can only be done by the original author of the comment, or someone with higher permissions than the original author.
     * @param {String} idCard card id or shortlink
     * @param {String} idAction idAction
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/CardApi~deleteCardsActionsCommentsByIdCardByIdActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCardsActionsCommentsByIdCardByIdAction(idCard, idAction, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling deleteCardsActionsCommentsByIdCardByIdAction");
      }
      // verify the required parameter 'idAction' is set
      if (idAction === undefined || idAction === null) {
        throw new Error("Missing the required parameter 'idAction' when calling deleteCardsActionsCommentsByIdCardByIdAction");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteCardsActionsCommentsByIdCardByIdAction");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteCardsActionsCommentsByIdCardByIdAction");
      }

      let pathParams = {
        'idCard': idCard,
        'idAction': idAction
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/actions/{idAction}/comments', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCardsAttachmentsByIdCardByIdAttachment operation.
     * @callback module:api/CardApi~deleteCardsAttachmentsByIdCardByIdAttachmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteCardsAttachmentsByIdCardByIdAttachment()
     * @param {String} idCard card id or shortlink
     * @param {String} idAttachment idAttachment
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/CardApi~deleteCardsAttachmentsByIdCardByIdAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCardsAttachmentsByIdCardByIdAttachment(idCard, idAttachment, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling deleteCardsAttachmentsByIdCardByIdAttachment");
      }
      // verify the required parameter 'idAttachment' is set
      if (idAttachment === undefined || idAttachment === null) {
        throw new Error("Missing the required parameter 'idAttachment' when calling deleteCardsAttachmentsByIdCardByIdAttachment");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteCardsAttachmentsByIdCardByIdAttachment");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteCardsAttachmentsByIdCardByIdAttachment");
      }

      let pathParams = {
        'idCard': idCard,
        'idAttachment': idAttachment
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/attachments/{idAttachment}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCardsByIdCard operation.
     * @callback module:api/CardApi~deleteCardsByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteCardsByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/CardApi~deleteCardsByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCardsByIdCard(idCard, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling deleteCardsByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteCardsByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteCardsByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem operation.
     * @callback module:api/CardApi~deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem()
     * @param {String} idCard card id or shortlink
     * @param {String} idChecklist idChecklist
     * @param {String} idCheckItem idCheckItem
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/CardApi~deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem(idCard, idChecklist, idCheckItem, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'idChecklist' is set
      if (idChecklist === undefined || idChecklist === null) {
        throw new Error("Missing the required parameter 'idChecklist' when calling deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'idCheckItem' is set
      if (idCheckItem === undefined || idCheckItem === null) {
        throw new Error("Missing the required parameter 'idCheckItem' when calling deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem");
      }

      let pathParams = {
        'idCard': idCard,
        'idChecklist': idChecklist,
        'idCheckItem': idCheckItem
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCardsChecklistsByIdCardByIdChecklist operation.
     * @callback module:api/CardApi~deleteCardsChecklistsByIdCardByIdChecklistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteCardsChecklistsByIdCardByIdChecklist()
     * @param {String} idCard card id or shortlink
     * @param {String} idChecklist idChecklist
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/CardApi~deleteCardsChecklistsByIdCardByIdChecklistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCardsChecklistsByIdCardByIdChecklist(idCard, idChecklist, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling deleteCardsChecklistsByIdCardByIdChecklist");
      }
      // verify the required parameter 'idChecklist' is set
      if (idChecklist === undefined || idChecklist === null) {
        throw new Error("Missing the required parameter 'idChecklist' when calling deleteCardsChecklistsByIdCardByIdChecklist");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteCardsChecklistsByIdCardByIdChecklist");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteCardsChecklistsByIdCardByIdChecklist");
      }

      let pathParams = {
        'idCard': idCard,
        'idChecklist': idChecklist
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/checklists/{idChecklist}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCardsIdLabelsByIdCardByIdLabel operation.
     * @callback module:api/CardApi~deleteCardsIdLabelsByIdCardByIdLabelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteCardsIdLabelsByIdCardByIdLabel()
     * @param {String} idCard card id or shortlink
     * @param {String} idLabel idLabel
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/CardApi~deleteCardsIdLabelsByIdCardByIdLabelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCardsIdLabelsByIdCardByIdLabel(idCard, idLabel, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling deleteCardsIdLabelsByIdCardByIdLabel");
      }
      // verify the required parameter 'idLabel' is set
      if (idLabel === undefined || idLabel === null) {
        throw new Error("Missing the required parameter 'idLabel' when calling deleteCardsIdLabelsByIdCardByIdLabel");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteCardsIdLabelsByIdCardByIdLabel");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteCardsIdLabelsByIdCardByIdLabel");
      }

      let pathParams = {
        'idCard': idCard,
        'idLabel': idLabel
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/idLabels/{idLabel}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCardsIdMembersByIdCardByIdMember operation.
     * @callback module:api/CardApi~deleteCardsIdMembersByIdCardByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteCardsIdMembersByIdCardByIdMember()
     * @param {String} idCard card id or shortlink
     * @param {String} idMember idMember
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/CardApi~deleteCardsIdMembersByIdCardByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCardsIdMembersByIdCardByIdMember(idCard, idMember, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling deleteCardsIdMembersByIdCardByIdMember");
      }
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling deleteCardsIdMembersByIdCardByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteCardsIdMembersByIdCardByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteCardsIdMembersByIdCardByIdMember");
      }

      let pathParams = {
        'idCard': idCard,
        'idMember': idMember
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/idMembers/{idMember}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCardsLabelsByIdCardByColor operation.
     * @callback module:api/CardApi~deleteCardsLabelsByIdCardByColorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteCardsLabelsByIdCardByColor()
     * @param {String} idCard card id or shortlink
     * @param {String} color color
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/CardApi~deleteCardsLabelsByIdCardByColorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCardsLabelsByIdCardByColor(idCard, color, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling deleteCardsLabelsByIdCardByColor");
      }
      // verify the required parameter 'color' is set
      if (color === undefined || color === null) {
        throw new Error("Missing the required parameter 'color' when calling deleteCardsLabelsByIdCardByColor");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteCardsLabelsByIdCardByColor");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteCardsLabelsByIdCardByColor");
      }

      let pathParams = {
        'idCard': idCard,
        'color': color
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/labels/{color}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCardsMembersVotedByIdCardByIdMember operation.
     * @callback module:api/CardApi~deleteCardsMembersVotedByIdCardByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteCardsMembersVotedByIdCardByIdMember()
     * @param {String} idCard card id or shortlink
     * @param {String} idMember idMember
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/CardApi~deleteCardsMembersVotedByIdCardByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCardsMembersVotedByIdCardByIdMember(idCard, idMember, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling deleteCardsMembersVotedByIdCardByIdMember");
      }
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling deleteCardsMembersVotedByIdCardByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteCardsMembersVotedByIdCardByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteCardsMembersVotedByIdCardByIdMember");
      }

      let pathParams = {
        'idCard': idCard,
        'idMember': idMember
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/membersVoted/{idMember}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCardsStickersByIdCardByIdSticker operation.
     * @callback module:api/CardApi~deleteCardsStickersByIdCardByIdStickerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteCardsStickersByIdCardByIdSticker()
     * @param {String} idCard card id or shortlink
     * @param {String} idSticker idSticker
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/CardApi~deleteCardsStickersByIdCardByIdStickerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCardsStickersByIdCardByIdSticker(idCard, idSticker, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling deleteCardsStickersByIdCardByIdSticker");
      }
      // verify the required parameter 'idSticker' is set
      if (idSticker === undefined || idSticker === null) {
        throw new Error("Missing the required parameter 'idSticker' when calling deleteCardsStickersByIdCardByIdSticker");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteCardsStickersByIdCardByIdSticker");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteCardsStickersByIdCardByIdSticker");
      }

      let pathParams = {
        'idCard': idCard,
        'idSticker': idSticker
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/stickers/{idSticker}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardsActionsByIdCard operation.
     * @callback module:api/CardApi~getCardsActionsByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getCardsActionsByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [entities]  true or false
     * @param {String} [display]  true or false
     * @param {String} [filter = 'commentCard and updateCard:idList')] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
     * @param {String} [fields = 'all')] all or a comma-separated list of: data, date, idMemberCreator or type
     * @param {String} [limit = '50')] a number from 0 to 1000
     * @param {String} [format = 'list')] One of: count, list or minimal
     * @param {String} [since] A date, null or lastView
     * @param {String} [before] A date, or null
     * @param {String} [page = '0')] Page * limit must be less than 1000
     * @param {String} [idModels] Only return actions related to these model ids
     * @param {String} [member]  true or false
     * @param {String} [memberFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [memberCreator]  true or false
     * @param {String} [memberCreatorFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {module:api/CardApi~getCardsActionsByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCardsActionsByIdCard(idCard, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling getCardsActionsByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCardsActionsByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getCardsActionsByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'entities': opts['entities'],
        'display': opts['display'],
        'filter': opts['filter'],
        'fields': opts['fields'],
        'limit': opts['limit'],
        'format': opts['format'],
        'since': opts['since'],
        'before': opts['before'],
        'page': opts['page'],
        'idModels': opts['idModels'],
        'member': opts['member'],
        'member_fields': opts['memberFields'],
        'memberCreator': opts['memberCreator'],
        'memberCreator_fields': opts['memberCreatorFields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardsAttachmentsByIdCard operation.
     * @callback module:api/CardApi~getCardsAttachmentsByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getCardsAttachmentsByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
     * @param {String} [filter] A boolean value or &quot;cover&quot; for only card cover attachments
     * @param {module:api/CardApi~getCardsAttachmentsByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCardsAttachmentsByIdCard(idCard, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling getCardsAttachmentsByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCardsAttachmentsByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getCardsAttachmentsByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'fields': opts['fields'],
        'filter': opts['filter'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardsAttachmentsByIdCardByIdAttachment operation.
     * @callback module:api/CardApi~getCardsAttachmentsByIdCardByIdAttachmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getCardsAttachmentsByIdCardByIdAttachment()
     * @param {String} idCard card id or shortlink
     * @param {String} idAttachment idAttachment
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
     * @param {module:api/CardApi~getCardsAttachmentsByIdCardByIdAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCardsAttachmentsByIdCardByIdAttachment(idCard, idAttachment, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling getCardsAttachmentsByIdCardByIdAttachment");
      }
      // verify the required parameter 'idAttachment' is set
      if (idAttachment === undefined || idAttachment === null) {
        throw new Error("Missing the required parameter 'idAttachment' when calling getCardsAttachmentsByIdCardByIdAttachment");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCardsAttachmentsByIdCardByIdAttachment");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getCardsAttachmentsByIdCardByIdAttachment");
      }

      let pathParams = {
        'idCard': idCard,
        'idAttachment': idAttachment
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/attachments/{idAttachment}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardsBoardByIdCard operation.
     * @callback module:api/CardApi~getCardsBoardByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getCardsBoardByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
     * @param {module:api/CardApi~getCardsBoardByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCardsBoardByIdCard(idCard, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling getCardsBoardByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCardsBoardByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getCardsBoardByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/board', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardsBoardByIdCardByField operation.
     * @callback module:api/CardApi~getCardsBoardByIdCardByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getCardsBoardByIdCardByField()
     * @param {String} idCard card id or shortlink
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/CardApi~getCardsBoardByIdCardByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCardsBoardByIdCardByField(idCard, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling getCardsBoardByIdCardByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getCardsBoardByIdCardByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCardsBoardByIdCardByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getCardsBoardByIdCardByField");
      }

      let pathParams = {
        'idCard': idCard,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/board/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardsByIdCard operation.
     * @callback module:api/CardApi~getCardsByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getCardsByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [actions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
     * @param {String} [actionsEntities]  true or false
     * @param {String} [actionsDisplay]  true or false
     * @param {String} [actionsLimit = '50')] a number from 0 to 1000
     * @param {String} [actionFields = 'all')] all or a comma-separated list of: data, date, idMemberCreator or type
     * @param {String} [actionMemberCreatorFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [attachments] A boolean value or &quot;cover&quot; for only card cover attachments
     * @param {String} [attachmentFields = 'all')] all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
     * @param {String} [members]  true or false
     * @param {String} [memberFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [membersVoted]  true or false
     * @param {String} [memberVotedFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [checkItemStates]  true or false
     * @param {String} [checkItemStateFields = 'all')] all or a comma-separated list of: idCheckItem or state
     * @param {String} [checklists = 'none')] One of: all or none
     * @param {String} [checklistFields = 'all')] all or a comma-separated list of: idBoard, idCard, name or pos
     * @param {String} [board]  true or false
     * @param {String} [boardFields = 'name, desc, descData, closed, idOrganization, pinned, url and prefs')] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
     * @param {String} [list]  true or false
     * @param {String} [listFields = 'all')] all or a comma-separated list of: closed, idBoard, name, pos or subscribed
     * @param {String} [stickers]  true or false
     * @param {String} [stickerFields = 'all')] all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex
     * @param {String} [fields = 'badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idBoard, idChecklists, idLabels, idList, idMembers, idShort, idAttachmentCover, manualCoverAttachment, labels, name, pos, shortUrl and url')] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
     * @param {module:api/CardApi~getCardsByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCardsByIdCard(idCard, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling getCardsByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCardsByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getCardsByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'actions': opts['actions'],
        'actions_entities': opts['actionsEntities'],
        'actions_display': opts['actionsDisplay'],
        'actions_limit': opts['actionsLimit'],
        'action_fields': opts['actionFields'],
        'action_memberCreator_fields': opts['actionMemberCreatorFields'],
        'attachments': opts['attachments'],
        'attachment_fields': opts['attachmentFields'],
        'members': opts['members'],
        'member_fields': opts['memberFields'],
        'membersVoted': opts['membersVoted'],
        'memberVoted_fields': opts['memberVotedFields'],
        'checkItemStates': opts['checkItemStates'],
        'checkItemState_fields': opts['checkItemStateFields'],
        'checklists': opts['checklists'],
        'checklist_fields': opts['checklistFields'],
        'board': opts['board'],
        'board_fields': opts['boardFields'],
        'list': opts['list'],
        'list_fields': opts['listFields'],
        'stickers': opts['stickers'],
        'sticker_fields': opts['stickerFields'],
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardsByIdCardByField operation.
     * @callback module:api/CardApi~getCardsByIdCardByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getCardsByIdCardByField()
     * @param {String} idCard card id or shortlink
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/CardApi~getCardsByIdCardByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCardsByIdCardByField(idCard, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling getCardsByIdCardByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getCardsByIdCardByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCardsByIdCardByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getCardsByIdCardByField");
      }

      let pathParams = {
        'idCard': idCard,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardsCheckItemStatesByIdCard operation.
     * @callback module:api/CardApi~getCardsCheckItemStatesByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getCardsCheckItemStatesByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: idCheckItem or state
     * @param {module:api/CardApi~getCardsCheckItemStatesByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCardsCheckItemStatesByIdCard(idCard, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling getCardsCheckItemStatesByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCardsCheckItemStatesByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getCardsCheckItemStatesByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/checkItemStates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardsChecklistsByIdCard operation.
     * @callback module:api/CardApi~getCardsChecklistsByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getCardsChecklistsByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [cards = 'none')] One of: all, closed, none, open or visible
     * @param {String} [cardFields = 'all')] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
     * @param {String} [checkItems = 'all')] One of: all or none
     * @param {String} [checkItemFields = 'name, nameData, pos and state')] all or a comma-separated list of: name, nameData, pos, state or type
     * @param {String} [filter = 'all')] One of: all or none
     * @param {String} [fields = 'all')] all or a comma-separated list of: idBoard, idCard, name or pos
     * @param {module:api/CardApi~getCardsChecklistsByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCardsChecklistsByIdCard(idCard, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling getCardsChecklistsByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCardsChecklistsByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getCardsChecklistsByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'cards': opts['cards'],
        'card_fields': opts['cardFields'],
        'checkItems': opts['checkItems'],
        'checkItem_fields': opts['checkItemFields'],
        'filter': opts['filter'],
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/checklists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardsListByIdCard operation.
     * @callback module:api/CardApi~getCardsListByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getCardsListByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: closed, idBoard, name, pos or subscribed
     * @param {module:api/CardApi~getCardsListByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCardsListByIdCard(idCard, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling getCardsListByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCardsListByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getCardsListByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardsListByIdCardByField operation.
     * @callback module:api/CardApi~getCardsListByIdCardByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getCardsListByIdCardByField()
     * @param {String} idCard card id or shortlink
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/CardApi~getCardsListByIdCardByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCardsListByIdCardByField(idCard, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling getCardsListByIdCardByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getCardsListByIdCardByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCardsListByIdCardByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getCardsListByIdCardByField");
      }

      let pathParams = {
        'idCard': idCard,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/list/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardsMembersByIdCard operation.
     * @callback module:api/CardApi~getCardsMembersByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getCardsMembersByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {module:api/CardApi~getCardsMembersByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCardsMembersByIdCard(idCard, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling getCardsMembersByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCardsMembersByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getCardsMembersByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardsMembersVotedByIdCard operation.
     * @callback module:api/CardApi~getCardsMembersVotedByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getCardsMembersVotedByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {module:api/CardApi~getCardsMembersVotedByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCardsMembersVotedByIdCard(idCard, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling getCardsMembersVotedByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCardsMembersVotedByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getCardsMembersVotedByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/membersVoted', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardsStickersByIdCard operation.
     * @callback module:api/CardApi~getCardsStickersByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getCardsStickersByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex
     * @param {module:api/CardApi~getCardsStickersByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCardsStickersByIdCard(idCard, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling getCardsStickersByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCardsStickersByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getCardsStickersByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/stickers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardsStickersByIdCardByIdSticker operation.
     * @callback module:api/CardApi~getCardsStickersByIdCardByIdStickerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getCardsStickersByIdCardByIdSticker()
     * @param {String} idCard card id or shortlink
     * @param {String} idSticker idSticker
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex
     * @param {module:api/CardApi~getCardsStickersByIdCardByIdStickerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCardsStickersByIdCardByIdSticker(idCard, idSticker, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling getCardsStickersByIdCardByIdSticker");
      }
      // verify the required parameter 'idSticker' is set
      if (idSticker === undefined || idSticker === null) {
        throw new Error("Missing the required parameter 'idSticker' when calling getCardsStickersByIdCardByIdSticker");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getCardsStickersByIdCardByIdSticker");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getCardsStickersByIdCardByIdSticker");
      }

      let pathParams = {
        'idCard': idCard,
        'idSticker': idSticker
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/stickers/{idSticker}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCardsActionsCommentsByIdCardByIdAction operation.
     * @callback module:api/CardApi~updateCardsActionsCommentsByIdCardByIdActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateCardsActionsCommentsByIdCardByIdAction()
     * This can only be done by the original author of the comment.
     * @param {String} idCard card id or shortlink
     * @param {String} idAction idAction
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/CardsActionsComments} cardsActionsComments Attributes of \"Cards Actions Comments\" to be updated.
     * @param {module:api/CardApi~updateCardsActionsCommentsByIdCardByIdActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCardsActionsCommentsByIdCardByIdAction(idCard, idAction, key, token, cardsActionsComments, callback) {
      let postBody = cardsActionsComments;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling updateCardsActionsCommentsByIdCardByIdAction");
      }
      // verify the required parameter 'idAction' is set
      if (idAction === undefined || idAction === null) {
        throw new Error("Missing the required parameter 'idAction' when calling updateCardsActionsCommentsByIdCardByIdAction");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateCardsActionsCommentsByIdCardByIdAction");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateCardsActionsCommentsByIdCardByIdAction");
      }
      // verify the required parameter 'cardsActionsComments' is set
      if (cardsActionsComments === undefined || cardsActionsComments === null) {
        throw new Error("Missing the required parameter 'cardsActionsComments' when calling updateCardsActionsCommentsByIdCardByIdAction");
      }

      let pathParams = {
        'idCard': idCard,
        'idAction': idAction
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/actions/{idAction}/comments', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCardsByIdCard operation.
     * @callback module:api/CardApi~updateCardsByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateCardsByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/Cards} cards Attributes of \"Cards\" to be updated.
     * @param {module:api/CardApi~updateCardsByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCardsByIdCard(idCard, key, token, cards, callback) {
      let postBody = cards;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling updateCardsByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateCardsByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateCardsByIdCard");
      }
      // verify the required parameter 'cards' is set
      if (cards === undefined || cards === null) {
        throw new Error("Missing the required parameter 'cards' when calling updateCardsByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem operation.
     * @callback module:api/CardApi~updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem()
     * @param {String} idCard card id or shortlink
     * @param {String} idChecklistCurrent idChecklistCurrent
     * @param {String} idCheckItem idCheckItem
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/CardsChecklistIdChecklistCurrentCheckItem} cardsChecklistIdChecklistCurrentCheckItem Attributes of \"Cards Checklist Id Checklist Current Check Item\" to be updated.
     * @param {module:api/CardApi~updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem(idCard, idChecklistCurrent, idCheckItem, key, token, cardsChecklistIdChecklistCurrentCheckItem, callback) {
      let postBody = cardsChecklistIdChecklistCurrentCheckItem;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem");
      }
      // verify the required parameter 'idChecklistCurrent' is set
      if (idChecklistCurrent === undefined || idChecklistCurrent === null) {
        throw new Error("Missing the required parameter 'idChecklistCurrent' when calling updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem");
      }
      // verify the required parameter 'idCheckItem' is set
      if (idCheckItem === undefined || idCheckItem === null) {
        throw new Error("Missing the required parameter 'idCheckItem' when calling updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem");
      }
      // verify the required parameter 'cardsChecklistIdChecklistCurrentCheckItem' is set
      if (cardsChecklistIdChecklistCurrentCheckItem === undefined || cardsChecklistIdChecklistCurrentCheckItem === null) {
        throw new Error("Missing the required parameter 'cardsChecklistIdChecklistCurrentCheckItem' when calling updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem");
      }

      let pathParams = {
        'idCard': idCard,
        'idChecklistCurrent': idChecklistCurrent,
        'idCheckItem': idCheckItem
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/checklist/{idChecklistCurrent}/checkItem/{idCheckItem}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem operation.
     * @callback module:api/CardApi~updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem()
     * @param {String} idCard card id or shortlink
     * @param {String} idChecklist idChecklist
     * @param {String} idCheckItem idCheckItem
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/CardsChecklistCheckItemName} cardsChecklistCheckItemName Attributes of \"Cards Checklist Check Item Name\" to be updated.
     * @param {module:api/CardApi~updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem(idCard, idChecklist, idCheckItem, key, token, cardsChecklistCheckItemName, callback) {
      let postBody = cardsChecklistCheckItemName;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'idChecklist' is set
      if (idChecklist === undefined || idChecklist === null) {
        throw new Error("Missing the required parameter 'idChecklist' when calling updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'idCheckItem' is set
      if (idCheckItem === undefined || idCheckItem === null) {
        throw new Error("Missing the required parameter 'idCheckItem' when calling updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'cardsChecklistCheckItemName' is set
      if (cardsChecklistCheckItemName === undefined || cardsChecklistCheckItemName === null) {
        throw new Error("Missing the required parameter 'cardsChecklistCheckItemName' when calling updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem");
      }

      let pathParams = {
        'idCard': idCard,
        'idChecklist': idChecklist,
        'idCheckItem': idCheckItem
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/name', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem operation.
     * @callback module:api/CardApi~updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem()
     * @param {String} idCard card id or shortlink
     * @param {String} idChecklist idChecklist
     * @param {String} idCheckItem idCheckItem
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/CardsChecklistCheckItemPos} cardsChecklistCheckItemPos Attributes of \"Cards Checklist Check Item Pos\" to be updated.
     * @param {module:api/CardApi~updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem(idCard, idChecklist, idCheckItem, key, token, cardsChecklistCheckItemPos, callback) {
      let postBody = cardsChecklistCheckItemPos;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'idChecklist' is set
      if (idChecklist === undefined || idChecklist === null) {
        throw new Error("Missing the required parameter 'idChecklist' when calling updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'idCheckItem' is set
      if (idCheckItem === undefined || idCheckItem === null) {
        throw new Error("Missing the required parameter 'idCheckItem' when calling updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'cardsChecklistCheckItemPos' is set
      if (cardsChecklistCheckItemPos === undefined || cardsChecklistCheckItemPos === null) {
        throw new Error("Missing the required parameter 'cardsChecklistCheckItemPos' when calling updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem");
      }

      let pathParams = {
        'idCard': idCard,
        'idChecklist': idChecklist,
        'idCheckItem': idCheckItem
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/pos', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem operation.
     * @callback module:api/CardApi~updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem()
     * @param {String} idCard card id or shortlink
     * @param {String} idChecklist idChecklist
     * @param {String} idCheckItem idCheckItem
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/CardsChecklistCheckItemState} cardsChecklistCheckItemState Attributes of \"Cards Checklist Check Item State\" to be updated.
     * @param {module:api/CardApi~updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem(idCard, idChecklist, idCheckItem, key, token, cardsChecklistCheckItemState, callback) {
      let postBody = cardsChecklistCheckItemState;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'idChecklist' is set
      if (idChecklist === undefined || idChecklist === null) {
        throw new Error("Missing the required parameter 'idChecklist' when calling updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'idCheckItem' is set
      if (idCheckItem === undefined || idCheckItem === null) {
        throw new Error("Missing the required parameter 'idCheckItem' when calling updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem");
      }
      // verify the required parameter 'cardsChecklistCheckItemState' is set
      if (cardsChecklistCheckItemState === undefined || cardsChecklistCheckItemState === null) {
        throw new Error("Missing the required parameter 'cardsChecklistCheckItemState' when calling updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem");
      }

      let pathParams = {
        'idCard': idCard,
        'idChecklist': idChecklist,
        'idCheckItem': idCheckItem
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/state', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCardsClosedByIdCard operation.
     * @callback module:api/CardApi~updateCardsClosedByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateCardsClosedByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/CardsClosed} cardsClosed Attributes of \"Cards Closed\" to be updated.
     * @param {module:api/CardApi~updateCardsClosedByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCardsClosedByIdCard(idCard, key, token, cardsClosed, callback) {
      let postBody = cardsClosed;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling updateCardsClosedByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateCardsClosedByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateCardsClosedByIdCard");
      }
      // verify the required parameter 'cardsClosed' is set
      if (cardsClosed === undefined || cardsClosed === null) {
        throw new Error("Missing the required parameter 'cardsClosed' when calling updateCardsClosedByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/closed', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCardsDescByIdCard operation.
     * @callback module:api/CardApi~updateCardsDescByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateCardsDescByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/CardsDesc} cardsDesc Attributes of \"Cards Desc\" to be updated.
     * @param {module:api/CardApi~updateCardsDescByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCardsDescByIdCard(idCard, key, token, cardsDesc, callback) {
      let postBody = cardsDesc;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling updateCardsDescByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateCardsDescByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateCardsDescByIdCard");
      }
      // verify the required parameter 'cardsDesc' is set
      if (cardsDesc === undefined || cardsDesc === null) {
        throw new Error("Missing the required parameter 'cardsDesc' when calling updateCardsDescByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/desc', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCardsDueByIdCard operation.
     * @callback module:api/CardApi~updateCardsDueByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateCardsDueByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/CardsDue} cardsDue Attributes of \"Cards Due\" to be updated.
     * @param {module:api/CardApi~updateCardsDueByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCardsDueByIdCard(idCard, key, token, cardsDue, callback) {
      let postBody = cardsDue;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling updateCardsDueByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateCardsDueByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateCardsDueByIdCard");
      }
      // verify the required parameter 'cardsDue' is set
      if (cardsDue === undefined || cardsDue === null) {
        throw new Error("Missing the required parameter 'cardsDue' when calling updateCardsDueByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/due', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCardsIdAttachmentCoverByIdCard operation.
     * @callback module:api/CardApi~updateCardsIdAttachmentCoverByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateCardsIdAttachmentCoverByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/CardsIdAttachmentCover} cardsIdAttachmentCover Attributes of \"Cards Id Attachment Cover\" to be updated.
     * @param {module:api/CardApi~updateCardsIdAttachmentCoverByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCardsIdAttachmentCoverByIdCard(idCard, key, token, cardsIdAttachmentCover, callback) {
      let postBody = cardsIdAttachmentCover;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling updateCardsIdAttachmentCoverByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateCardsIdAttachmentCoverByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateCardsIdAttachmentCoverByIdCard");
      }
      // verify the required parameter 'cardsIdAttachmentCover' is set
      if (cardsIdAttachmentCover === undefined || cardsIdAttachmentCover === null) {
        throw new Error("Missing the required parameter 'cardsIdAttachmentCover' when calling updateCardsIdAttachmentCoverByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/idAttachmentCover', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCardsIdBoardByIdCard operation.
     * @callback module:api/CardApi~updateCardsIdBoardByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateCardsIdBoardByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/CardsIdBoard} cardsIdBoard Attributes of \"Cards Id Board\" to be updated.
     * @param {module:api/CardApi~updateCardsIdBoardByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCardsIdBoardByIdCard(idCard, key, token, cardsIdBoard, callback) {
      let postBody = cardsIdBoard;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling updateCardsIdBoardByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateCardsIdBoardByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateCardsIdBoardByIdCard");
      }
      // verify the required parameter 'cardsIdBoard' is set
      if (cardsIdBoard === undefined || cardsIdBoard === null) {
        throw new Error("Missing the required parameter 'cardsIdBoard' when calling updateCardsIdBoardByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/idBoard', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCardsIdListByIdCard operation.
     * @callback module:api/CardApi~updateCardsIdListByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateCardsIdListByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/CardsIdList} cardsIdList Attributes of \"Cards Id List\" to be updated.
     * @param {module:api/CardApi~updateCardsIdListByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCardsIdListByIdCard(idCard, key, token, cardsIdList, callback) {
      let postBody = cardsIdList;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling updateCardsIdListByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateCardsIdListByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateCardsIdListByIdCard");
      }
      // verify the required parameter 'cardsIdList' is set
      if (cardsIdList === undefined || cardsIdList === null) {
        throw new Error("Missing the required parameter 'cardsIdList' when calling updateCardsIdListByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/idList', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCardsIdMembersByIdCard operation.
     * @callback module:api/CardApi~updateCardsIdMembersByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateCardsIdMembersByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/CardsIdMembers} cardsIdMembers Attributes of \"Cards Id Members\" to be updated.
     * @param {module:api/CardApi~updateCardsIdMembersByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCardsIdMembersByIdCard(idCard, key, token, cardsIdMembers, callback) {
      let postBody = cardsIdMembers;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling updateCardsIdMembersByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateCardsIdMembersByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateCardsIdMembersByIdCard");
      }
      // verify the required parameter 'cardsIdMembers' is set
      if (cardsIdMembers === undefined || cardsIdMembers === null) {
        throw new Error("Missing the required parameter 'cardsIdMembers' when calling updateCardsIdMembersByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/idMembers', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCardsLabelsByIdCard operation.
     * @callback module:api/CardApi~updateCardsLabelsByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateCardsLabelsByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/CardsLabels} cardsLabels Attributes of \"Cards Labels\" to be updated.
     * @param {module:api/CardApi~updateCardsLabelsByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCardsLabelsByIdCard(idCard, key, token, cardsLabels, callback) {
      let postBody = cardsLabels;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling updateCardsLabelsByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateCardsLabelsByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateCardsLabelsByIdCard");
      }
      // verify the required parameter 'cardsLabels' is set
      if (cardsLabels === undefined || cardsLabels === null) {
        throw new Error("Missing the required parameter 'cardsLabels' when calling updateCardsLabelsByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/labels', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCardsNameByIdCard operation.
     * @callback module:api/CardApi~updateCardsNameByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateCardsNameByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/CardsName} cardsName Attributes of \"Cards Name\" to be updated.
     * @param {module:api/CardApi~updateCardsNameByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCardsNameByIdCard(idCard, key, token, cardsName, callback) {
      let postBody = cardsName;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling updateCardsNameByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateCardsNameByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateCardsNameByIdCard");
      }
      // verify the required parameter 'cardsName' is set
      if (cardsName === undefined || cardsName === null) {
        throw new Error("Missing the required parameter 'cardsName' when calling updateCardsNameByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/name', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCardsPosByIdCard operation.
     * @callback module:api/CardApi~updateCardsPosByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateCardsPosByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/CardsPos} cardsPos Attributes of \"Cards Pos\" to be updated.
     * @param {module:api/CardApi~updateCardsPosByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCardsPosByIdCard(idCard, key, token, cardsPos, callback) {
      let postBody = cardsPos;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling updateCardsPosByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateCardsPosByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateCardsPosByIdCard");
      }
      // verify the required parameter 'cardsPos' is set
      if (cardsPos === undefined || cardsPos === null) {
        throw new Error("Missing the required parameter 'cardsPos' when calling updateCardsPosByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/pos', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCardsStickersByIdCardByIdSticker operation.
     * @callback module:api/CardApi~updateCardsStickersByIdCardByIdStickerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateCardsStickersByIdCardByIdSticker()
     * @param {String} idCard card id or shortlink
     * @param {String} idSticker idSticker
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/CardsStickers} cardsStickers Attributes of \"Cards Stickers\" to be updated.
     * @param {module:api/CardApi~updateCardsStickersByIdCardByIdStickerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCardsStickersByIdCardByIdSticker(idCard, idSticker, key, token, cardsStickers, callback) {
      let postBody = cardsStickers;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling updateCardsStickersByIdCardByIdSticker");
      }
      // verify the required parameter 'idSticker' is set
      if (idSticker === undefined || idSticker === null) {
        throw new Error("Missing the required parameter 'idSticker' when calling updateCardsStickersByIdCardByIdSticker");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateCardsStickersByIdCardByIdSticker");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateCardsStickersByIdCardByIdSticker");
      }
      // verify the required parameter 'cardsStickers' is set
      if (cardsStickers === undefined || cardsStickers === null) {
        throw new Error("Missing the required parameter 'cardsStickers' when calling updateCardsStickersByIdCardByIdSticker");
      }

      let pathParams = {
        'idCard': idCard,
        'idSticker': idSticker
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/stickers/{idSticker}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCardsSubscribedByIdCard operation.
     * @callback module:api/CardApi~updateCardsSubscribedByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateCardsSubscribedByIdCard()
     * @param {String} idCard card id or shortlink
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/CardsSubscribed} cardsSubscribed Attributes of \"Cards Subscribed\" to be updated.
     * @param {module:api/CardApi~updateCardsSubscribedByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCardsSubscribedByIdCard(idCard, key, token, cardsSubscribed, callback) {
      let postBody = cardsSubscribed;
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling updateCardsSubscribedByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateCardsSubscribedByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateCardsSubscribedByIdCard");
      }
      // verify the required parameter 'cardsSubscribed' is set
      if (cardsSubscribed === undefined || cardsSubscribed === null) {
        throw new Error("Missing the required parameter 'cardsSubscribed' when calling updateCardsSubscribedByIdCard");
      }

      let pathParams = {
        'idCard': idCard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cards/{idCard}/subscribed', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
