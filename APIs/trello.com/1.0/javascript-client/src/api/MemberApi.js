/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Members from '../model/Members';
import MembersAvatar from '../model/MembersAvatar';
import MembersAvatarSource from '../model/MembersAvatarSource';
import MembersBio from '../model/MembersBio';
import MembersBoardBackgrounds from '../model/MembersBoardBackgrounds';
import MembersBoardStars from '../model/MembersBoardStars';
import MembersBoardStarsIdBoard from '../model/MembersBoardStarsIdBoard';
import MembersBoardStarsPos from '../model/MembersBoardStarsPos';
import MembersCustomBoardBackgrounds from '../model/MembersCustomBoardBackgrounds';
import MembersCustomEmoji from '../model/MembersCustomEmoji';
import MembersCustomStickers from '../model/MembersCustomStickers';
import MembersFullName from '../model/MembersFullName';
import MembersInitials from '../model/MembersInitials';
import MembersOneTimeMessagesDismissed from '../model/MembersOneTimeMessagesDismissed';
import MembersSavedSearches from '../model/MembersSavedSearches';
import MembersSavedSearchesName from '../model/MembersSavedSearchesName';
import MembersSavedSearchesPos from '../model/MembersSavedSearchesPos';
import MembersSavedSearchesQuery from '../model/MembersSavedSearchesQuery';
import MembersUsername from '../model/MembersUsername';
import PrefsColorBlind from '../model/PrefsColorBlind';
import PrefsLocale from '../model/PrefsLocale';
import PrefsMinutesBetweenSummaries from '../model/PrefsMinutesBetweenSummaries';

/**
* Member service.
* @module api/MemberApi
* @version 1.0
*/
export default class MemberApi {

    /**
    * Constructs a new MemberApi. 
    * @alias module:api/MemberApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addMembersAvatarByIdMember operation.
     * @callback module:api/MemberApi~addMembersAvatarByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addMembersAvatarByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MembersAvatar} membersAvatar Attributes of \"Members Avatar\" to be added.
     * @param {module:api/MemberApi~addMembersAvatarByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addMembersAvatarByIdMember(idMember, key, token, membersAvatar, callback) {
      let postBody = membersAvatar;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling addMembersAvatarByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addMembersAvatarByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addMembersAvatarByIdMember");
      }
      // verify the required parameter 'membersAvatar' is set
      if (membersAvatar === undefined || membersAvatar === null) {
        throw new Error("Missing the required parameter 'membersAvatar' when calling addMembersAvatarByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/avatar', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addMembersBoardBackgroundsByIdMember operation.
     * @callback module:api/MemberApi~addMembersBoardBackgroundsByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addMembersBoardBackgroundsByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MembersBoardBackgrounds} membersBoardBackgrounds Attributes of \"Members Board Backgrounds\" to be added.
     * @param {module:api/MemberApi~addMembersBoardBackgroundsByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addMembersBoardBackgroundsByIdMember(idMember, key, token, membersBoardBackgrounds, callback) {
      let postBody = membersBoardBackgrounds;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling addMembersBoardBackgroundsByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addMembersBoardBackgroundsByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addMembersBoardBackgroundsByIdMember");
      }
      // verify the required parameter 'membersBoardBackgrounds' is set
      if (membersBoardBackgrounds === undefined || membersBoardBackgrounds === null) {
        throw new Error("Missing the required parameter 'membersBoardBackgrounds' when calling addMembersBoardBackgroundsByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/boardBackgrounds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addMembersBoardStarsByIdMember operation.
     * @callback module:api/MemberApi~addMembersBoardStarsByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addMembersBoardStarsByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MembersBoardStars} membersBoardStars Attributes of \"Members Board Stars\" to be added.
     * @param {module:api/MemberApi~addMembersBoardStarsByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addMembersBoardStarsByIdMember(idMember, key, token, membersBoardStars, callback) {
      let postBody = membersBoardStars;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling addMembersBoardStarsByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addMembersBoardStarsByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addMembersBoardStarsByIdMember");
      }
      // verify the required parameter 'membersBoardStars' is set
      if (membersBoardStars === undefined || membersBoardStars === null) {
        throw new Error("Missing the required parameter 'membersBoardStars' when calling addMembersBoardStarsByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/boardStars', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addMembersCustomBoardBackgroundsByIdMember operation.
     * @callback module:api/MemberApi~addMembersCustomBoardBackgroundsByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addMembersCustomBoardBackgroundsByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MembersCustomBoardBackgrounds} membersCustomBoardBackgrounds Attributes of \"Members Custom Board Backgrounds\" to be added.
     * @param {module:api/MemberApi~addMembersCustomBoardBackgroundsByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addMembersCustomBoardBackgroundsByIdMember(idMember, key, token, membersCustomBoardBackgrounds, callback) {
      let postBody = membersCustomBoardBackgrounds;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling addMembersCustomBoardBackgroundsByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addMembersCustomBoardBackgroundsByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addMembersCustomBoardBackgroundsByIdMember");
      }
      // verify the required parameter 'membersCustomBoardBackgrounds' is set
      if (membersCustomBoardBackgrounds === undefined || membersCustomBoardBackgrounds === null) {
        throw new Error("Missing the required parameter 'membersCustomBoardBackgrounds' when calling addMembersCustomBoardBackgroundsByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/customBoardBackgrounds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addMembersCustomEmojiByIdMember operation.
     * @callback module:api/MemberApi~addMembersCustomEmojiByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addMembersCustomEmojiByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MembersCustomEmoji} membersCustomEmoji Attributes of \"Members Custom Emoji\" to be added.
     * @param {module:api/MemberApi~addMembersCustomEmojiByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addMembersCustomEmojiByIdMember(idMember, key, token, membersCustomEmoji, callback) {
      let postBody = membersCustomEmoji;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling addMembersCustomEmojiByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addMembersCustomEmojiByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addMembersCustomEmojiByIdMember");
      }
      // verify the required parameter 'membersCustomEmoji' is set
      if (membersCustomEmoji === undefined || membersCustomEmoji === null) {
        throw new Error("Missing the required parameter 'membersCustomEmoji' when calling addMembersCustomEmojiByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/customEmoji', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addMembersCustomStickersByIdMember operation.
     * @callback module:api/MemberApi~addMembersCustomStickersByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addMembersCustomStickersByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MembersCustomStickers} membersCustomStickers Attributes of \"Members Custom Stickers\" to be added.
     * @param {module:api/MemberApi~addMembersCustomStickersByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addMembersCustomStickersByIdMember(idMember, key, token, membersCustomStickers, callback) {
      let postBody = membersCustomStickers;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling addMembersCustomStickersByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addMembersCustomStickersByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addMembersCustomStickersByIdMember");
      }
      // verify the required parameter 'membersCustomStickers' is set
      if (membersCustomStickers === undefined || membersCustomStickers === null) {
        throw new Error("Missing the required parameter 'membersCustomStickers' when calling addMembersCustomStickersByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/customStickers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addMembersOneTimeMessagesDismissedByIdMember operation.
     * @callback module:api/MemberApi~addMembersOneTimeMessagesDismissedByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addMembersOneTimeMessagesDismissedByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MembersOneTimeMessagesDismissed} membersOneTimeMessagesDismissed Attributes of \"Members One Time Messages Dismissed\" to be added.
     * @param {module:api/MemberApi~addMembersOneTimeMessagesDismissedByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addMembersOneTimeMessagesDismissedByIdMember(idMember, key, token, membersOneTimeMessagesDismissed, callback) {
      let postBody = membersOneTimeMessagesDismissed;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling addMembersOneTimeMessagesDismissedByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addMembersOneTimeMessagesDismissedByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addMembersOneTimeMessagesDismissedByIdMember");
      }
      // verify the required parameter 'membersOneTimeMessagesDismissed' is set
      if (membersOneTimeMessagesDismissed === undefined || membersOneTimeMessagesDismissed === null) {
        throw new Error("Missing the required parameter 'membersOneTimeMessagesDismissed' when calling addMembersOneTimeMessagesDismissedByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/oneTimeMessagesDismissed', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addMembersSavedSearchesByIdMember operation.
     * @callback module:api/MemberApi~addMembersSavedSearchesByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addMembersSavedSearchesByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MembersSavedSearches} membersSavedSearches Attributes of \"Members Saved Searches\" to be added.
     * @param {module:api/MemberApi~addMembersSavedSearchesByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addMembersSavedSearchesByIdMember(idMember, key, token, membersSavedSearches, callback) {
      let postBody = membersSavedSearches;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling addMembersSavedSearchesByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addMembersSavedSearchesByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addMembersSavedSearchesByIdMember");
      }
      // verify the required parameter 'membersSavedSearches' is set
      if (membersSavedSearches === undefined || membersSavedSearches === null) {
        throw new Error("Missing the required parameter 'membersSavedSearches' when calling addMembersSavedSearchesByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/savedSearches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground operation.
     * @callback module:api/MemberApi~deleteMembersBoardBackgroundsByIdMemberByIdBoardBackgroundCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground()
     * @param {String} idMember idMember or username
     * @param {String} idBoardBackground idBoardBackground
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/MemberApi~deleteMembersBoardBackgroundsByIdMemberByIdBoardBackgroundCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground(idMember, idBoardBackground, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground");
      }
      // verify the required parameter 'idBoardBackground' is set
      if (idBoardBackground === undefined || idBoardBackground === null) {
        throw new Error("Missing the required parameter 'idBoardBackground' when calling deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground");
      }

      let pathParams = {
        'idMember': idMember,
        'idBoardBackground': idBoardBackground
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/boardBackgrounds/{idBoardBackground}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMembersBoardStarsByIdMemberByIdBoardStar operation.
     * @callback module:api/MemberApi~deleteMembersBoardStarsByIdMemberByIdBoardStarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteMembersBoardStarsByIdMemberByIdBoardStar()
     * @param {String} idMember idMember or username
     * @param {String} idBoardStar idBoardStar
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/MemberApi~deleteMembersBoardStarsByIdMemberByIdBoardStarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMembersBoardStarsByIdMemberByIdBoardStar(idMember, idBoardStar, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling deleteMembersBoardStarsByIdMemberByIdBoardStar");
      }
      // verify the required parameter 'idBoardStar' is set
      if (idBoardStar === undefined || idBoardStar === null) {
        throw new Error("Missing the required parameter 'idBoardStar' when calling deleteMembersBoardStarsByIdMemberByIdBoardStar");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteMembersBoardStarsByIdMemberByIdBoardStar");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteMembersBoardStarsByIdMemberByIdBoardStar");
      }

      let pathParams = {
        'idMember': idMember,
        'idBoardStar': idBoardStar
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/boardStars/{idBoardStar}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground operation.
     * @callback module:api/MemberApi~deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
     * @param {String} idMember idMember or username
     * @param {String} idBoardBackground idBoardBackground
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/MemberApi~deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground(idMember, idBoardBackground, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground");
      }
      // verify the required parameter 'idBoardBackground' is set
      if (idBoardBackground === undefined || idBoardBackground === null) {
        throw new Error("Missing the required parameter 'idBoardBackground' when calling deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground");
      }

      let pathParams = {
        'idMember': idMember,
        'idBoardBackground': idBoardBackground
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/customBoardBackgrounds/{idBoardBackground}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMembersCustomStickersByIdMemberByIdCustomSticker operation.
     * @callback module:api/MemberApi~deleteMembersCustomStickersByIdMemberByIdCustomStickerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteMembersCustomStickersByIdMemberByIdCustomSticker()
     * @param {String} idMember idMember or username
     * @param {String} idCustomSticker idCustomSticker
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/MemberApi~deleteMembersCustomStickersByIdMemberByIdCustomStickerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMembersCustomStickersByIdMemberByIdCustomSticker(idMember, idCustomSticker, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling deleteMembersCustomStickersByIdMemberByIdCustomSticker");
      }
      // verify the required parameter 'idCustomSticker' is set
      if (idCustomSticker === undefined || idCustomSticker === null) {
        throw new Error("Missing the required parameter 'idCustomSticker' when calling deleteMembersCustomStickersByIdMemberByIdCustomSticker");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteMembersCustomStickersByIdMemberByIdCustomSticker");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteMembersCustomStickersByIdMemberByIdCustomSticker");
      }

      let pathParams = {
        'idMember': idMember,
        'idCustomSticker': idCustomSticker
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/customStickers/{idCustomSticker}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMembersSavedSearchesByIdMemberByIdSavedSearch operation.
     * @callback module:api/MemberApi~deleteMembersSavedSearchesByIdMemberByIdSavedSearchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteMembersSavedSearchesByIdMemberByIdSavedSearch()
     * @param {String} idMember idMember or username
     * @param {String} idSavedSearch idSavedSearch
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/MemberApi~deleteMembersSavedSearchesByIdMemberByIdSavedSearchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMembersSavedSearchesByIdMemberByIdSavedSearch(idMember, idSavedSearch, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling deleteMembersSavedSearchesByIdMemberByIdSavedSearch");
      }
      // verify the required parameter 'idSavedSearch' is set
      if (idSavedSearch === undefined || idSavedSearch === null) {
        throw new Error("Missing the required parameter 'idSavedSearch' when calling deleteMembersSavedSearchesByIdMemberByIdSavedSearch");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteMembersSavedSearchesByIdMemberByIdSavedSearch");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteMembersSavedSearchesByIdMemberByIdSavedSearch");
      }

      let pathParams = {
        'idMember': idMember,
        'idSavedSearch': idSavedSearch
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/savedSearches/{idSavedSearch}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersActionsByIdMember operation.
     * @callback module:api/MemberApi~getMembersActionsByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersActionsByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [entities]  true or false
     * @param {String} [display]  true or false
     * @param {String} [filter = 'all')] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
     * @param {String} [fields = 'all')] all or a comma-separated list of: data, date, idMemberCreator or type
     * @param {String} [limit = '50')] a number from 0 to 1000
     * @param {String} [format = 'list')] One of: count, list or minimal
     * @param {String} [since] A date, null or lastView
     * @param {String} [before] A date, or null
     * @param {String} [page = '0')] Page * limit must be less than 1000
     * @param {String} [idModels] Only return actions related to these model ids
     * @param {String} [member]  true or false
     * @param {String} [memberFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [memberCreator]  true or false
     * @param {String} [memberCreatorFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {module:api/MemberApi~getMembersActionsByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersActionsByIdMember(idMember, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersActionsByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersActionsByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersActionsByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'entities': opts['entities'],
        'display': opts['display'],
        'filter': opts['filter'],
        'fields': opts['fields'],
        'limit': opts['limit'],
        'format': opts['format'],
        'since': opts['since'],
        'before': opts['before'],
        'page': opts['page'],
        'idModels': opts['idModels'],
        'member': opts['member'],
        'member_fields': opts['memberFields'],
        'memberCreator': opts['memberCreator'],
        'memberCreator_fields': opts['memberCreatorFields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersBoardBackgroundsByIdMember operation.
     * @callback module:api/MemberApi~getMembersBoardBackgroundsByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersBoardBackgroundsByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [filter = 'all')] One of: all, custom, default, none or premium
     * @param {module:api/MemberApi~getMembersBoardBackgroundsByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersBoardBackgroundsByIdMember(idMember, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersBoardBackgroundsByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersBoardBackgroundsByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersBoardBackgroundsByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'filter': opts['filter'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/boardBackgrounds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersBoardBackgroundsByIdMemberByIdBoardBackground operation.
     * @callback module:api/MemberApi~getMembersBoardBackgroundsByIdMemberByIdBoardBackgroundCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersBoardBackgroundsByIdMemberByIdBoardBackground()
     * @param {String} idMember idMember or username
     * @param {String} idBoardBackground idBoardBackground
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile
     * @param {module:api/MemberApi~getMembersBoardBackgroundsByIdMemberByIdBoardBackgroundCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersBoardBackgroundsByIdMemberByIdBoardBackground(idMember, idBoardBackground, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersBoardBackgroundsByIdMemberByIdBoardBackground");
      }
      // verify the required parameter 'idBoardBackground' is set
      if (idBoardBackground === undefined || idBoardBackground === null) {
        throw new Error("Missing the required parameter 'idBoardBackground' when calling getMembersBoardBackgroundsByIdMemberByIdBoardBackground");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersBoardBackgroundsByIdMemberByIdBoardBackground");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersBoardBackgroundsByIdMemberByIdBoardBackground");
      }

      let pathParams = {
        'idMember': idMember,
        'idBoardBackground': idBoardBackground
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/boardBackgrounds/{idBoardBackground}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersBoardStarsByIdMember operation.
     * @callback module:api/MemberApi~getMembersBoardStarsByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersBoardStarsByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/MemberApi~getMembersBoardStarsByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersBoardStarsByIdMember(idMember, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersBoardStarsByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersBoardStarsByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersBoardStarsByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/boardStars', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersBoardStarsByIdMemberByIdBoardStar operation.
     * @callback module:api/MemberApi~getMembersBoardStarsByIdMemberByIdBoardStarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersBoardStarsByIdMemberByIdBoardStar()
     * @param {String} idMember idMember or username
     * @param {String} idBoardStar idBoardStar
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/MemberApi~getMembersBoardStarsByIdMemberByIdBoardStarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersBoardStarsByIdMemberByIdBoardStar(idMember, idBoardStar, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersBoardStarsByIdMemberByIdBoardStar");
      }
      // verify the required parameter 'idBoardStar' is set
      if (idBoardStar === undefined || idBoardStar === null) {
        throw new Error("Missing the required parameter 'idBoardStar' when calling getMembersBoardStarsByIdMemberByIdBoardStar");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersBoardStarsByIdMemberByIdBoardStar");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersBoardStarsByIdMemberByIdBoardStar");
      }

      let pathParams = {
        'idMember': idMember,
        'idBoardStar': idBoardStar
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/boardStars/{idBoardStar}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersBoardsByIdMember operation.
     * @callback module:api/MemberApi~getMembersBoardsByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersBoardsByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [filter = 'all')] all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
     * @param {String} [fields = 'all')] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
     * @param {String} [actions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
     * @param {String} [actionsEntities]  true or false
     * @param {String} [actionsLimit = '50')] a number from 0 to 1000
     * @param {String} [actionsFormat = 'list')] One of: count, list or minimal
     * @param {String} [actionsSince] A date, null or lastView
     * @param {String} [actionFields = 'all')] all or a comma-separated list of: data, date, idMemberCreator or type
     * @param {String} [memberships = 'none')] all or a comma-separated list of: active, admin, deactivated, me or normal
     * @param {String} [organization]  true or false
     * @param {String} [organizationFields = 'name and displayName')] all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
     * @param {String} [lists = 'none')] One of: all, closed, none or open
     * @param {module:api/MemberApi~getMembersBoardsByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersBoardsByIdMember(idMember, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersBoardsByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersBoardsByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersBoardsByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'filter': opts['filter'],
        'fields': opts['fields'],
        'actions': opts['actions'],
        'actions_entities': opts['actionsEntities'],
        'actions_limit': opts['actionsLimit'],
        'actions_format': opts['actionsFormat'],
        'actions_since': opts['actionsSince'],
        'action_fields': opts['actionFields'],
        'memberships': opts['memberships'],
        'organization': opts['organization'],
        'organization_fields': opts['organizationFields'],
        'lists': opts['lists'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/boards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersBoardsByIdMemberByFilter operation.
     * @callback module:api/MemberApi~getMembersBoardsByIdMemberByFilterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersBoardsByIdMemberByFilter()
     * @param {String} idMember idMember or username
     * @param {String} filter filter
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/MemberApi~getMembersBoardsByIdMemberByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersBoardsByIdMemberByFilter(idMember, filter, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersBoardsByIdMemberByFilter");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getMembersBoardsByIdMemberByFilter");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersBoardsByIdMemberByFilter");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersBoardsByIdMemberByFilter");
      }

      let pathParams = {
        'idMember': idMember,
        'filter': filter
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/boards/{filter}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersBoardsInvitedByIdMember operation.
     * @callback module:api/MemberApi~getMembersBoardsInvitedByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersBoardsInvitedByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
     * @param {module:api/MemberApi~getMembersBoardsInvitedByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersBoardsInvitedByIdMember(idMember, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersBoardsInvitedByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersBoardsInvitedByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersBoardsInvitedByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/boardsInvited', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersBoardsInvitedByIdMemberByField operation.
     * @callback module:api/MemberApi~getMembersBoardsInvitedByIdMemberByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersBoardsInvitedByIdMemberByField()
     * @param {String} idMember idMember or username
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/MemberApi~getMembersBoardsInvitedByIdMemberByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersBoardsInvitedByIdMemberByField(idMember, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersBoardsInvitedByIdMemberByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getMembersBoardsInvitedByIdMemberByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersBoardsInvitedByIdMemberByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersBoardsInvitedByIdMemberByField");
      }

      let pathParams = {
        'idMember': idMember,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/boardsInvited/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersByIdMember operation.
     * @callback module:api/MemberApi~getMembersByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersByIdMember()
     * If you specify 'me' as the username, this call will respond as if you had supplied the username associated with the supplied token
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [actions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
     * @param {String} [actionsEntities]  true or false
     * @param {String} [actionsDisplay]  true or false
     * @param {String} [actionsLimit = '50')] a number from 0 to 1000
     * @param {String} [actionFields = 'all')] all or a comma-separated list of: data, date, idMemberCreator or type
     * @param {String} [actionSince] A date, null or lastView
     * @param {String} [actionBefore] A date, or null
     * @param {String} [cards = 'none')] One of: all, closed, none, open or visible
     * @param {String} [cardFields = 'all')] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
     * @param {String} [cardMembers]  true or false
     * @param {String} [cardMemberFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [cardAttachments] A boolean value or &quot;cover&quot; for only card cover attachments
     * @param {String} [cardAttachmentFields = 'url and previews')] all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
     * @param {String} [cardStickers]  true or false
     * @param {String} [boards] all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
     * @param {String} [boardFields = 'name, closed, idOrganization and pinned')] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
     * @param {String} [boardActions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
     * @param {String} [boardActionsEntities]  true or false
     * @param {String} [boardActionsDisplay]  true or false
     * @param {String} [boardActionsFormat = 'list')] One of: count, list or minimal
     * @param {String} [boardActionsSince] A date, null or lastView
     * @param {String} [boardActionsLimit = '50')] a number from 0 to 1000
     * @param {String} [boardActionFields = 'all')] all or a comma-separated list of: data, date, idMemberCreator or type
     * @param {String} [boardLists = 'none')] One of: all, closed, none or open
     * @param {String} [boardMemberships = 'none')] all or a comma-separated list of: active, admin, deactivated, me or normal
     * @param {String} [boardOrganization]  true or false
     * @param {String} [boardOrganizationFields = 'name and displayName')] all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
     * @param {String} [boardsInvited] all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
     * @param {String} [boardsInvitedFields = 'name, closed, idOrganization and pinned')] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
     * @param {String} [boardStars]  true or false
     * @param {String} [savedSearches]  true or false
     * @param {String} [organizations = 'none')] One of: all, members, none or public
     * @param {String} [organizationFields = 'all')] all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
     * @param {String} [organizationPaidAccount]  true or false
     * @param {String} [organizationsInvited = 'none')] One of: all, members, none or public
     * @param {String} [organizationsInvitedFields = 'all')] all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
     * @param {String} [notifications] all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard
     * @param {String} [notificationsEntities]  true or false
     * @param {String} [notificationsDisplay]  true or false
     * @param {String} [notificationsLimit = '50')] a number from 1 to 1000
     * @param {String} [notificationFields = 'all')] all or a comma-separated list of: data, date, idMemberCreator, type or unread
     * @param {String} [notificationMemberCreator]  true or false
     * @param {String} [notificationMemberCreatorFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [notificationBefore] An id, or null
     * @param {String} [notificationSince] An id, or null
     * @param {String} [tokens = 'none')] One of: all or none
     * @param {String} [paidAccount]  true or false
     * @param {String} [boardBackgrounds = 'none')] One of: all, custom, default, none or premium
     * @param {String} [customBoardBackgrounds = 'none')] One of: all or none
     * @param {String} [customStickers = 'none')] One of: all or none
     * @param {String} [customEmoji = 'none')] One of: all or none
     * @param {String} [fields = 'all')] all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
     * @param {module:api/MemberApi~getMembersByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersByIdMember(idMember, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'actions': opts['actions'],
        'actions_entities': opts['actionsEntities'],
        'actions_display': opts['actionsDisplay'],
        'actions_limit': opts['actionsLimit'],
        'action_fields': opts['actionFields'],
        'action_since': opts['actionSince'],
        'action_before': opts['actionBefore'],
        'cards': opts['cards'],
        'card_fields': opts['cardFields'],
        'card_members': opts['cardMembers'],
        'card_member_fields': opts['cardMemberFields'],
        'card_attachments': opts['cardAttachments'],
        'card_attachment_fields': opts['cardAttachmentFields'],
        'card_stickers': opts['cardStickers'],
        'boards': opts['boards'],
        'board_fields': opts['boardFields'],
        'board_actions': opts['boardActions'],
        'board_actions_entities': opts['boardActionsEntities'],
        'board_actions_display': opts['boardActionsDisplay'],
        'board_actions_format': opts['boardActionsFormat'],
        'board_actions_since': opts['boardActionsSince'],
        'board_actions_limit': opts['boardActionsLimit'],
        'board_action_fields': opts['boardActionFields'],
        'board_lists': opts['boardLists'],
        'board_memberships': opts['boardMemberships'],
        'board_organization': opts['boardOrganization'],
        'board_organization_fields': opts['boardOrganizationFields'],
        'boardsInvited': opts['boardsInvited'],
        'boardsInvited_fields': opts['boardsInvitedFields'],
        'boardStars': opts['boardStars'],
        'savedSearches': opts['savedSearches'],
        'organizations': opts['organizations'],
        'organization_fields': opts['organizationFields'],
        'organization_paid_account': opts['organizationPaidAccount'],
        'organizationsInvited': opts['organizationsInvited'],
        'organizationsInvited_fields': opts['organizationsInvitedFields'],
        'notifications': opts['notifications'],
        'notifications_entities': opts['notificationsEntities'],
        'notifications_display': opts['notificationsDisplay'],
        'notifications_limit': opts['notificationsLimit'],
        'notification_fields': opts['notificationFields'],
        'notification_memberCreator': opts['notificationMemberCreator'],
        'notification_memberCreator_fields': opts['notificationMemberCreatorFields'],
        'notification_before': opts['notificationBefore'],
        'notification_since': opts['notificationSince'],
        'tokens': opts['tokens'],
        'paid_account': opts['paidAccount'],
        'boardBackgrounds': opts['boardBackgrounds'],
        'customBoardBackgrounds': opts['customBoardBackgrounds'],
        'customStickers': opts['customStickers'],
        'customEmoji': opts['customEmoji'],
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersByIdMemberByField operation.
     * @callback module:api/MemberApi~getMembersByIdMemberByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersByIdMemberByField()
     * @param {String} idMember idMember or username
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/MemberApi~getMembersByIdMemberByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersByIdMemberByField(idMember, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersByIdMemberByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getMembersByIdMemberByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersByIdMemberByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersByIdMemberByField");
      }

      let pathParams = {
        'idMember': idMember,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersCardsByIdMember operation.
     * @callback module:api/MemberApi~getMembersCardsByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersCardsByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [actions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
     * @param {String} [attachments] A boolean value or &quot;cover&quot; for only card cover attachments
     * @param {String} [attachmentFields = 'all')] all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
     * @param {String} [stickers]  true or false
     * @param {String} [members]  true or false
     * @param {String} [memberFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [checkItemStates]  true or false
     * @param {String} [checklists = 'none')] One of: all or none
     * @param {String} [limit] a number from 1 to 1000
     * @param {String} [since] A date, or null
     * @param {String} [before] A date, or null
     * @param {String} [filter = 'visible')] One of: all, closed, none, open or visible
     * @param {String} [fields = 'all')] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
     * @param {module:api/MemberApi~getMembersCardsByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersCardsByIdMember(idMember, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersCardsByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersCardsByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersCardsByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'actions': opts['actions'],
        'attachments': opts['attachments'],
        'attachment_fields': opts['attachmentFields'],
        'stickers': opts['stickers'],
        'members': opts['members'],
        'member_fields': opts['memberFields'],
        'checkItemStates': opts['checkItemStates'],
        'checklists': opts['checklists'],
        'limit': opts['limit'],
        'since': opts['since'],
        'before': opts['before'],
        'filter': opts['filter'],
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/cards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersCardsByIdMemberByFilter operation.
     * @callback module:api/MemberApi~getMembersCardsByIdMemberByFilterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersCardsByIdMemberByFilter()
     * @param {String} idMember idMember or username
     * @param {String} filter filter
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/MemberApi~getMembersCardsByIdMemberByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersCardsByIdMemberByFilter(idMember, filter, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersCardsByIdMemberByFilter");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getMembersCardsByIdMemberByFilter");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersCardsByIdMemberByFilter");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersCardsByIdMemberByFilter");
      }

      let pathParams = {
        'idMember': idMember,
        'filter': filter
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/cards/{filter}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersCustomBoardBackgroundsByIdMember operation.
     * @callback module:api/MemberApi~getMembersCustomBoardBackgroundsByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersCustomBoardBackgroundsByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [filter = 'all')] One of: all or none
     * @param {module:api/MemberApi~getMembersCustomBoardBackgroundsByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersCustomBoardBackgroundsByIdMember(idMember, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersCustomBoardBackgroundsByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersCustomBoardBackgroundsByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersCustomBoardBackgroundsByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'filter': opts['filter'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/customBoardBackgrounds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground operation.
     * @callback module:api/MemberApi~getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
     * @param {String} idMember idMember or username
     * @param {String} idBoardBackground idBoardBackground
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile
     * @param {module:api/MemberApi~getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground(idMember, idBoardBackground, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground");
      }
      // verify the required parameter 'idBoardBackground' is set
      if (idBoardBackground === undefined || idBoardBackground === null) {
        throw new Error("Missing the required parameter 'idBoardBackground' when calling getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground");
      }

      let pathParams = {
        'idMember': idMember,
        'idBoardBackground': idBoardBackground
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/customBoardBackgrounds/{idBoardBackground}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersCustomEmojiByIdMember operation.
     * @callback module:api/MemberApi~getMembersCustomEmojiByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersCustomEmojiByIdMember()
     * This gets the list of all of the user’s uploaded emoji
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [filter = 'all')] One of: all or none
     * @param {module:api/MemberApi~getMembersCustomEmojiByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersCustomEmojiByIdMember(idMember, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersCustomEmojiByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersCustomEmojiByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersCustomEmojiByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'filter': opts['filter'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/customEmoji', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersCustomEmojiByIdMemberByIdCustomEmoji operation.
     * @callback module:api/MemberApi~getMembersCustomEmojiByIdMemberByIdCustomEmojiCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersCustomEmojiByIdMemberByIdCustomEmoji()
     * @param {String} idMember idMember or username
     * @param {String} idCustomEmoji idCustomEmoji
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: name or url
     * @param {module:api/MemberApi~getMembersCustomEmojiByIdMemberByIdCustomEmojiCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersCustomEmojiByIdMemberByIdCustomEmoji(idMember, idCustomEmoji, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersCustomEmojiByIdMemberByIdCustomEmoji");
      }
      // verify the required parameter 'idCustomEmoji' is set
      if (idCustomEmoji === undefined || idCustomEmoji === null) {
        throw new Error("Missing the required parameter 'idCustomEmoji' when calling getMembersCustomEmojiByIdMemberByIdCustomEmoji");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersCustomEmojiByIdMemberByIdCustomEmoji");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersCustomEmojiByIdMemberByIdCustomEmoji");
      }

      let pathParams = {
        'idMember': idMember,
        'idCustomEmoji': idCustomEmoji
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/customEmoji/{idCustomEmoji}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersCustomStickersByIdMember operation.
     * @callback module:api/MemberApi~getMembersCustomStickersByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersCustomStickersByIdMember()
     * This gets a list of all of the user’s uploaded stickers
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [filter = 'all')] One of: all or none
     * @param {module:api/MemberApi~getMembersCustomStickersByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersCustomStickersByIdMember(idMember, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersCustomStickersByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersCustomStickersByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersCustomStickersByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'filter': opts['filter'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/customStickers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersCustomStickersByIdMemberByIdCustomSticker operation.
     * @callback module:api/MemberApi~getMembersCustomStickersByIdMemberByIdCustomStickerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersCustomStickersByIdMemberByIdCustomSticker()
     * @param {String} idMember idMember or username
     * @param {String} idCustomSticker idCustomSticker
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: scaled or url
     * @param {module:api/MemberApi~getMembersCustomStickersByIdMemberByIdCustomStickerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersCustomStickersByIdMemberByIdCustomSticker(idMember, idCustomSticker, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersCustomStickersByIdMemberByIdCustomSticker");
      }
      // verify the required parameter 'idCustomSticker' is set
      if (idCustomSticker === undefined || idCustomSticker === null) {
        throw new Error("Missing the required parameter 'idCustomSticker' when calling getMembersCustomStickersByIdMemberByIdCustomSticker");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersCustomStickersByIdMemberByIdCustomSticker");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersCustomStickersByIdMemberByIdCustomSticker");
      }

      let pathParams = {
        'idMember': idMember,
        'idCustomSticker': idCustomSticker
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/customStickers/{idCustomSticker}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersDeltasByIdMember operation.
     * @callback module:api/MemberApi~getMembersDeltasByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersDeltasByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} tags A valid tag for subscribing
     * @param {String} ixLastUpdate a number from -1 to Infinity
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/MemberApi~getMembersDeltasByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersDeltasByIdMember(idMember, tags, ixLastUpdate, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersDeltasByIdMember");
      }
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling getMembersDeltasByIdMember");
      }
      // verify the required parameter 'ixLastUpdate' is set
      if (ixLastUpdate === undefined || ixLastUpdate === null) {
        throw new Error("Missing the required parameter 'ixLastUpdate' when calling getMembersDeltasByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersDeltasByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersDeltasByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'tags': tags,
        'ixLastUpdate': ixLastUpdate,
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/deltas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersNotificationsByIdMember operation.
     * @callback module:api/MemberApi~getMembersNotificationsByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersNotificationsByIdMember()
     * You can only read the notifications for the member associated with the supplied token
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [entities]  true or false
     * @param {String} [display]  true or false
     * @param {String} [filter = 'all')] all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard
     * @param {String} [readFilter = 'all')] One of: all, read or unread
     * @param {String} [fields = 'all')] all or a comma-separated list of: data, date, idMemberCreator, type or unread
     * @param {String} [limit = '50')] a number from 1 to 1000
     * @param {String} [page = '0')] a number from 0 to 100
     * @param {String} [before] An id, or null
     * @param {String} [since] An id, or null
     * @param {String} [memberCreator]  true or false
     * @param {String} [memberCreatorFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {module:api/MemberApi~getMembersNotificationsByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersNotificationsByIdMember(idMember, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersNotificationsByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersNotificationsByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersNotificationsByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'entities': opts['entities'],
        'display': opts['display'],
        'filter': opts['filter'],
        'read_filter': opts['readFilter'],
        'fields': opts['fields'],
        'limit': opts['limit'],
        'page': opts['page'],
        'before': opts['before'],
        'since': opts['since'],
        'memberCreator': opts['memberCreator'],
        'memberCreator_fields': opts['memberCreatorFields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/notifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersNotificationsByIdMemberByFilter operation.
     * @callback module:api/MemberApi~getMembersNotificationsByIdMemberByFilterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersNotificationsByIdMemberByFilter()
     * @param {String} idMember idMember or username
     * @param {String} filter filter
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/MemberApi~getMembersNotificationsByIdMemberByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersNotificationsByIdMemberByFilter(idMember, filter, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersNotificationsByIdMemberByFilter");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getMembersNotificationsByIdMemberByFilter");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersNotificationsByIdMemberByFilter");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersNotificationsByIdMemberByFilter");
      }

      let pathParams = {
        'idMember': idMember,
        'filter': filter
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/notifications/{filter}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersOrganizationsByIdMember operation.
     * @callback module:api/MemberApi~getMembersOrganizationsByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersOrganizationsByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [filter = 'all')] One of: all, members, none or public
     * @param {String} [fields = 'all')] all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
     * @param {String} [paidAccount]  true or false
     * @param {module:api/MemberApi~getMembersOrganizationsByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersOrganizationsByIdMember(idMember, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersOrganizationsByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersOrganizationsByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersOrganizationsByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'filter': opts['filter'],
        'fields': opts['fields'],
        'paid_account': opts['paidAccount'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/organizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersOrganizationsByIdMemberByFilter operation.
     * @callback module:api/MemberApi~getMembersOrganizationsByIdMemberByFilterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersOrganizationsByIdMemberByFilter()
     * @param {String} idMember idMember or username
     * @param {String} filter filter
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/MemberApi~getMembersOrganizationsByIdMemberByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersOrganizationsByIdMemberByFilter(idMember, filter, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersOrganizationsByIdMemberByFilter");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getMembersOrganizationsByIdMemberByFilter");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersOrganizationsByIdMemberByFilter");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersOrganizationsByIdMemberByFilter");
      }

      let pathParams = {
        'idMember': idMember,
        'filter': filter
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/organizations/{filter}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersOrganizationsInvitedByIdMember operation.
     * @callback module:api/MemberApi~getMembersOrganizationsInvitedByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersOrganizationsInvitedByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
     * @param {module:api/MemberApi~getMembersOrganizationsInvitedByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersOrganizationsInvitedByIdMember(idMember, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersOrganizationsInvitedByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersOrganizationsInvitedByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersOrganizationsInvitedByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/organizationsInvited', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersOrganizationsInvitedByIdMemberByField operation.
     * @callback module:api/MemberApi~getMembersOrganizationsInvitedByIdMemberByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersOrganizationsInvitedByIdMemberByField()
     * @param {String} idMember idMember or username
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/MemberApi~getMembersOrganizationsInvitedByIdMemberByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersOrganizationsInvitedByIdMemberByField(idMember, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersOrganizationsInvitedByIdMemberByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getMembersOrganizationsInvitedByIdMemberByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersOrganizationsInvitedByIdMemberByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersOrganizationsInvitedByIdMemberByField");
      }

      let pathParams = {
        'idMember': idMember,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/organizationsInvited/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersSavedSearchesByIdMember operation.
     * @callback module:api/MemberApi~getMembersSavedSearchesByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersSavedSearchesByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/MemberApi~getMembersSavedSearchesByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersSavedSearchesByIdMember(idMember, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersSavedSearchesByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersSavedSearchesByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersSavedSearchesByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/savedSearches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersSavedSearchesByIdMemberByIdSavedSearch operation.
     * @callback module:api/MemberApi~getMembersSavedSearchesByIdMemberByIdSavedSearchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersSavedSearchesByIdMemberByIdSavedSearch()
     * @param {String} idMember idMember or username
     * @param {String} idSavedSearch idSavedSearch
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/MemberApi~getMembersSavedSearchesByIdMemberByIdSavedSearchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersSavedSearchesByIdMemberByIdSavedSearch(idMember, idSavedSearch, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersSavedSearchesByIdMemberByIdSavedSearch");
      }
      // verify the required parameter 'idSavedSearch' is set
      if (idSavedSearch === undefined || idSavedSearch === null) {
        throw new Error("Missing the required parameter 'idSavedSearch' when calling getMembersSavedSearchesByIdMemberByIdSavedSearch");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersSavedSearchesByIdMemberByIdSavedSearch");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersSavedSearchesByIdMemberByIdSavedSearch");
      }

      let pathParams = {
        'idMember': idMember,
        'idSavedSearch': idSavedSearch
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/savedSearches/{idSavedSearch}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembersTokensByIdMember operation.
     * @callback module:api/MemberApi~getMembersTokensByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMembersTokensByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [filter = 'all')] One of: all or none
     * @param {module:api/MemberApi~getMembersTokensByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMembersTokensByIdMember(idMember, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getMembersTokensByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getMembersTokensByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getMembersTokensByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'filter': opts['filter'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMembersAvatarSourceByIdMember operation.
     * @callback module:api/MemberApi~updateMembersAvatarSourceByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateMembersAvatarSourceByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MembersAvatarSource} membersAvatarSource Attributes of \"Members Avatar Source\" to be updated.
     * @param {module:api/MemberApi~updateMembersAvatarSourceByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMembersAvatarSourceByIdMember(idMember, key, token, membersAvatarSource, callback) {
      let postBody = membersAvatarSource;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling updateMembersAvatarSourceByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateMembersAvatarSourceByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateMembersAvatarSourceByIdMember");
      }
      // verify the required parameter 'membersAvatarSource' is set
      if (membersAvatarSource === undefined || membersAvatarSource === null) {
        throw new Error("Missing the required parameter 'membersAvatarSource' when calling updateMembersAvatarSourceByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/avatarSource', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMembersBioByIdMember operation.
     * @callback module:api/MemberApi~updateMembersBioByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateMembersBioByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MembersBio} membersBio Attributes of \"Members Bio\" to be updated.
     * @param {module:api/MemberApi~updateMembersBioByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMembersBioByIdMember(idMember, key, token, membersBio, callback) {
      let postBody = membersBio;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling updateMembersBioByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateMembersBioByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateMembersBioByIdMember");
      }
      // verify the required parameter 'membersBio' is set
      if (membersBio === undefined || membersBio === null) {
        throw new Error("Missing the required parameter 'membersBio' when calling updateMembersBioByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/bio', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMembersBoardBackgroundsByIdMemberByIdBoardBackground operation.
     * @callback module:api/MemberApi~updateMembersBoardBackgroundsByIdMemberByIdBoardBackgroundCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateMembersBoardBackgroundsByIdMemberByIdBoardBackground()
     * @param {String} idMember idMember or username
     * @param {String} idBoardBackground idBoardBackground
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MembersBoardBackgrounds} membersBoardBackgrounds Attributes of \"Members Board Backgrounds\" to be updated.
     * @param {module:api/MemberApi~updateMembersBoardBackgroundsByIdMemberByIdBoardBackgroundCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMembersBoardBackgroundsByIdMemberByIdBoardBackground(idMember, idBoardBackground, key, token, membersBoardBackgrounds, callback) {
      let postBody = membersBoardBackgrounds;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling updateMembersBoardBackgroundsByIdMemberByIdBoardBackground");
      }
      // verify the required parameter 'idBoardBackground' is set
      if (idBoardBackground === undefined || idBoardBackground === null) {
        throw new Error("Missing the required parameter 'idBoardBackground' when calling updateMembersBoardBackgroundsByIdMemberByIdBoardBackground");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateMembersBoardBackgroundsByIdMemberByIdBoardBackground");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateMembersBoardBackgroundsByIdMemberByIdBoardBackground");
      }
      // verify the required parameter 'membersBoardBackgrounds' is set
      if (membersBoardBackgrounds === undefined || membersBoardBackgrounds === null) {
        throw new Error("Missing the required parameter 'membersBoardBackgrounds' when calling updateMembersBoardBackgroundsByIdMemberByIdBoardBackground");
      }

      let pathParams = {
        'idMember': idMember,
        'idBoardBackground': idBoardBackground
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/boardBackgrounds/{idBoardBackground}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMembersBoardStarsByIdMemberByIdBoardStar operation.
     * @callback module:api/MemberApi~updateMembersBoardStarsByIdMemberByIdBoardStarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateMembersBoardStarsByIdMemberByIdBoardStar()
     * @param {String} idMember idMember or username
     * @param {String} idBoardStar idBoardStar
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MembersBoardStars} membersBoardStars Attributes of \"Members Board Stars\" to be updated.
     * @param {module:api/MemberApi~updateMembersBoardStarsByIdMemberByIdBoardStarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMembersBoardStarsByIdMemberByIdBoardStar(idMember, idBoardStar, key, token, membersBoardStars, callback) {
      let postBody = membersBoardStars;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling updateMembersBoardStarsByIdMemberByIdBoardStar");
      }
      // verify the required parameter 'idBoardStar' is set
      if (idBoardStar === undefined || idBoardStar === null) {
        throw new Error("Missing the required parameter 'idBoardStar' when calling updateMembersBoardStarsByIdMemberByIdBoardStar");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateMembersBoardStarsByIdMemberByIdBoardStar");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateMembersBoardStarsByIdMemberByIdBoardStar");
      }
      // verify the required parameter 'membersBoardStars' is set
      if (membersBoardStars === undefined || membersBoardStars === null) {
        throw new Error("Missing the required parameter 'membersBoardStars' when calling updateMembersBoardStarsByIdMemberByIdBoardStar");
      }

      let pathParams = {
        'idMember': idMember,
        'idBoardStar': idBoardStar
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/boardStars/{idBoardStar}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar operation.
     * @callback module:api/MemberApi~updateMembersBoardStarsIdBoardByIdMemberByIdBoardStarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar()
     * @param {String} idMember idMember or username
     * @param {String} idBoardStar idBoardStar
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MembersBoardStarsIdBoard} membersBoardStarsIdBoard Attributes of \"Members Board Stars Id Board\" to be updated.
     * @param {module:api/MemberApi~updateMembersBoardStarsIdBoardByIdMemberByIdBoardStarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar(idMember, idBoardStar, key, token, membersBoardStarsIdBoard, callback) {
      let postBody = membersBoardStarsIdBoard;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar");
      }
      // verify the required parameter 'idBoardStar' is set
      if (idBoardStar === undefined || idBoardStar === null) {
        throw new Error("Missing the required parameter 'idBoardStar' when calling updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar");
      }
      // verify the required parameter 'membersBoardStarsIdBoard' is set
      if (membersBoardStarsIdBoard === undefined || membersBoardStarsIdBoard === null) {
        throw new Error("Missing the required parameter 'membersBoardStarsIdBoard' when calling updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar");
      }

      let pathParams = {
        'idMember': idMember,
        'idBoardStar': idBoardStar
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/boardStars/{idBoardStar}/idBoard', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMembersBoardStarsPosByIdMemberByIdBoardStar operation.
     * @callback module:api/MemberApi~updateMembersBoardStarsPosByIdMemberByIdBoardStarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateMembersBoardStarsPosByIdMemberByIdBoardStar()
     * @param {String} idMember idMember or username
     * @param {String} idBoardStar idBoardStar
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MembersBoardStarsPos} membersBoardStarsPos Attributes of \"Members Board Stars Pos\" to be updated.
     * @param {module:api/MemberApi~updateMembersBoardStarsPosByIdMemberByIdBoardStarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMembersBoardStarsPosByIdMemberByIdBoardStar(idMember, idBoardStar, key, token, membersBoardStarsPos, callback) {
      let postBody = membersBoardStarsPos;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling updateMembersBoardStarsPosByIdMemberByIdBoardStar");
      }
      // verify the required parameter 'idBoardStar' is set
      if (idBoardStar === undefined || idBoardStar === null) {
        throw new Error("Missing the required parameter 'idBoardStar' when calling updateMembersBoardStarsPosByIdMemberByIdBoardStar");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateMembersBoardStarsPosByIdMemberByIdBoardStar");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateMembersBoardStarsPosByIdMemberByIdBoardStar");
      }
      // verify the required parameter 'membersBoardStarsPos' is set
      if (membersBoardStarsPos === undefined || membersBoardStarsPos === null) {
        throw new Error("Missing the required parameter 'membersBoardStarsPos' when calling updateMembersBoardStarsPosByIdMemberByIdBoardStar");
      }

      let pathParams = {
        'idMember': idMember,
        'idBoardStar': idBoardStar
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/boardStars/{idBoardStar}/pos', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMembersByIdMember operation.
     * @callback module:api/MemberApi~updateMembersByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateMembersByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/Members} members Attributes of \"Members\" to be updated.
     * @param {module:api/MemberApi~updateMembersByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMembersByIdMember(idMember, key, token, members, callback) {
      let postBody = members;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling updateMembersByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateMembersByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateMembersByIdMember");
      }
      // verify the required parameter 'members' is set
      if (members === undefined || members === null) {
        throw new Error("Missing the required parameter 'members' when calling updateMembersByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground operation.
     * @callback module:api/MemberApi~updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
     * @param {String} idMember idMember or username
     * @param {String} idBoardBackground idBoardBackground
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MembersCustomBoardBackgrounds} membersCustomBoardBackgrounds Attributes of \"Members Custom Board Backgrounds\" to be updated.
     * @param {module:api/MemberApi~updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackgroundCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground(idMember, idBoardBackground, key, token, membersCustomBoardBackgrounds, callback) {
      let postBody = membersCustomBoardBackgrounds;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground");
      }
      // verify the required parameter 'idBoardBackground' is set
      if (idBoardBackground === undefined || idBoardBackground === null) {
        throw new Error("Missing the required parameter 'idBoardBackground' when calling updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground");
      }
      // verify the required parameter 'membersCustomBoardBackgrounds' is set
      if (membersCustomBoardBackgrounds === undefined || membersCustomBoardBackgrounds === null) {
        throw new Error("Missing the required parameter 'membersCustomBoardBackgrounds' when calling updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground");
      }

      let pathParams = {
        'idMember': idMember,
        'idBoardBackground': idBoardBackground
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/customBoardBackgrounds/{idBoardBackground}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMembersFullNameByIdMember operation.
     * @callback module:api/MemberApi~updateMembersFullNameByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateMembersFullNameByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MembersFullName} membersFullName Attributes of \"Members Full Name\" to be updated.
     * @param {module:api/MemberApi~updateMembersFullNameByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMembersFullNameByIdMember(idMember, key, token, membersFullName, callback) {
      let postBody = membersFullName;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling updateMembersFullNameByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateMembersFullNameByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateMembersFullNameByIdMember");
      }
      // verify the required parameter 'membersFullName' is set
      if (membersFullName === undefined || membersFullName === null) {
        throw new Error("Missing the required parameter 'membersFullName' when calling updateMembersFullNameByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/fullName', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMembersInitialsByIdMember operation.
     * @callback module:api/MemberApi~updateMembersInitialsByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateMembersInitialsByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MembersInitials} membersInitials Attributes of \"Members Initials\" to be updated.
     * @param {module:api/MemberApi~updateMembersInitialsByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMembersInitialsByIdMember(idMember, key, token, membersInitials, callback) {
      let postBody = membersInitials;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling updateMembersInitialsByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateMembersInitialsByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateMembersInitialsByIdMember");
      }
      // verify the required parameter 'membersInitials' is set
      if (membersInitials === undefined || membersInitials === null) {
        throw new Error("Missing the required parameter 'membersInitials' when calling updateMembersInitialsByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/initials', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMembersPrefsColorBlindByIdMember operation.
     * @callback module:api/MemberApi~updateMembersPrefsColorBlindByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateMembersPrefsColorBlindByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/PrefsColorBlind} prefsColorBlind Attributes of \"Prefs Color Blind\" to be updated.
     * @param {module:api/MemberApi~updateMembersPrefsColorBlindByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMembersPrefsColorBlindByIdMember(idMember, key, token, prefsColorBlind, callback) {
      let postBody = prefsColorBlind;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling updateMembersPrefsColorBlindByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateMembersPrefsColorBlindByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateMembersPrefsColorBlindByIdMember");
      }
      // verify the required parameter 'prefsColorBlind' is set
      if (prefsColorBlind === undefined || prefsColorBlind === null) {
        throw new Error("Missing the required parameter 'prefsColorBlind' when calling updateMembersPrefsColorBlindByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/prefs/colorBlind', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMembersPrefsLocaleByIdMember operation.
     * @callback module:api/MemberApi~updateMembersPrefsLocaleByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateMembersPrefsLocaleByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/PrefsLocale} prefsLocale Attributes of \"Prefs Locale\" to be updated.
     * @param {module:api/MemberApi~updateMembersPrefsLocaleByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMembersPrefsLocaleByIdMember(idMember, key, token, prefsLocale, callback) {
      let postBody = prefsLocale;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling updateMembersPrefsLocaleByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateMembersPrefsLocaleByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateMembersPrefsLocaleByIdMember");
      }
      // verify the required parameter 'prefsLocale' is set
      if (prefsLocale === undefined || prefsLocale === null) {
        throw new Error("Missing the required parameter 'prefsLocale' when calling updateMembersPrefsLocaleByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/prefs/locale', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMembersPrefsMinutesBetweenSummariesByIdMember operation.
     * @callback module:api/MemberApi~updateMembersPrefsMinutesBetweenSummariesByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateMembersPrefsMinutesBetweenSummariesByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/PrefsMinutesBetweenSummaries} prefsMinutesBetweenSummaries Attributes of \"Prefs Minutes Between Summaries\" to be updated.
     * @param {module:api/MemberApi~updateMembersPrefsMinutesBetweenSummariesByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMembersPrefsMinutesBetweenSummariesByIdMember(idMember, key, token, prefsMinutesBetweenSummaries, callback) {
      let postBody = prefsMinutesBetweenSummaries;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling updateMembersPrefsMinutesBetweenSummariesByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateMembersPrefsMinutesBetweenSummariesByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateMembersPrefsMinutesBetweenSummariesByIdMember");
      }
      // verify the required parameter 'prefsMinutesBetweenSummaries' is set
      if (prefsMinutesBetweenSummaries === undefined || prefsMinutesBetweenSummaries === null) {
        throw new Error("Missing the required parameter 'prefsMinutesBetweenSummaries' when calling updateMembersPrefsMinutesBetweenSummariesByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/prefs/minutesBetweenSummaries', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMembersSavedSearchesByIdMemberByIdSavedSearch operation.
     * @callback module:api/MemberApi~updateMembersSavedSearchesByIdMemberByIdSavedSearchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateMembersSavedSearchesByIdMemberByIdSavedSearch()
     * @param {String} idMember idMember or username
     * @param {String} idSavedSearch idSavedSearch
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MembersSavedSearches} membersSavedSearches Attributes of \"Members Saved Searches\" to be updated.
     * @param {module:api/MemberApi~updateMembersSavedSearchesByIdMemberByIdSavedSearchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMembersSavedSearchesByIdMemberByIdSavedSearch(idMember, idSavedSearch, key, token, membersSavedSearches, callback) {
      let postBody = membersSavedSearches;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling updateMembersSavedSearchesByIdMemberByIdSavedSearch");
      }
      // verify the required parameter 'idSavedSearch' is set
      if (idSavedSearch === undefined || idSavedSearch === null) {
        throw new Error("Missing the required parameter 'idSavedSearch' when calling updateMembersSavedSearchesByIdMemberByIdSavedSearch");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateMembersSavedSearchesByIdMemberByIdSavedSearch");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateMembersSavedSearchesByIdMemberByIdSavedSearch");
      }
      // verify the required parameter 'membersSavedSearches' is set
      if (membersSavedSearches === undefined || membersSavedSearches === null) {
        throw new Error("Missing the required parameter 'membersSavedSearches' when calling updateMembersSavedSearchesByIdMemberByIdSavedSearch");
      }

      let pathParams = {
        'idMember': idMember,
        'idSavedSearch': idSavedSearch
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/savedSearches/{idSavedSearch}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMembersSavedSearchesNameByIdMemberByIdSavedSearch operation.
     * @callback module:api/MemberApi~updateMembersSavedSearchesNameByIdMemberByIdSavedSearchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateMembersSavedSearchesNameByIdMemberByIdSavedSearch()
     * @param {String} idMember idMember or username
     * @param {String} idSavedSearch idSavedSearch
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MembersSavedSearchesName} membersSavedSearchesName Attributes of \"Members Saved Searches Name\" to be updated.
     * @param {module:api/MemberApi~updateMembersSavedSearchesNameByIdMemberByIdSavedSearchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMembersSavedSearchesNameByIdMemberByIdSavedSearch(idMember, idSavedSearch, key, token, membersSavedSearchesName, callback) {
      let postBody = membersSavedSearchesName;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling updateMembersSavedSearchesNameByIdMemberByIdSavedSearch");
      }
      // verify the required parameter 'idSavedSearch' is set
      if (idSavedSearch === undefined || idSavedSearch === null) {
        throw new Error("Missing the required parameter 'idSavedSearch' when calling updateMembersSavedSearchesNameByIdMemberByIdSavedSearch");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateMembersSavedSearchesNameByIdMemberByIdSavedSearch");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateMembersSavedSearchesNameByIdMemberByIdSavedSearch");
      }
      // verify the required parameter 'membersSavedSearchesName' is set
      if (membersSavedSearchesName === undefined || membersSavedSearchesName === null) {
        throw new Error("Missing the required parameter 'membersSavedSearchesName' when calling updateMembersSavedSearchesNameByIdMemberByIdSavedSearch");
      }

      let pathParams = {
        'idMember': idMember,
        'idSavedSearch': idSavedSearch
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/savedSearches/{idSavedSearch}/name', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMembersSavedSearchesPosByIdMemberByIdSavedSearch operation.
     * @callback module:api/MemberApi~updateMembersSavedSearchesPosByIdMemberByIdSavedSearchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateMembersSavedSearchesPosByIdMemberByIdSavedSearch()
     * @param {String} idMember idMember or username
     * @param {String} idSavedSearch idSavedSearch
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MembersSavedSearchesPos} membersSavedSearchesPos Attributes of \"Members Saved Searches Pos\" to be updated.
     * @param {module:api/MemberApi~updateMembersSavedSearchesPosByIdMemberByIdSavedSearchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMembersSavedSearchesPosByIdMemberByIdSavedSearch(idMember, idSavedSearch, key, token, membersSavedSearchesPos, callback) {
      let postBody = membersSavedSearchesPos;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling updateMembersSavedSearchesPosByIdMemberByIdSavedSearch");
      }
      // verify the required parameter 'idSavedSearch' is set
      if (idSavedSearch === undefined || idSavedSearch === null) {
        throw new Error("Missing the required parameter 'idSavedSearch' when calling updateMembersSavedSearchesPosByIdMemberByIdSavedSearch");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateMembersSavedSearchesPosByIdMemberByIdSavedSearch");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateMembersSavedSearchesPosByIdMemberByIdSavedSearch");
      }
      // verify the required parameter 'membersSavedSearchesPos' is set
      if (membersSavedSearchesPos === undefined || membersSavedSearchesPos === null) {
        throw new Error("Missing the required parameter 'membersSavedSearchesPos' when calling updateMembersSavedSearchesPosByIdMemberByIdSavedSearch");
      }

      let pathParams = {
        'idMember': idMember,
        'idSavedSearch': idSavedSearch
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/savedSearches/{idSavedSearch}/pos', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch operation.
     * @callback module:api/MemberApi~updateMembersSavedSearchesQueryByIdMemberByIdSavedSearchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch()
     * @param {String} idMember idMember or username
     * @param {String} idSavedSearch idSavedSearch
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MembersSavedSearchesQuery} membersSavedSearchesQuery Attributes of \"Members Saved Searches Query\" to be updated.
     * @param {module:api/MemberApi~updateMembersSavedSearchesQueryByIdMemberByIdSavedSearchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch(idMember, idSavedSearch, key, token, membersSavedSearchesQuery, callback) {
      let postBody = membersSavedSearchesQuery;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch");
      }
      // verify the required parameter 'idSavedSearch' is set
      if (idSavedSearch === undefined || idSavedSearch === null) {
        throw new Error("Missing the required parameter 'idSavedSearch' when calling updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch");
      }
      // verify the required parameter 'membersSavedSearchesQuery' is set
      if (membersSavedSearchesQuery === undefined || membersSavedSearchesQuery === null) {
        throw new Error("Missing the required parameter 'membersSavedSearchesQuery' when calling updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch");
      }

      let pathParams = {
        'idMember': idMember,
        'idSavedSearch': idSavedSearch
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/savedSearches/{idSavedSearch}/query', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMembersUsernameByIdMember operation.
     * @callback module:api/MemberApi~updateMembersUsernameByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateMembersUsernameByIdMember()
     * @param {String} idMember idMember or username
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MembersUsername} membersUsername Attributes of \"Members Username\" to be updated.
     * @param {module:api/MemberApi~updateMembersUsernameByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMembersUsernameByIdMember(idMember, key, token, membersUsername, callback) {
      let postBody = membersUsername;
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling updateMembersUsernameByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateMembersUsernameByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateMembersUsernameByIdMember");
      }
      // verify the required parameter 'membersUsername' is set
      if (membersUsername === undefined || membersUsername === null) {
        throw new Error("Missing the required parameter 'membersUsername' when calling updateMembersUsernameByIdMember");
      }

      let pathParams = {
        'idMember': idMember
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/members/{idMember}/username', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
