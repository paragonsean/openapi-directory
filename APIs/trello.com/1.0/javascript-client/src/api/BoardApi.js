/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Boards from '../model/Boards';
import BoardsChecklists from '../model/BoardsChecklists';
import BoardsClosed from '../model/BoardsClosed';
import BoardsDesc from '../model/BoardsDesc';
import BoardsIdOrganization from '../model/BoardsIdOrganization';
import BoardsLabels from '../model/BoardsLabels';
import BoardsLists from '../model/BoardsLists';
import BoardsMembers from '../model/BoardsMembers';
import BoardsMemberships from '../model/BoardsMemberships';
import BoardsName from '../model/BoardsName';
import BoardsPowerUps from '../model/BoardsPowerUps';
import BoardsSubscribed from '../model/BoardsSubscribed';
import LabelNamesBlue from '../model/LabelNamesBlue';
import LabelNamesGreen from '../model/LabelNamesGreen';
import LabelNamesOrange from '../model/LabelNamesOrange';
import LabelNamesPurple from '../model/LabelNamesPurple';
import LabelNamesRed from '../model/LabelNamesRed';
import LabelNamesYellow from '../model/LabelNamesYellow';
import MyPrefsEmailPosition from '../model/MyPrefsEmailPosition';
import MyPrefsIdEmailList from '../model/MyPrefsIdEmailList';
import MyPrefsShowListGuide from '../model/MyPrefsShowListGuide';
import MyPrefsShowSidebar from '../model/MyPrefsShowSidebar';
import MyPrefsShowSidebarActivity from '../model/MyPrefsShowSidebarActivity';
import MyPrefsShowSidebarBoardActions from '../model/MyPrefsShowSidebarBoardActions';
import MyPrefsShowSidebarMembers from '../model/MyPrefsShowSidebarMembers';
import PrefsBackground from '../model/PrefsBackground';
import PrefsCalendarFeedEnabled from '../model/PrefsCalendarFeedEnabled';
import PrefsCardAging from '../model/PrefsCardAging';
import PrefsCardCovers from '../model/PrefsCardCovers';
import PrefsComments from '../model/PrefsComments';
import PrefsInvitations from '../model/PrefsInvitations';
import PrefsPermissionLevel from '../model/PrefsPermissionLevel';
import PrefsSelfJoin from '../model/PrefsSelfJoin';
import PrefsVoting from '../model/PrefsVoting';

/**
* Board service.
* @module api/BoardApi
* @version 1.0
*/
export default class BoardApi {

    /**
    * Constructs a new BoardApi. 
    * @alias module:api/BoardApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addBoards operation.
     * @callback module:api/BoardApi~addBoardsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addBoards()
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/Boards} boards Attributes of \"Boards\" to be added.
     * @param {module:api/BoardApi~addBoardsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addBoards(key, token, boards, callback) {
      let postBody = boards;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addBoards");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addBoards");
      }
      // verify the required parameter 'boards' is set
      if (boards === undefined || boards === null) {
        throw new Error("Missing the required parameter 'boards' when calling addBoards");
      }

      let pathParams = {
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addBoardsCalendarKeyGenerateByIdBoard operation.
     * @callback module:api/BoardApi~addBoardsCalendarKeyGenerateByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addBoardsCalendarKeyGenerateByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/BoardApi~addBoardsCalendarKeyGenerateByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addBoardsCalendarKeyGenerateByIdBoard(idBoard, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling addBoardsCalendarKeyGenerateByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addBoardsCalendarKeyGenerateByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addBoardsCalendarKeyGenerateByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/calendarKey/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addBoardsChecklistsByIdBoard operation.
     * @callback module:api/BoardApi~addBoardsChecklistsByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addBoardsChecklistsByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/BoardsChecklists} boardsChecklists Attributes of \"Boards Checklists\" to be added.
     * @param {module:api/BoardApi~addBoardsChecklistsByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addBoardsChecklistsByIdBoard(idBoard, key, token, boardsChecklists, callback) {
      let postBody = boardsChecklists;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling addBoardsChecklistsByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addBoardsChecklistsByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addBoardsChecklistsByIdBoard");
      }
      // verify the required parameter 'boardsChecklists' is set
      if (boardsChecklists === undefined || boardsChecklists === null) {
        throw new Error("Missing the required parameter 'boardsChecklists' when calling addBoardsChecklistsByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/checklists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addBoardsEmailKeyGenerateByIdBoard operation.
     * @callback module:api/BoardApi~addBoardsEmailKeyGenerateByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addBoardsEmailKeyGenerateByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/BoardApi~addBoardsEmailKeyGenerateByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addBoardsEmailKeyGenerateByIdBoard(idBoard, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling addBoardsEmailKeyGenerateByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addBoardsEmailKeyGenerateByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addBoardsEmailKeyGenerateByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/emailKey/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addBoardsLabelsByIdBoard operation.
     * @callback module:api/BoardApi~addBoardsLabelsByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addBoardsLabelsByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/BoardsLabels} boardsLabels Attributes of \"Boards Labels\" to be added.
     * @param {module:api/BoardApi~addBoardsLabelsByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addBoardsLabelsByIdBoard(idBoard, key, token, boardsLabels, callback) {
      let postBody = boardsLabels;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling addBoardsLabelsByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addBoardsLabelsByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addBoardsLabelsByIdBoard");
      }
      // verify the required parameter 'boardsLabels' is set
      if (boardsLabels === undefined || boardsLabels === null) {
        throw new Error("Missing the required parameter 'boardsLabels' when calling addBoardsLabelsByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addBoardsListsByIdBoard operation.
     * @callback module:api/BoardApi~addBoardsListsByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addBoardsListsByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/BoardsLists} boardsLists Attributes of \"Boards Lists\" to be added.
     * @param {module:api/BoardApi~addBoardsListsByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addBoardsListsByIdBoard(idBoard, key, token, boardsLists, callback) {
      let postBody = boardsLists;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling addBoardsListsByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addBoardsListsByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addBoardsListsByIdBoard");
      }
      // verify the required parameter 'boardsLists' is set
      if (boardsLists === undefined || boardsLists === null) {
        throw new Error("Missing the required parameter 'boardsLists' when calling addBoardsListsByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/lists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addBoardsMarkAsViewedByIdBoard operation.
     * @callback module:api/BoardApi~addBoardsMarkAsViewedByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addBoardsMarkAsViewedByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/BoardApi~addBoardsMarkAsViewedByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addBoardsMarkAsViewedByIdBoard(idBoard, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling addBoardsMarkAsViewedByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addBoardsMarkAsViewedByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addBoardsMarkAsViewedByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/markAsViewed', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addBoardsPowerUpsByIdBoard operation.
     * @callback module:api/BoardApi~addBoardsPowerUpsByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addBoardsPowerUpsByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/BoardsPowerUps} boardsPowerUps Attributes of \"Boards Power Ups\" to be added.
     * @param {module:api/BoardApi~addBoardsPowerUpsByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addBoardsPowerUpsByIdBoard(idBoard, key, token, boardsPowerUps, callback) {
      let postBody = boardsPowerUps;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling addBoardsPowerUpsByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addBoardsPowerUpsByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling addBoardsPowerUpsByIdBoard");
      }
      // verify the required parameter 'boardsPowerUps' is set
      if (boardsPowerUps === undefined || boardsPowerUps === null) {
        throw new Error("Missing the required parameter 'boardsPowerUps' when calling addBoardsPowerUpsByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/powerUps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBoardsMembersByIdBoardByIdMember operation.
     * @callback module:api/BoardApi~deleteBoardsMembersByIdBoardByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteBoardsMembersByIdBoardByIdMember()
     * @param {String} idBoard board_id
     * @param {String} idMember idMember
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/BoardApi~deleteBoardsMembersByIdBoardByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBoardsMembersByIdBoardByIdMember(idBoard, idMember, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling deleteBoardsMembersByIdBoardByIdMember");
      }
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling deleteBoardsMembersByIdBoardByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBoardsMembersByIdBoardByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteBoardsMembersByIdBoardByIdMember");
      }

      let pathParams = {
        'idBoard': idBoard,
        'idMember': idMember
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/members/{idMember}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBoardsPowerUpsByIdBoardByPowerUp operation.
     * @callback module:api/BoardApi~deleteBoardsPowerUpsByIdBoardByPowerUpCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteBoardsPowerUpsByIdBoardByPowerUp()
     * @param {String} idBoard board_id
     * @param {String} powerUp powerUp
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/BoardApi~deleteBoardsPowerUpsByIdBoardByPowerUpCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBoardsPowerUpsByIdBoardByPowerUp(idBoard, powerUp, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling deleteBoardsPowerUpsByIdBoardByPowerUp");
      }
      // verify the required parameter 'powerUp' is set
      if (powerUp === undefined || powerUp === null) {
        throw new Error("Missing the required parameter 'powerUp' when calling deleteBoardsPowerUpsByIdBoardByPowerUp");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteBoardsPowerUpsByIdBoardByPowerUp");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteBoardsPowerUpsByIdBoardByPowerUp");
      }

      let pathParams = {
        'idBoard': idBoard,
        'powerUp': powerUp
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/powerUps/{powerUp}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoardsActionsByIdBoard operation.
     * @callback module:api/BoardApi~getBoardsActionsByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBoardsActionsByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [entities]  true or false
     * @param {String} [display]  true or false
     * @param {String} [filter = 'all')] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
     * @param {String} [fields = 'all')] all or a comma-separated list of: data, date, idMemberCreator or type
     * @param {String} [limit = '50')] a number from 0 to 1000
     * @param {String} [format = 'list')] One of: count, list or minimal
     * @param {String} [since] A date, null or lastView
     * @param {String} [before] A date, or null
     * @param {String} [page = '0')] Page * limit must be less than 1000
     * @param {String} [idModels] Only return actions related to these model ids
     * @param {String} [member]  true or false
     * @param {String} [memberFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [memberCreator]  true or false
     * @param {String} [memberCreatorFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {module:api/BoardApi~getBoardsActionsByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBoardsActionsByIdBoard(idBoard, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling getBoardsActionsByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBoardsActionsByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getBoardsActionsByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'entities': opts['entities'],
        'display': opts['display'],
        'filter': opts['filter'],
        'fields': opts['fields'],
        'limit': opts['limit'],
        'format': opts['format'],
        'since': opts['since'],
        'before': opts['before'],
        'page': opts['page'],
        'idModels': opts['idModels'],
        'member': opts['member'],
        'member_fields': opts['memberFields'],
        'memberCreator': opts['memberCreator'],
        'memberCreator_fields': opts['memberCreatorFields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoardsBoardStarsByIdBoard operation.
     * @callback module:api/BoardApi~getBoardsBoardStarsByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBoardsBoardStarsByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [filter = 'mine')] One of: mine or none
     * @param {module:api/BoardApi~getBoardsBoardStarsByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBoardsBoardStarsByIdBoard(idBoard, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling getBoardsBoardStarsByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBoardsBoardStarsByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getBoardsBoardStarsByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'filter': opts['filter'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/boardStars', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoardsByIdBoard operation.
     * @callback module:api/BoardApi~getBoardsByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBoardsByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [actions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
     * @param {String} [actionsEntities]  true or false
     * @param {String} [actionsDisplay]  true or false
     * @param {String} [actionsFormat = 'list')] One of: count, list or minimal
     * @param {String} [actionsSince] A date, null or lastView
     * @param {String} [actionsLimit = '50')] a number from 0 to 1000
     * @param {String} [actionFields = 'all')] all or a comma-separated list of: data, date, idMemberCreator or type
     * @param {String} [actionMember]  true or false
     * @param {String} [actionMemberFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [actionMemberCreator]  true or false
     * @param {String} [actionMemberCreatorFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [cards = 'none')] One of: all, closed, none, open or visible
     * @param {String} [cardFields = 'all')] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
     * @param {String} [cardAttachments] A boolean value or &quot;cover&quot; for only card cover attachments
     * @param {String} [cardAttachmentFields = 'all')] all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
     * @param {String} [cardChecklists = 'none')] One of: all or none
     * @param {String} [cardStickers]  true or false
     * @param {String} [boardStars = 'none')] One of: mine or none
     * @param {String} [labels = 'none')] One of: all or none
     * @param {String} [labelFields = 'all')] all or a comma-separated list of: color, idBoard, name or uses
     * @param {String} [labelsLimit = '50')] a number from 0 to 1000
     * @param {String} [lists = 'none')] One of: all, closed, none or open
     * @param {String} [listFields = 'all')] all or a comma-separated list of: closed, idBoard, name, pos or subscribed
     * @param {String} [memberships = 'none')] all or a comma-separated list of: active, admin, deactivated, me or normal
     * @param {String} [membershipsMember]  true or false
     * @param {String} [membershipsMemberFields = 'fullName and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [members = 'none')] One of: admins, all, none, normal or owners
     * @param {String} [memberFields = 'avatarHash, initials, fullName, username and confirmed')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [membersInvited = 'none')] One of: admins, all, none, normal or owners
     * @param {String} [membersInvitedFields = 'avatarHash, initials, fullName and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [checklists = 'none')] One of: all or none
     * @param {String} [checklistFields = 'all')] all or a comma-separated list of: idBoard, idCard, name or pos
     * @param {String} [organization]  true or false
     * @param {String} [organizationFields = 'name and displayName')] all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
     * @param {String} [organizationMemberships = 'none')] all or a comma-separated list of: active, admin, deactivated, me or normal
     * @param {String} [myPrefs]  true or false
     * @param {String} [fields = 'name, desc, descData, closed, idOrganization, pinned, url, shortUrl, prefs and labelNames')] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
     * @param {module:api/BoardApi~getBoardsByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBoardsByIdBoard(idBoard, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling getBoardsByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBoardsByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getBoardsByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'actions': opts['actions'],
        'actions_entities': opts['actionsEntities'],
        'actions_display': opts['actionsDisplay'],
        'actions_format': opts['actionsFormat'],
        'actions_since': opts['actionsSince'],
        'actions_limit': opts['actionsLimit'],
        'action_fields': opts['actionFields'],
        'action_member': opts['actionMember'],
        'action_member_fields': opts['actionMemberFields'],
        'action_memberCreator': opts['actionMemberCreator'],
        'action_memberCreator_fields': opts['actionMemberCreatorFields'],
        'cards': opts['cards'],
        'card_fields': opts['cardFields'],
        'card_attachments': opts['cardAttachments'],
        'card_attachment_fields': opts['cardAttachmentFields'],
        'card_checklists': opts['cardChecklists'],
        'card_stickers': opts['cardStickers'],
        'boardStars': opts['boardStars'],
        'labels': opts['labels'],
        'label_fields': opts['labelFields'],
        'labels_limit': opts['labelsLimit'],
        'lists': opts['lists'],
        'list_fields': opts['listFields'],
        'memberships': opts['memberships'],
        'memberships_member': opts['membershipsMember'],
        'memberships_member_fields': opts['membershipsMemberFields'],
        'members': opts['members'],
        'member_fields': opts['memberFields'],
        'membersInvited': opts['membersInvited'],
        'membersInvited_fields': opts['membersInvitedFields'],
        'checklists': opts['checklists'],
        'checklist_fields': opts['checklistFields'],
        'organization': opts['organization'],
        'organization_fields': opts['organizationFields'],
        'organization_memberships': opts['organizationMemberships'],
        'myPrefs': opts['myPrefs'],
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoardsByIdBoardByField operation.
     * @callback module:api/BoardApi~getBoardsByIdBoardByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBoardsByIdBoardByField()
     * @param {String} idBoard board_id
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/BoardApi~getBoardsByIdBoardByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBoardsByIdBoardByField(idBoard, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling getBoardsByIdBoardByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getBoardsByIdBoardByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBoardsByIdBoardByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getBoardsByIdBoardByField");
      }

      let pathParams = {
        'idBoard': idBoard,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoardsCardsByIdBoard operation.
     * @callback module:api/BoardApi~getBoardsCardsByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBoardsCardsByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [actions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
     * @param {String} [attachments] A boolean value or &quot;cover&quot; for only card cover attachments
     * @param {String} [attachmentFields = 'all')] all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
     * @param {String} [stickers]  true or false
     * @param {String} [members]  true or false
     * @param {String} [memberFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [checkItemStates]  true or false
     * @param {String} [checklists = 'none')] One of: all or none
     * @param {String} [limit] a number from 1 to 1000
     * @param {String} [since] A date, or null
     * @param {String} [before] A date, or null
     * @param {String} [filter = 'visible')] One of: all, closed, none, open or visible
     * @param {String} [fields = 'all')] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
     * @param {module:api/BoardApi~getBoardsCardsByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBoardsCardsByIdBoard(idBoard, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling getBoardsCardsByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBoardsCardsByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getBoardsCardsByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'actions': opts['actions'],
        'attachments': opts['attachments'],
        'attachment_fields': opts['attachmentFields'],
        'stickers': opts['stickers'],
        'members': opts['members'],
        'member_fields': opts['memberFields'],
        'checkItemStates': opts['checkItemStates'],
        'checklists': opts['checklists'],
        'limit': opts['limit'],
        'since': opts['since'],
        'before': opts['before'],
        'filter': opts['filter'],
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/cards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoardsCardsByIdBoardByFilter operation.
     * @callback module:api/BoardApi~getBoardsCardsByIdBoardByFilterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBoardsCardsByIdBoardByFilter()
     * @param {String} idBoard board_id
     * @param {String} filter filter
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/BoardApi~getBoardsCardsByIdBoardByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBoardsCardsByIdBoardByFilter(idBoard, filter, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling getBoardsCardsByIdBoardByFilter");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getBoardsCardsByIdBoardByFilter");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBoardsCardsByIdBoardByFilter");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getBoardsCardsByIdBoardByFilter");
      }

      let pathParams = {
        'idBoard': idBoard,
        'filter': filter
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/cards/{filter}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoardsCardsByIdBoardByIdCard operation.
     * @callback module:api/BoardApi~getBoardsCardsByIdBoardByIdCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBoardsCardsByIdBoardByIdCard()
     * @param {String} idBoard board_id
     * @param {String} idCard idCard
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [attachments] A boolean value or &quot;cover&quot; for only card cover attachments
     * @param {String} [attachmentFields = 'all')] all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
     * @param {String} [actions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
     * @param {String} [actionsEntities]  true or false
     * @param {String} [actionsDisplay]  true or false
     * @param {String} [actionsLimit = '50')] a number from 0 to 1000
     * @param {String} [actionFields = 'all')] all or a comma-separated list of: data, date, idMemberCreator or type
     * @param {String} [actionMemberCreatorFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [members]  true or false
     * @param {String} [memberFields = 'avatarHash, initials, fullName and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [checkItemStates]  true or false
     * @param {String} [checkItemStateFields = 'all')] all or a comma-separated list of: idCheckItem or state
     * @param {String} [labels]  true or false
     * @param {String} [checklists = 'none')] One of: all or none
     * @param {String} [checklistFields = 'all')] all or a comma-separated list of: idBoard, idCard, name or pos
     * @param {String} [fields = 'all')] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
     * @param {module:api/BoardApi~getBoardsCardsByIdBoardByIdCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBoardsCardsByIdBoardByIdCard(idBoard, idCard, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling getBoardsCardsByIdBoardByIdCard");
      }
      // verify the required parameter 'idCard' is set
      if (idCard === undefined || idCard === null) {
        throw new Error("Missing the required parameter 'idCard' when calling getBoardsCardsByIdBoardByIdCard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBoardsCardsByIdBoardByIdCard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getBoardsCardsByIdBoardByIdCard");
      }

      let pathParams = {
        'idBoard': idBoard,
        'idCard': idCard
      };
      let queryParams = {
        'attachments': opts['attachments'],
        'attachment_fields': opts['attachmentFields'],
        'actions': opts['actions'],
        'actions_entities': opts['actionsEntities'],
        'actions_display': opts['actionsDisplay'],
        'actions_limit': opts['actionsLimit'],
        'action_fields': opts['actionFields'],
        'action_memberCreator_fields': opts['actionMemberCreatorFields'],
        'members': opts['members'],
        'member_fields': opts['memberFields'],
        'checkItemStates': opts['checkItemStates'],
        'checkItemState_fields': opts['checkItemStateFields'],
        'labels': opts['labels'],
        'checklists': opts['checklists'],
        'checklist_fields': opts['checklistFields'],
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/cards/{idCard}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoardsChecklistsByIdBoard operation.
     * @callback module:api/BoardApi~getBoardsChecklistsByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBoardsChecklistsByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [cards = 'none')] One of: all, closed, none, open or visible
     * @param {String} [cardFields = 'all')] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
     * @param {String} [checkItems = 'all')] One of: all or none
     * @param {String} [checkItemFields = 'name, nameData, pos and state')] all or a comma-separated list of: name, nameData, pos, state or type
     * @param {String} [filter = 'all')] One of: all or none
     * @param {String} [fields = 'all')] all or a comma-separated list of: idBoard, idCard, name or pos
     * @param {module:api/BoardApi~getBoardsChecklistsByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBoardsChecklistsByIdBoard(idBoard, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling getBoardsChecklistsByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBoardsChecklistsByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getBoardsChecklistsByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'cards': opts['cards'],
        'card_fields': opts['cardFields'],
        'checkItems': opts['checkItems'],
        'checkItem_fields': opts['checkItemFields'],
        'filter': opts['filter'],
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/checklists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoardsDeltasByIdBoard operation.
     * @callback module:api/BoardApi~getBoardsDeltasByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBoardsDeltasByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} tags A valid tag for subscribing
     * @param {String} ixLastUpdate a number from -1 to Infinity
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/BoardApi~getBoardsDeltasByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBoardsDeltasByIdBoard(idBoard, tags, ixLastUpdate, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling getBoardsDeltasByIdBoard");
      }
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling getBoardsDeltasByIdBoard");
      }
      // verify the required parameter 'ixLastUpdate' is set
      if (ixLastUpdate === undefined || ixLastUpdate === null) {
        throw new Error("Missing the required parameter 'ixLastUpdate' when calling getBoardsDeltasByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBoardsDeltasByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getBoardsDeltasByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'tags': tags,
        'ixLastUpdate': ixLastUpdate,
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/deltas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoardsLabelsByIdBoard operation.
     * @callback module:api/BoardApi~getBoardsLabelsByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBoardsLabelsByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: color, idBoard, name or uses
     * @param {String} [limit = '50')] a number from 0 to 1000
     * @param {module:api/BoardApi~getBoardsLabelsByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBoardsLabelsByIdBoard(idBoard, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling getBoardsLabelsByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBoardsLabelsByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getBoardsLabelsByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'fields': opts['fields'],
        'limit': opts['limit'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoardsLabelsByIdBoardByIdLabel operation.
     * @callback module:api/BoardApi~getBoardsLabelsByIdBoardByIdLabelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBoardsLabelsByIdBoardByIdLabel()
     * @param {String} idBoard board_id
     * @param {String} idLabel idLabel
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: color, idBoard, name or uses
     * @param {module:api/BoardApi~getBoardsLabelsByIdBoardByIdLabelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBoardsLabelsByIdBoardByIdLabel(idBoard, idLabel, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling getBoardsLabelsByIdBoardByIdLabel");
      }
      // verify the required parameter 'idLabel' is set
      if (idLabel === undefined || idLabel === null) {
        throw new Error("Missing the required parameter 'idLabel' when calling getBoardsLabelsByIdBoardByIdLabel");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBoardsLabelsByIdBoardByIdLabel");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getBoardsLabelsByIdBoardByIdLabel");
      }

      let pathParams = {
        'idBoard': idBoard,
        'idLabel': idLabel
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/labels/{idLabel}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoardsListsByIdBoard operation.
     * @callback module:api/BoardApi~getBoardsListsByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBoardsListsByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [cards = 'none')] One of: all, closed, none, open or visible
     * @param {String} [cardFields = 'all')] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
     * @param {String} [filter = 'open')] One of: all, closed, none or open
     * @param {String} [fields = 'all')] all or a comma-separated list of: closed, idBoard, name, pos or subscribed
     * @param {module:api/BoardApi~getBoardsListsByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBoardsListsByIdBoard(idBoard, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling getBoardsListsByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBoardsListsByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getBoardsListsByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'cards': opts['cards'],
        'card_fields': opts['cardFields'],
        'filter': opts['filter'],
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/lists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoardsListsByIdBoardByFilter operation.
     * @callback module:api/BoardApi~getBoardsListsByIdBoardByFilterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBoardsListsByIdBoardByFilter()
     * @param {String} idBoard board_id
     * @param {String} filter filter
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/BoardApi~getBoardsListsByIdBoardByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBoardsListsByIdBoardByFilter(idBoard, filter, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling getBoardsListsByIdBoardByFilter");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getBoardsListsByIdBoardByFilter");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBoardsListsByIdBoardByFilter");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getBoardsListsByIdBoardByFilter");
      }

      let pathParams = {
        'idBoard': idBoard,
        'filter': filter
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/lists/{filter}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoardsMembersByIdBoard operation.
     * @callback module:api/BoardApi~getBoardsMembersByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBoardsMembersByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [filter = 'all')] One of: admins, all, none, normal or owners
     * @param {String} [fields = 'fullName and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [activity] true or false ; works for premium organizations only.
     * @param {module:api/BoardApi~getBoardsMembersByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBoardsMembersByIdBoard(idBoard, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling getBoardsMembersByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBoardsMembersByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getBoardsMembersByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'filter': opts['filter'],
        'fields': opts['fields'],
        'activity': opts['activity'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoardsMembersByIdBoardByFilter operation.
     * @callback module:api/BoardApi~getBoardsMembersByIdBoardByFilterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBoardsMembersByIdBoardByFilter()
     * @param {String} idBoard board_id
     * @param {String} filter filter
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/BoardApi~getBoardsMembersByIdBoardByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBoardsMembersByIdBoardByFilter(idBoard, filter, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling getBoardsMembersByIdBoardByFilter");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getBoardsMembersByIdBoardByFilter");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBoardsMembersByIdBoardByFilter");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getBoardsMembersByIdBoardByFilter");
      }

      let pathParams = {
        'idBoard': idBoard,
        'filter': filter
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/members/{filter}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoardsMembersCardsByIdBoardByIdMember operation.
     * @callback module:api/BoardApi~getBoardsMembersCardsByIdBoardByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBoardsMembersCardsByIdBoardByIdMember()
     * @param {String} idBoard board_id
     * @param {String} idMember idMember
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [actions] all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
     * @param {String} [attachments] A boolean value or &quot;cover&quot; for only card cover attachments
     * @param {String} [attachmentFields = 'all')] all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
     * @param {String} [members]  true or false
     * @param {String} [memberFields = 'avatarHash, fullName, initials and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {String} [checkItemStates]  true or false
     * @param {String} [checklists = 'none')] One of: all or none
     * @param {String} [board]  true or false
     * @param {String} [boardFields = 'name, desc, closed, idOrganization, pinned, url and prefs')] all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
     * @param {String} [list]  true or false
     * @param {String} [listFields = 'all')] all or a comma-separated list of: closed, idBoard, name, pos or subscribed
     * @param {String} [filter = 'visible')] One of: all, closed, none, open or visible
     * @param {String} [fields = 'all')] all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
     * @param {module:api/BoardApi~getBoardsMembersCardsByIdBoardByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBoardsMembersCardsByIdBoardByIdMember(idBoard, idMember, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling getBoardsMembersCardsByIdBoardByIdMember");
      }
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling getBoardsMembersCardsByIdBoardByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBoardsMembersCardsByIdBoardByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getBoardsMembersCardsByIdBoardByIdMember");
      }

      let pathParams = {
        'idBoard': idBoard,
        'idMember': idMember
      };
      let queryParams = {
        'actions': opts['actions'],
        'attachments': opts['attachments'],
        'attachment_fields': opts['attachmentFields'],
        'members': opts['members'],
        'member_fields': opts['memberFields'],
        'checkItemStates': opts['checkItemStates'],
        'checklists': opts['checklists'],
        'board': opts['board'],
        'board_fields': opts['boardFields'],
        'list': opts['list'],
        'list_fields': opts['listFields'],
        'filter': opts['filter'],
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/members/{idMember}/cards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoardsMembersInvitedByIdBoard operation.
     * @callback module:api/BoardApi~getBoardsMembersInvitedByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBoardsMembersInvitedByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
     * @param {module:api/BoardApi~getBoardsMembersInvitedByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBoardsMembersInvitedByIdBoard(idBoard, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling getBoardsMembersInvitedByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBoardsMembersInvitedByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getBoardsMembersInvitedByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/membersInvited', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoardsMembersInvitedByIdBoardByField operation.
     * @callback module:api/BoardApi~getBoardsMembersInvitedByIdBoardByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBoardsMembersInvitedByIdBoardByField()
     * @param {String} idBoard board_id
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/BoardApi~getBoardsMembersInvitedByIdBoardByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBoardsMembersInvitedByIdBoardByField(idBoard, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling getBoardsMembersInvitedByIdBoardByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getBoardsMembersInvitedByIdBoardByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBoardsMembersInvitedByIdBoardByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getBoardsMembersInvitedByIdBoardByField");
      }

      let pathParams = {
        'idBoard': idBoard,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/membersInvited/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoardsMembershipsByIdBoard operation.
     * @callback module:api/BoardApi~getBoardsMembershipsByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBoardsMembershipsByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [filter = 'all')] all or a comma-separated list of: active, admin, deactivated, me or normal
     * @param {String} [member]  true or false
     * @param {String} [memberFields = 'fullName and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {module:api/BoardApi~getBoardsMembershipsByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBoardsMembershipsByIdBoard(idBoard, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling getBoardsMembershipsByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBoardsMembershipsByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getBoardsMembershipsByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'filter': opts['filter'],
        'member': opts['member'],
        'member_fields': opts['memberFields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/memberships', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoardsMembershipsByIdBoardByIdMembership operation.
     * @callback module:api/BoardApi~getBoardsMembershipsByIdBoardByIdMembershipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBoardsMembershipsByIdBoardByIdMembership()
     * @param {String} idBoard board_id
     * @param {String} idMembership idMembership
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [member]  true or false
     * @param {String} [memberFields = 'fullName and username')] all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
     * @param {module:api/BoardApi~getBoardsMembershipsByIdBoardByIdMembershipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBoardsMembershipsByIdBoardByIdMembership(idBoard, idMembership, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling getBoardsMembershipsByIdBoardByIdMembership");
      }
      // verify the required parameter 'idMembership' is set
      if (idMembership === undefined || idMembership === null) {
        throw new Error("Missing the required parameter 'idMembership' when calling getBoardsMembershipsByIdBoardByIdMembership");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBoardsMembershipsByIdBoardByIdMembership");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getBoardsMembershipsByIdBoardByIdMembership");
      }

      let pathParams = {
        'idBoard': idBoard,
        'idMembership': idMembership
      };
      let queryParams = {
        'member': opts['member'],
        'member_fields': opts['memberFields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/memberships/{idMembership}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoardsMyPrefsByIdBoard operation.
     * @callback module:api/BoardApi~getBoardsMyPrefsByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBoardsMyPrefsByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/BoardApi~getBoardsMyPrefsByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBoardsMyPrefsByIdBoard(idBoard, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling getBoardsMyPrefsByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBoardsMyPrefsByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getBoardsMyPrefsByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/myPrefs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoardsOrganizationByIdBoard operation.
     * @callback module:api/BoardApi~getBoardsOrganizationByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBoardsOrganizationByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {Object} opts Optional parameters
     * @param {String} [fields = 'all')] all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
     * @param {module:api/BoardApi~getBoardsOrganizationByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBoardsOrganizationByIdBoard(idBoard, key, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling getBoardsOrganizationByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBoardsOrganizationByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getBoardsOrganizationByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'fields': opts['fields'],
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/organization', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBoardsOrganizationByIdBoardByField operation.
     * @callback module:api/BoardApi~getBoardsOrganizationByIdBoardByFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBoardsOrganizationByIdBoardByField()
     * @param {String} idBoard board_id
     * @param {String} field field
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:api/BoardApi~getBoardsOrganizationByIdBoardByFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBoardsOrganizationByIdBoardByField(idBoard, field, key, token, callback) {
      let postBody = null;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling getBoardsOrganizationByIdBoardByField");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling getBoardsOrganizationByIdBoardByField");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getBoardsOrganizationByIdBoardByField");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getBoardsOrganizationByIdBoardByField");
      }

      let pathParams = {
        'idBoard': idBoard,
        'field': field
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/organization/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/Boards} boards Attributes of \"Boards\" to be updated.
     * @param {module:api/BoardApi~updateBoardsByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsByIdBoard(idBoard, key, token, boards, callback) {
      let postBody = boards;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsByIdBoard");
      }
      // verify the required parameter 'boards' is set
      if (boards === undefined || boards === null) {
        throw new Error("Missing the required parameter 'boards' when calling updateBoardsByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsClosedByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsClosedByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsClosedByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/BoardsClosed} boardsClosed Attributes of \"Boards Closed\" to be updated.
     * @param {module:api/BoardApi~updateBoardsClosedByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsClosedByIdBoard(idBoard, key, token, boardsClosed, callback) {
      let postBody = boardsClosed;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsClosedByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsClosedByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsClosedByIdBoard");
      }
      // verify the required parameter 'boardsClosed' is set
      if (boardsClosed === undefined || boardsClosed === null) {
        throw new Error("Missing the required parameter 'boardsClosed' when calling updateBoardsClosedByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/closed', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsDescByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsDescByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsDescByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/BoardsDesc} boardsDesc Attributes of \"Boards Desc\" to be updated.
     * @param {module:api/BoardApi~updateBoardsDescByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsDescByIdBoard(idBoard, key, token, boardsDesc, callback) {
      let postBody = boardsDesc;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsDescByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsDescByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsDescByIdBoard");
      }
      // verify the required parameter 'boardsDesc' is set
      if (boardsDesc === undefined || boardsDesc === null) {
        throw new Error("Missing the required parameter 'boardsDesc' when calling updateBoardsDescByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/desc', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsIdOrganizationByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsIdOrganizationByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsIdOrganizationByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/BoardsIdOrganization} boardsIdOrganization Attributes of \"Boards Id Organization\" to be updated.
     * @param {module:api/BoardApi~updateBoardsIdOrganizationByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsIdOrganizationByIdBoard(idBoard, key, token, boardsIdOrganization, callback) {
      let postBody = boardsIdOrganization;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsIdOrganizationByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsIdOrganizationByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsIdOrganizationByIdBoard");
      }
      // verify the required parameter 'boardsIdOrganization' is set
      if (boardsIdOrganization === undefined || boardsIdOrganization === null) {
        throw new Error("Missing the required parameter 'boardsIdOrganization' when calling updateBoardsIdOrganizationByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/idOrganization', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsLabelNamesBlueByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsLabelNamesBlueByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsLabelNamesBlueByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/LabelNamesBlue} labelNamesBlue Attributes of \"Label Names Blue\" to be updated.
     * @param {module:api/BoardApi~updateBoardsLabelNamesBlueByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsLabelNamesBlueByIdBoard(idBoard, key, token, labelNamesBlue, callback) {
      let postBody = labelNamesBlue;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsLabelNamesBlueByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsLabelNamesBlueByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsLabelNamesBlueByIdBoard");
      }
      // verify the required parameter 'labelNamesBlue' is set
      if (labelNamesBlue === undefined || labelNamesBlue === null) {
        throw new Error("Missing the required parameter 'labelNamesBlue' when calling updateBoardsLabelNamesBlueByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/labelNames/blue', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsLabelNamesGreenByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsLabelNamesGreenByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsLabelNamesGreenByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/LabelNamesGreen} labelNamesGreen Attributes of \"Label Names Green\" to be updated.
     * @param {module:api/BoardApi~updateBoardsLabelNamesGreenByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsLabelNamesGreenByIdBoard(idBoard, key, token, labelNamesGreen, callback) {
      let postBody = labelNamesGreen;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsLabelNamesGreenByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsLabelNamesGreenByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsLabelNamesGreenByIdBoard");
      }
      // verify the required parameter 'labelNamesGreen' is set
      if (labelNamesGreen === undefined || labelNamesGreen === null) {
        throw new Error("Missing the required parameter 'labelNamesGreen' when calling updateBoardsLabelNamesGreenByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/labelNames/green', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsLabelNamesOrangeByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsLabelNamesOrangeByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsLabelNamesOrangeByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/LabelNamesOrange} labelNamesOrange Attributes of \"Label Names Orange\" to be updated.
     * @param {module:api/BoardApi~updateBoardsLabelNamesOrangeByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsLabelNamesOrangeByIdBoard(idBoard, key, token, labelNamesOrange, callback) {
      let postBody = labelNamesOrange;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsLabelNamesOrangeByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsLabelNamesOrangeByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsLabelNamesOrangeByIdBoard");
      }
      // verify the required parameter 'labelNamesOrange' is set
      if (labelNamesOrange === undefined || labelNamesOrange === null) {
        throw new Error("Missing the required parameter 'labelNamesOrange' when calling updateBoardsLabelNamesOrangeByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/labelNames/orange', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsLabelNamesPurpleByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsLabelNamesPurpleByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsLabelNamesPurpleByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/LabelNamesPurple} labelNamesPurple Attributes of \"Label Names Purple\" to be updated.
     * @param {module:api/BoardApi~updateBoardsLabelNamesPurpleByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsLabelNamesPurpleByIdBoard(idBoard, key, token, labelNamesPurple, callback) {
      let postBody = labelNamesPurple;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsLabelNamesPurpleByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsLabelNamesPurpleByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsLabelNamesPurpleByIdBoard");
      }
      // verify the required parameter 'labelNamesPurple' is set
      if (labelNamesPurple === undefined || labelNamesPurple === null) {
        throw new Error("Missing the required parameter 'labelNamesPurple' when calling updateBoardsLabelNamesPurpleByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/labelNames/purple', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsLabelNamesRedByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsLabelNamesRedByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsLabelNamesRedByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/LabelNamesRed} labelNamesRed Attributes of \"Label Names Red\" to be updated.
     * @param {module:api/BoardApi~updateBoardsLabelNamesRedByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsLabelNamesRedByIdBoard(idBoard, key, token, labelNamesRed, callback) {
      let postBody = labelNamesRed;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsLabelNamesRedByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsLabelNamesRedByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsLabelNamesRedByIdBoard");
      }
      // verify the required parameter 'labelNamesRed' is set
      if (labelNamesRed === undefined || labelNamesRed === null) {
        throw new Error("Missing the required parameter 'labelNamesRed' when calling updateBoardsLabelNamesRedByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/labelNames/red', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsLabelNamesYellowByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsLabelNamesYellowByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsLabelNamesYellowByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/LabelNamesYellow} labelNamesYellow Attributes of \"Label Names Yellow\" to be updated.
     * @param {module:api/BoardApi~updateBoardsLabelNamesYellowByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsLabelNamesYellowByIdBoard(idBoard, key, token, labelNamesYellow, callback) {
      let postBody = labelNamesYellow;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsLabelNamesYellowByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsLabelNamesYellowByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsLabelNamesYellowByIdBoard");
      }
      // verify the required parameter 'labelNamesYellow' is set
      if (labelNamesYellow === undefined || labelNamesYellow === null) {
        throw new Error("Missing the required parameter 'labelNamesYellow' when calling updateBoardsLabelNamesYellowByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/labelNames/yellow', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsMembersByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsMembersByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsMembersByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/BoardsMembers} boardsMembers Attributes of \"Boards Members\" to be updated.
     * @param {module:api/BoardApi~updateBoardsMembersByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsMembersByIdBoard(idBoard, key, token, boardsMembers, callback) {
      let postBody = boardsMembers;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsMembersByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsMembersByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsMembersByIdBoard");
      }
      // verify the required parameter 'boardsMembers' is set
      if (boardsMembers === undefined || boardsMembers === null) {
        throw new Error("Missing the required parameter 'boardsMembers' when calling updateBoardsMembersByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/members', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsMembersByIdBoardByIdMember operation.
     * @callback module:api/BoardApi~updateBoardsMembersByIdBoardByIdMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsMembersByIdBoardByIdMember()
     * @param {String} idBoard board_id
     * @param {String} idMember idMember
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/BoardsMembers} boardsMembers Attributes of \"Boards Members\" to be updated.
     * @param {module:api/BoardApi~updateBoardsMembersByIdBoardByIdMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsMembersByIdBoardByIdMember(idBoard, idMember, key, token, boardsMembers, callback) {
      let postBody = boardsMembers;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsMembersByIdBoardByIdMember");
      }
      // verify the required parameter 'idMember' is set
      if (idMember === undefined || idMember === null) {
        throw new Error("Missing the required parameter 'idMember' when calling updateBoardsMembersByIdBoardByIdMember");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsMembersByIdBoardByIdMember");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsMembersByIdBoardByIdMember");
      }
      // verify the required parameter 'boardsMembers' is set
      if (boardsMembers === undefined || boardsMembers === null) {
        throw new Error("Missing the required parameter 'boardsMembers' when calling updateBoardsMembersByIdBoardByIdMember");
      }

      let pathParams = {
        'idBoard': idBoard,
        'idMember': idMember
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/members/{idMember}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsMembershipsByIdBoardByIdMembership operation.
     * @callback module:api/BoardApi~updateBoardsMembershipsByIdBoardByIdMembershipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsMembershipsByIdBoardByIdMembership()
     * @param {String} idBoard board_id
     * @param {String} idMembership idMembership
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/BoardsMemberships} boardsMemberships Attributes of \"Boards Memberships\" to be updated.
     * @param {module:api/BoardApi~updateBoardsMembershipsByIdBoardByIdMembershipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsMembershipsByIdBoardByIdMembership(idBoard, idMembership, key, token, boardsMemberships, callback) {
      let postBody = boardsMemberships;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsMembershipsByIdBoardByIdMembership");
      }
      // verify the required parameter 'idMembership' is set
      if (idMembership === undefined || idMembership === null) {
        throw new Error("Missing the required parameter 'idMembership' when calling updateBoardsMembershipsByIdBoardByIdMembership");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsMembershipsByIdBoardByIdMembership");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsMembershipsByIdBoardByIdMembership");
      }
      // verify the required parameter 'boardsMemberships' is set
      if (boardsMemberships === undefined || boardsMemberships === null) {
        throw new Error("Missing the required parameter 'boardsMemberships' when calling updateBoardsMembershipsByIdBoardByIdMembership");
      }

      let pathParams = {
        'idBoard': idBoard,
        'idMembership': idMembership
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/memberships/{idMembership}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsMyPrefsEmailPositionByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsMyPrefsEmailPositionByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsMyPrefsEmailPositionByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MyPrefsEmailPosition} myPrefsEmailPosition Attributes of \"My Prefs Email Position\" to be updated.
     * @param {module:api/BoardApi~updateBoardsMyPrefsEmailPositionByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsMyPrefsEmailPositionByIdBoard(idBoard, key, token, myPrefsEmailPosition, callback) {
      let postBody = myPrefsEmailPosition;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsMyPrefsEmailPositionByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsMyPrefsEmailPositionByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsMyPrefsEmailPositionByIdBoard");
      }
      // verify the required parameter 'myPrefsEmailPosition' is set
      if (myPrefsEmailPosition === undefined || myPrefsEmailPosition === null) {
        throw new Error("Missing the required parameter 'myPrefsEmailPosition' when calling updateBoardsMyPrefsEmailPositionByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/myPrefs/emailPosition', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsMyPrefsIdEmailListByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsMyPrefsIdEmailListByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsMyPrefsIdEmailListByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MyPrefsIdEmailList} myPrefsIdEmailList Attributes of \"My Prefs Id Email List\" to be updated.
     * @param {module:api/BoardApi~updateBoardsMyPrefsIdEmailListByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsMyPrefsIdEmailListByIdBoard(idBoard, key, token, myPrefsIdEmailList, callback) {
      let postBody = myPrefsIdEmailList;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsMyPrefsIdEmailListByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsMyPrefsIdEmailListByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsMyPrefsIdEmailListByIdBoard");
      }
      // verify the required parameter 'myPrefsIdEmailList' is set
      if (myPrefsIdEmailList === undefined || myPrefsIdEmailList === null) {
        throw new Error("Missing the required parameter 'myPrefsIdEmailList' when calling updateBoardsMyPrefsIdEmailListByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/myPrefs/idEmailList', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsMyPrefsShowListGuideByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsMyPrefsShowListGuideByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsMyPrefsShowListGuideByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MyPrefsShowListGuide} myPrefsShowListGuide Attributes of \"My Prefs Show List Guide\" to be updated.
     * @param {module:api/BoardApi~updateBoardsMyPrefsShowListGuideByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsMyPrefsShowListGuideByIdBoard(idBoard, key, token, myPrefsShowListGuide, callback) {
      let postBody = myPrefsShowListGuide;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsMyPrefsShowListGuideByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsMyPrefsShowListGuideByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsMyPrefsShowListGuideByIdBoard");
      }
      // verify the required parameter 'myPrefsShowListGuide' is set
      if (myPrefsShowListGuide === undefined || myPrefsShowListGuide === null) {
        throw new Error("Missing the required parameter 'myPrefsShowListGuide' when calling updateBoardsMyPrefsShowListGuideByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/myPrefs/showListGuide', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsMyPrefsShowSidebarActivityByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsMyPrefsShowSidebarActivityByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsMyPrefsShowSidebarActivityByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MyPrefsShowSidebarActivity} myPrefsShowSidebarActivity Attributes of \"My Prefs Show Sidebar Activity\" to be updated.
     * @param {module:api/BoardApi~updateBoardsMyPrefsShowSidebarActivityByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsMyPrefsShowSidebarActivityByIdBoard(idBoard, key, token, myPrefsShowSidebarActivity, callback) {
      let postBody = myPrefsShowSidebarActivity;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsMyPrefsShowSidebarActivityByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsMyPrefsShowSidebarActivityByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsMyPrefsShowSidebarActivityByIdBoard");
      }
      // verify the required parameter 'myPrefsShowSidebarActivity' is set
      if (myPrefsShowSidebarActivity === undefined || myPrefsShowSidebarActivity === null) {
        throw new Error("Missing the required parameter 'myPrefsShowSidebarActivity' when calling updateBoardsMyPrefsShowSidebarActivityByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/myPrefs/showSidebarActivity', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsMyPrefsShowSidebarBoardActionsByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MyPrefsShowSidebarBoardActions} myPrefsShowSidebarBoardActions Attributes of \"My Prefs Show Sidebar Board Actions\" to be updated.
     * @param {module:api/BoardApi~updateBoardsMyPrefsShowSidebarBoardActionsByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard(idBoard, key, token, myPrefsShowSidebarBoardActions, callback) {
      let postBody = myPrefsShowSidebarBoardActions;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard");
      }
      // verify the required parameter 'myPrefsShowSidebarBoardActions' is set
      if (myPrefsShowSidebarBoardActions === undefined || myPrefsShowSidebarBoardActions === null) {
        throw new Error("Missing the required parameter 'myPrefsShowSidebarBoardActions' when calling updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/myPrefs/showSidebarBoardActions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsMyPrefsShowSidebarByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsMyPrefsShowSidebarByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsMyPrefsShowSidebarByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MyPrefsShowSidebar} myPrefsShowSidebar Attributes of \"My Prefs Show Sidebar\" to be updated.
     * @param {module:api/BoardApi~updateBoardsMyPrefsShowSidebarByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsMyPrefsShowSidebarByIdBoard(idBoard, key, token, myPrefsShowSidebar, callback) {
      let postBody = myPrefsShowSidebar;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsMyPrefsShowSidebarByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsMyPrefsShowSidebarByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsMyPrefsShowSidebarByIdBoard");
      }
      // verify the required parameter 'myPrefsShowSidebar' is set
      if (myPrefsShowSidebar === undefined || myPrefsShowSidebar === null) {
        throw new Error("Missing the required parameter 'myPrefsShowSidebar' when calling updateBoardsMyPrefsShowSidebarByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/myPrefs/showSidebar', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsMyPrefsShowSidebarMembersByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsMyPrefsShowSidebarMembersByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsMyPrefsShowSidebarMembersByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/MyPrefsShowSidebarMembers} myPrefsShowSidebarMembers Attributes of \"My Prefs Show Sidebar Members\" to be updated.
     * @param {module:api/BoardApi~updateBoardsMyPrefsShowSidebarMembersByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsMyPrefsShowSidebarMembersByIdBoard(idBoard, key, token, myPrefsShowSidebarMembers, callback) {
      let postBody = myPrefsShowSidebarMembers;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsMyPrefsShowSidebarMembersByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsMyPrefsShowSidebarMembersByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsMyPrefsShowSidebarMembersByIdBoard");
      }
      // verify the required parameter 'myPrefsShowSidebarMembers' is set
      if (myPrefsShowSidebarMembers === undefined || myPrefsShowSidebarMembers === null) {
        throw new Error("Missing the required parameter 'myPrefsShowSidebarMembers' when calling updateBoardsMyPrefsShowSidebarMembersByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/myPrefs/showSidebarMembers', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsNameByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsNameByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsNameByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/BoardsName} boardsName Attributes of \"Boards Name\" to be updated.
     * @param {module:api/BoardApi~updateBoardsNameByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsNameByIdBoard(idBoard, key, token, boardsName, callback) {
      let postBody = boardsName;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsNameByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsNameByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsNameByIdBoard");
      }
      // verify the required parameter 'boardsName' is set
      if (boardsName === undefined || boardsName === null) {
        throw new Error("Missing the required parameter 'boardsName' when calling updateBoardsNameByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/name', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsPrefsBackgroundByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsPrefsBackgroundByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsPrefsBackgroundByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/PrefsBackground} prefsBackground Attributes of \"Prefs Background\" to be updated.
     * @param {module:api/BoardApi~updateBoardsPrefsBackgroundByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsPrefsBackgroundByIdBoard(idBoard, key, token, prefsBackground, callback) {
      let postBody = prefsBackground;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsPrefsBackgroundByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsPrefsBackgroundByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsPrefsBackgroundByIdBoard");
      }
      // verify the required parameter 'prefsBackground' is set
      if (prefsBackground === undefined || prefsBackground === null) {
        throw new Error("Missing the required parameter 'prefsBackground' when calling updateBoardsPrefsBackgroundByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/prefs/background', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsPrefsCalendarFeedEnabledByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsPrefsCalendarFeedEnabledByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsPrefsCalendarFeedEnabledByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/PrefsCalendarFeedEnabled} prefsCalendarFeedEnabled Attributes of \"Prefs Calendar Feed Enabled\" to be updated.
     * @param {module:api/BoardApi~updateBoardsPrefsCalendarFeedEnabledByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsPrefsCalendarFeedEnabledByIdBoard(idBoard, key, token, prefsCalendarFeedEnabled, callback) {
      let postBody = prefsCalendarFeedEnabled;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsPrefsCalendarFeedEnabledByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsPrefsCalendarFeedEnabledByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsPrefsCalendarFeedEnabledByIdBoard");
      }
      // verify the required parameter 'prefsCalendarFeedEnabled' is set
      if (prefsCalendarFeedEnabled === undefined || prefsCalendarFeedEnabled === null) {
        throw new Error("Missing the required parameter 'prefsCalendarFeedEnabled' when calling updateBoardsPrefsCalendarFeedEnabledByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/prefs/calendarFeedEnabled', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsPrefsCardAgingByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsPrefsCardAgingByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsPrefsCardAgingByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/PrefsCardAging} prefsCardAging Attributes of \"Prefs Card Aging\" to be updated.
     * @param {module:api/BoardApi~updateBoardsPrefsCardAgingByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsPrefsCardAgingByIdBoard(idBoard, key, token, prefsCardAging, callback) {
      let postBody = prefsCardAging;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsPrefsCardAgingByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsPrefsCardAgingByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsPrefsCardAgingByIdBoard");
      }
      // verify the required parameter 'prefsCardAging' is set
      if (prefsCardAging === undefined || prefsCardAging === null) {
        throw new Error("Missing the required parameter 'prefsCardAging' when calling updateBoardsPrefsCardAgingByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/prefs/cardAging', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsPrefsCardCoversByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsPrefsCardCoversByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsPrefsCardCoversByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/PrefsCardCovers} prefsCardCovers Attributes of \"Prefs Card Covers\" to be updated.
     * @param {module:api/BoardApi~updateBoardsPrefsCardCoversByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsPrefsCardCoversByIdBoard(idBoard, key, token, prefsCardCovers, callback) {
      let postBody = prefsCardCovers;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsPrefsCardCoversByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsPrefsCardCoversByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsPrefsCardCoversByIdBoard");
      }
      // verify the required parameter 'prefsCardCovers' is set
      if (prefsCardCovers === undefined || prefsCardCovers === null) {
        throw new Error("Missing the required parameter 'prefsCardCovers' when calling updateBoardsPrefsCardCoversByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/prefs/cardCovers', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsPrefsCommentsByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsPrefsCommentsByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsPrefsCommentsByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/PrefsComments} prefsComments Attributes of \"Prefs Comments\" to be updated.
     * @param {module:api/BoardApi~updateBoardsPrefsCommentsByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsPrefsCommentsByIdBoard(idBoard, key, token, prefsComments, callback) {
      let postBody = prefsComments;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsPrefsCommentsByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsPrefsCommentsByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsPrefsCommentsByIdBoard");
      }
      // verify the required parameter 'prefsComments' is set
      if (prefsComments === undefined || prefsComments === null) {
        throw new Error("Missing the required parameter 'prefsComments' when calling updateBoardsPrefsCommentsByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/prefs/comments', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsPrefsInvitationsByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsPrefsInvitationsByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsPrefsInvitationsByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/PrefsInvitations} prefsInvitations Attributes of \"Prefs Invitations\" to be updated.
     * @param {module:api/BoardApi~updateBoardsPrefsInvitationsByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsPrefsInvitationsByIdBoard(idBoard, key, token, prefsInvitations, callback) {
      let postBody = prefsInvitations;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsPrefsInvitationsByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsPrefsInvitationsByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsPrefsInvitationsByIdBoard");
      }
      // verify the required parameter 'prefsInvitations' is set
      if (prefsInvitations === undefined || prefsInvitations === null) {
        throw new Error("Missing the required parameter 'prefsInvitations' when calling updateBoardsPrefsInvitationsByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/prefs/invitations', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsPrefsPermissionLevelByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsPrefsPermissionLevelByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsPrefsPermissionLevelByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/PrefsPermissionLevel} prefsPermissionLevel Attributes of \"Prefs Permission Level\" to be updated.
     * @param {module:api/BoardApi~updateBoardsPrefsPermissionLevelByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsPrefsPermissionLevelByIdBoard(idBoard, key, token, prefsPermissionLevel, callback) {
      let postBody = prefsPermissionLevel;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsPrefsPermissionLevelByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsPrefsPermissionLevelByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsPrefsPermissionLevelByIdBoard");
      }
      // verify the required parameter 'prefsPermissionLevel' is set
      if (prefsPermissionLevel === undefined || prefsPermissionLevel === null) {
        throw new Error("Missing the required parameter 'prefsPermissionLevel' when calling updateBoardsPrefsPermissionLevelByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/prefs/permissionLevel', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsPrefsSelfJoinByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsPrefsSelfJoinByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsPrefsSelfJoinByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/PrefsSelfJoin} prefsSelfJoin Attributes of \"Prefs Self Join\" to be updated.
     * @param {module:api/BoardApi~updateBoardsPrefsSelfJoinByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsPrefsSelfJoinByIdBoard(idBoard, key, token, prefsSelfJoin, callback) {
      let postBody = prefsSelfJoin;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsPrefsSelfJoinByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsPrefsSelfJoinByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsPrefsSelfJoinByIdBoard");
      }
      // verify the required parameter 'prefsSelfJoin' is set
      if (prefsSelfJoin === undefined || prefsSelfJoin === null) {
        throw new Error("Missing the required parameter 'prefsSelfJoin' when calling updateBoardsPrefsSelfJoinByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/prefs/selfJoin', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsPrefsVotingByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsPrefsVotingByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsPrefsVotingByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/PrefsVoting} prefsVoting Attributes of \"Prefs Voting\" to be updated.
     * @param {module:api/BoardApi~updateBoardsPrefsVotingByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsPrefsVotingByIdBoard(idBoard, key, token, prefsVoting, callback) {
      let postBody = prefsVoting;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsPrefsVotingByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsPrefsVotingByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsPrefsVotingByIdBoard");
      }
      // verify the required parameter 'prefsVoting' is set
      if (prefsVoting === undefined || prefsVoting === null) {
        throw new Error("Missing the required parameter 'prefsVoting' when calling updateBoardsPrefsVotingByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/prefs/voting', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBoardsSubscribedByIdBoard operation.
     * @callback module:api/BoardApi~updateBoardsSubscribedByIdBoardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateBoardsSubscribedByIdBoard()
     * @param {String} idBoard board_id
     * @param {String} key <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
     * @param {String} token <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
     * @param {module:model/BoardsSubscribed} boardsSubscribed Attributes of \"Boards Subscribed\" to be updated.
     * @param {module:api/BoardApi~updateBoardsSubscribedByIdBoardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateBoardsSubscribedByIdBoard(idBoard, key, token, boardsSubscribed, callback) {
      let postBody = boardsSubscribed;
      // verify the required parameter 'idBoard' is set
      if (idBoard === undefined || idBoard === null) {
        throw new Error("Missing the required parameter 'idBoard' when calling updateBoardsSubscribedByIdBoard");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateBoardsSubscribedByIdBoard");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling updateBoardsSubscribedByIdBoard");
      }
      // verify the required parameter 'boardsSubscribed' is set
      if (boardsSubscribed === undefined || boardsSubscribed === null) {
        throw new Error("Missing the required parameter 'boardsSubscribed' when calling updateBoardsSubscribedByIdBoard");
      }

      let pathParams = {
        'idBoard': idBoard
      };
      let queryParams = {
        'key': key,
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'api_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boards/{idBoard}/subscribed', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
