/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Members model module.
 * @module model/Members
 * @version 1.0
 */
class Members {
    /**
     * Constructs a new <code>Members</code>.
     * @alias module:model/Members
     */
    constructor() { 
        
        Members.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Members</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Members} obj Optional instance to populate.
     * @return {module:model/Members} The populated <code>Members</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Members();

            if (data.hasOwnProperty('avatarSource')) {
                obj['avatarSource'] = ApiClient.convertToType(data['avatarSource'], 'String');
            }
            if (data.hasOwnProperty('bio')) {
                obj['bio'] = ApiClient.convertToType(data['bio'], 'String');
            }
            if (data.hasOwnProperty('fullName')) {
                obj['fullName'] = ApiClient.convertToType(data['fullName'], 'String');
            }
            if (data.hasOwnProperty('initials')) {
                obj['initials'] = ApiClient.convertToType(data['initials'], 'String');
            }
            if (data.hasOwnProperty('prefs/colorBlind')) {
                obj['prefs/colorBlind'] = ApiClient.convertToType(data['prefs/colorBlind'], 'String');
            }
            if (data.hasOwnProperty('prefs/locale')) {
                obj['prefs/locale'] = ApiClient.convertToType(data['prefs/locale'], 'String');
            }
            if (data.hasOwnProperty('prefs/minutesBetweenSummaries')) {
                obj['prefs/minutesBetweenSummaries'] = ApiClient.convertToType(data['prefs/minutesBetweenSummaries'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Members</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Members</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['avatarSource'] && !(typeof data['avatarSource'] === 'string' || data['avatarSource'] instanceof String)) {
            throw new Error("Expected the field `avatarSource` to be a primitive type in the JSON string but got " + data['avatarSource']);
        }
        // ensure the json data is a string
        if (data['bio'] && !(typeof data['bio'] === 'string' || data['bio'] instanceof String)) {
            throw new Error("Expected the field `bio` to be a primitive type in the JSON string but got " + data['bio']);
        }
        // ensure the json data is a string
        if (data['fullName'] && !(typeof data['fullName'] === 'string' || data['fullName'] instanceof String)) {
            throw new Error("Expected the field `fullName` to be a primitive type in the JSON string but got " + data['fullName']);
        }
        // ensure the json data is a string
        if (data['initials'] && !(typeof data['initials'] === 'string' || data['initials'] instanceof String)) {
            throw new Error("Expected the field `initials` to be a primitive type in the JSON string but got " + data['initials']);
        }
        // ensure the json data is a string
        if (data['prefs/colorBlind'] && !(typeof data['prefs/colorBlind'] === 'string' || data['prefs/colorBlind'] instanceof String)) {
            throw new Error("Expected the field `prefs/colorBlind` to be a primitive type in the JSON string but got " + data['prefs/colorBlind']);
        }
        // ensure the json data is a string
        if (data['prefs/locale'] && !(typeof data['prefs/locale'] === 'string' || data['prefs/locale'] instanceof String)) {
            throw new Error("Expected the field `prefs/locale` to be a primitive type in the JSON string but got " + data['prefs/locale']);
        }
        // ensure the json data is a string
        if (data['prefs/minutesBetweenSummaries'] && !(typeof data['prefs/minutesBetweenSummaries'] === 'string' || data['prefs/minutesBetweenSummaries'] instanceof String)) {
            throw new Error("Expected the field `prefs/minutesBetweenSummaries` to be a primitive type in the JSON string but got " + data['prefs/minutesBetweenSummaries']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * One of: gravatar, none or upload
 * @member {String} avatarSource
 */
Members.prototype['avatarSource'] = undefined;

/**
 * a string with a length from 0 to 16384
 * @member {String} bio
 */
Members.prototype['bio'] = undefined;

/**
 * A string with a length of at least 1.  Cannot begin or end with a space.
 * @member {String} fullName
 */
Members.prototype['fullName'] = undefined;

/**
 * A string with a length from 1 to 4.  Cannot begin or end with a space
 * @member {String} initials
 */
Members.prototype['initials'] = undefined;

/**
 *  true or false
 * @member {String} prefs/colorBlind
 */
Members.prototype['prefs/colorBlind'] = undefined;

/**
 * a string with a length from 0 to 255
 * @member {String} prefs/locale
 */
Members.prototype['prefs/locale'] = undefined;

/**
 * -1 (disabled), 1 or 60
 * @member {String} prefs/minutesBetweenSummaries
 */
Members.prototype['prefs/minutesBetweenSummaries'] = undefined;

/**
 * A string with a length of at least 3.  Only lowercase letters, underscores, and numbers are allowed.  Must be unique.
 * @member {String} username
 */
Members.prototype['username'] = undefined;






export default Members;

