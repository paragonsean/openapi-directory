/**
 * Trello
 * This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Cards model module.
 * @module model/Cards
 * @version 1.0
 */
class Cards {
    /**
     * Constructs a new <code>Cards</code>.
     * @alias module:model/Cards
     */
    constructor() { 
        
        Cards.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Cards</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Cards} obj Optional instance to populate.
     * @return {module:model/Cards} The populated <code>Cards</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Cards();

            if (data.hasOwnProperty('closed')) {
                obj['closed'] = ApiClient.convertToType(data['closed'], 'String');
            }
            if (data.hasOwnProperty('desc')) {
                obj['desc'] = ApiClient.convertToType(data['desc'], 'String');
            }
            if (data.hasOwnProperty('due')) {
                obj['due'] = ApiClient.convertToType(data['due'], 'String');
            }
            if (data.hasOwnProperty('fileSource')) {
                obj['fileSource'] = ApiClient.convertToType(data['fileSource'], 'String');
            }
            if (data.hasOwnProperty('idAttachmentCover')) {
                obj['idAttachmentCover'] = ApiClient.convertToType(data['idAttachmentCover'], 'String');
            }
            if (data.hasOwnProperty('idBoard')) {
                obj['idBoard'] = ApiClient.convertToType(data['idBoard'], 'String');
            }
            if (data.hasOwnProperty('idCardSource')) {
                obj['idCardSource'] = ApiClient.convertToType(data['idCardSource'], 'String');
            }
            if (data.hasOwnProperty('idLabels')) {
                obj['idLabels'] = ApiClient.convertToType(data['idLabels'], 'String');
            }
            if (data.hasOwnProperty('idList')) {
                obj['idList'] = ApiClient.convertToType(data['idList'], 'String');
            }
            if (data.hasOwnProperty('idMembers')) {
                obj['idMembers'] = ApiClient.convertToType(data['idMembers'], 'String');
            }
            if (data.hasOwnProperty('keepFromSource')) {
                obj['keepFromSource'] = ApiClient.convertToType(data['keepFromSource'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pos')) {
                obj['pos'] = ApiClient.convertToType(data['pos'], 'String');
            }
            if (data.hasOwnProperty('subscribed')) {
                obj['subscribed'] = ApiClient.convertToType(data['subscribed'], 'String');
            }
            if (data.hasOwnProperty('urlSource')) {
                obj['urlSource'] = ApiClient.convertToType(data['urlSource'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Cards</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Cards</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['closed'] && !(typeof data['closed'] === 'string' || data['closed'] instanceof String)) {
            throw new Error("Expected the field `closed` to be a primitive type in the JSON string but got " + data['closed']);
        }
        // ensure the json data is a string
        if (data['desc'] && !(typeof data['desc'] === 'string' || data['desc'] instanceof String)) {
            throw new Error("Expected the field `desc` to be a primitive type in the JSON string but got " + data['desc']);
        }
        // ensure the json data is a string
        if (data['due'] && !(typeof data['due'] === 'string' || data['due'] instanceof String)) {
            throw new Error("Expected the field `due` to be a primitive type in the JSON string but got " + data['due']);
        }
        // ensure the json data is a string
        if (data['fileSource'] && !(typeof data['fileSource'] === 'string' || data['fileSource'] instanceof String)) {
            throw new Error("Expected the field `fileSource` to be a primitive type in the JSON string but got " + data['fileSource']);
        }
        // ensure the json data is a string
        if (data['idAttachmentCover'] && !(typeof data['idAttachmentCover'] === 'string' || data['idAttachmentCover'] instanceof String)) {
            throw new Error("Expected the field `idAttachmentCover` to be a primitive type in the JSON string but got " + data['idAttachmentCover']);
        }
        // ensure the json data is a string
        if (data['idBoard'] && !(typeof data['idBoard'] === 'string' || data['idBoard'] instanceof String)) {
            throw new Error("Expected the field `idBoard` to be a primitive type in the JSON string but got " + data['idBoard']);
        }
        // ensure the json data is a string
        if (data['idCardSource'] && !(typeof data['idCardSource'] === 'string' || data['idCardSource'] instanceof String)) {
            throw new Error("Expected the field `idCardSource` to be a primitive type in the JSON string but got " + data['idCardSource']);
        }
        // ensure the json data is a string
        if (data['idLabels'] && !(typeof data['idLabels'] === 'string' || data['idLabels'] instanceof String)) {
            throw new Error("Expected the field `idLabels` to be a primitive type in the JSON string but got " + data['idLabels']);
        }
        // ensure the json data is a string
        if (data['idList'] && !(typeof data['idList'] === 'string' || data['idList'] instanceof String)) {
            throw new Error("Expected the field `idList` to be a primitive type in the JSON string but got " + data['idList']);
        }
        // ensure the json data is a string
        if (data['idMembers'] && !(typeof data['idMembers'] === 'string' || data['idMembers'] instanceof String)) {
            throw new Error("Expected the field `idMembers` to be a primitive type in the JSON string but got " + data['idMembers']);
        }
        // ensure the json data is a string
        if (data['keepFromSource'] && !(typeof data['keepFromSource'] === 'string' || data['keepFromSource'] instanceof String)) {
            throw new Error("Expected the field `keepFromSource` to be a primitive type in the JSON string but got " + data['keepFromSource']);
        }
        // ensure the json data is a string
        if (data['labels'] && !(typeof data['labels'] === 'string' || data['labels'] instanceof String)) {
            throw new Error("Expected the field `labels` to be a primitive type in the JSON string but got " + data['labels']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['pos'] && !(typeof data['pos'] === 'string' || data['pos'] instanceof String)) {
            throw new Error("Expected the field `pos` to be a primitive type in the JSON string but got " + data['pos']);
        }
        // ensure the json data is a string
        if (data['subscribed'] && !(typeof data['subscribed'] === 'string' || data['subscribed'] instanceof String)) {
            throw new Error("Expected the field `subscribed` to be a primitive type in the JSON string but got " + data['subscribed']);
        }
        // ensure the json data is a string
        if (data['urlSource'] && !(typeof data['urlSource'] === 'string' || data['urlSource'] instanceof String)) {
            throw new Error("Expected the field `urlSource` to be a primitive type in the JSON string but got " + data['urlSource']);
        }

        return true;
    }


}



/**
 *  true or false
 * @member {String} closed
 */
Cards.prototype['closed'] = undefined;

/**
 * a string with a length from 0 to 16384
 * @member {String} desc
 */
Cards.prototype['desc'] = undefined;

/**
 * A date, or null
 * @member {String} due
 */
Cards.prototype['due'] = undefined;

/**
 * A file
 * @member {String} fileSource
 */
Cards.prototype['fileSource'] = undefined;

/**
 * Id of the image attachment of this card to use as its cover, or null for no cover
 * @member {String} idAttachmentCover
 */
Cards.prototype['idAttachmentCover'] = undefined;

/**
 * id of the board the card should be moved to
 * @member {String} idBoard
 */
Cards.prototype['idBoard'] = undefined;

/**
 * The id of the card to copy into a new card.
 * @member {String} idCardSource
 */
Cards.prototype['idCardSource'] = undefined;

/**
 * A comma-separated list of objectIds, 24-character hex strings
 * @member {String} idLabels
 */
Cards.prototype['idLabels'] = undefined;

/**
 * id of the list that the card should be added to
 * @member {String} idList
 */
Cards.prototype['idList'] = undefined;

/**
 * A comma-separated list of objectIds, 24-character hex strings
 * @member {String} idMembers
 */
Cards.prototype['idMembers'] = undefined;

/**
 * Properties of the card to copy over from the source.
 * @member {String} keepFromSource
 */
Cards.prototype['keepFromSource'] = undefined;

/**
 * all or a comma-separated list of: blue, green, orange, purple, red or yellow
 * @member {String} labels
 */
Cards.prototype['labels'] = undefined;

/**
 * The name of the new card.  It isn&#39;t required if the name is being copied from provided by a URL, file or card that is being copied.
 * @member {String} name
 */
Cards.prototype['name'] = undefined;

/**
 * A position. top , bottom , or a positive number.
 * @member {String} pos
 */
Cards.prototype['pos'] = undefined;

/**
 *  true or false
 * @member {String} subscribed
 */
Cards.prototype['subscribed'] = undefined;

/**
 * A URL starting with http:// or https:// or null
 * @member {String} urlSource
 */
Cards.prototype['urlSource'] = undefined;






export default Cards;

