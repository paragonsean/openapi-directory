/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDraftPick.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDraftPick::OAIDraftPick(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDraftPick::OAIDraftPick() {
    this->initializeModel();
}

OAIDraftPick::~OAIDraftPick() {}

void OAIDraftPick::initializeModel() {

    m_college_athlete_id_isSet = false;
    m_college_athlete_id_isValid = false;

    m_college_conference_isSet = false;
    m_college_conference_isValid = false;

    m_college_id_isSet = false;
    m_college_id_isValid = false;

    m_college_team_isSet = false;
    m_college_team_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_hometown_info_isSet = false;
    m_hometown_info_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nfl_athlete_id_isSet = false;
    m_nfl_athlete_id_isValid = false;

    m_nfl_team_isSet = false;
    m_nfl_team_isValid = false;

    m_overall_isSet = false;
    m_overall_isValid = false;

    m_pick_isSet = false;
    m_pick_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_pre_draft_grade_isSet = false;
    m_pre_draft_grade_isValid = false;

    m_pre_draft_position_ranking_isSet = false;
    m_pre_draft_position_ranking_isValid = false;

    m_pre_draft_ranking_isSet = false;
    m_pre_draft_ranking_isValid = false;

    m_round_isSet = false;
    m_round_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIDraftPick::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDraftPick::fromJsonObject(QJsonObject json) {

    m_college_athlete_id_isValid = ::OpenAPI::fromJsonValue(m_college_athlete_id, json[QString("collegeAthleteId")]);
    m_college_athlete_id_isSet = !json[QString("collegeAthleteId")].isNull() && m_college_athlete_id_isValid;

    m_college_conference_isValid = ::OpenAPI::fromJsonValue(m_college_conference, json[QString("collegeConference")]);
    m_college_conference_isSet = !json[QString("collegeConference")].isNull() && m_college_conference_isValid;

    m_college_id_isValid = ::OpenAPI::fromJsonValue(m_college_id, json[QString("collegeId")]);
    m_college_id_isSet = !json[QString("collegeId")].isNull() && m_college_id_isValid;

    m_college_team_isValid = ::OpenAPI::fromJsonValue(m_college_team, json[QString("collegeTeam")]);
    m_college_team_isSet = !json[QString("collegeTeam")].isNull() && m_college_team_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_hometown_info_isValid = ::OpenAPI::fromJsonValue(m_hometown_info, json[QString("hometownInfo")]);
    m_hometown_info_isSet = !json[QString("hometownInfo")].isNull() && m_hometown_info_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nfl_athlete_id_isValid = ::OpenAPI::fromJsonValue(m_nfl_athlete_id, json[QString("nflAthleteId")]);
    m_nfl_athlete_id_isSet = !json[QString("nflAthleteId")].isNull() && m_nfl_athlete_id_isValid;

    m_nfl_team_isValid = ::OpenAPI::fromJsonValue(m_nfl_team, json[QString("nflTeam")]);
    m_nfl_team_isSet = !json[QString("nflTeam")].isNull() && m_nfl_team_isValid;

    m_overall_isValid = ::OpenAPI::fromJsonValue(m_overall, json[QString("overall")]);
    m_overall_isSet = !json[QString("overall")].isNull() && m_overall_isValid;

    m_pick_isValid = ::OpenAPI::fromJsonValue(m_pick, json[QString("pick")]);
    m_pick_isSet = !json[QString("pick")].isNull() && m_pick_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_pre_draft_grade_isValid = ::OpenAPI::fromJsonValue(m_pre_draft_grade, json[QString("preDraftGrade")]);
    m_pre_draft_grade_isSet = !json[QString("preDraftGrade")].isNull() && m_pre_draft_grade_isValid;

    m_pre_draft_position_ranking_isValid = ::OpenAPI::fromJsonValue(m_pre_draft_position_ranking, json[QString("preDraftPositionRanking")]);
    m_pre_draft_position_ranking_isSet = !json[QString("preDraftPositionRanking")].isNull() && m_pre_draft_position_ranking_isValid;

    m_pre_draft_ranking_isValid = ::OpenAPI::fromJsonValue(m_pre_draft_ranking, json[QString("preDraftRanking")]);
    m_pre_draft_ranking_isSet = !json[QString("preDraftRanking")].isNull() && m_pre_draft_ranking_isValid;

    m_round_isValid = ::OpenAPI::fromJsonValue(m_round, json[QString("round")]);
    m_round_isSet = !json[QString("round")].isNull() && m_round_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIDraftPick::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDraftPick::asJsonObject() const {
    QJsonObject obj;
    if (m_college_athlete_id_isSet) {
        obj.insert(QString("collegeAthleteId"), ::OpenAPI::toJsonValue(m_college_athlete_id));
    }
    if (m_college_conference_isSet) {
        obj.insert(QString("collegeConference"), ::OpenAPI::toJsonValue(m_college_conference));
    }
    if (m_college_id_isSet) {
        obj.insert(QString("collegeId"), ::OpenAPI::toJsonValue(m_college_id));
    }
    if (m_college_team_isSet) {
        obj.insert(QString("collegeTeam"), ::OpenAPI::toJsonValue(m_college_team));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_hometown_info.isSet()) {
        obj.insert(QString("hometownInfo"), ::OpenAPI::toJsonValue(m_hometown_info));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nfl_athlete_id_isSet) {
        obj.insert(QString("nflAthleteId"), ::OpenAPI::toJsonValue(m_nfl_athlete_id));
    }
    if (m_nfl_team_isSet) {
        obj.insert(QString("nflTeam"), ::OpenAPI::toJsonValue(m_nfl_team));
    }
    if (m_overall_isSet) {
        obj.insert(QString("overall"), ::OpenAPI::toJsonValue(m_overall));
    }
    if (m_pick_isSet) {
        obj.insert(QString("pick"), ::OpenAPI::toJsonValue(m_pick));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_pre_draft_grade_isSet) {
        obj.insert(QString("preDraftGrade"), ::OpenAPI::toJsonValue(m_pre_draft_grade));
    }
    if (m_pre_draft_position_ranking_isSet) {
        obj.insert(QString("preDraftPositionRanking"), ::OpenAPI::toJsonValue(m_pre_draft_position_ranking));
    }
    if (m_pre_draft_ranking_isSet) {
        obj.insert(QString("preDraftRanking"), ::OpenAPI::toJsonValue(m_pre_draft_ranking));
    }
    if (m_round_isSet) {
        obj.insert(QString("round"), ::OpenAPI::toJsonValue(m_round));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

qint32 OAIDraftPick::getCollegeAthleteId() const {
    return m_college_athlete_id;
}
void OAIDraftPick::setCollegeAthleteId(const qint32 &college_athlete_id) {
    m_college_athlete_id = college_athlete_id;
    m_college_athlete_id_isSet = true;
}

bool OAIDraftPick::is_college_athlete_id_Set() const{
    return m_college_athlete_id_isSet;
}

bool OAIDraftPick::is_college_athlete_id_Valid() const{
    return m_college_athlete_id_isValid;
}

QString OAIDraftPick::getCollegeConference() const {
    return m_college_conference;
}
void OAIDraftPick::setCollegeConference(const QString &college_conference) {
    m_college_conference = college_conference;
    m_college_conference_isSet = true;
}

bool OAIDraftPick::is_college_conference_Set() const{
    return m_college_conference_isSet;
}

bool OAIDraftPick::is_college_conference_Valid() const{
    return m_college_conference_isValid;
}

qint32 OAIDraftPick::getCollegeId() const {
    return m_college_id;
}
void OAIDraftPick::setCollegeId(const qint32 &college_id) {
    m_college_id = college_id;
    m_college_id_isSet = true;
}

bool OAIDraftPick::is_college_id_Set() const{
    return m_college_id_isSet;
}

bool OAIDraftPick::is_college_id_Valid() const{
    return m_college_id_isValid;
}

QString OAIDraftPick::getCollegeTeam() const {
    return m_college_team;
}
void OAIDraftPick::setCollegeTeam(const QString &college_team) {
    m_college_team = college_team;
    m_college_team_isSet = true;
}

bool OAIDraftPick::is_college_team_Set() const{
    return m_college_team_isSet;
}

bool OAIDraftPick::is_college_team_Valid() const{
    return m_college_team_isValid;
}

qint32 OAIDraftPick::getHeight() const {
    return m_height;
}
void OAIDraftPick::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIDraftPick::is_height_Set() const{
    return m_height_isSet;
}

bool OAIDraftPick::is_height_Valid() const{
    return m_height_isValid;
}

OAIDraftPick_hometownInfo OAIDraftPick::getHometownInfo() const {
    return m_hometown_info;
}
void OAIDraftPick::setHometownInfo(const OAIDraftPick_hometownInfo &hometown_info) {
    m_hometown_info = hometown_info;
    m_hometown_info_isSet = true;
}

bool OAIDraftPick::is_hometown_info_Set() const{
    return m_hometown_info_isSet;
}

bool OAIDraftPick::is_hometown_info_Valid() const{
    return m_hometown_info_isValid;
}

QString OAIDraftPick::getName() const {
    return m_name;
}
void OAIDraftPick::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDraftPick::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDraftPick::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIDraftPick::getNflAthleteId() const {
    return m_nfl_athlete_id;
}
void OAIDraftPick::setNflAthleteId(const qint32 &nfl_athlete_id) {
    m_nfl_athlete_id = nfl_athlete_id;
    m_nfl_athlete_id_isSet = true;
}

bool OAIDraftPick::is_nfl_athlete_id_Set() const{
    return m_nfl_athlete_id_isSet;
}

bool OAIDraftPick::is_nfl_athlete_id_Valid() const{
    return m_nfl_athlete_id_isValid;
}

QString OAIDraftPick::getNflTeam() const {
    return m_nfl_team;
}
void OAIDraftPick::setNflTeam(const QString &nfl_team) {
    m_nfl_team = nfl_team;
    m_nfl_team_isSet = true;
}

bool OAIDraftPick::is_nfl_team_Set() const{
    return m_nfl_team_isSet;
}

bool OAIDraftPick::is_nfl_team_Valid() const{
    return m_nfl_team_isValid;
}

qint32 OAIDraftPick::getOverall() const {
    return m_overall;
}
void OAIDraftPick::setOverall(const qint32 &overall) {
    m_overall = overall;
    m_overall_isSet = true;
}

bool OAIDraftPick::is_overall_Set() const{
    return m_overall_isSet;
}

bool OAIDraftPick::is_overall_Valid() const{
    return m_overall_isValid;
}

qint32 OAIDraftPick::getPick() const {
    return m_pick;
}
void OAIDraftPick::setPick(const qint32 &pick) {
    m_pick = pick;
    m_pick_isSet = true;
}

bool OAIDraftPick::is_pick_Set() const{
    return m_pick_isSet;
}

bool OAIDraftPick::is_pick_Valid() const{
    return m_pick_isValid;
}

QString OAIDraftPick::getPosition() const {
    return m_position;
}
void OAIDraftPick::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIDraftPick::is_position_Set() const{
    return m_position_isSet;
}

bool OAIDraftPick::is_position_Valid() const{
    return m_position_isValid;
}

qint32 OAIDraftPick::getPreDraftGrade() const {
    return m_pre_draft_grade;
}
void OAIDraftPick::setPreDraftGrade(const qint32 &pre_draft_grade) {
    m_pre_draft_grade = pre_draft_grade;
    m_pre_draft_grade_isSet = true;
}

bool OAIDraftPick::is_pre_draft_grade_Set() const{
    return m_pre_draft_grade_isSet;
}

bool OAIDraftPick::is_pre_draft_grade_Valid() const{
    return m_pre_draft_grade_isValid;
}

qint32 OAIDraftPick::getPreDraftPositionRanking() const {
    return m_pre_draft_position_ranking;
}
void OAIDraftPick::setPreDraftPositionRanking(const qint32 &pre_draft_position_ranking) {
    m_pre_draft_position_ranking = pre_draft_position_ranking;
    m_pre_draft_position_ranking_isSet = true;
}

bool OAIDraftPick::is_pre_draft_position_ranking_Set() const{
    return m_pre_draft_position_ranking_isSet;
}

bool OAIDraftPick::is_pre_draft_position_ranking_Valid() const{
    return m_pre_draft_position_ranking_isValid;
}

qint32 OAIDraftPick::getPreDraftRanking() const {
    return m_pre_draft_ranking;
}
void OAIDraftPick::setPreDraftRanking(const qint32 &pre_draft_ranking) {
    m_pre_draft_ranking = pre_draft_ranking;
    m_pre_draft_ranking_isSet = true;
}

bool OAIDraftPick::is_pre_draft_ranking_Set() const{
    return m_pre_draft_ranking_isSet;
}

bool OAIDraftPick::is_pre_draft_ranking_Valid() const{
    return m_pre_draft_ranking_isValid;
}

qint32 OAIDraftPick::getRound() const {
    return m_round;
}
void OAIDraftPick::setRound(const qint32 &round) {
    m_round = round;
    m_round_isSet = true;
}

bool OAIDraftPick::is_round_Set() const{
    return m_round_isSet;
}

bool OAIDraftPick::is_round_Valid() const{
    return m_round_isValid;
}

qint32 OAIDraftPick::getWeight() const {
    return m_weight;
}
void OAIDraftPick::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIDraftPick::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIDraftPick::is_weight_Valid() const{
    return m_weight_isValid;
}

qint32 OAIDraftPick::getYear() const {
    return m_year;
}
void OAIDraftPick::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIDraftPick::is_year_Set() const{
    return m_year_isSet;
}

bool OAIDraftPick::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIDraftPick::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_college_athlete_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_college_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_college_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_college_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hometown_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfl_athlete_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfl_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pick_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_draft_grade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_draft_position_ranking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_draft_ranking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_round_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDraftPick::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
