/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGameWeather.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGameWeather::OAIGameWeather(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGameWeather::OAIGameWeather() {
    this->initializeModel();
}

OAIGameWeather::~OAIGameWeather() {}

void OAIGameWeather::initializeModel() {

    m_away_conference_isSet = false;
    m_away_conference_isValid = false;

    m_away_team_isSet = false;
    m_away_team_isValid = false;

    m_dew_point_isSet = false;
    m_dew_point_isValid = false;

    m_game_indoors_isSet = false;
    m_game_indoors_isValid = false;

    m_home_conference_isSet = false;
    m_home_conference_isValid = false;

    m_home_team_isSet = false;
    m_home_team_isValid = false;

    m_humidity_isSet = false;
    m_humidity_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_precipitation_isSet = false;
    m_precipitation_isValid = false;

    m_pressure_isSet = false;
    m_pressure_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_season_type_isSet = false;
    m_season_type_isValid = false;

    m_snowfall_isSet = false;
    m_snowfall_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_temperature_isSet = false;
    m_temperature_isValid = false;

    m_venue_isSet = false;
    m_venue_isValid = false;

    m_venue_id_isSet = false;
    m_venue_id_isValid = false;

    m_weather_condition_isSet = false;
    m_weather_condition_isValid = false;

    m_weather_condition_code_isSet = false;
    m_weather_condition_code_isValid = false;

    m_week_isSet = false;
    m_week_isValid = false;

    m_wind_direction_isSet = false;
    m_wind_direction_isValid = false;

    m_wind_speed_isSet = false;
    m_wind_speed_isValid = false;
}

void OAIGameWeather::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGameWeather::fromJsonObject(QJsonObject json) {

    m_away_conference_isValid = ::OpenAPI::fromJsonValue(m_away_conference, json[QString("awayConference")]);
    m_away_conference_isSet = !json[QString("awayConference")].isNull() && m_away_conference_isValid;

    m_away_team_isValid = ::OpenAPI::fromJsonValue(m_away_team, json[QString("awayTeam")]);
    m_away_team_isSet = !json[QString("awayTeam")].isNull() && m_away_team_isValid;

    m_dew_point_isValid = ::OpenAPI::fromJsonValue(m_dew_point, json[QString("dewPoint")]);
    m_dew_point_isSet = !json[QString("dewPoint")].isNull() && m_dew_point_isValid;

    m_game_indoors_isValid = ::OpenAPI::fromJsonValue(m_game_indoors, json[QString("gameIndoors")]);
    m_game_indoors_isSet = !json[QString("gameIndoors")].isNull() && m_game_indoors_isValid;

    m_home_conference_isValid = ::OpenAPI::fromJsonValue(m_home_conference, json[QString("homeConference")]);
    m_home_conference_isSet = !json[QString("homeConference")].isNull() && m_home_conference_isValid;

    m_home_team_isValid = ::OpenAPI::fromJsonValue(m_home_team, json[QString("homeTeam")]);
    m_home_team_isSet = !json[QString("homeTeam")].isNull() && m_home_team_isValid;

    m_humidity_isValid = ::OpenAPI::fromJsonValue(m_humidity, json[QString("humidity")]);
    m_humidity_isSet = !json[QString("humidity")].isNull() && m_humidity_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_precipitation_isValid = ::OpenAPI::fromJsonValue(m_precipitation, json[QString("precipitation")]);
    m_precipitation_isSet = !json[QString("precipitation")].isNull() && m_precipitation_isValid;

    m_pressure_isValid = ::OpenAPI::fromJsonValue(m_pressure, json[QString("pressure")]);
    m_pressure_isSet = !json[QString("pressure")].isNull() && m_pressure_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("season")]);
    m_season_isSet = !json[QString("season")].isNull() && m_season_isValid;

    m_season_type_isValid = ::OpenAPI::fromJsonValue(m_season_type, json[QString("seasonType")]);
    m_season_type_isSet = !json[QString("seasonType")].isNull() && m_season_type_isValid;

    m_snowfall_isValid = ::OpenAPI::fromJsonValue(m_snowfall, json[QString("snowfall")]);
    m_snowfall_isSet = !json[QString("snowfall")].isNull() && m_snowfall_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_temperature_isValid = ::OpenAPI::fromJsonValue(m_temperature, json[QString("temperature")]);
    m_temperature_isSet = !json[QString("temperature")].isNull() && m_temperature_isValid;

    m_venue_isValid = ::OpenAPI::fromJsonValue(m_venue, json[QString("venue")]);
    m_venue_isSet = !json[QString("venue")].isNull() && m_venue_isValid;

    m_venue_id_isValid = ::OpenAPI::fromJsonValue(m_venue_id, json[QString("venueId")]);
    m_venue_id_isSet = !json[QString("venueId")].isNull() && m_venue_id_isValid;

    m_weather_condition_isValid = ::OpenAPI::fromJsonValue(m_weather_condition, json[QString("weatherCondition")]);
    m_weather_condition_isSet = !json[QString("weatherCondition")].isNull() && m_weather_condition_isValid;

    m_weather_condition_code_isValid = ::OpenAPI::fromJsonValue(m_weather_condition_code, json[QString("weatherConditionCode")]);
    m_weather_condition_code_isSet = !json[QString("weatherConditionCode")].isNull() && m_weather_condition_code_isValid;

    m_week_isValid = ::OpenAPI::fromJsonValue(m_week, json[QString("week")]);
    m_week_isSet = !json[QString("week")].isNull() && m_week_isValid;

    m_wind_direction_isValid = ::OpenAPI::fromJsonValue(m_wind_direction, json[QString("windDirection")]);
    m_wind_direction_isSet = !json[QString("windDirection")].isNull() && m_wind_direction_isValid;

    m_wind_speed_isValid = ::OpenAPI::fromJsonValue(m_wind_speed, json[QString("windSpeed")]);
    m_wind_speed_isSet = !json[QString("windSpeed")].isNull() && m_wind_speed_isValid;
}

QString OAIGameWeather::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGameWeather::asJsonObject() const {
    QJsonObject obj;
    if (m_away_conference_isSet) {
        obj.insert(QString("awayConference"), ::OpenAPI::toJsonValue(m_away_conference));
    }
    if (m_away_team_isSet) {
        obj.insert(QString("awayTeam"), ::OpenAPI::toJsonValue(m_away_team));
    }
    if (m_dew_point_isSet) {
        obj.insert(QString("dewPoint"), ::OpenAPI::toJsonValue(m_dew_point));
    }
    if (m_game_indoors_isSet) {
        obj.insert(QString("gameIndoors"), ::OpenAPI::toJsonValue(m_game_indoors));
    }
    if (m_home_conference_isSet) {
        obj.insert(QString("homeConference"), ::OpenAPI::toJsonValue(m_home_conference));
    }
    if (m_home_team_isSet) {
        obj.insert(QString("homeTeam"), ::OpenAPI::toJsonValue(m_home_team));
    }
    if (m_humidity_isSet) {
        obj.insert(QString("humidity"), ::OpenAPI::toJsonValue(m_humidity));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_precipitation_isSet) {
        obj.insert(QString("precipitation"), ::OpenAPI::toJsonValue(m_precipitation));
    }
    if (m_pressure_isSet) {
        obj.insert(QString("pressure"), ::OpenAPI::toJsonValue(m_pressure));
    }
    if (m_season_isSet) {
        obj.insert(QString("season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_season_type_isSet) {
        obj.insert(QString("seasonType"), ::OpenAPI::toJsonValue(m_season_type));
    }
    if (m_snowfall_isSet) {
        obj.insert(QString("snowfall"), ::OpenAPI::toJsonValue(m_snowfall));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_temperature_isSet) {
        obj.insert(QString("temperature"), ::OpenAPI::toJsonValue(m_temperature));
    }
    if (m_venue_isSet) {
        obj.insert(QString("venue"), ::OpenAPI::toJsonValue(m_venue));
    }
    if (m_venue_id_isSet) {
        obj.insert(QString("venueId"), ::OpenAPI::toJsonValue(m_venue_id));
    }
    if (m_weather_condition_isSet) {
        obj.insert(QString("weatherCondition"), ::OpenAPI::toJsonValue(m_weather_condition));
    }
    if (m_weather_condition_code_isSet) {
        obj.insert(QString("weatherConditionCode"), ::OpenAPI::toJsonValue(m_weather_condition_code));
    }
    if (m_week_isSet) {
        obj.insert(QString("week"), ::OpenAPI::toJsonValue(m_week));
    }
    if (m_wind_direction_isSet) {
        obj.insert(QString("windDirection"), ::OpenAPI::toJsonValue(m_wind_direction));
    }
    if (m_wind_speed_isSet) {
        obj.insert(QString("windSpeed"), ::OpenAPI::toJsonValue(m_wind_speed));
    }
    return obj;
}

QString OAIGameWeather::getAwayConference() const {
    return m_away_conference;
}
void OAIGameWeather::setAwayConference(const QString &away_conference) {
    m_away_conference = away_conference;
    m_away_conference_isSet = true;
}

bool OAIGameWeather::is_away_conference_Set() const{
    return m_away_conference_isSet;
}

bool OAIGameWeather::is_away_conference_Valid() const{
    return m_away_conference_isValid;
}

QString OAIGameWeather::getAwayTeam() const {
    return m_away_team;
}
void OAIGameWeather::setAwayTeam(const QString &away_team) {
    m_away_team = away_team;
    m_away_team_isSet = true;
}

bool OAIGameWeather::is_away_team_Set() const{
    return m_away_team_isSet;
}

bool OAIGameWeather::is_away_team_Valid() const{
    return m_away_team_isValid;
}

double OAIGameWeather::getDewPoint() const {
    return m_dew_point;
}
void OAIGameWeather::setDewPoint(const double &dew_point) {
    m_dew_point = dew_point;
    m_dew_point_isSet = true;
}

bool OAIGameWeather::is_dew_point_Set() const{
    return m_dew_point_isSet;
}

bool OAIGameWeather::is_dew_point_Valid() const{
    return m_dew_point_isValid;
}

bool OAIGameWeather::isGameIndoors() const {
    return m_game_indoors;
}
void OAIGameWeather::setGameIndoors(const bool &game_indoors) {
    m_game_indoors = game_indoors;
    m_game_indoors_isSet = true;
}

bool OAIGameWeather::is_game_indoors_Set() const{
    return m_game_indoors_isSet;
}

bool OAIGameWeather::is_game_indoors_Valid() const{
    return m_game_indoors_isValid;
}

QString OAIGameWeather::getHomeConference() const {
    return m_home_conference;
}
void OAIGameWeather::setHomeConference(const QString &home_conference) {
    m_home_conference = home_conference;
    m_home_conference_isSet = true;
}

bool OAIGameWeather::is_home_conference_Set() const{
    return m_home_conference_isSet;
}

bool OAIGameWeather::is_home_conference_Valid() const{
    return m_home_conference_isValid;
}

QString OAIGameWeather::getHomeTeam() const {
    return m_home_team;
}
void OAIGameWeather::setHomeTeam(const QString &home_team) {
    m_home_team = home_team;
    m_home_team_isSet = true;
}

bool OAIGameWeather::is_home_team_Set() const{
    return m_home_team_isSet;
}

bool OAIGameWeather::is_home_team_Valid() const{
    return m_home_team_isValid;
}

double OAIGameWeather::getHumidity() const {
    return m_humidity;
}
void OAIGameWeather::setHumidity(const double &humidity) {
    m_humidity = humidity;
    m_humidity_isSet = true;
}

bool OAIGameWeather::is_humidity_Set() const{
    return m_humidity_isSet;
}

bool OAIGameWeather::is_humidity_Valid() const{
    return m_humidity_isValid;
}

qint32 OAIGameWeather::getId() const {
    return m_id;
}
void OAIGameWeather::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGameWeather::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGameWeather::is_id_Valid() const{
    return m_id_isValid;
}

double OAIGameWeather::getPrecipitation() const {
    return m_precipitation;
}
void OAIGameWeather::setPrecipitation(const double &precipitation) {
    m_precipitation = precipitation;
    m_precipitation_isSet = true;
}

bool OAIGameWeather::is_precipitation_Set() const{
    return m_precipitation_isSet;
}

bool OAIGameWeather::is_precipitation_Valid() const{
    return m_precipitation_isValid;
}

double OAIGameWeather::getPressure() const {
    return m_pressure;
}
void OAIGameWeather::setPressure(const double &pressure) {
    m_pressure = pressure;
    m_pressure_isSet = true;
}

bool OAIGameWeather::is_pressure_Set() const{
    return m_pressure_isSet;
}

bool OAIGameWeather::is_pressure_Valid() const{
    return m_pressure_isValid;
}

qint32 OAIGameWeather::getSeason() const {
    return m_season;
}
void OAIGameWeather::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIGameWeather::is_season_Set() const{
    return m_season_isSet;
}

bool OAIGameWeather::is_season_Valid() const{
    return m_season_isValid;
}

QString OAIGameWeather::getSeasonType() const {
    return m_season_type;
}
void OAIGameWeather::setSeasonType(const QString &season_type) {
    m_season_type = season_type;
    m_season_type_isSet = true;
}

bool OAIGameWeather::is_season_type_Set() const{
    return m_season_type_isSet;
}

bool OAIGameWeather::is_season_type_Valid() const{
    return m_season_type_isValid;
}

double OAIGameWeather::getSnowfall() const {
    return m_snowfall;
}
void OAIGameWeather::setSnowfall(const double &snowfall) {
    m_snowfall = snowfall;
    m_snowfall_isSet = true;
}

bool OAIGameWeather::is_snowfall_Set() const{
    return m_snowfall_isSet;
}

bool OAIGameWeather::is_snowfall_Valid() const{
    return m_snowfall_isValid;
}

QString OAIGameWeather::getStartTime() const {
    return m_start_time;
}
void OAIGameWeather::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGameWeather::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGameWeather::is_start_time_Valid() const{
    return m_start_time_isValid;
}

double OAIGameWeather::getTemperature() const {
    return m_temperature;
}
void OAIGameWeather::setTemperature(const double &temperature) {
    m_temperature = temperature;
    m_temperature_isSet = true;
}

bool OAIGameWeather::is_temperature_Set() const{
    return m_temperature_isSet;
}

bool OAIGameWeather::is_temperature_Valid() const{
    return m_temperature_isValid;
}

QString OAIGameWeather::getVenue() const {
    return m_venue;
}
void OAIGameWeather::setVenue(const QString &venue) {
    m_venue = venue;
    m_venue_isSet = true;
}

bool OAIGameWeather::is_venue_Set() const{
    return m_venue_isSet;
}

bool OAIGameWeather::is_venue_Valid() const{
    return m_venue_isValid;
}

qint32 OAIGameWeather::getVenueId() const {
    return m_venue_id;
}
void OAIGameWeather::setVenueId(const qint32 &venue_id) {
    m_venue_id = venue_id;
    m_venue_id_isSet = true;
}

bool OAIGameWeather::is_venue_id_Set() const{
    return m_venue_id_isSet;
}

bool OAIGameWeather::is_venue_id_Valid() const{
    return m_venue_id_isValid;
}

QString OAIGameWeather::getWeatherCondition() const {
    return m_weather_condition;
}
void OAIGameWeather::setWeatherCondition(const QString &weather_condition) {
    m_weather_condition = weather_condition;
    m_weather_condition_isSet = true;
}

bool OAIGameWeather::is_weather_condition_Set() const{
    return m_weather_condition_isSet;
}

bool OAIGameWeather::is_weather_condition_Valid() const{
    return m_weather_condition_isValid;
}

qint32 OAIGameWeather::getWeatherConditionCode() const {
    return m_weather_condition_code;
}
void OAIGameWeather::setWeatherConditionCode(const qint32 &weather_condition_code) {
    m_weather_condition_code = weather_condition_code;
    m_weather_condition_code_isSet = true;
}

bool OAIGameWeather::is_weather_condition_code_Set() const{
    return m_weather_condition_code_isSet;
}

bool OAIGameWeather::is_weather_condition_code_Valid() const{
    return m_weather_condition_code_isValid;
}

qint32 OAIGameWeather::getWeek() const {
    return m_week;
}
void OAIGameWeather::setWeek(const qint32 &week) {
    m_week = week;
    m_week_isSet = true;
}

bool OAIGameWeather::is_week_Set() const{
    return m_week_isSet;
}

bool OAIGameWeather::is_week_Valid() const{
    return m_week_isValid;
}

double OAIGameWeather::getWindDirection() const {
    return m_wind_direction;
}
void OAIGameWeather::setWindDirection(const double &wind_direction) {
    m_wind_direction = wind_direction;
    m_wind_direction_isSet = true;
}

bool OAIGameWeather::is_wind_direction_Set() const{
    return m_wind_direction_isSet;
}

bool OAIGameWeather::is_wind_direction_Valid() const{
    return m_wind_direction_isValid;
}

double OAIGameWeather::getWindSpeed() const {
    return m_wind_speed;
}
void OAIGameWeather::setWindSpeed(const double &wind_speed) {
    m_wind_speed = wind_speed;
    m_wind_speed_isSet = true;
}

bool OAIGameWeather::is_wind_speed_Set() const{
    return m_wind_speed_isSet;
}

bool OAIGameWeather::is_wind_speed_Valid() const{
    return m_wind_speed_isValid;
}

bool OAIGameWeather::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_away_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dew_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_indoors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_humidity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_precipitation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pressure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snowfall_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temperature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_venue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_venue_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weather_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weather_condition_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wind_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wind_speed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGameWeather::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
