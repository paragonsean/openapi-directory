/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamMatchup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamMatchup::OAITeamMatchup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamMatchup::OAITeamMatchup() {
    this->initializeModel();
}

OAITeamMatchup::~OAITeamMatchup() {}

void OAITeamMatchup::initializeModel() {

    m_end_year_isSet = false;
    m_end_year_isValid = false;

    m_games_isSet = false;
    m_games_isValid = false;

    m_start_year_isSet = false;
    m_start_year_isValid = false;

    m_team1_isSet = false;
    m_team1_isValid = false;

    m_team1_wins_isSet = false;
    m_team1_wins_isValid = false;

    m_team2_isSet = false;
    m_team2_isValid = false;

    m_team2_wins_isSet = false;
    m_team2_wins_isValid = false;

    m_ties_isSet = false;
    m_ties_isValid = false;
}

void OAITeamMatchup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamMatchup::fromJsonObject(QJsonObject json) {

    m_end_year_isValid = ::OpenAPI::fromJsonValue(m_end_year, json[QString("endYear")]);
    m_end_year_isSet = !json[QString("endYear")].isNull() && m_end_year_isValid;

    m_games_isValid = ::OpenAPI::fromJsonValue(m_games, json[QString("games")]);
    m_games_isSet = !json[QString("games")].isNull() && m_games_isValid;

    m_start_year_isValid = ::OpenAPI::fromJsonValue(m_start_year, json[QString("startYear")]);
    m_start_year_isSet = !json[QString("startYear")].isNull() && m_start_year_isValid;

    m_team1_isValid = ::OpenAPI::fromJsonValue(m_team1, json[QString("team1")]);
    m_team1_isSet = !json[QString("team1")].isNull() && m_team1_isValid;

    m_team1_wins_isValid = ::OpenAPI::fromJsonValue(m_team1_wins, json[QString("team1Wins")]);
    m_team1_wins_isSet = !json[QString("team1Wins")].isNull() && m_team1_wins_isValid;

    m_team2_isValid = ::OpenAPI::fromJsonValue(m_team2, json[QString("team2")]);
    m_team2_isSet = !json[QString("team2")].isNull() && m_team2_isValid;

    m_team2_wins_isValid = ::OpenAPI::fromJsonValue(m_team2_wins, json[QString("team2Wins")]);
    m_team2_wins_isSet = !json[QString("team2Wins")].isNull() && m_team2_wins_isValid;

    m_ties_isValid = ::OpenAPI::fromJsonValue(m_ties, json[QString("ties")]);
    m_ties_isSet = !json[QString("ties")].isNull() && m_ties_isValid;
}

QString OAITeamMatchup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamMatchup::asJsonObject() const {
    QJsonObject obj;
    if (m_end_year_isSet) {
        obj.insert(QString("endYear"), ::OpenAPI::toJsonValue(m_end_year));
    }
    if (m_games.size() > 0) {
        obj.insert(QString("games"), ::OpenAPI::toJsonValue(m_games));
    }
    if (m_start_year_isSet) {
        obj.insert(QString("startYear"), ::OpenAPI::toJsonValue(m_start_year));
    }
    if (m_team1_isSet) {
        obj.insert(QString("team1"), ::OpenAPI::toJsonValue(m_team1));
    }
    if (m_team1_wins_isSet) {
        obj.insert(QString("team1Wins"), ::OpenAPI::toJsonValue(m_team1_wins));
    }
    if (m_team2_isSet) {
        obj.insert(QString("team2"), ::OpenAPI::toJsonValue(m_team2));
    }
    if (m_team2_wins_isSet) {
        obj.insert(QString("team2Wins"), ::OpenAPI::toJsonValue(m_team2_wins));
    }
    if (m_ties_isSet) {
        obj.insert(QString("ties"), ::OpenAPI::toJsonValue(m_ties));
    }
    return obj;
}

qint32 OAITeamMatchup::getEndYear() const {
    return m_end_year;
}
void OAITeamMatchup::setEndYear(const qint32 &end_year) {
    m_end_year = end_year;
    m_end_year_isSet = true;
}

bool OAITeamMatchup::is_end_year_Set() const{
    return m_end_year_isSet;
}

bool OAITeamMatchup::is_end_year_Valid() const{
    return m_end_year_isValid;
}

QList<OAITeamMatchup_games_inner> OAITeamMatchup::getGames() const {
    return m_games;
}
void OAITeamMatchup::setGames(const QList<OAITeamMatchup_games_inner> &games) {
    m_games = games;
    m_games_isSet = true;
}

bool OAITeamMatchup::is_games_Set() const{
    return m_games_isSet;
}

bool OAITeamMatchup::is_games_Valid() const{
    return m_games_isValid;
}

qint32 OAITeamMatchup::getStartYear() const {
    return m_start_year;
}
void OAITeamMatchup::setStartYear(const qint32 &start_year) {
    m_start_year = start_year;
    m_start_year_isSet = true;
}

bool OAITeamMatchup::is_start_year_Set() const{
    return m_start_year_isSet;
}

bool OAITeamMatchup::is_start_year_Valid() const{
    return m_start_year_isValid;
}

QString OAITeamMatchup::getTeam1() const {
    return m_team1;
}
void OAITeamMatchup::setTeam1(const QString &team1) {
    m_team1 = team1;
    m_team1_isSet = true;
}

bool OAITeamMatchup::is_team1_Set() const{
    return m_team1_isSet;
}

bool OAITeamMatchup::is_team1_Valid() const{
    return m_team1_isValid;
}

qint32 OAITeamMatchup::getTeam1Wins() const {
    return m_team1_wins;
}
void OAITeamMatchup::setTeam1Wins(const qint32 &team1_wins) {
    m_team1_wins = team1_wins;
    m_team1_wins_isSet = true;
}

bool OAITeamMatchup::is_team1_wins_Set() const{
    return m_team1_wins_isSet;
}

bool OAITeamMatchup::is_team1_wins_Valid() const{
    return m_team1_wins_isValid;
}

QString OAITeamMatchup::getTeam2() const {
    return m_team2;
}
void OAITeamMatchup::setTeam2(const QString &team2) {
    m_team2 = team2;
    m_team2_isSet = true;
}

bool OAITeamMatchup::is_team2_Set() const{
    return m_team2_isSet;
}

bool OAITeamMatchup::is_team2_Valid() const{
    return m_team2_isValid;
}

qint32 OAITeamMatchup::getTeam2Wins() const {
    return m_team2_wins;
}
void OAITeamMatchup::setTeam2Wins(const qint32 &team2_wins) {
    m_team2_wins = team2_wins;
    m_team2_wins_isSet = true;
}

bool OAITeamMatchup::is_team2_wins_Set() const{
    return m_team2_wins_isSet;
}

bool OAITeamMatchup::is_team2_wins_Valid() const{
    return m_team2_wins_isValid;
}

qint32 OAITeamMatchup::getTies() const {
    return m_ties;
}
void OAITeamMatchup::setTies(const qint32 &ties) {
    m_ties = ties;
    m_ties_isSet = true;
}

bool OAITeamMatchup::is_ties_Set() const{
    return m_ties_isSet;
}

bool OAITeamMatchup::is_ties_Valid() const{
    return m_ties_isValid;
}

bool OAITeamMatchup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_games.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team1_wins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team2_wins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ties_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamMatchup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
