/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGamesApi_H
#define OAI_OAIGamesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBoxScore.h"
#include "OAIGame.h"
#include "OAIGameMedia.h"
#include "OAIGameWeather.h"
#include "OAIPlayerGame.h"
#include "OAIScoreboardGame.h"
#include "OAITeamGame.h"
#include "OAITeamRecord.h"
#include "OAIWeek.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGamesApi : public QObject {
    Q_OBJECT

public:
    OAIGamesApi(const int timeOut = 0);
    ~OAIGamesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  game_id qint32 [required]
    */
    virtual void getAdvancedBoxScore(const qint32 &game_id);

    /**
    * @param[in]  year qint32 [required]
    */
    virtual void getCalendar(const qint32 &year);

    /**
    * @param[in]  year qint32 [required]
    * @param[in]  week qint32 [optional]
    * @param[in]  season_type QString [optional]
    * @param[in]  team QString [optional]
    * @param[in]  conference QString [optional]
    * @param[in]  media_type QString [optional]
    * @param[in]  classification QString [optional]
    */
    virtual void getGameMedia(const qint32 &year, const ::OpenAPI::OptionalParam<qint32> &week = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &season_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &team = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conference = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &media_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &classification = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  game_id qint32 [optional]
    * @param[in]  year qint32 [optional]
    * @param[in]  week qint32 [optional]
    * @param[in]  season_type QString [optional]
    * @param[in]  team QString [optional]
    * @param[in]  conference QString [optional]
    * @param[in]  classification QString [optional]
    */
    virtual void getGameWeather(const ::OpenAPI::OptionalParam<qint32> &game_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &week = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &season_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &team = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conference = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &classification = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  year qint32 [required]
    * @param[in]  week qint32 [optional]
    * @param[in]  season_type QString [optional]
    * @param[in]  team QString [optional]
    * @param[in]  home QString [optional]
    * @param[in]  away QString [optional]
    * @param[in]  conference QString [optional]
    * @param[in]  division QString [optional]
    * @param[in]  id qint32 [optional]
    */
    virtual void getGames(const qint32 &year, const ::OpenAPI::OptionalParam<qint32> &week = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &season_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &team = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &home = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &away = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conference = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &division = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  year qint32 [required]
    * @param[in]  week qint32 [optional]
    * @param[in]  season_type QString [optional]
    * @param[in]  team QString [optional]
    * @param[in]  conference QString [optional]
    * @param[in]  category QString [optional]
    * @param[in]  game_id qint32 [optional]
    */
    virtual void getPlayerGameStats(const qint32 &year, const ::OpenAPI::OptionalParam<qint32> &week = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &season_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &team = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conference = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &game_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  classification QString [optional]
    * @param[in]  conference QString [optional]
    */
    virtual void getScoreboard(const ::OpenAPI::OptionalParam<QString> &classification = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conference = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  year qint32 [required]
    * @param[in]  week qint32 [optional]
    * @param[in]  season_type QString [optional]
    * @param[in]  team QString [optional]
    * @param[in]  conference QString [optional]
    * @param[in]  game_id qint32 [optional]
    * @param[in]  classification QString [optional]
    */
    virtual void getTeamGameStats(const qint32 &year, const ::OpenAPI::OptionalParam<qint32> &week = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &season_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &team = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conference = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &game_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &classification = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  year qint32 [optional]
    * @param[in]  team QString [optional]
    * @param[in]  conference QString [optional]
    */
    virtual void getTeamRecords(const ::OpenAPI::OptionalParam<qint32> &year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &team = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conference = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAdvancedBoxScoreCallback(OAIHttpRequestWorker *worker);
    void getCalendarCallback(OAIHttpRequestWorker *worker);
    void getGameMediaCallback(OAIHttpRequestWorker *worker);
    void getGameWeatherCallback(OAIHttpRequestWorker *worker);
    void getGamesCallback(OAIHttpRequestWorker *worker);
    void getPlayerGameStatsCallback(OAIHttpRequestWorker *worker);
    void getScoreboardCallback(OAIHttpRequestWorker *worker);
    void getTeamGameStatsCallback(OAIHttpRequestWorker *worker);
    void getTeamRecordsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAdvancedBoxScoreSignal(OAIBoxScore summary);
    void getCalendarSignal(QList<OAIWeek> summary);
    void getGameMediaSignal(QList<OAIGameMedia> summary);
    void getGameWeatherSignal(QList<OAIGameWeather> summary);
    void getGamesSignal(QList<OAIGame> summary);
    void getPlayerGameStatsSignal(QList<OAIPlayerGame> summary);
    void getScoreboardSignal(QList<OAIScoreboardGame> summary);
    void getTeamGameStatsSignal(QList<OAITeamGame> summary);
    void getTeamRecordsSignal(QList<OAITeamRecord> summary);


    void getAdvancedBoxScoreSignalFull(OAIHttpRequestWorker *worker, OAIBoxScore summary);
    void getCalendarSignalFull(OAIHttpRequestWorker *worker, QList<OAIWeek> summary);
    void getGameMediaSignalFull(OAIHttpRequestWorker *worker, QList<OAIGameMedia> summary);
    void getGameWeatherSignalFull(OAIHttpRequestWorker *worker, QList<OAIGameWeather> summary);
    void getGamesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGame> summary);
    void getPlayerGameStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerGame> summary);
    void getScoreboardSignalFull(OAIHttpRequestWorker *worker, QList<OAIScoreboardGame> summary);
    void getTeamGameStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeamGame> summary);
    void getTeamRecordsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeamRecord> summary);

    Q_DECL_DEPRECATED_X("Use getAdvancedBoxScoreSignalError() instead")
    void getAdvancedBoxScoreSignalE(OAIBoxScore summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdvancedBoxScoreSignalError(OAIBoxScore summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCalendarSignalError() instead")
    void getCalendarSignalE(QList<OAIWeek> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCalendarSignalError(QList<OAIWeek> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGameMediaSignalError() instead")
    void getGameMediaSignalE(QList<OAIGameMedia> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGameMediaSignalError(QList<OAIGameMedia> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGameWeatherSignalError() instead")
    void getGameWeatherSignalE(QList<OAIGameWeather> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGameWeatherSignalError(QList<OAIGameWeather> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGamesSignalError() instead")
    void getGamesSignalE(QList<OAIGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGamesSignalError(QList<OAIGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPlayerGameStatsSignalError() instead")
    void getPlayerGameStatsSignalE(QList<OAIPlayerGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPlayerGameStatsSignalError(QList<OAIPlayerGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScoreboardSignalError() instead")
    void getScoreboardSignalE(QList<OAIScoreboardGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScoreboardSignalError(QList<OAIScoreboardGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamGameStatsSignalError() instead")
    void getTeamGameStatsSignalE(QList<OAITeamGame> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamGameStatsSignalError(QList<OAITeamGame> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamRecordsSignalError() instead")
    void getTeamRecordsSignalE(QList<OAITeamRecord> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamRecordsSignalError(QList<OAITeamRecord> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAdvancedBoxScoreSignalErrorFull() instead")
    void getAdvancedBoxScoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdvancedBoxScoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCalendarSignalErrorFull() instead")
    void getCalendarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCalendarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGameMediaSignalErrorFull() instead")
    void getGameMediaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGameMediaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGameWeatherSignalErrorFull() instead")
    void getGameWeatherSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGameWeatherSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGamesSignalErrorFull() instead")
    void getGamesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGamesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPlayerGameStatsSignalErrorFull() instead")
    void getPlayerGameStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPlayerGameStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScoreboardSignalErrorFull() instead")
    void getScoreboardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScoreboardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamGameStatsSignalErrorFull() instead")
    void getTeamGameStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamGameStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamRecordsSignalErrorFull() instead")
    void getTeamRecordsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamRecordsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
