/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILivePlayByPlay.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILivePlayByPlay::OAILivePlayByPlay(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILivePlayByPlay::OAILivePlayByPlay() {
    this->initializeModel();
}

OAILivePlayByPlay::~OAILivePlayByPlay() {}

void OAILivePlayByPlay::initializeModel() {

    m_clock_isSet = false;
    m_clock_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_down_isSet = false;
    m_down_isValid = false;

    m_drives_isSet = false;
    m_drives_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_possession_isSet = false;
    m_possession_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_teams_isSet = false;
    m_teams_isValid = false;

    m_yards_to_goal_isSet = false;
    m_yards_to_goal_isValid = false;
}

void OAILivePlayByPlay::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILivePlayByPlay::fromJsonObject(QJsonObject json) {

    m_clock_isValid = ::OpenAPI::fromJsonValue(m_clock, json[QString("clock")]);
    m_clock_isSet = !json[QString("clock")].isNull() && m_clock_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_down_isValid = ::OpenAPI::fromJsonValue(m_down, json[QString("down")]);
    m_down_isSet = !json[QString("down")].isNull() && m_down_isValid;

    m_drives_isValid = ::OpenAPI::fromJsonValue(m_drives, json[QString("drives")]);
    m_drives_isSet = !json[QString("drives")].isNull() && m_drives_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;

    m_possession_isValid = ::OpenAPI::fromJsonValue(m_possession, json[QString("possession")]);
    m_possession_isSet = !json[QString("possession")].isNull() && m_possession_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_teams_isValid = ::OpenAPI::fromJsonValue(m_teams, json[QString("teams")]);
    m_teams_isSet = !json[QString("teams")].isNull() && m_teams_isValid;

    m_yards_to_goal_isValid = ::OpenAPI::fromJsonValue(m_yards_to_goal, json[QString("yardsToGoal")]);
    m_yards_to_goal_isSet = !json[QString("yardsToGoal")].isNull() && m_yards_to_goal_isValid;
}

QString OAILivePlayByPlay::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILivePlayByPlay::asJsonObject() const {
    QJsonObject obj;
    if (m_clock_isSet) {
        obj.insert(QString("clock"), ::OpenAPI::toJsonValue(m_clock));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_down_isSet) {
        obj.insert(QString("down"), ::OpenAPI::toJsonValue(m_down));
    }
    if (m_drives.size() > 0) {
        obj.insert(QString("drives"), ::OpenAPI::toJsonValue(m_drives));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_period_isSet) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_possession_isSet) {
        obj.insert(QString("possession"), ::OpenAPI::toJsonValue(m_possession));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_teams.size() > 0) {
        obj.insert(QString("teams"), ::OpenAPI::toJsonValue(m_teams));
    }
    if (m_yards_to_goal_isSet) {
        obj.insert(QString("yardsToGoal"), ::OpenAPI::toJsonValue(m_yards_to_goal));
    }
    return obj;
}

QString OAILivePlayByPlay::getClock() const {
    return m_clock;
}
void OAILivePlayByPlay::setClock(const QString &clock) {
    m_clock = clock;
    m_clock_isSet = true;
}

bool OAILivePlayByPlay::is_clock_Set() const{
    return m_clock_isSet;
}

bool OAILivePlayByPlay::is_clock_Valid() const{
    return m_clock_isValid;
}

qint32 OAILivePlayByPlay::getDistance() const {
    return m_distance;
}
void OAILivePlayByPlay::setDistance(const qint32 &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAILivePlayByPlay::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAILivePlayByPlay::is_distance_Valid() const{
    return m_distance_isValid;
}

qint32 OAILivePlayByPlay::getDown() const {
    return m_down;
}
void OAILivePlayByPlay::setDown(const qint32 &down) {
    m_down = down;
    m_down_isSet = true;
}

bool OAILivePlayByPlay::is_down_Set() const{
    return m_down_isSet;
}

bool OAILivePlayByPlay::is_down_Valid() const{
    return m_down_isValid;
}

QList<OAILivePlayByPlay_drives_inner> OAILivePlayByPlay::getDrives() const {
    return m_drives;
}
void OAILivePlayByPlay::setDrives(const QList<OAILivePlayByPlay_drives_inner> &drives) {
    m_drives = drives;
    m_drives_isSet = true;
}

bool OAILivePlayByPlay::is_drives_Set() const{
    return m_drives_isSet;
}

bool OAILivePlayByPlay::is_drives_Valid() const{
    return m_drives_isValid;
}

qint32 OAILivePlayByPlay::getId() const {
    return m_id;
}
void OAILivePlayByPlay::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILivePlayByPlay::is_id_Set() const{
    return m_id_isSet;
}

bool OAILivePlayByPlay::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAILivePlayByPlay::getPeriod() const {
    return m_period;
}
void OAILivePlayByPlay::setPeriod(const qint32 &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAILivePlayByPlay::is_period_Set() const{
    return m_period_isSet;
}

bool OAILivePlayByPlay::is_period_Valid() const{
    return m_period_isValid;
}

QString OAILivePlayByPlay::getPossession() const {
    return m_possession;
}
void OAILivePlayByPlay::setPossession(const QString &possession) {
    m_possession = possession;
    m_possession_isSet = true;
}

bool OAILivePlayByPlay::is_possession_Set() const{
    return m_possession_isSet;
}

bool OAILivePlayByPlay::is_possession_Valid() const{
    return m_possession_isValid;
}

QString OAILivePlayByPlay::getStatus() const {
    return m_status;
}
void OAILivePlayByPlay::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAILivePlayByPlay::is_status_Set() const{
    return m_status_isSet;
}

bool OAILivePlayByPlay::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAILivePlayByPlay_teams_inner> OAILivePlayByPlay::getTeams() const {
    return m_teams;
}
void OAILivePlayByPlay::setTeams(const QList<OAILivePlayByPlay_teams_inner> &teams) {
    m_teams = teams;
    m_teams_isSet = true;
}

bool OAILivePlayByPlay::is_teams_Set() const{
    return m_teams_isSet;
}

bool OAILivePlayByPlay::is_teams_Valid() const{
    return m_teams_isValid;
}

qint32 OAILivePlayByPlay::getYardsToGoal() const {
    return m_yards_to_goal;
}
void OAILivePlayByPlay::setYardsToGoal(const qint32 &yards_to_goal) {
    m_yards_to_goal = yards_to_goal;
    m_yards_to_goal_isSet = true;
}

bool OAILivePlayByPlay::is_yards_to_goal_Set() const{
    return m_yards_to_goal_isSet;
}

bool OAILivePlayByPlay::is_yards_to_goal_Valid() const{
    return m_yards_to_goal_isValid;
}

bool OAILivePlayByPlay::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_down_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drives.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_possession_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teams.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_yards_to_goal_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILivePlayByPlay::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
