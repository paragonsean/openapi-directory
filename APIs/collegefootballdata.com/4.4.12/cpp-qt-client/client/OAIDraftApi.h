/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDraftApi_H
#define OAI_OAIDraftApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDraftPick.h"
#include "OAIDraftPosition.h"
#include "OAIDraftTeam.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDraftApi : public QObject {
    Q_OBJECT

public:
    OAIDraftApi(const int timeOut = 0);
    ~OAIDraftApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  year qint32 [optional]
    * @param[in]  nfl_team QString [optional]
    * @param[in]  college QString [optional]
    * @param[in]  conference QString [optional]
    * @param[in]  position QString [optional]
    */
    virtual void getDraftPicks(const ::OpenAPI::OptionalParam<qint32> &year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &nfl_team = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &college = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conference = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &position = ::OpenAPI::OptionalParam<QString>());


    virtual void getNFLPositions();


    virtual void getNFLTeams();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getDraftPicksCallback(OAIHttpRequestWorker *worker);
    void getNFLPositionsCallback(OAIHttpRequestWorker *worker);
    void getNFLTeamsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getDraftPicksSignal(QList<OAIDraftPick> summary);
    void getNFLPositionsSignal(QList<OAIDraftPosition> summary);
    void getNFLTeamsSignal(QList<OAIDraftTeam> summary);


    void getDraftPicksSignalFull(OAIHttpRequestWorker *worker, QList<OAIDraftPick> summary);
    void getNFLPositionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIDraftPosition> summary);
    void getNFLTeamsSignalFull(OAIHttpRequestWorker *worker, QList<OAIDraftTeam> summary);

    Q_DECL_DEPRECATED_X("Use getDraftPicksSignalError() instead")
    void getDraftPicksSignalE(QList<OAIDraftPick> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDraftPicksSignalError(QList<OAIDraftPick> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNFLPositionsSignalError() instead")
    void getNFLPositionsSignalE(QList<OAIDraftPosition> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNFLPositionsSignalError(QList<OAIDraftPosition> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNFLTeamsSignalError() instead")
    void getNFLTeamsSignalE(QList<OAIDraftTeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNFLTeamsSignalError(QList<OAIDraftTeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getDraftPicksSignalErrorFull() instead")
    void getDraftPicksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDraftPicksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNFLPositionsSignalErrorFull() instead")
    void getNFLPositionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNFLPositionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNFLTeamsSignalErrorFull() instead")
    void getNFLTeamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNFLTeamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
