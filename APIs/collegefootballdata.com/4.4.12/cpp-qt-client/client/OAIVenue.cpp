/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVenue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVenue::OAIVenue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVenue::OAIVenue() {
    this->initializeModel();
}

OAIVenue::~OAIVenue() {}

void OAIVenue::initializeModel() {

    m_capacity_isSet = false;
    m_capacity_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_dome_isSet = false;
    m_dome_isValid = false;

    m_elevation_isSet = false;
    m_elevation_isValid = false;

    m_grass_isSet = false;
    m_grass_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_year_constructed_isSet = false;
    m_year_constructed_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;
}

void OAIVenue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVenue::fromJsonObject(QJsonObject json) {

    m_capacity_isValid = ::OpenAPI::fromJsonValue(m_capacity, json[QString("capacity")]);
    m_capacity_isSet = !json[QString("capacity")].isNull() && m_capacity_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_dome_isValid = ::OpenAPI::fromJsonValue(m_dome, json[QString("dome")]);
    m_dome_isSet = !json[QString("dome")].isNull() && m_dome_isValid;

    m_elevation_isValid = ::OpenAPI::fromJsonValue(m_elevation, json[QString("elevation")]);
    m_elevation_isSet = !json[QString("elevation")].isNull() && m_elevation_isValid;

    m_grass_isValid = ::OpenAPI::fromJsonValue(m_grass, json[QString("grass")]);
    m_grass_isSet = !json[QString("grass")].isNull() && m_grass_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_year_constructed_isValid = ::OpenAPI::fromJsonValue(m_year_constructed, json[QString("year_constructed")]);
    m_year_constructed_isSet = !json[QString("year_constructed")].isNull() && m_year_constructed_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("zip")]);
    m_zip_isSet = !json[QString("zip")].isNull() && m_zip_isValid;
}

QString OAIVenue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVenue::asJsonObject() const {
    QJsonObject obj;
    if (m_capacity_isSet) {
        obj.insert(QString("capacity"), ::OpenAPI::toJsonValue(m_capacity));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_dome_isSet) {
        obj.insert(QString("dome"), ::OpenAPI::toJsonValue(m_dome));
    }
    if (m_elevation_isSet) {
        obj.insert(QString("elevation"), ::OpenAPI::toJsonValue(m_elevation));
    }
    if (m_grass_isSet) {
        obj.insert(QString("grass"), ::OpenAPI::toJsonValue(m_grass));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_year_constructed_isSet) {
        obj.insert(QString("year_constructed"), ::OpenAPI::toJsonValue(m_year_constructed));
    }
    if (m_zip_isSet) {
        obj.insert(QString("zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    return obj;
}

qint32 OAIVenue::getCapacity() const {
    return m_capacity;
}
void OAIVenue::setCapacity(const qint32 &capacity) {
    m_capacity = capacity;
    m_capacity_isSet = true;
}

bool OAIVenue::is_capacity_Set() const{
    return m_capacity_isSet;
}

bool OAIVenue::is_capacity_Valid() const{
    return m_capacity_isValid;
}

QString OAIVenue::getCity() const {
    return m_city;
}
void OAIVenue::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIVenue::is_city_Set() const{
    return m_city_isSet;
}

bool OAIVenue::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIVenue::getCountryCode() const {
    return m_country_code;
}
void OAIVenue::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIVenue::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIVenue::is_country_code_Valid() const{
    return m_country_code_isValid;
}

bool OAIVenue::isDome() const {
    return m_dome;
}
void OAIVenue::setDome(const bool &dome) {
    m_dome = dome;
    m_dome_isSet = true;
}

bool OAIVenue::is_dome_Set() const{
    return m_dome_isSet;
}

bool OAIVenue::is_dome_Valid() const{
    return m_dome_isValid;
}

double OAIVenue::getElevation() const {
    return m_elevation;
}
void OAIVenue::setElevation(const double &elevation) {
    m_elevation = elevation;
    m_elevation_isSet = true;
}

bool OAIVenue::is_elevation_Set() const{
    return m_elevation_isSet;
}

bool OAIVenue::is_elevation_Valid() const{
    return m_elevation_isValid;
}

bool OAIVenue::isGrass() const {
    return m_grass;
}
void OAIVenue::setGrass(const bool &grass) {
    m_grass = grass;
    m_grass_isSet = true;
}

bool OAIVenue::is_grass_Set() const{
    return m_grass_isSet;
}

bool OAIVenue::is_grass_Valid() const{
    return m_grass_isValid;
}

qint32 OAIVenue::getId() const {
    return m_id;
}
void OAIVenue::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVenue::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVenue::is_id_Valid() const{
    return m_id_isValid;
}

OAIVenue_location OAIVenue::getLocation() const {
    return m_location;
}
void OAIVenue::setLocation(const OAIVenue_location &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIVenue::is_location_Set() const{
    return m_location_isSet;
}

bool OAIVenue::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIVenue::getName() const {
    return m_name;
}
void OAIVenue::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVenue::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVenue::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIVenue::getState() const {
    return m_state;
}
void OAIVenue::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIVenue::is_state_Set() const{
    return m_state_isSet;
}

bool OAIVenue::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIVenue::getTimezone() const {
    return m_timezone;
}
void OAIVenue::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIVenue::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIVenue::is_timezone_Valid() const{
    return m_timezone_isValid;
}

qint32 OAIVenue::getYearConstructed() const {
    return m_year_constructed;
}
void OAIVenue::setYearConstructed(const qint32 &year_constructed) {
    m_year_constructed = year_constructed;
    m_year_constructed_isSet = true;
}

bool OAIVenue::is_year_constructed_Set() const{
    return m_year_constructed_isSet;
}

bool OAIVenue::is_year_constructed_Valid() const{
    return m_year_constructed_isValid;
}

QString OAIVenue::getZip() const {
    return m_zip;
}
void OAIVenue::setZip(const QString &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAIVenue::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAIVenue::is_zip_Valid() const{
    return m_zip_isValid;
}

bool OAIVenue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dome_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elevation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grass_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_constructed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVenue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
