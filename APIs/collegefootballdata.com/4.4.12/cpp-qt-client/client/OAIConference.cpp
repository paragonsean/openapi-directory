/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConference::OAIConference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConference::OAIConference() {
    this->initializeModel();
}

OAIConference::~OAIConference() {}

void OAIConference::initializeModel() {

    m_abbreviation_isSet = false;
    m_abbreviation_isValid = false;

    m_classification_isSet = false;
    m_classification_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_short_name_isSet = false;
    m_short_name_isValid = false;
}

void OAIConference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConference::fromJsonObject(QJsonObject json) {

    m_abbreviation_isValid = ::OpenAPI::fromJsonValue(m_abbreviation, json[QString("abbreviation")]);
    m_abbreviation_isSet = !json[QString("abbreviation")].isNull() && m_abbreviation_isValid;

    m_classification_isValid = ::OpenAPI::fromJsonValue(m_classification, json[QString("classification")]);
    m_classification_isSet = !json[QString("classification")].isNull() && m_classification_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_short_name_isValid = ::OpenAPI::fromJsonValue(m_short_name, json[QString("short_name")]);
    m_short_name_isSet = !json[QString("short_name")].isNull() && m_short_name_isValid;
}

QString OAIConference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConference::asJsonObject() const {
    QJsonObject obj;
    if (m_abbreviation_isSet) {
        obj.insert(QString("abbreviation"), ::OpenAPI::toJsonValue(m_abbreviation));
    }
    if (m_classification_isSet) {
        obj.insert(QString("classification"), ::OpenAPI::toJsonValue(m_classification));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_short_name_isSet) {
        obj.insert(QString("short_name"), ::OpenAPI::toJsonValue(m_short_name));
    }
    return obj;
}

QString OAIConference::getAbbreviation() const {
    return m_abbreviation;
}
void OAIConference::setAbbreviation(const QString &abbreviation) {
    m_abbreviation = abbreviation;
    m_abbreviation_isSet = true;
}

bool OAIConference::is_abbreviation_Set() const{
    return m_abbreviation_isSet;
}

bool OAIConference::is_abbreviation_Valid() const{
    return m_abbreviation_isValid;
}

QString OAIConference::getClassification() const {
    return m_classification;
}
void OAIConference::setClassification(const QString &classification) {
    m_classification = classification;
    m_classification_isSet = true;
}

bool OAIConference::is_classification_Set() const{
    return m_classification_isSet;
}

bool OAIConference::is_classification_Valid() const{
    return m_classification_isValid;
}

qint32 OAIConference::getId() const {
    return m_id;
}
void OAIConference::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIConference::is_id_Set() const{
    return m_id_isSet;
}

bool OAIConference::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIConference::getName() const {
    return m_name;
}
void OAIConference::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConference::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConference::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIConference::getShortName() const {
    return m_short_name;
}
void OAIConference::setShortName(const QString &short_name) {
    m_short_name = short_name;
    m_short_name_isSet = true;
}

bool OAIConference::is_short_name_Set() const{
    return m_short_name_isSet;
}

bool OAIConference::is_short_name_Valid() const{
    return m_short_name_isValid;
}

bool OAIConference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abbreviation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
