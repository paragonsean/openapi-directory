/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvancedSeasonStat_defense_fieldPosition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvancedSeasonStat_defense_fieldPosition::OAIAdvancedSeasonStat_defense_fieldPosition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvancedSeasonStat_defense_fieldPosition::OAIAdvancedSeasonStat_defense_fieldPosition() {
    this->initializeModel();
}

OAIAdvancedSeasonStat_defense_fieldPosition::~OAIAdvancedSeasonStat_defense_fieldPosition() {}

void OAIAdvancedSeasonStat_defense_fieldPosition::initializeModel() {

    m_average_predicted_points_isSet = false;
    m_average_predicted_points_isValid = false;

    m_average_start_isSet = false;
    m_average_start_isValid = false;
}

void OAIAdvancedSeasonStat_defense_fieldPosition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvancedSeasonStat_defense_fieldPosition::fromJsonObject(QJsonObject json) {

    m_average_predicted_points_isValid = ::OpenAPI::fromJsonValue(m_average_predicted_points, json[QString("averagePredictedPoints")]);
    m_average_predicted_points_isSet = !json[QString("averagePredictedPoints")].isNull() && m_average_predicted_points_isValid;

    m_average_start_isValid = ::OpenAPI::fromJsonValue(m_average_start, json[QString("averageStart")]);
    m_average_start_isSet = !json[QString("averageStart")].isNull() && m_average_start_isValid;
}

QString OAIAdvancedSeasonStat_defense_fieldPosition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvancedSeasonStat_defense_fieldPosition::asJsonObject() const {
    QJsonObject obj;
    if (m_average_predicted_points_isSet) {
        obj.insert(QString("averagePredictedPoints"), ::OpenAPI::toJsonValue(m_average_predicted_points));
    }
    if (m_average_start_isSet) {
        obj.insert(QString("averageStart"), ::OpenAPI::toJsonValue(m_average_start));
    }
    return obj;
}

double OAIAdvancedSeasonStat_defense_fieldPosition::getAveragePredictedPoints() const {
    return m_average_predicted_points;
}
void OAIAdvancedSeasonStat_defense_fieldPosition::setAveragePredictedPoints(const double &average_predicted_points) {
    m_average_predicted_points = average_predicted_points;
    m_average_predicted_points_isSet = true;
}

bool OAIAdvancedSeasonStat_defense_fieldPosition::is_average_predicted_points_Set() const{
    return m_average_predicted_points_isSet;
}

bool OAIAdvancedSeasonStat_defense_fieldPosition::is_average_predicted_points_Valid() const{
    return m_average_predicted_points_isValid;
}

double OAIAdvancedSeasonStat_defense_fieldPosition::getAverageStart() const {
    return m_average_start;
}
void OAIAdvancedSeasonStat_defense_fieldPosition::setAverageStart(const double &average_start) {
    m_average_start = average_start;
    m_average_start_isSet = true;
}

bool OAIAdvancedSeasonStat_defense_fieldPosition::is_average_start_Set() const{
    return m_average_start_isSet;
}

bool OAIAdvancedSeasonStat_defense_fieldPosition::is_average_start_Valid() const{
    return m_average_start_isValid;
}

bool OAIAdvancedSeasonStat_defense_fieldPosition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_predicted_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvancedSeasonStat_defense_fieldPosition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
