/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerGame_teams_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerGame_teams_inner::OAIPlayerGame_teams_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerGame_teams_inner::OAIPlayerGame_teams_inner() {
    this->initializeModel();
}

OAIPlayerGame_teams_inner::~OAIPlayerGame_teams_inner() {}

void OAIPlayerGame_teams_inner::initializeModel() {

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_home_away_isSet = false;
    m_home_away_isValid = false;

    m_points_isSet = false;
    m_points_isValid = false;

    m_school_isSet = false;
    m_school_isValid = false;
}

void OAIPlayerGame_teams_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerGame_teams_inner::fromJsonObject(QJsonObject json) {

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_home_away_isValid = ::OpenAPI::fromJsonValue(m_home_away, json[QString("homeAway")]);
    m_home_away_isSet = !json[QString("homeAway")].isNull() && m_home_away_isValid;

    m_points_isValid = ::OpenAPI::fromJsonValue(m_points, json[QString("points")]);
    m_points_isSet = !json[QString("points")].isNull() && m_points_isValid;

    m_school_isValid = ::OpenAPI::fromJsonValue(m_school, json[QString("school")]);
    m_school_isSet = !json[QString("school")].isNull() && m_school_isValid;
}

QString OAIPlayerGame_teams_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerGame_teams_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_home_away_isSet) {
        obj.insert(QString("homeAway"), ::OpenAPI::toJsonValue(m_home_away));
    }
    if (m_points_isSet) {
        obj.insert(QString("points"), ::OpenAPI::toJsonValue(m_points));
    }
    if (m_school.isSet()) {
        obj.insert(QString("school"), ::OpenAPI::toJsonValue(m_school));
    }
    return obj;
}

QList<OAIPlayerGame_teams_inner_categories_inner> OAIPlayerGame_teams_inner::getCategories() const {
    return m_categories;
}
void OAIPlayerGame_teams_inner::setCategories(const QList<OAIPlayerGame_teams_inner_categories_inner> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIPlayerGame_teams_inner::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIPlayerGame_teams_inner::is_categories_Valid() const{
    return m_categories_isValid;
}

bool OAIPlayerGame_teams_inner::isHomeAway() const {
    return m_home_away;
}
void OAIPlayerGame_teams_inner::setHomeAway(const bool &home_away) {
    m_home_away = home_away;
    m_home_away_isSet = true;
}

bool OAIPlayerGame_teams_inner::is_home_away_Set() const{
    return m_home_away_isSet;
}

bool OAIPlayerGame_teams_inner::is_home_away_Valid() const{
    return m_home_away_isValid;
}

qint32 OAIPlayerGame_teams_inner::getPoints() const {
    return m_points;
}
void OAIPlayerGame_teams_inner::setPoints(const qint32 &points) {
    m_points = points;
    m_points_isSet = true;
}

bool OAIPlayerGame_teams_inner::is_points_Set() const{
    return m_points_isSet;
}

bool OAIPlayerGame_teams_inner::is_points_Valid() const{
    return m_points_isValid;
}

OAIPlayerGame_teams_inner_school OAIPlayerGame_teams_inner::getSchool() const {
    return m_school;
}
void OAIPlayerGame_teams_inner::setSchool(const OAIPlayerGame_teams_inner_school &school) {
    m_school = school;
    m_school_isSet = true;
}

bool OAIPlayerGame_teams_inner::is_school_Set() const{
    return m_school_isSet;
}

bool OAIPlayerGame_teams_inner::is_school_Valid() const{
    return m_school_isValid;
}

bool OAIPlayerGame_teams_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_away_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_school.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerGame_teams_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
