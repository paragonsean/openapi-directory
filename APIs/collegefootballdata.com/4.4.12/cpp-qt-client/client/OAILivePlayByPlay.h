/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILivePlayByPlay.h
 *
 * 
 */

#ifndef OAILivePlayByPlay_H
#define OAILivePlayByPlay_H

#include <QJsonObject>

#include "OAILivePlayByPlay_drives_inner.h"
#include "OAILivePlayByPlay_teams_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILivePlayByPlay_drives_inner;
class OAILivePlayByPlay_teams_inner;

class OAILivePlayByPlay : public OAIObject {
public:
    OAILivePlayByPlay();
    OAILivePlayByPlay(QString json);
    ~OAILivePlayByPlay() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClock() const;
    void setClock(const QString &clock);
    bool is_clock_Set() const;
    bool is_clock_Valid() const;

    qint32 getDistance() const;
    void setDistance(const qint32 &distance);
    bool is_distance_Set() const;
    bool is_distance_Valid() const;

    qint32 getDown() const;
    void setDown(const qint32 &down);
    bool is_down_Set() const;
    bool is_down_Valid() const;

    QList<OAILivePlayByPlay_drives_inner> getDrives() const;
    void setDrives(const QList<OAILivePlayByPlay_drives_inner> &drives);
    bool is_drives_Set() const;
    bool is_drives_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getPeriod() const;
    void setPeriod(const qint32 &period);
    bool is_period_Set() const;
    bool is_period_Valid() const;

    QString getPossession() const;
    void setPossession(const QString &possession);
    bool is_possession_Set() const;
    bool is_possession_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QList<OAILivePlayByPlay_teams_inner> getTeams() const;
    void setTeams(const QList<OAILivePlayByPlay_teams_inner> &teams);
    bool is_teams_Set() const;
    bool is_teams_Valid() const;

    qint32 getYardsToGoal() const;
    void setYardsToGoal(const qint32 &yards_to_goal);
    bool is_yards_to_goal_Set() const;
    bool is_yards_to_goal_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_clock;
    bool m_clock_isSet;
    bool m_clock_isValid;

    qint32 m_distance;
    bool m_distance_isSet;
    bool m_distance_isValid;

    qint32 m_down;
    bool m_down_isSet;
    bool m_down_isValid;

    QList<OAILivePlayByPlay_drives_inner> m_drives;
    bool m_drives_isSet;
    bool m_drives_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_period;
    bool m_period_isSet;
    bool m_period_isValid;

    QString m_possession;
    bool m_possession_isSet;
    bool m_possession_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QList<OAILivePlayByPlay_teams_inner> m_teams;
    bool m_teams_isSet;
    bool m_teams_isValid;

    qint32 m_yards_to_goal;
    bool m_yards_to_goal_isSet;
    bool m_yards_to_goal_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILivePlayByPlay)

#endif // OAILivePlayByPlay_H
