/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerGamePPA_averagePPA.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerGamePPA_averagePPA::OAIPlayerGamePPA_averagePPA(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerGamePPA_averagePPA::OAIPlayerGamePPA_averagePPA() {
    this->initializeModel();
}

OAIPlayerGamePPA_averagePPA::~OAIPlayerGamePPA_averagePPA() {}

void OAIPlayerGamePPA_averagePPA::initializeModel() {

    m_all_isSet = false;
    m_all_isValid = false;

    m_pass_isSet = false;
    m_pass_isValid = false;

    m_rush_isSet = false;
    m_rush_isValid = false;
}

void OAIPlayerGamePPA_averagePPA::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerGamePPA_averagePPA::fromJsonObject(QJsonObject json) {

    m_all_isValid = ::OpenAPI::fromJsonValue(m_all, json[QString("all")]);
    m_all_isSet = !json[QString("all")].isNull() && m_all_isValid;

    m_pass_isValid = ::OpenAPI::fromJsonValue(m_pass, json[QString("pass")]);
    m_pass_isSet = !json[QString("pass")].isNull() && m_pass_isValid;

    m_rush_isValid = ::OpenAPI::fromJsonValue(m_rush, json[QString("rush")]);
    m_rush_isSet = !json[QString("rush")].isNull() && m_rush_isValid;
}

QString OAIPlayerGamePPA_averagePPA::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerGamePPA_averagePPA::asJsonObject() const {
    QJsonObject obj;
    if (m_all_isSet) {
        obj.insert(QString("all"), ::OpenAPI::toJsonValue(m_all));
    }
    if (m_pass_isSet) {
        obj.insert(QString("pass"), ::OpenAPI::toJsonValue(m_pass));
    }
    if (m_rush_isSet) {
        obj.insert(QString("rush"), ::OpenAPI::toJsonValue(m_rush));
    }
    return obj;
}

double OAIPlayerGamePPA_averagePPA::getAll() const {
    return m_all;
}
void OAIPlayerGamePPA_averagePPA::setAll(const double &all) {
    m_all = all;
    m_all_isSet = true;
}

bool OAIPlayerGamePPA_averagePPA::is_all_Set() const{
    return m_all_isSet;
}

bool OAIPlayerGamePPA_averagePPA::is_all_Valid() const{
    return m_all_isValid;
}

double OAIPlayerGamePPA_averagePPA::getPass() const {
    return m_pass;
}
void OAIPlayerGamePPA_averagePPA::setPass(const double &pass) {
    m_pass = pass;
    m_pass_isSet = true;
}

bool OAIPlayerGamePPA_averagePPA::is_pass_Set() const{
    return m_pass_isSet;
}

bool OAIPlayerGamePPA_averagePPA::is_pass_Valid() const{
    return m_pass_isValid;
}

double OAIPlayerGamePPA_averagePPA::getRush() const {
    return m_rush;
}
void OAIPlayerGamePPA_averagePPA::setRush(const double &rush) {
    m_rush = rush;
    m_rush_isSet = true;
}

bool OAIPlayerGamePPA_averagePPA::is_rush_Set() const{
    return m_rush_isSet;
}

bool OAIPlayerGamePPA_averagePPA::is_rush_Valid() const{
    return m_rush_isValid;
}

bool OAIPlayerGamePPA_averagePPA::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pass_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rush_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerGamePPA_averagePPA::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
