/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerGame_teams_inner_categories_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerGame_teams_inner_categories_inner::OAIPlayerGame_teams_inner_categories_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerGame_teams_inner_categories_inner::OAIPlayerGame_teams_inner_categories_inner() {
    this->initializeModel();
}

OAIPlayerGame_teams_inner_categories_inner::~OAIPlayerGame_teams_inner_categories_inner() {}

void OAIPlayerGame_teams_inner_categories_inner::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;
}

void OAIPlayerGame_teams_inner_categories_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerGame_teams_inner_categories_inner::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;
}

QString OAIPlayerGame_teams_inner_categories_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerGame_teams_inner_categories_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    return obj;
}

QString OAIPlayerGame_teams_inner_categories_inner::getName() const {
    return m_name;
}
void OAIPlayerGame_teams_inner_categories_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlayerGame_teams_inner_categories_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlayerGame_teams_inner_categories_inner::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPlayerGame_teams_inner_categories_inner_types_inner> OAIPlayerGame_teams_inner_categories_inner::getTypes() const {
    return m_types;
}
void OAIPlayerGame_teams_inner_categories_inner::setTypes(const QList<OAIPlayerGame_teams_inner_categories_inner_types_inner> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAIPlayerGame_teams_inner_categories_inner::is_types_Set() const{
    return m_types_isSet;
}

bool OAIPlayerGame_teams_inner_categories_inner::is_types_Valid() const{
    return m_types_isValid;
}

bool OAIPlayerGame_teams_inner_categories_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerGame_teams_inner_categories_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
