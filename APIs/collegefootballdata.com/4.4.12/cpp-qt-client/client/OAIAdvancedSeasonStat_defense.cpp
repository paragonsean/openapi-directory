/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvancedSeasonStat_defense.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvancedSeasonStat_defense::OAIAdvancedSeasonStat_defense(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvancedSeasonStat_defense::OAIAdvancedSeasonStat_defense() {
    this->initializeModel();
}

OAIAdvancedSeasonStat_defense::~OAIAdvancedSeasonStat_defense() {}

void OAIAdvancedSeasonStat_defense::initializeModel() {

    m_drives_isSet = false;
    m_drives_isValid = false;

    m_explosiveness_isSet = false;
    m_explosiveness_isValid = false;

    m_field_position_isSet = false;
    m_field_position_isValid = false;

    m_havoc_isSet = false;
    m_havoc_isValid = false;

    m_line_yards_isSet = false;
    m_line_yards_isValid = false;

    m_line_yards_total_isSet = false;
    m_line_yards_total_isValid = false;

    m_open_field_yards_isSet = false;
    m_open_field_yards_isValid = false;

    m_open_field_yards_total_isSet = false;
    m_open_field_yards_total_isValid = false;

    m_passing_downs_isSet = false;
    m_passing_downs_isValid = false;

    m_passing_plays_isSet = false;
    m_passing_plays_isValid = false;

    m_plays_isSet = false;
    m_plays_isValid = false;

    m_points_per_opportunity_isSet = false;
    m_points_per_opportunity_isValid = false;

    m_power_success_isSet = false;
    m_power_success_isValid = false;

    m_ppa_isSet = false;
    m_ppa_isValid = false;

    m_rushing_plays_isSet = false;
    m_rushing_plays_isValid = false;

    m_second_level_yards_isSet = false;
    m_second_level_yards_isValid = false;

    m_second_level_yards_total_isSet = false;
    m_second_level_yards_total_isValid = false;

    m_standard_downs_isSet = false;
    m_standard_downs_isValid = false;

    m_stuff_rate_isSet = false;
    m_stuff_rate_isValid = false;

    m_success_rate_isSet = false;
    m_success_rate_isValid = false;

    m_total_opportunies_isSet = false;
    m_total_opportunies_isValid = false;

    m_total_ppa_isSet = false;
    m_total_ppa_isValid = false;
}

void OAIAdvancedSeasonStat_defense::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvancedSeasonStat_defense::fromJsonObject(QJsonObject json) {

    m_drives_isValid = ::OpenAPI::fromJsonValue(m_drives, json[QString("drives")]);
    m_drives_isSet = !json[QString("drives")].isNull() && m_drives_isValid;

    m_explosiveness_isValid = ::OpenAPI::fromJsonValue(m_explosiveness, json[QString("explosiveness")]);
    m_explosiveness_isSet = !json[QString("explosiveness")].isNull() && m_explosiveness_isValid;

    m_field_position_isValid = ::OpenAPI::fromJsonValue(m_field_position, json[QString("fieldPosition")]);
    m_field_position_isSet = !json[QString("fieldPosition")].isNull() && m_field_position_isValid;

    m_havoc_isValid = ::OpenAPI::fromJsonValue(m_havoc, json[QString("havoc")]);
    m_havoc_isSet = !json[QString("havoc")].isNull() && m_havoc_isValid;

    m_line_yards_isValid = ::OpenAPI::fromJsonValue(m_line_yards, json[QString("lineYards")]);
    m_line_yards_isSet = !json[QString("lineYards")].isNull() && m_line_yards_isValid;

    m_line_yards_total_isValid = ::OpenAPI::fromJsonValue(m_line_yards_total, json[QString("lineYardsTotal")]);
    m_line_yards_total_isSet = !json[QString("lineYardsTotal")].isNull() && m_line_yards_total_isValid;

    m_open_field_yards_isValid = ::OpenAPI::fromJsonValue(m_open_field_yards, json[QString("openFieldYards")]);
    m_open_field_yards_isSet = !json[QString("openFieldYards")].isNull() && m_open_field_yards_isValid;

    m_open_field_yards_total_isValid = ::OpenAPI::fromJsonValue(m_open_field_yards_total, json[QString("openFieldYardsTotal")]);
    m_open_field_yards_total_isSet = !json[QString("openFieldYardsTotal")].isNull() && m_open_field_yards_total_isValid;

    m_passing_downs_isValid = ::OpenAPI::fromJsonValue(m_passing_downs, json[QString("passingDowns")]);
    m_passing_downs_isSet = !json[QString("passingDowns")].isNull() && m_passing_downs_isValid;

    m_passing_plays_isValid = ::OpenAPI::fromJsonValue(m_passing_plays, json[QString("passingPlays")]);
    m_passing_plays_isSet = !json[QString("passingPlays")].isNull() && m_passing_plays_isValid;

    m_plays_isValid = ::OpenAPI::fromJsonValue(m_plays, json[QString("plays")]);
    m_plays_isSet = !json[QString("plays")].isNull() && m_plays_isValid;

    m_points_per_opportunity_isValid = ::OpenAPI::fromJsonValue(m_points_per_opportunity, json[QString("pointsPerOpportunity")]);
    m_points_per_opportunity_isSet = !json[QString("pointsPerOpportunity")].isNull() && m_points_per_opportunity_isValid;

    m_power_success_isValid = ::OpenAPI::fromJsonValue(m_power_success, json[QString("powerSuccess")]);
    m_power_success_isSet = !json[QString("powerSuccess")].isNull() && m_power_success_isValid;

    m_ppa_isValid = ::OpenAPI::fromJsonValue(m_ppa, json[QString("ppa")]);
    m_ppa_isSet = !json[QString("ppa")].isNull() && m_ppa_isValid;

    m_rushing_plays_isValid = ::OpenAPI::fromJsonValue(m_rushing_plays, json[QString("rushingPlays")]);
    m_rushing_plays_isSet = !json[QString("rushingPlays")].isNull() && m_rushing_plays_isValid;

    m_second_level_yards_isValid = ::OpenAPI::fromJsonValue(m_second_level_yards, json[QString("secondLevelYards")]);
    m_second_level_yards_isSet = !json[QString("secondLevelYards")].isNull() && m_second_level_yards_isValid;

    m_second_level_yards_total_isValid = ::OpenAPI::fromJsonValue(m_second_level_yards_total, json[QString("secondLevelYardsTotal")]);
    m_second_level_yards_total_isSet = !json[QString("secondLevelYardsTotal")].isNull() && m_second_level_yards_total_isValid;

    m_standard_downs_isValid = ::OpenAPI::fromJsonValue(m_standard_downs, json[QString("standardDowns")]);
    m_standard_downs_isSet = !json[QString("standardDowns")].isNull() && m_standard_downs_isValid;

    m_stuff_rate_isValid = ::OpenAPI::fromJsonValue(m_stuff_rate, json[QString("stuffRate")]);
    m_stuff_rate_isSet = !json[QString("stuffRate")].isNull() && m_stuff_rate_isValid;

    m_success_rate_isValid = ::OpenAPI::fromJsonValue(m_success_rate, json[QString("successRate")]);
    m_success_rate_isSet = !json[QString("successRate")].isNull() && m_success_rate_isValid;

    m_total_opportunies_isValid = ::OpenAPI::fromJsonValue(m_total_opportunies, json[QString("totalOpportunies")]);
    m_total_opportunies_isSet = !json[QString("totalOpportunies")].isNull() && m_total_opportunies_isValid;

    m_total_ppa_isValid = ::OpenAPI::fromJsonValue(m_total_ppa, json[QString("totalPPA")]);
    m_total_ppa_isSet = !json[QString("totalPPA")].isNull() && m_total_ppa_isValid;
}

QString OAIAdvancedSeasonStat_defense::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvancedSeasonStat_defense::asJsonObject() const {
    QJsonObject obj;
    if (m_drives_isSet) {
        obj.insert(QString("drives"), ::OpenAPI::toJsonValue(m_drives));
    }
    if (m_explosiveness_isSet) {
        obj.insert(QString("explosiveness"), ::OpenAPI::toJsonValue(m_explosiveness));
    }
    if (m_field_position.isSet()) {
        obj.insert(QString("fieldPosition"), ::OpenAPI::toJsonValue(m_field_position));
    }
    if (m_havoc.isSet()) {
        obj.insert(QString("havoc"), ::OpenAPI::toJsonValue(m_havoc));
    }
    if (m_line_yards_isSet) {
        obj.insert(QString("lineYards"), ::OpenAPI::toJsonValue(m_line_yards));
    }
    if (m_line_yards_total_isSet) {
        obj.insert(QString("lineYardsTotal"), ::OpenAPI::toJsonValue(m_line_yards_total));
    }
    if (m_open_field_yards_isSet) {
        obj.insert(QString("openFieldYards"), ::OpenAPI::toJsonValue(m_open_field_yards));
    }
    if (m_open_field_yards_total_isSet) {
        obj.insert(QString("openFieldYardsTotal"), ::OpenAPI::toJsonValue(m_open_field_yards_total));
    }
    if (m_passing_downs.isSet()) {
        obj.insert(QString("passingDowns"), ::OpenAPI::toJsonValue(m_passing_downs));
    }
    if (m_passing_plays.isSet()) {
        obj.insert(QString("passingPlays"), ::OpenAPI::toJsonValue(m_passing_plays));
    }
    if (m_plays_isSet) {
        obj.insert(QString("plays"), ::OpenAPI::toJsonValue(m_plays));
    }
    if (m_points_per_opportunity_isSet) {
        obj.insert(QString("pointsPerOpportunity"), ::OpenAPI::toJsonValue(m_points_per_opportunity));
    }
    if (m_power_success_isSet) {
        obj.insert(QString("powerSuccess"), ::OpenAPI::toJsonValue(m_power_success));
    }
    if (m_ppa_isSet) {
        obj.insert(QString("ppa"), ::OpenAPI::toJsonValue(m_ppa));
    }
    if (m_rushing_plays.isSet()) {
        obj.insert(QString("rushingPlays"), ::OpenAPI::toJsonValue(m_rushing_plays));
    }
    if (m_second_level_yards_isSet) {
        obj.insert(QString("secondLevelYards"), ::OpenAPI::toJsonValue(m_second_level_yards));
    }
    if (m_second_level_yards_total_isSet) {
        obj.insert(QString("secondLevelYardsTotal"), ::OpenAPI::toJsonValue(m_second_level_yards_total));
    }
    if (m_standard_downs.isSet()) {
        obj.insert(QString("standardDowns"), ::OpenAPI::toJsonValue(m_standard_downs));
    }
    if (m_stuff_rate_isSet) {
        obj.insert(QString("stuffRate"), ::OpenAPI::toJsonValue(m_stuff_rate));
    }
    if (m_success_rate_isSet) {
        obj.insert(QString("successRate"), ::OpenAPI::toJsonValue(m_success_rate));
    }
    if (m_total_opportunies_isSet) {
        obj.insert(QString("totalOpportunies"), ::OpenAPI::toJsonValue(m_total_opportunies));
    }
    if (m_total_ppa_isSet) {
        obj.insert(QString("totalPPA"), ::OpenAPI::toJsonValue(m_total_ppa));
    }
    return obj;
}

qint32 OAIAdvancedSeasonStat_defense::getDrives() const {
    return m_drives;
}
void OAIAdvancedSeasonStat_defense::setDrives(const qint32 &drives) {
    m_drives = drives;
    m_drives_isSet = true;
}

bool OAIAdvancedSeasonStat_defense::is_drives_Set() const{
    return m_drives_isSet;
}

bool OAIAdvancedSeasonStat_defense::is_drives_Valid() const{
    return m_drives_isValid;
}

double OAIAdvancedSeasonStat_defense::getExplosiveness() const {
    return m_explosiveness;
}
void OAIAdvancedSeasonStat_defense::setExplosiveness(const double &explosiveness) {
    m_explosiveness = explosiveness;
    m_explosiveness_isSet = true;
}

bool OAIAdvancedSeasonStat_defense::is_explosiveness_Set() const{
    return m_explosiveness_isSet;
}

bool OAIAdvancedSeasonStat_defense::is_explosiveness_Valid() const{
    return m_explosiveness_isValid;
}

OAIAdvancedSeasonStat_defense_fieldPosition OAIAdvancedSeasonStat_defense::getFieldPosition() const {
    return m_field_position;
}
void OAIAdvancedSeasonStat_defense::setFieldPosition(const OAIAdvancedSeasonStat_defense_fieldPosition &field_position) {
    m_field_position = field_position;
    m_field_position_isSet = true;
}

bool OAIAdvancedSeasonStat_defense::is_field_position_Set() const{
    return m_field_position_isSet;
}

bool OAIAdvancedSeasonStat_defense::is_field_position_Valid() const{
    return m_field_position_isValid;
}

OAIAdvancedSeasonStat_defense_havoc OAIAdvancedSeasonStat_defense::getHavoc() const {
    return m_havoc;
}
void OAIAdvancedSeasonStat_defense::setHavoc(const OAIAdvancedSeasonStat_defense_havoc &havoc) {
    m_havoc = havoc;
    m_havoc_isSet = true;
}

bool OAIAdvancedSeasonStat_defense::is_havoc_Set() const{
    return m_havoc_isSet;
}

bool OAIAdvancedSeasonStat_defense::is_havoc_Valid() const{
    return m_havoc_isValid;
}

double OAIAdvancedSeasonStat_defense::getLineYards() const {
    return m_line_yards;
}
void OAIAdvancedSeasonStat_defense::setLineYards(const double &line_yards) {
    m_line_yards = line_yards;
    m_line_yards_isSet = true;
}

bool OAIAdvancedSeasonStat_defense::is_line_yards_Set() const{
    return m_line_yards_isSet;
}

bool OAIAdvancedSeasonStat_defense::is_line_yards_Valid() const{
    return m_line_yards_isValid;
}

double OAIAdvancedSeasonStat_defense::getLineYardsTotal() const {
    return m_line_yards_total;
}
void OAIAdvancedSeasonStat_defense::setLineYardsTotal(const double &line_yards_total) {
    m_line_yards_total = line_yards_total;
    m_line_yards_total_isSet = true;
}

bool OAIAdvancedSeasonStat_defense::is_line_yards_total_Set() const{
    return m_line_yards_total_isSet;
}

bool OAIAdvancedSeasonStat_defense::is_line_yards_total_Valid() const{
    return m_line_yards_total_isValid;
}

double OAIAdvancedSeasonStat_defense::getOpenFieldYards() const {
    return m_open_field_yards;
}
void OAIAdvancedSeasonStat_defense::setOpenFieldYards(const double &open_field_yards) {
    m_open_field_yards = open_field_yards;
    m_open_field_yards_isSet = true;
}

bool OAIAdvancedSeasonStat_defense::is_open_field_yards_Set() const{
    return m_open_field_yards_isSet;
}

bool OAIAdvancedSeasonStat_defense::is_open_field_yards_Valid() const{
    return m_open_field_yards_isValid;
}

qint32 OAIAdvancedSeasonStat_defense::getOpenFieldYardsTotal() const {
    return m_open_field_yards_total;
}
void OAIAdvancedSeasonStat_defense::setOpenFieldYardsTotal(const qint32 &open_field_yards_total) {
    m_open_field_yards_total = open_field_yards_total;
    m_open_field_yards_total_isSet = true;
}

bool OAIAdvancedSeasonStat_defense::is_open_field_yards_total_Set() const{
    return m_open_field_yards_total_isSet;
}

bool OAIAdvancedSeasonStat_defense::is_open_field_yards_total_Valid() const{
    return m_open_field_yards_total_isValid;
}

OAIAdvancedSeasonStat_defense_passingDowns OAIAdvancedSeasonStat_defense::getPassingDowns() const {
    return m_passing_downs;
}
void OAIAdvancedSeasonStat_defense::setPassingDowns(const OAIAdvancedSeasonStat_defense_passingDowns &passing_downs) {
    m_passing_downs = passing_downs;
    m_passing_downs_isSet = true;
}

bool OAIAdvancedSeasonStat_defense::is_passing_downs_Set() const{
    return m_passing_downs_isSet;
}

bool OAIAdvancedSeasonStat_defense::is_passing_downs_Valid() const{
    return m_passing_downs_isValid;
}

OAIAdvancedSeasonStat_defense_passingPlays OAIAdvancedSeasonStat_defense::getPassingPlays() const {
    return m_passing_plays;
}
void OAIAdvancedSeasonStat_defense::setPassingPlays(const OAIAdvancedSeasonStat_defense_passingPlays &passing_plays) {
    m_passing_plays = passing_plays;
    m_passing_plays_isSet = true;
}

bool OAIAdvancedSeasonStat_defense::is_passing_plays_Set() const{
    return m_passing_plays_isSet;
}

bool OAIAdvancedSeasonStat_defense::is_passing_plays_Valid() const{
    return m_passing_plays_isValid;
}

qint32 OAIAdvancedSeasonStat_defense::getPlays() const {
    return m_plays;
}
void OAIAdvancedSeasonStat_defense::setPlays(const qint32 &plays) {
    m_plays = plays;
    m_plays_isSet = true;
}

bool OAIAdvancedSeasonStat_defense::is_plays_Set() const{
    return m_plays_isSet;
}

bool OAIAdvancedSeasonStat_defense::is_plays_Valid() const{
    return m_plays_isValid;
}

double OAIAdvancedSeasonStat_defense::getPointsPerOpportunity() const {
    return m_points_per_opportunity;
}
void OAIAdvancedSeasonStat_defense::setPointsPerOpportunity(const double &points_per_opportunity) {
    m_points_per_opportunity = points_per_opportunity;
    m_points_per_opportunity_isSet = true;
}

bool OAIAdvancedSeasonStat_defense::is_points_per_opportunity_Set() const{
    return m_points_per_opportunity_isSet;
}

bool OAIAdvancedSeasonStat_defense::is_points_per_opportunity_Valid() const{
    return m_points_per_opportunity_isValid;
}

double OAIAdvancedSeasonStat_defense::getPowerSuccess() const {
    return m_power_success;
}
void OAIAdvancedSeasonStat_defense::setPowerSuccess(const double &power_success) {
    m_power_success = power_success;
    m_power_success_isSet = true;
}

bool OAIAdvancedSeasonStat_defense::is_power_success_Set() const{
    return m_power_success_isSet;
}

bool OAIAdvancedSeasonStat_defense::is_power_success_Valid() const{
    return m_power_success_isValid;
}

double OAIAdvancedSeasonStat_defense::getPpa() const {
    return m_ppa;
}
void OAIAdvancedSeasonStat_defense::setPpa(const double &ppa) {
    m_ppa = ppa;
    m_ppa_isSet = true;
}

bool OAIAdvancedSeasonStat_defense::is_ppa_Set() const{
    return m_ppa_isSet;
}

bool OAIAdvancedSeasonStat_defense::is_ppa_Valid() const{
    return m_ppa_isValid;
}

OAIAdvancedSeasonStat_defense_passingPlays OAIAdvancedSeasonStat_defense::getRushingPlays() const {
    return m_rushing_plays;
}
void OAIAdvancedSeasonStat_defense::setRushingPlays(const OAIAdvancedSeasonStat_defense_passingPlays &rushing_plays) {
    m_rushing_plays = rushing_plays;
    m_rushing_plays_isSet = true;
}

bool OAIAdvancedSeasonStat_defense::is_rushing_plays_Set() const{
    return m_rushing_plays_isSet;
}

bool OAIAdvancedSeasonStat_defense::is_rushing_plays_Valid() const{
    return m_rushing_plays_isValid;
}

double OAIAdvancedSeasonStat_defense::getSecondLevelYards() const {
    return m_second_level_yards;
}
void OAIAdvancedSeasonStat_defense::setSecondLevelYards(const double &second_level_yards) {
    m_second_level_yards = second_level_yards;
    m_second_level_yards_isSet = true;
}

bool OAIAdvancedSeasonStat_defense::is_second_level_yards_Set() const{
    return m_second_level_yards_isSet;
}

bool OAIAdvancedSeasonStat_defense::is_second_level_yards_Valid() const{
    return m_second_level_yards_isValid;
}

qint32 OAIAdvancedSeasonStat_defense::getSecondLevelYardsTotal() const {
    return m_second_level_yards_total;
}
void OAIAdvancedSeasonStat_defense::setSecondLevelYardsTotal(const qint32 &second_level_yards_total) {
    m_second_level_yards_total = second_level_yards_total;
    m_second_level_yards_total_isSet = true;
}

bool OAIAdvancedSeasonStat_defense::is_second_level_yards_total_Set() const{
    return m_second_level_yards_total_isSet;
}

bool OAIAdvancedSeasonStat_defense::is_second_level_yards_total_Valid() const{
    return m_second_level_yards_total_isValid;
}

OAIAdvancedSeasonStat_defense_passingDowns OAIAdvancedSeasonStat_defense::getStandardDowns() const {
    return m_standard_downs;
}
void OAIAdvancedSeasonStat_defense::setStandardDowns(const OAIAdvancedSeasonStat_defense_passingDowns &standard_downs) {
    m_standard_downs = standard_downs;
    m_standard_downs_isSet = true;
}

bool OAIAdvancedSeasonStat_defense::is_standard_downs_Set() const{
    return m_standard_downs_isSet;
}

bool OAIAdvancedSeasonStat_defense::is_standard_downs_Valid() const{
    return m_standard_downs_isValid;
}

double OAIAdvancedSeasonStat_defense::getStuffRate() const {
    return m_stuff_rate;
}
void OAIAdvancedSeasonStat_defense::setStuffRate(const double &stuff_rate) {
    m_stuff_rate = stuff_rate;
    m_stuff_rate_isSet = true;
}

bool OAIAdvancedSeasonStat_defense::is_stuff_rate_Set() const{
    return m_stuff_rate_isSet;
}

bool OAIAdvancedSeasonStat_defense::is_stuff_rate_Valid() const{
    return m_stuff_rate_isValid;
}

double OAIAdvancedSeasonStat_defense::getSuccessRate() const {
    return m_success_rate;
}
void OAIAdvancedSeasonStat_defense::setSuccessRate(const double &success_rate) {
    m_success_rate = success_rate;
    m_success_rate_isSet = true;
}

bool OAIAdvancedSeasonStat_defense::is_success_rate_Set() const{
    return m_success_rate_isSet;
}

bool OAIAdvancedSeasonStat_defense::is_success_rate_Valid() const{
    return m_success_rate_isValid;
}

qint32 OAIAdvancedSeasonStat_defense::getTotalOpportunies() const {
    return m_total_opportunies;
}
void OAIAdvancedSeasonStat_defense::setTotalOpportunies(const qint32 &total_opportunies) {
    m_total_opportunies = total_opportunies;
    m_total_opportunies_isSet = true;
}

bool OAIAdvancedSeasonStat_defense::is_total_opportunies_Set() const{
    return m_total_opportunies_isSet;
}

bool OAIAdvancedSeasonStat_defense::is_total_opportunies_Valid() const{
    return m_total_opportunies_isValid;
}

double OAIAdvancedSeasonStat_defense::getTotalPpa() const {
    return m_total_ppa;
}
void OAIAdvancedSeasonStat_defense::setTotalPpa(const double &total_ppa) {
    m_total_ppa = total_ppa;
    m_total_ppa_isSet = true;
}

bool OAIAdvancedSeasonStat_defense::is_total_ppa_Set() const{
    return m_total_ppa_isSet;
}

bool OAIAdvancedSeasonStat_defense::is_total_ppa_Valid() const{
    return m_total_ppa_isValid;
}

bool OAIAdvancedSeasonStat_defense::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_drives_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_explosiveness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_havoc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_yards_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_field_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_field_yards_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_downs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_plays.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_plays_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_per_opportunity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_success_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ppa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rushing_plays.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_second_level_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_second_level_yards_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_downs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stuff_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_opportunies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_ppa_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvancedSeasonStat_defense::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
