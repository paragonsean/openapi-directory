/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPregameWP.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPregameWP::OAIPregameWP(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPregameWP::OAIPregameWP() {
    this->initializeModel();
}

OAIPregameWP::~OAIPregameWP() {}

void OAIPregameWP::initializeModel() {

    m_away_team_isSet = false;
    m_away_team_isValid = false;

    m_game_id_isSet = false;
    m_game_id_isValid = false;

    m_home_team_isSet = false;
    m_home_team_isValid = false;

    m_home_win_prob_isSet = false;
    m_home_win_prob_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_season_type_isSet = false;
    m_season_type_isValid = false;

    m_spread_isSet = false;
    m_spread_isValid = false;

    m_week_isSet = false;
    m_week_isValid = false;
}

void OAIPregameWP::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPregameWP::fromJsonObject(QJsonObject json) {

    m_away_team_isValid = ::OpenAPI::fromJsonValue(m_away_team, json[QString("awayTeam")]);
    m_away_team_isSet = !json[QString("awayTeam")].isNull() && m_away_team_isValid;

    m_game_id_isValid = ::OpenAPI::fromJsonValue(m_game_id, json[QString("gameId")]);
    m_game_id_isSet = !json[QString("gameId")].isNull() && m_game_id_isValid;

    m_home_team_isValid = ::OpenAPI::fromJsonValue(m_home_team, json[QString("homeTeam")]);
    m_home_team_isSet = !json[QString("homeTeam")].isNull() && m_home_team_isValid;

    m_home_win_prob_isValid = ::OpenAPI::fromJsonValue(m_home_win_prob, json[QString("homeWinProb")]);
    m_home_win_prob_isSet = !json[QString("homeWinProb")].isNull() && m_home_win_prob_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("season")]);
    m_season_isSet = !json[QString("season")].isNull() && m_season_isValid;

    m_season_type_isValid = ::OpenAPI::fromJsonValue(m_season_type, json[QString("seasonType")]);
    m_season_type_isSet = !json[QString("seasonType")].isNull() && m_season_type_isValid;

    m_spread_isValid = ::OpenAPI::fromJsonValue(m_spread, json[QString("spread")]);
    m_spread_isSet = !json[QString("spread")].isNull() && m_spread_isValid;

    m_week_isValid = ::OpenAPI::fromJsonValue(m_week, json[QString("week")]);
    m_week_isSet = !json[QString("week")].isNull() && m_week_isValid;
}

QString OAIPregameWP::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPregameWP::asJsonObject() const {
    QJsonObject obj;
    if (m_away_team_isSet) {
        obj.insert(QString("awayTeam"), ::OpenAPI::toJsonValue(m_away_team));
    }
    if (m_game_id_isSet) {
        obj.insert(QString("gameId"), ::OpenAPI::toJsonValue(m_game_id));
    }
    if (m_home_team_isSet) {
        obj.insert(QString("homeTeam"), ::OpenAPI::toJsonValue(m_home_team));
    }
    if (m_home_win_prob_isSet) {
        obj.insert(QString("homeWinProb"), ::OpenAPI::toJsonValue(m_home_win_prob));
    }
    if (m_season_isSet) {
        obj.insert(QString("season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_season_type_isSet) {
        obj.insert(QString("seasonType"), ::OpenAPI::toJsonValue(m_season_type));
    }
    if (m_spread_isSet) {
        obj.insert(QString("spread"), ::OpenAPI::toJsonValue(m_spread));
    }
    if (m_week_isSet) {
        obj.insert(QString("week"), ::OpenAPI::toJsonValue(m_week));
    }
    return obj;
}

QString OAIPregameWP::getAwayTeam() const {
    return m_away_team;
}
void OAIPregameWP::setAwayTeam(const QString &away_team) {
    m_away_team = away_team;
    m_away_team_isSet = true;
}

bool OAIPregameWP::is_away_team_Set() const{
    return m_away_team_isSet;
}

bool OAIPregameWP::is_away_team_Valid() const{
    return m_away_team_isValid;
}

qint32 OAIPregameWP::getGameId() const {
    return m_game_id;
}
void OAIPregameWP::setGameId(const qint32 &game_id) {
    m_game_id = game_id;
    m_game_id_isSet = true;
}

bool OAIPregameWP::is_game_id_Set() const{
    return m_game_id_isSet;
}

bool OAIPregameWP::is_game_id_Valid() const{
    return m_game_id_isValid;
}

QString OAIPregameWP::getHomeTeam() const {
    return m_home_team;
}
void OAIPregameWP::setHomeTeam(const QString &home_team) {
    m_home_team = home_team;
    m_home_team_isSet = true;
}

bool OAIPregameWP::is_home_team_Set() const{
    return m_home_team_isSet;
}

bool OAIPregameWP::is_home_team_Valid() const{
    return m_home_team_isValid;
}

double OAIPregameWP::getHomeWinProb() const {
    return m_home_win_prob;
}
void OAIPregameWP::setHomeWinProb(const double &home_win_prob) {
    m_home_win_prob = home_win_prob;
    m_home_win_prob_isSet = true;
}

bool OAIPregameWP::is_home_win_prob_Set() const{
    return m_home_win_prob_isSet;
}

bool OAIPregameWP::is_home_win_prob_Valid() const{
    return m_home_win_prob_isValid;
}

qint32 OAIPregameWP::getSeason() const {
    return m_season;
}
void OAIPregameWP::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIPregameWP::is_season_Set() const{
    return m_season_isSet;
}

bool OAIPregameWP::is_season_Valid() const{
    return m_season_isValid;
}

QString OAIPregameWP::getSeasonType() const {
    return m_season_type;
}
void OAIPregameWP::setSeasonType(const QString &season_type) {
    m_season_type = season_type;
    m_season_type_isSet = true;
}

bool OAIPregameWP::is_season_type_Set() const{
    return m_season_type_isSet;
}

bool OAIPregameWP::is_season_type_Valid() const{
    return m_season_type_isValid;
}

double OAIPregameWP::getSpread() const {
    return m_spread;
}
void OAIPregameWP::setSpread(const double &spread) {
    m_spread = spread;
    m_spread_isSet = true;
}

bool OAIPregameWP::is_spread_Set() const{
    return m_spread_isSet;
}

bool OAIPregameWP::is_spread_Valid() const{
    return m_spread_isValid;
}

qint32 OAIPregameWP::getWeek() const {
    return m_week;
}
void OAIPregameWP::setWeek(const qint32 &week) {
    m_week = week;
    m_week_isSet = true;
}

bool OAIPregameWP::is_week_Set() const{
    return m_week_isSet;
}

bool OAIPregameWP::is_week_Valid() const{
    return m_week_isValid;
}

bool OAIPregameWP::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_away_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_win_prob_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spread_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPregameWP::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
