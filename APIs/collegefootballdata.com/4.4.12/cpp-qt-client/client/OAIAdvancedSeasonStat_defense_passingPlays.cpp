/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvancedSeasonStat_defense_passingPlays.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvancedSeasonStat_defense_passingPlays::OAIAdvancedSeasonStat_defense_passingPlays(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvancedSeasonStat_defense_passingPlays::OAIAdvancedSeasonStat_defense_passingPlays() {
    this->initializeModel();
}

OAIAdvancedSeasonStat_defense_passingPlays::~OAIAdvancedSeasonStat_defense_passingPlays() {}

void OAIAdvancedSeasonStat_defense_passingPlays::initializeModel() {

    m_explosiveness_isSet = false;
    m_explosiveness_isValid = false;

    m_ppa_isSet = false;
    m_ppa_isValid = false;

    m_rate_isSet = false;
    m_rate_isValid = false;

    m_success_rate_isSet = false;
    m_success_rate_isValid = false;

    m_total_ppa_isSet = false;
    m_total_ppa_isValid = false;
}

void OAIAdvancedSeasonStat_defense_passingPlays::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvancedSeasonStat_defense_passingPlays::fromJsonObject(QJsonObject json) {

    m_explosiveness_isValid = ::OpenAPI::fromJsonValue(m_explosiveness, json[QString("explosiveness")]);
    m_explosiveness_isSet = !json[QString("explosiveness")].isNull() && m_explosiveness_isValid;

    m_ppa_isValid = ::OpenAPI::fromJsonValue(m_ppa, json[QString("ppa")]);
    m_ppa_isSet = !json[QString("ppa")].isNull() && m_ppa_isValid;

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("rate")]);
    m_rate_isSet = !json[QString("rate")].isNull() && m_rate_isValid;

    m_success_rate_isValid = ::OpenAPI::fromJsonValue(m_success_rate, json[QString("successRate")]);
    m_success_rate_isSet = !json[QString("successRate")].isNull() && m_success_rate_isValid;

    m_total_ppa_isValid = ::OpenAPI::fromJsonValue(m_total_ppa, json[QString("totalPPA")]);
    m_total_ppa_isSet = !json[QString("totalPPA")].isNull() && m_total_ppa_isValid;
}

QString OAIAdvancedSeasonStat_defense_passingPlays::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvancedSeasonStat_defense_passingPlays::asJsonObject() const {
    QJsonObject obj;
    if (m_explosiveness_isSet) {
        obj.insert(QString("explosiveness"), ::OpenAPI::toJsonValue(m_explosiveness));
    }
    if (m_ppa_isSet) {
        obj.insert(QString("ppa"), ::OpenAPI::toJsonValue(m_ppa));
    }
    if (m_rate_isSet) {
        obj.insert(QString("rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    if (m_success_rate_isSet) {
        obj.insert(QString("successRate"), ::OpenAPI::toJsonValue(m_success_rate));
    }
    if (m_total_ppa_isSet) {
        obj.insert(QString("totalPPA"), ::OpenAPI::toJsonValue(m_total_ppa));
    }
    return obj;
}

double OAIAdvancedSeasonStat_defense_passingPlays::getExplosiveness() const {
    return m_explosiveness;
}
void OAIAdvancedSeasonStat_defense_passingPlays::setExplosiveness(const double &explosiveness) {
    m_explosiveness = explosiveness;
    m_explosiveness_isSet = true;
}

bool OAIAdvancedSeasonStat_defense_passingPlays::is_explosiveness_Set() const{
    return m_explosiveness_isSet;
}

bool OAIAdvancedSeasonStat_defense_passingPlays::is_explosiveness_Valid() const{
    return m_explosiveness_isValid;
}

double OAIAdvancedSeasonStat_defense_passingPlays::getPpa() const {
    return m_ppa;
}
void OAIAdvancedSeasonStat_defense_passingPlays::setPpa(const double &ppa) {
    m_ppa = ppa;
    m_ppa_isSet = true;
}

bool OAIAdvancedSeasonStat_defense_passingPlays::is_ppa_Set() const{
    return m_ppa_isSet;
}

bool OAIAdvancedSeasonStat_defense_passingPlays::is_ppa_Valid() const{
    return m_ppa_isValid;
}

double OAIAdvancedSeasonStat_defense_passingPlays::getRate() const {
    return m_rate;
}
void OAIAdvancedSeasonStat_defense_passingPlays::setRate(const double &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAIAdvancedSeasonStat_defense_passingPlays::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAIAdvancedSeasonStat_defense_passingPlays::is_rate_Valid() const{
    return m_rate_isValid;
}

double OAIAdvancedSeasonStat_defense_passingPlays::getSuccessRate() const {
    return m_success_rate;
}
void OAIAdvancedSeasonStat_defense_passingPlays::setSuccessRate(const double &success_rate) {
    m_success_rate = success_rate;
    m_success_rate_isSet = true;
}

bool OAIAdvancedSeasonStat_defense_passingPlays::is_success_rate_Set() const{
    return m_success_rate_isSet;
}

bool OAIAdvancedSeasonStat_defense_passingPlays::is_success_rate_Valid() const{
    return m_success_rate_isValid;
}

double OAIAdvancedSeasonStat_defense_passingPlays::getTotalPpa() const {
    return m_total_ppa;
}
void OAIAdvancedSeasonStat_defense_passingPlays::setTotalPpa(const double &total_ppa) {
    m_total_ppa = total_ppa;
    m_total_ppa_isSet = true;
}

bool OAIAdvancedSeasonStat_defense_passingPlays::is_total_ppa_Set() const{
    return m_total_ppa_isSet;
}

bool OAIAdvancedSeasonStat_defense_passingPlays::is_total_ppa_Valid() const{
    return m_total_ppa_isValid;
}

bool OAIAdvancedSeasonStat_defense_passingPlays::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_explosiveness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ppa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_ppa_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvancedSeasonStat_defense_passingPlays::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
