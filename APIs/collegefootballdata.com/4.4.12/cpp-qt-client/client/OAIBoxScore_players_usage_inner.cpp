/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBoxScore_players_usage_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBoxScore_players_usage_inner::OAIBoxScore_players_usage_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBoxScore_players_usage_inner::OAIBoxScore_players_usage_inner() {
    this->initializeModel();
}

OAIBoxScore_players_usage_inner::~OAIBoxScore_players_usage_inner() {}

void OAIBoxScore_players_usage_inner::initializeModel() {

    m_passing_isSet = false;
    m_passing_isValid = false;

    m_player_isSet = false;
    m_player_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_quarter1_isSet = false;
    m_quarter1_isValid = false;

    m_quarter2_isSet = false;
    m_quarter2_isValid = false;

    m_quarter3_isSet = false;
    m_quarter3_isValid = false;

    m_quarter4_isSet = false;
    m_quarter4_isValid = false;

    m_rushing_isSet = false;
    m_rushing_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIBoxScore_players_usage_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBoxScore_players_usage_inner::fromJsonObject(QJsonObject json) {

    m_passing_isValid = ::OpenAPI::fromJsonValue(m_passing, json[QString("passing")]);
    m_passing_isSet = !json[QString("passing")].isNull() && m_passing_isValid;

    m_player_isValid = ::OpenAPI::fromJsonValue(m_player, json[QString("player")]);
    m_player_isSet = !json[QString("player")].isNull() && m_player_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_quarter1_isValid = ::OpenAPI::fromJsonValue(m_quarter1, json[QString("quarter1")]);
    m_quarter1_isSet = !json[QString("quarter1")].isNull() && m_quarter1_isValid;

    m_quarter2_isValid = ::OpenAPI::fromJsonValue(m_quarter2, json[QString("quarter2")]);
    m_quarter2_isSet = !json[QString("quarter2")].isNull() && m_quarter2_isValid;

    m_quarter3_isValid = ::OpenAPI::fromJsonValue(m_quarter3, json[QString("quarter3")]);
    m_quarter3_isSet = !json[QString("quarter3")].isNull() && m_quarter3_isValid;

    m_quarter4_isValid = ::OpenAPI::fromJsonValue(m_quarter4, json[QString("quarter4")]);
    m_quarter4_isSet = !json[QString("quarter4")].isNull() && m_quarter4_isValid;

    m_rushing_isValid = ::OpenAPI::fromJsonValue(m_rushing, json[QString("rushing")]);
    m_rushing_isSet = !json[QString("rushing")].isNull() && m_rushing_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIBoxScore_players_usage_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBoxScore_players_usage_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_passing_isSet) {
        obj.insert(QString("passing"), ::OpenAPI::toJsonValue(m_passing));
    }
    if (m_player_isSet) {
        obj.insert(QString("player"), ::OpenAPI::toJsonValue(m_player));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_quarter1_isSet) {
        obj.insert(QString("quarter1"), ::OpenAPI::toJsonValue(m_quarter1));
    }
    if (m_quarter2_isSet) {
        obj.insert(QString("quarter2"), ::OpenAPI::toJsonValue(m_quarter2));
    }
    if (m_quarter3_isSet) {
        obj.insert(QString("quarter3"), ::OpenAPI::toJsonValue(m_quarter3));
    }
    if (m_quarter4_isSet) {
        obj.insert(QString("quarter4"), ::OpenAPI::toJsonValue(m_quarter4));
    }
    if (m_rushing_isSet) {
        obj.insert(QString("rushing"), ::OpenAPI::toJsonValue(m_rushing));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

double OAIBoxScore_players_usage_inner::getPassing() const {
    return m_passing;
}
void OAIBoxScore_players_usage_inner::setPassing(const double &passing) {
    m_passing = passing;
    m_passing_isSet = true;
}

bool OAIBoxScore_players_usage_inner::is_passing_Set() const{
    return m_passing_isSet;
}

bool OAIBoxScore_players_usage_inner::is_passing_Valid() const{
    return m_passing_isValid;
}

QString OAIBoxScore_players_usage_inner::getPlayer() const {
    return m_player;
}
void OAIBoxScore_players_usage_inner::setPlayer(const QString &player) {
    m_player = player;
    m_player_isSet = true;
}

bool OAIBoxScore_players_usage_inner::is_player_Set() const{
    return m_player_isSet;
}

bool OAIBoxScore_players_usage_inner::is_player_Valid() const{
    return m_player_isValid;
}

QString OAIBoxScore_players_usage_inner::getPosition() const {
    return m_position;
}
void OAIBoxScore_players_usage_inner::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIBoxScore_players_usage_inner::is_position_Set() const{
    return m_position_isSet;
}

bool OAIBoxScore_players_usage_inner::is_position_Valid() const{
    return m_position_isValid;
}

double OAIBoxScore_players_usage_inner::getQuarter1() const {
    return m_quarter1;
}
void OAIBoxScore_players_usage_inner::setQuarter1(const double &quarter1) {
    m_quarter1 = quarter1;
    m_quarter1_isSet = true;
}

bool OAIBoxScore_players_usage_inner::is_quarter1_Set() const{
    return m_quarter1_isSet;
}

bool OAIBoxScore_players_usage_inner::is_quarter1_Valid() const{
    return m_quarter1_isValid;
}

double OAIBoxScore_players_usage_inner::getQuarter2() const {
    return m_quarter2;
}
void OAIBoxScore_players_usage_inner::setQuarter2(const double &quarter2) {
    m_quarter2 = quarter2;
    m_quarter2_isSet = true;
}

bool OAIBoxScore_players_usage_inner::is_quarter2_Set() const{
    return m_quarter2_isSet;
}

bool OAIBoxScore_players_usage_inner::is_quarter2_Valid() const{
    return m_quarter2_isValid;
}

double OAIBoxScore_players_usage_inner::getQuarter3() const {
    return m_quarter3;
}
void OAIBoxScore_players_usage_inner::setQuarter3(const double &quarter3) {
    m_quarter3 = quarter3;
    m_quarter3_isSet = true;
}

bool OAIBoxScore_players_usage_inner::is_quarter3_Set() const{
    return m_quarter3_isSet;
}

bool OAIBoxScore_players_usage_inner::is_quarter3_Valid() const{
    return m_quarter3_isValid;
}

double OAIBoxScore_players_usage_inner::getQuarter4() const {
    return m_quarter4;
}
void OAIBoxScore_players_usage_inner::setQuarter4(const double &quarter4) {
    m_quarter4 = quarter4;
    m_quarter4_isSet = true;
}

bool OAIBoxScore_players_usage_inner::is_quarter4_Set() const{
    return m_quarter4_isSet;
}

bool OAIBoxScore_players_usage_inner::is_quarter4_Valid() const{
    return m_quarter4_isValid;
}

double OAIBoxScore_players_usage_inner::getRushing() const {
    return m_rushing;
}
void OAIBoxScore_players_usage_inner::setRushing(const double &rushing) {
    m_rushing = rushing;
    m_rushing_isSet = true;
}

bool OAIBoxScore_players_usage_inner::is_rushing_Set() const{
    return m_rushing_isSet;
}

bool OAIBoxScore_players_usage_inner::is_rushing_Valid() const{
    return m_rushing_isValid;
}

QString OAIBoxScore_players_usage_inner::getTeam() const {
    return m_team;
}
void OAIBoxScore_players_usage_inner::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIBoxScore_players_usage_inner::is_team_Set() const{
    return m_team_isSet;
}

bool OAIBoxScore_players_usage_inner::is_team_Valid() const{
    return m_team_isValid;
}

double OAIBoxScore_players_usage_inner::getTotal() const {
    return m_total;
}
void OAIBoxScore_players_usage_inner::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIBoxScore_players_usage_inner::is_total_Set() const{
    return m_total_isSet;
}

bool OAIBoxScore_players_usage_inner::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIBoxScore_players_usage_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_passing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quarter1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quarter2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quarter3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quarter4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rushing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBoxScore_players_usage_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
