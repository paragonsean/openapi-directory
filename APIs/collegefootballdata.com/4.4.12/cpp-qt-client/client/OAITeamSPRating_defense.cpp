/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamSPRating_defense.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamSPRating_defense::OAITeamSPRating_defense(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamSPRating_defense::OAITeamSPRating_defense() {
    this->initializeModel();
}

OAITeamSPRating_defense::~OAITeamSPRating_defense() {}

void OAITeamSPRating_defense::initializeModel() {

    m_explosiveness_isSet = false;
    m_explosiveness_isValid = false;

    m_havoc_isSet = false;
    m_havoc_isValid = false;

    m_pasing_isSet = false;
    m_pasing_isValid = false;

    m_passing_downs_isSet = false;
    m_passing_downs_isValid = false;

    m_ranking_isSet = false;
    m_ranking_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_rushing_isSet = false;
    m_rushing_isValid = false;

    m_standard_downs_isSet = false;
    m_standard_downs_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;
}

void OAITeamSPRating_defense::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamSPRating_defense::fromJsonObject(QJsonObject json) {

    m_explosiveness_isValid = ::OpenAPI::fromJsonValue(m_explosiveness, json[QString("explosiveness")]);
    m_explosiveness_isSet = !json[QString("explosiveness")].isNull() && m_explosiveness_isValid;

    m_havoc_isValid = ::OpenAPI::fromJsonValue(m_havoc, json[QString("havoc")]);
    m_havoc_isSet = !json[QString("havoc")].isNull() && m_havoc_isValid;

    m_pasing_isValid = ::OpenAPI::fromJsonValue(m_pasing, json[QString("pasing")]);
    m_pasing_isSet = !json[QString("pasing")].isNull() && m_pasing_isValid;

    m_passing_downs_isValid = ::OpenAPI::fromJsonValue(m_passing_downs, json[QString("passingDowns")]);
    m_passing_downs_isSet = !json[QString("passingDowns")].isNull() && m_passing_downs_isValid;

    m_ranking_isValid = ::OpenAPI::fromJsonValue(m_ranking, json[QString("ranking")]);
    m_ranking_isSet = !json[QString("ranking")].isNull() && m_ranking_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_rushing_isValid = ::OpenAPI::fromJsonValue(m_rushing, json[QString("rushing")]);
    m_rushing_isSet = !json[QString("rushing")].isNull() && m_rushing_isValid;

    m_standard_downs_isValid = ::OpenAPI::fromJsonValue(m_standard_downs, json[QString("standardDowns")]);
    m_standard_downs_isSet = !json[QString("standardDowns")].isNull() && m_standard_downs_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;
}

QString OAITeamSPRating_defense::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamSPRating_defense::asJsonObject() const {
    QJsonObject obj;
    if (m_explosiveness_isSet) {
        obj.insert(QString("explosiveness"), ::OpenAPI::toJsonValue(m_explosiveness));
    }
    if (m_havoc.isSet()) {
        obj.insert(QString("havoc"), ::OpenAPI::toJsonValue(m_havoc));
    }
    if (m_pasing_isSet) {
        obj.insert(QString("pasing"), ::OpenAPI::toJsonValue(m_pasing));
    }
    if (m_passing_downs_isSet) {
        obj.insert(QString("passingDowns"), ::OpenAPI::toJsonValue(m_passing_downs));
    }
    if (m_ranking_isSet) {
        obj.insert(QString("ranking"), ::OpenAPI::toJsonValue(m_ranking));
    }
    if (m_rating_isSet) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_rushing_isSet) {
        obj.insert(QString("rushing"), ::OpenAPI::toJsonValue(m_rushing));
    }
    if (m_standard_downs_isSet) {
        obj.insert(QString("standardDowns"), ::OpenAPI::toJsonValue(m_standard_downs));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    return obj;
}

double OAITeamSPRating_defense::getExplosiveness() const {
    return m_explosiveness;
}
void OAITeamSPRating_defense::setExplosiveness(const double &explosiveness) {
    m_explosiveness = explosiveness;
    m_explosiveness_isSet = true;
}

bool OAITeamSPRating_defense::is_explosiveness_Set() const{
    return m_explosiveness_isSet;
}

bool OAITeamSPRating_defense::is_explosiveness_Valid() const{
    return m_explosiveness_isValid;
}

OAIAdvancedSeasonStat_defense_havoc OAITeamSPRating_defense::getHavoc() const {
    return m_havoc;
}
void OAITeamSPRating_defense::setHavoc(const OAIAdvancedSeasonStat_defense_havoc &havoc) {
    m_havoc = havoc;
    m_havoc_isSet = true;
}

bool OAITeamSPRating_defense::is_havoc_Set() const{
    return m_havoc_isSet;
}

bool OAITeamSPRating_defense::is_havoc_Valid() const{
    return m_havoc_isValid;
}

double OAITeamSPRating_defense::getPasing() const {
    return m_pasing;
}
void OAITeamSPRating_defense::setPasing(const double &pasing) {
    m_pasing = pasing;
    m_pasing_isSet = true;
}

bool OAITeamSPRating_defense::is_pasing_Set() const{
    return m_pasing_isSet;
}

bool OAITeamSPRating_defense::is_pasing_Valid() const{
    return m_pasing_isValid;
}

double OAITeamSPRating_defense::getPassingDowns() const {
    return m_passing_downs;
}
void OAITeamSPRating_defense::setPassingDowns(const double &passing_downs) {
    m_passing_downs = passing_downs;
    m_passing_downs_isSet = true;
}

bool OAITeamSPRating_defense::is_passing_downs_Set() const{
    return m_passing_downs_isSet;
}

bool OAITeamSPRating_defense::is_passing_downs_Valid() const{
    return m_passing_downs_isValid;
}

double OAITeamSPRating_defense::getRanking() const {
    return m_ranking;
}
void OAITeamSPRating_defense::setRanking(const double &ranking) {
    m_ranking = ranking;
    m_ranking_isSet = true;
}

bool OAITeamSPRating_defense::is_ranking_Set() const{
    return m_ranking_isSet;
}

bool OAITeamSPRating_defense::is_ranking_Valid() const{
    return m_ranking_isValid;
}

double OAITeamSPRating_defense::getRating() const {
    return m_rating;
}
void OAITeamSPRating_defense::setRating(const double &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAITeamSPRating_defense::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAITeamSPRating_defense::is_rating_Valid() const{
    return m_rating_isValid;
}

double OAITeamSPRating_defense::getRushing() const {
    return m_rushing;
}
void OAITeamSPRating_defense::setRushing(const double &rushing) {
    m_rushing = rushing;
    m_rushing_isSet = true;
}

bool OAITeamSPRating_defense::is_rushing_Set() const{
    return m_rushing_isSet;
}

bool OAITeamSPRating_defense::is_rushing_Valid() const{
    return m_rushing_isValid;
}

double OAITeamSPRating_defense::getStandardDowns() const {
    return m_standard_downs;
}
void OAITeamSPRating_defense::setStandardDowns(const double &standard_downs) {
    m_standard_downs = standard_downs;
    m_standard_downs_isSet = true;
}

bool OAITeamSPRating_defense::is_standard_downs_Set() const{
    return m_standard_downs_isSet;
}

bool OAITeamSPRating_defense::is_standard_downs_Valid() const{
    return m_standard_downs_isValid;
}

double OAITeamSPRating_defense::getSuccess() const {
    return m_success;
}
void OAITeamSPRating_defense::setSuccess(const double &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAITeamSPRating_defense::is_success_Set() const{
    return m_success_isSet;
}

bool OAITeamSPRating_defense::is_success_Valid() const{
    return m_success_isValid;
}

bool OAITeamSPRating_defense::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_explosiveness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_havoc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pasing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_downs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ranking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rushing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_downs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamSPRating_defense::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
