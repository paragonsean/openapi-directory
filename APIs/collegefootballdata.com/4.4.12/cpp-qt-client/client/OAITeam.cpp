/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeam.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeam::OAITeam(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeam::OAITeam() {
    this->initializeModel();
}

OAITeam::~OAITeam() {}

void OAITeam::initializeModel() {

    m_abbreviation_isSet = false;
    m_abbreviation_isValid = false;

    m_alt_color_isSet = false;
    m_alt_color_isValid = false;

    m_alt_name_1_isSet = false;
    m_alt_name_1_isValid = false;

    m_alt_name_2_isSet = false;
    m_alt_name_2_isValid = false;

    m_alt_name_3_isSet = false;
    m_alt_name_3_isValid = false;

    m_classification_isSet = false;
    m_classification_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_conference_isSet = false;
    m_conference_isValid = false;

    m_division_isSet = false;
    m_division_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_logos_isSet = false;
    m_logos_isValid = false;

    m_mascot_isSet = false;
    m_mascot_isValid = false;

    m_school_isSet = false;
    m_school_isValid = false;

    m_twitter_isSet = false;
    m_twitter_isValid = false;
}

void OAITeam::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeam::fromJsonObject(QJsonObject json) {

    m_abbreviation_isValid = ::OpenAPI::fromJsonValue(m_abbreviation, json[QString("abbreviation")]);
    m_abbreviation_isSet = !json[QString("abbreviation")].isNull() && m_abbreviation_isValid;

    m_alt_color_isValid = ::OpenAPI::fromJsonValue(m_alt_color, json[QString("alt_color")]);
    m_alt_color_isSet = !json[QString("alt_color")].isNull() && m_alt_color_isValid;

    m_alt_name_1_isValid = ::OpenAPI::fromJsonValue(m_alt_name_1, json[QString("alt_name_1")]);
    m_alt_name_1_isSet = !json[QString("alt_name_1")].isNull() && m_alt_name_1_isValid;

    m_alt_name_2_isValid = ::OpenAPI::fromJsonValue(m_alt_name_2, json[QString("alt_name_2")]);
    m_alt_name_2_isSet = !json[QString("alt_name_2")].isNull() && m_alt_name_2_isValid;

    m_alt_name_3_isValid = ::OpenAPI::fromJsonValue(m_alt_name_3, json[QString("alt_name_3")]);
    m_alt_name_3_isSet = !json[QString("alt_name_3")].isNull() && m_alt_name_3_isValid;

    m_classification_isValid = ::OpenAPI::fromJsonValue(m_classification, json[QString("classification")]);
    m_classification_isSet = !json[QString("classification")].isNull() && m_classification_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_conference_isValid = ::OpenAPI::fromJsonValue(m_conference, json[QString("conference")]);
    m_conference_isSet = !json[QString("conference")].isNull() && m_conference_isValid;

    m_division_isValid = ::OpenAPI::fromJsonValue(m_division, json[QString("division")]);
    m_division_isSet = !json[QString("division")].isNull() && m_division_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_logos_isValid = ::OpenAPI::fromJsonValue(m_logos, json[QString("logos")]);
    m_logos_isSet = !json[QString("logos")].isNull() && m_logos_isValid;

    m_mascot_isValid = ::OpenAPI::fromJsonValue(m_mascot, json[QString("mascot")]);
    m_mascot_isSet = !json[QString("mascot")].isNull() && m_mascot_isValid;

    m_school_isValid = ::OpenAPI::fromJsonValue(m_school, json[QString("school")]);
    m_school_isSet = !json[QString("school")].isNull() && m_school_isValid;

    m_twitter_isValid = ::OpenAPI::fromJsonValue(m_twitter, json[QString("twitter")]);
    m_twitter_isSet = !json[QString("twitter")].isNull() && m_twitter_isValid;
}

QString OAITeam::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeam::asJsonObject() const {
    QJsonObject obj;
    if (m_abbreviation_isSet) {
        obj.insert(QString("abbreviation"), ::OpenAPI::toJsonValue(m_abbreviation));
    }
    if (m_alt_color_isSet) {
        obj.insert(QString("alt_color"), ::OpenAPI::toJsonValue(m_alt_color));
    }
    if (m_alt_name_1_isSet) {
        obj.insert(QString("alt_name_1"), ::OpenAPI::toJsonValue(m_alt_name_1));
    }
    if (m_alt_name_2_isSet) {
        obj.insert(QString("alt_name_2"), ::OpenAPI::toJsonValue(m_alt_name_2));
    }
    if (m_alt_name_3_isSet) {
        obj.insert(QString("alt_name_3"), ::OpenAPI::toJsonValue(m_alt_name_3));
    }
    if (m_classification_isSet) {
        obj.insert(QString("classification"), ::OpenAPI::toJsonValue(m_classification));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_conference_isSet) {
        obj.insert(QString("conference"), ::OpenAPI::toJsonValue(m_conference));
    }
    if (m_division_isSet) {
        obj.insert(QString("division"), ::OpenAPI::toJsonValue(m_division));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_logos.size() > 0) {
        obj.insert(QString("logos"), ::OpenAPI::toJsonValue(m_logos));
    }
    if (m_mascot_isSet) {
        obj.insert(QString("mascot"), ::OpenAPI::toJsonValue(m_mascot));
    }
    if (m_school_isSet) {
        obj.insert(QString("school"), ::OpenAPI::toJsonValue(m_school));
    }
    if (m_twitter_isSet) {
        obj.insert(QString("twitter"), ::OpenAPI::toJsonValue(m_twitter));
    }
    return obj;
}

QString OAITeam::getAbbreviation() const {
    return m_abbreviation;
}
void OAITeam::setAbbreviation(const QString &abbreviation) {
    m_abbreviation = abbreviation;
    m_abbreviation_isSet = true;
}

bool OAITeam::is_abbreviation_Set() const{
    return m_abbreviation_isSet;
}

bool OAITeam::is_abbreviation_Valid() const{
    return m_abbreviation_isValid;
}

QString OAITeam::getAltColor() const {
    return m_alt_color;
}
void OAITeam::setAltColor(const QString &alt_color) {
    m_alt_color = alt_color;
    m_alt_color_isSet = true;
}

bool OAITeam::is_alt_color_Set() const{
    return m_alt_color_isSet;
}

bool OAITeam::is_alt_color_Valid() const{
    return m_alt_color_isValid;
}

QString OAITeam::getAltName1() const {
    return m_alt_name_1;
}
void OAITeam::setAltName1(const QString &alt_name_1) {
    m_alt_name_1 = alt_name_1;
    m_alt_name_1_isSet = true;
}

bool OAITeam::is_alt_name_1_Set() const{
    return m_alt_name_1_isSet;
}

bool OAITeam::is_alt_name_1_Valid() const{
    return m_alt_name_1_isValid;
}

QString OAITeam::getAltName2() const {
    return m_alt_name_2;
}
void OAITeam::setAltName2(const QString &alt_name_2) {
    m_alt_name_2 = alt_name_2;
    m_alt_name_2_isSet = true;
}

bool OAITeam::is_alt_name_2_Set() const{
    return m_alt_name_2_isSet;
}

bool OAITeam::is_alt_name_2_Valid() const{
    return m_alt_name_2_isValid;
}

QString OAITeam::getAltName3() const {
    return m_alt_name_3;
}
void OAITeam::setAltName3(const QString &alt_name_3) {
    m_alt_name_3 = alt_name_3;
    m_alt_name_3_isSet = true;
}

bool OAITeam::is_alt_name_3_Set() const{
    return m_alt_name_3_isSet;
}

bool OAITeam::is_alt_name_3_Valid() const{
    return m_alt_name_3_isValid;
}

QString OAITeam::getClassification() const {
    return m_classification;
}
void OAITeam::setClassification(const QString &classification) {
    m_classification = classification;
    m_classification_isSet = true;
}

bool OAITeam::is_classification_Set() const{
    return m_classification_isSet;
}

bool OAITeam::is_classification_Valid() const{
    return m_classification_isValid;
}

QString OAITeam::getColor() const {
    return m_color;
}
void OAITeam::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAITeam::is_color_Set() const{
    return m_color_isSet;
}

bool OAITeam::is_color_Valid() const{
    return m_color_isValid;
}

QString OAITeam::getConference() const {
    return m_conference;
}
void OAITeam::setConference(const QString &conference) {
    m_conference = conference;
    m_conference_isSet = true;
}

bool OAITeam::is_conference_Set() const{
    return m_conference_isSet;
}

bool OAITeam::is_conference_Valid() const{
    return m_conference_isValid;
}

QString OAITeam::getDivision() const {
    return m_division;
}
void OAITeam::setDivision(const QString &division) {
    m_division = division;
    m_division_isSet = true;
}

bool OAITeam::is_division_Set() const{
    return m_division_isSet;
}

bool OAITeam::is_division_Valid() const{
    return m_division_isValid;
}

qint32 OAITeam::getId() const {
    return m_id;
}
void OAITeam::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITeam::is_id_Set() const{
    return m_id_isSet;
}

bool OAITeam::is_id_Valid() const{
    return m_id_isValid;
}

OAITeam_location OAITeam::getLocation() const {
    return m_location;
}
void OAITeam::setLocation(const OAITeam_location &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAITeam::is_location_Set() const{
    return m_location_isSet;
}

bool OAITeam::is_location_Valid() const{
    return m_location_isValid;
}

QList<QString> OAITeam::getLogos() const {
    return m_logos;
}
void OAITeam::setLogos(const QList<QString> &logos) {
    m_logos = logos;
    m_logos_isSet = true;
}

bool OAITeam::is_logos_Set() const{
    return m_logos_isSet;
}

bool OAITeam::is_logos_Valid() const{
    return m_logos_isValid;
}

QString OAITeam::getMascot() const {
    return m_mascot;
}
void OAITeam::setMascot(const QString &mascot) {
    m_mascot = mascot;
    m_mascot_isSet = true;
}

bool OAITeam::is_mascot_Set() const{
    return m_mascot_isSet;
}

bool OAITeam::is_mascot_Valid() const{
    return m_mascot_isValid;
}

QString OAITeam::getSchool() const {
    return m_school;
}
void OAITeam::setSchool(const QString &school) {
    m_school = school;
    m_school_isSet = true;
}

bool OAITeam::is_school_Set() const{
    return m_school_isSet;
}

bool OAITeam::is_school_Valid() const{
    return m_school_isValid;
}

QString OAITeam::getTwitter() const {
    return m_twitter;
}
void OAITeam::setTwitter(const QString &twitter) {
    m_twitter = twitter;
    m_twitter_isSet = true;
}

bool OAITeam::is_twitter_Set() const{
    return m_twitter_isSet;
}

bool OAITeam::is_twitter_Valid() const{
    return m_twitter_isValid;
}

bool OAITeam::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abbreviation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alt_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alt_name_1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alt_name_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alt_name_3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_division_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mascot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_school_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeam::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
