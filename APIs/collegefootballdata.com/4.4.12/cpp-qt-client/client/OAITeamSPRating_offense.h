/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITeamSPRating_offense.h
 *
 * 
 */

#ifndef OAITeamSPRating_offense_H
#define OAITeamSPRating_offense_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITeamSPRating_offense : public OAIObject {
public:
    OAITeamSPRating_offense();
    OAITeamSPRating_offense(QString json);
    ~OAITeamSPRating_offense() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getExplosiveness() const;
    void setExplosiveness(const double &explosiveness);
    bool is_explosiveness_Set() const;
    bool is_explosiveness_Valid() const;

    double getPace() const;
    void setPace(const double &pace);
    bool is_pace_Set() const;
    bool is_pace_Valid() const;

    double getPassing() const;
    void setPassing(const double &passing);
    bool is_passing_Set() const;
    bool is_passing_Valid() const;

    double getPassingDowns() const;
    void setPassingDowns(const double &passing_downs);
    bool is_passing_downs_Set() const;
    bool is_passing_downs_Valid() const;

    double getRanking() const;
    void setRanking(const double &ranking);
    bool is_ranking_Set() const;
    bool is_ranking_Valid() const;

    double getRating() const;
    void setRating(const double &rating);
    bool is_rating_Set() const;
    bool is_rating_Valid() const;

    double getRunRate() const;
    void setRunRate(const double &run_rate);
    bool is_run_rate_Set() const;
    bool is_run_rate_Valid() const;

    double getRushing() const;
    void setRushing(const double &rushing);
    bool is_rushing_Set() const;
    bool is_rushing_Valid() const;

    double getStandardDowns() const;
    void setStandardDowns(const double &standard_downs);
    bool is_standard_downs_Set() const;
    bool is_standard_downs_Valid() const;

    double getSuccess() const;
    void setSuccess(const double &success);
    bool is_success_Set() const;
    bool is_success_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_explosiveness;
    bool m_explosiveness_isSet;
    bool m_explosiveness_isValid;

    double m_pace;
    bool m_pace_isSet;
    bool m_pace_isValid;

    double m_passing;
    bool m_passing_isSet;
    bool m_passing_isValid;

    double m_passing_downs;
    bool m_passing_downs_isSet;
    bool m_passing_downs_isValid;

    double m_ranking;
    bool m_ranking_isSet;
    bool m_ranking_isValid;

    double m_rating;
    bool m_rating_isSet;
    bool m_rating_isValid;

    double m_run_rate;
    bool m_run_rate_isSet;
    bool m_run_rate_isValid;

    double m_rushing;
    bool m_rushing_isSet;
    bool m_rushing_isValid;

    double m_standard_downs;
    bool m_standard_downs_isSet;
    bool m_standard_downs_isValid;

    double m_success;
    bool m_success_isSet;
    bool m_success_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITeamSPRating_offense)

#endif // OAITeamSPRating_offense_H
