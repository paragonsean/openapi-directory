/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILivePlayByPlay_drives_inner_plays_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILivePlayByPlay_drives_inner_plays_inner::OAILivePlayByPlay_drives_inner_plays_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILivePlayByPlay_drives_inner_plays_inner::OAILivePlayByPlay_drives_inner_plays_inner() {
    this->initializeModel();
}

OAILivePlayByPlay_drives_inner_plays_inner::~OAILivePlayByPlay_drives_inner_plays_inner() {}

void OAILivePlayByPlay_drives_inner_plays_inner::initializeModel() {

    m_away_score_isSet = false;
    m_away_score_isValid = false;

    m_clock_isSet = false;
    m_clock_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_down_isSet = false;
    m_down_isValid = false;

    m_down_type_isSet = false;
    m_down_type_isValid = false;

    m_epa_isSet = false;
    m_epa_isValid = false;

    m_garbage_time_isSet = false;
    m_garbage_time_isValid = false;

    m_home_score_isSet = false;
    m_home_score_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_play_text_isSet = false;
    m_play_text_isValid = false;

    m_play_type_isSet = false;
    m_play_type_isValid = false;

    m_play_type_id_isSet = false;
    m_play_type_id_isValid = false;

    m_rush_pass_isSet = false;
    m_rush_pass_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_wallclock_isSet = false;
    m_wallclock_isValid = false;

    m_yards_gained_isSet = false;
    m_yards_gained_isValid = false;

    m_yards_to_goal_isSet = false;
    m_yards_to_goal_isValid = false;
}

void OAILivePlayByPlay_drives_inner_plays_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILivePlayByPlay_drives_inner_plays_inner::fromJsonObject(QJsonObject json) {

    m_away_score_isValid = ::OpenAPI::fromJsonValue(m_away_score, json[QString("awayScore")]);
    m_away_score_isSet = !json[QString("awayScore")].isNull() && m_away_score_isValid;

    m_clock_isValid = ::OpenAPI::fromJsonValue(m_clock, json[QString("clock")]);
    m_clock_isSet = !json[QString("clock")].isNull() && m_clock_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_down_isValid = ::OpenAPI::fromJsonValue(m_down, json[QString("down")]);
    m_down_isSet = !json[QString("down")].isNull() && m_down_isValid;

    m_down_type_isValid = ::OpenAPI::fromJsonValue(m_down_type, json[QString("downType")]);
    m_down_type_isSet = !json[QString("downType")].isNull() && m_down_type_isValid;

    m_epa_isValid = ::OpenAPI::fromJsonValue(m_epa, json[QString("epa")]);
    m_epa_isSet = !json[QString("epa")].isNull() && m_epa_isValid;

    m_garbage_time_isValid = ::OpenAPI::fromJsonValue(m_garbage_time, json[QString("garbageTime")]);
    m_garbage_time_isSet = !json[QString("garbageTime")].isNull() && m_garbage_time_isValid;

    m_home_score_isValid = ::OpenAPI::fromJsonValue(m_home_score, json[QString("homeScore")]);
    m_home_score_isSet = !json[QString("homeScore")].isNull() && m_home_score_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;

    m_play_text_isValid = ::OpenAPI::fromJsonValue(m_play_text, json[QString("playText")]);
    m_play_text_isSet = !json[QString("playText")].isNull() && m_play_text_isValid;

    m_play_type_isValid = ::OpenAPI::fromJsonValue(m_play_type, json[QString("playType")]);
    m_play_type_isSet = !json[QString("playType")].isNull() && m_play_type_isValid;

    m_play_type_id_isValid = ::OpenAPI::fromJsonValue(m_play_type_id, json[QString("playTypeId")]);
    m_play_type_id_isSet = !json[QString("playTypeId")].isNull() && m_play_type_id_isValid;

    m_rush_pass_isValid = ::OpenAPI::fromJsonValue(m_rush_pass, json[QString("rushPass")]);
    m_rush_pass_isSet = !json[QString("rushPass")].isNull() && m_rush_pass_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("teamId")]);
    m_team_id_isSet = !json[QString("teamId")].isNull() && m_team_id_isValid;

    m_wallclock_isValid = ::OpenAPI::fromJsonValue(m_wallclock, json[QString("wallclock")]);
    m_wallclock_isSet = !json[QString("wallclock")].isNull() && m_wallclock_isValid;

    m_yards_gained_isValid = ::OpenAPI::fromJsonValue(m_yards_gained, json[QString("yardsGained")]);
    m_yards_gained_isSet = !json[QString("yardsGained")].isNull() && m_yards_gained_isValid;

    m_yards_to_goal_isValid = ::OpenAPI::fromJsonValue(m_yards_to_goal, json[QString("yardsToGoal")]);
    m_yards_to_goal_isSet = !json[QString("yardsToGoal")].isNull() && m_yards_to_goal_isValid;
}

QString OAILivePlayByPlay_drives_inner_plays_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILivePlayByPlay_drives_inner_plays_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_away_score_isSet) {
        obj.insert(QString("awayScore"), ::OpenAPI::toJsonValue(m_away_score));
    }
    if (m_clock_isSet) {
        obj.insert(QString("clock"), ::OpenAPI::toJsonValue(m_clock));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_down_isSet) {
        obj.insert(QString("down"), ::OpenAPI::toJsonValue(m_down));
    }
    if (m_down_type_isSet) {
        obj.insert(QString("downType"), ::OpenAPI::toJsonValue(m_down_type));
    }
    if (m_epa_isSet) {
        obj.insert(QString("epa"), ::OpenAPI::toJsonValue(m_epa));
    }
    if (m_garbage_time_isSet) {
        obj.insert(QString("garbageTime"), ::OpenAPI::toJsonValue(m_garbage_time));
    }
    if (m_home_score_isSet) {
        obj.insert(QString("homeScore"), ::OpenAPI::toJsonValue(m_home_score));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_period_isSet) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_play_text_isSet) {
        obj.insert(QString("playText"), ::OpenAPI::toJsonValue(m_play_text));
    }
    if (m_play_type_isSet) {
        obj.insert(QString("playType"), ::OpenAPI::toJsonValue(m_play_type));
    }
    if (m_play_type_id_isSet) {
        obj.insert(QString("playTypeId"), ::OpenAPI::toJsonValue(m_play_type_id));
    }
    if (m_rush_pass_isSet) {
        obj.insert(QString("rushPass"), ::OpenAPI::toJsonValue(m_rush_pass));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("teamId"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_wallclock_isSet) {
        obj.insert(QString("wallclock"), ::OpenAPI::toJsonValue(m_wallclock));
    }
    if (m_yards_gained_isSet) {
        obj.insert(QString("yardsGained"), ::OpenAPI::toJsonValue(m_yards_gained));
    }
    if (m_yards_to_goal_isSet) {
        obj.insert(QString("yardsToGoal"), ::OpenAPI::toJsonValue(m_yards_to_goal));
    }
    return obj;
}

qint32 OAILivePlayByPlay_drives_inner_plays_inner::getAwayScore() const {
    return m_away_score;
}
void OAILivePlayByPlay_drives_inner_plays_inner::setAwayScore(const qint32 &away_score) {
    m_away_score = away_score;
    m_away_score_isSet = true;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_away_score_Set() const{
    return m_away_score_isSet;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_away_score_Valid() const{
    return m_away_score_isValid;
}

QString OAILivePlayByPlay_drives_inner_plays_inner::getClock() const {
    return m_clock;
}
void OAILivePlayByPlay_drives_inner_plays_inner::setClock(const QString &clock) {
    m_clock = clock;
    m_clock_isSet = true;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_clock_Set() const{
    return m_clock_isSet;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_clock_Valid() const{
    return m_clock_isValid;
}

qint32 OAILivePlayByPlay_drives_inner_plays_inner::getDistance() const {
    return m_distance;
}
void OAILivePlayByPlay_drives_inner_plays_inner::setDistance(const qint32 &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_distance_Valid() const{
    return m_distance_isValid;
}

qint32 OAILivePlayByPlay_drives_inner_plays_inner::getDown() const {
    return m_down;
}
void OAILivePlayByPlay_drives_inner_plays_inner::setDown(const qint32 &down) {
    m_down = down;
    m_down_isSet = true;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_down_Set() const{
    return m_down_isSet;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_down_Valid() const{
    return m_down_isValid;
}

QString OAILivePlayByPlay_drives_inner_plays_inner::getDownType() const {
    return m_down_type;
}
void OAILivePlayByPlay_drives_inner_plays_inner::setDownType(const QString &down_type) {
    m_down_type = down_type;
    m_down_type_isSet = true;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_down_type_Set() const{
    return m_down_type_isSet;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_down_type_Valid() const{
    return m_down_type_isValid;
}

double OAILivePlayByPlay_drives_inner_plays_inner::getEpa() const {
    return m_epa;
}
void OAILivePlayByPlay_drives_inner_plays_inner::setEpa(const double &epa) {
    m_epa = epa;
    m_epa_isSet = true;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_epa_Set() const{
    return m_epa_isSet;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_epa_Valid() const{
    return m_epa_isValid;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::isGarbageTime() const {
    return m_garbage_time;
}
void OAILivePlayByPlay_drives_inner_plays_inner::setGarbageTime(const bool &garbage_time) {
    m_garbage_time = garbage_time;
    m_garbage_time_isSet = true;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_garbage_time_Set() const{
    return m_garbage_time_isSet;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_garbage_time_Valid() const{
    return m_garbage_time_isValid;
}

qint32 OAILivePlayByPlay_drives_inner_plays_inner::getHomeScore() const {
    return m_home_score;
}
void OAILivePlayByPlay_drives_inner_plays_inner::setHomeScore(const qint32 &home_score) {
    m_home_score = home_score;
    m_home_score_isSet = true;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_home_score_Set() const{
    return m_home_score_isSet;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_home_score_Valid() const{
    return m_home_score_isValid;
}

qint32 OAILivePlayByPlay_drives_inner_plays_inner::getId() const {
    return m_id;
}
void OAILivePlayByPlay_drives_inner_plays_inner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAILivePlayByPlay_drives_inner_plays_inner::getPeriod() const {
    return m_period;
}
void OAILivePlayByPlay_drives_inner_plays_inner::setPeriod(const qint32 &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_period_Set() const{
    return m_period_isSet;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_period_Valid() const{
    return m_period_isValid;
}

QString OAILivePlayByPlay_drives_inner_plays_inner::getPlayText() const {
    return m_play_text;
}
void OAILivePlayByPlay_drives_inner_plays_inner::setPlayText(const QString &play_text) {
    m_play_text = play_text;
    m_play_text_isSet = true;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_play_text_Set() const{
    return m_play_text_isSet;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_play_text_Valid() const{
    return m_play_text_isValid;
}

QString OAILivePlayByPlay_drives_inner_plays_inner::getPlayType() const {
    return m_play_type;
}
void OAILivePlayByPlay_drives_inner_plays_inner::setPlayType(const QString &play_type) {
    m_play_type = play_type;
    m_play_type_isSet = true;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_play_type_Set() const{
    return m_play_type_isSet;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_play_type_Valid() const{
    return m_play_type_isValid;
}

qint32 OAILivePlayByPlay_drives_inner_plays_inner::getPlayTypeId() const {
    return m_play_type_id;
}
void OAILivePlayByPlay_drives_inner_plays_inner::setPlayTypeId(const qint32 &play_type_id) {
    m_play_type_id = play_type_id;
    m_play_type_id_isSet = true;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_play_type_id_Set() const{
    return m_play_type_id_isSet;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_play_type_id_Valid() const{
    return m_play_type_id_isValid;
}

QString OAILivePlayByPlay_drives_inner_plays_inner::getRushPass() const {
    return m_rush_pass;
}
void OAILivePlayByPlay_drives_inner_plays_inner::setRushPass(const QString &rush_pass) {
    m_rush_pass = rush_pass;
    m_rush_pass_isSet = true;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_rush_pass_Set() const{
    return m_rush_pass_isSet;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_rush_pass_Valid() const{
    return m_rush_pass_isValid;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::isSuccess() const {
    return m_success;
}
void OAILivePlayByPlay_drives_inner_plays_inner::setSuccess(const bool &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_success_Set() const{
    return m_success_isSet;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_success_Valid() const{
    return m_success_isValid;
}

QString OAILivePlayByPlay_drives_inner_plays_inner::getTeam() const {
    return m_team;
}
void OAILivePlayByPlay_drives_inner_plays_inner::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_team_Set() const{
    return m_team_isSet;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAILivePlayByPlay_drives_inner_plays_inner::getTeamId() const {
    return m_team_id;
}
void OAILivePlayByPlay_drives_inner_plays_inner::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_team_id_Valid() const{
    return m_team_id_isValid;
}

QString OAILivePlayByPlay_drives_inner_plays_inner::getWallclock() const {
    return m_wallclock;
}
void OAILivePlayByPlay_drives_inner_plays_inner::setWallclock(const QString &wallclock) {
    m_wallclock = wallclock;
    m_wallclock_isSet = true;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_wallclock_Set() const{
    return m_wallclock_isSet;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_wallclock_Valid() const{
    return m_wallclock_isValid;
}

qint32 OAILivePlayByPlay_drives_inner_plays_inner::getYardsGained() const {
    return m_yards_gained;
}
void OAILivePlayByPlay_drives_inner_plays_inner::setYardsGained(const qint32 &yards_gained) {
    m_yards_gained = yards_gained;
    m_yards_gained_isSet = true;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_yards_gained_Set() const{
    return m_yards_gained_isSet;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_yards_gained_Valid() const{
    return m_yards_gained_isValid;
}

qint32 OAILivePlayByPlay_drives_inner_plays_inner::getYardsToGoal() const {
    return m_yards_to_goal;
}
void OAILivePlayByPlay_drives_inner_plays_inner::setYardsToGoal(const qint32 &yards_to_goal) {
    m_yards_to_goal = yards_to_goal;
    m_yards_to_goal_isSet = true;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_yards_to_goal_Set() const{
    return m_yards_to_goal_isSet;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::is_yards_to_goal_Valid() const{
    return m_yards_to_goal_isValid;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_away_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_down_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_down_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_garbage_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rush_pass_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wallclock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yards_gained_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yards_to_goal_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILivePlayByPlay_drives_inner_plays_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
