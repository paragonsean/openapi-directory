/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPlay.h
 *
 * 
 */

#ifndef OAIPlay_H
#define OAIPlay_H

#include <QJsonObject>

#include "OAIDrive_end_time.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDrive_end_time;

class OAIPlay : public OAIObject {
public:
    OAIPlay();
    OAIPlay(QString json);
    ~OAIPlay() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAway() const;
    void setAway(const QString &away);
    bool is_away_Set() const;
    bool is_away_Valid() const;

    OAIDrive_end_time getClock() const;
    void setClock(const OAIDrive_end_time &clock);
    bool is_clock_Set() const;
    bool is_clock_Valid() const;

    QString getDefense() const;
    void setDefense(const QString &defense);
    bool is_defense_Set() const;
    bool is_defense_Valid() const;

    QString getDefenseConference() const;
    void setDefenseConference(const QString &defense_conference);
    bool is_defense_conference_Set() const;
    bool is_defense_conference_Valid() const;

    qint32 getDefenseScore() const;
    void setDefenseScore(const qint32 &defense_score);
    bool is_defense_score_Set() const;
    bool is_defense_score_Valid() const;

    qint32 getDefenseTimeouts() const;
    void setDefenseTimeouts(const qint32 &defense_timeouts);
    bool is_defense_timeouts_Set() const;
    bool is_defense_timeouts_Valid() const;

    qint32 getDistance() const;
    void setDistance(const qint32 &distance);
    bool is_distance_Set() const;
    bool is_distance_Valid() const;

    qint32 getDown() const;
    void setDown(const qint32 &down);
    bool is_down_Set() const;
    bool is_down_Valid() const;

    qint32 getDriveId() const;
    void setDriveId(const qint32 &drive_id);
    bool is_drive_id_Set() const;
    bool is_drive_id_Valid() const;

    qint32 getDriveNumber() const;
    void setDriveNumber(const qint32 &drive_number);
    bool is_drive_number_Set() const;
    bool is_drive_number_Valid() const;

    qint32 getGameId() const;
    void setGameId(const qint32 &game_id);
    bool is_game_id_Set() const;
    bool is_game_id_Valid() const;

    QString getHome() const;
    void setHome(const QString &home);
    bool is_home_Set() const;
    bool is_home_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getOffense() const;
    void setOffense(const QString &offense);
    bool is_offense_Set() const;
    bool is_offense_Valid() const;

    QString getOffenseConference() const;
    void setOffenseConference(const QString &offense_conference);
    bool is_offense_conference_Set() const;
    bool is_offense_conference_Valid() const;

    qint32 getOffenseScore() const;
    void setOffenseScore(const qint32 &offense_score);
    bool is_offense_score_Set() const;
    bool is_offense_score_Valid() const;

    qint32 getOffenseTimeouts() const;
    void setOffenseTimeouts(const qint32 &offense_timeouts);
    bool is_offense_timeouts_Set() const;
    bool is_offense_timeouts_Valid() const;

    qint32 getPeriod() const;
    void setPeriod(const qint32 &period);
    bool is_period_Set() const;
    bool is_period_Valid() const;

    qint32 getPlayNumber() const;
    void setPlayNumber(const qint32 &play_number);
    bool is_play_number_Set() const;
    bool is_play_number_Valid() const;

    QString getPlayText() const;
    void setPlayText(const QString &play_text);
    bool is_play_text_Set() const;
    bool is_play_text_Valid() const;

    QString getPlayType() const;
    void setPlayType(const QString &play_type);
    bool is_play_type_Set() const;
    bool is_play_type_Valid() const;

    double getPpa() const;
    void setPpa(const double &ppa);
    bool is_ppa_Set() const;
    bool is_ppa_Valid() const;

    bool isScoring() const;
    void setScoring(const bool &scoring);
    bool is_scoring_Set() const;
    bool is_scoring_Valid() const;

    QString getWallclock() const;
    void setWallclock(const QString &wallclock);
    bool is_wallclock_Set() const;
    bool is_wallclock_Valid() const;

    qint32 getYardLine() const;
    void setYardLine(const qint32 &yard_line);
    bool is_yard_line_Set() const;
    bool is_yard_line_Valid() const;

    qint32 getYardsGained() const;
    void setYardsGained(const qint32 &yards_gained);
    bool is_yards_gained_Set() const;
    bool is_yards_gained_Valid() const;

    qint32 getYardsToGoal() const;
    void setYardsToGoal(const qint32 &yards_to_goal);
    bool is_yards_to_goal_Set() const;
    bool is_yards_to_goal_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_away;
    bool m_away_isSet;
    bool m_away_isValid;

    OAIDrive_end_time m_clock;
    bool m_clock_isSet;
    bool m_clock_isValid;

    QString m_defense;
    bool m_defense_isSet;
    bool m_defense_isValid;

    QString m_defense_conference;
    bool m_defense_conference_isSet;
    bool m_defense_conference_isValid;

    qint32 m_defense_score;
    bool m_defense_score_isSet;
    bool m_defense_score_isValid;

    qint32 m_defense_timeouts;
    bool m_defense_timeouts_isSet;
    bool m_defense_timeouts_isValid;

    qint32 m_distance;
    bool m_distance_isSet;
    bool m_distance_isValid;

    qint32 m_down;
    bool m_down_isSet;
    bool m_down_isValid;

    qint32 m_drive_id;
    bool m_drive_id_isSet;
    bool m_drive_id_isValid;

    qint32 m_drive_number;
    bool m_drive_number_isSet;
    bool m_drive_number_isValid;

    qint32 m_game_id;
    bool m_game_id_isSet;
    bool m_game_id_isValid;

    QString m_home;
    bool m_home_isSet;
    bool m_home_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_offense;
    bool m_offense_isSet;
    bool m_offense_isValid;

    QString m_offense_conference;
    bool m_offense_conference_isSet;
    bool m_offense_conference_isValid;

    qint32 m_offense_score;
    bool m_offense_score_isSet;
    bool m_offense_score_isValid;

    qint32 m_offense_timeouts;
    bool m_offense_timeouts_isSet;
    bool m_offense_timeouts_isValid;

    qint32 m_period;
    bool m_period_isSet;
    bool m_period_isValid;

    qint32 m_play_number;
    bool m_play_number_isSet;
    bool m_play_number_isValid;

    QString m_play_text;
    bool m_play_text_isSet;
    bool m_play_text_isValid;

    QString m_play_type;
    bool m_play_type_isSet;
    bool m_play_type_isValid;

    double m_ppa;
    bool m_ppa_isSet;
    bool m_ppa_isValid;

    bool m_scoring;
    bool m_scoring_isSet;
    bool m_scoring_isValid;

    QString m_wallclock;
    bool m_wallclock_isSet;
    bool m_wallclock_isValid;

    qint32 m_yard_line;
    bool m_yard_line_isSet;
    bool m_yard_line_isValid;

    qint32 m_yards_gained;
    bool m_yards_gained_isSet;
    bool m_yards_gained_isValid;

    qint32 m_yards_to_goal;
    bool m_yards_to_goal_isSet;
    bool m_yards_to_goal_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPlay)

#endif // OAIPlay_H
