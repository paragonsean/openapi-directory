/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamSeasonStat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamSeasonStat::OAITeamSeasonStat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamSeasonStat::OAITeamSeasonStat() {
    this->initializeModel();
}

OAITeamSeasonStat::~OAITeamSeasonStat() {}

void OAITeamSeasonStat::initializeModel() {

    m_conference_isSet = false;
    m_conference_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_stat_name_isSet = false;
    m_stat_name_isValid = false;

    m_stat_value_isSet = false;
    m_stat_value_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;
}

void OAITeamSeasonStat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamSeasonStat::fromJsonObject(QJsonObject json) {

    m_conference_isValid = ::OpenAPI::fromJsonValue(m_conference, json[QString("conference")]);
    m_conference_isSet = !json[QString("conference")].isNull() && m_conference_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("season")]);
    m_season_isSet = !json[QString("season")].isNull() && m_season_isValid;

    m_stat_name_isValid = ::OpenAPI::fromJsonValue(m_stat_name, json[QString("statName")]);
    m_stat_name_isSet = !json[QString("statName")].isNull() && m_stat_name_isValid;

    m_stat_value_isValid = ::OpenAPI::fromJsonValue(m_stat_value, json[QString("statValue")]);
    m_stat_value_isSet = !json[QString("statValue")].isNull() && m_stat_value_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;
}

QString OAITeamSeasonStat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamSeasonStat::asJsonObject() const {
    QJsonObject obj;
    if (m_conference_isSet) {
        obj.insert(QString("conference"), ::OpenAPI::toJsonValue(m_conference));
    }
    if (m_season_isSet) {
        obj.insert(QString("season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_stat_name_isSet) {
        obj.insert(QString("statName"), ::OpenAPI::toJsonValue(m_stat_name));
    }
    if (m_stat_value_isSet) {
        obj.insert(QString("statValue"), ::OpenAPI::toJsonValue(m_stat_value));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    return obj;
}

QString OAITeamSeasonStat::getConference() const {
    return m_conference;
}
void OAITeamSeasonStat::setConference(const QString &conference) {
    m_conference = conference;
    m_conference_isSet = true;
}

bool OAITeamSeasonStat::is_conference_Set() const{
    return m_conference_isSet;
}

bool OAITeamSeasonStat::is_conference_Valid() const{
    return m_conference_isValid;
}

qint32 OAITeamSeasonStat::getSeason() const {
    return m_season;
}
void OAITeamSeasonStat::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAITeamSeasonStat::is_season_Set() const{
    return m_season_isSet;
}

bool OAITeamSeasonStat::is_season_Valid() const{
    return m_season_isValid;
}

QString OAITeamSeasonStat::getStatName() const {
    return m_stat_name;
}
void OAITeamSeasonStat::setStatName(const QString &stat_name) {
    m_stat_name = stat_name;
    m_stat_name_isSet = true;
}

bool OAITeamSeasonStat::is_stat_name_Set() const{
    return m_stat_name_isSet;
}

bool OAITeamSeasonStat::is_stat_name_Valid() const{
    return m_stat_name_isValid;
}

qint32 OAITeamSeasonStat::getStatValue() const {
    return m_stat_value;
}
void OAITeamSeasonStat::setStatValue(const qint32 &stat_value) {
    m_stat_value = stat_value;
    m_stat_value_isSet = true;
}

bool OAITeamSeasonStat::is_stat_value_Set() const{
    return m_stat_value_isSet;
}

bool OAITeamSeasonStat::is_stat_value_Valid() const{
    return m_stat_value_isValid;
}

QString OAITeamSeasonStat::getTeam() const {
    return m_team;
}
void OAITeamSeasonStat::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAITeamSeasonStat::is_team_Set() const{
    return m_team_isSet;
}

bool OAITeamSeasonStat::is_team_Valid() const{
    return m_team_isValid;
}

bool OAITeamSeasonStat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stat_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stat_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamSeasonStat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
