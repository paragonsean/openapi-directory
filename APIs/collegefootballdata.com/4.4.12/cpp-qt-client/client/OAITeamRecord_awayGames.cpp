/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamRecord_awayGames.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamRecord_awayGames::OAITeamRecord_awayGames(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamRecord_awayGames::OAITeamRecord_awayGames() {
    this->initializeModel();
}

OAITeamRecord_awayGames::~OAITeamRecord_awayGames() {}

void OAITeamRecord_awayGames::initializeModel() {

    m_games_isSet = false;
    m_games_isValid = false;

    m_losses_isSet = false;
    m_losses_isValid = false;

    m_ties_isSet = false;
    m_ties_isValid = false;

    m_wins_isSet = false;
    m_wins_isValid = false;
}

void OAITeamRecord_awayGames::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamRecord_awayGames::fromJsonObject(QJsonObject json) {

    m_games_isValid = ::OpenAPI::fromJsonValue(m_games, json[QString("games")]);
    m_games_isSet = !json[QString("games")].isNull() && m_games_isValid;

    m_losses_isValid = ::OpenAPI::fromJsonValue(m_losses, json[QString("losses")]);
    m_losses_isSet = !json[QString("losses")].isNull() && m_losses_isValid;

    m_ties_isValid = ::OpenAPI::fromJsonValue(m_ties, json[QString("ties")]);
    m_ties_isSet = !json[QString("ties")].isNull() && m_ties_isValid;

    m_wins_isValid = ::OpenAPI::fromJsonValue(m_wins, json[QString("wins")]);
    m_wins_isSet = !json[QString("wins")].isNull() && m_wins_isValid;
}

QString OAITeamRecord_awayGames::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamRecord_awayGames::asJsonObject() const {
    QJsonObject obj;
    if (m_games_isSet) {
        obj.insert(QString("games"), ::OpenAPI::toJsonValue(m_games));
    }
    if (m_losses_isSet) {
        obj.insert(QString("losses"), ::OpenAPI::toJsonValue(m_losses));
    }
    if (m_ties_isSet) {
        obj.insert(QString("ties"), ::OpenAPI::toJsonValue(m_ties));
    }
    if (m_wins_isSet) {
        obj.insert(QString("wins"), ::OpenAPI::toJsonValue(m_wins));
    }
    return obj;
}

qint32 OAITeamRecord_awayGames::getGames() const {
    return m_games;
}
void OAITeamRecord_awayGames::setGames(const qint32 &games) {
    m_games = games;
    m_games_isSet = true;
}

bool OAITeamRecord_awayGames::is_games_Set() const{
    return m_games_isSet;
}

bool OAITeamRecord_awayGames::is_games_Valid() const{
    return m_games_isValid;
}

qint32 OAITeamRecord_awayGames::getLosses() const {
    return m_losses;
}
void OAITeamRecord_awayGames::setLosses(const qint32 &losses) {
    m_losses = losses;
    m_losses_isSet = true;
}

bool OAITeamRecord_awayGames::is_losses_Set() const{
    return m_losses_isSet;
}

bool OAITeamRecord_awayGames::is_losses_Valid() const{
    return m_losses_isValid;
}

qint32 OAITeamRecord_awayGames::getTies() const {
    return m_ties;
}
void OAITeamRecord_awayGames::setTies(const qint32 &ties) {
    m_ties = ties;
    m_ties_isSet = true;
}

bool OAITeamRecord_awayGames::is_ties_Set() const{
    return m_ties_isSet;
}

bool OAITeamRecord_awayGames::is_ties_Valid() const{
    return m_ties_isValid;
}

qint32 OAITeamRecord_awayGames::getWins() const {
    return m_wins;
}
void OAITeamRecord_awayGames::setWins(const qint32 &wins) {
    m_wins = wins;
    m_wins_isSet = true;
}

bool OAITeamRecord_awayGames::is_wins_Set() const{
    return m_wins_isSet;
}

bool OAITeamRecord_awayGames::is_wins_Valid() const{
    return m_wins_isValid;
}

bool OAITeamRecord_awayGames::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_games_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_losses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wins_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamRecord_awayGames::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
