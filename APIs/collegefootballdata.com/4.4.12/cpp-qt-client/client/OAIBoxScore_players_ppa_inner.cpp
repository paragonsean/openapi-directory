/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBoxScore_players_ppa_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBoxScore_players_ppa_inner::OAIBoxScore_players_ppa_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBoxScore_players_ppa_inner::OAIBoxScore_players_ppa_inner() {
    this->initializeModel();
}

OAIBoxScore_players_ppa_inner::~OAIBoxScore_players_ppa_inner() {}

void OAIBoxScore_players_ppa_inner::initializeModel() {

    m_average_isSet = false;
    m_average_isValid = false;

    m_cumulative_isSet = false;
    m_cumulative_isValid = false;

    m_player_isSet = false;
    m_player_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;
}

void OAIBoxScore_players_ppa_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBoxScore_players_ppa_inner::fromJsonObject(QJsonObject json) {

    m_average_isValid = ::OpenAPI::fromJsonValue(m_average, json[QString("average")]);
    m_average_isSet = !json[QString("average")].isNull() && m_average_isValid;

    m_cumulative_isValid = ::OpenAPI::fromJsonValue(m_cumulative, json[QString("cumulative")]);
    m_cumulative_isSet = !json[QString("cumulative")].isNull() && m_cumulative_isValid;

    m_player_isValid = ::OpenAPI::fromJsonValue(m_player, json[QString("player")]);
    m_player_isSet = !json[QString("player")].isNull() && m_player_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;
}

QString OAIBoxScore_players_ppa_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBoxScore_players_ppa_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_average.isSet()) {
        obj.insert(QString("average"), ::OpenAPI::toJsonValue(m_average));
    }
    if (m_cumulative.isSet()) {
        obj.insert(QString("cumulative"), ::OpenAPI::toJsonValue(m_cumulative));
    }
    if (m_player_isSet) {
        obj.insert(QString("player"), ::OpenAPI::toJsonValue(m_player));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    return obj;
}

OAIBoxScore_players_ppa_inner_average OAIBoxScore_players_ppa_inner::getAverage() const {
    return m_average;
}
void OAIBoxScore_players_ppa_inner::setAverage(const OAIBoxScore_players_ppa_inner_average &average) {
    m_average = average;
    m_average_isSet = true;
}

bool OAIBoxScore_players_ppa_inner::is_average_Set() const{
    return m_average_isSet;
}

bool OAIBoxScore_players_ppa_inner::is_average_Valid() const{
    return m_average_isValid;
}

OAIBoxScore_players_ppa_inner_average OAIBoxScore_players_ppa_inner::getCumulative() const {
    return m_cumulative;
}
void OAIBoxScore_players_ppa_inner::setCumulative(const OAIBoxScore_players_ppa_inner_average &cumulative) {
    m_cumulative = cumulative;
    m_cumulative_isSet = true;
}

bool OAIBoxScore_players_ppa_inner::is_cumulative_Set() const{
    return m_cumulative_isSet;
}

bool OAIBoxScore_players_ppa_inner::is_cumulative_Valid() const{
    return m_cumulative_isValid;
}

QString OAIBoxScore_players_ppa_inner::getPlayer() const {
    return m_player;
}
void OAIBoxScore_players_ppa_inner::setPlayer(const QString &player) {
    m_player = player;
    m_player_isSet = true;
}

bool OAIBoxScore_players_ppa_inner::is_player_Set() const{
    return m_player_isSet;
}

bool OAIBoxScore_players_ppa_inner::is_player_Valid() const{
    return m_player_isValid;
}

QString OAIBoxScore_players_ppa_inner::getPosition() const {
    return m_position;
}
void OAIBoxScore_players_ppa_inner::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIBoxScore_players_ppa_inner::is_position_Set() const{
    return m_position_isSet;
}

bool OAIBoxScore_players_ppa_inner::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIBoxScore_players_ppa_inner::getTeam() const {
    return m_team;
}
void OAIBoxScore_players_ppa_inner::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIBoxScore_players_ppa_inner::is_team_Set() const{
    return m_team_isSet;
}

bool OAIBoxScore_players_ppa_inner::is_team_Valid() const{
    return m_team_isValid;
}

bool OAIBoxScore_players_ppa_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cumulative.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBoxScore_players_ppa_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
