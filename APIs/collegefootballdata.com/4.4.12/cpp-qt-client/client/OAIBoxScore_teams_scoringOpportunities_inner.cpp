/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBoxScore_teams_scoringOpportunities_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBoxScore_teams_scoringOpportunities_inner::OAIBoxScore_teams_scoringOpportunities_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBoxScore_teams_scoringOpportunities_inner::OAIBoxScore_teams_scoringOpportunities_inner() {
    this->initializeModel();
}

OAIBoxScore_teams_scoringOpportunities_inner::~OAIBoxScore_teams_scoringOpportunities_inner() {}

void OAIBoxScore_teams_scoringOpportunities_inner::initializeModel() {

    m_opportunities_isSet = false;
    m_opportunities_isValid = false;

    m_points_isSet = false;
    m_points_isValid = false;

    m_points_per_opportunity_isSet = false;
    m_points_per_opportunity_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;
}

void OAIBoxScore_teams_scoringOpportunities_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBoxScore_teams_scoringOpportunities_inner::fromJsonObject(QJsonObject json) {

    m_opportunities_isValid = ::OpenAPI::fromJsonValue(m_opportunities, json[QString("opportunities")]);
    m_opportunities_isSet = !json[QString("opportunities")].isNull() && m_opportunities_isValid;

    m_points_isValid = ::OpenAPI::fromJsonValue(m_points, json[QString("points")]);
    m_points_isSet = !json[QString("points")].isNull() && m_points_isValid;

    m_points_per_opportunity_isValid = ::OpenAPI::fromJsonValue(m_points_per_opportunity, json[QString("pointsPerOpportunity")]);
    m_points_per_opportunity_isSet = !json[QString("pointsPerOpportunity")].isNull() && m_points_per_opportunity_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;
}

QString OAIBoxScore_teams_scoringOpportunities_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBoxScore_teams_scoringOpportunities_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_opportunities_isSet) {
        obj.insert(QString("opportunities"), ::OpenAPI::toJsonValue(m_opportunities));
    }
    if (m_points_isSet) {
        obj.insert(QString("points"), ::OpenAPI::toJsonValue(m_points));
    }
    if (m_points_per_opportunity_isSet) {
        obj.insert(QString("pointsPerOpportunity"), ::OpenAPI::toJsonValue(m_points_per_opportunity));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    return obj;
}

qint32 OAIBoxScore_teams_scoringOpportunities_inner::getOpportunities() const {
    return m_opportunities;
}
void OAIBoxScore_teams_scoringOpportunities_inner::setOpportunities(const qint32 &opportunities) {
    m_opportunities = opportunities;
    m_opportunities_isSet = true;
}

bool OAIBoxScore_teams_scoringOpportunities_inner::is_opportunities_Set() const{
    return m_opportunities_isSet;
}

bool OAIBoxScore_teams_scoringOpportunities_inner::is_opportunities_Valid() const{
    return m_opportunities_isValid;
}

qint32 OAIBoxScore_teams_scoringOpportunities_inner::getPoints() const {
    return m_points;
}
void OAIBoxScore_teams_scoringOpportunities_inner::setPoints(const qint32 &points) {
    m_points = points;
    m_points_isSet = true;
}

bool OAIBoxScore_teams_scoringOpportunities_inner::is_points_Set() const{
    return m_points_isSet;
}

bool OAIBoxScore_teams_scoringOpportunities_inner::is_points_Valid() const{
    return m_points_isValid;
}

double OAIBoxScore_teams_scoringOpportunities_inner::getPointsPerOpportunity() const {
    return m_points_per_opportunity;
}
void OAIBoxScore_teams_scoringOpportunities_inner::setPointsPerOpportunity(const double &points_per_opportunity) {
    m_points_per_opportunity = points_per_opportunity;
    m_points_per_opportunity_isSet = true;
}

bool OAIBoxScore_teams_scoringOpportunities_inner::is_points_per_opportunity_Set() const{
    return m_points_per_opportunity_isSet;
}

bool OAIBoxScore_teams_scoringOpportunities_inner::is_points_per_opportunity_Valid() const{
    return m_points_per_opportunity_isValid;
}

QString OAIBoxScore_teams_scoringOpportunities_inner::getTeam() const {
    return m_team;
}
void OAIBoxScore_teams_scoringOpportunities_inner::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIBoxScore_teams_scoringOpportunities_inner::is_team_Set() const{
    return m_team_isSet;
}

bool OAIBoxScore_teams_scoringOpportunities_inner::is_team_Valid() const{
    return m_team_isValid;
}

bool OAIBoxScore_teams_scoringOpportunities_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_opportunities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_per_opportunity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBoxScore_teams_scoringOpportunities_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
