/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamEloRating.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamEloRating::OAITeamEloRating(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamEloRating::OAITeamEloRating() {
    this->initializeModel();
}

OAITeamEloRating::~OAITeamEloRating() {}

void OAITeamEloRating::initializeModel() {

    m_conference_isSet = false;
    m_conference_isValid = false;

    m_elo_isSet = false;
    m_elo_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAITeamEloRating::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamEloRating::fromJsonObject(QJsonObject json) {

    m_conference_isValid = ::OpenAPI::fromJsonValue(m_conference, json[QString("conference")]);
    m_conference_isSet = !json[QString("conference")].isNull() && m_conference_isValid;

    m_elo_isValid = ::OpenAPI::fromJsonValue(m_elo, json[QString("elo")]);
    m_elo_isSet = !json[QString("elo")].isNull() && m_elo_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAITeamEloRating::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamEloRating::asJsonObject() const {
    QJsonObject obj;
    if (m_conference_isSet) {
        obj.insert(QString("conference"), ::OpenAPI::toJsonValue(m_conference));
    }
    if (m_elo_isSet) {
        obj.insert(QString("elo"), ::OpenAPI::toJsonValue(m_elo));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QString OAITeamEloRating::getConference() const {
    return m_conference;
}
void OAITeamEloRating::setConference(const QString &conference) {
    m_conference = conference;
    m_conference_isSet = true;
}

bool OAITeamEloRating::is_conference_Set() const{
    return m_conference_isSet;
}

bool OAITeamEloRating::is_conference_Valid() const{
    return m_conference_isValid;
}

double OAITeamEloRating::getElo() const {
    return m_elo;
}
void OAITeamEloRating::setElo(const double &elo) {
    m_elo = elo;
    m_elo_isSet = true;
}

bool OAITeamEloRating::is_elo_Set() const{
    return m_elo_isSet;
}

bool OAITeamEloRating::is_elo_Valid() const{
    return m_elo_isValid;
}

QString OAITeamEloRating::getTeam() const {
    return m_team;
}
void OAITeamEloRating::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAITeamEloRating::is_team_Set() const{
    return m_team_isSet;
}

bool OAITeamEloRating::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAITeamEloRating::getYear() const {
    return m_year;
}
void OAITeamEloRating::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAITeamEloRating::is_year_Set() const{
    return m_year_isSet;
}

bool OAITeamEloRating::is_year_Valid() const{
    return m_year_isValid;
}

bool OAITeamEloRating::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamEloRating::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
