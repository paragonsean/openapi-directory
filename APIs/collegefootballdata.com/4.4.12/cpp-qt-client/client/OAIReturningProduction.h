/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReturningProduction.h
 *
 * 
 */

#ifndef OAIReturningProduction_H
#define OAIReturningProduction_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIReturningProduction : public OAIObject {
public:
    OAIReturningProduction();
    OAIReturningProduction(QString json);
    ~OAIReturningProduction() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getConference() const;
    void setConference(const QString &conference);
    bool is_conference_Set() const;
    bool is_conference_Valid() const;

    double getPassingUsage() const;
    void setPassingUsage(const double &passing_usage);
    bool is_passing_usage_Set() const;
    bool is_passing_usage_Valid() const;

    double getPercentPpa() const;
    void setPercentPpa(const double &percent_ppa);
    bool is_percent_ppa_Set() const;
    bool is_percent_ppa_Valid() const;

    double getPercentPassingPpa() const;
    void setPercentPassingPpa(const double &percent_passing_ppa);
    bool is_percent_passing_ppa_Set() const;
    bool is_percent_passing_ppa_Valid() const;

    double getPercentReceivingPpa() const;
    void setPercentReceivingPpa(const double &percent_receiving_ppa);
    bool is_percent_receiving_ppa_Set() const;
    bool is_percent_receiving_ppa_Valid() const;

    double getPercentRushingPpa() const;
    void setPercentRushingPpa(const double &percent_rushing_ppa);
    bool is_percent_rushing_ppa_Set() const;
    bool is_percent_rushing_ppa_Valid() const;

    double getReceivingUsage() const;
    void setReceivingUsage(const double &receiving_usage);
    bool is_receiving_usage_Set() const;
    bool is_receiving_usage_Valid() const;

    double getRushingUsage() const;
    void setRushingUsage(const double &rushing_usage);
    bool is_rushing_usage_Set() const;
    bool is_rushing_usage_Valid() const;

    qint32 getSeason() const;
    void setSeason(const qint32 &season);
    bool is_season_Set() const;
    bool is_season_Valid() const;

    QString getTeam() const;
    void setTeam(const QString &team);
    bool is_team_Set() const;
    bool is_team_Valid() const;

    double getTotalPpa() const;
    void setTotalPpa(const double &total_ppa);
    bool is_total_ppa_Set() const;
    bool is_total_ppa_Valid() const;

    double getTotalPassingPpa() const;
    void setTotalPassingPpa(const double &total_passing_ppa);
    bool is_total_passing_ppa_Set() const;
    bool is_total_passing_ppa_Valid() const;

    double getTotalReceivingPpa() const;
    void setTotalReceivingPpa(const double &total_receiving_ppa);
    bool is_total_receiving_ppa_Set() const;
    bool is_total_receiving_ppa_Valid() const;

    double getTotalRushingPpa() const;
    void setTotalRushingPpa(const double &total_rushing_ppa);
    bool is_total_rushing_ppa_Set() const;
    bool is_total_rushing_ppa_Valid() const;

    double getUsage() const;
    void setUsage(const double &usage);
    bool is_usage_Set() const;
    bool is_usage_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_conference;
    bool m_conference_isSet;
    bool m_conference_isValid;

    double m_passing_usage;
    bool m_passing_usage_isSet;
    bool m_passing_usage_isValid;

    double m_percent_ppa;
    bool m_percent_ppa_isSet;
    bool m_percent_ppa_isValid;

    double m_percent_passing_ppa;
    bool m_percent_passing_ppa_isSet;
    bool m_percent_passing_ppa_isValid;

    double m_percent_receiving_ppa;
    bool m_percent_receiving_ppa_isSet;
    bool m_percent_receiving_ppa_isValid;

    double m_percent_rushing_ppa;
    bool m_percent_rushing_ppa_isSet;
    bool m_percent_rushing_ppa_isValid;

    double m_receiving_usage;
    bool m_receiving_usage_isSet;
    bool m_receiving_usage_isValid;

    double m_rushing_usage;
    bool m_rushing_usage_isSet;
    bool m_rushing_usage_isValid;

    qint32 m_season;
    bool m_season_isSet;
    bool m_season_isValid;

    QString m_team;
    bool m_team_isSet;
    bool m_team_isValid;

    double m_total_ppa;
    bool m_total_ppa_isSet;
    bool m_total_ppa_isValid;

    double m_total_passing_ppa;
    bool m_total_passing_ppa_isSet;
    bool m_total_passing_ppa_isValid;

    double m_total_receiving_ppa;
    bool m_total_receiving_ppa_isSet;
    bool m_total_receiving_ppa_isValid;

    double m_total_rushing_ppa;
    bool m_total_rushing_ppa_isSet;
    bool m_total_rushing_ppa_isValid;

    double m_usage;
    bool m_usage_isSet;
    bool m_usage_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReturningProduction)

#endif // OAIReturningProduction_H
