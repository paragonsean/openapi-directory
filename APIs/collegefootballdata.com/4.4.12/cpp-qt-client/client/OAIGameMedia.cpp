/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGameMedia.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGameMedia::OAIGameMedia(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGameMedia::OAIGameMedia() {
    this->initializeModel();
}

OAIGameMedia::~OAIGameMedia() {}

void OAIGameMedia::initializeModel() {

    m_away_conference_isSet = false;
    m_away_conference_isValid = false;

    m_away_team_isSet = false;
    m_away_team_isValid = false;

    m_home_conference_isSet = false;
    m_home_conference_isValid = false;

    m_home_team_isSet = false;
    m_home_team_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_start_time_tbd_isSet = false;
    m_is_start_time_tbd_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_outlet_isSet = false;
    m_outlet_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_season_type_isSet = false;
    m_season_type_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_week_isSet = false;
    m_week_isValid = false;
}

void OAIGameMedia::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGameMedia::fromJsonObject(QJsonObject json) {

    m_away_conference_isValid = ::OpenAPI::fromJsonValue(m_away_conference, json[QString("awayConference")]);
    m_away_conference_isSet = !json[QString("awayConference")].isNull() && m_away_conference_isValid;

    m_away_team_isValid = ::OpenAPI::fromJsonValue(m_away_team, json[QString("awayTeam")]);
    m_away_team_isSet = !json[QString("awayTeam")].isNull() && m_away_team_isValid;

    m_home_conference_isValid = ::OpenAPI::fromJsonValue(m_home_conference, json[QString("homeConference")]);
    m_home_conference_isSet = !json[QString("homeConference")].isNull() && m_home_conference_isValid;

    m_home_team_isValid = ::OpenAPI::fromJsonValue(m_home_team, json[QString("homeTeam")]);
    m_home_team_isSet = !json[QString("homeTeam")].isNull() && m_home_team_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_start_time_tbd_isValid = ::OpenAPI::fromJsonValue(m_is_start_time_tbd, json[QString("isStartTimeTBD")]);
    m_is_start_time_tbd_isSet = !json[QString("isStartTimeTBD")].isNull() && m_is_start_time_tbd_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("mediaType")]);
    m_media_type_isSet = !json[QString("mediaType")].isNull() && m_media_type_isValid;

    m_outlet_isValid = ::OpenAPI::fromJsonValue(m_outlet, json[QString("outlet")]);
    m_outlet_isSet = !json[QString("outlet")].isNull() && m_outlet_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("season")]);
    m_season_isSet = !json[QString("season")].isNull() && m_season_isValid;

    m_season_type_isValid = ::OpenAPI::fromJsonValue(m_season_type, json[QString("seasonType")]);
    m_season_type_isSet = !json[QString("seasonType")].isNull() && m_season_type_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_week_isValid = ::OpenAPI::fromJsonValue(m_week, json[QString("week")]);
    m_week_isSet = !json[QString("week")].isNull() && m_week_isValid;
}

QString OAIGameMedia::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGameMedia::asJsonObject() const {
    QJsonObject obj;
    if (m_away_conference_isSet) {
        obj.insert(QString("awayConference"), ::OpenAPI::toJsonValue(m_away_conference));
    }
    if (m_away_team_isSet) {
        obj.insert(QString("awayTeam"), ::OpenAPI::toJsonValue(m_away_team));
    }
    if (m_home_conference_isSet) {
        obj.insert(QString("homeConference"), ::OpenAPI::toJsonValue(m_home_conference));
    }
    if (m_home_team_isSet) {
        obj.insert(QString("homeTeam"), ::OpenAPI::toJsonValue(m_home_team));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_start_time_tbd_isSet) {
        obj.insert(QString("isStartTimeTBD"), ::OpenAPI::toJsonValue(m_is_start_time_tbd));
    }
    if (m_media_type_isSet) {
        obj.insert(QString("mediaType"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_outlet_isSet) {
        obj.insert(QString("outlet"), ::OpenAPI::toJsonValue(m_outlet));
    }
    if (m_season_isSet) {
        obj.insert(QString("season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_season_type_isSet) {
        obj.insert(QString("seasonType"), ::OpenAPI::toJsonValue(m_season_type));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_week_isSet) {
        obj.insert(QString("week"), ::OpenAPI::toJsonValue(m_week));
    }
    return obj;
}

QString OAIGameMedia::getAwayConference() const {
    return m_away_conference;
}
void OAIGameMedia::setAwayConference(const QString &away_conference) {
    m_away_conference = away_conference;
    m_away_conference_isSet = true;
}

bool OAIGameMedia::is_away_conference_Set() const{
    return m_away_conference_isSet;
}

bool OAIGameMedia::is_away_conference_Valid() const{
    return m_away_conference_isValid;
}

QString OAIGameMedia::getAwayTeam() const {
    return m_away_team;
}
void OAIGameMedia::setAwayTeam(const QString &away_team) {
    m_away_team = away_team;
    m_away_team_isSet = true;
}

bool OAIGameMedia::is_away_team_Set() const{
    return m_away_team_isSet;
}

bool OAIGameMedia::is_away_team_Valid() const{
    return m_away_team_isValid;
}

QString OAIGameMedia::getHomeConference() const {
    return m_home_conference;
}
void OAIGameMedia::setHomeConference(const QString &home_conference) {
    m_home_conference = home_conference;
    m_home_conference_isSet = true;
}

bool OAIGameMedia::is_home_conference_Set() const{
    return m_home_conference_isSet;
}

bool OAIGameMedia::is_home_conference_Valid() const{
    return m_home_conference_isValid;
}

QString OAIGameMedia::getHomeTeam() const {
    return m_home_team;
}
void OAIGameMedia::setHomeTeam(const QString &home_team) {
    m_home_team = home_team;
    m_home_team_isSet = true;
}

bool OAIGameMedia::is_home_team_Set() const{
    return m_home_team_isSet;
}

bool OAIGameMedia::is_home_team_Valid() const{
    return m_home_team_isValid;
}

qint32 OAIGameMedia::getId() const {
    return m_id;
}
void OAIGameMedia::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGameMedia::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGameMedia::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIGameMedia::isIsStartTimeTbd() const {
    return m_is_start_time_tbd;
}
void OAIGameMedia::setIsStartTimeTbd(const bool &is_start_time_tbd) {
    m_is_start_time_tbd = is_start_time_tbd;
    m_is_start_time_tbd_isSet = true;
}

bool OAIGameMedia::is_is_start_time_tbd_Set() const{
    return m_is_start_time_tbd_isSet;
}

bool OAIGameMedia::is_is_start_time_tbd_Valid() const{
    return m_is_start_time_tbd_isValid;
}

QString OAIGameMedia::getMediaType() const {
    return m_media_type;
}
void OAIGameMedia::setMediaType(const QString &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAIGameMedia::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAIGameMedia::is_media_type_Valid() const{
    return m_media_type_isValid;
}

QString OAIGameMedia::getOutlet() const {
    return m_outlet;
}
void OAIGameMedia::setOutlet(const QString &outlet) {
    m_outlet = outlet;
    m_outlet_isSet = true;
}

bool OAIGameMedia::is_outlet_Set() const{
    return m_outlet_isSet;
}

bool OAIGameMedia::is_outlet_Valid() const{
    return m_outlet_isValid;
}

qint32 OAIGameMedia::getSeason() const {
    return m_season;
}
void OAIGameMedia::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIGameMedia::is_season_Set() const{
    return m_season_isSet;
}

bool OAIGameMedia::is_season_Valid() const{
    return m_season_isValid;
}

QString OAIGameMedia::getSeasonType() const {
    return m_season_type;
}
void OAIGameMedia::setSeasonType(const QString &season_type) {
    m_season_type = season_type;
    m_season_type_isSet = true;
}

bool OAIGameMedia::is_season_type_Set() const{
    return m_season_type_isSet;
}

bool OAIGameMedia::is_season_type_Valid() const{
    return m_season_type_isValid;
}

QString OAIGameMedia::getStartTime() const {
    return m_start_time;
}
void OAIGameMedia::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGameMedia::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGameMedia::is_start_time_Valid() const{
    return m_start_time_isValid;
}

qint32 OAIGameMedia::getWeek() const {
    return m_week;
}
void OAIGameMedia::setWeek(const qint32 &week) {
    m_week = week;
    m_week_isSet = true;
}

bool OAIGameMedia::is_week_Set() const{
    return m_week_isSet;
}

bool OAIGameMedia::is_week_Valid() const{
    return m_week_isValid;
}

bool OAIGameMedia::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_away_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_start_time_tbd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGameMedia::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
