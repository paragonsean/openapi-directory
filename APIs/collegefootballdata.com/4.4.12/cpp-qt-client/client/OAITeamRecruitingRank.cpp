/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamRecruitingRank.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamRecruitingRank::OAITeamRecruitingRank(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamRecruitingRank::OAITeamRecruitingRank() {
    this->initializeModel();
}

OAITeamRecruitingRank::~OAITeamRecruitingRank() {}

void OAITeamRecruitingRank::initializeModel() {

    m_points_isSet = false;
    m_points_isValid = false;

    m_rank_isSet = false;
    m_rank_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAITeamRecruitingRank::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamRecruitingRank::fromJsonObject(QJsonObject json) {

    m_points_isValid = ::OpenAPI::fromJsonValue(m_points, json[QString("points")]);
    m_points_isSet = !json[QString("points")].isNull() && m_points_isValid;

    m_rank_isValid = ::OpenAPI::fromJsonValue(m_rank, json[QString("rank")]);
    m_rank_isSet = !json[QString("rank")].isNull() && m_rank_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAITeamRecruitingRank::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamRecruitingRank::asJsonObject() const {
    QJsonObject obj;
    if (m_points_isSet) {
        obj.insert(QString("points"), ::OpenAPI::toJsonValue(m_points));
    }
    if (m_rank_isSet) {
        obj.insert(QString("rank"), ::OpenAPI::toJsonValue(m_rank));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

double OAITeamRecruitingRank::getPoints() const {
    return m_points;
}
void OAITeamRecruitingRank::setPoints(const double &points) {
    m_points = points;
    m_points_isSet = true;
}

bool OAITeamRecruitingRank::is_points_Set() const{
    return m_points_isSet;
}

bool OAITeamRecruitingRank::is_points_Valid() const{
    return m_points_isValid;
}

qint32 OAITeamRecruitingRank::getRank() const {
    return m_rank;
}
void OAITeamRecruitingRank::setRank(const qint32 &rank) {
    m_rank = rank;
    m_rank_isSet = true;
}

bool OAITeamRecruitingRank::is_rank_Set() const{
    return m_rank_isSet;
}

bool OAITeamRecruitingRank::is_rank_Valid() const{
    return m_rank_isValid;
}

QString OAITeamRecruitingRank::getTeam() const {
    return m_team;
}
void OAITeamRecruitingRank::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAITeamRecruitingRank::is_team_Set() const{
    return m_team_isSet;
}

bool OAITeamRecruitingRank::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAITeamRecruitingRank::getYear() const {
    return m_year;
}
void OAITeamRecruitingRank::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAITeamRecruitingRank::is_year_Set() const{
    return m_year_isSet;
}

bool OAITeamRecruitingRank::is_year_Valid() const{
    return m_year_isValid;
}

bool OAITeamRecruitingRank::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamRecruitingRank::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
