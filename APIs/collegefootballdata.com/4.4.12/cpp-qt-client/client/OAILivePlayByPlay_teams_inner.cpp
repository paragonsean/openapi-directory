/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILivePlayByPlay_teams_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILivePlayByPlay_teams_inner::OAILivePlayByPlay_teams_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILivePlayByPlay_teams_inner::OAILivePlayByPlay_teams_inner() {
    this->initializeModel();
}

OAILivePlayByPlay_teams_inner::~OAILivePlayByPlay_teams_inner() {}

void OAILivePlayByPlay_teams_inner::initializeModel() {

    m_drives_isSet = false;
    m_drives_isValid = false;

    m_epa_per_pass_isSet = false;
    m_epa_per_pass_isValid = false;

    m_epa_per_play_isSet = false;
    m_epa_per_play_isValid = false;

    m_epa_per_rush_isSet = false;
    m_epa_per_rush_isValid = false;

    m_explosiveness_isSet = false;
    m_explosiveness_isValid = false;

    m_home_away_isSet = false;
    m_home_away_isValid = false;

    m_line_yards_isSet = false;
    m_line_yards_isValid = false;

    m_line_yards_per_rush_isSet = false;
    m_line_yards_per_rush_isValid = false;

    m_open_field_yards_isSet = false;
    m_open_field_yards_isValid = false;

    m_open_field_yards_per_rush_isSet = false;
    m_open_field_yards_per_rush_isValid = false;

    m_passing_down_success_rate_isSet = false;
    m_passing_down_success_rate_isValid = false;

    m_passing_epa_isSet = false;
    m_passing_epa_isValid = false;

    m_plays_isSet = false;
    m_plays_isValid = false;

    m_points_isSet = false;
    m_points_isValid = false;

    m_points_per_opportunity_isSet = false;
    m_points_per_opportunity_isValid = false;

    m_rushing_epa_isSet = false;
    m_rushing_epa_isValid = false;

    m_scoring_opportunities_isSet = false;
    m_scoring_opportunities_isValid = false;

    m_second_level_yards_isSet = false;
    m_second_level_yards_isValid = false;

    m_second_level_yards_per_rush_isSet = false;
    m_second_level_yards_per_rush_isValid = false;

    m_standard_down_success_rate_isSet = false;
    m_standard_down_success_rate_isValid = false;

    m_success_rate_isSet = false;
    m_success_rate_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_total_epa_isSet = false;
    m_total_epa_isValid = false;
}

void OAILivePlayByPlay_teams_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILivePlayByPlay_teams_inner::fromJsonObject(QJsonObject json) {

    m_drives_isValid = ::OpenAPI::fromJsonValue(m_drives, json[QString("drives")]);
    m_drives_isSet = !json[QString("drives")].isNull() && m_drives_isValid;

    m_epa_per_pass_isValid = ::OpenAPI::fromJsonValue(m_epa_per_pass, json[QString("epaPerPass")]);
    m_epa_per_pass_isSet = !json[QString("epaPerPass")].isNull() && m_epa_per_pass_isValid;

    m_epa_per_play_isValid = ::OpenAPI::fromJsonValue(m_epa_per_play, json[QString("epaPerPlay")]);
    m_epa_per_play_isSet = !json[QString("epaPerPlay")].isNull() && m_epa_per_play_isValid;

    m_epa_per_rush_isValid = ::OpenAPI::fromJsonValue(m_epa_per_rush, json[QString("epaPerRush")]);
    m_epa_per_rush_isSet = !json[QString("epaPerRush")].isNull() && m_epa_per_rush_isValid;

    m_explosiveness_isValid = ::OpenAPI::fromJsonValue(m_explosiveness, json[QString("explosiveness")]);
    m_explosiveness_isSet = !json[QString("explosiveness")].isNull() && m_explosiveness_isValid;

    m_home_away_isValid = ::OpenAPI::fromJsonValue(m_home_away, json[QString("homeAway")]);
    m_home_away_isSet = !json[QString("homeAway")].isNull() && m_home_away_isValid;

    m_line_yards_isValid = ::OpenAPI::fromJsonValue(m_line_yards, json[QString("lineYards")]);
    m_line_yards_isSet = !json[QString("lineYards")].isNull() && m_line_yards_isValid;

    m_line_yards_per_rush_isValid = ::OpenAPI::fromJsonValue(m_line_yards_per_rush, json[QString("lineYardsPerRush")]);
    m_line_yards_per_rush_isSet = !json[QString("lineYardsPerRush")].isNull() && m_line_yards_per_rush_isValid;

    m_open_field_yards_isValid = ::OpenAPI::fromJsonValue(m_open_field_yards, json[QString("openFieldYards")]);
    m_open_field_yards_isSet = !json[QString("openFieldYards")].isNull() && m_open_field_yards_isValid;

    m_open_field_yards_per_rush_isValid = ::OpenAPI::fromJsonValue(m_open_field_yards_per_rush, json[QString("openFieldYardsPerRush")]);
    m_open_field_yards_per_rush_isSet = !json[QString("openFieldYardsPerRush")].isNull() && m_open_field_yards_per_rush_isValid;

    m_passing_down_success_rate_isValid = ::OpenAPI::fromJsonValue(m_passing_down_success_rate, json[QString("passingDownSuccessRate")]);
    m_passing_down_success_rate_isSet = !json[QString("passingDownSuccessRate")].isNull() && m_passing_down_success_rate_isValid;

    m_passing_epa_isValid = ::OpenAPI::fromJsonValue(m_passing_epa, json[QString("passingEpa")]);
    m_passing_epa_isSet = !json[QString("passingEpa")].isNull() && m_passing_epa_isValid;

    m_plays_isValid = ::OpenAPI::fromJsonValue(m_plays, json[QString("plays")]);
    m_plays_isSet = !json[QString("plays")].isNull() && m_plays_isValid;

    m_points_isValid = ::OpenAPI::fromJsonValue(m_points, json[QString("points")]);
    m_points_isSet = !json[QString("points")].isNull() && m_points_isValid;

    m_points_per_opportunity_isValid = ::OpenAPI::fromJsonValue(m_points_per_opportunity, json[QString("pointsPerOpportunity")]);
    m_points_per_opportunity_isSet = !json[QString("pointsPerOpportunity")].isNull() && m_points_per_opportunity_isValid;

    m_rushing_epa_isValid = ::OpenAPI::fromJsonValue(m_rushing_epa, json[QString("rushingEpa")]);
    m_rushing_epa_isSet = !json[QString("rushingEpa")].isNull() && m_rushing_epa_isValid;

    m_scoring_opportunities_isValid = ::OpenAPI::fromJsonValue(m_scoring_opportunities, json[QString("scoringOpportunities")]);
    m_scoring_opportunities_isSet = !json[QString("scoringOpportunities")].isNull() && m_scoring_opportunities_isValid;

    m_second_level_yards_isValid = ::OpenAPI::fromJsonValue(m_second_level_yards, json[QString("secondLevelYards")]);
    m_second_level_yards_isSet = !json[QString("secondLevelYards")].isNull() && m_second_level_yards_isValid;

    m_second_level_yards_per_rush_isValid = ::OpenAPI::fromJsonValue(m_second_level_yards_per_rush, json[QString("secondLevelYardsPerRush")]);
    m_second_level_yards_per_rush_isSet = !json[QString("secondLevelYardsPerRush")].isNull() && m_second_level_yards_per_rush_isValid;

    m_standard_down_success_rate_isValid = ::OpenAPI::fromJsonValue(m_standard_down_success_rate, json[QString("standardDownSuccessRate")]);
    m_standard_down_success_rate_isSet = !json[QString("standardDownSuccessRate")].isNull() && m_standard_down_success_rate_isValid;

    m_success_rate_isValid = ::OpenAPI::fromJsonValue(m_success_rate, json[QString("successRate")]);
    m_success_rate_isSet = !json[QString("successRate")].isNull() && m_success_rate_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("teamId")]);
    m_team_id_isSet = !json[QString("teamId")].isNull() && m_team_id_isValid;

    m_total_epa_isValid = ::OpenAPI::fromJsonValue(m_total_epa, json[QString("totalEpa")]);
    m_total_epa_isSet = !json[QString("totalEpa")].isNull() && m_total_epa_isValid;
}

QString OAILivePlayByPlay_teams_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILivePlayByPlay_teams_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_drives_isSet) {
        obj.insert(QString("drives"), ::OpenAPI::toJsonValue(m_drives));
    }
    if (m_epa_per_pass_isSet) {
        obj.insert(QString("epaPerPass"), ::OpenAPI::toJsonValue(m_epa_per_pass));
    }
    if (m_epa_per_play_isSet) {
        obj.insert(QString("epaPerPlay"), ::OpenAPI::toJsonValue(m_epa_per_play));
    }
    if (m_epa_per_rush_isSet) {
        obj.insert(QString("epaPerRush"), ::OpenAPI::toJsonValue(m_epa_per_rush));
    }
    if (m_explosiveness_isSet) {
        obj.insert(QString("explosiveness"), ::OpenAPI::toJsonValue(m_explosiveness));
    }
    if (m_home_away_isSet) {
        obj.insert(QString("homeAway"), ::OpenAPI::toJsonValue(m_home_away));
    }
    if (m_line_yards_isSet) {
        obj.insert(QString("lineYards"), ::OpenAPI::toJsonValue(m_line_yards));
    }
    if (m_line_yards_per_rush_isSet) {
        obj.insert(QString("lineYardsPerRush"), ::OpenAPI::toJsonValue(m_line_yards_per_rush));
    }
    if (m_open_field_yards_isSet) {
        obj.insert(QString("openFieldYards"), ::OpenAPI::toJsonValue(m_open_field_yards));
    }
    if (m_open_field_yards_per_rush_isSet) {
        obj.insert(QString("openFieldYardsPerRush"), ::OpenAPI::toJsonValue(m_open_field_yards_per_rush));
    }
    if (m_passing_down_success_rate_isSet) {
        obj.insert(QString("passingDownSuccessRate"), ::OpenAPI::toJsonValue(m_passing_down_success_rate));
    }
    if (m_passing_epa_isSet) {
        obj.insert(QString("passingEpa"), ::OpenAPI::toJsonValue(m_passing_epa));
    }
    if (m_plays_isSet) {
        obj.insert(QString("plays"), ::OpenAPI::toJsonValue(m_plays));
    }
    if (m_points_isSet) {
        obj.insert(QString("points"), ::OpenAPI::toJsonValue(m_points));
    }
    if (m_points_per_opportunity_isSet) {
        obj.insert(QString("pointsPerOpportunity"), ::OpenAPI::toJsonValue(m_points_per_opportunity));
    }
    if (m_rushing_epa_isSet) {
        obj.insert(QString("rushingEpa"), ::OpenAPI::toJsonValue(m_rushing_epa));
    }
    if (m_scoring_opportunities_isSet) {
        obj.insert(QString("scoringOpportunities"), ::OpenAPI::toJsonValue(m_scoring_opportunities));
    }
    if (m_second_level_yards_isSet) {
        obj.insert(QString("secondLevelYards"), ::OpenAPI::toJsonValue(m_second_level_yards));
    }
    if (m_second_level_yards_per_rush_isSet) {
        obj.insert(QString("secondLevelYardsPerRush"), ::OpenAPI::toJsonValue(m_second_level_yards_per_rush));
    }
    if (m_standard_down_success_rate_isSet) {
        obj.insert(QString("standardDownSuccessRate"), ::OpenAPI::toJsonValue(m_standard_down_success_rate));
    }
    if (m_success_rate_isSet) {
        obj.insert(QString("successRate"), ::OpenAPI::toJsonValue(m_success_rate));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("teamId"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_total_epa_isSet) {
        obj.insert(QString("totalEpa"), ::OpenAPI::toJsonValue(m_total_epa));
    }
    return obj;
}

qint32 OAILivePlayByPlay_teams_inner::getDrives() const {
    return m_drives;
}
void OAILivePlayByPlay_teams_inner::setDrives(const qint32 &drives) {
    m_drives = drives;
    m_drives_isSet = true;
}

bool OAILivePlayByPlay_teams_inner::is_drives_Set() const{
    return m_drives_isSet;
}

bool OAILivePlayByPlay_teams_inner::is_drives_Valid() const{
    return m_drives_isValid;
}

double OAILivePlayByPlay_teams_inner::getEpaPerPass() const {
    return m_epa_per_pass;
}
void OAILivePlayByPlay_teams_inner::setEpaPerPass(const double &epa_per_pass) {
    m_epa_per_pass = epa_per_pass;
    m_epa_per_pass_isSet = true;
}

bool OAILivePlayByPlay_teams_inner::is_epa_per_pass_Set() const{
    return m_epa_per_pass_isSet;
}

bool OAILivePlayByPlay_teams_inner::is_epa_per_pass_Valid() const{
    return m_epa_per_pass_isValid;
}

double OAILivePlayByPlay_teams_inner::getEpaPerPlay() const {
    return m_epa_per_play;
}
void OAILivePlayByPlay_teams_inner::setEpaPerPlay(const double &epa_per_play) {
    m_epa_per_play = epa_per_play;
    m_epa_per_play_isSet = true;
}

bool OAILivePlayByPlay_teams_inner::is_epa_per_play_Set() const{
    return m_epa_per_play_isSet;
}

bool OAILivePlayByPlay_teams_inner::is_epa_per_play_Valid() const{
    return m_epa_per_play_isValid;
}

double OAILivePlayByPlay_teams_inner::getEpaPerRush() const {
    return m_epa_per_rush;
}
void OAILivePlayByPlay_teams_inner::setEpaPerRush(const double &epa_per_rush) {
    m_epa_per_rush = epa_per_rush;
    m_epa_per_rush_isSet = true;
}

bool OAILivePlayByPlay_teams_inner::is_epa_per_rush_Set() const{
    return m_epa_per_rush_isSet;
}

bool OAILivePlayByPlay_teams_inner::is_epa_per_rush_Valid() const{
    return m_epa_per_rush_isValid;
}

double OAILivePlayByPlay_teams_inner::getExplosiveness() const {
    return m_explosiveness;
}
void OAILivePlayByPlay_teams_inner::setExplosiveness(const double &explosiveness) {
    m_explosiveness = explosiveness;
    m_explosiveness_isSet = true;
}

bool OAILivePlayByPlay_teams_inner::is_explosiveness_Set() const{
    return m_explosiveness_isSet;
}

bool OAILivePlayByPlay_teams_inner::is_explosiveness_Valid() const{
    return m_explosiveness_isValid;
}

QString OAILivePlayByPlay_teams_inner::getHomeAway() const {
    return m_home_away;
}
void OAILivePlayByPlay_teams_inner::setHomeAway(const QString &home_away) {
    m_home_away = home_away;
    m_home_away_isSet = true;
}

bool OAILivePlayByPlay_teams_inner::is_home_away_Set() const{
    return m_home_away_isSet;
}

bool OAILivePlayByPlay_teams_inner::is_home_away_Valid() const{
    return m_home_away_isValid;
}

qint32 OAILivePlayByPlay_teams_inner::getLineYards() const {
    return m_line_yards;
}
void OAILivePlayByPlay_teams_inner::setLineYards(const qint32 &line_yards) {
    m_line_yards = line_yards;
    m_line_yards_isSet = true;
}

bool OAILivePlayByPlay_teams_inner::is_line_yards_Set() const{
    return m_line_yards_isSet;
}

bool OAILivePlayByPlay_teams_inner::is_line_yards_Valid() const{
    return m_line_yards_isValid;
}

double OAILivePlayByPlay_teams_inner::getLineYardsPerRush() const {
    return m_line_yards_per_rush;
}
void OAILivePlayByPlay_teams_inner::setLineYardsPerRush(const double &line_yards_per_rush) {
    m_line_yards_per_rush = line_yards_per_rush;
    m_line_yards_per_rush_isSet = true;
}

bool OAILivePlayByPlay_teams_inner::is_line_yards_per_rush_Set() const{
    return m_line_yards_per_rush_isSet;
}

bool OAILivePlayByPlay_teams_inner::is_line_yards_per_rush_Valid() const{
    return m_line_yards_per_rush_isValid;
}

qint32 OAILivePlayByPlay_teams_inner::getOpenFieldYards() const {
    return m_open_field_yards;
}
void OAILivePlayByPlay_teams_inner::setOpenFieldYards(const qint32 &open_field_yards) {
    m_open_field_yards = open_field_yards;
    m_open_field_yards_isSet = true;
}

bool OAILivePlayByPlay_teams_inner::is_open_field_yards_Set() const{
    return m_open_field_yards_isSet;
}

bool OAILivePlayByPlay_teams_inner::is_open_field_yards_Valid() const{
    return m_open_field_yards_isValid;
}

double OAILivePlayByPlay_teams_inner::getOpenFieldYardsPerRush() const {
    return m_open_field_yards_per_rush;
}
void OAILivePlayByPlay_teams_inner::setOpenFieldYardsPerRush(const double &open_field_yards_per_rush) {
    m_open_field_yards_per_rush = open_field_yards_per_rush;
    m_open_field_yards_per_rush_isSet = true;
}

bool OAILivePlayByPlay_teams_inner::is_open_field_yards_per_rush_Set() const{
    return m_open_field_yards_per_rush_isSet;
}

bool OAILivePlayByPlay_teams_inner::is_open_field_yards_per_rush_Valid() const{
    return m_open_field_yards_per_rush_isValid;
}

double OAILivePlayByPlay_teams_inner::getPassingDownSuccessRate() const {
    return m_passing_down_success_rate;
}
void OAILivePlayByPlay_teams_inner::setPassingDownSuccessRate(const double &passing_down_success_rate) {
    m_passing_down_success_rate = passing_down_success_rate;
    m_passing_down_success_rate_isSet = true;
}

bool OAILivePlayByPlay_teams_inner::is_passing_down_success_rate_Set() const{
    return m_passing_down_success_rate_isSet;
}

bool OAILivePlayByPlay_teams_inner::is_passing_down_success_rate_Valid() const{
    return m_passing_down_success_rate_isValid;
}

double OAILivePlayByPlay_teams_inner::getPassingEpa() const {
    return m_passing_epa;
}
void OAILivePlayByPlay_teams_inner::setPassingEpa(const double &passing_epa) {
    m_passing_epa = passing_epa;
    m_passing_epa_isSet = true;
}

bool OAILivePlayByPlay_teams_inner::is_passing_epa_Set() const{
    return m_passing_epa_isSet;
}

bool OAILivePlayByPlay_teams_inner::is_passing_epa_Valid() const{
    return m_passing_epa_isValid;
}

qint32 OAILivePlayByPlay_teams_inner::getPlays() const {
    return m_plays;
}
void OAILivePlayByPlay_teams_inner::setPlays(const qint32 &plays) {
    m_plays = plays;
    m_plays_isSet = true;
}

bool OAILivePlayByPlay_teams_inner::is_plays_Set() const{
    return m_plays_isSet;
}

bool OAILivePlayByPlay_teams_inner::is_plays_Valid() const{
    return m_plays_isValid;
}

qint32 OAILivePlayByPlay_teams_inner::getPoints() const {
    return m_points;
}
void OAILivePlayByPlay_teams_inner::setPoints(const qint32 &points) {
    m_points = points;
    m_points_isSet = true;
}

bool OAILivePlayByPlay_teams_inner::is_points_Set() const{
    return m_points_isSet;
}

bool OAILivePlayByPlay_teams_inner::is_points_Valid() const{
    return m_points_isValid;
}

double OAILivePlayByPlay_teams_inner::getPointsPerOpportunity() const {
    return m_points_per_opportunity;
}
void OAILivePlayByPlay_teams_inner::setPointsPerOpportunity(const double &points_per_opportunity) {
    m_points_per_opportunity = points_per_opportunity;
    m_points_per_opportunity_isSet = true;
}

bool OAILivePlayByPlay_teams_inner::is_points_per_opportunity_Set() const{
    return m_points_per_opportunity_isSet;
}

bool OAILivePlayByPlay_teams_inner::is_points_per_opportunity_Valid() const{
    return m_points_per_opportunity_isValid;
}

double OAILivePlayByPlay_teams_inner::getRushingEpa() const {
    return m_rushing_epa;
}
void OAILivePlayByPlay_teams_inner::setRushingEpa(const double &rushing_epa) {
    m_rushing_epa = rushing_epa;
    m_rushing_epa_isSet = true;
}

bool OAILivePlayByPlay_teams_inner::is_rushing_epa_Set() const{
    return m_rushing_epa_isSet;
}

bool OAILivePlayByPlay_teams_inner::is_rushing_epa_Valid() const{
    return m_rushing_epa_isValid;
}

qint32 OAILivePlayByPlay_teams_inner::getScoringOpportunities() const {
    return m_scoring_opportunities;
}
void OAILivePlayByPlay_teams_inner::setScoringOpportunities(const qint32 &scoring_opportunities) {
    m_scoring_opportunities = scoring_opportunities;
    m_scoring_opportunities_isSet = true;
}

bool OAILivePlayByPlay_teams_inner::is_scoring_opportunities_Set() const{
    return m_scoring_opportunities_isSet;
}

bool OAILivePlayByPlay_teams_inner::is_scoring_opportunities_Valid() const{
    return m_scoring_opportunities_isValid;
}

qint32 OAILivePlayByPlay_teams_inner::getSecondLevelYards() const {
    return m_second_level_yards;
}
void OAILivePlayByPlay_teams_inner::setSecondLevelYards(const qint32 &second_level_yards) {
    m_second_level_yards = second_level_yards;
    m_second_level_yards_isSet = true;
}

bool OAILivePlayByPlay_teams_inner::is_second_level_yards_Set() const{
    return m_second_level_yards_isSet;
}

bool OAILivePlayByPlay_teams_inner::is_second_level_yards_Valid() const{
    return m_second_level_yards_isValid;
}

double OAILivePlayByPlay_teams_inner::getSecondLevelYardsPerRush() const {
    return m_second_level_yards_per_rush;
}
void OAILivePlayByPlay_teams_inner::setSecondLevelYardsPerRush(const double &second_level_yards_per_rush) {
    m_second_level_yards_per_rush = second_level_yards_per_rush;
    m_second_level_yards_per_rush_isSet = true;
}

bool OAILivePlayByPlay_teams_inner::is_second_level_yards_per_rush_Set() const{
    return m_second_level_yards_per_rush_isSet;
}

bool OAILivePlayByPlay_teams_inner::is_second_level_yards_per_rush_Valid() const{
    return m_second_level_yards_per_rush_isValid;
}

double OAILivePlayByPlay_teams_inner::getStandardDownSuccessRate() const {
    return m_standard_down_success_rate;
}
void OAILivePlayByPlay_teams_inner::setStandardDownSuccessRate(const double &standard_down_success_rate) {
    m_standard_down_success_rate = standard_down_success_rate;
    m_standard_down_success_rate_isSet = true;
}

bool OAILivePlayByPlay_teams_inner::is_standard_down_success_rate_Set() const{
    return m_standard_down_success_rate_isSet;
}

bool OAILivePlayByPlay_teams_inner::is_standard_down_success_rate_Valid() const{
    return m_standard_down_success_rate_isValid;
}

double OAILivePlayByPlay_teams_inner::getSuccessRate() const {
    return m_success_rate;
}
void OAILivePlayByPlay_teams_inner::setSuccessRate(const double &success_rate) {
    m_success_rate = success_rate;
    m_success_rate_isSet = true;
}

bool OAILivePlayByPlay_teams_inner::is_success_rate_Set() const{
    return m_success_rate_isSet;
}

bool OAILivePlayByPlay_teams_inner::is_success_rate_Valid() const{
    return m_success_rate_isValid;
}

QString OAILivePlayByPlay_teams_inner::getTeam() const {
    return m_team;
}
void OAILivePlayByPlay_teams_inner::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAILivePlayByPlay_teams_inner::is_team_Set() const{
    return m_team_isSet;
}

bool OAILivePlayByPlay_teams_inner::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAILivePlayByPlay_teams_inner::getTeamId() const {
    return m_team_id;
}
void OAILivePlayByPlay_teams_inner::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAILivePlayByPlay_teams_inner::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAILivePlayByPlay_teams_inner::is_team_id_Valid() const{
    return m_team_id_isValid;
}

double OAILivePlayByPlay_teams_inner::getTotalEpa() const {
    return m_total_epa;
}
void OAILivePlayByPlay_teams_inner::setTotalEpa(const double &total_epa) {
    m_total_epa = total_epa;
    m_total_epa_isSet = true;
}

bool OAILivePlayByPlay_teams_inner::is_total_epa_Set() const{
    return m_total_epa_isSet;
}

bool OAILivePlayByPlay_teams_inner::is_total_epa_Valid() const{
    return m_total_epa_isValid;
}

bool OAILivePlayByPlay_teams_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_drives_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epa_per_pass_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epa_per_play_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epa_per_rush_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_explosiveness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_away_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_yards_per_rush_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_field_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_field_yards_per_rush_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_down_success_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_epa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plays_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_per_opportunity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rushing_epa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scoring_opportunities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_second_level_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_second_level_yards_per_rush_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_down_success_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_epa_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILivePlayByPlay_teams_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
