/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGame.h
 *
 * 
 */

#ifndef OAIGame_H
#define OAIGame_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGame : public OAIObject {
public:
    OAIGame();
    OAIGame(QString json);
    ~OAIGame() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAttendance() const;
    void setAttendance(const qint32 &attendance);
    bool is_attendance_Set() const;
    bool is_attendance_Valid() const;

    QString getAwayConference() const;
    void setAwayConference(const QString &away_conference);
    bool is_away_conference_Set() const;
    bool is_away_conference_Valid() const;

    QString getAwayDivision() const;
    void setAwayDivision(const QString &away_division);
    bool is_away_division_Set() const;
    bool is_away_division_Valid() const;

    qint32 getAwayId() const;
    void setAwayId(const qint32 &away_id);
    bool is_away_id_Set() const;
    bool is_away_id_Valid() const;

    QList<qint32> getAwayLineScores() const;
    void setAwayLineScores(const QList<qint32> &away_line_scores);
    bool is_away_line_scores_Set() const;
    bool is_away_line_scores_Valid() const;

    qint32 getAwayPoints() const;
    void setAwayPoints(const qint32 &away_points);
    bool is_away_points_Set() const;
    bool is_away_points_Valid() const;

    double getAwayPostWinProb() const;
    void setAwayPostWinProb(const double &away_post_win_prob);
    bool is_away_post_win_prob_Set() const;
    bool is_away_post_win_prob_Valid() const;

    qint32 getAwayPostgameElo() const;
    void setAwayPostgameElo(const qint32 &away_postgame_elo);
    bool is_away_postgame_elo_Set() const;
    bool is_away_postgame_elo_Valid() const;

    qint32 getAwayPregameElo() const;
    void setAwayPregameElo(const qint32 &away_pregame_elo);
    bool is_away_pregame_elo_Set() const;
    bool is_away_pregame_elo_Valid() const;

    QString getAwayTeam() const;
    void setAwayTeam(const QString &away_team);
    bool is_away_team_Set() const;
    bool is_away_team_Valid() const;

    bool isCompleted() const;
    void setCompleted(const bool &completed);
    bool is_completed_Set() const;
    bool is_completed_Valid() const;

    bool isConferenceGame() const;
    void setConferenceGame(const bool &conference_game);
    bool is_conference_game_Set() const;
    bool is_conference_game_Valid() const;

    double getExcitementIndex() const;
    void setExcitementIndex(const double &excitement_index);
    bool is_excitement_index_Set() const;
    bool is_excitement_index_Valid() const;

    QString getHighlights() const;
    void setHighlights(const QString &highlights);
    bool is_highlights_Set() const;
    bool is_highlights_Valid() const;

    QString getHomeConference() const;
    void setHomeConference(const QString &home_conference);
    bool is_home_conference_Set() const;
    bool is_home_conference_Valid() const;

    QString getHomeDivision() const;
    void setHomeDivision(const QString &home_division);
    bool is_home_division_Set() const;
    bool is_home_division_Valid() const;

    qint32 getHomeId() const;
    void setHomeId(const qint32 &home_id);
    bool is_home_id_Set() const;
    bool is_home_id_Valid() const;

    QList<qint32> getHomeLineScores() const;
    void setHomeLineScores(const QList<qint32> &home_line_scores);
    bool is_home_line_scores_Set() const;
    bool is_home_line_scores_Valid() const;

    qint32 getHomePoints() const;
    void setHomePoints(const qint32 &home_points);
    bool is_home_points_Set() const;
    bool is_home_points_Valid() const;

    double getHomePostWinProb() const;
    void setHomePostWinProb(const double &home_post_win_prob);
    bool is_home_post_win_prob_Set() const;
    bool is_home_post_win_prob_Valid() const;

    qint32 getHomePostgameElo() const;
    void setHomePostgameElo(const qint32 &home_postgame_elo);
    bool is_home_postgame_elo_Set() const;
    bool is_home_postgame_elo_Valid() const;

    qint32 getHomePregameElo() const;
    void setHomePregameElo(const qint32 &home_pregame_elo);
    bool is_home_pregame_elo_Set() const;
    bool is_home_pregame_elo_Valid() const;

    QString getHomeTeam() const;
    void setHomeTeam(const QString &home_team);
    bool is_home_team_Set() const;
    bool is_home_team_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isNeutralSite() const;
    void setNeutralSite(const bool &neutral_site);
    bool is_neutral_site_Set() const;
    bool is_neutral_site_Valid() const;

    QString getNotes() const;
    void setNotes(const QString &notes);
    bool is_notes_Set() const;
    bool is_notes_Valid() const;

    qint32 getSeason() const;
    void setSeason(const qint32 &season);
    bool is_season_Set() const;
    bool is_season_Valid() const;

    QString getSeasonType() const;
    void setSeasonType(const QString &season_type);
    bool is_season_type_Set() const;
    bool is_season_type_Valid() const;

    QString getStartDate() const;
    void setStartDate(const QString &start_date);
    bool is_start_date_Set() const;
    bool is_start_date_Valid() const;

    bool isStartTimeTbd() const;
    void setStartTimeTbd(const bool &start_time_tbd);
    bool is_start_time_tbd_Set() const;
    bool is_start_time_tbd_Valid() const;

    QString getVenue() const;
    void setVenue(const QString &venue);
    bool is_venue_Set() const;
    bool is_venue_Valid() const;

    qint32 getVenueId() const;
    void setVenueId(const qint32 &venue_id);
    bool is_venue_id_Set() const;
    bool is_venue_id_Valid() const;

    qint32 getWeek() const;
    void setWeek(const qint32 &week);
    bool is_week_Set() const;
    bool is_week_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_attendance;
    bool m_attendance_isSet;
    bool m_attendance_isValid;

    QString m_away_conference;
    bool m_away_conference_isSet;
    bool m_away_conference_isValid;

    QString m_away_division;
    bool m_away_division_isSet;
    bool m_away_division_isValid;

    qint32 m_away_id;
    bool m_away_id_isSet;
    bool m_away_id_isValid;

    QList<qint32> m_away_line_scores;
    bool m_away_line_scores_isSet;
    bool m_away_line_scores_isValid;

    qint32 m_away_points;
    bool m_away_points_isSet;
    bool m_away_points_isValid;

    double m_away_post_win_prob;
    bool m_away_post_win_prob_isSet;
    bool m_away_post_win_prob_isValid;

    qint32 m_away_postgame_elo;
    bool m_away_postgame_elo_isSet;
    bool m_away_postgame_elo_isValid;

    qint32 m_away_pregame_elo;
    bool m_away_pregame_elo_isSet;
    bool m_away_pregame_elo_isValid;

    QString m_away_team;
    bool m_away_team_isSet;
    bool m_away_team_isValid;

    bool m_completed;
    bool m_completed_isSet;
    bool m_completed_isValid;

    bool m_conference_game;
    bool m_conference_game_isSet;
    bool m_conference_game_isValid;

    double m_excitement_index;
    bool m_excitement_index_isSet;
    bool m_excitement_index_isValid;

    QString m_highlights;
    bool m_highlights_isSet;
    bool m_highlights_isValid;

    QString m_home_conference;
    bool m_home_conference_isSet;
    bool m_home_conference_isValid;

    QString m_home_division;
    bool m_home_division_isSet;
    bool m_home_division_isValid;

    qint32 m_home_id;
    bool m_home_id_isSet;
    bool m_home_id_isValid;

    QList<qint32> m_home_line_scores;
    bool m_home_line_scores_isSet;
    bool m_home_line_scores_isValid;

    qint32 m_home_points;
    bool m_home_points_isSet;
    bool m_home_points_isValid;

    double m_home_post_win_prob;
    bool m_home_post_win_prob_isSet;
    bool m_home_post_win_prob_isValid;

    qint32 m_home_postgame_elo;
    bool m_home_postgame_elo_isSet;
    bool m_home_postgame_elo_isValid;

    qint32 m_home_pregame_elo;
    bool m_home_pregame_elo_isSet;
    bool m_home_pregame_elo_isValid;

    QString m_home_team;
    bool m_home_team_isSet;
    bool m_home_team_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_neutral_site;
    bool m_neutral_site_isSet;
    bool m_neutral_site_isValid;

    QString m_notes;
    bool m_notes_isSet;
    bool m_notes_isValid;

    qint32 m_season;
    bool m_season_isSet;
    bool m_season_isValid;

    QString m_season_type;
    bool m_season_type_isSet;
    bool m_season_type_isValid;

    QString m_start_date;
    bool m_start_date_isSet;
    bool m_start_date_isValid;

    bool m_start_time_tbd;
    bool m_start_time_tbd_isSet;
    bool m_start_time_tbd_isValid;

    QString m_venue;
    bool m_venue_isSet;
    bool m_venue_isValid;

    qint32 m_venue_id;
    bool m_venue_id_isSet;
    bool m_venue_id_isValid;

    qint32 m_week;
    bool m_week_isSet;
    bool m_week_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGame)

#endif // OAIGame_H
