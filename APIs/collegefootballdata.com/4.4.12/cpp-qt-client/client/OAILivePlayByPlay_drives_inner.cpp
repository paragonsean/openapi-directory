/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILivePlayByPlay_drives_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILivePlayByPlay_drives_inner::OAILivePlayByPlay_drives_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILivePlayByPlay_drives_inner::OAILivePlayByPlay_drives_inner() {
    this->initializeModel();
}

OAILivePlayByPlay_drives_inner::~OAILivePlayByPlay_drives_inner() {}

void OAILivePlayByPlay_drives_inner::initializeModel() {

    m_defense_isSet = false;
    m_defense_isValid = false;

    m_defense_id_isSet = false;
    m_defense_id_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_end_clock_isSet = false;
    m_end_clock_isValid = false;

    m_end_period_isSet = false;
    m_end_period_isValid = false;

    m_end_yards_to_goal_isSet = false;
    m_end_yards_to_goal_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_offense_isSet = false;
    m_offense_isValid = false;

    m_offense_id_isSet = false;
    m_offense_id_isValid = false;

    m_play_count_isSet = false;
    m_play_count_isValid = false;

    m_plays_isSet = false;
    m_plays_isValid = false;

    m_scoring_opportunity_isSet = false;
    m_scoring_opportunity_isValid = false;

    m_start_clock_isSet = false;
    m_start_clock_isValid = false;

    m_start_period_isSet = false;
    m_start_period_isValid = false;

    m_start_yards_to_goal_isSet = false;
    m_start_yards_to_goal_isValid = false;

    m_yards_isSet = false;
    m_yards_isValid = false;
}

void OAILivePlayByPlay_drives_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILivePlayByPlay_drives_inner::fromJsonObject(QJsonObject json) {

    m_defense_isValid = ::OpenAPI::fromJsonValue(m_defense, json[QString("defense")]);
    m_defense_isSet = !json[QString("defense")].isNull() && m_defense_isValid;

    m_defense_id_isValid = ::OpenAPI::fromJsonValue(m_defense_id, json[QString("defenseId")]);
    m_defense_id_isSet = !json[QString("defenseId")].isNull() && m_defense_id_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_end_clock_isValid = ::OpenAPI::fromJsonValue(m_end_clock, json[QString("endClock")]);
    m_end_clock_isSet = !json[QString("endClock")].isNull() && m_end_clock_isValid;

    m_end_period_isValid = ::OpenAPI::fromJsonValue(m_end_period, json[QString("endPeriod")]);
    m_end_period_isSet = !json[QString("endPeriod")].isNull() && m_end_period_isValid;

    m_end_yards_to_goal_isValid = ::OpenAPI::fromJsonValue(m_end_yards_to_goal, json[QString("endYardsToGoal")]);
    m_end_yards_to_goal_isSet = !json[QString("endYardsToGoal")].isNull() && m_end_yards_to_goal_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_offense_isValid = ::OpenAPI::fromJsonValue(m_offense, json[QString("offense")]);
    m_offense_isSet = !json[QString("offense")].isNull() && m_offense_isValid;

    m_offense_id_isValid = ::OpenAPI::fromJsonValue(m_offense_id, json[QString("offenseId")]);
    m_offense_id_isSet = !json[QString("offenseId")].isNull() && m_offense_id_isValid;

    m_play_count_isValid = ::OpenAPI::fromJsonValue(m_play_count, json[QString("playCount")]);
    m_play_count_isSet = !json[QString("playCount")].isNull() && m_play_count_isValid;

    m_plays_isValid = ::OpenAPI::fromJsonValue(m_plays, json[QString("plays")]);
    m_plays_isSet = !json[QString("plays")].isNull() && m_plays_isValid;

    m_scoring_opportunity_isValid = ::OpenAPI::fromJsonValue(m_scoring_opportunity, json[QString("scoringOpportunity")]);
    m_scoring_opportunity_isSet = !json[QString("scoringOpportunity")].isNull() && m_scoring_opportunity_isValid;

    m_start_clock_isValid = ::OpenAPI::fromJsonValue(m_start_clock, json[QString("startClock")]);
    m_start_clock_isSet = !json[QString("startClock")].isNull() && m_start_clock_isValid;

    m_start_period_isValid = ::OpenAPI::fromJsonValue(m_start_period, json[QString("startPeriod")]);
    m_start_period_isSet = !json[QString("startPeriod")].isNull() && m_start_period_isValid;

    m_start_yards_to_goal_isValid = ::OpenAPI::fromJsonValue(m_start_yards_to_goal, json[QString("startYardsToGoal")]);
    m_start_yards_to_goal_isSet = !json[QString("startYardsToGoal")].isNull() && m_start_yards_to_goal_isValid;

    m_yards_isValid = ::OpenAPI::fromJsonValue(m_yards, json[QString("yards")]);
    m_yards_isSet = !json[QString("yards")].isNull() && m_yards_isValid;
}

QString OAILivePlayByPlay_drives_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILivePlayByPlay_drives_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_defense_isSet) {
        obj.insert(QString("defense"), ::OpenAPI::toJsonValue(m_defense));
    }
    if (m_defense_id_isSet) {
        obj.insert(QString("defenseId"), ::OpenAPI::toJsonValue(m_defense_id));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_end_clock_isSet) {
        obj.insert(QString("endClock"), ::OpenAPI::toJsonValue(m_end_clock));
    }
    if (m_end_period_isSet) {
        obj.insert(QString("endPeriod"), ::OpenAPI::toJsonValue(m_end_period));
    }
    if (m_end_yards_to_goal_isSet) {
        obj.insert(QString("endYardsToGoal"), ::OpenAPI::toJsonValue(m_end_yards_to_goal));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_offense_isSet) {
        obj.insert(QString("offense"), ::OpenAPI::toJsonValue(m_offense));
    }
    if (m_offense_id_isSet) {
        obj.insert(QString("offenseId"), ::OpenAPI::toJsonValue(m_offense_id));
    }
    if (m_play_count_isSet) {
        obj.insert(QString("playCount"), ::OpenAPI::toJsonValue(m_play_count));
    }
    if (m_plays.size() > 0) {
        obj.insert(QString("plays"), ::OpenAPI::toJsonValue(m_plays));
    }
    if (m_scoring_opportunity_isSet) {
        obj.insert(QString("scoringOpportunity"), ::OpenAPI::toJsonValue(m_scoring_opportunity));
    }
    if (m_start_clock_isSet) {
        obj.insert(QString("startClock"), ::OpenAPI::toJsonValue(m_start_clock));
    }
    if (m_start_period_isSet) {
        obj.insert(QString("startPeriod"), ::OpenAPI::toJsonValue(m_start_period));
    }
    if (m_start_yards_to_goal_isSet) {
        obj.insert(QString("startYardsToGoal"), ::OpenAPI::toJsonValue(m_start_yards_to_goal));
    }
    if (m_yards_isSet) {
        obj.insert(QString("yards"), ::OpenAPI::toJsonValue(m_yards));
    }
    return obj;
}

QString OAILivePlayByPlay_drives_inner::getDefense() const {
    return m_defense;
}
void OAILivePlayByPlay_drives_inner::setDefense(const QString &defense) {
    m_defense = defense;
    m_defense_isSet = true;
}

bool OAILivePlayByPlay_drives_inner::is_defense_Set() const{
    return m_defense_isSet;
}

bool OAILivePlayByPlay_drives_inner::is_defense_Valid() const{
    return m_defense_isValid;
}

qint32 OAILivePlayByPlay_drives_inner::getDefenseId() const {
    return m_defense_id;
}
void OAILivePlayByPlay_drives_inner::setDefenseId(const qint32 &defense_id) {
    m_defense_id = defense_id;
    m_defense_id_isSet = true;
}

bool OAILivePlayByPlay_drives_inner::is_defense_id_Set() const{
    return m_defense_id_isSet;
}

bool OAILivePlayByPlay_drives_inner::is_defense_id_Valid() const{
    return m_defense_id_isValid;
}

QString OAILivePlayByPlay_drives_inner::getDuration() const {
    return m_duration;
}
void OAILivePlayByPlay_drives_inner::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAILivePlayByPlay_drives_inner::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAILivePlayByPlay_drives_inner::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAILivePlayByPlay_drives_inner::getEndClock() const {
    return m_end_clock;
}
void OAILivePlayByPlay_drives_inner::setEndClock(const QString &end_clock) {
    m_end_clock = end_clock;
    m_end_clock_isSet = true;
}

bool OAILivePlayByPlay_drives_inner::is_end_clock_Set() const{
    return m_end_clock_isSet;
}

bool OAILivePlayByPlay_drives_inner::is_end_clock_Valid() const{
    return m_end_clock_isValid;
}

qint32 OAILivePlayByPlay_drives_inner::getEndPeriod() const {
    return m_end_period;
}
void OAILivePlayByPlay_drives_inner::setEndPeriod(const qint32 &end_period) {
    m_end_period = end_period;
    m_end_period_isSet = true;
}

bool OAILivePlayByPlay_drives_inner::is_end_period_Set() const{
    return m_end_period_isSet;
}

bool OAILivePlayByPlay_drives_inner::is_end_period_Valid() const{
    return m_end_period_isValid;
}

qint32 OAILivePlayByPlay_drives_inner::getEndYardsToGoal() const {
    return m_end_yards_to_goal;
}
void OAILivePlayByPlay_drives_inner::setEndYardsToGoal(const qint32 &end_yards_to_goal) {
    m_end_yards_to_goal = end_yards_to_goal;
    m_end_yards_to_goal_isSet = true;
}

bool OAILivePlayByPlay_drives_inner::is_end_yards_to_goal_Set() const{
    return m_end_yards_to_goal_isSet;
}

bool OAILivePlayByPlay_drives_inner::is_end_yards_to_goal_Valid() const{
    return m_end_yards_to_goal_isValid;
}

qint32 OAILivePlayByPlay_drives_inner::getId() const {
    return m_id;
}
void OAILivePlayByPlay_drives_inner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILivePlayByPlay_drives_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAILivePlayByPlay_drives_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILivePlayByPlay_drives_inner::getOffense() const {
    return m_offense;
}
void OAILivePlayByPlay_drives_inner::setOffense(const QString &offense) {
    m_offense = offense;
    m_offense_isSet = true;
}

bool OAILivePlayByPlay_drives_inner::is_offense_Set() const{
    return m_offense_isSet;
}

bool OAILivePlayByPlay_drives_inner::is_offense_Valid() const{
    return m_offense_isValid;
}

qint32 OAILivePlayByPlay_drives_inner::getOffenseId() const {
    return m_offense_id;
}
void OAILivePlayByPlay_drives_inner::setOffenseId(const qint32 &offense_id) {
    m_offense_id = offense_id;
    m_offense_id_isSet = true;
}

bool OAILivePlayByPlay_drives_inner::is_offense_id_Set() const{
    return m_offense_id_isSet;
}

bool OAILivePlayByPlay_drives_inner::is_offense_id_Valid() const{
    return m_offense_id_isValid;
}

qint32 OAILivePlayByPlay_drives_inner::getPlayCount() const {
    return m_play_count;
}
void OAILivePlayByPlay_drives_inner::setPlayCount(const qint32 &play_count) {
    m_play_count = play_count;
    m_play_count_isSet = true;
}

bool OAILivePlayByPlay_drives_inner::is_play_count_Set() const{
    return m_play_count_isSet;
}

bool OAILivePlayByPlay_drives_inner::is_play_count_Valid() const{
    return m_play_count_isValid;
}

QList<OAILivePlayByPlay_drives_inner_plays_inner> OAILivePlayByPlay_drives_inner::getPlays() const {
    return m_plays;
}
void OAILivePlayByPlay_drives_inner::setPlays(const QList<OAILivePlayByPlay_drives_inner_plays_inner> &plays) {
    m_plays = plays;
    m_plays_isSet = true;
}

bool OAILivePlayByPlay_drives_inner::is_plays_Set() const{
    return m_plays_isSet;
}

bool OAILivePlayByPlay_drives_inner::is_plays_Valid() const{
    return m_plays_isValid;
}

bool OAILivePlayByPlay_drives_inner::isScoringOpportunity() const {
    return m_scoring_opportunity;
}
void OAILivePlayByPlay_drives_inner::setScoringOpportunity(const bool &scoring_opportunity) {
    m_scoring_opportunity = scoring_opportunity;
    m_scoring_opportunity_isSet = true;
}

bool OAILivePlayByPlay_drives_inner::is_scoring_opportunity_Set() const{
    return m_scoring_opportunity_isSet;
}

bool OAILivePlayByPlay_drives_inner::is_scoring_opportunity_Valid() const{
    return m_scoring_opportunity_isValid;
}

QString OAILivePlayByPlay_drives_inner::getStartClock() const {
    return m_start_clock;
}
void OAILivePlayByPlay_drives_inner::setStartClock(const QString &start_clock) {
    m_start_clock = start_clock;
    m_start_clock_isSet = true;
}

bool OAILivePlayByPlay_drives_inner::is_start_clock_Set() const{
    return m_start_clock_isSet;
}

bool OAILivePlayByPlay_drives_inner::is_start_clock_Valid() const{
    return m_start_clock_isValid;
}

qint32 OAILivePlayByPlay_drives_inner::getStartPeriod() const {
    return m_start_period;
}
void OAILivePlayByPlay_drives_inner::setStartPeriod(const qint32 &start_period) {
    m_start_period = start_period;
    m_start_period_isSet = true;
}

bool OAILivePlayByPlay_drives_inner::is_start_period_Set() const{
    return m_start_period_isSet;
}

bool OAILivePlayByPlay_drives_inner::is_start_period_Valid() const{
    return m_start_period_isValid;
}

qint32 OAILivePlayByPlay_drives_inner::getStartYardsToGoal() const {
    return m_start_yards_to_goal;
}
void OAILivePlayByPlay_drives_inner::setStartYardsToGoal(const qint32 &start_yards_to_goal) {
    m_start_yards_to_goal = start_yards_to_goal;
    m_start_yards_to_goal_isSet = true;
}

bool OAILivePlayByPlay_drives_inner::is_start_yards_to_goal_Set() const{
    return m_start_yards_to_goal_isSet;
}

bool OAILivePlayByPlay_drives_inner::is_start_yards_to_goal_Valid() const{
    return m_start_yards_to_goal_isValid;
}

qint32 OAILivePlayByPlay_drives_inner::getYards() const {
    return m_yards;
}
void OAILivePlayByPlay_drives_inner::setYards(const qint32 &yards) {
    m_yards = yards;
    m_yards_isSet = true;
}

bool OAILivePlayByPlay_drives_inner::is_yards_Set() const{
    return m_yards_isSet;
}

bool OAILivePlayByPlay_drives_inner::is_yards_Valid() const{
    return m_yards_isValid;
}

bool OAILivePlayByPlay_drives_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_defense_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defense_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_clock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_yards_to_goal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offense_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offense_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plays.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scoring_opportunity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_clock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_yards_to_goal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yards_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILivePlayByPlay_drives_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
