/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRankingWeek.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRankingWeek::OAIRankingWeek(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRankingWeek::OAIRankingWeek() {
    this->initializeModel();
}

OAIRankingWeek::~OAIRankingWeek() {}

void OAIRankingWeek::initializeModel() {

    m_polls_isSet = false;
    m_polls_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_season_type_isSet = false;
    m_season_type_isValid = false;

    m_week_isSet = false;
    m_week_isValid = false;
}

void OAIRankingWeek::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRankingWeek::fromJsonObject(QJsonObject json) {

    m_polls_isValid = ::OpenAPI::fromJsonValue(m_polls, json[QString("polls")]);
    m_polls_isSet = !json[QString("polls")].isNull() && m_polls_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("season")]);
    m_season_isSet = !json[QString("season")].isNull() && m_season_isValid;

    m_season_type_isValid = ::OpenAPI::fromJsonValue(m_season_type, json[QString("seasonType")]);
    m_season_type_isSet = !json[QString("seasonType")].isNull() && m_season_type_isValid;

    m_week_isValid = ::OpenAPI::fromJsonValue(m_week, json[QString("week")]);
    m_week_isSet = !json[QString("week")].isNull() && m_week_isValid;
}

QString OAIRankingWeek::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRankingWeek::asJsonObject() const {
    QJsonObject obj;
    if (m_polls.size() > 0) {
        obj.insert(QString("polls"), ::OpenAPI::toJsonValue(m_polls));
    }
    if (m_season_isSet) {
        obj.insert(QString("season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_season_type_isSet) {
        obj.insert(QString("seasonType"), ::OpenAPI::toJsonValue(m_season_type));
    }
    if (m_week_isSet) {
        obj.insert(QString("week"), ::OpenAPI::toJsonValue(m_week));
    }
    return obj;
}

QList<OAIRankingWeek_polls_inner> OAIRankingWeek::getPolls() const {
    return m_polls;
}
void OAIRankingWeek::setPolls(const QList<OAIRankingWeek_polls_inner> &polls) {
    m_polls = polls;
    m_polls_isSet = true;
}

bool OAIRankingWeek::is_polls_Set() const{
    return m_polls_isSet;
}

bool OAIRankingWeek::is_polls_Valid() const{
    return m_polls_isValid;
}

qint32 OAIRankingWeek::getSeason() const {
    return m_season;
}
void OAIRankingWeek::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIRankingWeek::is_season_Set() const{
    return m_season_isSet;
}

bool OAIRankingWeek::is_season_Valid() const{
    return m_season_isValid;
}

QString OAIRankingWeek::getSeasonType() const {
    return m_season_type;
}
void OAIRankingWeek::setSeasonType(const QString &season_type) {
    m_season_type = season_type;
    m_season_type_isSet = true;
}

bool OAIRankingWeek::is_season_type_Set() const{
    return m_season_type_isSet;
}

bool OAIRankingWeek::is_season_type_Valid() const{
    return m_season_type_isValid;
}

qint32 OAIRankingWeek::getWeek() const {
    return m_week;
}
void OAIRankingWeek::setWeek(const qint32 &week) {
    m_week = week;
    m_week_isSet = true;
}

bool OAIRankingWeek::is_week_Set() const{
    return m_week_isSet;
}

bool OAIRankingWeek::is_week_Valid() const{
    return m_week_isValid;
}

bool OAIRankingWeek::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_polls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRankingWeek::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
