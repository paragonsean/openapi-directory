/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecruit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecruit::OAIRecruit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecruit::OAIRecruit() {
    this->initializeModel();
}

OAIRecruit::~OAIRecruit() {}

void OAIRecruit::initializeModel() {

    m_athlete_id_isSet = false;
    m_athlete_id_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_committed_to_isSet = false;
    m_committed_to_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_hometown_info_isSet = false;
    m_hometown_info_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_ranking_isSet = false;
    m_ranking_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_recruit_type_isSet = false;
    m_recruit_type_isValid = false;

    m_school_isSet = false;
    m_school_isValid = false;

    m_stars_isSet = false;
    m_stars_isValid = false;

    m_state_province_isSet = false;
    m_state_province_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIRecruit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecruit::fromJsonObject(QJsonObject json) {

    m_athlete_id_isValid = ::OpenAPI::fromJsonValue(m_athlete_id, json[QString("athleteId")]);
    m_athlete_id_isSet = !json[QString("athleteId")].isNull() && m_athlete_id_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_committed_to_isValid = ::OpenAPI::fromJsonValue(m_committed_to, json[QString("committedTo")]);
    m_committed_to_isSet = !json[QString("committedTo")].isNull() && m_committed_to_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_hometown_info_isValid = ::OpenAPI::fromJsonValue(m_hometown_info, json[QString("hometownInfo")]);
    m_hometown_info_isSet = !json[QString("hometownInfo")].isNull() && m_hometown_info_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_ranking_isValid = ::OpenAPI::fromJsonValue(m_ranking, json[QString("ranking")]);
    m_ranking_isSet = !json[QString("ranking")].isNull() && m_ranking_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_recruit_type_isValid = ::OpenAPI::fromJsonValue(m_recruit_type, json[QString("recruitType")]);
    m_recruit_type_isSet = !json[QString("recruitType")].isNull() && m_recruit_type_isValid;

    m_school_isValid = ::OpenAPI::fromJsonValue(m_school, json[QString("school")]);
    m_school_isSet = !json[QString("school")].isNull() && m_school_isValid;

    m_stars_isValid = ::OpenAPI::fromJsonValue(m_stars, json[QString("stars")]);
    m_stars_isSet = !json[QString("stars")].isNull() && m_stars_isValid;

    m_state_province_isValid = ::OpenAPI::fromJsonValue(m_state_province, json[QString("stateProvince")]);
    m_state_province_isSet = !json[QString("stateProvince")].isNull() && m_state_province_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIRecruit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecruit::asJsonObject() const {
    QJsonObject obj;
    if (m_athlete_id_isSet) {
        obj.insert(QString("athleteId"), ::OpenAPI::toJsonValue(m_athlete_id));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_committed_to_isSet) {
        obj.insert(QString("committedTo"), ::OpenAPI::toJsonValue(m_committed_to));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_hometown_info.isSet()) {
        obj.insert(QString("hometownInfo"), ::OpenAPI::toJsonValue(m_hometown_info));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_ranking_isSet) {
        obj.insert(QString("ranking"), ::OpenAPI::toJsonValue(m_ranking));
    }
    if (m_rating_isSet) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_recruit_type_isSet) {
        obj.insert(QString("recruitType"), ::OpenAPI::toJsonValue(m_recruit_type));
    }
    if (m_school_isSet) {
        obj.insert(QString("school"), ::OpenAPI::toJsonValue(m_school));
    }
    if (m_stars_isSet) {
        obj.insert(QString("stars"), ::OpenAPI::toJsonValue(m_stars));
    }
    if (m_state_province_isSet) {
        obj.insert(QString("stateProvince"), ::OpenAPI::toJsonValue(m_state_province));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

qint32 OAIRecruit::getAthleteId() const {
    return m_athlete_id;
}
void OAIRecruit::setAthleteId(const qint32 &athlete_id) {
    m_athlete_id = athlete_id;
    m_athlete_id_isSet = true;
}

bool OAIRecruit::is_athlete_id_Set() const{
    return m_athlete_id_isSet;
}

bool OAIRecruit::is_athlete_id_Valid() const{
    return m_athlete_id_isValid;
}

QString OAIRecruit::getCity() const {
    return m_city;
}
void OAIRecruit::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIRecruit::is_city_Set() const{
    return m_city_isSet;
}

bool OAIRecruit::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIRecruit::getCommittedTo() const {
    return m_committed_to;
}
void OAIRecruit::setCommittedTo(const QString &committed_to) {
    m_committed_to = committed_to;
    m_committed_to_isSet = true;
}

bool OAIRecruit::is_committed_to_Set() const{
    return m_committed_to_isSet;
}

bool OAIRecruit::is_committed_to_Valid() const{
    return m_committed_to_isValid;
}

QString OAIRecruit::getCountry() const {
    return m_country;
}
void OAIRecruit::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIRecruit::is_country_Set() const{
    return m_country_isSet;
}

bool OAIRecruit::is_country_Valid() const{
    return m_country_isValid;
}

double OAIRecruit::getHeight() const {
    return m_height;
}
void OAIRecruit::setHeight(const double &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIRecruit::is_height_Set() const{
    return m_height_isSet;
}

bool OAIRecruit::is_height_Valid() const{
    return m_height_isValid;
}

OAIRecruit_hometownInfo OAIRecruit::getHometownInfo() const {
    return m_hometown_info;
}
void OAIRecruit::setHometownInfo(const OAIRecruit_hometownInfo &hometown_info) {
    m_hometown_info = hometown_info;
    m_hometown_info_isSet = true;
}

bool OAIRecruit::is_hometown_info_Set() const{
    return m_hometown_info_isSet;
}

bool OAIRecruit::is_hometown_info_Valid() const{
    return m_hometown_info_isValid;
}

qint32 OAIRecruit::getId() const {
    return m_id;
}
void OAIRecruit::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRecruit::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRecruit::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRecruit::getName() const {
    return m_name;
}
void OAIRecruit::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRecruit::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRecruit::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRecruit::getPosition() const {
    return m_position;
}
void OAIRecruit::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIRecruit::is_position_Set() const{
    return m_position_isSet;
}

bool OAIRecruit::is_position_Valid() const{
    return m_position_isValid;
}

qint32 OAIRecruit::getRanking() const {
    return m_ranking;
}
void OAIRecruit::setRanking(const qint32 &ranking) {
    m_ranking = ranking;
    m_ranking_isSet = true;
}

bool OAIRecruit::is_ranking_Set() const{
    return m_ranking_isSet;
}

bool OAIRecruit::is_ranking_Valid() const{
    return m_ranking_isValid;
}

double OAIRecruit::getRating() const {
    return m_rating;
}
void OAIRecruit::setRating(const double &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIRecruit::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIRecruit::is_rating_Valid() const{
    return m_rating_isValid;
}

QString OAIRecruit::getRecruitType() const {
    return m_recruit_type;
}
void OAIRecruit::setRecruitType(const QString &recruit_type) {
    m_recruit_type = recruit_type;
    m_recruit_type_isSet = true;
}

bool OAIRecruit::is_recruit_type_Set() const{
    return m_recruit_type_isSet;
}

bool OAIRecruit::is_recruit_type_Valid() const{
    return m_recruit_type_isValid;
}

QString OAIRecruit::getSchool() const {
    return m_school;
}
void OAIRecruit::setSchool(const QString &school) {
    m_school = school;
    m_school_isSet = true;
}

bool OAIRecruit::is_school_Set() const{
    return m_school_isSet;
}

bool OAIRecruit::is_school_Valid() const{
    return m_school_isValid;
}

qint32 OAIRecruit::getStars() const {
    return m_stars;
}
void OAIRecruit::setStars(const qint32 &stars) {
    m_stars = stars;
    m_stars_isSet = true;
}

bool OAIRecruit::is_stars_Set() const{
    return m_stars_isSet;
}

bool OAIRecruit::is_stars_Valid() const{
    return m_stars_isValid;
}

QString OAIRecruit::getStateProvince() const {
    return m_state_province;
}
void OAIRecruit::setStateProvince(const QString &state_province) {
    m_state_province = state_province;
    m_state_province_isSet = true;
}

bool OAIRecruit::is_state_province_Set() const{
    return m_state_province_isSet;
}

bool OAIRecruit::is_state_province_Valid() const{
    return m_state_province_isValid;
}

qint32 OAIRecruit::getWeight() const {
    return m_weight;
}
void OAIRecruit::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIRecruit::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIRecruit::is_weight_Valid() const{
    return m_weight_isValid;
}

qint32 OAIRecruit::getYear() const {
    return m_year;
}
void OAIRecruit::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIRecruit::is_year_Set() const{
    return m_year_isSet;
}

bool OAIRecruit::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIRecruit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_athlete_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_committed_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hometown_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ranking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recruit_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_school_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stars_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_province_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecruit::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
