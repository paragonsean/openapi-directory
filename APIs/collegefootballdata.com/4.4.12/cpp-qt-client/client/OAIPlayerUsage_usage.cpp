/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerUsage_usage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerUsage_usage::OAIPlayerUsage_usage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerUsage_usage::OAIPlayerUsage_usage() {
    this->initializeModel();
}

OAIPlayerUsage_usage::~OAIPlayerUsage_usage() {}

void OAIPlayerUsage_usage::initializeModel() {

    m_first_down_isSet = false;
    m_first_down_isValid = false;

    m_overall_isSet = false;
    m_overall_isValid = false;

    m_pass_isSet = false;
    m_pass_isValid = false;

    m_passing_downs_isSet = false;
    m_passing_downs_isValid = false;

    m_rush_isSet = false;
    m_rush_isValid = false;

    m_second_down_isSet = false;
    m_second_down_isValid = false;

    m_standard_downs_isSet = false;
    m_standard_downs_isValid = false;

    m_third_down_isSet = false;
    m_third_down_isValid = false;
}

void OAIPlayerUsage_usage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerUsage_usage::fromJsonObject(QJsonObject json) {

    m_first_down_isValid = ::OpenAPI::fromJsonValue(m_first_down, json[QString("firstDown")]);
    m_first_down_isSet = !json[QString("firstDown")].isNull() && m_first_down_isValid;

    m_overall_isValid = ::OpenAPI::fromJsonValue(m_overall, json[QString("overall")]);
    m_overall_isSet = !json[QString("overall")].isNull() && m_overall_isValid;

    m_pass_isValid = ::OpenAPI::fromJsonValue(m_pass, json[QString("pass")]);
    m_pass_isSet = !json[QString("pass")].isNull() && m_pass_isValid;

    m_passing_downs_isValid = ::OpenAPI::fromJsonValue(m_passing_downs, json[QString("passingDowns")]);
    m_passing_downs_isSet = !json[QString("passingDowns")].isNull() && m_passing_downs_isValid;

    m_rush_isValid = ::OpenAPI::fromJsonValue(m_rush, json[QString("rush")]);
    m_rush_isSet = !json[QString("rush")].isNull() && m_rush_isValid;

    m_second_down_isValid = ::OpenAPI::fromJsonValue(m_second_down, json[QString("secondDown")]);
    m_second_down_isSet = !json[QString("secondDown")].isNull() && m_second_down_isValid;

    m_standard_downs_isValid = ::OpenAPI::fromJsonValue(m_standard_downs, json[QString("standardDowns")]);
    m_standard_downs_isSet = !json[QString("standardDowns")].isNull() && m_standard_downs_isValid;

    m_third_down_isValid = ::OpenAPI::fromJsonValue(m_third_down, json[QString("thirdDown")]);
    m_third_down_isSet = !json[QString("thirdDown")].isNull() && m_third_down_isValid;
}

QString OAIPlayerUsage_usage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerUsage_usage::asJsonObject() const {
    QJsonObject obj;
    if (m_first_down_isSet) {
        obj.insert(QString("firstDown"), ::OpenAPI::toJsonValue(m_first_down));
    }
    if (m_overall_isSet) {
        obj.insert(QString("overall"), ::OpenAPI::toJsonValue(m_overall));
    }
    if (m_pass_isSet) {
        obj.insert(QString("pass"), ::OpenAPI::toJsonValue(m_pass));
    }
    if (m_passing_downs_isSet) {
        obj.insert(QString("passingDowns"), ::OpenAPI::toJsonValue(m_passing_downs));
    }
    if (m_rush_isSet) {
        obj.insert(QString("rush"), ::OpenAPI::toJsonValue(m_rush));
    }
    if (m_second_down_isSet) {
        obj.insert(QString("secondDown"), ::OpenAPI::toJsonValue(m_second_down));
    }
    if (m_standard_downs_isSet) {
        obj.insert(QString("standardDowns"), ::OpenAPI::toJsonValue(m_standard_downs));
    }
    if (m_third_down_isSet) {
        obj.insert(QString("thirdDown"), ::OpenAPI::toJsonValue(m_third_down));
    }
    return obj;
}

double OAIPlayerUsage_usage::getFirstDown() const {
    return m_first_down;
}
void OAIPlayerUsage_usage::setFirstDown(const double &first_down) {
    m_first_down = first_down;
    m_first_down_isSet = true;
}

bool OAIPlayerUsage_usage::is_first_down_Set() const{
    return m_first_down_isSet;
}

bool OAIPlayerUsage_usage::is_first_down_Valid() const{
    return m_first_down_isValid;
}

double OAIPlayerUsage_usage::getOverall() const {
    return m_overall;
}
void OAIPlayerUsage_usage::setOverall(const double &overall) {
    m_overall = overall;
    m_overall_isSet = true;
}

bool OAIPlayerUsage_usage::is_overall_Set() const{
    return m_overall_isSet;
}

bool OAIPlayerUsage_usage::is_overall_Valid() const{
    return m_overall_isValid;
}

double OAIPlayerUsage_usage::getPass() const {
    return m_pass;
}
void OAIPlayerUsage_usage::setPass(const double &pass) {
    m_pass = pass;
    m_pass_isSet = true;
}

bool OAIPlayerUsage_usage::is_pass_Set() const{
    return m_pass_isSet;
}

bool OAIPlayerUsage_usage::is_pass_Valid() const{
    return m_pass_isValid;
}

double OAIPlayerUsage_usage::getPassingDowns() const {
    return m_passing_downs;
}
void OAIPlayerUsage_usage::setPassingDowns(const double &passing_downs) {
    m_passing_downs = passing_downs;
    m_passing_downs_isSet = true;
}

bool OAIPlayerUsage_usage::is_passing_downs_Set() const{
    return m_passing_downs_isSet;
}

bool OAIPlayerUsage_usage::is_passing_downs_Valid() const{
    return m_passing_downs_isValid;
}

double OAIPlayerUsage_usage::getRush() const {
    return m_rush;
}
void OAIPlayerUsage_usage::setRush(const double &rush) {
    m_rush = rush;
    m_rush_isSet = true;
}

bool OAIPlayerUsage_usage::is_rush_Set() const{
    return m_rush_isSet;
}

bool OAIPlayerUsage_usage::is_rush_Valid() const{
    return m_rush_isValid;
}

double OAIPlayerUsage_usage::getSecondDown() const {
    return m_second_down;
}
void OAIPlayerUsage_usage::setSecondDown(const double &second_down) {
    m_second_down = second_down;
    m_second_down_isSet = true;
}

bool OAIPlayerUsage_usage::is_second_down_Set() const{
    return m_second_down_isSet;
}

bool OAIPlayerUsage_usage::is_second_down_Valid() const{
    return m_second_down_isValid;
}

double OAIPlayerUsage_usage::getStandardDowns() const {
    return m_standard_downs;
}
void OAIPlayerUsage_usage::setStandardDowns(const double &standard_downs) {
    m_standard_downs = standard_downs;
    m_standard_downs_isSet = true;
}

bool OAIPlayerUsage_usage::is_standard_downs_Set() const{
    return m_standard_downs_isSet;
}

bool OAIPlayerUsage_usage::is_standard_downs_Valid() const{
    return m_standard_downs_isValid;
}

double OAIPlayerUsage_usage::getThirdDown() const {
    return m_third_down;
}
void OAIPlayerUsage_usage::setThirdDown(const double &third_down) {
    m_third_down = third_down;
    m_third_down_isSet = true;
}

bool OAIPlayerUsage_usage::is_third_down_Set() const{
    return m_third_down_isSet;
}

bool OAIPlayerUsage_usage::is_third_down_Valid() const{
    return m_third_down_isValid;
}

bool OAIPlayerUsage_usage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_down_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pass_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_downs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rush_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_second_down_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_downs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_down_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerUsage_usage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
