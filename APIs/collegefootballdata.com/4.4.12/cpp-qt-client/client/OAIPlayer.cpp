/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayer::OAIPlayer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayer::OAIPlayer() {
    this->initializeModel();
}

OAIPlayer::~OAIPlayer() {}

void OAIPlayer::initializeModel() {

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_home_city_isSet = false;
    m_home_city_isValid = false;

    m_home_country_isSet = false;
    m_home_country_isValid = false;

    m_home_county_fips_isSet = false;
    m_home_county_fips_isValid = false;

    m_home_latitude_isSet = false;
    m_home_latitude_isValid = false;

    m_home_longitude_isSet = false;
    m_home_longitude_isValid = false;

    m_home_state_isSet = false;
    m_home_state_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_jersey_isSet = false;
    m_jersey_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_recruit_ids_isSet = false;
    m_recruit_ids_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIPlayer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayer::fromJsonObject(QJsonObject json) {

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_home_city_isValid = ::OpenAPI::fromJsonValue(m_home_city, json[QString("home_city")]);
    m_home_city_isSet = !json[QString("home_city")].isNull() && m_home_city_isValid;

    m_home_country_isValid = ::OpenAPI::fromJsonValue(m_home_country, json[QString("home_country")]);
    m_home_country_isSet = !json[QString("home_country")].isNull() && m_home_country_isValid;

    m_home_county_fips_isValid = ::OpenAPI::fromJsonValue(m_home_county_fips, json[QString("home_county_fips")]);
    m_home_county_fips_isSet = !json[QString("home_county_fips")].isNull() && m_home_county_fips_isValid;

    m_home_latitude_isValid = ::OpenAPI::fromJsonValue(m_home_latitude, json[QString("home_latitude")]);
    m_home_latitude_isSet = !json[QString("home_latitude")].isNull() && m_home_latitude_isValid;

    m_home_longitude_isValid = ::OpenAPI::fromJsonValue(m_home_longitude, json[QString("home_longitude")]);
    m_home_longitude_isSet = !json[QString("home_longitude")].isNull() && m_home_longitude_isValid;

    m_home_state_isValid = ::OpenAPI::fromJsonValue(m_home_state, json[QString("home_state")]);
    m_home_state_isSet = !json[QString("home_state")].isNull() && m_home_state_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_jersey_isValid = ::OpenAPI::fromJsonValue(m_jersey, json[QString("jersey")]);
    m_jersey_isSet = !json[QString("jersey")].isNull() && m_jersey_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_recruit_ids_isValid = ::OpenAPI::fromJsonValue(m_recruit_ids, json[QString("recruit_ids")]);
    m_recruit_ids_isSet = !json[QString("recruit_ids")].isNull() && m_recruit_ids_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIPlayer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayer::asJsonObject() const {
    QJsonObject obj;
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_home_city_isSet) {
        obj.insert(QString("home_city"), ::OpenAPI::toJsonValue(m_home_city));
    }
    if (m_home_country_isSet) {
        obj.insert(QString("home_country"), ::OpenAPI::toJsonValue(m_home_country));
    }
    if (m_home_county_fips_isSet) {
        obj.insert(QString("home_county_fips"), ::OpenAPI::toJsonValue(m_home_county_fips));
    }
    if (m_home_latitude_isSet) {
        obj.insert(QString("home_latitude"), ::OpenAPI::toJsonValue(m_home_latitude));
    }
    if (m_home_longitude_isSet) {
        obj.insert(QString("home_longitude"), ::OpenAPI::toJsonValue(m_home_longitude));
    }
    if (m_home_state_isSet) {
        obj.insert(QString("home_state"), ::OpenAPI::toJsonValue(m_home_state));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_jersey_isSet) {
        obj.insert(QString("jersey"), ::OpenAPI::toJsonValue(m_jersey));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_recruit_ids.size() > 0) {
        obj.insert(QString("recruit_ids"), ::OpenAPI::toJsonValue(m_recruit_ids));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QString OAIPlayer::getFirstName() const {
    return m_first_name;
}
void OAIPlayer::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIPlayer::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIPlayer::is_first_name_Valid() const{
    return m_first_name_isValid;
}

qint32 OAIPlayer::getHeight() const {
    return m_height;
}
void OAIPlayer::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIPlayer::is_height_Set() const{
    return m_height_isSet;
}

bool OAIPlayer::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIPlayer::getHomeCity() const {
    return m_home_city;
}
void OAIPlayer::setHomeCity(const QString &home_city) {
    m_home_city = home_city;
    m_home_city_isSet = true;
}

bool OAIPlayer::is_home_city_Set() const{
    return m_home_city_isSet;
}

bool OAIPlayer::is_home_city_Valid() const{
    return m_home_city_isValid;
}

QString OAIPlayer::getHomeCountry() const {
    return m_home_country;
}
void OAIPlayer::setHomeCountry(const QString &home_country) {
    m_home_country = home_country;
    m_home_country_isSet = true;
}

bool OAIPlayer::is_home_country_Set() const{
    return m_home_country_isSet;
}

bool OAIPlayer::is_home_country_Valid() const{
    return m_home_country_isValid;
}

QString OAIPlayer::getHomeCountyFips() const {
    return m_home_county_fips;
}
void OAIPlayer::setHomeCountyFips(const QString &home_county_fips) {
    m_home_county_fips = home_county_fips;
    m_home_county_fips_isSet = true;
}

bool OAIPlayer::is_home_county_fips_Set() const{
    return m_home_county_fips_isSet;
}

bool OAIPlayer::is_home_county_fips_Valid() const{
    return m_home_county_fips_isValid;
}

double OAIPlayer::getHomeLatitude() const {
    return m_home_latitude;
}
void OAIPlayer::setHomeLatitude(const double &home_latitude) {
    m_home_latitude = home_latitude;
    m_home_latitude_isSet = true;
}

bool OAIPlayer::is_home_latitude_Set() const{
    return m_home_latitude_isSet;
}

bool OAIPlayer::is_home_latitude_Valid() const{
    return m_home_latitude_isValid;
}

double OAIPlayer::getHomeLongitude() const {
    return m_home_longitude;
}
void OAIPlayer::setHomeLongitude(const double &home_longitude) {
    m_home_longitude = home_longitude;
    m_home_longitude_isSet = true;
}

bool OAIPlayer::is_home_longitude_Set() const{
    return m_home_longitude_isSet;
}

bool OAIPlayer::is_home_longitude_Valid() const{
    return m_home_longitude_isValid;
}

QString OAIPlayer::getHomeState() const {
    return m_home_state;
}
void OAIPlayer::setHomeState(const QString &home_state) {
    m_home_state = home_state;
    m_home_state_isSet = true;
}

bool OAIPlayer::is_home_state_Set() const{
    return m_home_state_isSet;
}

bool OAIPlayer::is_home_state_Valid() const{
    return m_home_state_isValid;
}

qint32 OAIPlayer::getId() const {
    return m_id;
}
void OAIPlayer::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPlayer::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPlayer::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIPlayer::getJersey() const {
    return m_jersey;
}
void OAIPlayer::setJersey(const qint32 &jersey) {
    m_jersey = jersey;
    m_jersey_isSet = true;
}

bool OAIPlayer::is_jersey_Set() const{
    return m_jersey_isSet;
}

bool OAIPlayer::is_jersey_Valid() const{
    return m_jersey_isValid;
}

QString OAIPlayer::getLastName() const {
    return m_last_name;
}
void OAIPlayer::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIPlayer::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIPlayer::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIPlayer::getPosition() const {
    return m_position;
}
void OAIPlayer::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIPlayer::is_position_Set() const{
    return m_position_isSet;
}

bool OAIPlayer::is_position_Valid() const{
    return m_position_isValid;
}

QList<qint32> OAIPlayer::getRecruitIds() const {
    return m_recruit_ids;
}
void OAIPlayer::setRecruitIds(const QList<qint32> &recruit_ids) {
    m_recruit_ids = recruit_ids;
    m_recruit_ids_isSet = true;
}

bool OAIPlayer::is_recruit_ids_Set() const{
    return m_recruit_ids_isSet;
}

bool OAIPlayer::is_recruit_ids_Valid() const{
    return m_recruit_ids_isValid;
}

QString OAIPlayer::getTeam() const {
    return m_team;
}
void OAIPlayer::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIPlayer::is_team_Set() const{
    return m_team_isSet;
}

bool OAIPlayer::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAIPlayer::getWeight() const {
    return m_weight;
}
void OAIPlayer::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIPlayer::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIPlayer::is_weight_Valid() const{
    return m_weight_isValid;
}

qint32 OAIPlayer::getYear() const {
    return m_year;
}
void OAIPlayer::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIPlayer::is_year_Set() const{
    return m_year_isSet;
}

bool OAIPlayer::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIPlayer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_county_fips_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jersey_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recruit_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
