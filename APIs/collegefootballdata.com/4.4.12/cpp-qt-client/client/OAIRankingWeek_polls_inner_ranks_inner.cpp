/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRankingWeek_polls_inner_ranks_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRankingWeek_polls_inner_ranks_inner::OAIRankingWeek_polls_inner_ranks_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRankingWeek_polls_inner_ranks_inner::OAIRankingWeek_polls_inner_ranks_inner() {
    this->initializeModel();
}

OAIRankingWeek_polls_inner_ranks_inner::~OAIRankingWeek_polls_inner_ranks_inner() {}

void OAIRankingWeek_polls_inner_ranks_inner::initializeModel() {

    m_conference_isSet = false;
    m_conference_isValid = false;

    m_first_place_votes_isSet = false;
    m_first_place_votes_isValid = false;

    m_points_isSet = false;
    m_points_isValid = false;

    m_rank_isSet = false;
    m_rank_isValid = false;

    m_school_isSet = false;
    m_school_isValid = false;
}

void OAIRankingWeek_polls_inner_ranks_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRankingWeek_polls_inner_ranks_inner::fromJsonObject(QJsonObject json) {

    m_conference_isValid = ::OpenAPI::fromJsonValue(m_conference, json[QString("conference")]);
    m_conference_isSet = !json[QString("conference")].isNull() && m_conference_isValid;

    m_first_place_votes_isValid = ::OpenAPI::fromJsonValue(m_first_place_votes, json[QString("firstPlaceVotes")]);
    m_first_place_votes_isSet = !json[QString("firstPlaceVotes")].isNull() && m_first_place_votes_isValid;

    m_points_isValid = ::OpenAPI::fromJsonValue(m_points, json[QString("points")]);
    m_points_isSet = !json[QString("points")].isNull() && m_points_isValid;

    m_rank_isValid = ::OpenAPI::fromJsonValue(m_rank, json[QString("rank")]);
    m_rank_isSet = !json[QString("rank")].isNull() && m_rank_isValid;

    m_school_isValid = ::OpenAPI::fromJsonValue(m_school, json[QString("school")]);
    m_school_isSet = !json[QString("school")].isNull() && m_school_isValid;
}

QString OAIRankingWeek_polls_inner_ranks_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRankingWeek_polls_inner_ranks_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_conference_isSet) {
        obj.insert(QString("conference"), ::OpenAPI::toJsonValue(m_conference));
    }
    if (m_first_place_votes_isSet) {
        obj.insert(QString("firstPlaceVotes"), ::OpenAPI::toJsonValue(m_first_place_votes));
    }
    if (m_points_isSet) {
        obj.insert(QString("points"), ::OpenAPI::toJsonValue(m_points));
    }
    if (m_rank_isSet) {
        obj.insert(QString("rank"), ::OpenAPI::toJsonValue(m_rank));
    }
    if (m_school_isSet) {
        obj.insert(QString("school"), ::OpenAPI::toJsonValue(m_school));
    }
    return obj;
}

QString OAIRankingWeek_polls_inner_ranks_inner::getConference() const {
    return m_conference;
}
void OAIRankingWeek_polls_inner_ranks_inner::setConference(const QString &conference) {
    m_conference = conference;
    m_conference_isSet = true;
}

bool OAIRankingWeek_polls_inner_ranks_inner::is_conference_Set() const{
    return m_conference_isSet;
}

bool OAIRankingWeek_polls_inner_ranks_inner::is_conference_Valid() const{
    return m_conference_isValid;
}

qint32 OAIRankingWeek_polls_inner_ranks_inner::getFirstPlaceVotes() const {
    return m_first_place_votes;
}
void OAIRankingWeek_polls_inner_ranks_inner::setFirstPlaceVotes(const qint32 &first_place_votes) {
    m_first_place_votes = first_place_votes;
    m_first_place_votes_isSet = true;
}

bool OAIRankingWeek_polls_inner_ranks_inner::is_first_place_votes_Set() const{
    return m_first_place_votes_isSet;
}

bool OAIRankingWeek_polls_inner_ranks_inner::is_first_place_votes_Valid() const{
    return m_first_place_votes_isValid;
}

qint32 OAIRankingWeek_polls_inner_ranks_inner::getPoints() const {
    return m_points;
}
void OAIRankingWeek_polls_inner_ranks_inner::setPoints(const qint32 &points) {
    m_points = points;
    m_points_isSet = true;
}

bool OAIRankingWeek_polls_inner_ranks_inner::is_points_Set() const{
    return m_points_isSet;
}

bool OAIRankingWeek_polls_inner_ranks_inner::is_points_Valid() const{
    return m_points_isValid;
}

qint32 OAIRankingWeek_polls_inner_ranks_inner::getRank() const {
    return m_rank;
}
void OAIRankingWeek_polls_inner_ranks_inner::setRank(const qint32 &rank) {
    m_rank = rank;
    m_rank_isSet = true;
}

bool OAIRankingWeek_polls_inner_ranks_inner::is_rank_Set() const{
    return m_rank_isSet;
}

bool OAIRankingWeek_polls_inner_ranks_inner::is_rank_Valid() const{
    return m_rank_isValid;
}

QString OAIRankingWeek_polls_inner_ranks_inner::getSchool() const {
    return m_school;
}
void OAIRankingWeek_polls_inner_ranks_inner::setSchool(const QString &school) {
    m_school = school;
    m_school_isSet = true;
}

bool OAIRankingWeek_polls_inner_ranks_inner::is_school_Set() const{
    return m_school_isSet;
}

bool OAIRankingWeek_polls_inner_ranks_inner::is_school_Valid() const{
    return m_school_isValid;
}

bool OAIRankingWeek_polls_inner_ranks_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_place_votes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_school_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRankingWeek_polls_inner_ranks_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
