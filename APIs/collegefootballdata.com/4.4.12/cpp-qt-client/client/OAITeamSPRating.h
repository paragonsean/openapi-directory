/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITeamSPRating.h
 *
 * 
 */

#ifndef OAITeamSPRating_H
#define OAITeamSPRating_H

#include <QJsonObject>

#include "OAIConferenceSPRating_specialTeams.h"
#include "OAITeamSPRating_defense.h"
#include "OAITeamSPRating_offense.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITeamSPRating_defense;
class OAITeamSPRating_offense;
class OAIConferenceSPRating_specialTeams;

class OAITeamSPRating : public OAIObject {
public:
    OAITeamSPRating();
    OAITeamSPRating(QString json);
    ~OAITeamSPRating() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getConference() const;
    void setConference(const QString &conference);
    bool is_conference_Set() const;
    bool is_conference_Valid() const;

    OAITeamSPRating_defense getDefense() const;
    void setDefense(const OAITeamSPRating_defense &defense);
    bool is_defense_Set() const;
    bool is_defense_Valid() const;

    OAITeamSPRating_offense getOffense() const;
    void setOffense(const OAITeamSPRating_offense &offense);
    bool is_offense_Set() const;
    bool is_offense_Valid() const;

    double getRanking() const;
    void setRanking(const double &ranking);
    bool is_ranking_Set() const;
    bool is_ranking_Valid() const;

    double getRating() const;
    void setRating(const double &rating);
    bool is_rating_Set() const;
    bool is_rating_Valid() const;

    double getSecondOrderWins() const;
    void setSecondOrderWins(const double &second_order_wins);
    bool is_second_order_wins_Set() const;
    bool is_second_order_wins_Valid() const;

    double getSos() const;
    void setSos(const double &sos);
    bool is_sos_Set() const;
    bool is_sos_Valid() const;

    OAIConferenceSPRating_specialTeams getSpecialTeams() const;
    void setSpecialTeams(const OAIConferenceSPRating_specialTeams &special_teams);
    bool is_special_teams_Set() const;
    bool is_special_teams_Valid() const;

    QString getTeam() const;
    void setTeam(const QString &team);
    bool is_team_Set() const;
    bool is_team_Valid() const;

    qint32 getYear() const;
    void setYear(const qint32 &year);
    bool is_year_Set() const;
    bool is_year_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_conference;
    bool m_conference_isSet;
    bool m_conference_isValid;

    OAITeamSPRating_defense m_defense;
    bool m_defense_isSet;
    bool m_defense_isValid;

    OAITeamSPRating_offense m_offense;
    bool m_offense_isSet;
    bool m_offense_isValid;

    double m_ranking;
    bool m_ranking_isSet;
    bool m_ranking_isValid;

    double m_rating;
    bool m_rating_isSet;
    bool m_rating_isValid;

    double m_second_order_wins;
    bool m_second_order_wins_isSet;
    bool m_second_order_wins_isValid;

    double m_sos;
    bool m_sos_isSet;
    bool m_sos_isValid;

    OAIConferenceSPRating_specialTeams m_special_teams;
    bool m_special_teams_isSet;
    bool m_special_teams_isValid;

    QString m_team;
    bool m_team_isSet;
    bool m_team_isValid;

    qint32 m_year;
    bool m_year_isSet;
    bool m_year_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITeamSPRating)

#endif // OAITeamSPRating_H
