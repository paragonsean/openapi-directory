/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGameMedia.h
 *
 * 
 */

#ifndef OAIGameMedia_H
#define OAIGameMedia_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGameMedia : public OAIObject {
public:
    OAIGameMedia();
    OAIGameMedia(QString json);
    ~OAIGameMedia() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAwayConference() const;
    void setAwayConference(const QString &away_conference);
    bool is_away_conference_Set() const;
    bool is_away_conference_Valid() const;

    QString getAwayTeam() const;
    void setAwayTeam(const QString &away_team);
    bool is_away_team_Set() const;
    bool is_away_team_Valid() const;

    QString getHomeConference() const;
    void setHomeConference(const QString &home_conference);
    bool is_home_conference_Set() const;
    bool is_home_conference_Valid() const;

    QString getHomeTeam() const;
    void setHomeTeam(const QString &home_team);
    bool is_home_team_Set() const;
    bool is_home_team_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsStartTimeTbd() const;
    void setIsStartTimeTbd(const bool &is_start_time_tbd);
    bool is_is_start_time_tbd_Set() const;
    bool is_is_start_time_tbd_Valid() const;

    QString getMediaType() const;
    void setMediaType(const QString &media_type);
    bool is_media_type_Set() const;
    bool is_media_type_Valid() const;

    QString getOutlet() const;
    void setOutlet(const QString &outlet);
    bool is_outlet_Set() const;
    bool is_outlet_Valid() const;

    qint32 getSeason() const;
    void setSeason(const qint32 &season);
    bool is_season_Set() const;
    bool is_season_Valid() const;

    QString getSeasonType() const;
    void setSeasonType(const QString &season_type);
    bool is_season_type_Set() const;
    bool is_season_type_Valid() const;

    QString getStartTime() const;
    void setStartTime(const QString &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    qint32 getWeek() const;
    void setWeek(const qint32 &week);
    bool is_week_Set() const;
    bool is_week_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_away_conference;
    bool m_away_conference_isSet;
    bool m_away_conference_isValid;

    QString m_away_team;
    bool m_away_team_isSet;
    bool m_away_team_isValid;

    QString m_home_conference;
    bool m_home_conference_isSet;
    bool m_home_conference_isValid;

    QString m_home_team;
    bool m_home_team_isSet;
    bool m_home_team_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_start_time_tbd;
    bool m_is_start_time_tbd_isSet;
    bool m_is_start_time_tbd_isValid;

    QString m_media_type;
    bool m_media_type_isSet;
    bool m_media_type_isValid;

    QString m_outlet;
    bool m_outlet_isSet;
    bool m_outlet_isValid;

    qint32 m_season;
    bool m_season_isSet;
    bool m_season_isValid;

    QString m_season_type;
    bool m_season_type_isSet;
    bool m_season_type_isValid;

    QString m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    qint32 m_week;
    bool m_week_isSet;
    bool m_week_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGameMedia)

#endif // OAIGameMedia_H
