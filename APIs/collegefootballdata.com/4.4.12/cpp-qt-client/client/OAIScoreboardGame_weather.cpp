/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScoreboardGame_weather.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScoreboardGame_weather::OAIScoreboardGame_weather(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScoreboardGame_weather::OAIScoreboardGame_weather() {
    this->initializeModel();
}

OAIScoreboardGame_weather::~OAIScoreboardGame_weather() {}

void OAIScoreboardGame_weather::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_temperature_isSet = false;
    m_temperature_isValid = false;

    m_wind_direction_isSet = false;
    m_wind_direction_isValid = false;

    m_wind_speed_isSet = false;
    m_wind_speed_isValid = false;
}

void OAIScoreboardGame_weather::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScoreboardGame_weather::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_temperature_isValid = ::OpenAPI::fromJsonValue(m_temperature, json[QString("temperature")]);
    m_temperature_isSet = !json[QString("temperature")].isNull() && m_temperature_isValid;

    m_wind_direction_isValid = ::OpenAPI::fromJsonValue(m_wind_direction, json[QString("windDirection")]);
    m_wind_direction_isSet = !json[QString("windDirection")].isNull() && m_wind_direction_isValid;

    m_wind_speed_isValid = ::OpenAPI::fromJsonValue(m_wind_speed, json[QString("windSpeed")]);
    m_wind_speed_isSet = !json[QString("windSpeed")].isNull() && m_wind_speed_isValid;
}

QString OAIScoreboardGame_weather::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScoreboardGame_weather::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_temperature_isSet) {
        obj.insert(QString("temperature"), ::OpenAPI::toJsonValue(m_temperature));
    }
    if (m_wind_direction_isSet) {
        obj.insert(QString("windDirection"), ::OpenAPI::toJsonValue(m_wind_direction));
    }
    if (m_wind_speed_isSet) {
        obj.insert(QString("windSpeed"), ::OpenAPI::toJsonValue(m_wind_speed));
    }
    return obj;
}

QString OAIScoreboardGame_weather::getDescription() const {
    return m_description;
}
void OAIScoreboardGame_weather::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIScoreboardGame_weather::is_description_Set() const{
    return m_description_isSet;
}

bool OAIScoreboardGame_weather::is_description_Valid() const{
    return m_description_isValid;
}

double OAIScoreboardGame_weather::getTemperature() const {
    return m_temperature;
}
void OAIScoreboardGame_weather::setTemperature(const double &temperature) {
    m_temperature = temperature;
    m_temperature_isSet = true;
}

bool OAIScoreboardGame_weather::is_temperature_Set() const{
    return m_temperature_isSet;
}

bool OAIScoreboardGame_weather::is_temperature_Valid() const{
    return m_temperature_isValid;
}

double OAIScoreboardGame_weather::getWindDirection() const {
    return m_wind_direction;
}
void OAIScoreboardGame_weather::setWindDirection(const double &wind_direction) {
    m_wind_direction = wind_direction;
    m_wind_direction_isSet = true;
}

bool OAIScoreboardGame_weather::is_wind_direction_Set() const{
    return m_wind_direction_isSet;
}

bool OAIScoreboardGame_weather::is_wind_direction_Valid() const{
    return m_wind_direction_isValid;
}

double OAIScoreboardGame_weather::getWindSpeed() const {
    return m_wind_speed;
}
void OAIScoreboardGame_weather::setWindSpeed(const double &wind_speed) {
    m_wind_speed = wind_speed;
    m_wind_speed_isSet = true;
}

bool OAIScoreboardGame_weather::is_wind_speed_Set() const{
    return m_wind_speed_isSet;
}

bool OAIScoreboardGame_weather::is_wind_speed_Valid() const{
    return m_wind_speed_isValid;
}

bool OAIScoreboardGame_weather::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temperature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wind_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wind_speed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScoreboardGame_weather::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
