/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamSeason.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamSeason::OAITeamSeason(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamSeason::OAITeamSeason() {
    this->initializeModel();
}

OAITeamSeason::~OAITeamSeason() {}

void OAITeamSeason::initializeModel() {

    m_games_isSet = false;
    m_games_isValid = false;

    m_losses_isSet = false;
    m_losses_isValid = false;

    m_postseason_rank_isSet = false;
    m_postseason_rank_isValid = false;

    m_preseason_rank_isSet = false;
    m_preseason_rank_isValid = false;

    m_school_isSet = false;
    m_school_isValid = false;

    m_sp_defense_isSet = false;
    m_sp_defense_isValid = false;

    m_sp_offense_isSet = false;
    m_sp_offense_isValid = false;

    m_sp_overall_isSet = false;
    m_sp_overall_isValid = false;

    m_srs_isSet = false;
    m_srs_isValid = false;

    m_ties_isSet = false;
    m_ties_isValid = false;

    m_wins_isSet = false;
    m_wins_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAITeamSeason::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamSeason::fromJsonObject(QJsonObject json) {

    m_games_isValid = ::OpenAPI::fromJsonValue(m_games, json[QString("games")]);
    m_games_isSet = !json[QString("games")].isNull() && m_games_isValid;

    m_losses_isValid = ::OpenAPI::fromJsonValue(m_losses, json[QString("losses")]);
    m_losses_isSet = !json[QString("losses")].isNull() && m_losses_isValid;

    m_postseason_rank_isValid = ::OpenAPI::fromJsonValue(m_postseason_rank, json[QString("postseason_rank")]);
    m_postseason_rank_isSet = !json[QString("postseason_rank")].isNull() && m_postseason_rank_isValid;

    m_preseason_rank_isValid = ::OpenAPI::fromJsonValue(m_preseason_rank, json[QString("preseason_rank")]);
    m_preseason_rank_isSet = !json[QString("preseason_rank")].isNull() && m_preseason_rank_isValid;

    m_school_isValid = ::OpenAPI::fromJsonValue(m_school, json[QString("school")]);
    m_school_isSet = !json[QString("school")].isNull() && m_school_isValid;

    m_sp_defense_isValid = ::OpenAPI::fromJsonValue(m_sp_defense, json[QString("sp_defense")]);
    m_sp_defense_isSet = !json[QString("sp_defense")].isNull() && m_sp_defense_isValid;

    m_sp_offense_isValid = ::OpenAPI::fromJsonValue(m_sp_offense, json[QString("sp_offense")]);
    m_sp_offense_isSet = !json[QString("sp_offense")].isNull() && m_sp_offense_isValid;

    m_sp_overall_isValid = ::OpenAPI::fromJsonValue(m_sp_overall, json[QString("sp_overall")]);
    m_sp_overall_isSet = !json[QString("sp_overall")].isNull() && m_sp_overall_isValid;

    m_srs_isValid = ::OpenAPI::fromJsonValue(m_srs, json[QString("srs")]);
    m_srs_isSet = !json[QString("srs")].isNull() && m_srs_isValid;

    m_ties_isValid = ::OpenAPI::fromJsonValue(m_ties, json[QString("ties")]);
    m_ties_isSet = !json[QString("ties")].isNull() && m_ties_isValid;

    m_wins_isValid = ::OpenAPI::fromJsonValue(m_wins, json[QString("wins")]);
    m_wins_isSet = !json[QString("wins")].isNull() && m_wins_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAITeamSeason::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamSeason::asJsonObject() const {
    QJsonObject obj;
    if (m_games_isSet) {
        obj.insert(QString("games"), ::OpenAPI::toJsonValue(m_games));
    }
    if (m_losses_isSet) {
        obj.insert(QString("losses"), ::OpenAPI::toJsonValue(m_losses));
    }
    if (m_postseason_rank_isSet) {
        obj.insert(QString("postseason_rank"), ::OpenAPI::toJsonValue(m_postseason_rank));
    }
    if (m_preseason_rank_isSet) {
        obj.insert(QString("preseason_rank"), ::OpenAPI::toJsonValue(m_preseason_rank));
    }
    if (m_school_isSet) {
        obj.insert(QString("school"), ::OpenAPI::toJsonValue(m_school));
    }
    if (m_sp_defense_isSet) {
        obj.insert(QString("sp_defense"), ::OpenAPI::toJsonValue(m_sp_defense));
    }
    if (m_sp_offense_isSet) {
        obj.insert(QString("sp_offense"), ::OpenAPI::toJsonValue(m_sp_offense));
    }
    if (m_sp_overall_isSet) {
        obj.insert(QString("sp_overall"), ::OpenAPI::toJsonValue(m_sp_overall));
    }
    if (m_srs_isSet) {
        obj.insert(QString("srs"), ::OpenAPI::toJsonValue(m_srs));
    }
    if (m_ties_isSet) {
        obj.insert(QString("ties"), ::OpenAPI::toJsonValue(m_ties));
    }
    if (m_wins_isSet) {
        obj.insert(QString("wins"), ::OpenAPI::toJsonValue(m_wins));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

qint32 OAITeamSeason::getGames() const {
    return m_games;
}
void OAITeamSeason::setGames(const qint32 &games) {
    m_games = games;
    m_games_isSet = true;
}

bool OAITeamSeason::is_games_Set() const{
    return m_games_isSet;
}

bool OAITeamSeason::is_games_Valid() const{
    return m_games_isValid;
}

qint32 OAITeamSeason::getLosses() const {
    return m_losses;
}
void OAITeamSeason::setLosses(const qint32 &losses) {
    m_losses = losses;
    m_losses_isSet = true;
}

bool OAITeamSeason::is_losses_Set() const{
    return m_losses_isSet;
}

bool OAITeamSeason::is_losses_Valid() const{
    return m_losses_isValid;
}

qint32 OAITeamSeason::getPostseasonRank() const {
    return m_postseason_rank;
}
void OAITeamSeason::setPostseasonRank(const qint32 &postseason_rank) {
    m_postseason_rank = postseason_rank;
    m_postseason_rank_isSet = true;
}

bool OAITeamSeason::is_postseason_rank_Set() const{
    return m_postseason_rank_isSet;
}

bool OAITeamSeason::is_postseason_rank_Valid() const{
    return m_postseason_rank_isValid;
}

qint32 OAITeamSeason::getPreseasonRank() const {
    return m_preseason_rank;
}
void OAITeamSeason::setPreseasonRank(const qint32 &preseason_rank) {
    m_preseason_rank = preseason_rank;
    m_preseason_rank_isSet = true;
}

bool OAITeamSeason::is_preseason_rank_Set() const{
    return m_preseason_rank_isSet;
}

bool OAITeamSeason::is_preseason_rank_Valid() const{
    return m_preseason_rank_isValid;
}

QString OAITeamSeason::getSchool() const {
    return m_school;
}
void OAITeamSeason::setSchool(const QString &school) {
    m_school = school;
    m_school_isSet = true;
}

bool OAITeamSeason::is_school_Set() const{
    return m_school_isSet;
}

bool OAITeamSeason::is_school_Valid() const{
    return m_school_isValid;
}

double OAITeamSeason::getSpDefense() const {
    return m_sp_defense;
}
void OAITeamSeason::setSpDefense(const double &sp_defense) {
    m_sp_defense = sp_defense;
    m_sp_defense_isSet = true;
}

bool OAITeamSeason::is_sp_defense_Set() const{
    return m_sp_defense_isSet;
}

bool OAITeamSeason::is_sp_defense_Valid() const{
    return m_sp_defense_isValid;
}

double OAITeamSeason::getSpOffense() const {
    return m_sp_offense;
}
void OAITeamSeason::setSpOffense(const double &sp_offense) {
    m_sp_offense = sp_offense;
    m_sp_offense_isSet = true;
}

bool OAITeamSeason::is_sp_offense_Set() const{
    return m_sp_offense_isSet;
}

bool OAITeamSeason::is_sp_offense_Valid() const{
    return m_sp_offense_isValid;
}

double OAITeamSeason::getSpOverall() const {
    return m_sp_overall;
}
void OAITeamSeason::setSpOverall(const double &sp_overall) {
    m_sp_overall = sp_overall;
    m_sp_overall_isSet = true;
}

bool OAITeamSeason::is_sp_overall_Set() const{
    return m_sp_overall_isSet;
}

bool OAITeamSeason::is_sp_overall_Valid() const{
    return m_sp_overall_isValid;
}

double OAITeamSeason::getSrs() const {
    return m_srs;
}
void OAITeamSeason::setSrs(const double &srs) {
    m_srs = srs;
    m_srs_isSet = true;
}

bool OAITeamSeason::is_srs_Set() const{
    return m_srs_isSet;
}

bool OAITeamSeason::is_srs_Valid() const{
    return m_srs_isValid;
}

qint32 OAITeamSeason::getTies() const {
    return m_ties;
}
void OAITeamSeason::setTies(const qint32 &ties) {
    m_ties = ties;
    m_ties_isSet = true;
}

bool OAITeamSeason::is_ties_Set() const{
    return m_ties_isSet;
}

bool OAITeamSeason::is_ties_Valid() const{
    return m_ties_isValid;
}

qint32 OAITeamSeason::getWins() const {
    return m_wins;
}
void OAITeamSeason::setWins(const qint32 &wins) {
    m_wins = wins;
    m_wins_isSet = true;
}

bool OAITeamSeason::is_wins_Set() const{
    return m_wins_isSet;
}

bool OAITeamSeason::is_wins_Valid() const{
    return m_wins_isValid;
}

QString OAITeamSeason::getYear() const {
    return m_year;
}
void OAITeamSeason::setYear(const QString &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAITeamSeason::is_year_Set() const{
    return m_year_isSet;
}

bool OAITeamSeason::is_year_Valid() const{
    return m_year_isValid;
}

bool OAITeamSeason::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_games_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_losses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postseason_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preseason_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_school_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sp_defense_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sp_offense_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sp_overall_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_srs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamSeason::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
