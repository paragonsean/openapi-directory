/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILivePlayByPlay_drives_inner_plays_inner.h
 *
 * 
 */

#ifndef OAILivePlayByPlay_drives_inner_plays_inner_H
#define OAILivePlayByPlay_drives_inner_plays_inner_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILivePlayByPlay_drives_inner_plays_inner : public OAIObject {
public:
    OAILivePlayByPlay_drives_inner_plays_inner();
    OAILivePlayByPlay_drives_inner_plays_inner(QString json);
    ~OAILivePlayByPlay_drives_inner_plays_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAwayScore() const;
    void setAwayScore(const qint32 &away_score);
    bool is_away_score_Set() const;
    bool is_away_score_Valid() const;

    QString getClock() const;
    void setClock(const QString &clock);
    bool is_clock_Set() const;
    bool is_clock_Valid() const;

    qint32 getDistance() const;
    void setDistance(const qint32 &distance);
    bool is_distance_Set() const;
    bool is_distance_Valid() const;

    qint32 getDown() const;
    void setDown(const qint32 &down);
    bool is_down_Set() const;
    bool is_down_Valid() const;

    QString getDownType() const;
    void setDownType(const QString &down_type);
    bool is_down_type_Set() const;
    bool is_down_type_Valid() const;

    double getEpa() const;
    void setEpa(const double &epa);
    bool is_epa_Set() const;
    bool is_epa_Valid() const;

    bool isGarbageTime() const;
    void setGarbageTime(const bool &garbage_time);
    bool is_garbage_time_Set() const;
    bool is_garbage_time_Valid() const;

    qint32 getHomeScore() const;
    void setHomeScore(const qint32 &home_score);
    bool is_home_score_Set() const;
    bool is_home_score_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getPeriod() const;
    void setPeriod(const qint32 &period);
    bool is_period_Set() const;
    bool is_period_Valid() const;

    QString getPlayText() const;
    void setPlayText(const QString &play_text);
    bool is_play_text_Set() const;
    bool is_play_text_Valid() const;

    QString getPlayType() const;
    void setPlayType(const QString &play_type);
    bool is_play_type_Set() const;
    bool is_play_type_Valid() const;

    qint32 getPlayTypeId() const;
    void setPlayTypeId(const qint32 &play_type_id);
    bool is_play_type_id_Set() const;
    bool is_play_type_id_Valid() const;

    QString getRushPass() const;
    void setRushPass(const QString &rush_pass);
    bool is_rush_pass_Set() const;
    bool is_rush_pass_Valid() const;

    bool isSuccess() const;
    void setSuccess(const bool &success);
    bool is_success_Set() const;
    bool is_success_Valid() const;

    QString getTeam() const;
    void setTeam(const QString &team);
    bool is_team_Set() const;
    bool is_team_Valid() const;

    qint32 getTeamId() const;
    void setTeamId(const qint32 &team_id);
    bool is_team_id_Set() const;
    bool is_team_id_Valid() const;

    QString getWallclock() const;
    void setWallclock(const QString &wallclock);
    bool is_wallclock_Set() const;
    bool is_wallclock_Valid() const;

    qint32 getYardsGained() const;
    void setYardsGained(const qint32 &yards_gained);
    bool is_yards_gained_Set() const;
    bool is_yards_gained_Valid() const;

    qint32 getYardsToGoal() const;
    void setYardsToGoal(const qint32 &yards_to_goal);
    bool is_yards_to_goal_Set() const;
    bool is_yards_to_goal_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_away_score;
    bool m_away_score_isSet;
    bool m_away_score_isValid;

    QString m_clock;
    bool m_clock_isSet;
    bool m_clock_isValid;

    qint32 m_distance;
    bool m_distance_isSet;
    bool m_distance_isValid;

    qint32 m_down;
    bool m_down_isSet;
    bool m_down_isValid;

    QString m_down_type;
    bool m_down_type_isSet;
    bool m_down_type_isValid;

    double m_epa;
    bool m_epa_isSet;
    bool m_epa_isValid;

    bool m_garbage_time;
    bool m_garbage_time_isSet;
    bool m_garbage_time_isValid;

    qint32 m_home_score;
    bool m_home_score_isSet;
    bool m_home_score_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_period;
    bool m_period_isSet;
    bool m_period_isValid;

    QString m_play_text;
    bool m_play_text_isSet;
    bool m_play_text_isValid;

    QString m_play_type;
    bool m_play_type_isSet;
    bool m_play_type_isValid;

    qint32 m_play_type_id;
    bool m_play_type_id_isSet;
    bool m_play_type_id_isValid;

    QString m_rush_pass;
    bool m_rush_pass_isSet;
    bool m_rush_pass_isValid;

    bool m_success;
    bool m_success_isSet;
    bool m_success_isValid;

    QString m_team;
    bool m_team_isSet;
    bool m_team_isValid;

    qint32 m_team_id;
    bool m_team_id_isSet;
    bool m_team_id_isValid;

    QString m_wallclock;
    bool m_wallclock_isSet;
    bool m_wallclock_isValid;

    qint32 m_yards_gained;
    bool m_yards_gained_isSet;
    bool m_yards_gained_isValid;

    qint32 m_yards_to_goal;
    bool m_yards_to_goal_isSet;
    bool m_yards_to_goal_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILivePlayByPlay_drives_inner_plays_inner)

#endif // OAILivePlayByPlay_drives_inner_plays_inner_H
