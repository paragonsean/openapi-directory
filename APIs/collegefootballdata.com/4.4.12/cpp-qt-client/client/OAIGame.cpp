/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGame.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGame::OAIGame(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGame::OAIGame() {
    this->initializeModel();
}

OAIGame::~OAIGame() {}

void OAIGame::initializeModel() {

    m_attendance_isSet = false;
    m_attendance_isValid = false;

    m_away_conference_isSet = false;
    m_away_conference_isValid = false;

    m_away_division_isSet = false;
    m_away_division_isValid = false;

    m_away_id_isSet = false;
    m_away_id_isValid = false;

    m_away_line_scores_isSet = false;
    m_away_line_scores_isValid = false;

    m_away_points_isSet = false;
    m_away_points_isValid = false;

    m_away_post_win_prob_isSet = false;
    m_away_post_win_prob_isValid = false;

    m_away_postgame_elo_isSet = false;
    m_away_postgame_elo_isValid = false;

    m_away_pregame_elo_isSet = false;
    m_away_pregame_elo_isValid = false;

    m_away_team_isSet = false;
    m_away_team_isValid = false;

    m_completed_isSet = false;
    m_completed_isValid = false;

    m_conference_game_isSet = false;
    m_conference_game_isValid = false;

    m_excitement_index_isSet = false;
    m_excitement_index_isValid = false;

    m_highlights_isSet = false;
    m_highlights_isValid = false;

    m_home_conference_isSet = false;
    m_home_conference_isValid = false;

    m_home_division_isSet = false;
    m_home_division_isValid = false;

    m_home_id_isSet = false;
    m_home_id_isValid = false;

    m_home_line_scores_isSet = false;
    m_home_line_scores_isValid = false;

    m_home_points_isSet = false;
    m_home_points_isValid = false;

    m_home_post_win_prob_isSet = false;
    m_home_post_win_prob_isValid = false;

    m_home_postgame_elo_isSet = false;
    m_home_postgame_elo_isValid = false;

    m_home_pregame_elo_isSet = false;
    m_home_pregame_elo_isValid = false;

    m_home_team_isSet = false;
    m_home_team_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_neutral_site_isSet = false;
    m_neutral_site_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_season_type_isSet = false;
    m_season_type_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_start_time_tbd_isSet = false;
    m_start_time_tbd_isValid = false;

    m_venue_isSet = false;
    m_venue_isValid = false;

    m_venue_id_isSet = false;
    m_venue_id_isValid = false;

    m_week_isSet = false;
    m_week_isValid = false;
}

void OAIGame::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGame::fromJsonObject(QJsonObject json) {

    m_attendance_isValid = ::OpenAPI::fromJsonValue(m_attendance, json[QString("attendance")]);
    m_attendance_isSet = !json[QString("attendance")].isNull() && m_attendance_isValid;

    m_away_conference_isValid = ::OpenAPI::fromJsonValue(m_away_conference, json[QString("away_conference")]);
    m_away_conference_isSet = !json[QString("away_conference")].isNull() && m_away_conference_isValid;

    m_away_division_isValid = ::OpenAPI::fromJsonValue(m_away_division, json[QString("away_division")]);
    m_away_division_isSet = !json[QString("away_division")].isNull() && m_away_division_isValid;

    m_away_id_isValid = ::OpenAPI::fromJsonValue(m_away_id, json[QString("away_id")]);
    m_away_id_isSet = !json[QString("away_id")].isNull() && m_away_id_isValid;

    m_away_line_scores_isValid = ::OpenAPI::fromJsonValue(m_away_line_scores, json[QString("away_line_scores")]);
    m_away_line_scores_isSet = !json[QString("away_line_scores")].isNull() && m_away_line_scores_isValid;

    m_away_points_isValid = ::OpenAPI::fromJsonValue(m_away_points, json[QString("away_points")]);
    m_away_points_isSet = !json[QString("away_points")].isNull() && m_away_points_isValid;

    m_away_post_win_prob_isValid = ::OpenAPI::fromJsonValue(m_away_post_win_prob, json[QString("away_post_win_prob")]);
    m_away_post_win_prob_isSet = !json[QString("away_post_win_prob")].isNull() && m_away_post_win_prob_isValid;

    m_away_postgame_elo_isValid = ::OpenAPI::fromJsonValue(m_away_postgame_elo, json[QString("away_postgame_elo")]);
    m_away_postgame_elo_isSet = !json[QString("away_postgame_elo")].isNull() && m_away_postgame_elo_isValid;

    m_away_pregame_elo_isValid = ::OpenAPI::fromJsonValue(m_away_pregame_elo, json[QString("away_pregame_elo")]);
    m_away_pregame_elo_isSet = !json[QString("away_pregame_elo")].isNull() && m_away_pregame_elo_isValid;

    m_away_team_isValid = ::OpenAPI::fromJsonValue(m_away_team, json[QString("away_team")]);
    m_away_team_isSet = !json[QString("away_team")].isNull() && m_away_team_isValid;

    m_completed_isValid = ::OpenAPI::fromJsonValue(m_completed, json[QString("completed")]);
    m_completed_isSet = !json[QString("completed")].isNull() && m_completed_isValid;

    m_conference_game_isValid = ::OpenAPI::fromJsonValue(m_conference_game, json[QString("conference_game")]);
    m_conference_game_isSet = !json[QString("conference_game")].isNull() && m_conference_game_isValid;

    m_excitement_index_isValid = ::OpenAPI::fromJsonValue(m_excitement_index, json[QString("excitement_index")]);
    m_excitement_index_isSet = !json[QString("excitement_index")].isNull() && m_excitement_index_isValid;

    m_highlights_isValid = ::OpenAPI::fromJsonValue(m_highlights, json[QString("highlights")]);
    m_highlights_isSet = !json[QString("highlights")].isNull() && m_highlights_isValid;

    m_home_conference_isValid = ::OpenAPI::fromJsonValue(m_home_conference, json[QString("home_conference")]);
    m_home_conference_isSet = !json[QString("home_conference")].isNull() && m_home_conference_isValid;

    m_home_division_isValid = ::OpenAPI::fromJsonValue(m_home_division, json[QString("home_division")]);
    m_home_division_isSet = !json[QString("home_division")].isNull() && m_home_division_isValid;

    m_home_id_isValid = ::OpenAPI::fromJsonValue(m_home_id, json[QString("home_id")]);
    m_home_id_isSet = !json[QString("home_id")].isNull() && m_home_id_isValid;

    m_home_line_scores_isValid = ::OpenAPI::fromJsonValue(m_home_line_scores, json[QString("home_line_scores")]);
    m_home_line_scores_isSet = !json[QString("home_line_scores")].isNull() && m_home_line_scores_isValid;

    m_home_points_isValid = ::OpenAPI::fromJsonValue(m_home_points, json[QString("home_points")]);
    m_home_points_isSet = !json[QString("home_points")].isNull() && m_home_points_isValid;

    m_home_post_win_prob_isValid = ::OpenAPI::fromJsonValue(m_home_post_win_prob, json[QString("home_post_win_prob")]);
    m_home_post_win_prob_isSet = !json[QString("home_post_win_prob")].isNull() && m_home_post_win_prob_isValid;

    m_home_postgame_elo_isValid = ::OpenAPI::fromJsonValue(m_home_postgame_elo, json[QString("home_postgame_elo")]);
    m_home_postgame_elo_isSet = !json[QString("home_postgame_elo")].isNull() && m_home_postgame_elo_isValid;

    m_home_pregame_elo_isValid = ::OpenAPI::fromJsonValue(m_home_pregame_elo, json[QString("home_pregame_elo")]);
    m_home_pregame_elo_isSet = !json[QString("home_pregame_elo")].isNull() && m_home_pregame_elo_isValid;

    m_home_team_isValid = ::OpenAPI::fromJsonValue(m_home_team, json[QString("home_team")]);
    m_home_team_isSet = !json[QString("home_team")].isNull() && m_home_team_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_neutral_site_isValid = ::OpenAPI::fromJsonValue(m_neutral_site, json[QString("neutral_site")]);
    m_neutral_site_isSet = !json[QString("neutral_site")].isNull() && m_neutral_site_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("season")]);
    m_season_isSet = !json[QString("season")].isNull() && m_season_isValid;

    m_season_type_isValid = ::OpenAPI::fromJsonValue(m_season_type, json[QString("season_type")]);
    m_season_type_isSet = !json[QString("season_type")].isNull() && m_season_type_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("start_date")]);
    m_start_date_isSet = !json[QString("start_date")].isNull() && m_start_date_isValid;

    m_start_time_tbd_isValid = ::OpenAPI::fromJsonValue(m_start_time_tbd, json[QString("start_time_tbd")]);
    m_start_time_tbd_isSet = !json[QString("start_time_tbd")].isNull() && m_start_time_tbd_isValid;

    m_venue_isValid = ::OpenAPI::fromJsonValue(m_venue, json[QString("venue")]);
    m_venue_isSet = !json[QString("venue")].isNull() && m_venue_isValid;

    m_venue_id_isValid = ::OpenAPI::fromJsonValue(m_venue_id, json[QString("venue_id")]);
    m_venue_id_isSet = !json[QString("venue_id")].isNull() && m_venue_id_isValid;

    m_week_isValid = ::OpenAPI::fromJsonValue(m_week, json[QString("week")]);
    m_week_isSet = !json[QString("week")].isNull() && m_week_isValid;
}

QString OAIGame::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGame::asJsonObject() const {
    QJsonObject obj;
    if (m_attendance_isSet) {
        obj.insert(QString("attendance"), ::OpenAPI::toJsonValue(m_attendance));
    }
    if (m_away_conference_isSet) {
        obj.insert(QString("away_conference"), ::OpenAPI::toJsonValue(m_away_conference));
    }
    if (m_away_division_isSet) {
        obj.insert(QString("away_division"), ::OpenAPI::toJsonValue(m_away_division));
    }
    if (m_away_id_isSet) {
        obj.insert(QString("away_id"), ::OpenAPI::toJsonValue(m_away_id));
    }
    if (m_away_line_scores.size() > 0) {
        obj.insert(QString("away_line_scores"), ::OpenAPI::toJsonValue(m_away_line_scores));
    }
    if (m_away_points_isSet) {
        obj.insert(QString("away_points"), ::OpenAPI::toJsonValue(m_away_points));
    }
    if (m_away_post_win_prob_isSet) {
        obj.insert(QString("away_post_win_prob"), ::OpenAPI::toJsonValue(m_away_post_win_prob));
    }
    if (m_away_postgame_elo_isSet) {
        obj.insert(QString("away_postgame_elo"), ::OpenAPI::toJsonValue(m_away_postgame_elo));
    }
    if (m_away_pregame_elo_isSet) {
        obj.insert(QString("away_pregame_elo"), ::OpenAPI::toJsonValue(m_away_pregame_elo));
    }
    if (m_away_team_isSet) {
        obj.insert(QString("away_team"), ::OpenAPI::toJsonValue(m_away_team));
    }
    if (m_completed_isSet) {
        obj.insert(QString("completed"), ::OpenAPI::toJsonValue(m_completed));
    }
    if (m_conference_game_isSet) {
        obj.insert(QString("conference_game"), ::OpenAPI::toJsonValue(m_conference_game));
    }
    if (m_excitement_index_isSet) {
        obj.insert(QString("excitement_index"), ::OpenAPI::toJsonValue(m_excitement_index));
    }
    if (m_highlights_isSet) {
        obj.insert(QString("highlights"), ::OpenAPI::toJsonValue(m_highlights));
    }
    if (m_home_conference_isSet) {
        obj.insert(QString("home_conference"), ::OpenAPI::toJsonValue(m_home_conference));
    }
    if (m_home_division_isSet) {
        obj.insert(QString("home_division"), ::OpenAPI::toJsonValue(m_home_division));
    }
    if (m_home_id_isSet) {
        obj.insert(QString("home_id"), ::OpenAPI::toJsonValue(m_home_id));
    }
    if (m_home_line_scores.size() > 0) {
        obj.insert(QString("home_line_scores"), ::OpenAPI::toJsonValue(m_home_line_scores));
    }
    if (m_home_points_isSet) {
        obj.insert(QString("home_points"), ::OpenAPI::toJsonValue(m_home_points));
    }
    if (m_home_post_win_prob_isSet) {
        obj.insert(QString("home_post_win_prob"), ::OpenAPI::toJsonValue(m_home_post_win_prob));
    }
    if (m_home_postgame_elo_isSet) {
        obj.insert(QString("home_postgame_elo"), ::OpenAPI::toJsonValue(m_home_postgame_elo));
    }
    if (m_home_pregame_elo_isSet) {
        obj.insert(QString("home_pregame_elo"), ::OpenAPI::toJsonValue(m_home_pregame_elo));
    }
    if (m_home_team_isSet) {
        obj.insert(QString("home_team"), ::OpenAPI::toJsonValue(m_home_team));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_neutral_site_isSet) {
        obj.insert(QString("neutral_site"), ::OpenAPI::toJsonValue(m_neutral_site));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_season_isSet) {
        obj.insert(QString("season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_season_type_isSet) {
        obj.insert(QString("season_type"), ::OpenAPI::toJsonValue(m_season_type));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("start_date"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_start_time_tbd_isSet) {
        obj.insert(QString("start_time_tbd"), ::OpenAPI::toJsonValue(m_start_time_tbd));
    }
    if (m_venue_isSet) {
        obj.insert(QString("venue"), ::OpenAPI::toJsonValue(m_venue));
    }
    if (m_venue_id_isSet) {
        obj.insert(QString("venue_id"), ::OpenAPI::toJsonValue(m_venue_id));
    }
    if (m_week_isSet) {
        obj.insert(QString("week"), ::OpenAPI::toJsonValue(m_week));
    }
    return obj;
}

qint32 OAIGame::getAttendance() const {
    return m_attendance;
}
void OAIGame::setAttendance(const qint32 &attendance) {
    m_attendance = attendance;
    m_attendance_isSet = true;
}

bool OAIGame::is_attendance_Set() const{
    return m_attendance_isSet;
}

bool OAIGame::is_attendance_Valid() const{
    return m_attendance_isValid;
}

QString OAIGame::getAwayConference() const {
    return m_away_conference;
}
void OAIGame::setAwayConference(const QString &away_conference) {
    m_away_conference = away_conference;
    m_away_conference_isSet = true;
}

bool OAIGame::is_away_conference_Set() const{
    return m_away_conference_isSet;
}

bool OAIGame::is_away_conference_Valid() const{
    return m_away_conference_isValid;
}

QString OAIGame::getAwayDivision() const {
    return m_away_division;
}
void OAIGame::setAwayDivision(const QString &away_division) {
    m_away_division = away_division;
    m_away_division_isSet = true;
}

bool OAIGame::is_away_division_Set() const{
    return m_away_division_isSet;
}

bool OAIGame::is_away_division_Valid() const{
    return m_away_division_isValid;
}

qint32 OAIGame::getAwayId() const {
    return m_away_id;
}
void OAIGame::setAwayId(const qint32 &away_id) {
    m_away_id = away_id;
    m_away_id_isSet = true;
}

bool OAIGame::is_away_id_Set() const{
    return m_away_id_isSet;
}

bool OAIGame::is_away_id_Valid() const{
    return m_away_id_isValid;
}

QList<qint32> OAIGame::getAwayLineScores() const {
    return m_away_line_scores;
}
void OAIGame::setAwayLineScores(const QList<qint32> &away_line_scores) {
    m_away_line_scores = away_line_scores;
    m_away_line_scores_isSet = true;
}

bool OAIGame::is_away_line_scores_Set() const{
    return m_away_line_scores_isSet;
}

bool OAIGame::is_away_line_scores_Valid() const{
    return m_away_line_scores_isValid;
}

qint32 OAIGame::getAwayPoints() const {
    return m_away_points;
}
void OAIGame::setAwayPoints(const qint32 &away_points) {
    m_away_points = away_points;
    m_away_points_isSet = true;
}

bool OAIGame::is_away_points_Set() const{
    return m_away_points_isSet;
}

bool OAIGame::is_away_points_Valid() const{
    return m_away_points_isValid;
}

double OAIGame::getAwayPostWinProb() const {
    return m_away_post_win_prob;
}
void OAIGame::setAwayPostWinProb(const double &away_post_win_prob) {
    m_away_post_win_prob = away_post_win_prob;
    m_away_post_win_prob_isSet = true;
}

bool OAIGame::is_away_post_win_prob_Set() const{
    return m_away_post_win_prob_isSet;
}

bool OAIGame::is_away_post_win_prob_Valid() const{
    return m_away_post_win_prob_isValid;
}

qint32 OAIGame::getAwayPostgameElo() const {
    return m_away_postgame_elo;
}
void OAIGame::setAwayPostgameElo(const qint32 &away_postgame_elo) {
    m_away_postgame_elo = away_postgame_elo;
    m_away_postgame_elo_isSet = true;
}

bool OAIGame::is_away_postgame_elo_Set() const{
    return m_away_postgame_elo_isSet;
}

bool OAIGame::is_away_postgame_elo_Valid() const{
    return m_away_postgame_elo_isValid;
}

qint32 OAIGame::getAwayPregameElo() const {
    return m_away_pregame_elo;
}
void OAIGame::setAwayPregameElo(const qint32 &away_pregame_elo) {
    m_away_pregame_elo = away_pregame_elo;
    m_away_pregame_elo_isSet = true;
}

bool OAIGame::is_away_pregame_elo_Set() const{
    return m_away_pregame_elo_isSet;
}

bool OAIGame::is_away_pregame_elo_Valid() const{
    return m_away_pregame_elo_isValid;
}

QString OAIGame::getAwayTeam() const {
    return m_away_team;
}
void OAIGame::setAwayTeam(const QString &away_team) {
    m_away_team = away_team;
    m_away_team_isSet = true;
}

bool OAIGame::is_away_team_Set() const{
    return m_away_team_isSet;
}

bool OAIGame::is_away_team_Valid() const{
    return m_away_team_isValid;
}

bool OAIGame::isCompleted() const {
    return m_completed;
}
void OAIGame::setCompleted(const bool &completed) {
    m_completed = completed;
    m_completed_isSet = true;
}

bool OAIGame::is_completed_Set() const{
    return m_completed_isSet;
}

bool OAIGame::is_completed_Valid() const{
    return m_completed_isValid;
}

bool OAIGame::isConferenceGame() const {
    return m_conference_game;
}
void OAIGame::setConferenceGame(const bool &conference_game) {
    m_conference_game = conference_game;
    m_conference_game_isSet = true;
}

bool OAIGame::is_conference_game_Set() const{
    return m_conference_game_isSet;
}

bool OAIGame::is_conference_game_Valid() const{
    return m_conference_game_isValid;
}

double OAIGame::getExcitementIndex() const {
    return m_excitement_index;
}
void OAIGame::setExcitementIndex(const double &excitement_index) {
    m_excitement_index = excitement_index;
    m_excitement_index_isSet = true;
}

bool OAIGame::is_excitement_index_Set() const{
    return m_excitement_index_isSet;
}

bool OAIGame::is_excitement_index_Valid() const{
    return m_excitement_index_isValid;
}

QString OAIGame::getHighlights() const {
    return m_highlights;
}
void OAIGame::setHighlights(const QString &highlights) {
    m_highlights = highlights;
    m_highlights_isSet = true;
}

bool OAIGame::is_highlights_Set() const{
    return m_highlights_isSet;
}

bool OAIGame::is_highlights_Valid() const{
    return m_highlights_isValid;
}

QString OAIGame::getHomeConference() const {
    return m_home_conference;
}
void OAIGame::setHomeConference(const QString &home_conference) {
    m_home_conference = home_conference;
    m_home_conference_isSet = true;
}

bool OAIGame::is_home_conference_Set() const{
    return m_home_conference_isSet;
}

bool OAIGame::is_home_conference_Valid() const{
    return m_home_conference_isValid;
}

QString OAIGame::getHomeDivision() const {
    return m_home_division;
}
void OAIGame::setHomeDivision(const QString &home_division) {
    m_home_division = home_division;
    m_home_division_isSet = true;
}

bool OAIGame::is_home_division_Set() const{
    return m_home_division_isSet;
}

bool OAIGame::is_home_division_Valid() const{
    return m_home_division_isValid;
}

qint32 OAIGame::getHomeId() const {
    return m_home_id;
}
void OAIGame::setHomeId(const qint32 &home_id) {
    m_home_id = home_id;
    m_home_id_isSet = true;
}

bool OAIGame::is_home_id_Set() const{
    return m_home_id_isSet;
}

bool OAIGame::is_home_id_Valid() const{
    return m_home_id_isValid;
}

QList<qint32> OAIGame::getHomeLineScores() const {
    return m_home_line_scores;
}
void OAIGame::setHomeLineScores(const QList<qint32> &home_line_scores) {
    m_home_line_scores = home_line_scores;
    m_home_line_scores_isSet = true;
}

bool OAIGame::is_home_line_scores_Set() const{
    return m_home_line_scores_isSet;
}

bool OAIGame::is_home_line_scores_Valid() const{
    return m_home_line_scores_isValid;
}

qint32 OAIGame::getHomePoints() const {
    return m_home_points;
}
void OAIGame::setHomePoints(const qint32 &home_points) {
    m_home_points = home_points;
    m_home_points_isSet = true;
}

bool OAIGame::is_home_points_Set() const{
    return m_home_points_isSet;
}

bool OAIGame::is_home_points_Valid() const{
    return m_home_points_isValid;
}

double OAIGame::getHomePostWinProb() const {
    return m_home_post_win_prob;
}
void OAIGame::setHomePostWinProb(const double &home_post_win_prob) {
    m_home_post_win_prob = home_post_win_prob;
    m_home_post_win_prob_isSet = true;
}

bool OAIGame::is_home_post_win_prob_Set() const{
    return m_home_post_win_prob_isSet;
}

bool OAIGame::is_home_post_win_prob_Valid() const{
    return m_home_post_win_prob_isValid;
}

qint32 OAIGame::getHomePostgameElo() const {
    return m_home_postgame_elo;
}
void OAIGame::setHomePostgameElo(const qint32 &home_postgame_elo) {
    m_home_postgame_elo = home_postgame_elo;
    m_home_postgame_elo_isSet = true;
}

bool OAIGame::is_home_postgame_elo_Set() const{
    return m_home_postgame_elo_isSet;
}

bool OAIGame::is_home_postgame_elo_Valid() const{
    return m_home_postgame_elo_isValid;
}

qint32 OAIGame::getHomePregameElo() const {
    return m_home_pregame_elo;
}
void OAIGame::setHomePregameElo(const qint32 &home_pregame_elo) {
    m_home_pregame_elo = home_pregame_elo;
    m_home_pregame_elo_isSet = true;
}

bool OAIGame::is_home_pregame_elo_Set() const{
    return m_home_pregame_elo_isSet;
}

bool OAIGame::is_home_pregame_elo_Valid() const{
    return m_home_pregame_elo_isValid;
}

QString OAIGame::getHomeTeam() const {
    return m_home_team;
}
void OAIGame::setHomeTeam(const QString &home_team) {
    m_home_team = home_team;
    m_home_team_isSet = true;
}

bool OAIGame::is_home_team_Set() const{
    return m_home_team_isSet;
}

bool OAIGame::is_home_team_Valid() const{
    return m_home_team_isValid;
}

qint32 OAIGame::getId() const {
    return m_id;
}
void OAIGame::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGame::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGame::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIGame::isNeutralSite() const {
    return m_neutral_site;
}
void OAIGame::setNeutralSite(const bool &neutral_site) {
    m_neutral_site = neutral_site;
    m_neutral_site_isSet = true;
}

bool OAIGame::is_neutral_site_Set() const{
    return m_neutral_site_isSet;
}

bool OAIGame::is_neutral_site_Valid() const{
    return m_neutral_site_isValid;
}

QString OAIGame::getNotes() const {
    return m_notes;
}
void OAIGame::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIGame::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIGame::is_notes_Valid() const{
    return m_notes_isValid;
}

qint32 OAIGame::getSeason() const {
    return m_season;
}
void OAIGame::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIGame::is_season_Set() const{
    return m_season_isSet;
}

bool OAIGame::is_season_Valid() const{
    return m_season_isValid;
}

QString OAIGame::getSeasonType() const {
    return m_season_type;
}
void OAIGame::setSeasonType(const QString &season_type) {
    m_season_type = season_type;
    m_season_type_isSet = true;
}

bool OAIGame::is_season_type_Set() const{
    return m_season_type_isSet;
}

bool OAIGame::is_season_type_Valid() const{
    return m_season_type_isValid;
}

QString OAIGame::getStartDate() const {
    return m_start_date;
}
void OAIGame::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIGame::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIGame::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIGame::isStartTimeTbd() const {
    return m_start_time_tbd;
}
void OAIGame::setStartTimeTbd(const bool &start_time_tbd) {
    m_start_time_tbd = start_time_tbd;
    m_start_time_tbd_isSet = true;
}

bool OAIGame::is_start_time_tbd_Set() const{
    return m_start_time_tbd_isSet;
}

bool OAIGame::is_start_time_tbd_Valid() const{
    return m_start_time_tbd_isValid;
}

QString OAIGame::getVenue() const {
    return m_venue;
}
void OAIGame::setVenue(const QString &venue) {
    m_venue = venue;
    m_venue_isSet = true;
}

bool OAIGame::is_venue_Set() const{
    return m_venue_isSet;
}

bool OAIGame::is_venue_Valid() const{
    return m_venue_isValid;
}

qint32 OAIGame::getVenueId() const {
    return m_venue_id;
}
void OAIGame::setVenueId(const qint32 &venue_id) {
    m_venue_id = venue_id;
    m_venue_id_isSet = true;
}

bool OAIGame::is_venue_id_Set() const{
    return m_venue_id_isSet;
}

bool OAIGame::is_venue_id_Valid() const{
    return m_venue_id_isValid;
}

qint32 OAIGame::getWeek() const {
    return m_week;
}
void OAIGame::setWeek(const qint32 &week) {
    m_week = week;
    m_week_isSet = true;
}

bool OAIGame::is_week_Set() const{
    return m_week_isSet;
}

bool OAIGame::is_week_Valid() const{
    return m_week_isValid;
}

bool OAIGame::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attendance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_division_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_line_scores.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_post_win_prob_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_postgame_elo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_pregame_elo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_game_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excitement_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highlights_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_division_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_line_scores.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_post_win_prob_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_postgame_elo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_pregame_elo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neutral_site_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_tbd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_venue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_venue_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGame::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
