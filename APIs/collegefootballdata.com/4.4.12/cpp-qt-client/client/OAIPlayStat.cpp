/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayStat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayStat::OAIPlayStat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayStat::OAIPlayStat() {
    this->initializeModel();
}

OAIPlayStat::~OAIPlayStat() {}

void OAIPlayStat::initializeModel() {

    m_athlete_id_isSet = false;
    m_athlete_id_isValid = false;

    m_athlete_name_isSet = false;
    m_athlete_name_isValid = false;

    m_clock_isSet = false;
    m_clock_isValid = false;

    m_conference_isSet = false;
    m_conference_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_down_isSet = false;
    m_down_isValid = false;

    m_drive_id_isSet = false;
    m_drive_id_isValid = false;

    m_game_id_isSet = false;
    m_game_id_isValid = false;

    m_opponent_isSet = false;
    m_opponent_isValid = false;

    m_opponent_score_isSet = false;
    m_opponent_score_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_play_id_isSet = false;
    m_play_id_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_stat_isSet = false;
    m_stat_isValid = false;

    m_stat_type_isSet = false;
    m_stat_type_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_team_score_isSet = false;
    m_team_score_isValid = false;

    m_week_isSet = false;
    m_week_isValid = false;

    m_yards_to_goal_isSet = false;
    m_yards_to_goal_isValid = false;
}

void OAIPlayStat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayStat::fromJsonObject(QJsonObject json) {

    m_athlete_id_isValid = ::OpenAPI::fromJsonValue(m_athlete_id, json[QString("athleteId")]);
    m_athlete_id_isSet = !json[QString("athleteId")].isNull() && m_athlete_id_isValid;

    m_athlete_name_isValid = ::OpenAPI::fromJsonValue(m_athlete_name, json[QString("athleteName")]);
    m_athlete_name_isSet = !json[QString("athleteName")].isNull() && m_athlete_name_isValid;

    m_clock_isValid = ::OpenAPI::fromJsonValue(m_clock, json[QString("clock")]);
    m_clock_isSet = !json[QString("clock")].isNull() && m_clock_isValid;

    m_conference_isValid = ::OpenAPI::fromJsonValue(m_conference, json[QString("conference")]);
    m_conference_isSet = !json[QString("conference")].isNull() && m_conference_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_down_isValid = ::OpenAPI::fromJsonValue(m_down, json[QString("down")]);
    m_down_isSet = !json[QString("down")].isNull() && m_down_isValid;

    m_drive_id_isValid = ::OpenAPI::fromJsonValue(m_drive_id, json[QString("driveId")]);
    m_drive_id_isSet = !json[QString("driveId")].isNull() && m_drive_id_isValid;

    m_game_id_isValid = ::OpenAPI::fromJsonValue(m_game_id, json[QString("gameId")]);
    m_game_id_isSet = !json[QString("gameId")].isNull() && m_game_id_isValid;

    m_opponent_isValid = ::OpenAPI::fromJsonValue(m_opponent, json[QString("opponent")]);
    m_opponent_isSet = !json[QString("opponent")].isNull() && m_opponent_isValid;

    m_opponent_score_isValid = ::OpenAPI::fromJsonValue(m_opponent_score, json[QString("opponentScore")]);
    m_opponent_score_isSet = !json[QString("opponentScore")].isNull() && m_opponent_score_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;

    m_play_id_isValid = ::OpenAPI::fromJsonValue(m_play_id, json[QString("playId")]);
    m_play_id_isSet = !json[QString("playId")].isNull() && m_play_id_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("season")]);
    m_season_isSet = !json[QString("season")].isNull() && m_season_isValid;

    m_stat_isValid = ::OpenAPI::fromJsonValue(m_stat, json[QString("stat")]);
    m_stat_isSet = !json[QString("stat")].isNull() && m_stat_isValid;

    m_stat_type_isValid = ::OpenAPI::fromJsonValue(m_stat_type, json[QString("statType")]);
    m_stat_type_isSet = !json[QString("statType")].isNull() && m_stat_type_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_team_score_isValid = ::OpenAPI::fromJsonValue(m_team_score, json[QString("teamScore")]);
    m_team_score_isSet = !json[QString("teamScore")].isNull() && m_team_score_isValid;

    m_week_isValid = ::OpenAPI::fromJsonValue(m_week, json[QString("week")]);
    m_week_isSet = !json[QString("week")].isNull() && m_week_isValid;

    m_yards_to_goal_isValid = ::OpenAPI::fromJsonValue(m_yards_to_goal, json[QString("yardsToGoal")]);
    m_yards_to_goal_isSet = !json[QString("yardsToGoal")].isNull() && m_yards_to_goal_isValid;
}

QString OAIPlayStat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayStat::asJsonObject() const {
    QJsonObject obj;
    if (m_athlete_id_isSet) {
        obj.insert(QString("athleteId"), ::OpenAPI::toJsonValue(m_athlete_id));
    }
    if (m_athlete_name_isSet) {
        obj.insert(QString("athleteName"), ::OpenAPI::toJsonValue(m_athlete_name));
    }
    if (m_clock.isSet()) {
        obj.insert(QString("clock"), ::OpenAPI::toJsonValue(m_clock));
    }
    if (m_conference_isSet) {
        obj.insert(QString("conference"), ::OpenAPI::toJsonValue(m_conference));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_down_isSet) {
        obj.insert(QString("down"), ::OpenAPI::toJsonValue(m_down));
    }
    if (m_drive_id_isSet) {
        obj.insert(QString("driveId"), ::OpenAPI::toJsonValue(m_drive_id));
    }
    if (m_game_id_isSet) {
        obj.insert(QString("gameId"), ::OpenAPI::toJsonValue(m_game_id));
    }
    if (m_opponent_isSet) {
        obj.insert(QString("opponent"), ::OpenAPI::toJsonValue(m_opponent));
    }
    if (m_opponent_score_isSet) {
        obj.insert(QString("opponentScore"), ::OpenAPI::toJsonValue(m_opponent_score));
    }
    if (m_period_isSet) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_play_id_isSet) {
        obj.insert(QString("playId"), ::OpenAPI::toJsonValue(m_play_id));
    }
    if (m_season_isSet) {
        obj.insert(QString("season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_stat_isSet) {
        obj.insert(QString("stat"), ::OpenAPI::toJsonValue(m_stat));
    }
    if (m_stat_type_isSet) {
        obj.insert(QString("statType"), ::OpenAPI::toJsonValue(m_stat_type));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_team_score_isSet) {
        obj.insert(QString("teamScore"), ::OpenAPI::toJsonValue(m_team_score));
    }
    if (m_week_isSet) {
        obj.insert(QString("week"), ::OpenAPI::toJsonValue(m_week));
    }
    if (m_yards_to_goal_isSet) {
        obj.insert(QString("yardsToGoal"), ::OpenAPI::toJsonValue(m_yards_to_goal));
    }
    return obj;
}

qint32 OAIPlayStat::getAthleteId() const {
    return m_athlete_id;
}
void OAIPlayStat::setAthleteId(const qint32 &athlete_id) {
    m_athlete_id = athlete_id;
    m_athlete_id_isSet = true;
}

bool OAIPlayStat::is_athlete_id_Set() const{
    return m_athlete_id_isSet;
}

bool OAIPlayStat::is_athlete_id_Valid() const{
    return m_athlete_id_isValid;
}

QString OAIPlayStat::getAthleteName() const {
    return m_athlete_name;
}
void OAIPlayStat::setAthleteName(const QString &athlete_name) {
    m_athlete_name = athlete_name;
    m_athlete_name_isSet = true;
}

bool OAIPlayStat::is_athlete_name_Set() const{
    return m_athlete_name_isSet;
}

bool OAIPlayStat::is_athlete_name_Valid() const{
    return m_athlete_name_isValid;
}

OAIDrive_end_time OAIPlayStat::getClock() const {
    return m_clock;
}
void OAIPlayStat::setClock(const OAIDrive_end_time &clock) {
    m_clock = clock;
    m_clock_isSet = true;
}

bool OAIPlayStat::is_clock_Set() const{
    return m_clock_isSet;
}

bool OAIPlayStat::is_clock_Valid() const{
    return m_clock_isValid;
}

QString OAIPlayStat::getConference() const {
    return m_conference;
}
void OAIPlayStat::setConference(const QString &conference) {
    m_conference = conference;
    m_conference_isSet = true;
}

bool OAIPlayStat::is_conference_Set() const{
    return m_conference_isSet;
}

bool OAIPlayStat::is_conference_Valid() const{
    return m_conference_isValid;
}

qint32 OAIPlayStat::getDistance() const {
    return m_distance;
}
void OAIPlayStat::setDistance(const qint32 &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAIPlayStat::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAIPlayStat::is_distance_Valid() const{
    return m_distance_isValid;
}

qint32 OAIPlayStat::getDown() const {
    return m_down;
}
void OAIPlayStat::setDown(const qint32 &down) {
    m_down = down;
    m_down_isSet = true;
}

bool OAIPlayStat::is_down_Set() const{
    return m_down_isSet;
}

bool OAIPlayStat::is_down_Valid() const{
    return m_down_isValid;
}

qint32 OAIPlayStat::getDriveId() const {
    return m_drive_id;
}
void OAIPlayStat::setDriveId(const qint32 &drive_id) {
    m_drive_id = drive_id;
    m_drive_id_isSet = true;
}

bool OAIPlayStat::is_drive_id_Set() const{
    return m_drive_id_isSet;
}

bool OAIPlayStat::is_drive_id_Valid() const{
    return m_drive_id_isValid;
}

qint32 OAIPlayStat::getGameId() const {
    return m_game_id;
}
void OAIPlayStat::setGameId(const qint32 &game_id) {
    m_game_id = game_id;
    m_game_id_isSet = true;
}

bool OAIPlayStat::is_game_id_Set() const{
    return m_game_id_isSet;
}

bool OAIPlayStat::is_game_id_Valid() const{
    return m_game_id_isValid;
}

QString OAIPlayStat::getOpponent() const {
    return m_opponent;
}
void OAIPlayStat::setOpponent(const QString &opponent) {
    m_opponent = opponent;
    m_opponent_isSet = true;
}

bool OAIPlayStat::is_opponent_Set() const{
    return m_opponent_isSet;
}

bool OAIPlayStat::is_opponent_Valid() const{
    return m_opponent_isValid;
}

qint32 OAIPlayStat::getOpponentScore() const {
    return m_opponent_score;
}
void OAIPlayStat::setOpponentScore(const qint32 &opponent_score) {
    m_opponent_score = opponent_score;
    m_opponent_score_isSet = true;
}

bool OAIPlayStat::is_opponent_score_Set() const{
    return m_opponent_score_isSet;
}

bool OAIPlayStat::is_opponent_score_Valid() const{
    return m_opponent_score_isValid;
}

qint32 OAIPlayStat::getPeriod() const {
    return m_period;
}
void OAIPlayStat::setPeriod(const qint32 &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIPlayStat::is_period_Set() const{
    return m_period_isSet;
}

bool OAIPlayStat::is_period_Valid() const{
    return m_period_isValid;
}

qint32 OAIPlayStat::getPlayId() const {
    return m_play_id;
}
void OAIPlayStat::setPlayId(const qint32 &play_id) {
    m_play_id = play_id;
    m_play_id_isSet = true;
}

bool OAIPlayStat::is_play_id_Set() const{
    return m_play_id_isSet;
}

bool OAIPlayStat::is_play_id_Valid() const{
    return m_play_id_isValid;
}

qint32 OAIPlayStat::getSeason() const {
    return m_season;
}
void OAIPlayStat::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIPlayStat::is_season_Set() const{
    return m_season_isSet;
}

bool OAIPlayStat::is_season_Valid() const{
    return m_season_isValid;
}

qint32 OAIPlayStat::getStat() const {
    return m_stat;
}
void OAIPlayStat::setStat(const qint32 &stat) {
    m_stat = stat;
    m_stat_isSet = true;
}

bool OAIPlayStat::is_stat_Set() const{
    return m_stat_isSet;
}

bool OAIPlayStat::is_stat_Valid() const{
    return m_stat_isValid;
}

QString OAIPlayStat::getStatType() const {
    return m_stat_type;
}
void OAIPlayStat::setStatType(const QString &stat_type) {
    m_stat_type = stat_type;
    m_stat_type_isSet = true;
}

bool OAIPlayStat::is_stat_type_Set() const{
    return m_stat_type_isSet;
}

bool OAIPlayStat::is_stat_type_Valid() const{
    return m_stat_type_isValid;
}

QString OAIPlayStat::getTeam() const {
    return m_team;
}
void OAIPlayStat::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIPlayStat::is_team_Set() const{
    return m_team_isSet;
}

bool OAIPlayStat::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAIPlayStat::getTeamScore() const {
    return m_team_score;
}
void OAIPlayStat::setTeamScore(const qint32 &team_score) {
    m_team_score = team_score;
    m_team_score_isSet = true;
}

bool OAIPlayStat::is_team_score_Set() const{
    return m_team_score_isSet;
}

bool OAIPlayStat::is_team_score_Valid() const{
    return m_team_score_isValid;
}

qint32 OAIPlayStat::getWeek() const {
    return m_week;
}
void OAIPlayStat::setWeek(const qint32 &week) {
    m_week = week;
    m_week_isSet = true;
}

bool OAIPlayStat::is_week_Set() const{
    return m_week_isSet;
}

bool OAIPlayStat::is_week_Valid() const{
    return m_week_isValid;
}

qint32 OAIPlayStat::getYardsToGoal() const {
    return m_yards_to_goal;
}
void OAIPlayStat::setYardsToGoal(const qint32 &yards_to_goal) {
    m_yards_to_goal = yards_to_goal;
    m_yards_to_goal_isSet = true;
}

bool OAIPlayStat::is_yards_to_goal_Set() const{
    return m_yards_to_goal_isSet;
}

bool OAIPlayStat::is_yards_to_goal_Valid() const{
    return m_yards_to_goal_isValid;
}

bool OAIPlayStat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_athlete_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_athlete_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clock.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_down_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drive_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stat_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yards_to_goal_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayStat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
