/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILivePlayByPlay_drives_inner.h
 *
 * 
 */

#ifndef OAILivePlayByPlay_drives_inner_H
#define OAILivePlayByPlay_drives_inner_H

#include <QJsonObject>

#include "OAILivePlayByPlay_drives_inner_plays_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILivePlayByPlay_drives_inner_plays_inner;

class OAILivePlayByPlay_drives_inner : public OAIObject {
public:
    OAILivePlayByPlay_drives_inner();
    OAILivePlayByPlay_drives_inner(QString json);
    ~OAILivePlayByPlay_drives_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDefense() const;
    void setDefense(const QString &defense);
    bool is_defense_Set() const;
    bool is_defense_Valid() const;

    qint32 getDefenseId() const;
    void setDefenseId(const qint32 &defense_id);
    bool is_defense_id_Set() const;
    bool is_defense_id_Valid() const;

    QString getDuration() const;
    void setDuration(const QString &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    QString getEndClock() const;
    void setEndClock(const QString &end_clock);
    bool is_end_clock_Set() const;
    bool is_end_clock_Valid() const;

    qint32 getEndPeriod() const;
    void setEndPeriod(const qint32 &end_period);
    bool is_end_period_Set() const;
    bool is_end_period_Valid() const;

    qint32 getEndYardsToGoal() const;
    void setEndYardsToGoal(const qint32 &end_yards_to_goal);
    bool is_end_yards_to_goal_Set() const;
    bool is_end_yards_to_goal_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getOffense() const;
    void setOffense(const QString &offense);
    bool is_offense_Set() const;
    bool is_offense_Valid() const;

    qint32 getOffenseId() const;
    void setOffenseId(const qint32 &offense_id);
    bool is_offense_id_Set() const;
    bool is_offense_id_Valid() const;

    qint32 getPlayCount() const;
    void setPlayCount(const qint32 &play_count);
    bool is_play_count_Set() const;
    bool is_play_count_Valid() const;

    QList<OAILivePlayByPlay_drives_inner_plays_inner> getPlays() const;
    void setPlays(const QList<OAILivePlayByPlay_drives_inner_plays_inner> &plays);
    bool is_plays_Set() const;
    bool is_plays_Valid() const;

    bool isScoringOpportunity() const;
    void setScoringOpportunity(const bool &scoring_opportunity);
    bool is_scoring_opportunity_Set() const;
    bool is_scoring_opportunity_Valid() const;

    QString getStartClock() const;
    void setStartClock(const QString &start_clock);
    bool is_start_clock_Set() const;
    bool is_start_clock_Valid() const;

    qint32 getStartPeriod() const;
    void setStartPeriod(const qint32 &start_period);
    bool is_start_period_Set() const;
    bool is_start_period_Valid() const;

    qint32 getStartYardsToGoal() const;
    void setStartYardsToGoal(const qint32 &start_yards_to_goal);
    bool is_start_yards_to_goal_Set() const;
    bool is_start_yards_to_goal_Valid() const;

    qint32 getYards() const;
    void setYards(const qint32 &yards);
    bool is_yards_Set() const;
    bool is_yards_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_defense;
    bool m_defense_isSet;
    bool m_defense_isValid;

    qint32 m_defense_id;
    bool m_defense_id_isSet;
    bool m_defense_id_isValid;

    QString m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    QString m_end_clock;
    bool m_end_clock_isSet;
    bool m_end_clock_isValid;

    qint32 m_end_period;
    bool m_end_period_isSet;
    bool m_end_period_isValid;

    qint32 m_end_yards_to_goal;
    bool m_end_yards_to_goal_isSet;
    bool m_end_yards_to_goal_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_offense;
    bool m_offense_isSet;
    bool m_offense_isValid;

    qint32 m_offense_id;
    bool m_offense_id_isSet;
    bool m_offense_id_isValid;

    qint32 m_play_count;
    bool m_play_count_isSet;
    bool m_play_count_isValid;

    QList<OAILivePlayByPlay_drives_inner_plays_inner> m_plays;
    bool m_plays_isSet;
    bool m_plays_isValid;

    bool m_scoring_opportunity;
    bool m_scoring_opportunity_isSet;
    bool m_scoring_opportunity_isValid;

    QString m_start_clock;
    bool m_start_clock_isSet;
    bool m_start_clock_isValid;

    qint32 m_start_period;
    bool m_start_period_isSet;
    bool m_start_period_isValid;

    qint32 m_start_yards_to_goal;
    bool m_start_yards_to_goal_isSet;
    bool m_start_yards_to_goal_isValid;

    qint32 m_yards;
    bool m_yards_isSet;
    bool m_yards_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILivePlayByPlay_drives_inner)

#endif // OAILivePlayByPlay_drives_inner_H
