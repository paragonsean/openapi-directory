/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGameLines.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGameLines::OAIGameLines(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGameLines::OAIGameLines() {
    this->initializeModel();
}

OAIGameLines::~OAIGameLines() {}

void OAIGameLines::initializeModel() {

    m_away_conference_isSet = false;
    m_away_conference_isValid = false;

    m_away_score_isSet = false;
    m_away_score_isValid = false;

    m_away_team_isSet = false;
    m_away_team_isValid = false;

    m_home_conference_isSet = false;
    m_home_conference_isValid = false;

    m_home_score_isSet = false;
    m_home_score_isValid = false;

    m_home_team_isSet = false;
    m_home_team_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_season_type_isSet = false;
    m_season_type_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_week_isSet = false;
    m_week_isValid = false;
}

void OAIGameLines::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGameLines::fromJsonObject(QJsonObject json) {

    m_away_conference_isValid = ::OpenAPI::fromJsonValue(m_away_conference, json[QString("awayConference")]);
    m_away_conference_isSet = !json[QString("awayConference")].isNull() && m_away_conference_isValid;

    m_away_score_isValid = ::OpenAPI::fromJsonValue(m_away_score, json[QString("awayScore")]);
    m_away_score_isSet = !json[QString("awayScore")].isNull() && m_away_score_isValid;

    m_away_team_isValid = ::OpenAPI::fromJsonValue(m_away_team, json[QString("awayTeam")]);
    m_away_team_isSet = !json[QString("awayTeam")].isNull() && m_away_team_isValid;

    m_home_conference_isValid = ::OpenAPI::fromJsonValue(m_home_conference, json[QString("homeConference")]);
    m_home_conference_isSet = !json[QString("homeConference")].isNull() && m_home_conference_isValid;

    m_home_score_isValid = ::OpenAPI::fromJsonValue(m_home_score, json[QString("homeScore")]);
    m_home_score_isSet = !json[QString("homeScore")].isNull() && m_home_score_isValid;

    m_home_team_isValid = ::OpenAPI::fromJsonValue(m_home_team, json[QString("homeTeam")]);
    m_home_team_isSet = !json[QString("homeTeam")].isNull() && m_home_team_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("season")]);
    m_season_isSet = !json[QString("season")].isNull() && m_season_isValid;

    m_season_type_isValid = ::OpenAPI::fromJsonValue(m_season_type, json[QString("seasonType")]);
    m_season_type_isSet = !json[QString("seasonType")].isNull() && m_season_type_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_week_isValid = ::OpenAPI::fromJsonValue(m_week, json[QString("week")]);
    m_week_isSet = !json[QString("week")].isNull() && m_week_isValid;
}

QString OAIGameLines::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGameLines::asJsonObject() const {
    QJsonObject obj;
    if (m_away_conference_isSet) {
        obj.insert(QString("awayConference"), ::OpenAPI::toJsonValue(m_away_conference));
    }
    if (m_away_score_isSet) {
        obj.insert(QString("awayScore"), ::OpenAPI::toJsonValue(m_away_score));
    }
    if (m_away_team_isSet) {
        obj.insert(QString("awayTeam"), ::OpenAPI::toJsonValue(m_away_team));
    }
    if (m_home_conference_isSet) {
        obj.insert(QString("homeConference"), ::OpenAPI::toJsonValue(m_home_conference));
    }
    if (m_home_score_isSet) {
        obj.insert(QString("homeScore"), ::OpenAPI::toJsonValue(m_home_score));
    }
    if (m_home_team_isSet) {
        obj.insert(QString("homeTeam"), ::OpenAPI::toJsonValue(m_home_team));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_season_isSet) {
        obj.insert(QString("season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_season_type_isSet) {
        obj.insert(QString("seasonType"), ::OpenAPI::toJsonValue(m_season_type));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_week_isSet) {
        obj.insert(QString("week"), ::OpenAPI::toJsonValue(m_week));
    }
    return obj;
}

QString OAIGameLines::getAwayConference() const {
    return m_away_conference;
}
void OAIGameLines::setAwayConference(const QString &away_conference) {
    m_away_conference = away_conference;
    m_away_conference_isSet = true;
}

bool OAIGameLines::is_away_conference_Set() const{
    return m_away_conference_isSet;
}

bool OAIGameLines::is_away_conference_Valid() const{
    return m_away_conference_isValid;
}

qint32 OAIGameLines::getAwayScore() const {
    return m_away_score;
}
void OAIGameLines::setAwayScore(const qint32 &away_score) {
    m_away_score = away_score;
    m_away_score_isSet = true;
}

bool OAIGameLines::is_away_score_Set() const{
    return m_away_score_isSet;
}

bool OAIGameLines::is_away_score_Valid() const{
    return m_away_score_isValid;
}

QString OAIGameLines::getAwayTeam() const {
    return m_away_team;
}
void OAIGameLines::setAwayTeam(const QString &away_team) {
    m_away_team = away_team;
    m_away_team_isSet = true;
}

bool OAIGameLines::is_away_team_Set() const{
    return m_away_team_isSet;
}

bool OAIGameLines::is_away_team_Valid() const{
    return m_away_team_isValid;
}

QString OAIGameLines::getHomeConference() const {
    return m_home_conference;
}
void OAIGameLines::setHomeConference(const QString &home_conference) {
    m_home_conference = home_conference;
    m_home_conference_isSet = true;
}

bool OAIGameLines::is_home_conference_Set() const{
    return m_home_conference_isSet;
}

bool OAIGameLines::is_home_conference_Valid() const{
    return m_home_conference_isValid;
}

qint32 OAIGameLines::getHomeScore() const {
    return m_home_score;
}
void OAIGameLines::setHomeScore(const qint32 &home_score) {
    m_home_score = home_score;
    m_home_score_isSet = true;
}

bool OAIGameLines::is_home_score_Set() const{
    return m_home_score_isSet;
}

bool OAIGameLines::is_home_score_Valid() const{
    return m_home_score_isValid;
}

QString OAIGameLines::getHomeTeam() const {
    return m_home_team;
}
void OAIGameLines::setHomeTeam(const QString &home_team) {
    m_home_team = home_team;
    m_home_team_isSet = true;
}

bool OAIGameLines::is_home_team_Set() const{
    return m_home_team_isSet;
}

bool OAIGameLines::is_home_team_Valid() const{
    return m_home_team_isValid;
}

qint32 OAIGameLines::getId() const {
    return m_id;
}
void OAIGameLines::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGameLines::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGameLines::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIGameLines_lines_inner> OAIGameLines::getLines() const {
    return m_lines;
}
void OAIGameLines::setLines(const QList<OAIGameLines_lines_inner> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAIGameLines::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAIGameLines::is_lines_Valid() const{
    return m_lines_isValid;
}

qint32 OAIGameLines::getSeason() const {
    return m_season;
}
void OAIGameLines::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIGameLines::is_season_Set() const{
    return m_season_isSet;
}

bool OAIGameLines::is_season_Valid() const{
    return m_season_isValid;
}

QString OAIGameLines::getSeasonType() const {
    return m_season_type;
}
void OAIGameLines::setSeasonType(const QString &season_type) {
    m_season_type = season_type;
    m_season_type_isSet = true;
}

bool OAIGameLines::is_season_type_Set() const{
    return m_season_type_isSet;
}

bool OAIGameLines::is_season_type_Valid() const{
    return m_season_type_isValid;
}

QString OAIGameLines::getStartDate() const {
    return m_start_date;
}
void OAIGameLines::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIGameLines::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIGameLines::is_start_date_Valid() const{
    return m_start_date_isValid;
}

qint32 OAIGameLines::getWeek() const {
    return m_week;
}
void OAIGameLines::setWeek(const qint32 &week) {
    m_week = week;
    m_week_isSet = true;
}

bool OAIGameLines::is_week_Set() const{
    return m_week_isSet;
}

bool OAIGameLines::is_week_Valid() const{
    return m_week_isValid;
}

bool OAIGameLines::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_away_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGameLines::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
