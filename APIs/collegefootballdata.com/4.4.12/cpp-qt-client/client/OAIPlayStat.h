/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPlayStat.h
 *
 * 
 */

#ifndef OAIPlayStat_H
#define OAIPlayStat_H

#include <QJsonObject>

#include "OAIDrive_end_time.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDrive_end_time;

class OAIPlayStat : public OAIObject {
public:
    OAIPlayStat();
    OAIPlayStat(QString json);
    ~OAIPlayStat() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAthleteId() const;
    void setAthleteId(const qint32 &athlete_id);
    bool is_athlete_id_Set() const;
    bool is_athlete_id_Valid() const;

    QString getAthleteName() const;
    void setAthleteName(const QString &athlete_name);
    bool is_athlete_name_Set() const;
    bool is_athlete_name_Valid() const;

    OAIDrive_end_time getClock() const;
    void setClock(const OAIDrive_end_time &clock);
    bool is_clock_Set() const;
    bool is_clock_Valid() const;

    QString getConference() const;
    void setConference(const QString &conference);
    bool is_conference_Set() const;
    bool is_conference_Valid() const;

    qint32 getDistance() const;
    void setDistance(const qint32 &distance);
    bool is_distance_Set() const;
    bool is_distance_Valid() const;

    qint32 getDown() const;
    void setDown(const qint32 &down);
    bool is_down_Set() const;
    bool is_down_Valid() const;

    qint32 getDriveId() const;
    void setDriveId(const qint32 &drive_id);
    bool is_drive_id_Set() const;
    bool is_drive_id_Valid() const;

    qint32 getGameId() const;
    void setGameId(const qint32 &game_id);
    bool is_game_id_Set() const;
    bool is_game_id_Valid() const;

    QString getOpponent() const;
    void setOpponent(const QString &opponent);
    bool is_opponent_Set() const;
    bool is_opponent_Valid() const;

    qint32 getOpponentScore() const;
    void setOpponentScore(const qint32 &opponent_score);
    bool is_opponent_score_Set() const;
    bool is_opponent_score_Valid() const;

    qint32 getPeriod() const;
    void setPeriod(const qint32 &period);
    bool is_period_Set() const;
    bool is_period_Valid() const;

    qint32 getPlayId() const;
    void setPlayId(const qint32 &play_id);
    bool is_play_id_Set() const;
    bool is_play_id_Valid() const;

    qint32 getSeason() const;
    void setSeason(const qint32 &season);
    bool is_season_Set() const;
    bool is_season_Valid() const;

    qint32 getStat() const;
    void setStat(const qint32 &stat);
    bool is_stat_Set() const;
    bool is_stat_Valid() const;

    QString getStatType() const;
    void setStatType(const QString &stat_type);
    bool is_stat_type_Set() const;
    bool is_stat_type_Valid() const;

    QString getTeam() const;
    void setTeam(const QString &team);
    bool is_team_Set() const;
    bool is_team_Valid() const;

    qint32 getTeamScore() const;
    void setTeamScore(const qint32 &team_score);
    bool is_team_score_Set() const;
    bool is_team_score_Valid() const;

    qint32 getWeek() const;
    void setWeek(const qint32 &week);
    bool is_week_Set() const;
    bool is_week_Valid() const;

    qint32 getYardsToGoal() const;
    void setYardsToGoal(const qint32 &yards_to_goal);
    bool is_yards_to_goal_Set() const;
    bool is_yards_to_goal_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_athlete_id;
    bool m_athlete_id_isSet;
    bool m_athlete_id_isValid;

    QString m_athlete_name;
    bool m_athlete_name_isSet;
    bool m_athlete_name_isValid;

    OAIDrive_end_time m_clock;
    bool m_clock_isSet;
    bool m_clock_isValid;

    QString m_conference;
    bool m_conference_isSet;
    bool m_conference_isValid;

    qint32 m_distance;
    bool m_distance_isSet;
    bool m_distance_isValid;

    qint32 m_down;
    bool m_down_isSet;
    bool m_down_isValid;

    qint32 m_drive_id;
    bool m_drive_id_isSet;
    bool m_drive_id_isValid;

    qint32 m_game_id;
    bool m_game_id_isSet;
    bool m_game_id_isValid;

    QString m_opponent;
    bool m_opponent_isSet;
    bool m_opponent_isValid;

    qint32 m_opponent_score;
    bool m_opponent_score_isSet;
    bool m_opponent_score_isValid;

    qint32 m_period;
    bool m_period_isSet;
    bool m_period_isValid;

    qint32 m_play_id;
    bool m_play_id_isSet;
    bool m_play_id_isValid;

    qint32 m_season;
    bool m_season_isSet;
    bool m_season_isValid;

    qint32 m_stat;
    bool m_stat_isSet;
    bool m_stat_isValid;

    QString m_stat_type;
    bool m_stat_type_isSet;
    bool m_stat_type_isValid;

    QString m_team;
    bool m_team_isSet;
    bool m_team_isValid;

    qint32 m_team_score;
    bool m_team_score_isSet;
    bool m_team_score_isValid;

    qint32 m_week;
    bool m_week_isSet;
    bool m_week_isValid;

    qint32 m_yards_to_goal;
    bool m_yards_to_goal_isSet;
    bool m_yards_to_goal_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPlayStat)

#endif // OAIPlayStat_H
