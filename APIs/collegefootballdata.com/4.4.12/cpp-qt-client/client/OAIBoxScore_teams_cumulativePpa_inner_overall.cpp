/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBoxScore_teams_cumulativePpa_inner_overall.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBoxScore_teams_cumulativePpa_inner_overall::OAIBoxScore_teams_cumulativePpa_inner_overall(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBoxScore_teams_cumulativePpa_inner_overall::OAIBoxScore_teams_cumulativePpa_inner_overall() {
    this->initializeModel();
}

OAIBoxScore_teams_cumulativePpa_inner_overall::~OAIBoxScore_teams_cumulativePpa_inner_overall() {}

void OAIBoxScore_teams_cumulativePpa_inner_overall::initializeModel() {

    m_quarter1_isSet = false;
    m_quarter1_isValid = false;

    m_quarter2_isSet = false;
    m_quarter2_isValid = false;

    m_quarter3_isSet = false;
    m_quarter3_isValid = false;

    m_quarter4_isSet = false;
    m_quarter4_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIBoxScore_teams_cumulativePpa_inner_overall::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBoxScore_teams_cumulativePpa_inner_overall::fromJsonObject(QJsonObject json) {

    m_quarter1_isValid = ::OpenAPI::fromJsonValue(m_quarter1, json[QString("quarter1")]);
    m_quarter1_isSet = !json[QString("quarter1")].isNull() && m_quarter1_isValid;

    m_quarter2_isValid = ::OpenAPI::fromJsonValue(m_quarter2, json[QString("quarter2")]);
    m_quarter2_isSet = !json[QString("quarter2")].isNull() && m_quarter2_isValid;

    m_quarter3_isValid = ::OpenAPI::fromJsonValue(m_quarter3, json[QString("quarter3")]);
    m_quarter3_isSet = !json[QString("quarter3")].isNull() && m_quarter3_isValid;

    m_quarter4_isValid = ::OpenAPI::fromJsonValue(m_quarter4, json[QString("quarter4")]);
    m_quarter4_isSet = !json[QString("quarter4")].isNull() && m_quarter4_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIBoxScore_teams_cumulativePpa_inner_overall::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBoxScore_teams_cumulativePpa_inner_overall::asJsonObject() const {
    QJsonObject obj;
    if (m_quarter1_isSet) {
        obj.insert(QString("quarter1"), ::OpenAPI::toJsonValue(m_quarter1));
    }
    if (m_quarter2_isSet) {
        obj.insert(QString("quarter2"), ::OpenAPI::toJsonValue(m_quarter2));
    }
    if (m_quarter3_isSet) {
        obj.insert(QString("quarter3"), ::OpenAPI::toJsonValue(m_quarter3));
    }
    if (m_quarter4_isSet) {
        obj.insert(QString("quarter4"), ::OpenAPI::toJsonValue(m_quarter4));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

double OAIBoxScore_teams_cumulativePpa_inner_overall::getQuarter1() const {
    return m_quarter1;
}
void OAIBoxScore_teams_cumulativePpa_inner_overall::setQuarter1(const double &quarter1) {
    m_quarter1 = quarter1;
    m_quarter1_isSet = true;
}

bool OAIBoxScore_teams_cumulativePpa_inner_overall::is_quarter1_Set() const{
    return m_quarter1_isSet;
}

bool OAIBoxScore_teams_cumulativePpa_inner_overall::is_quarter1_Valid() const{
    return m_quarter1_isValid;
}

double OAIBoxScore_teams_cumulativePpa_inner_overall::getQuarter2() const {
    return m_quarter2;
}
void OAIBoxScore_teams_cumulativePpa_inner_overall::setQuarter2(const double &quarter2) {
    m_quarter2 = quarter2;
    m_quarter2_isSet = true;
}

bool OAIBoxScore_teams_cumulativePpa_inner_overall::is_quarter2_Set() const{
    return m_quarter2_isSet;
}

bool OAIBoxScore_teams_cumulativePpa_inner_overall::is_quarter2_Valid() const{
    return m_quarter2_isValid;
}

double OAIBoxScore_teams_cumulativePpa_inner_overall::getQuarter3() const {
    return m_quarter3;
}
void OAIBoxScore_teams_cumulativePpa_inner_overall::setQuarter3(const double &quarter3) {
    m_quarter3 = quarter3;
    m_quarter3_isSet = true;
}

bool OAIBoxScore_teams_cumulativePpa_inner_overall::is_quarter3_Set() const{
    return m_quarter3_isSet;
}

bool OAIBoxScore_teams_cumulativePpa_inner_overall::is_quarter3_Valid() const{
    return m_quarter3_isValid;
}

double OAIBoxScore_teams_cumulativePpa_inner_overall::getQuarter4() const {
    return m_quarter4;
}
void OAIBoxScore_teams_cumulativePpa_inner_overall::setQuarter4(const double &quarter4) {
    m_quarter4 = quarter4;
    m_quarter4_isSet = true;
}

bool OAIBoxScore_teams_cumulativePpa_inner_overall::is_quarter4_Set() const{
    return m_quarter4_isSet;
}

bool OAIBoxScore_teams_cumulativePpa_inner_overall::is_quarter4_Valid() const{
    return m_quarter4_isValid;
}

double OAIBoxScore_teams_cumulativePpa_inner_overall::getTotal() const {
    return m_total;
}
void OAIBoxScore_teams_cumulativePpa_inner_overall::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIBoxScore_teams_cumulativePpa_inner_overall::is_total_Set() const{
    return m_total_isSet;
}

bool OAIBoxScore_teams_cumulativePpa_inner_overall::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIBoxScore_teams_cumulativePpa_inner_overall::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_quarter1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quarter2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quarter3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quarter4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBoxScore_teams_cumulativePpa_inner_overall::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
