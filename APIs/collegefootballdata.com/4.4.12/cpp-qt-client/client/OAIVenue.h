/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVenue.h
 *
 * 
 */

#ifndef OAIVenue_H
#define OAIVenue_H

#include <QJsonObject>

#include "OAIVenue_location.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIVenue_location;

class OAIVenue : public OAIObject {
public:
    OAIVenue();
    OAIVenue(QString json);
    ~OAIVenue() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCapacity() const;
    void setCapacity(const qint32 &capacity);
    bool is_capacity_Set() const;
    bool is_capacity_Valid() const;

    QString getCity() const;
    void setCity(const QString &city);
    bool is_city_Set() const;
    bool is_city_Valid() const;

    QString getCountryCode() const;
    void setCountryCode(const QString &country_code);
    bool is_country_code_Set() const;
    bool is_country_code_Valid() const;

    bool isDome() const;
    void setDome(const bool &dome);
    bool is_dome_Set() const;
    bool is_dome_Valid() const;

    double getElevation() const;
    void setElevation(const double &elevation);
    bool is_elevation_Set() const;
    bool is_elevation_Valid() const;

    bool isGrass() const;
    void setGrass(const bool &grass);
    bool is_grass_Set() const;
    bool is_grass_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIVenue_location getLocation() const;
    void setLocation(const OAIVenue_location &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getTimezone() const;
    void setTimezone(const QString &timezone);
    bool is_timezone_Set() const;
    bool is_timezone_Valid() const;

    qint32 getYearConstructed() const;
    void setYearConstructed(const qint32 &year_constructed);
    bool is_year_constructed_Set() const;
    bool is_year_constructed_Valid() const;

    QString getZip() const;
    void setZip(const QString &zip);
    bool is_zip_Set() const;
    bool is_zip_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_capacity;
    bool m_capacity_isSet;
    bool m_capacity_isValid;

    QString m_city;
    bool m_city_isSet;
    bool m_city_isValid;

    QString m_country_code;
    bool m_country_code_isSet;
    bool m_country_code_isValid;

    bool m_dome;
    bool m_dome_isSet;
    bool m_dome_isValid;

    double m_elevation;
    bool m_elevation_isSet;
    bool m_elevation_isValid;

    bool m_grass;
    bool m_grass_isSet;
    bool m_grass_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIVenue_location m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_timezone;
    bool m_timezone_isSet;
    bool m_timezone_isValid;

    qint32 m_year_constructed;
    bool m_year_constructed_isSet;
    bool m_year_constructed_isValid;

    QString m_zip;
    bool m_zip_isSet;
    bool m_zip_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVenue)

#endif // OAIVenue_H
