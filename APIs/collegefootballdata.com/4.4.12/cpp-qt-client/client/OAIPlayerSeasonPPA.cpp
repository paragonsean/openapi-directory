/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerSeasonPPA.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerSeasonPPA::OAIPlayerSeasonPPA(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerSeasonPPA::OAIPlayerSeasonPPA() {
    this->initializeModel();
}

OAIPlayerSeasonPPA::~OAIPlayerSeasonPPA() {}

void OAIPlayerSeasonPPA::initializeModel() {

    m_average_ppa_isSet = false;
    m_average_ppa_isValid = false;

    m_conference_isSet = false;
    m_conference_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_total_ppa_isSet = false;
    m_total_ppa_isValid = false;
}

void OAIPlayerSeasonPPA::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerSeasonPPA::fromJsonObject(QJsonObject json) {

    m_average_ppa_isValid = ::OpenAPI::fromJsonValue(m_average_ppa, json[QString("averagePPA")]);
    m_average_ppa_isSet = !json[QString("averagePPA")].isNull() && m_average_ppa_isValid;

    m_conference_isValid = ::OpenAPI::fromJsonValue(m_conference, json[QString("conference")]);
    m_conference_isSet = !json[QString("conference")].isNull() && m_conference_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("season")]);
    m_season_isSet = !json[QString("season")].isNull() && m_season_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_total_ppa_isValid = ::OpenAPI::fromJsonValue(m_total_ppa, json[QString("totalPPA")]);
    m_total_ppa_isSet = !json[QString("totalPPA")].isNull() && m_total_ppa_isValid;
}

QString OAIPlayerSeasonPPA::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerSeasonPPA::asJsonObject() const {
    QJsonObject obj;
    if (m_average_ppa.isSet()) {
        obj.insert(QString("averagePPA"), ::OpenAPI::toJsonValue(m_average_ppa));
    }
    if (m_conference_isSet) {
        obj.insert(QString("conference"), ::OpenAPI::toJsonValue(m_conference));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_season_isSet) {
        obj.insert(QString("season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_total_ppa.isSet()) {
        obj.insert(QString("totalPPA"), ::OpenAPI::toJsonValue(m_total_ppa));
    }
    return obj;
}

OAIPlayerSeasonPPA_averagePPA OAIPlayerSeasonPPA::getAveragePpa() const {
    return m_average_ppa;
}
void OAIPlayerSeasonPPA::setAveragePpa(const OAIPlayerSeasonPPA_averagePPA &average_ppa) {
    m_average_ppa = average_ppa;
    m_average_ppa_isSet = true;
}

bool OAIPlayerSeasonPPA::is_average_ppa_Set() const{
    return m_average_ppa_isSet;
}

bool OAIPlayerSeasonPPA::is_average_ppa_Valid() const{
    return m_average_ppa_isValid;
}

QString OAIPlayerSeasonPPA::getConference() const {
    return m_conference;
}
void OAIPlayerSeasonPPA::setConference(const QString &conference) {
    m_conference = conference;
    m_conference_isSet = true;
}

bool OAIPlayerSeasonPPA::is_conference_Set() const{
    return m_conference_isSet;
}

bool OAIPlayerSeasonPPA::is_conference_Valid() const{
    return m_conference_isValid;
}

qint32 OAIPlayerSeasonPPA::getId() const {
    return m_id;
}
void OAIPlayerSeasonPPA::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPlayerSeasonPPA::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPlayerSeasonPPA::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPlayerSeasonPPA::getName() const {
    return m_name;
}
void OAIPlayerSeasonPPA::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlayerSeasonPPA::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlayerSeasonPPA::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPlayerSeasonPPA::getPosition() const {
    return m_position;
}
void OAIPlayerSeasonPPA::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIPlayerSeasonPPA::is_position_Set() const{
    return m_position_isSet;
}

bool OAIPlayerSeasonPPA::is_position_Valid() const{
    return m_position_isValid;
}

qint32 OAIPlayerSeasonPPA::getSeason() const {
    return m_season;
}
void OAIPlayerSeasonPPA::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIPlayerSeasonPPA::is_season_Set() const{
    return m_season_isSet;
}

bool OAIPlayerSeasonPPA::is_season_Valid() const{
    return m_season_isValid;
}

QString OAIPlayerSeasonPPA::getTeam() const {
    return m_team;
}
void OAIPlayerSeasonPPA::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIPlayerSeasonPPA::is_team_Set() const{
    return m_team_isSet;
}

bool OAIPlayerSeasonPPA::is_team_Valid() const{
    return m_team_isValid;
}

OAIPlayerSeasonPPA_averagePPA OAIPlayerSeasonPPA::getTotalPpa() const {
    return m_total_ppa;
}
void OAIPlayerSeasonPPA::setTotalPpa(const OAIPlayerSeasonPPA_averagePPA &total_ppa) {
    m_total_ppa = total_ppa;
    m_total_ppa_isSet = true;
}

bool OAIPlayerSeasonPPA::is_total_ppa_Set() const{
    return m_total_ppa_isSet;
}

bool OAIPlayerSeasonPPA::is_total_ppa_Valid() const{
    return m_total_ppa_isValid;
}

bool OAIPlayerSeasonPPA::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_ppa.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_ppa.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerSeasonPPA::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
