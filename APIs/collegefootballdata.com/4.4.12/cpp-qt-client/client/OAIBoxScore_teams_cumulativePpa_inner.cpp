/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBoxScore_teams_cumulativePpa_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBoxScore_teams_cumulativePpa_inner::OAIBoxScore_teams_cumulativePpa_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBoxScore_teams_cumulativePpa_inner::OAIBoxScore_teams_cumulativePpa_inner() {
    this->initializeModel();
}

OAIBoxScore_teams_cumulativePpa_inner::~OAIBoxScore_teams_cumulativePpa_inner() {}

void OAIBoxScore_teams_cumulativePpa_inner::initializeModel() {

    m_overall_isSet = false;
    m_overall_isValid = false;

    m_passing_isSet = false;
    m_passing_isValid = false;

    m_plays_isSet = false;
    m_plays_isValid = false;

    m_rushing_isSet = false;
    m_rushing_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;
}

void OAIBoxScore_teams_cumulativePpa_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBoxScore_teams_cumulativePpa_inner::fromJsonObject(QJsonObject json) {

    m_overall_isValid = ::OpenAPI::fromJsonValue(m_overall, json[QString("overall")]);
    m_overall_isSet = !json[QString("overall")].isNull() && m_overall_isValid;

    m_passing_isValid = ::OpenAPI::fromJsonValue(m_passing, json[QString("passing")]);
    m_passing_isSet = !json[QString("passing")].isNull() && m_passing_isValid;

    m_plays_isValid = ::OpenAPI::fromJsonValue(m_plays, json[QString("plays")]);
    m_plays_isSet = !json[QString("plays")].isNull() && m_plays_isValid;

    m_rushing_isValid = ::OpenAPI::fromJsonValue(m_rushing, json[QString("rushing")]);
    m_rushing_isSet = !json[QString("rushing")].isNull() && m_rushing_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;
}

QString OAIBoxScore_teams_cumulativePpa_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBoxScore_teams_cumulativePpa_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_overall.isSet()) {
        obj.insert(QString("overall"), ::OpenAPI::toJsonValue(m_overall));
    }
    if (m_passing.isSet()) {
        obj.insert(QString("passing"), ::OpenAPI::toJsonValue(m_passing));
    }
    if (m_plays_isSet) {
        obj.insert(QString("plays"), ::OpenAPI::toJsonValue(m_plays));
    }
    if (m_rushing.isSet()) {
        obj.insert(QString("rushing"), ::OpenAPI::toJsonValue(m_rushing));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    return obj;
}

OAIBoxScore_teams_cumulativePpa_inner_overall OAIBoxScore_teams_cumulativePpa_inner::getOverall() const {
    return m_overall;
}
void OAIBoxScore_teams_cumulativePpa_inner::setOverall(const OAIBoxScore_teams_cumulativePpa_inner_overall &overall) {
    m_overall = overall;
    m_overall_isSet = true;
}

bool OAIBoxScore_teams_cumulativePpa_inner::is_overall_Set() const{
    return m_overall_isSet;
}

bool OAIBoxScore_teams_cumulativePpa_inner::is_overall_Valid() const{
    return m_overall_isValid;
}

OAIBoxScore_teams_cumulativePpa_inner_overall OAIBoxScore_teams_cumulativePpa_inner::getPassing() const {
    return m_passing;
}
void OAIBoxScore_teams_cumulativePpa_inner::setPassing(const OAIBoxScore_teams_cumulativePpa_inner_overall &passing) {
    m_passing = passing;
    m_passing_isSet = true;
}

bool OAIBoxScore_teams_cumulativePpa_inner::is_passing_Set() const{
    return m_passing_isSet;
}

bool OAIBoxScore_teams_cumulativePpa_inner::is_passing_Valid() const{
    return m_passing_isValid;
}

double OAIBoxScore_teams_cumulativePpa_inner::getPlays() const {
    return m_plays;
}
void OAIBoxScore_teams_cumulativePpa_inner::setPlays(const double &plays) {
    m_plays = plays;
    m_plays_isSet = true;
}

bool OAIBoxScore_teams_cumulativePpa_inner::is_plays_Set() const{
    return m_plays_isSet;
}

bool OAIBoxScore_teams_cumulativePpa_inner::is_plays_Valid() const{
    return m_plays_isValid;
}

OAIBoxScore_teams_cumulativePpa_inner_overall OAIBoxScore_teams_cumulativePpa_inner::getRushing() const {
    return m_rushing;
}
void OAIBoxScore_teams_cumulativePpa_inner::setRushing(const OAIBoxScore_teams_cumulativePpa_inner_overall &rushing) {
    m_rushing = rushing;
    m_rushing_isSet = true;
}

bool OAIBoxScore_teams_cumulativePpa_inner::is_rushing_Set() const{
    return m_rushing_isSet;
}

bool OAIBoxScore_teams_cumulativePpa_inner::is_rushing_Valid() const{
    return m_rushing_isValid;
}

QString OAIBoxScore_teams_cumulativePpa_inner::getTeam() const {
    return m_team;
}
void OAIBoxScore_teams_cumulativePpa_inner::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIBoxScore_teams_cumulativePpa_inner::is_team_Set() const{
    return m_team_isSet;
}

bool OAIBoxScore_teams_cumulativePpa_inner::is_team_Valid() const{
    return m_team_isValid;
}

bool OAIBoxScore_teams_cumulativePpa_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_overall.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_plays_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rushing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBoxScore_teams_cumulativePpa_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
