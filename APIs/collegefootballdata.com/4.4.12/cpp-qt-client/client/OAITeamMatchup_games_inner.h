/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITeamMatchup_games_inner.h
 *
 * 
 */

#ifndef OAITeamMatchup_games_inner_H
#define OAITeamMatchup_games_inner_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITeamMatchup_games_inner : public OAIObject {
public:
    OAITeamMatchup_games_inner();
    OAITeamMatchup_games_inner(QString json);
    ~OAITeamMatchup_games_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAwayScore() const;
    void setAwayScore(const qint32 &away_score);
    bool is_away_score_Set() const;
    bool is_away_score_Valid() const;

    QString getAwayTeam() const;
    void setAwayTeam(const QString &away_team);
    bool is_away_team_Set() const;
    bool is_away_team_Valid() const;

    QString getDate() const;
    void setDate(const QString &date);
    bool is_date_Set() const;
    bool is_date_Valid() const;

    qint32 getHomeScore() const;
    void setHomeScore(const qint32 &home_score);
    bool is_home_score_Set() const;
    bool is_home_score_Valid() const;

    QString getHomeTeam() const;
    void setHomeTeam(const QString &home_team);
    bool is_home_team_Set() const;
    bool is_home_team_Valid() const;

    bool isNeutralSite() const;
    void setNeutralSite(const bool &neutral_site);
    bool is_neutral_site_Set() const;
    bool is_neutral_site_Valid() const;

    qint32 getSeason() const;
    void setSeason(const qint32 &season);
    bool is_season_Set() const;
    bool is_season_Valid() const;

    QString getSeasonType() const;
    void setSeasonType(const QString &season_type);
    bool is_season_type_Set() const;
    bool is_season_type_Valid() const;

    QString getVenue() const;
    void setVenue(const QString &venue);
    bool is_venue_Set() const;
    bool is_venue_Valid() const;

    qint32 getWeek() const;
    void setWeek(const qint32 &week);
    bool is_week_Set() const;
    bool is_week_Valid() const;

    QString getWinner() const;
    void setWinner(const QString &winner);
    bool is_winner_Set() const;
    bool is_winner_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_away_score;
    bool m_away_score_isSet;
    bool m_away_score_isValid;

    QString m_away_team;
    bool m_away_team_isSet;
    bool m_away_team_isValid;

    QString m_date;
    bool m_date_isSet;
    bool m_date_isValid;

    qint32 m_home_score;
    bool m_home_score_isSet;
    bool m_home_score_isValid;

    QString m_home_team;
    bool m_home_team_isSet;
    bool m_home_team_isValid;

    bool m_neutral_site;
    bool m_neutral_site_isSet;
    bool m_neutral_site_isValid;

    qint32 m_season;
    bool m_season_isSet;
    bool m_season_isValid;

    QString m_season_type;
    bool m_season_type_isSet;
    bool m_season_type_isValid;

    QString m_venue;
    bool m_venue_isSet;
    bool m_venue_isValid;

    qint32 m_week;
    bool m_week_isSet;
    bool m_week_isValid;

    QString m_winner;
    bool m_winner_isSet;
    bool m_winner_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITeamMatchup_games_inner)

#endif // OAITeamMatchup_games_inner_H
