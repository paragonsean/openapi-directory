/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayWP.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayWP::OAIPlayWP(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayWP::OAIPlayWP() {
    this->initializeModel();
}

OAIPlayWP::~OAIPlayWP() {}

void OAIPlayWP::initializeModel() {

    m_away_isSet = false;
    m_away_isValid = false;

    m_away_id_isSet = false;
    m_away_id_isValid = false;

    m_away_score_isSet = false;
    m_away_score_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_down_isSet = false;
    m_down_isValid = false;

    m_games_id_isSet = false;
    m_games_id_isValid = false;

    m_home_isSet = false;
    m_home_isValid = false;

    m_home_ball_isSet = false;
    m_home_ball_isValid = false;

    m_home_id_isSet = false;
    m_home_id_isValid = false;

    m_home_score_isSet = false;
    m_home_score_isValid = false;

    m_home_win_prob_isSet = false;
    m_home_win_prob_isValid = false;

    m_play_id_isSet = false;
    m_play_id_isValid = false;

    m_play_number_isSet = false;
    m_play_number_isValid = false;

    m_play_text_isSet = false;
    m_play_text_isValid = false;

    m_spread_isSet = false;
    m_spread_isValid = false;

    m_time_remaining_isSet = false;
    m_time_remaining_isValid = false;

    m_yard_line_isSet = false;
    m_yard_line_isValid = false;
}

void OAIPlayWP::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayWP::fromJsonObject(QJsonObject json) {

    m_away_isValid = ::OpenAPI::fromJsonValue(m_away, json[QString("away")]);
    m_away_isSet = !json[QString("away")].isNull() && m_away_isValid;

    m_away_id_isValid = ::OpenAPI::fromJsonValue(m_away_id, json[QString("awayId")]);
    m_away_id_isSet = !json[QString("awayId")].isNull() && m_away_id_isValid;

    m_away_score_isValid = ::OpenAPI::fromJsonValue(m_away_score, json[QString("awayScore")]);
    m_away_score_isSet = !json[QString("awayScore")].isNull() && m_away_score_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_down_isValid = ::OpenAPI::fromJsonValue(m_down, json[QString("down")]);
    m_down_isSet = !json[QString("down")].isNull() && m_down_isValid;

    m_games_id_isValid = ::OpenAPI::fromJsonValue(m_games_id, json[QString("gamesId")]);
    m_games_id_isSet = !json[QString("gamesId")].isNull() && m_games_id_isValid;

    m_home_isValid = ::OpenAPI::fromJsonValue(m_home, json[QString("home")]);
    m_home_isSet = !json[QString("home")].isNull() && m_home_isValid;

    m_home_ball_isValid = ::OpenAPI::fromJsonValue(m_home_ball, json[QString("homeBall")]);
    m_home_ball_isSet = !json[QString("homeBall")].isNull() && m_home_ball_isValid;

    m_home_id_isValid = ::OpenAPI::fromJsonValue(m_home_id, json[QString("homeId")]);
    m_home_id_isSet = !json[QString("homeId")].isNull() && m_home_id_isValid;

    m_home_score_isValid = ::OpenAPI::fromJsonValue(m_home_score, json[QString("homeScore")]);
    m_home_score_isSet = !json[QString("homeScore")].isNull() && m_home_score_isValid;

    m_home_win_prob_isValid = ::OpenAPI::fromJsonValue(m_home_win_prob, json[QString("homeWinProb")]);
    m_home_win_prob_isSet = !json[QString("homeWinProb")].isNull() && m_home_win_prob_isValid;

    m_play_id_isValid = ::OpenAPI::fromJsonValue(m_play_id, json[QString("playId")]);
    m_play_id_isSet = !json[QString("playId")].isNull() && m_play_id_isValid;

    m_play_number_isValid = ::OpenAPI::fromJsonValue(m_play_number, json[QString("playNumber")]);
    m_play_number_isSet = !json[QString("playNumber")].isNull() && m_play_number_isValid;

    m_play_text_isValid = ::OpenAPI::fromJsonValue(m_play_text, json[QString("playText")]);
    m_play_text_isSet = !json[QString("playText")].isNull() && m_play_text_isValid;

    m_spread_isValid = ::OpenAPI::fromJsonValue(m_spread, json[QString("spread")]);
    m_spread_isSet = !json[QString("spread")].isNull() && m_spread_isValid;

    m_time_remaining_isValid = ::OpenAPI::fromJsonValue(m_time_remaining, json[QString("timeRemaining")]);
    m_time_remaining_isSet = !json[QString("timeRemaining")].isNull() && m_time_remaining_isValid;

    m_yard_line_isValid = ::OpenAPI::fromJsonValue(m_yard_line, json[QString("yardLine")]);
    m_yard_line_isSet = !json[QString("yardLine")].isNull() && m_yard_line_isValid;
}

QString OAIPlayWP::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayWP::asJsonObject() const {
    QJsonObject obj;
    if (m_away_isSet) {
        obj.insert(QString("away"), ::OpenAPI::toJsonValue(m_away));
    }
    if (m_away_id_isSet) {
        obj.insert(QString("awayId"), ::OpenAPI::toJsonValue(m_away_id));
    }
    if (m_away_score_isSet) {
        obj.insert(QString("awayScore"), ::OpenAPI::toJsonValue(m_away_score));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_down_isSet) {
        obj.insert(QString("down"), ::OpenAPI::toJsonValue(m_down));
    }
    if (m_games_id_isSet) {
        obj.insert(QString("gamesId"), ::OpenAPI::toJsonValue(m_games_id));
    }
    if (m_home_isSet) {
        obj.insert(QString("home"), ::OpenAPI::toJsonValue(m_home));
    }
    if (m_home_ball_isSet) {
        obj.insert(QString("homeBall"), ::OpenAPI::toJsonValue(m_home_ball));
    }
    if (m_home_id_isSet) {
        obj.insert(QString("homeId"), ::OpenAPI::toJsonValue(m_home_id));
    }
    if (m_home_score_isSet) {
        obj.insert(QString("homeScore"), ::OpenAPI::toJsonValue(m_home_score));
    }
    if (m_home_win_prob_isSet) {
        obj.insert(QString("homeWinProb"), ::OpenAPI::toJsonValue(m_home_win_prob));
    }
    if (m_play_id_isSet) {
        obj.insert(QString("playId"), ::OpenAPI::toJsonValue(m_play_id));
    }
    if (m_play_number_isSet) {
        obj.insert(QString("playNumber"), ::OpenAPI::toJsonValue(m_play_number));
    }
    if (m_play_text_isSet) {
        obj.insert(QString("playText"), ::OpenAPI::toJsonValue(m_play_text));
    }
    if (m_spread_isSet) {
        obj.insert(QString("spread"), ::OpenAPI::toJsonValue(m_spread));
    }
    if (m_time_remaining_isSet) {
        obj.insert(QString("timeRemaining"), ::OpenAPI::toJsonValue(m_time_remaining));
    }
    if (m_yard_line_isSet) {
        obj.insert(QString("yardLine"), ::OpenAPI::toJsonValue(m_yard_line));
    }
    return obj;
}

QString OAIPlayWP::getAway() const {
    return m_away;
}
void OAIPlayWP::setAway(const QString &away) {
    m_away = away;
    m_away_isSet = true;
}

bool OAIPlayWP::is_away_Set() const{
    return m_away_isSet;
}

bool OAIPlayWP::is_away_Valid() const{
    return m_away_isValid;
}

qint32 OAIPlayWP::getAwayId() const {
    return m_away_id;
}
void OAIPlayWP::setAwayId(const qint32 &away_id) {
    m_away_id = away_id;
    m_away_id_isSet = true;
}

bool OAIPlayWP::is_away_id_Set() const{
    return m_away_id_isSet;
}

bool OAIPlayWP::is_away_id_Valid() const{
    return m_away_id_isValid;
}

qint32 OAIPlayWP::getAwayScore() const {
    return m_away_score;
}
void OAIPlayWP::setAwayScore(const qint32 &away_score) {
    m_away_score = away_score;
    m_away_score_isSet = true;
}

bool OAIPlayWP::is_away_score_Set() const{
    return m_away_score_isSet;
}

bool OAIPlayWP::is_away_score_Valid() const{
    return m_away_score_isValid;
}

qint32 OAIPlayWP::getDistance() const {
    return m_distance;
}
void OAIPlayWP::setDistance(const qint32 &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAIPlayWP::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAIPlayWP::is_distance_Valid() const{
    return m_distance_isValid;
}

qint32 OAIPlayWP::getDown() const {
    return m_down;
}
void OAIPlayWP::setDown(const qint32 &down) {
    m_down = down;
    m_down_isSet = true;
}

bool OAIPlayWP::is_down_Set() const{
    return m_down_isSet;
}

bool OAIPlayWP::is_down_Valid() const{
    return m_down_isValid;
}

qint32 OAIPlayWP::getGamesId() const {
    return m_games_id;
}
void OAIPlayWP::setGamesId(const qint32 &games_id) {
    m_games_id = games_id;
    m_games_id_isSet = true;
}

bool OAIPlayWP::is_games_id_Set() const{
    return m_games_id_isSet;
}

bool OAIPlayWP::is_games_id_Valid() const{
    return m_games_id_isValid;
}

QString OAIPlayWP::getHome() const {
    return m_home;
}
void OAIPlayWP::setHome(const QString &home) {
    m_home = home;
    m_home_isSet = true;
}

bool OAIPlayWP::is_home_Set() const{
    return m_home_isSet;
}

bool OAIPlayWP::is_home_Valid() const{
    return m_home_isValid;
}

bool OAIPlayWP::isHomeBall() const {
    return m_home_ball;
}
void OAIPlayWP::setHomeBall(const bool &home_ball) {
    m_home_ball = home_ball;
    m_home_ball_isSet = true;
}

bool OAIPlayWP::is_home_ball_Set() const{
    return m_home_ball_isSet;
}

bool OAIPlayWP::is_home_ball_Valid() const{
    return m_home_ball_isValid;
}

qint32 OAIPlayWP::getHomeId() const {
    return m_home_id;
}
void OAIPlayWP::setHomeId(const qint32 &home_id) {
    m_home_id = home_id;
    m_home_id_isSet = true;
}

bool OAIPlayWP::is_home_id_Set() const{
    return m_home_id_isSet;
}

bool OAIPlayWP::is_home_id_Valid() const{
    return m_home_id_isValid;
}

qint32 OAIPlayWP::getHomeScore() const {
    return m_home_score;
}
void OAIPlayWP::setHomeScore(const qint32 &home_score) {
    m_home_score = home_score;
    m_home_score_isSet = true;
}

bool OAIPlayWP::is_home_score_Set() const{
    return m_home_score_isSet;
}

bool OAIPlayWP::is_home_score_Valid() const{
    return m_home_score_isValid;
}

double OAIPlayWP::getHomeWinProb() const {
    return m_home_win_prob;
}
void OAIPlayWP::setHomeWinProb(const double &home_win_prob) {
    m_home_win_prob = home_win_prob;
    m_home_win_prob_isSet = true;
}

bool OAIPlayWP::is_home_win_prob_Set() const{
    return m_home_win_prob_isSet;
}

bool OAIPlayWP::is_home_win_prob_Valid() const{
    return m_home_win_prob_isValid;
}

qint32 OAIPlayWP::getPlayId() const {
    return m_play_id;
}
void OAIPlayWP::setPlayId(const qint32 &play_id) {
    m_play_id = play_id;
    m_play_id_isSet = true;
}

bool OAIPlayWP::is_play_id_Set() const{
    return m_play_id_isSet;
}

bool OAIPlayWP::is_play_id_Valid() const{
    return m_play_id_isValid;
}

qint32 OAIPlayWP::getPlayNumber() const {
    return m_play_number;
}
void OAIPlayWP::setPlayNumber(const qint32 &play_number) {
    m_play_number = play_number;
    m_play_number_isSet = true;
}

bool OAIPlayWP::is_play_number_Set() const{
    return m_play_number_isSet;
}

bool OAIPlayWP::is_play_number_Valid() const{
    return m_play_number_isValid;
}

QString OAIPlayWP::getPlayText() const {
    return m_play_text;
}
void OAIPlayWP::setPlayText(const QString &play_text) {
    m_play_text = play_text;
    m_play_text_isSet = true;
}

bool OAIPlayWP::is_play_text_Set() const{
    return m_play_text_isSet;
}

bool OAIPlayWP::is_play_text_Valid() const{
    return m_play_text_isValid;
}

double OAIPlayWP::getSpread() const {
    return m_spread;
}
void OAIPlayWP::setSpread(const double &spread) {
    m_spread = spread;
    m_spread_isSet = true;
}

bool OAIPlayWP::is_spread_Set() const{
    return m_spread_isSet;
}

bool OAIPlayWP::is_spread_Valid() const{
    return m_spread_isValid;
}

qint32 OAIPlayWP::getTimeRemaining() const {
    return m_time_remaining;
}
void OAIPlayWP::setTimeRemaining(const qint32 &time_remaining) {
    m_time_remaining = time_remaining;
    m_time_remaining_isSet = true;
}

bool OAIPlayWP::is_time_remaining_Set() const{
    return m_time_remaining_isSet;
}

bool OAIPlayWP::is_time_remaining_Valid() const{
    return m_time_remaining_isValid;
}

qint32 OAIPlayWP::getYardLine() const {
    return m_yard_line;
}
void OAIPlayWP::setYardLine(const qint32 &yard_line) {
    m_yard_line = yard_line;
    m_yard_line_isSet = true;
}

bool OAIPlayWP::is_yard_line_Set() const{
    return m_yard_line_isSet;
}

bool OAIPlayWP::is_yard_line_Valid() const{
    return m_yard_line_isValid;
}

bool OAIPlayWP::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_away_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_down_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_games_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_ball_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_win_prob_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spread_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_remaining_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yard_line_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayWP::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
