/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConferenceSPRating.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConferenceSPRating::OAIConferenceSPRating(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConferenceSPRating::OAIConferenceSPRating() {
    this->initializeModel();
}

OAIConferenceSPRating::~OAIConferenceSPRating() {}

void OAIConferenceSPRating::initializeModel() {

    m_conference_isSet = false;
    m_conference_isValid = false;

    m_defense_isSet = false;
    m_defense_isValid = false;

    m_offense_isSet = false;
    m_offense_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_second_order_wins_isSet = false;
    m_second_order_wins_isValid = false;

    m_sos_isSet = false;
    m_sos_isValid = false;

    m_special_teams_isSet = false;
    m_special_teams_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIConferenceSPRating::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConferenceSPRating::fromJsonObject(QJsonObject json) {

    m_conference_isValid = ::OpenAPI::fromJsonValue(m_conference, json[QString("conference")]);
    m_conference_isSet = !json[QString("conference")].isNull() && m_conference_isValid;

    m_defense_isValid = ::OpenAPI::fromJsonValue(m_defense, json[QString("defense")]);
    m_defense_isSet = !json[QString("defense")].isNull() && m_defense_isValid;

    m_offense_isValid = ::OpenAPI::fromJsonValue(m_offense, json[QString("offense")]);
    m_offense_isSet = !json[QString("offense")].isNull() && m_offense_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_second_order_wins_isValid = ::OpenAPI::fromJsonValue(m_second_order_wins, json[QString("secondOrderWins")]);
    m_second_order_wins_isSet = !json[QString("secondOrderWins")].isNull() && m_second_order_wins_isValid;

    m_sos_isValid = ::OpenAPI::fromJsonValue(m_sos, json[QString("sos")]);
    m_sos_isSet = !json[QString("sos")].isNull() && m_sos_isValid;

    m_special_teams_isValid = ::OpenAPI::fromJsonValue(m_special_teams, json[QString("specialTeams")]);
    m_special_teams_isSet = !json[QString("specialTeams")].isNull() && m_special_teams_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIConferenceSPRating::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConferenceSPRating::asJsonObject() const {
    QJsonObject obj;
    if (m_conference_isSet) {
        obj.insert(QString("conference"), ::OpenAPI::toJsonValue(m_conference));
    }
    if (m_defense.isSet()) {
        obj.insert(QString("defense"), ::OpenAPI::toJsonValue(m_defense));
    }
    if (m_offense.isSet()) {
        obj.insert(QString("offense"), ::OpenAPI::toJsonValue(m_offense));
    }
    if (m_rating_isSet) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_second_order_wins_isSet) {
        obj.insert(QString("secondOrderWins"), ::OpenAPI::toJsonValue(m_second_order_wins));
    }
    if (m_sos_isSet) {
        obj.insert(QString("sos"), ::OpenAPI::toJsonValue(m_sos));
    }
    if (m_special_teams.isSet()) {
        obj.insert(QString("specialTeams"), ::OpenAPI::toJsonValue(m_special_teams));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QString OAIConferenceSPRating::getConference() const {
    return m_conference;
}
void OAIConferenceSPRating::setConference(const QString &conference) {
    m_conference = conference;
    m_conference_isSet = true;
}

bool OAIConferenceSPRating::is_conference_Set() const{
    return m_conference_isSet;
}

bool OAIConferenceSPRating::is_conference_Valid() const{
    return m_conference_isValid;
}

OAIConferenceSPRating_defense OAIConferenceSPRating::getDefense() const {
    return m_defense;
}
void OAIConferenceSPRating::setDefense(const OAIConferenceSPRating_defense &defense) {
    m_defense = defense;
    m_defense_isSet = true;
}

bool OAIConferenceSPRating::is_defense_Set() const{
    return m_defense_isSet;
}

bool OAIConferenceSPRating::is_defense_Valid() const{
    return m_defense_isValid;
}

OAIConferenceSPRating_offense OAIConferenceSPRating::getOffense() const {
    return m_offense;
}
void OAIConferenceSPRating::setOffense(const OAIConferenceSPRating_offense &offense) {
    m_offense = offense;
    m_offense_isSet = true;
}

bool OAIConferenceSPRating::is_offense_Set() const{
    return m_offense_isSet;
}

bool OAIConferenceSPRating::is_offense_Valid() const{
    return m_offense_isValid;
}

double OAIConferenceSPRating::getRating() const {
    return m_rating;
}
void OAIConferenceSPRating::setRating(const double &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIConferenceSPRating::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIConferenceSPRating::is_rating_Valid() const{
    return m_rating_isValid;
}

double OAIConferenceSPRating::getSecondOrderWins() const {
    return m_second_order_wins;
}
void OAIConferenceSPRating::setSecondOrderWins(const double &second_order_wins) {
    m_second_order_wins = second_order_wins;
    m_second_order_wins_isSet = true;
}

bool OAIConferenceSPRating::is_second_order_wins_Set() const{
    return m_second_order_wins_isSet;
}

bool OAIConferenceSPRating::is_second_order_wins_Valid() const{
    return m_second_order_wins_isValid;
}

double OAIConferenceSPRating::getSos() const {
    return m_sos;
}
void OAIConferenceSPRating::setSos(const double &sos) {
    m_sos = sos;
    m_sos_isSet = true;
}

bool OAIConferenceSPRating::is_sos_Set() const{
    return m_sos_isSet;
}

bool OAIConferenceSPRating::is_sos_Valid() const{
    return m_sos_isValid;
}

OAIConferenceSPRating_specialTeams OAIConferenceSPRating::getSpecialTeams() const {
    return m_special_teams;
}
void OAIConferenceSPRating::setSpecialTeams(const OAIConferenceSPRating_specialTeams &special_teams) {
    m_special_teams = special_teams;
    m_special_teams_isSet = true;
}

bool OAIConferenceSPRating::is_special_teams_Set() const{
    return m_special_teams_isSet;
}

bool OAIConferenceSPRating::is_special_teams_Valid() const{
    return m_special_teams_isValid;
}

qint32 OAIConferenceSPRating::getYear() const {
    return m_year;
}
void OAIConferenceSPRating::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIConferenceSPRating::is_year_Set() const{
    return m_year_isSet;
}

bool OAIConferenceSPRating::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIConferenceSPRating::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defense.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offense.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_second_order_wins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_teams.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConferenceSPRating::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
