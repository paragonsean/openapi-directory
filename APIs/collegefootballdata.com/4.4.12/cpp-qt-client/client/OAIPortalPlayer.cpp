/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPortalPlayer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPortalPlayer::OAIPortalPlayer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPortalPlayer::OAIPortalPlayer() {
    this->initializeModel();
}

OAIPortalPlayer::~OAIPortalPlayer() {}

void OAIPortalPlayer::initializeModel() {

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_eligibility_isSet = false;
    m_eligibility_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_stars_isSet = false;
    m_stars_isValid = false;

    m_transfer_date_isSet = false;
    m_transfer_date_isValid = false;
}

void OAIPortalPlayer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPortalPlayer::fromJsonObject(QJsonObject json) {

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_eligibility_isValid = ::OpenAPI::fromJsonValue(m_eligibility, json[QString("eligibility")]);
    m_eligibility_isSet = !json[QString("eligibility")].isNull() && m_eligibility_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("season")]);
    m_season_isSet = !json[QString("season")].isNull() && m_season_isValid;

    m_stars_isValid = ::OpenAPI::fromJsonValue(m_stars, json[QString("stars")]);
    m_stars_isSet = !json[QString("stars")].isNull() && m_stars_isValid;

    m_transfer_date_isValid = ::OpenAPI::fromJsonValue(m_transfer_date, json[QString("transferDate")]);
    m_transfer_date_isSet = !json[QString("transferDate")].isNull() && m_transfer_date_isValid;
}

QString OAIPortalPlayer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPortalPlayer::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_eligibility_isSet) {
        obj.insert(QString("eligibility"), ::OpenAPI::toJsonValue(m_eligibility));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_rating_isSet) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_season_isSet) {
        obj.insert(QString("season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_stars_isSet) {
        obj.insert(QString("stars"), ::OpenAPI::toJsonValue(m_stars));
    }
    if (m_transfer_date_isSet) {
        obj.insert(QString("transferDate"), ::OpenAPI::toJsonValue(m_transfer_date));
    }
    return obj;
}

QString OAIPortalPlayer::getDestination() const {
    return m_destination;
}
void OAIPortalPlayer::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIPortalPlayer::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIPortalPlayer::is_destination_Valid() const{
    return m_destination_isValid;
}

QString OAIPortalPlayer::getEligibility() const {
    return m_eligibility;
}
void OAIPortalPlayer::setEligibility(const QString &eligibility) {
    m_eligibility = eligibility;
    m_eligibility_isSet = true;
}

bool OAIPortalPlayer::is_eligibility_Set() const{
    return m_eligibility_isSet;
}

bool OAIPortalPlayer::is_eligibility_Valid() const{
    return m_eligibility_isValid;
}

QString OAIPortalPlayer::getFirstName() const {
    return m_first_name;
}
void OAIPortalPlayer::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIPortalPlayer::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIPortalPlayer::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIPortalPlayer::getLastName() const {
    return m_last_name;
}
void OAIPortalPlayer::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIPortalPlayer::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIPortalPlayer::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIPortalPlayer::getOrigin() const {
    return m_origin;
}
void OAIPortalPlayer::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIPortalPlayer::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIPortalPlayer::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAIPortalPlayer::getPosition() const {
    return m_position;
}
void OAIPortalPlayer::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIPortalPlayer::is_position_Set() const{
    return m_position_isSet;
}

bool OAIPortalPlayer::is_position_Valid() const{
    return m_position_isValid;
}

double OAIPortalPlayer::getRating() const {
    return m_rating;
}
void OAIPortalPlayer::setRating(const double &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIPortalPlayer::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIPortalPlayer::is_rating_Valid() const{
    return m_rating_isValid;
}

qint32 OAIPortalPlayer::getSeason() const {
    return m_season;
}
void OAIPortalPlayer::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIPortalPlayer::is_season_Set() const{
    return m_season_isSet;
}

bool OAIPortalPlayer::is_season_Valid() const{
    return m_season_isValid;
}

qint32 OAIPortalPlayer::getStars() const {
    return m_stars;
}
void OAIPortalPlayer::setStars(const qint32 &stars) {
    m_stars = stars;
    m_stars_isSet = true;
}

bool OAIPortalPlayer::is_stars_Set() const{
    return m_stars_isSet;
}

bool OAIPortalPlayer::is_stars_Valid() const{
    return m_stars_isValid;
}

QString OAIPortalPlayer::getTransferDate() const {
    return m_transfer_date;
}
void OAIPortalPlayer::setTransferDate(const QString &transfer_date) {
    m_transfer_date = transfer_date;
    m_transfer_date_isSet = true;
}

bool OAIPortalPlayer::is_transfer_date_Set() const{
    return m_transfer_date_isSet;
}

bool OAIPortalPlayer::is_transfer_date_Valid() const{
    return m_transfer_date_isValid;
}

bool OAIPortalPlayer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eligibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stars_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPortalPlayer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
