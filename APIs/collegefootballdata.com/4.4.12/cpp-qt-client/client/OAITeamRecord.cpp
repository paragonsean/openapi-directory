/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamRecord::OAITeamRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamRecord::OAITeamRecord() {
    this->initializeModel();
}

OAITeamRecord::~OAITeamRecord() {}

void OAITeamRecord::initializeModel() {

    m_away_games_isSet = false;
    m_away_games_isValid = false;

    m_conference_isSet = false;
    m_conference_isValid = false;

    m_conference_games_isSet = false;
    m_conference_games_isValid = false;

    m_division_isSet = false;
    m_division_isValid = false;

    m_expected_wins_isSet = false;
    m_expected_wins_isValid = false;

    m_home_games_isSet = false;
    m_home_games_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAITeamRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamRecord::fromJsonObject(QJsonObject json) {

    m_away_games_isValid = ::OpenAPI::fromJsonValue(m_away_games, json[QString("awayGames")]);
    m_away_games_isSet = !json[QString("awayGames")].isNull() && m_away_games_isValid;

    m_conference_isValid = ::OpenAPI::fromJsonValue(m_conference, json[QString("conference")]);
    m_conference_isSet = !json[QString("conference")].isNull() && m_conference_isValid;

    m_conference_games_isValid = ::OpenAPI::fromJsonValue(m_conference_games, json[QString("conferenceGames")]);
    m_conference_games_isSet = !json[QString("conferenceGames")].isNull() && m_conference_games_isValid;

    m_division_isValid = ::OpenAPI::fromJsonValue(m_division, json[QString("division")]);
    m_division_isSet = !json[QString("division")].isNull() && m_division_isValid;

    m_expected_wins_isValid = ::OpenAPI::fromJsonValue(m_expected_wins, json[QString("expectedWins")]);
    m_expected_wins_isSet = !json[QString("expectedWins")].isNull() && m_expected_wins_isValid;

    m_home_games_isValid = ::OpenAPI::fromJsonValue(m_home_games, json[QString("homeGames")]);
    m_home_games_isSet = !json[QString("homeGames")].isNull() && m_home_games_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAITeamRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_away_games.isSet()) {
        obj.insert(QString("awayGames"), ::OpenAPI::toJsonValue(m_away_games));
    }
    if (m_conference_isSet) {
        obj.insert(QString("conference"), ::OpenAPI::toJsonValue(m_conference));
    }
    if (m_conference_games.isSet()) {
        obj.insert(QString("conferenceGames"), ::OpenAPI::toJsonValue(m_conference_games));
    }
    if (m_division_isSet) {
        obj.insert(QString("division"), ::OpenAPI::toJsonValue(m_division));
    }
    if (m_expected_wins_isSet) {
        obj.insert(QString("expectedWins"), ::OpenAPI::toJsonValue(m_expected_wins));
    }
    if (m_home_games.isSet()) {
        obj.insert(QString("homeGames"), ::OpenAPI::toJsonValue(m_home_games));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_total.isSet()) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

OAITeamRecord_awayGames OAITeamRecord::getAwayGames() const {
    return m_away_games;
}
void OAITeamRecord::setAwayGames(const OAITeamRecord_awayGames &away_games) {
    m_away_games = away_games;
    m_away_games_isSet = true;
}

bool OAITeamRecord::is_away_games_Set() const{
    return m_away_games_isSet;
}

bool OAITeamRecord::is_away_games_Valid() const{
    return m_away_games_isValid;
}

QString OAITeamRecord::getConference() const {
    return m_conference;
}
void OAITeamRecord::setConference(const QString &conference) {
    m_conference = conference;
    m_conference_isSet = true;
}

bool OAITeamRecord::is_conference_Set() const{
    return m_conference_isSet;
}

bool OAITeamRecord::is_conference_Valid() const{
    return m_conference_isValid;
}

OAITeamRecord_awayGames OAITeamRecord::getConferenceGames() const {
    return m_conference_games;
}
void OAITeamRecord::setConferenceGames(const OAITeamRecord_awayGames &conference_games) {
    m_conference_games = conference_games;
    m_conference_games_isSet = true;
}

bool OAITeamRecord::is_conference_games_Set() const{
    return m_conference_games_isSet;
}

bool OAITeamRecord::is_conference_games_Valid() const{
    return m_conference_games_isValid;
}

QString OAITeamRecord::getDivision() const {
    return m_division;
}
void OAITeamRecord::setDivision(const QString &division) {
    m_division = division;
    m_division_isSet = true;
}

bool OAITeamRecord::is_division_Set() const{
    return m_division_isSet;
}

bool OAITeamRecord::is_division_Valid() const{
    return m_division_isValid;
}

double OAITeamRecord::getExpectedWins() const {
    return m_expected_wins;
}
void OAITeamRecord::setExpectedWins(const double &expected_wins) {
    m_expected_wins = expected_wins;
    m_expected_wins_isSet = true;
}

bool OAITeamRecord::is_expected_wins_Set() const{
    return m_expected_wins_isSet;
}

bool OAITeamRecord::is_expected_wins_Valid() const{
    return m_expected_wins_isValid;
}

OAITeamRecord_awayGames OAITeamRecord::getHomeGames() const {
    return m_home_games;
}
void OAITeamRecord::setHomeGames(const OAITeamRecord_awayGames &home_games) {
    m_home_games = home_games;
    m_home_games_isSet = true;
}

bool OAITeamRecord::is_home_games_Set() const{
    return m_home_games_isSet;
}

bool OAITeamRecord::is_home_games_Valid() const{
    return m_home_games_isValid;
}

QString OAITeamRecord::getTeam() const {
    return m_team;
}
void OAITeamRecord::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAITeamRecord::is_team_Set() const{
    return m_team_isSet;
}

bool OAITeamRecord::is_team_Valid() const{
    return m_team_isValid;
}

OAITeamRecord_awayGames OAITeamRecord::getTotal() const {
    return m_total;
}
void OAITeamRecord::setTotal(const OAITeamRecord_awayGames &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAITeamRecord::is_total_Set() const{
    return m_total_isSet;
}

bool OAITeamRecord::is_total_Valid() const{
    return m_total_isValid;
}

qint32 OAITeamRecord::getYear() const {
    return m_year;
}
void OAITeamRecord::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAITeamRecord::is_year_Set() const{
    return m_year_isSet;
}

bool OAITeamRecord::is_year_Valid() const{
    return m_year_isValid;
}

bool OAITeamRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_away_games.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_games.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_division_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_wins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_games.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
