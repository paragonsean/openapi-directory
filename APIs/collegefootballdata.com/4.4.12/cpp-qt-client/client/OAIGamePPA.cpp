/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGamePPA.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGamePPA::OAIGamePPA(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGamePPA::OAIGamePPA() {
    this->initializeModel();
}

OAIGamePPA::~OAIGamePPA() {}

void OAIGamePPA::initializeModel() {

    m_conference_isSet = false;
    m_conference_isValid = false;

    m_defense_isSet = false;
    m_defense_isValid = false;

    m_game_id_isSet = false;
    m_game_id_isValid = false;

    m_offense_isSet = false;
    m_offense_isValid = false;

    m_opponent_isSet = false;
    m_opponent_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_week_isSet = false;
    m_week_isValid = false;
}

void OAIGamePPA::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGamePPA::fromJsonObject(QJsonObject json) {

    m_conference_isValid = ::OpenAPI::fromJsonValue(m_conference, json[QString("conference")]);
    m_conference_isSet = !json[QString("conference")].isNull() && m_conference_isValid;

    m_defense_isValid = ::OpenAPI::fromJsonValue(m_defense, json[QString("defense")]);
    m_defense_isSet = !json[QString("defense")].isNull() && m_defense_isValid;

    m_game_id_isValid = ::OpenAPI::fromJsonValue(m_game_id, json[QString("gameId")]);
    m_game_id_isSet = !json[QString("gameId")].isNull() && m_game_id_isValid;

    m_offense_isValid = ::OpenAPI::fromJsonValue(m_offense, json[QString("offense")]);
    m_offense_isSet = !json[QString("offense")].isNull() && m_offense_isValid;

    m_opponent_isValid = ::OpenAPI::fromJsonValue(m_opponent, json[QString("opponent")]);
    m_opponent_isSet = !json[QString("opponent")].isNull() && m_opponent_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("season")]);
    m_season_isSet = !json[QString("season")].isNull() && m_season_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_week_isValid = ::OpenAPI::fromJsonValue(m_week, json[QString("week")]);
    m_week_isSet = !json[QString("week")].isNull() && m_week_isValid;
}

QString OAIGamePPA::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGamePPA::asJsonObject() const {
    QJsonObject obj;
    if (m_conference_isSet) {
        obj.insert(QString("conference"), ::OpenAPI::toJsonValue(m_conference));
    }
    if (m_defense.isSet()) {
        obj.insert(QString("defense"), ::OpenAPI::toJsonValue(m_defense));
    }
    if (m_game_id_isSet) {
        obj.insert(QString("gameId"), ::OpenAPI::toJsonValue(m_game_id));
    }
    if (m_offense.isSet()) {
        obj.insert(QString("offense"), ::OpenAPI::toJsonValue(m_offense));
    }
    if (m_opponent_isSet) {
        obj.insert(QString("opponent"), ::OpenAPI::toJsonValue(m_opponent));
    }
    if (m_season_isSet) {
        obj.insert(QString("season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_week_isSet) {
        obj.insert(QString("week"), ::OpenAPI::toJsonValue(m_week));
    }
    return obj;
}

QString OAIGamePPA::getConference() const {
    return m_conference;
}
void OAIGamePPA::setConference(const QString &conference) {
    m_conference = conference;
    m_conference_isSet = true;
}

bool OAIGamePPA::is_conference_Set() const{
    return m_conference_isSet;
}

bool OAIGamePPA::is_conference_Valid() const{
    return m_conference_isValid;
}

OAIGamePPA_defense OAIGamePPA::getDefense() const {
    return m_defense;
}
void OAIGamePPA::setDefense(const OAIGamePPA_defense &defense) {
    m_defense = defense;
    m_defense_isSet = true;
}

bool OAIGamePPA::is_defense_Set() const{
    return m_defense_isSet;
}

bool OAIGamePPA::is_defense_Valid() const{
    return m_defense_isValid;
}

qint32 OAIGamePPA::getGameId() const {
    return m_game_id;
}
void OAIGamePPA::setGameId(const qint32 &game_id) {
    m_game_id = game_id;
    m_game_id_isSet = true;
}

bool OAIGamePPA::is_game_id_Set() const{
    return m_game_id_isSet;
}

bool OAIGamePPA::is_game_id_Valid() const{
    return m_game_id_isValid;
}

OAIGamePPA_defense OAIGamePPA::getOffense() const {
    return m_offense;
}
void OAIGamePPA::setOffense(const OAIGamePPA_defense &offense) {
    m_offense = offense;
    m_offense_isSet = true;
}

bool OAIGamePPA::is_offense_Set() const{
    return m_offense_isSet;
}

bool OAIGamePPA::is_offense_Valid() const{
    return m_offense_isValid;
}

QString OAIGamePPA::getOpponent() const {
    return m_opponent;
}
void OAIGamePPA::setOpponent(const QString &opponent) {
    m_opponent = opponent;
    m_opponent_isSet = true;
}

bool OAIGamePPA::is_opponent_Set() const{
    return m_opponent_isSet;
}

bool OAIGamePPA::is_opponent_Valid() const{
    return m_opponent_isValid;
}

qint32 OAIGamePPA::getSeason() const {
    return m_season;
}
void OAIGamePPA::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIGamePPA::is_season_Set() const{
    return m_season_isSet;
}

bool OAIGamePPA::is_season_Valid() const{
    return m_season_isValid;
}

QString OAIGamePPA::getTeam() const {
    return m_team;
}
void OAIGamePPA::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIGamePPA::is_team_Set() const{
    return m_team_isSet;
}

bool OAIGamePPA::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAIGamePPA::getWeek() const {
    return m_week;
}
void OAIGamePPA::setWeek(const qint32 &week) {
    m_week = week;
    m_week_isSet = true;
}

bool OAIGamePPA::is_week_Set() const{
    return m_week_isSet;
}

bool OAIGamePPA::is_week_Valid() const{
    return m_week_isValid;
}

bool OAIGamePPA::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defense.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offense.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_opponent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGamePPA::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
