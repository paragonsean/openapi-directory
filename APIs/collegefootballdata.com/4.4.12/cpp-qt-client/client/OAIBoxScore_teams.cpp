/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBoxScore_teams.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBoxScore_teams::OAIBoxScore_teams(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBoxScore_teams::OAIBoxScore_teams() {
    this->initializeModel();
}

OAIBoxScore_teams::~OAIBoxScore_teams() {}

void OAIBoxScore_teams::initializeModel() {

    m_cumulative_ppa_isSet = false;
    m_cumulative_ppa_isValid = false;

    m_explosiveness_isSet = false;
    m_explosiveness_isValid = false;

    m_field_position_isSet = false;
    m_field_position_isValid = false;

    m_havoc_isSet = false;
    m_havoc_isValid = false;

    m_ppa_isSet = false;
    m_ppa_isValid = false;

    m_rushing_isSet = false;
    m_rushing_isValid = false;

    m_scoring_opportunities_isSet = false;
    m_scoring_opportunities_isValid = false;

    m_success_rates_isSet = false;
    m_success_rates_isValid = false;
}

void OAIBoxScore_teams::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBoxScore_teams::fromJsonObject(QJsonObject json) {

    m_cumulative_ppa_isValid = ::OpenAPI::fromJsonValue(m_cumulative_ppa, json[QString("cumulativePpa")]);
    m_cumulative_ppa_isSet = !json[QString("cumulativePpa")].isNull() && m_cumulative_ppa_isValid;

    m_explosiveness_isValid = ::OpenAPI::fromJsonValue(m_explosiveness, json[QString("explosiveness")]);
    m_explosiveness_isSet = !json[QString("explosiveness")].isNull() && m_explosiveness_isValid;

    m_field_position_isValid = ::OpenAPI::fromJsonValue(m_field_position, json[QString("fieldPosition")]);
    m_field_position_isSet = !json[QString("fieldPosition")].isNull() && m_field_position_isValid;

    m_havoc_isValid = ::OpenAPI::fromJsonValue(m_havoc, json[QString("havoc")]);
    m_havoc_isSet = !json[QString("havoc")].isNull() && m_havoc_isValid;

    m_ppa_isValid = ::OpenAPI::fromJsonValue(m_ppa, json[QString("ppa")]);
    m_ppa_isSet = !json[QString("ppa")].isNull() && m_ppa_isValid;

    m_rushing_isValid = ::OpenAPI::fromJsonValue(m_rushing, json[QString("rushing")]);
    m_rushing_isSet = !json[QString("rushing")].isNull() && m_rushing_isValid;

    m_scoring_opportunities_isValid = ::OpenAPI::fromJsonValue(m_scoring_opportunities, json[QString("scoringOpportunities")]);
    m_scoring_opportunities_isSet = !json[QString("scoringOpportunities")].isNull() && m_scoring_opportunities_isValid;

    m_success_rates_isValid = ::OpenAPI::fromJsonValue(m_success_rates, json[QString("successRates")]);
    m_success_rates_isSet = !json[QString("successRates")].isNull() && m_success_rates_isValid;
}

QString OAIBoxScore_teams::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBoxScore_teams::asJsonObject() const {
    QJsonObject obj;
    if (m_cumulative_ppa.size() > 0) {
        obj.insert(QString("cumulativePpa"), ::OpenAPI::toJsonValue(m_cumulative_ppa));
    }
    if (m_explosiveness.size() > 0) {
        obj.insert(QString("explosiveness"), ::OpenAPI::toJsonValue(m_explosiveness));
    }
    if (m_field_position.size() > 0) {
        obj.insert(QString("fieldPosition"), ::OpenAPI::toJsonValue(m_field_position));
    }
    if (m_havoc.size() > 0) {
        obj.insert(QString("havoc"), ::OpenAPI::toJsonValue(m_havoc));
    }
    if (m_ppa.size() > 0) {
        obj.insert(QString("ppa"), ::OpenAPI::toJsonValue(m_ppa));
    }
    if (m_rushing.size() > 0) {
        obj.insert(QString("rushing"), ::OpenAPI::toJsonValue(m_rushing));
    }
    if (m_scoring_opportunities.size() > 0) {
        obj.insert(QString("scoringOpportunities"), ::OpenAPI::toJsonValue(m_scoring_opportunities));
    }
    if (m_success_rates.size() > 0) {
        obj.insert(QString("successRates"), ::OpenAPI::toJsonValue(m_success_rates));
    }
    return obj;
}

QList<OAIBoxScore_teams_cumulativePpa_inner> OAIBoxScore_teams::getCumulativePpa() const {
    return m_cumulative_ppa;
}
void OAIBoxScore_teams::setCumulativePpa(const QList<OAIBoxScore_teams_cumulativePpa_inner> &cumulative_ppa) {
    m_cumulative_ppa = cumulative_ppa;
    m_cumulative_ppa_isSet = true;
}

bool OAIBoxScore_teams::is_cumulative_ppa_Set() const{
    return m_cumulative_ppa_isSet;
}

bool OAIBoxScore_teams::is_cumulative_ppa_Valid() const{
    return m_cumulative_ppa_isValid;
}

QList<OAIBoxScore_teams_explosiveness_inner> OAIBoxScore_teams::getExplosiveness() const {
    return m_explosiveness;
}
void OAIBoxScore_teams::setExplosiveness(const QList<OAIBoxScore_teams_explosiveness_inner> &explosiveness) {
    m_explosiveness = explosiveness;
    m_explosiveness_isSet = true;
}

bool OAIBoxScore_teams::is_explosiveness_Set() const{
    return m_explosiveness_isSet;
}

bool OAIBoxScore_teams::is_explosiveness_Valid() const{
    return m_explosiveness_isValid;
}

QList<OAIBoxScore_teams_fieldPosition_inner> OAIBoxScore_teams::getFieldPosition() const {
    return m_field_position;
}
void OAIBoxScore_teams::setFieldPosition(const QList<OAIBoxScore_teams_fieldPosition_inner> &field_position) {
    m_field_position = field_position;
    m_field_position_isSet = true;
}

bool OAIBoxScore_teams::is_field_position_Set() const{
    return m_field_position_isSet;
}

bool OAIBoxScore_teams::is_field_position_Valid() const{
    return m_field_position_isValid;
}

QList<OAIBoxScore_teams_havoc_inner> OAIBoxScore_teams::getHavoc() const {
    return m_havoc;
}
void OAIBoxScore_teams::setHavoc(const QList<OAIBoxScore_teams_havoc_inner> &havoc) {
    m_havoc = havoc;
    m_havoc_isSet = true;
}

bool OAIBoxScore_teams::is_havoc_Set() const{
    return m_havoc_isSet;
}

bool OAIBoxScore_teams::is_havoc_Valid() const{
    return m_havoc_isValid;
}

QList<OAIBoxScore_teams_cumulativePpa_inner> OAIBoxScore_teams::getPpa() const {
    return m_ppa;
}
void OAIBoxScore_teams::setPpa(const QList<OAIBoxScore_teams_cumulativePpa_inner> &ppa) {
    m_ppa = ppa;
    m_ppa_isSet = true;
}

bool OAIBoxScore_teams::is_ppa_Set() const{
    return m_ppa_isSet;
}

bool OAIBoxScore_teams::is_ppa_Valid() const{
    return m_ppa_isValid;
}

QList<OAIBoxScore_teams_rushing_inner> OAIBoxScore_teams::getRushing() const {
    return m_rushing;
}
void OAIBoxScore_teams::setRushing(const QList<OAIBoxScore_teams_rushing_inner> &rushing) {
    m_rushing = rushing;
    m_rushing_isSet = true;
}

bool OAIBoxScore_teams::is_rushing_Set() const{
    return m_rushing_isSet;
}

bool OAIBoxScore_teams::is_rushing_Valid() const{
    return m_rushing_isValid;
}

QList<OAIBoxScore_teams_scoringOpportunities_inner> OAIBoxScore_teams::getScoringOpportunities() const {
    return m_scoring_opportunities;
}
void OAIBoxScore_teams::setScoringOpportunities(const QList<OAIBoxScore_teams_scoringOpportunities_inner> &scoring_opportunities) {
    m_scoring_opportunities = scoring_opportunities;
    m_scoring_opportunities_isSet = true;
}

bool OAIBoxScore_teams::is_scoring_opportunities_Set() const{
    return m_scoring_opportunities_isSet;
}

bool OAIBoxScore_teams::is_scoring_opportunities_Valid() const{
    return m_scoring_opportunities_isValid;
}

QList<OAIBoxScore_teams_successRates_inner> OAIBoxScore_teams::getSuccessRates() const {
    return m_success_rates;
}
void OAIBoxScore_teams::setSuccessRates(const QList<OAIBoxScore_teams_successRates_inner> &success_rates) {
    m_success_rates = success_rates;
    m_success_rates_isSet = true;
}

bool OAIBoxScore_teams::is_success_rates_Set() const{
    return m_success_rates_isSet;
}

bool OAIBoxScore_teams::is_success_rates_Valid() const{
    return m_success_rates_isValid;
}

bool OAIBoxScore_teams::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cumulative_ppa.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_explosiveness.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_position.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_havoc.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ppa.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rushing.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scoring_opportunities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_rates.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBoxScore_teams::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
