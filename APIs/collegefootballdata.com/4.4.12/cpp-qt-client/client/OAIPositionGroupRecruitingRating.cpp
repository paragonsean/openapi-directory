/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPositionGroupRecruitingRating.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPositionGroupRecruitingRating::OAIPositionGroupRecruitingRating(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPositionGroupRecruitingRating::OAIPositionGroupRecruitingRating() {
    this->initializeModel();
}

OAIPositionGroupRecruitingRating::~OAIPositionGroupRecruitingRating() {}

void OAIPositionGroupRecruitingRating::initializeModel() {

    m_average_rating_isSet = false;
    m_average_rating_isValid = false;

    m_average_stars_isSet = false;
    m_average_stars_isValid = false;

    m_commits_isSet = false;
    m_commits_isValid = false;

    m_conference_isSet = false;
    m_conference_isValid = false;

    m_position_group_isSet = false;
    m_position_group_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_total_rating_isSet = false;
    m_total_rating_isValid = false;
}

void OAIPositionGroupRecruitingRating::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPositionGroupRecruitingRating::fromJsonObject(QJsonObject json) {

    m_average_rating_isValid = ::OpenAPI::fromJsonValue(m_average_rating, json[QString("averageRating")]);
    m_average_rating_isSet = !json[QString("averageRating")].isNull() && m_average_rating_isValid;

    m_average_stars_isValid = ::OpenAPI::fromJsonValue(m_average_stars, json[QString("averageStars")]);
    m_average_stars_isSet = !json[QString("averageStars")].isNull() && m_average_stars_isValid;

    m_commits_isValid = ::OpenAPI::fromJsonValue(m_commits, json[QString("commits")]);
    m_commits_isSet = !json[QString("commits")].isNull() && m_commits_isValid;

    m_conference_isValid = ::OpenAPI::fromJsonValue(m_conference, json[QString("conference")]);
    m_conference_isSet = !json[QString("conference")].isNull() && m_conference_isValid;

    m_position_group_isValid = ::OpenAPI::fromJsonValue(m_position_group, json[QString("positionGroup")]);
    m_position_group_isSet = !json[QString("positionGroup")].isNull() && m_position_group_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_total_rating_isValid = ::OpenAPI::fromJsonValue(m_total_rating, json[QString("totalRating")]);
    m_total_rating_isSet = !json[QString("totalRating")].isNull() && m_total_rating_isValid;
}

QString OAIPositionGroupRecruitingRating::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPositionGroupRecruitingRating::asJsonObject() const {
    QJsonObject obj;
    if (m_average_rating_isSet) {
        obj.insert(QString("averageRating"), ::OpenAPI::toJsonValue(m_average_rating));
    }
    if (m_average_stars_isSet) {
        obj.insert(QString("averageStars"), ::OpenAPI::toJsonValue(m_average_stars));
    }
    if (m_commits_isSet) {
        obj.insert(QString("commits"), ::OpenAPI::toJsonValue(m_commits));
    }
    if (m_conference_isSet) {
        obj.insert(QString("conference"), ::OpenAPI::toJsonValue(m_conference));
    }
    if (m_position_group_isSet) {
        obj.insert(QString("positionGroup"), ::OpenAPI::toJsonValue(m_position_group));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_total_rating_isSet) {
        obj.insert(QString("totalRating"), ::OpenAPI::toJsonValue(m_total_rating));
    }
    return obj;
}

double OAIPositionGroupRecruitingRating::getAverageRating() const {
    return m_average_rating;
}
void OAIPositionGroupRecruitingRating::setAverageRating(const double &average_rating) {
    m_average_rating = average_rating;
    m_average_rating_isSet = true;
}

bool OAIPositionGroupRecruitingRating::is_average_rating_Set() const{
    return m_average_rating_isSet;
}

bool OAIPositionGroupRecruitingRating::is_average_rating_Valid() const{
    return m_average_rating_isValid;
}

double OAIPositionGroupRecruitingRating::getAverageStars() const {
    return m_average_stars;
}
void OAIPositionGroupRecruitingRating::setAverageStars(const double &average_stars) {
    m_average_stars = average_stars;
    m_average_stars_isSet = true;
}

bool OAIPositionGroupRecruitingRating::is_average_stars_Set() const{
    return m_average_stars_isSet;
}

bool OAIPositionGroupRecruitingRating::is_average_stars_Valid() const{
    return m_average_stars_isValid;
}

double OAIPositionGroupRecruitingRating::getCommits() const {
    return m_commits;
}
void OAIPositionGroupRecruitingRating::setCommits(const double &commits) {
    m_commits = commits;
    m_commits_isSet = true;
}

bool OAIPositionGroupRecruitingRating::is_commits_Set() const{
    return m_commits_isSet;
}

bool OAIPositionGroupRecruitingRating::is_commits_Valid() const{
    return m_commits_isValid;
}

QString OAIPositionGroupRecruitingRating::getConference() const {
    return m_conference;
}
void OAIPositionGroupRecruitingRating::setConference(const QString &conference) {
    m_conference = conference;
    m_conference_isSet = true;
}

bool OAIPositionGroupRecruitingRating::is_conference_Set() const{
    return m_conference_isSet;
}

bool OAIPositionGroupRecruitingRating::is_conference_Valid() const{
    return m_conference_isValid;
}

QString OAIPositionGroupRecruitingRating::getPositionGroup() const {
    return m_position_group;
}
void OAIPositionGroupRecruitingRating::setPositionGroup(const QString &position_group) {
    m_position_group = position_group;
    m_position_group_isSet = true;
}

bool OAIPositionGroupRecruitingRating::is_position_group_Set() const{
    return m_position_group_isSet;
}

bool OAIPositionGroupRecruitingRating::is_position_group_Valid() const{
    return m_position_group_isValid;
}

QString OAIPositionGroupRecruitingRating::getTeam() const {
    return m_team;
}
void OAIPositionGroupRecruitingRating::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIPositionGroupRecruitingRating::is_team_Set() const{
    return m_team_isSet;
}

bool OAIPositionGroupRecruitingRating::is_team_Valid() const{
    return m_team_isValid;
}

double OAIPositionGroupRecruitingRating::getTotalRating() const {
    return m_total_rating;
}
void OAIPositionGroupRecruitingRating::setTotalRating(const double &total_rating) {
    m_total_rating = total_rating;
    m_total_rating_isSet = true;
}

bool OAIPositionGroupRecruitingRating::is_total_rating_Set() const{
    return m_total_rating_isSet;
}

bool OAIPositionGroupRecruitingRating::is_total_rating_Valid() const{
    return m_total_rating_isValid;
}

bool OAIPositionGroupRecruitingRating::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_stars_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_rating_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPositionGroupRecruitingRating::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
