/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamPPA_defense_cumulative.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamPPA_defense_cumulative::OAITeamPPA_defense_cumulative(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamPPA_defense_cumulative::OAITeamPPA_defense_cumulative() {
    this->initializeModel();
}

OAITeamPPA_defense_cumulative::~OAITeamPPA_defense_cumulative() {}

void OAITeamPPA_defense_cumulative::initializeModel() {

    m_passing_isSet = false;
    m_passing_isValid = false;

    m_rushing_isSet = false;
    m_rushing_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAITeamPPA_defense_cumulative::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamPPA_defense_cumulative::fromJsonObject(QJsonObject json) {

    m_passing_isValid = ::OpenAPI::fromJsonValue(m_passing, json[QString("passing")]);
    m_passing_isSet = !json[QString("passing")].isNull() && m_passing_isValid;

    m_rushing_isValid = ::OpenAPI::fromJsonValue(m_rushing, json[QString("rushing")]);
    m_rushing_isSet = !json[QString("rushing")].isNull() && m_rushing_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAITeamPPA_defense_cumulative::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamPPA_defense_cumulative::asJsonObject() const {
    QJsonObject obj;
    if (m_passing_isSet) {
        obj.insert(QString("passing"), ::OpenAPI::toJsonValue(m_passing));
    }
    if (m_rushing_isSet) {
        obj.insert(QString("rushing"), ::OpenAPI::toJsonValue(m_rushing));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

double OAITeamPPA_defense_cumulative::getPassing() const {
    return m_passing;
}
void OAITeamPPA_defense_cumulative::setPassing(const double &passing) {
    m_passing = passing;
    m_passing_isSet = true;
}

bool OAITeamPPA_defense_cumulative::is_passing_Set() const{
    return m_passing_isSet;
}

bool OAITeamPPA_defense_cumulative::is_passing_Valid() const{
    return m_passing_isValid;
}

double OAITeamPPA_defense_cumulative::getRushing() const {
    return m_rushing;
}
void OAITeamPPA_defense_cumulative::setRushing(const double &rushing) {
    m_rushing = rushing;
    m_rushing_isSet = true;
}

bool OAITeamPPA_defense_cumulative::is_rushing_Set() const{
    return m_rushing_isSet;
}

bool OAITeamPPA_defense_cumulative::is_rushing_Valid() const{
    return m_rushing_isValid;
}

double OAITeamPPA_defense_cumulative::getTotal() const {
    return m_total;
}
void OAITeamPPA_defense_cumulative::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAITeamPPA_defense_cumulative::is_total_Set() const{
    return m_total_isSet;
}

bool OAITeamPPA_defense_cumulative::is_total_Valid() const{
    return m_total_isValid;
}

bool OAITeamPPA_defense_cumulative::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_passing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rushing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamPPA_defense_cumulative::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
