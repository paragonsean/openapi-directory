/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlayerSeasonStat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlayerSeasonStat::OAIPlayerSeasonStat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlayerSeasonStat::OAIPlayerSeasonStat() {
    this->initializeModel();
}

OAIPlayerSeasonStat::~OAIPlayerSeasonStat() {}

void OAIPlayerSeasonStat::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_conference_isSet = false;
    m_conference_isValid = false;

    m_player_isSet = false;
    m_player_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_stat_isSet = false;
    m_stat_isValid = false;

    m_stat_type_isSet = false;
    m_stat_type_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;
}

void OAIPlayerSeasonStat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlayerSeasonStat::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_conference_isValid = ::OpenAPI::fromJsonValue(m_conference, json[QString("conference")]);
    m_conference_isSet = !json[QString("conference")].isNull() && m_conference_isValid;

    m_player_isValid = ::OpenAPI::fromJsonValue(m_player, json[QString("player")]);
    m_player_isSet = !json[QString("player")].isNull() && m_player_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("playerId")]);
    m_player_id_isSet = !json[QString("playerId")].isNull() && m_player_id_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("season")]);
    m_season_isSet = !json[QString("season")].isNull() && m_season_isValid;

    m_stat_isValid = ::OpenAPI::fromJsonValue(m_stat, json[QString("stat")]);
    m_stat_isSet = !json[QString("stat")].isNull() && m_stat_isValid;

    m_stat_type_isValid = ::OpenAPI::fromJsonValue(m_stat_type, json[QString("statType")]);
    m_stat_type_isSet = !json[QString("statType")].isNull() && m_stat_type_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;
}

QString OAIPlayerSeasonStat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlayerSeasonStat::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_conference_isSet) {
        obj.insert(QString("conference"), ::OpenAPI::toJsonValue(m_conference));
    }
    if (m_player_isSet) {
        obj.insert(QString("player"), ::OpenAPI::toJsonValue(m_player));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("playerId"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_season_isSet) {
        obj.insert(QString("season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_stat_isSet) {
        obj.insert(QString("stat"), ::OpenAPI::toJsonValue(m_stat));
    }
    if (m_stat_type_isSet) {
        obj.insert(QString("statType"), ::OpenAPI::toJsonValue(m_stat_type));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    return obj;
}

QString OAIPlayerSeasonStat::getCategory() const {
    return m_category;
}
void OAIPlayerSeasonStat::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIPlayerSeasonStat::is_category_Set() const{
    return m_category_isSet;
}

bool OAIPlayerSeasonStat::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIPlayerSeasonStat::getConference() const {
    return m_conference;
}
void OAIPlayerSeasonStat::setConference(const QString &conference) {
    m_conference = conference;
    m_conference_isSet = true;
}

bool OAIPlayerSeasonStat::is_conference_Set() const{
    return m_conference_isSet;
}

bool OAIPlayerSeasonStat::is_conference_Valid() const{
    return m_conference_isValid;
}

QString OAIPlayerSeasonStat::getPlayer() const {
    return m_player;
}
void OAIPlayerSeasonStat::setPlayer(const QString &player) {
    m_player = player;
    m_player_isSet = true;
}

bool OAIPlayerSeasonStat::is_player_Set() const{
    return m_player_isSet;
}

bool OAIPlayerSeasonStat::is_player_Valid() const{
    return m_player_isValid;
}

qint32 OAIPlayerSeasonStat::getPlayerId() const {
    return m_player_id;
}
void OAIPlayerSeasonStat::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAIPlayerSeasonStat::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAIPlayerSeasonStat::is_player_id_Valid() const{
    return m_player_id_isValid;
}

qint32 OAIPlayerSeasonStat::getSeason() const {
    return m_season;
}
void OAIPlayerSeasonStat::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIPlayerSeasonStat::is_season_Set() const{
    return m_season_isSet;
}

bool OAIPlayerSeasonStat::is_season_Valid() const{
    return m_season_isValid;
}

double OAIPlayerSeasonStat::getStat() const {
    return m_stat;
}
void OAIPlayerSeasonStat::setStat(const double &stat) {
    m_stat = stat;
    m_stat_isSet = true;
}

bool OAIPlayerSeasonStat::is_stat_Set() const{
    return m_stat_isSet;
}

bool OAIPlayerSeasonStat::is_stat_Valid() const{
    return m_stat_isValid;
}

QString OAIPlayerSeasonStat::getStatType() const {
    return m_stat_type;
}
void OAIPlayerSeasonStat::setStatType(const QString &stat_type) {
    m_stat_type = stat_type;
    m_stat_type_isSet = true;
}

bool OAIPlayerSeasonStat::is_stat_type_Set() const{
    return m_stat_type_isSet;
}

bool OAIPlayerSeasonStat::is_stat_type_Valid() const{
    return m_stat_type_isValid;
}

QString OAIPlayerSeasonStat::getTeam() const {
    return m_team;
}
void OAIPlayerSeasonStat::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIPlayerSeasonStat::is_team_Set() const{
    return m_team_isSet;
}

bool OAIPlayerSeasonStat::is_team_Valid() const{
    return m_team_isValid;
}

bool OAIPlayerSeasonStat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stat_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlayerSeasonStat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
