/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICoach_seasons_inner.h
 *
 * 
 */

#ifndef OAICoach_seasons_inner_H
#define OAICoach_seasons_inner_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICoach_seasons_inner : public OAIObject {
public:
    OAICoach_seasons_inner();
    OAICoach_seasons_inner(QString json);
    ~OAICoach_seasons_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getGames() const;
    void setGames(const qint32 &games);
    bool is_games_Set() const;
    bool is_games_Valid() const;

    qint32 getLosses() const;
    void setLosses(const qint32 &losses);
    bool is_losses_Set() const;
    bool is_losses_Valid() const;

    qint32 getPostseasonRank() const;
    void setPostseasonRank(const qint32 &postseason_rank);
    bool is_postseason_rank_Set() const;
    bool is_postseason_rank_Valid() const;

    qint32 getPreseasonRank() const;
    void setPreseasonRank(const qint32 &preseason_rank);
    bool is_preseason_rank_Set() const;
    bool is_preseason_rank_Valid() const;

    QString getSchool() const;
    void setSchool(const QString &school);
    bool is_school_Set() const;
    bool is_school_Valid() const;

    double getSpDefense() const;
    void setSpDefense(const double &sp_defense);
    bool is_sp_defense_Set() const;
    bool is_sp_defense_Valid() const;

    double getSpOffense() const;
    void setSpOffense(const double &sp_offense);
    bool is_sp_offense_Set() const;
    bool is_sp_offense_Valid() const;

    double getSpOverall() const;
    void setSpOverall(const double &sp_overall);
    bool is_sp_overall_Set() const;
    bool is_sp_overall_Valid() const;

    double getSrs() const;
    void setSrs(const double &srs);
    bool is_srs_Set() const;
    bool is_srs_Valid() const;

    qint32 getTies() const;
    void setTies(const qint32 &ties);
    bool is_ties_Set() const;
    bool is_ties_Valid() const;

    qint32 getWins() const;
    void setWins(const qint32 &wins);
    bool is_wins_Set() const;
    bool is_wins_Valid() const;

    QString getYear() const;
    void setYear(const QString &year);
    bool is_year_Set() const;
    bool is_year_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_games;
    bool m_games_isSet;
    bool m_games_isValid;

    qint32 m_losses;
    bool m_losses_isSet;
    bool m_losses_isValid;

    qint32 m_postseason_rank;
    bool m_postseason_rank_isSet;
    bool m_postseason_rank_isValid;

    qint32 m_preseason_rank;
    bool m_preseason_rank_isSet;
    bool m_preseason_rank_isValid;

    QString m_school;
    bool m_school_isSet;
    bool m_school_isValid;

    double m_sp_defense;
    bool m_sp_defense_isSet;
    bool m_sp_defense_isValid;

    double m_sp_offense;
    bool m_sp_offense_isSet;
    bool m_sp_offense_isValid;

    double m_sp_overall;
    bool m_sp_overall_isSet;
    bool m_sp_overall_isValid;

    double m_srs;
    bool m_srs_isSet;
    bool m_srs_isValid;

    qint32 m_ties;
    bool m_ties_isSet;
    bool m_ties_isValid;

    qint32 m_wins;
    bool m_wins_isSet;
    bool m_wins_isValid;

    QString m_year;
    bool m_year_isSet;
    bool m_year_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICoach_seasons_inner)

#endif // OAICoach_seasons_inner_H
