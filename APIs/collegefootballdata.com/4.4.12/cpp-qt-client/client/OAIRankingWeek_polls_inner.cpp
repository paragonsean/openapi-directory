/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRankingWeek_polls_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRankingWeek_polls_inner::OAIRankingWeek_polls_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRankingWeek_polls_inner::OAIRankingWeek_polls_inner() {
    this->initializeModel();
}

OAIRankingWeek_polls_inner::~OAIRankingWeek_polls_inner() {}

void OAIRankingWeek_polls_inner::initializeModel() {

    m_poll_isSet = false;
    m_poll_isValid = false;

    m_ranks_isSet = false;
    m_ranks_isValid = false;
}

void OAIRankingWeek_polls_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRankingWeek_polls_inner::fromJsonObject(QJsonObject json) {

    m_poll_isValid = ::OpenAPI::fromJsonValue(m_poll, json[QString("poll")]);
    m_poll_isSet = !json[QString("poll")].isNull() && m_poll_isValid;

    m_ranks_isValid = ::OpenAPI::fromJsonValue(m_ranks, json[QString("ranks")]);
    m_ranks_isSet = !json[QString("ranks")].isNull() && m_ranks_isValid;
}

QString OAIRankingWeek_polls_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRankingWeek_polls_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_poll_isSet) {
        obj.insert(QString("poll"), ::OpenAPI::toJsonValue(m_poll));
    }
    if (m_ranks.size() > 0) {
        obj.insert(QString("ranks"), ::OpenAPI::toJsonValue(m_ranks));
    }
    return obj;
}

QString OAIRankingWeek_polls_inner::getPoll() const {
    return m_poll;
}
void OAIRankingWeek_polls_inner::setPoll(const QString &poll) {
    m_poll = poll;
    m_poll_isSet = true;
}

bool OAIRankingWeek_polls_inner::is_poll_Set() const{
    return m_poll_isSet;
}

bool OAIRankingWeek_polls_inner::is_poll_Valid() const{
    return m_poll_isValid;
}

QList<OAIRankingWeek_polls_inner_ranks_inner> OAIRankingWeek_polls_inner::getRanks() const {
    return m_ranks;
}
void OAIRankingWeek_polls_inner::setRanks(const QList<OAIRankingWeek_polls_inner_ranks_inner> &ranks) {
    m_ranks = ranks;
    m_ranks_isSet = true;
}

bool OAIRankingWeek_polls_inner::is_ranks_Set() const{
    return m_ranks_isSet;
}

bool OAIRankingWeek_polls_inner::is_ranks_Valid() const{
    return m_ranks_isValid;
}

bool OAIRankingWeek_polls_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_poll_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ranks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRankingWeek_polls_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
