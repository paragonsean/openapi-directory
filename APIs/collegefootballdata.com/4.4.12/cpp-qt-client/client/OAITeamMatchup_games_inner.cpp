/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamMatchup_games_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamMatchup_games_inner::OAITeamMatchup_games_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamMatchup_games_inner::OAITeamMatchup_games_inner() {
    this->initializeModel();
}

OAITeamMatchup_games_inner::~OAITeamMatchup_games_inner() {}

void OAITeamMatchup_games_inner::initializeModel() {

    m_away_score_isSet = false;
    m_away_score_isValid = false;

    m_away_team_isSet = false;
    m_away_team_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_home_score_isSet = false;
    m_home_score_isValid = false;

    m_home_team_isSet = false;
    m_home_team_isValid = false;

    m_neutral_site_isSet = false;
    m_neutral_site_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_season_type_isSet = false;
    m_season_type_isValid = false;

    m_venue_isSet = false;
    m_venue_isValid = false;

    m_week_isSet = false;
    m_week_isValid = false;

    m_winner_isSet = false;
    m_winner_isValid = false;
}

void OAITeamMatchup_games_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamMatchup_games_inner::fromJsonObject(QJsonObject json) {

    m_away_score_isValid = ::OpenAPI::fromJsonValue(m_away_score, json[QString("awayScore")]);
    m_away_score_isSet = !json[QString("awayScore")].isNull() && m_away_score_isValid;

    m_away_team_isValid = ::OpenAPI::fromJsonValue(m_away_team, json[QString("awayTeam")]);
    m_away_team_isSet = !json[QString("awayTeam")].isNull() && m_away_team_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_home_score_isValid = ::OpenAPI::fromJsonValue(m_home_score, json[QString("homeScore")]);
    m_home_score_isSet = !json[QString("homeScore")].isNull() && m_home_score_isValid;

    m_home_team_isValid = ::OpenAPI::fromJsonValue(m_home_team, json[QString("homeTeam")]);
    m_home_team_isSet = !json[QString("homeTeam")].isNull() && m_home_team_isValid;

    m_neutral_site_isValid = ::OpenAPI::fromJsonValue(m_neutral_site, json[QString("neutralSite")]);
    m_neutral_site_isSet = !json[QString("neutralSite")].isNull() && m_neutral_site_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("season")]);
    m_season_isSet = !json[QString("season")].isNull() && m_season_isValid;

    m_season_type_isValid = ::OpenAPI::fromJsonValue(m_season_type, json[QString("season_type")]);
    m_season_type_isSet = !json[QString("season_type")].isNull() && m_season_type_isValid;

    m_venue_isValid = ::OpenAPI::fromJsonValue(m_venue, json[QString("venue")]);
    m_venue_isSet = !json[QString("venue")].isNull() && m_venue_isValid;

    m_week_isValid = ::OpenAPI::fromJsonValue(m_week, json[QString("week")]);
    m_week_isSet = !json[QString("week")].isNull() && m_week_isValid;

    m_winner_isValid = ::OpenAPI::fromJsonValue(m_winner, json[QString("winner")]);
    m_winner_isSet = !json[QString("winner")].isNull() && m_winner_isValid;
}

QString OAITeamMatchup_games_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamMatchup_games_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_away_score_isSet) {
        obj.insert(QString("awayScore"), ::OpenAPI::toJsonValue(m_away_score));
    }
    if (m_away_team_isSet) {
        obj.insert(QString("awayTeam"), ::OpenAPI::toJsonValue(m_away_team));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_home_score_isSet) {
        obj.insert(QString("homeScore"), ::OpenAPI::toJsonValue(m_home_score));
    }
    if (m_home_team_isSet) {
        obj.insert(QString("homeTeam"), ::OpenAPI::toJsonValue(m_home_team));
    }
    if (m_neutral_site_isSet) {
        obj.insert(QString("neutralSite"), ::OpenAPI::toJsonValue(m_neutral_site));
    }
    if (m_season_isSet) {
        obj.insert(QString("season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_season_type_isSet) {
        obj.insert(QString("season_type"), ::OpenAPI::toJsonValue(m_season_type));
    }
    if (m_venue_isSet) {
        obj.insert(QString("venue"), ::OpenAPI::toJsonValue(m_venue));
    }
    if (m_week_isSet) {
        obj.insert(QString("week"), ::OpenAPI::toJsonValue(m_week));
    }
    if (m_winner_isSet) {
        obj.insert(QString("winner"), ::OpenAPI::toJsonValue(m_winner));
    }
    return obj;
}

qint32 OAITeamMatchup_games_inner::getAwayScore() const {
    return m_away_score;
}
void OAITeamMatchup_games_inner::setAwayScore(const qint32 &away_score) {
    m_away_score = away_score;
    m_away_score_isSet = true;
}

bool OAITeamMatchup_games_inner::is_away_score_Set() const{
    return m_away_score_isSet;
}

bool OAITeamMatchup_games_inner::is_away_score_Valid() const{
    return m_away_score_isValid;
}

QString OAITeamMatchup_games_inner::getAwayTeam() const {
    return m_away_team;
}
void OAITeamMatchup_games_inner::setAwayTeam(const QString &away_team) {
    m_away_team = away_team;
    m_away_team_isSet = true;
}

bool OAITeamMatchup_games_inner::is_away_team_Set() const{
    return m_away_team_isSet;
}

bool OAITeamMatchup_games_inner::is_away_team_Valid() const{
    return m_away_team_isValid;
}

QString OAITeamMatchup_games_inner::getDate() const {
    return m_date;
}
void OAITeamMatchup_games_inner::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAITeamMatchup_games_inner::is_date_Set() const{
    return m_date_isSet;
}

bool OAITeamMatchup_games_inner::is_date_Valid() const{
    return m_date_isValid;
}

qint32 OAITeamMatchup_games_inner::getHomeScore() const {
    return m_home_score;
}
void OAITeamMatchup_games_inner::setHomeScore(const qint32 &home_score) {
    m_home_score = home_score;
    m_home_score_isSet = true;
}

bool OAITeamMatchup_games_inner::is_home_score_Set() const{
    return m_home_score_isSet;
}

bool OAITeamMatchup_games_inner::is_home_score_Valid() const{
    return m_home_score_isValid;
}

QString OAITeamMatchup_games_inner::getHomeTeam() const {
    return m_home_team;
}
void OAITeamMatchup_games_inner::setHomeTeam(const QString &home_team) {
    m_home_team = home_team;
    m_home_team_isSet = true;
}

bool OAITeamMatchup_games_inner::is_home_team_Set() const{
    return m_home_team_isSet;
}

bool OAITeamMatchup_games_inner::is_home_team_Valid() const{
    return m_home_team_isValid;
}

bool OAITeamMatchup_games_inner::isNeutralSite() const {
    return m_neutral_site;
}
void OAITeamMatchup_games_inner::setNeutralSite(const bool &neutral_site) {
    m_neutral_site = neutral_site;
    m_neutral_site_isSet = true;
}

bool OAITeamMatchup_games_inner::is_neutral_site_Set() const{
    return m_neutral_site_isSet;
}

bool OAITeamMatchup_games_inner::is_neutral_site_Valid() const{
    return m_neutral_site_isValid;
}

qint32 OAITeamMatchup_games_inner::getSeason() const {
    return m_season;
}
void OAITeamMatchup_games_inner::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAITeamMatchup_games_inner::is_season_Set() const{
    return m_season_isSet;
}

bool OAITeamMatchup_games_inner::is_season_Valid() const{
    return m_season_isValid;
}

QString OAITeamMatchup_games_inner::getSeasonType() const {
    return m_season_type;
}
void OAITeamMatchup_games_inner::setSeasonType(const QString &season_type) {
    m_season_type = season_type;
    m_season_type_isSet = true;
}

bool OAITeamMatchup_games_inner::is_season_type_Set() const{
    return m_season_type_isSet;
}

bool OAITeamMatchup_games_inner::is_season_type_Valid() const{
    return m_season_type_isValid;
}

QString OAITeamMatchup_games_inner::getVenue() const {
    return m_venue;
}
void OAITeamMatchup_games_inner::setVenue(const QString &venue) {
    m_venue = venue;
    m_venue_isSet = true;
}

bool OAITeamMatchup_games_inner::is_venue_Set() const{
    return m_venue_isSet;
}

bool OAITeamMatchup_games_inner::is_venue_Valid() const{
    return m_venue_isValid;
}

qint32 OAITeamMatchup_games_inner::getWeek() const {
    return m_week;
}
void OAITeamMatchup_games_inner::setWeek(const qint32 &week) {
    m_week = week;
    m_week_isSet = true;
}

bool OAITeamMatchup_games_inner::is_week_Set() const{
    return m_week_isSet;
}

bool OAITeamMatchup_games_inner::is_week_Valid() const{
    return m_week_isValid;
}

QString OAITeamMatchup_games_inner::getWinner() const {
    return m_winner;
}
void OAITeamMatchup_games_inner::setWinner(const QString &winner) {
    m_winner = winner;
    m_winner_isSet = true;
}

bool OAITeamMatchup_games_inner::is_winner_Set() const{
    return m_winner_isSet;
}

bool OAITeamMatchup_games_inner::is_winner_Valid() const{
    return m_winner_isValid;
}

bool OAITeamMatchup_games_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_away_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_away_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neutral_site_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_venue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_winner_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamMatchup_games_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
