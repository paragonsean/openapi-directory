/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStatsApi_H
#define OAI_OAIStatsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdvancedGameStat.h"
#include "OAIAdvancedSeasonStat.h"
#include "OAITeamSeasonStat.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStatsApi : public QObject {
    Q_OBJECT

public:
    OAIStatsApi(const int timeOut = 0);
    ~OAIStatsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  year qint32 [optional]
    * @param[in]  week qint32 [optional]
    * @param[in]  team QString [optional]
    * @param[in]  opponent QString [optional]
    * @param[in]  exclude_garbage_time bool [optional]
    * @param[in]  season_type QString [optional]
    */
    virtual void getAdvancedTeamGameStats(const ::OpenAPI::OptionalParam<qint32> &year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &week = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &team = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &opponent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_garbage_time = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &season_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  year qint32 [optional]
    * @param[in]  team QString [optional]
    * @param[in]  exclude_garbage_time bool [optional]
    * @param[in]  start_week qint32 [optional]
    * @param[in]  end_week qint32 [optional]
    */
    virtual void getAdvancedTeamSeasonStats(const ::OpenAPI::OptionalParam<qint32> &year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &team = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_garbage_time = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &start_week = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &end_week = ::OpenAPI::OptionalParam<qint32>());


    virtual void getStatCategories();

    /**
    * @param[in]  year qint32 [optional]
    * @param[in]  team QString [optional]
    * @param[in]  conference QString [optional]
    * @param[in]  start_week qint32 [optional]
    * @param[in]  end_week qint32 [optional]
    */
    virtual void getTeamSeasonStats(const ::OpenAPI::OptionalParam<qint32> &year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &team = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conference = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_week = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &end_week = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAdvancedTeamGameStatsCallback(OAIHttpRequestWorker *worker);
    void getAdvancedTeamSeasonStatsCallback(OAIHttpRequestWorker *worker);
    void getStatCategoriesCallback(OAIHttpRequestWorker *worker);
    void getTeamSeasonStatsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAdvancedTeamGameStatsSignal(QList<OAIAdvancedGameStat> summary);
    void getAdvancedTeamSeasonStatsSignal(QList<OAIAdvancedSeasonStat> summary);
    void getStatCategoriesSignal(QList<QString> summary);
    void getTeamSeasonStatsSignal(QList<OAITeamSeasonStat> summary);


    void getAdvancedTeamGameStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAdvancedGameStat> summary);
    void getAdvancedTeamSeasonStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAdvancedSeasonStat> summary);
    void getStatCategoriesSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getTeamSeasonStatsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeamSeasonStat> summary);

    Q_DECL_DEPRECATED_X("Use getAdvancedTeamGameStatsSignalError() instead")
    void getAdvancedTeamGameStatsSignalE(QList<OAIAdvancedGameStat> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdvancedTeamGameStatsSignalError(QList<OAIAdvancedGameStat> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAdvancedTeamSeasonStatsSignalError() instead")
    void getAdvancedTeamSeasonStatsSignalE(QList<OAIAdvancedSeasonStat> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdvancedTeamSeasonStatsSignalError(QList<OAIAdvancedSeasonStat> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatCategoriesSignalError() instead")
    void getStatCategoriesSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatCategoriesSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamSeasonStatsSignalError() instead")
    void getTeamSeasonStatsSignalE(QList<OAITeamSeasonStat> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamSeasonStatsSignalError(QList<OAITeamSeasonStat> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAdvancedTeamGameStatsSignalErrorFull() instead")
    void getAdvancedTeamGameStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdvancedTeamGameStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAdvancedTeamSeasonStatsSignalErrorFull() instead")
    void getAdvancedTeamSeasonStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdvancedTeamSeasonStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStatCategoriesSignalErrorFull() instead")
    void getStatCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStatCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamSeasonStatsSignalErrorFull() instead")
    void getTeamSeasonStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamSeasonStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
