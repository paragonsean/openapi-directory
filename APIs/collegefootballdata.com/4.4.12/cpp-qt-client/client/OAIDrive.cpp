/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDrive.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDrive::OAIDrive(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDrive::OAIDrive() {
    this->initializeModel();
}

OAIDrive::~OAIDrive() {}

void OAIDrive::initializeModel() {

    m_defense_isSet = false;
    m_defense_isValid = false;

    m_defense_conference_isSet = false;
    m_defense_conference_isValid = false;

    m_drive_number_isSet = false;
    m_drive_number_isValid = false;

    m_drive_result_isSet = false;
    m_drive_result_isValid = false;

    m_end_defense_score_isSet = false;
    m_end_defense_score_isValid = false;

    m_end_offense_score_isSet = false;
    m_end_offense_score_isValid = false;

    m_end_period_isSet = false;
    m_end_period_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_end_yardline_isSet = false;
    m_end_yardline_isValid = false;

    m_end_yards_to_goal_isSet = false;
    m_end_yards_to_goal_isValid = false;

    m_game_id_isSet = false;
    m_game_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_home_offense_isSet = false;
    m_is_home_offense_isValid = false;

    m_offense_isSet = false;
    m_offense_isValid = false;

    m_offense_conference_isSet = false;
    m_offense_conference_isValid = false;

    m_plays_isSet = false;
    m_plays_isValid = false;

    m_scoring_isSet = false;
    m_scoring_isValid = false;

    m_start_defense_score_isSet = false;
    m_start_defense_score_isValid = false;

    m_start_offense_score_isSet = false;
    m_start_offense_score_isValid = false;

    m_start_period_isSet = false;
    m_start_period_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_start_yardline_isSet = false;
    m_start_yardline_isValid = false;

    m_start_yards_to_goal_isSet = false;
    m_start_yards_to_goal_isValid = false;

    m_yards_isSet = false;
    m_yards_isValid = false;
}

void OAIDrive::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDrive::fromJsonObject(QJsonObject json) {

    m_defense_isValid = ::OpenAPI::fromJsonValue(m_defense, json[QString("defense")]);
    m_defense_isSet = !json[QString("defense")].isNull() && m_defense_isValid;

    m_defense_conference_isValid = ::OpenAPI::fromJsonValue(m_defense_conference, json[QString("defense_conference")]);
    m_defense_conference_isSet = !json[QString("defense_conference")].isNull() && m_defense_conference_isValid;

    m_drive_number_isValid = ::OpenAPI::fromJsonValue(m_drive_number, json[QString("drive_number")]);
    m_drive_number_isSet = !json[QString("drive_number")].isNull() && m_drive_number_isValid;

    m_drive_result_isValid = ::OpenAPI::fromJsonValue(m_drive_result, json[QString("drive_result")]);
    m_drive_result_isSet = !json[QString("drive_result")].isNull() && m_drive_result_isValid;

    m_end_defense_score_isValid = ::OpenAPI::fromJsonValue(m_end_defense_score, json[QString("end_defense_score")]);
    m_end_defense_score_isSet = !json[QString("end_defense_score")].isNull() && m_end_defense_score_isValid;

    m_end_offense_score_isValid = ::OpenAPI::fromJsonValue(m_end_offense_score, json[QString("end_offense_score")]);
    m_end_offense_score_isSet = !json[QString("end_offense_score")].isNull() && m_end_offense_score_isValid;

    m_end_period_isValid = ::OpenAPI::fromJsonValue(m_end_period, json[QString("end_period")]);
    m_end_period_isSet = !json[QString("end_period")].isNull() && m_end_period_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("end_time")]);
    m_end_time_isSet = !json[QString("end_time")].isNull() && m_end_time_isValid;

    m_end_yardline_isValid = ::OpenAPI::fromJsonValue(m_end_yardline, json[QString("end_yardline")]);
    m_end_yardline_isSet = !json[QString("end_yardline")].isNull() && m_end_yardline_isValid;

    m_end_yards_to_goal_isValid = ::OpenAPI::fromJsonValue(m_end_yards_to_goal, json[QString("end_yards_to_goal")]);
    m_end_yards_to_goal_isSet = !json[QString("end_yards_to_goal")].isNull() && m_end_yards_to_goal_isValid;

    m_game_id_isValid = ::OpenAPI::fromJsonValue(m_game_id, json[QString("game_id")]);
    m_game_id_isSet = !json[QString("game_id")].isNull() && m_game_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_home_offense_isValid = ::OpenAPI::fromJsonValue(m_is_home_offense, json[QString("is_home_offense")]);
    m_is_home_offense_isSet = !json[QString("is_home_offense")].isNull() && m_is_home_offense_isValid;

    m_offense_isValid = ::OpenAPI::fromJsonValue(m_offense, json[QString("offense")]);
    m_offense_isSet = !json[QString("offense")].isNull() && m_offense_isValid;

    m_offense_conference_isValid = ::OpenAPI::fromJsonValue(m_offense_conference, json[QString("offense_conference")]);
    m_offense_conference_isSet = !json[QString("offense_conference")].isNull() && m_offense_conference_isValid;

    m_plays_isValid = ::OpenAPI::fromJsonValue(m_plays, json[QString("plays")]);
    m_plays_isSet = !json[QString("plays")].isNull() && m_plays_isValid;

    m_scoring_isValid = ::OpenAPI::fromJsonValue(m_scoring, json[QString("scoring")]);
    m_scoring_isSet = !json[QString("scoring")].isNull() && m_scoring_isValid;

    m_start_defense_score_isValid = ::OpenAPI::fromJsonValue(m_start_defense_score, json[QString("start_defense_score")]);
    m_start_defense_score_isSet = !json[QString("start_defense_score")].isNull() && m_start_defense_score_isValid;

    m_start_offense_score_isValid = ::OpenAPI::fromJsonValue(m_start_offense_score, json[QString("start_offense_score")]);
    m_start_offense_score_isSet = !json[QString("start_offense_score")].isNull() && m_start_offense_score_isValid;

    m_start_period_isValid = ::OpenAPI::fromJsonValue(m_start_period, json[QString("start_period")]);
    m_start_period_isSet = !json[QString("start_period")].isNull() && m_start_period_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("start_time")]);
    m_start_time_isSet = !json[QString("start_time")].isNull() && m_start_time_isValid;

    m_start_yardline_isValid = ::OpenAPI::fromJsonValue(m_start_yardline, json[QString("start_yardline")]);
    m_start_yardline_isSet = !json[QString("start_yardline")].isNull() && m_start_yardline_isValid;

    m_start_yards_to_goal_isValid = ::OpenAPI::fromJsonValue(m_start_yards_to_goal, json[QString("start_yards_to_goal")]);
    m_start_yards_to_goal_isSet = !json[QString("start_yards_to_goal")].isNull() && m_start_yards_to_goal_isValid;

    m_yards_isValid = ::OpenAPI::fromJsonValue(m_yards, json[QString("yards")]);
    m_yards_isSet = !json[QString("yards")].isNull() && m_yards_isValid;
}

QString OAIDrive::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDrive::asJsonObject() const {
    QJsonObject obj;
    if (m_defense_isSet) {
        obj.insert(QString("defense"), ::OpenAPI::toJsonValue(m_defense));
    }
    if (m_defense_conference_isSet) {
        obj.insert(QString("defense_conference"), ::OpenAPI::toJsonValue(m_defense_conference));
    }
    if (m_drive_number_isSet) {
        obj.insert(QString("drive_number"), ::OpenAPI::toJsonValue(m_drive_number));
    }
    if (m_drive_result_isSet) {
        obj.insert(QString("drive_result"), ::OpenAPI::toJsonValue(m_drive_result));
    }
    if (m_end_defense_score_isSet) {
        obj.insert(QString("end_defense_score"), ::OpenAPI::toJsonValue(m_end_defense_score));
    }
    if (m_end_offense_score_isSet) {
        obj.insert(QString("end_offense_score"), ::OpenAPI::toJsonValue(m_end_offense_score));
    }
    if (m_end_period_isSet) {
        obj.insert(QString("end_period"), ::OpenAPI::toJsonValue(m_end_period));
    }
    if (m_end_time.isSet()) {
        obj.insert(QString("end_time"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_end_yardline_isSet) {
        obj.insert(QString("end_yardline"), ::OpenAPI::toJsonValue(m_end_yardline));
    }
    if (m_end_yards_to_goal_isSet) {
        obj.insert(QString("end_yards_to_goal"), ::OpenAPI::toJsonValue(m_end_yards_to_goal));
    }
    if (m_game_id_isSet) {
        obj.insert(QString("game_id"), ::OpenAPI::toJsonValue(m_game_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_home_offense_isSet) {
        obj.insert(QString("is_home_offense"), ::OpenAPI::toJsonValue(m_is_home_offense));
    }
    if (m_offense_isSet) {
        obj.insert(QString("offense"), ::OpenAPI::toJsonValue(m_offense));
    }
    if (m_offense_conference_isSet) {
        obj.insert(QString("offense_conference"), ::OpenAPI::toJsonValue(m_offense_conference));
    }
    if (m_plays_isSet) {
        obj.insert(QString("plays"), ::OpenAPI::toJsonValue(m_plays));
    }
    if (m_scoring_isSet) {
        obj.insert(QString("scoring"), ::OpenAPI::toJsonValue(m_scoring));
    }
    if (m_start_defense_score_isSet) {
        obj.insert(QString("start_defense_score"), ::OpenAPI::toJsonValue(m_start_defense_score));
    }
    if (m_start_offense_score_isSet) {
        obj.insert(QString("start_offense_score"), ::OpenAPI::toJsonValue(m_start_offense_score));
    }
    if (m_start_period_isSet) {
        obj.insert(QString("start_period"), ::OpenAPI::toJsonValue(m_start_period));
    }
    if (m_start_time.isSet()) {
        obj.insert(QString("start_time"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_start_yardline_isSet) {
        obj.insert(QString("start_yardline"), ::OpenAPI::toJsonValue(m_start_yardline));
    }
    if (m_start_yards_to_goal_isSet) {
        obj.insert(QString("start_yards_to_goal"), ::OpenAPI::toJsonValue(m_start_yards_to_goal));
    }
    if (m_yards_isSet) {
        obj.insert(QString("yards"), ::OpenAPI::toJsonValue(m_yards));
    }
    return obj;
}

QString OAIDrive::getDefense() const {
    return m_defense;
}
void OAIDrive::setDefense(const QString &defense) {
    m_defense = defense;
    m_defense_isSet = true;
}

bool OAIDrive::is_defense_Set() const{
    return m_defense_isSet;
}

bool OAIDrive::is_defense_Valid() const{
    return m_defense_isValid;
}

QString OAIDrive::getDefenseConference() const {
    return m_defense_conference;
}
void OAIDrive::setDefenseConference(const QString &defense_conference) {
    m_defense_conference = defense_conference;
    m_defense_conference_isSet = true;
}

bool OAIDrive::is_defense_conference_Set() const{
    return m_defense_conference_isSet;
}

bool OAIDrive::is_defense_conference_Valid() const{
    return m_defense_conference_isValid;
}

qint32 OAIDrive::getDriveNumber() const {
    return m_drive_number;
}
void OAIDrive::setDriveNumber(const qint32 &drive_number) {
    m_drive_number = drive_number;
    m_drive_number_isSet = true;
}

bool OAIDrive::is_drive_number_Set() const{
    return m_drive_number_isSet;
}

bool OAIDrive::is_drive_number_Valid() const{
    return m_drive_number_isValid;
}

QString OAIDrive::getDriveResult() const {
    return m_drive_result;
}
void OAIDrive::setDriveResult(const QString &drive_result) {
    m_drive_result = drive_result;
    m_drive_result_isSet = true;
}

bool OAIDrive::is_drive_result_Set() const{
    return m_drive_result_isSet;
}

bool OAIDrive::is_drive_result_Valid() const{
    return m_drive_result_isValid;
}

qint32 OAIDrive::getEndDefenseScore() const {
    return m_end_defense_score;
}
void OAIDrive::setEndDefenseScore(const qint32 &end_defense_score) {
    m_end_defense_score = end_defense_score;
    m_end_defense_score_isSet = true;
}

bool OAIDrive::is_end_defense_score_Set() const{
    return m_end_defense_score_isSet;
}

bool OAIDrive::is_end_defense_score_Valid() const{
    return m_end_defense_score_isValid;
}

qint32 OAIDrive::getEndOffenseScore() const {
    return m_end_offense_score;
}
void OAIDrive::setEndOffenseScore(const qint32 &end_offense_score) {
    m_end_offense_score = end_offense_score;
    m_end_offense_score_isSet = true;
}

bool OAIDrive::is_end_offense_score_Set() const{
    return m_end_offense_score_isSet;
}

bool OAIDrive::is_end_offense_score_Valid() const{
    return m_end_offense_score_isValid;
}

qint32 OAIDrive::getEndPeriod() const {
    return m_end_period;
}
void OAIDrive::setEndPeriod(const qint32 &end_period) {
    m_end_period = end_period;
    m_end_period_isSet = true;
}

bool OAIDrive::is_end_period_Set() const{
    return m_end_period_isSet;
}

bool OAIDrive::is_end_period_Valid() const{
    return m_end_period_isValid;
}

OAIDrive_end_time OAIDrive::getEndTime() const {
    return m_end_time;
}
void OAIDrive::setEndTime(const OAIDrive_end_time &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIDrive::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIDrive::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint32 OAIDrive::getEndYardline() const {
    return m_end_yardline;
}
void OAIDrive::setEndYardline(const qint32 &end_yardline) {
    m_end_yardline = end_yardline;
    m_end_yardline_isSet = true;
}

bool OAIDrive::is_end_yardline_Set() const{
    return m_end_yardline_isSet;
}

bool OAIDrive::is_end_yardline_Valid() const{
    return m_end_yardline_isValid;
}

qint32 OAIDrive::getEndYardsToGoal() const {
    return m_end_yards_to_goal;
}
void OAIDrive::setEndYardsToGoal(const qint32 &end_yards_to_goal) {
    m_end_yards_to_goal = end_yards_to_goal;
    m_end_yards_to_goal_isSet = true;
}

bool OAIDrive::is_end_yards_to_goal_Set() const{
    return m_end_yards_to_goal_isSet;
}

bool OAIDrive::is_end_yards_to_goal_Valid() const{
    return m_end_yards_to_goal_isValid;
}

qint32 OAIDrive::getGameId() const {
    return m_game_id;
}
void OAIDrive::setGameId(const qint32 &game_id) {
    m_game_id = game_id;
    m_game_id_isSet = true;
}

bool OAIDrive::is_game_id_Set() const{
    return m_game_id_isSet;
}

bool OAIDrive::is_game_id_Valid() const{
    return m_game_id_isValid;
}

qint32 OAIDrive::getId() const {
    return m_id;
}
void OAIDrive::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDrive::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDrive::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIDrive::isIsHomeOffense() const {
    return m_is_home_offense;
}
void OAIDrive::setIsHomeOffense(const bool &is_home_offense) {
    m_is_home_offense = is_home_offense;
    m_is_home_offense_isSet = true;
}

bool OAIDrive::is_is_home_offense_Set() const{
    return m_is_home_offense_isSet;
}

bool OAIDrive::is_is_home_offense_Valid() const{
    return m_is_home_offense_isValid;
}

QString OAIDrive::getOffense() const {
    return m_offense;
}
void OAIDrive::setOffense(const QString &offense) {
    m_offense = offense;
    m_offense_isSet = true;
}

bool OAIDrive::is_offense_Set() const{
    return m_offense_isSet;
}

bool OAIDrive::is_offense_Valid() const{
    return m_offense_isValid;
}

QString OAIDrive::getOffenseConference() const {
    return m_offense_conference;
}
void OAIDrive::setOffenseConference(const QString &offense_conference) {
    m_offense_conference = offense_conference;
    m_offense_conference_isSet = true;
}

bool OAIDrive::is_offense_conference_Set() const{
    return m_offense_conference_isSet;
}

bool OAIDrive::is_offense_conference_Valid() const{
    return m_offense_conference_isValid;
}

qint32 OAIDrive::getPlays() const {
    return m_plays;
}
void OAIDrive::setPlays(const qint32 &plays) {
    m_plays = plays;
    m_plays_isSet = true;
}

bool OAIDrive::is_plays_Set() const{
    return m_plays_isSet;
}

bool OAIDrive::is_plays_Valid() const{
    return m_plays_isValid;
}

bool OAIDrive::isScoring() const {
    return m_scoring;
}
void OAIDrive::setScoring(const bool &scoring) {
    m_scoring = scoring;
    m_scoring_isSet = true;
}

bool OAIDrive::is_scoring_Set() const{
    return m_scoring_isSet;
}

bool OAIDrive::is_scoring_Valid() const{
    return m_scoring_isValid;
}

qint32 OAIDrive::getStartDefenseScore() const {
    return m_start_defense_score;
}
void OAIDrive::setStartDefenseScore(const qint32 &start_defense_score) {
    m_start_defense_score = start_defense_score;
    m_start_defense_score_isSet = true;
}

bool OAIDrive::is_start_defense_score_Set() const{
    return m_start_defense_score_isSet;
}

bool OAIDrive::is_start_defense_score_Valid() const{
    return m_start_defense_score_isValid;
}

qint32 OAIDrive::getStartOffenseScore() const {
    return m_start_offense_score;
}
void OAIDrive::setStartOffenseScore(const qint32 &start_offense_score) {
    m_start_offense_score = start_offense_score;
    m_start_offense_score_isSet = true;
}

bool OAIDrive::is_start_offense_score_Set() const{
    return m_start_offense_score_isSet;
}

bool OAIDrive::is_start_offense_score_Valid() const{
    return m_start_offense_score_isValid;
}

qint32 OAIDrive::getStartPeriod() const {
    return m_start_period;
}
void OAIDrive::setStartPeriod(const qint32 &start_period) {
    m_start_period = start_period;
    m_start_period_isSet = true;
}

bool OAIDrive::is_start_period_Set() const{
    return m_start_period_isSet;
}

bool OAIDrive::is_start_period_Valid() const{
    return m_start_period_isValid;
}

OAIDrive_end_time OAIDrive::getStartTime() const {
    return m_start_time;
}
void OAIDrive::setStartTime(const OAIDrive_end_time &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIDrive::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIDrive::is_start_time_Valid() const{
    return m_start_time_isValid;
}

qint32 OAIDrive::getStartYardline() const {
    return m_start_yardline;
}
void OAIDrive::setStartYardline(const qint32 &start_yardline) {
    m_start_yardline = start_yardline;
    m_start_yardline_isSet = true;
}

bool OAIDrive::is_start_yardline_Set() const{
    return m_start_yardline_isSet;
}

bool OAIDrive::is_start_yardline_Valid() const{
    return m_start_yardline_isValid;
}

qint32 OAIDrive::getStartYardsToGoal() const {
    return m_start_yards_to_goal;
}
void OAIDrive::setStartYardsToGoal(const qint32 &start_yards_to_goal) {
    m_start_yards_to_goal = start_yards_to_goal;
    m_start_yards_to_goal_isSet = true;
}

bool OAIDrive::is_start_yards_to_goal_Set() const{
    return m_start_yards_to_goal_isSet;
}

bool OAIDrive::is_start_yards_to_goal_Valid() const{
    return m_start_yards_to_goal_isValid;
}

qint32 OAIDrive::getYards() const {
    return m_yards;
}
void OAIDrive::setYards(const qint32 &yards) {
    m_yards = yards;
    m_yards_isSet = true;
}

bool OAIDrive::is_yards_Set() const{
    return m_yards_isSet;
}

bool OAIDrive::is_yards_Valid() const{
    return m_yards_isValid;
}

bool OAIDrive::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_defense_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defense_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drive_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drive_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_defense_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_offense_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_yardline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_yards_to_goal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_home_offense_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offense_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offense_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plays_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scoring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_defense_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_offense_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_yardline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_yards_to_goal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yards_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDrive::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
