/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITeamsApi_H
#define OAI_OAITeamsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPlayer.h"
#include "OAITeam.h"
#include "OAITeamMatchup.h"
#include "OAITeamTalent.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITeamsApi : public QObject {
    Q_OBJECT

public:
    OAITeamsApi(const int timeOut = 0);
    ~OAITeamsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  year qint32 [optional]
    */
    virtual void getFbsTeams(const ::OpenAPI::OptionalParam<qint32> &year = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  team QString [optional]
    * @param[in]  year qint32 [optional]
    */
    virtual void getRoster(const ::OpenAPI::OptionalParam<QString> &team = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &year = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  year qint32 [optional]
    */
    virtual void getTalent(const ::OpenAPI::OptionalParam<qint32> &year = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  team1 QString [required]
    * @param[in]  team2 QString [required]
    * @param[in]  min_year qint32 [optional]
    * @param[in]  max_year qint32 [optional]
    */
    virtual void getTeamMatchup(const QString &team1, const QString &team2, const ::OpenAPI::OptionalParam<qint32> &min_year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_year = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  conference QString [optional]
    */
    virtual void getTeams(const ::OpenAPI::OptionalParam<QString> &conference = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getFbsTeamsCallback(OAIHttpRequestWorker *worker);
    void getRosterCallback(OAIHttpRequestWorker *worker);
    void getTalentCallback(OAIHttpRequestWorker *worker);
    void getTeamMatchupCallback(OAIHttpRequestWorker *worker);
    void getTeamsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getFbsTeamsSignal(QList<OAITeam> summary);
    void getRosterSignal(QList<OAIPlayer> summary);
    void getTalentSignal(QList<OAITeamTalent> summary);
    void getTeamMatchupSignal(OAITeamMatchup summary);
    void getTeamsSignal(QList<OAITeam> summary);


    void getFbsTeamsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);
    void getRosterSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayer> summary);
    void getTalentSignalFull(OAIHttpRequestWorker *worker, QList<OAITeamTalent> summary);
    void getTeamMatchupSignalFull(OAIHttpRequestWorker *worker, OAITeamMatchup summary);
    void getTeamsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeam> summary);

    Q_DECL_DEPRECATED_X("Use getFbsTeamsSignalError() instead")
    void getFbsTeamsSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFbsTeamsSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRosterSignalError() instead")
    void getRosterSignalE(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRosterSignalError(QList<OAIPlayer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTalentSignalError() instead")
    void getTalentSignalE(QList<OAITeamTalent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTalentSignalError(QList<OAITeamTalent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamMatchupSignalError() instead")
    void getTeamMatchupSignalE(OAITeamMatchup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamMatchupSignalError(OAITeamMatchup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamsSignalError() instead")
    void getTeamsSignalE(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamsSignalError(QList<OAITeam> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getFbsTeamsSignalErrorFull() instead")
    void getFbsTeamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFbsTeamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRosterSignalErrorFull() instead")
    void getRosterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRosterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTalentSignalErrorFull() instead")
    void getTalentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTalentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamMatchupSignalErrorFull() instead")
    void getTeamMatchupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamMatchupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamsSignalErrorFull() instead")
    void getTeamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
