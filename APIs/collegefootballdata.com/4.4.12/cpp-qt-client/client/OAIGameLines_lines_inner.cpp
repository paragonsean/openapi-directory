/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGameLines_lines_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGameLines_lines_inner::OAIGameLines_lines_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGameLines_lines_inner::OAIGameLines_lines_inner() {
    this->initializeModel();
}

OAIGameLines_lines_inner::~OAIGameLines_lines_inner() {}

void OAIGameLines_lines_inner::initializeModel() {

    m_away_moneyline_isSet = false;
    m_away_moneyline_isValid = false;

    m_formatted_spread_isSet = false;
    m_formatted_spread_isValid = false;

    m_home_moneyline_isSet = false;
    m_home_moneyline_isValid = false;

    m_over_under_isSet = false;
    m_over_under_isValid = false;

    m_over_under_open_isSet = false;
    m_over_under_open_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_spread_isSet = false;
    m_spread_isValid = false;

    m_spread_open_isSet = false;
    m_spread_open_isValid = false;
}

void OAIGameLines_lines_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGameLines_lines_inner::fromJsonObject(QJsonObject json) {

    m_away_moneyline_isValid = ::OpenAPI::fromJsonValue(m_away_moneyline, json[QString("awayMoneyline")]);
    m_away_moneyline_isSet = !json[QString("awayMoneyline")].isNull() && m_away_moneyline_isValid;

    m_formatted_spread_isValid = ::OpenAPI::fromJsonValue(m_formatted_spread, json[QString("formattedSpread")]);
    m_formatted_spread_isSet = !json[QString("formattedSpread")].isNull() && m_formatted_spread_isValid;

    m_home_moneyline_isValid = ::OpenAPI::fromJsonValue(m_home_moneyline, json[QString("homeMoneyline")]);
    m_home_moneyline_isSet = !json[QString("homeMoneyline")].isNull() && m_home_moneyline_isValid;

    m_over_under_isValid = ::OpenAPI::fromJsonValue(m_over_under, json[QString("overUnder")]);
    m_over_under_isSet = !json[QString("overUnder")].isNull() && m_over_under_isValid;

    m_over_under_open_isValid = ::OpenAPI::fromJsonValue(m_over_under_open, json[QString("overUnderOpen")]);
    m_over_under_open_isSet = !json[QString("overUnderOpen")].isNull() && m_over_under_open_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_spread_isValid = ::OpenAPI::fromJsonValue(m_spread, json[QString("spread")]);
    m_spread_isSet = !json[QString("spread")].isNull() && m_spread_isValid;

    m_spread_open_isValid = ::OpenAPI::fromJsonValue(m_spread_open, json[QString("spreadOpen")]);
    m_spread_open_isSet = !json[QString("spreadOpen")].isNull() && m_spread_open_isValid;
}

QString OAIGameLines_lines_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGameLines_lines_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_away_moneyline_isSet) {
        obj.insert(QString("awayMoneyline"), ::OpenAPI::toJsonValue(m_away_moneyline));
    }
    if (m_formatted_spread_isSet) {
        obj.insert(QString("formattedSpread"), ::OpenAPI::toJsonValue(m_formatted_spread));
    }
    if (m_home_moneyline_isSet) {
        obj.insert(QString("homeMoneyline"), ::OpenAPI::toJsonValue(m_home_moneyline));
    }
    if (m_over_under_isSet) {
        obj.insert(QString("overUnder"), ::OpenAPI::toJsonValue(m_over_under));
    }
    if (m_over_under_open_isSet) {
        obj.insert(QString("overUnderOpen"), ::OpenAPI::toJsonValue(m_over_under_open));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_spread_isSet) {
        obj.insert(QString("spread"), ::OpenAPI::toJsonValue(m_spread));
    }
    if (m_spread_open_isSet) {
        obj.insert(QString("spreadOpen"), ::OpenAPI::toJsonValue(m_spread_open));
    }
    return obj;
}

double OAIGameLines_lines_inner::getAwayMoneyline() const {
    return m_away_moneyline;
}
void OAIGameLines_lines_inner::setAwayMoneyline(const double &away_moneyline) {
    m_away_moneyline = away_moneyline;
    m_away_moneyline_isSet = true;
}

bool OAIGameLines_lines_inner::is_away_moneyline_Set() const{
    return m_away_moneyline_isSet;
}

bool OAIGameLines_lines_inner::is_away_moneyline_Valid() const{
    return m_away_moneyline_isValid;
}

QString OAIGameLines_lines_inner::getFormattedSpread() const {
    return m_formatted_spread;
}
void OAIGameLines_lines_inner::setFormattedSpread(const QString &formatted_spread) {
    m_formatted_spread = formatted_spread;
    m_formatted_spread_isSet = true;
}

bool OAIGameLines_lines_inner::is_formatted_spread_Set() const{
    return m_formatted_spread_isSet;
}

bool OAIGameLines_lines_inner::is_formatted_spread_Valid() const{
    return m_formatted_spread_isValid;
}

double OAIGameLines_lines_inner::getHomeMoneyline() const {
    return m_home_moneyline;
}
void OAIGameLines_lines_inner::setHomeMoneyline(const double &home_moneyline) {
    m_home_moneyline = home_moneyline;
    m_home_moneyline_isSet = true;
}

bool OAIGameLines_lines_inner::is_home_moneyline_Set() const{
    return m_home_moneyline_isSet;
}

bool OAIGameLines_lines_inner::is_home_moneyline_Valid() const{
    return m_home_moneyline_isValid;
}

double OAIGameLines_lines_inner::getOverUnder() const {
    return m_over_under;
}
void OAIGameLines_lines_inner::setOverUnder(const double &over_under) {
    m_over_under = over_under;
    m_over_under_isSet = true;
}

bool OAIGameLines_lines_inner::is_over_under_Set() const{
    return m_over_under_isSet;
}

bool OAIGameLines_lines_inner::is_over_under_Valid() const{
    return m_over_under_isValid;
}

double OAIGameLines_lines_inner::getOverUnderOpen() const {
    return m_over_under_open;
}
void OAIGameLines_lines_inner::setOverUnderOpen(const double &over_under_open) {
    m_over_under_open = over_under_open;
    m_over_under_open_isSet = true;
}

bool OAIGameLines_lines_inner::is_over_under_open_Set() const{
    return m_over_under_open_isSet;
}

bool OAIGameLines_lines_inner::is_over_under_open_Valid() const{
    return m_over_under_open_isValid;
}

QString OAIGameLines_lines_inner::getProvider() const {
    return m_provider;
}
void OAIGameLines_lines_inner::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIGameLines_lines_inner::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIGameLines_lines_inner::is_provider_Valid() const{
    return m_provider_isValid;
}

double OAIGameLines_lines_inner::getSpread() const {
    return m_spread;
}
void OAIGameLines_lines_inner::setSpread(const double &spread) {
    m_spread = spread;
    m_spread_isSet = true;
}

bool OAIGameLines_lines_inner::is_spread_Set() const{
    return m_spread_isSet;
}

bool OAIGameLines_lines_inner::is_spread_Valid() const{
    return m_spread_isValid;
}

double OAIGameLines_lines_inner::getSpreadOpen() const {
    return m_spread_open;
}
void OAIGameLines_lines_inner::setSpreadOpen(const double &spread_open) {
    m_spread_open = spread_open;
    m_spread_open_isSet = true;
}

bool OAIGameLines_lines_inner::is_spread_open_Set() const{
    return m_spread_open_isSet;
}

bool OAIGameLines_lines_inner::is_spread_open_Valid() const{
    return m_spread_open_isValid;
}

bool OAIGameLines_lines_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_away_moneyline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_spread_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_moneyline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_over_under_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_over_under_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spread_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spread_open_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGameLines_lines_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
