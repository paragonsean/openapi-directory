/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMetricsApi_H
#define OAI_OAIMetricsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGamePPA.h"
#include "OAIPlayWP.h"
#include "OAIPlayerGamePPA.h"
#include "OAIPlayerSeasonPPA.h"
#include "OAIPredictedPoints.h"
#include "OAIPregameWP.h"
#include "OAITeamPPA.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMetricsApi : public QObject {
    Q_OBJECT

public:
    OAIMetricsApi(const int timeOut = 0);
    ~OAIMetricsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  year qint32 [required]
    * @param[in]  week qint32 [optional]
    * @param[in]  team QString [optional]
    * @param[in]  conference QString [optional]
    * @param[in]  exclude_garbage_time bool [optional]
    * @param[in]  season_type QString [optional]
    */
    virtual void getGamePPA(const qint32 &year, const ::OpenAPI::OptionalParam<qint32> &week = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &team = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conference = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_garbage_time = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &season_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  year qint32 [optional]
    * @param[in]  week qint32 [optional]
    * @param[in]  team QString [optional]
    * @param[in]  position QString [optional]
    * @param[in]  player_id qint32 [optional]
    * @param[in]  threshold QString [optional]
    * @param[in]  exclude_garbage_time bool [optional]
    * @param[in]  season_type QString [optional]
    */
    virtual void getPlayerGamePPA(const ::OpenAPI::OptionalParam<qint32> &year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &week = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &team = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &position = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &player_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &threshold = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_garbage_time = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &season_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  year qint32 [optional]
    * @param[in]  team QString [optional]
    * @param[in]  conference QString [optional]
    * @param[in]  position QString [optional]
    * @param[in]  player_id qint32 [optional]
    * @param[in]  threshold QString [optional]
    * @param[in]  exclude_garbage_time bool [optional]
    */
    virtual void getPlayerSeasonPPA(const ::OpenAPI::OptionalParam<qint32> &year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &team = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conference = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &position = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &player_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &threshold = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_garbage_time = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  down qint32 [required]
    * @param[in]  distance qint32 [required]
    */
    virtual void getPredictedPoints(const qint32 &down, const qint32 &distance);

    /**
    * @param[in]  year qint32 [optional]
    * @param[in]  week qint32 [optional]
    * @param[in]  team QString [optional]
    * @param[in]  season_type QString [optional]
    */
    virtual void getPregameWinProbabilities(const ::OpenAPI::OptionalParam<qint32> &year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &week = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &team = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &season_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  year qint32 [optional]
    * @param[in]  team QString [optional]
    * @param[in]  conference QString [optional]
    * @param[in]  exclude_garbage_time bool [optional]
    */
    virtual void getTeamPPA(const ::OpenAPI::OptionalParam<qint32> &year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &team = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conference = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_garbage_time = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  game_id qint32 [required]
    */
    virtual void getWinProbabilityData(const qint32 &game_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getGamePPACallback(OAIHttpRequestWorker *worker);
    void getPlayerGamePPACallback(OAIHttpRequestWorker *worker);
    void getPlayerSeasonPPACallback(OAIHttpRequestWorker *worker);
    void getPredictedPointsCallback(OAIHttpRequestWorker *worker);
    void getPregameWinProbabilitiesCallback(OAIHttpRequestWorker *worker);
    void getTeamPPACallback(OAIHttpRequestWorker *worker);
    void getWinProbabilityDataCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getGamePPASignal(QList<OAIGamePPA> summary);
    void getPlayerGamePPASignal(QList<OAIPlayerGamePPA> summary);
    void getPlayerSeasonPPASignal(QList<OAIPlayerSeasonPPA> summary);
    void getPredictedPointsSignal(QList<OAIPredictedPoints> summary);
    void getPregameWinProbabilitiesSignal(QList<OAIPregameWP> summary);
    void getTeamPPASignal(QList<OAITeamPPA> summary);
    void getWinProbabilityDataSignal(QList<OAIPlayWP> summary);


    void getGamePPASignalFull(OAIHttpRequestWorker *worker, QList<OAIGamePPA> summary);
    void getPlayerGamePPASignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerGamePPA> summary);
    void getPlayerSeasonPPASignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayerSeasonPPA> summary);
    void getPredictedPointsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPredictedPoints> summary);
    void getPregameWinProbabilitiesSignalFull(OAIHttpRequestWorker *worker, QList<OAIPregameWP> summary);
    void getTeamPPASignalFull(OAIHttpRequestWorker *worker, QList<OAITeamPPA> summary);
    void getWinProbabilityDataSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlayWP> summary);

    Q_DECL_DEPRECATED_X("Use getGamePPASignalError() instead")
    void getGamePPASignalE(QList<OAIGamePPA> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGamePPASignalError(QList<OAIGamePPA> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPlayerGamePPASignalError() instead")
    void getPlayerGamePPASignalE(QList<OAIPlayerGamePPA> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPlayerGamePPASignalError(QList<OAIPlayerGamePPA> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPlayerSeasonPPASignalError() instead")
    void getPlayerSeasonPPASignalE(QList<OAIPlayerSeasonPPA> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPlayerSeasonPPASignalError(QList<OAIPlayerSeasonPPA> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPredictedPointsSignalError() instead")
    void getPredictedPointsSignalE(QList<OAIPredictedPoints> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPredictedPointsSignalError(QList<OAIPredictedPoints> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPregameWinProbabilitiesSignalError() instead")
    void getPregameWinProbabilitiesSignalE(QList<OAIPregameWP> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPregameWinProbabilitiesSignalError(QList<OAIPregameWP> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamPPASignalError() instead")
    void getTeamPPASignalE(QList<OAITeamPPA> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamPPASignalError(QList<OAITeamPPA> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWinProbabilityDataSignalError() instead")
    void getWinProbabilityDataSignalE(QList<OAIPlayWP> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWinProbabilityDataSignalError(QList<OAIPlayWP> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getGamePPASignalErrorFull() instead")
    void getGamePPASignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGamePPASignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPlayerGamePPASignalErrorFull() instead")
    void getPlayerGamePPASignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPlayerGamePPASignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPlayerSeasonPPASignalErrorFull() instead")
    void getPlayerSeasonPPASignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPlayerSeasonPPASignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPredictedPointsSignalErrorFull() instead")
    void getPredictedPointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPredictedPointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPregameWinProbabilitiesSignalErrorFull() instead")
    void getPregameWinProbabilitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPregameWinProbabilitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamPPASignalErrorFull() instead")
    void getTeamPPASignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamPPASignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWinProbabilityDataSignalErrorFull() instead")
    void getWinProbabilityDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWinProbabilityDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
