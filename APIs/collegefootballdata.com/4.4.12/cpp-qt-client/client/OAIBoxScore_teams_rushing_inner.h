/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBoxScore_teams_rushing_inner.h
 *
 * 
 */

#ifndef OAIBoxScore_teams_rushing_inner_H
#define OAIBoxScore_teams_rushing_inner_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBoxScore_teams_rushing_inner : public OAIObject {
public:
    OAIBoxScore_teams_rushing_inner();
    OAIBoxScore_teams_rushing_inner(QString json);
    ~OAIBoxScore_teams_rushing_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getLineYards() const;
    void setLineYards(const double &line_yards);
    bool is_line_yards_Set() const;
    bool is_line_yards_Valid() const;

    double getLineYardsAverage() const;
    void setLineYardsAverage(const double &line_yards_average);
    bool is_line_yards_average_Set() const;
    bool is_line_yards_average_Valid() const;

    qint32 getOpenFieldYards() const;
    void setOpenFieldYards(const qint32 &open_field_yards);
    bool is_open_field_yards_Set() const;
    bool is_open_field_yards_Valid() const;

    double getOpenFieldYardsAverage() const;
    void setOpenFieldYardsAverage(const double &open_field_yards_average);
    bool is_open_field_yards_average_Set() const;
    bool is_open_field_yards_average_Valid() const;

    double getPowerSuccess() const;
    void setPowerSuccess(const double &power_success);
    bool is_power_success_Set() const;
    bool is_power_success_Valid() const;

    qint32 getSecondLevelYards() const;
    void setSecondLevelYards(const qint32 &second_level_yards);
    bool is_second_level_yards_Set() const;
    bool is_second_level_yards_Valid() const;

    double getSecondLevelYardsAverage() const;
    void setSecondLevelYardsAverage(const double &second_level_yards_average);
    bool is_second_level_yards_average_Set() const;
    bool is_second_level_yards_average_Valid() const;

    double getStuffRate() const;
    void setStuffRate(const double &stuff_rate);
    bool is_stuff_rate_Set() const;
    bool is_stuff_rate_Valid() const;

    QString getTeam() const;
    void setTeam(const QString &team);
    bool is_team_Set() const;
    bool is_team_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_line_yards;
    bool m_line_yards_isSet;
    bool m_line_yards_isValid;

    double m_line_yards_average;
    bool m_line_yards_average_isSet;
    bool m_line_yards_average_isValid;

    qint32 m_open_field_yards;
    bool m_open_field_yards_isSet;
    bool m_open_field_yards_isValid;

    double m_open_field_yards_average;
    bool m_open_field_yards_average_isSet;
    bool m_open_field_yards_average_isValid;

    double m_power_success;
    bool m_power_success_isSet;
    bool m_power_success_isValid;

    qint32 m_second_level_yards;
    bool m_second_level_yards_isSet;
    bool m_second_level_yards_isValid;

    double m_second_level_yards_average;
    bool m_second_level_yards_average_isSet;
    bool m_second_level_yards_average_isValid;

    double m_stuff_rate;
    bool m_stuff_rate_isSet;
    bool m_stuff_rate_isValid;

    QString m_team;
    bool m_team_isSet;
    bool m_team_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBoxScore_teams_rushing_inner)

#endif // OAIBoxScore_teams_rushing_inner_H
