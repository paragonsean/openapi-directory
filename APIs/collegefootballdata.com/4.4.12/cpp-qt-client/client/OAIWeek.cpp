/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWeek.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWeek::OAIWeek(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWeek::OAIWeek() {
    this->initializeModel();
}

OAIWeek::~OAIWeek() {}

void OAIWeek::initializeModel() {

    m_first_game_start_isSet = false;
    m_first_game_start_isValid = false;

    m_last_game_start_isSet = false;
    m_last_game_start_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_season_type_isSet = false;
    m_season_type_isValid = false;

    m_week_isSet = false;
    m_week_isValid = false;
}

void OAIWeek::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWeek::fromJsonObject(QJsonObject json) {

    m_first_game_start_isValid = ::OpenAPI::fromJsonValue(m_first_game_start, json[QString("firstGameStart")]);
    m_first_game_start_isSet = !json[QString("firstGameStart")].isNull() && m_first_game_start_isValid;

    m_last_game_start_isValid = ::OpenAPI::fromJsonValue(m_last_game_start, json[QString("lastGameStart")]);
    m_last_game_start_isSet = !json[QString("lastGameStart")].isNull() && m_last_game_start_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("season")]);
    m_season_isSet = !json[QString("season")].isNull() && m_season_isValid;

    m_season_type_isValid = ::OpenAPI::fromJsonValue(m_season_type, json[QString("seasonType")]);
    m_season_type_isSet = !json[QString("seasonType")].isNull() && m_season_type_isValid;

    m_week_isValid = ::OpenAPI::fromJsonValue(m_week, json[QString("week")]);
    m_week_isSet = !json[QString("week")].isNull() && m_week_isValid;
}

QString OAIWeek::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWeek::asJsonObject() const {
    QJsonObject obj;
    if (m_first_game_start_isSet) {
        obj.insert(QString("firstGameStart"), ::OpenAPI::toJsonValue(m_first_game_start));
    }
    if (m_last_game_start_isSet) {
        obj.insert(QString("lastGameStart"), ::OpenAPI::toJsonValue(m_last_game_start));
    }
    if (m_season_isSet) {
        obj.insert(QString("season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_season_type_isSet) {
        obj.insert(QString("seasonType"), ::OpenAPI::toJsonValue(m_season_type));
    }
    if (m_week_isSet) {
        obj.insert(QString("week"), ::OpenAPI::toJsonValue(m_week));
    }
    return obj;
}

QString OAIWeek::getFirstGameStart() const {
    return m_first_game_start;
}
void OAIWeek::setFirstGameStart(const QString &first_game_start) {
    m_first_game_start = first_game_start;
    m_first_game_start_isSet = true;
}

bool OAIWeek::is_first_game_start_Set() const{
    return m_first_game_start_isSet;
}

bool OAIWeek::is_first_game_start_Valid() const{
    return m_first_game_start_isValid;
}

QString OAIWeek::getLastGameStart() const {
    return m_last_game_start;
}
void OAIWeek::setLastGameStart(const QString &last_game_start) {
    m_last_game_start = last_game_start;
    m_last_game_start_isSet = true;
}

bool OAIWeek::is_last_game_start_Set() const{
    return m_last_game_start_isSet;
}

bool OAIWeek::is_last_game_start_Valid() const{
    return m_last_game_start_isValid;
}

qint32 OAIWeek::getSeason() const {
    return m_season;
}
void OAIWeek::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIWeek::is_season_Set() const{
    return m_season_isSet;
}

bool OAIWeek::is_season_Valid() const{
    return m_season_isValid;
}

QString OAIWeek::getSeasonType() const {
    return m_season_type;
}
void OAIWeek::setSeasonType(const QString &season_type) {
    m_season_type = season_type;
    m_season_type_isSet = true;
}

bool OAIWeek::is_season_type_Set() const{
    return m_season_type_isSet;
}

bool OAIWeek::is_season_type_Valid() const{
    return m_season_type_isValid;
}

qint32 OAIWeek::getWeek() const {
    return m_week;
}
void OAIWeek::setWeek(const qint32 &week) {
    m_week = week;
    m_week_isSet = true;
}

bool OAIWeek::is_week_Set() const{
    return m_week_isSet;
}

bool OAIWeek::is_week_Valid() const{
    return m_week_isValid;
}

bool OAIWeek::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_game_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_game_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWeek::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
