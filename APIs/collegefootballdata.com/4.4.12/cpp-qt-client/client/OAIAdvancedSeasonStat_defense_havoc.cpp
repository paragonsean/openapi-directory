/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvancedSeasonStat_defense_havoc.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvancedSeasonStat_defense_havoc::OAIAdvancedSeasonStat_defense_havoc(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvancedSeasonStat_defense_havoc::OAIAdvancedSeasonStat_defense_havoc() {
    this->initializeModel();
}

OAIAdvancedSeasonStat_defense_havoc::~OAIAdvancedSeasonStat_defense_havoc() {}

void OAIAdvancedSeasonStat_defense_havoc::initializeModel() {

    m_db_isSet = false;
    m_db_isValid = false;

    m_front_seven_isSet = false;
    m_front_seven_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIAdvancedSeasonStat_defense_havoc::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvancedSeasonStat_defense_havoc::fromJsonObject(QJsonObject json) {

    m_db_isValid = ::OpenAPI::fromJsonValue(m_db, json[QString("db")]);
    m_db_isSet = !json[QString("db")].isNull() && m_db_isValid;

    m_front_seven_isValid = ::OpenAPI::fromJsonValue(m_front_seven, json[QString("frontSeven")]);
    m_front_seven_isSet = !json[QString("frontSeven")].isNull() && m_front_seven_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIAdvancedSeasonStat_defense_havoc::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvancedSeasonStat_defense_havoc::asJsonObject() const {
    QJsonObject obj;
    if (m_db_isSet) {
        obj.insert(QString("db"), ::OpenAPI::toJsonValue(m_db));
    }
    if (m_front_seven_isSet) {
        obj.insert(QString("frontSeven"), ::OpenAPI::toJsonValue(m_front_seven));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

double OAIAdvancedSeasonStat_defense_havoc::getDb() const {
    return m_db;
}
void OAIAdvancedSeasonStat_defense_havoc::setDb(const double &db) {
    m_db = db;
    m_db_isSet = true;
}

bool OAIAdvancedSeasonStat_defense_havoc::is_db_Set() const{
    return m_db_isSet;
}

bool OAIAdvancedSeasonStat_defense_havoc::is_db_Valid() const{
    return m_db_isValid;
}

double OAIAdvancedSeasonStat_defense_havoc::getFrontSeven() const {
    return m_front_seven;
}
void OAIAdvancedSeasonStat_defense_havoc::setFrontSeven(const double &front_seven) {
    m_front_seven = front_seven;
    m_front_seven_isSet = true;
}

bool OAIAdvancedSeasonStat_defense_havoc::is_front_seven_Set() const{
    return m_front_seven_isSet;
}

bool OAIAdvancedSeasonStat_defense_havoc::is_front_seven_Valid() const{
    return m_front_seven_isValid;
}

double OAIAdvancedSeasonStat_defense_havoc::getTotal() const {
    return m_total;
}
void OAIAdvancedSeasonStat_defense_havoc::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIAdvancedSeasonStat_defense_havoc::is_total_Set() const{
    return m_total_isSet;
}

bool OAIAdvancedSeasonStat_defense_havoc::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIAdvancedSeasonStat_defense_havoc::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_db_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_front_seven_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvancedSeasonStat_defense_havoc::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
