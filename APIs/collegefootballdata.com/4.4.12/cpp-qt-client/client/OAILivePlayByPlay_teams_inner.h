/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILivePlayByPlay_teams_inner.h
 *
 * 
 */

#ifndef OAILivePlayByPlay_teams_inner_H
#define OAILivePlayByPlay_teams_inner_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILivePlayByPlay_teams_inner : public OAIObject {
public:
    OAILivePlayByPlay_teams_inner();
    OAILivePlayByPlay_teams_inner(QString json);
    ~OAILivePlayByPlay_teams_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getDrives() const;
    void setDrives(const qint32 &drives);
    bool is_drives_Set() const;
    bool is_drives_Valid() const;

    double getEpaPerPass() const;
    void setEpaPerPass(const double &epa_per_pass);
    bool is_epa_per_pass_Set() const;
    bool is_epa_per_pass_Valid() const;

    double getEpaPerPlay() const;
    void setEpaPerPlay(const double &epa_per_play);
    bool is_epa_per_play_Set() const;
    bool is_epa_per_play_Valid() const;

    double getEpaPerRush() const;
    void setEpaPerRush(const double &epa_per_rush);
    bool is_epa_per_rush_Set() const;
    bool is_epa_per_rush_Valid() const;

    double getExplosiveness() const;
    void setExplosiveness(const double &explosiveness);
    bool is_explosiveness_Set() const;
    bool is_explosiveness_Valid() const;

    QString getHomeAway() const;
    void setHomeAway(const QString &home_away);
    bool is_home_away_Set() const;
    bool is_home_away_Valid() const;

    qint32 getLineYards() const;
    void setLineYards(const qint32 &line_yards);
    bool is_line_yards_Set() const;
    bool is_line_yards_Valid() const;

    double getLineYardsPerRush() const;
    void setLineYardsPerRush(const double &line_yards_per_rush);
    bool is_line_yards_per_rush_Set() const;
    bool is_line_yards_per_rush_Valid() const;

    qint32 getOpenFieldYards() const;
    void setOpenFieldYards(const qint32 &open_field_yards);
    bool is_open_field_yards_Set() const;
    bool is_open_field_yards_Valid() const;

    double getOpenFieldYardsPerRush() const;
    void setOpenFieldYardsPerRush(const double &open_field_yards_per_rush);
    bool is_open_field_yards_per_rush_Set() const;
    bool is_open_field_yards_per_rush_Valid() const;

    double getPassingDownSuccessRate() const;
    void setPassingDownSuccessRate(const double &passing_down_success_rate);
    bool is_passing_down_success_rate_Set() const;
    bool is_passing_down_success_rate_Valid() const;

    double getPassingEpa() const;
    void setPassingEpa(const double &passing_epa);
    bool is_passing_epa_Set() const;
    bool is_passing_epa_Valid() const;

    qint32 getPlays() const;
    void setPlays(const qint32 &plays);
    bool is_plays_Set() const;
    bool is_plays_Valid() const;

    qint32 getPoints() const;
    void setPoints(const qint32 &points);
    bool is_points_Set() const;
    bool is_points_Valid() const;

    double getPointsPerOpportunity() const;
    void setPointsPerOpportunity(const double &points_per_opportunity);
    bool is_points_per_opportunity_Set() const;
    bool is_points_per_opportunity_Valid() const;

    double getRushingEpa() const;
    void setRushingEpa(const double &rushing_epa);
    bool is_rushing_epa_Set() const;
    bool is_rushing_epa_Valid() const;

    qint32 getScoringOpportunities() const;
    void setScoringOpportunities(const qint32 &scoring_opportunities);
    bool is_scoring_opportunities_Set() const;
    bool is_scoring_opportunities_Valid() const;

    qint32 getSecondLevelYards() const;
    void setSecondLevelYards(const qint32 &second_level_yards);
    bool is_second_level_yards_Set() const;
    bool is_second_level_yards_Valid() const;

    double getSecondLevelYardsPerRush() const;
    void setSecondLevelYardsPerRush(const double &second_level_yards_per_rush);
    bool is_second_level_yards_per_rush_Set() const;
    bool is_second_level_yards_per_rush_Valid() const;

    double getStandardDownSuccessRate() const;
    void setStandardDownSuccessRate(const double &standard_down_success_rate);
    bool is_standard_down_success_rate_Set() const;
    bool is_standard_down_success_rate_Valid() const;

    double getSuccessRate() const;
    void setSuccessRate(const double &success_rate);
    bool is_success_rate_Set() const;
    bool is_success_rate_Valid() const;

    QString getTeam() const;
    void setTeam(const QString &team);
    bool is_team_Set() const;
    bool is_team_Valid() const;

    qint32 getTeamId() const;
    void setTeamId(const qint32 &team_id);
    bool is_team_id_Set() const;
    bool is_team_id_Valid() const;

    double getTotalEpa() const;
    void setTotalEpa(const double &total_epa);
    bool is_total_epa_Set() const;
    bool is_total_epa_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_drives;
    bool m_drives_isSet;
    bool m_drives_isValid;

    double m_epa_per_pass;
    bool m_epa_per_pass_isSet;
    bool m_epa_per_pass_isValid;

    double m_epa_per_play;
    bool m_epa_per_play_isSet;
    bool m_epa_per_play_isValid;

    double m_epa_per_rush;
    bool m_epa_per_rush_isSet;
    bool m_epa_per_rush_isValid;

    double m_explosiveness;
    bool m_explosiveness_isSet;
    bool m_explosiveness_isValid;

    QString m_home_away;
    bool m_home_away_isSet;
    bool m_home_away_isValid;

    qint32 m_line_yards;
    bool m_line_yards_isSet;
    bool m_line_yards_isValid;

    double m_line_yards_per_rush;
    bool m_line_yards_per_rush_isSet;
    bool m_line_yards_per_rush_isValid;

    qint32 m_open_field_yards;
    bool m_open_field_yards_isSet;
    bool m_open_field_yards_isValid;

    double m_open_field_yards_per_rush;
    bool m_open_field_yards_per_rush_isSet;
    bool m_open_field_yards_per_rush_isValid;

    double m_passing_down_success_rate;
    bool m_passing_down_success_rate_isSet;
    bool m_passing_down_success_rate_isValid;

    double m_passing_epa;
    bool m_passing_epa_isSet;
    bool m_passing_epa_isValid;

    qint32 m_plays;
    bool m_plays_isSet;
    bool m_plays_isValid;

    qint32 m_points;
    bool m_points_isSet;
    bool m_points_isValid;

    double m_points_per_opportunity;
    bool m_points_per_opportunity_isSet;
    bool m_points_per_opportunity_isValid;

    double m_rushing_epa;
    bool m_rushing_epa_isSet;
    bool m_rushing_epa_isValid;

    qint32 m_scoring_opportunities;
    bool m_scoring_opportunities_isSet;
    bool m_scoring_opportunities_isValid;

    qint32 m_second_level_yards;
    bool m_second_level_yards_isSet;
    bool m_second_level_yards_isValid;

    double m_second_level_yards_per_rush;
    bool m_second_level_yards_per_rush_isSet;
    bool m_second_level_yards_per_rush_isValid;

    double m_standard_down_success_rate;
    bool m_standard_down_success_rate_isSet;
    bool m_standard_down_success_rate_isValid;

    double m_success_rate;
    bool m_success_rate_isSet;
    bool m_success_rate_isValid;

    QString m_team;
    bool m_team_isSet;
    bool m_team_isValid;

    qint32 m_team_id;
    bool m_team_id_isSet;
    bool m_team_id_isValid;

    double m_total_epa;
    bool m_total_epa_isSet;
    bool m_total_epa_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILivePlayByPlay_teams_inner)

#endif // OAILivePlayByPlay_teams_inner_H
