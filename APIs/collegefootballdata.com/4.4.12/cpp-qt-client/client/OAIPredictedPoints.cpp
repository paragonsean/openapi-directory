/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPredictedPoints.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPredictedPoints::OAIPredictedPoints(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPredictedPoints::OAIPredictedPoints() {
    this->initializeModel();
}

OAIPredictedPoints::~OAIPredictedPoints() {}

void OAIPredictedPoints::initializeModel() {

    m_predicted_points_isSet = false;
    m_predicted_points_isValid = false;

    m_yard_line_isSet = false;
    m_yard_line_isValid = false;
}

void OAIPredictedPoints::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPredictedPoints::fromJsonObject(QJsonObject json) {

    m_predicted_points_isValid = ::OpenAPI::fromJsonValue(m_predicted_points, json[QString("predictedPoints")]);
    m_predicted_points_isSet = !json[QString("predictedPoints")].isNull() && m_predicted_points_isValid;

    m_yard_line_isValid = ::OpenAPI::fromJsonValue(m_yard_line, json[QString("yardLine")]);
    m_yard_line_isSet = !json[QString("yardLine")].isNull() && m_yard_line_isValid;
}

QString OAIPredictedPoints::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPredictedPoints::asJsonObject() const {
    QJsonObject obj;
    if (m_predicted_points_isSet) {
        obj.insert(QString("predictedPoints"), ::OpenAPI::toJsonValue(m_predicted_points));
    }
    if (m_yard_line_isSet) {
        obj.insert(QString("yardLine"), ::OpenAPI::toJsonValue(m_yard_line));
    }
    return obj;
}

double OAIPredictedPoints::getPredictedPoints() const {
    return m_predicted_points;
}
void OAIPredictedPoints::setPredictedPoints(const double &predicted_points) {
    m_predicted_points = predicted_points;
    m_predicted_points_isSet = true;
}

bool OAIPredictedPoints::is_predicted_points_Set() const{
    return m_predicted_points_isSet;
}

bool OAIPredictedPoints::is_predicted_points_Valid() const{
    return m_predicted_points_isValid;
}

qint32 OAIPredictedPoints::getYardLine() const {
    return m_yard_line;
}
void OAIPredictedPoints::setYardLine(const qint32 &yard_line) {
    m_yard_line = yard_line;
    m_yard_line_isSet = true;
}

bool OAIPredictedPoints::is_yard_line_Set() const{
    return m_yard_line_isSet;
}

bool OAIPredictedPoints::is_yard_line_Valid() const{
    return m_yard_line_isValid;
}

bool OAIPredictedPoints::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_predicted_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yard_line_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPredictedPoints::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
