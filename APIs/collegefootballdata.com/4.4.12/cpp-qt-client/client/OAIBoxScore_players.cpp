/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBoxScore_players.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBoxScore_players::OAIBoxScore_players(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBoxScore_players::OAIBoxScore_players() {
    this->initializeModel();
}

OAIBoxScore_players::~OAIBoxScore_players() {}

void OAIBoxScore_players::initializeModel() {

    m_ppa_isSet = false;
    m_ppa_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;
}

void OAIBoxScore_players::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBoxScore_players::fromJsonObject(QJsonObject json) {

    m_ppa_isValid = ::OpenAPI::fromJsonValue(m_ppa, json[QString("ppa")]);
    m_ppa_isSet = !json[QString("ppa")].isNull() && m_ppa_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;
}

QString OAIBoxScore_players::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBoxScore_players::asJsonObject() const {
    QJsonObject obj;
    if (m_ppa.size() > 0) {
        obj.insert(QString("ppa"), ::OpenAPI::toJsonValue(m_ppa));
    }
    if (m_usage.size() > 0) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    return obj;
}

QList<OAIBoxScore_players_ppa_inner> OAIBoxScore_players::getPpa() const {
    return m_ppa;
}
void OAIBoxScore_players::setPpa(const QList<OAIBoxScore_players_ppa_inner> &ppa) {
    m_ppa = ppa;
    m_ppa_isSet = true;
}

bool OAIBoxScore_players::is_ppa_Set() const{
    return m_ppa_isSet;
}

bool OAIBoxScore_players::is_ppa_Valid() const{
    return m_ppa_isValid;
}

QList<OAIBoxScore_players_usage_inner> OAIBoxScore_players::getUsage() const {
    return m_usage;
}
void OAIBoxScore_players::setUsage(const QList<OAIBoxScore_players_usage_inner> &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIBoxScore_players::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIBoxScore_players::is_usage_Valid() const{
    return m_usage_isValid;
}

bool OAIBoxScore_players::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ppa.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBoxScore_players::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
