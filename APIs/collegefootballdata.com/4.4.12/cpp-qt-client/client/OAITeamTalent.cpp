/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamTalent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamTalent::OAITeamTalent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamTalent::OAITeamTalent() {
    this->initializeModel();
}

OAITeamTalent::~OAITeamTalent() {}

void OAITeamTalent::initializeModel() {

    m_school_isSet = false;
    m_school_isValid = false;

    m_talent_isSet = false;
    m_talent_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAITeamTalent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamTalent::fromJsonObject(QJsonObject json) {

    m_school_isValid = ::OpenAPI::fromJsonValue(m_school, json[QString("school")]);
    m_school_isSet = !json[QString("school")].isNull() && m_school_isValid;

    m_talent_isValid = ::OpenAPI::fromJsonValue(m_talent, json[QString("talent")]);
    m_talent_isSet = !json[QString("talent")].isNull() && m_talent_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAITeamTalent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamTalent::asJsonObject() const {
    QJsonObject obj;
    if (m_school_isSet) {
        obj.insert(QString("school"), ::OpenAPI::toJsonValue(m_school));
    }
    if (m_talent_isSet) {
        obj.insert(QString("talent"), ::OpenAPI::toJsonValue(m_talent));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QString OAITeamTalent::getSchool() const {
    return m_school;
}
void OAITeamTalent::setSchool(const QString &school) {
    m_school = school;
    m_school_isSet = true;
}

bool OAITeamTalent::is_school_Set() const{
    return m_school_isSet;
}

bool OAITeamTalent::is_school_Valid() const{
    return m_school_isValid;
}

double OAITeamTalent::getTalent() const {
    return m_talent;
}
void OAITeamTalent::setTalent(const double &talent) {
    m_talent = talent;
    m_talent_isSet = true;
}

bool OAITeamTalent::is_talent_Set() const{
    return m_talent_isSet;
}

bool OAITeamTalent::is_talent_Valid() const{
    return m_talent_isValid;
}

qint32 OAITeamTalent::getYear() const {
    return m_year;
}
void OAITeamTalent::setYear(const qint32 &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAITeamTalent::is_year_Set() const{
    return m_year_isSet;
}

bool OAITeamTalent::is_year_Valid() const{
    return m_year_isValid;
}

bool OAITeamTalent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_school_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_talent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamTalent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
