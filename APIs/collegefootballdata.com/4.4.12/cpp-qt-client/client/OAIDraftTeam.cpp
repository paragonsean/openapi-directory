/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDraftTeam.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDraftTeam::OAIDraftTeam(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDraftTeam::OAIDraftTeam() {
    this->initializeModel();
}

OAIDraftTeam::~OAIDraftTeam() {}

void OAIDraftTeam::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_nickname_isSet = false;
    m_nickname_isValid = false;
}

void OAIDraftTeam::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDraftTeam::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_nickname_isValid = ::OpenAPI::fromJsonValue(m_nickname, json[QString("nickname")]);
    m_nickname_isSet = !json[QString("nickname")].isNull() && m_nickname_isValid;
}

QString OAIDraftTeam::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDraftTeam::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_logo_isSet) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_nickname_isSet) {
        obj.insert(QString("nickname"), ::OpenAPI::toJsonValue(m_nickname));
    }
    return obj;
}

QString OAIDraftTeam::getDisplayName() const {
    return m_display_name;
}
void OAIDraftTeam::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIDraftTeam::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIDraftTeam::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIDraftTeam::getLocation() const {
    return m_location;
}
void OAIDraftTeam::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIDraftTeam::is_location_Set() const{
    return m_location_isSet;
}

bool OAIDraftTeam::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIDraftTeam::getLogo() const {
    return m_logo;
}
void OAIDraftTeam::setLogo(const QString &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAIDraftTeam::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAIDraftTeam::is_logo_Valid() const{
    return m_logo_isValid;
}

QString OAIDraftTeam::getNickname() const {
    return m_nickname;
}
void OAIDraftTeam::setNickname(const QString &nickname) {
    m_nickname = nickname;
    m_nickname_isSet = true;
}

bool OAIDraftTeam::is_nickname_Set() const{
    return m_nickname_isSet;
}

bool OAIDraftTeam::is_nickname_Valid() const{
    return m_nickname_isValid;
}

bool OAIDraftTeam::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDraftTeam::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
