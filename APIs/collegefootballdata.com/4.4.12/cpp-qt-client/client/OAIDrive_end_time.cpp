/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDrive_end_time.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDrive_end_time::OAIDrive_end_time(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDrive_end_time::OAIDrive_end_time() {
    this->initializeModel();
}

OAIDrive_end_time::~OAIDrive_end_time() {}

void OAIDrive_end_time::initializeModel() {

    m_minutes_isSet = false;
    m_minutes_isValid = false;

    m_seconds_isSet = false;
    m_seconds_isValid = false;
}

void OAIDrive_end_time::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDrive_end_time::fromJsonObject(QJsonObject json) {

    m_minutes_isValid = ::OpenAPI::fromJsonValue(m_minutes, json[QString("minutes")]);
    m_minutes_isSet = !json[QString("minutes")].isNull() && m_minutes_isValid;

    m_seconds_isValid = ::OpenAPI::fromJsonValue(m_seconds, json[QString("seconds")]);
    m_seconds_isSet = !json[QString("seconds")].isNull() && m_seconds_isValid;
}

QString OAIDrive_end_time::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDrive_end_time::asJsonObject() const {
    QJsonObject obj;
    if (m_minutes_isSet) {
        obj.insert(QString("minutes"), ::OpenAPI::toJsonValue(m_minutes));
    }
    if (m_seconds_isSet) {
        obj.insert(QString("seconds"), ::OpenAPI::toJsonValue(m_seconds));
    }
    return obj;
}

qint32 OAIDrive_end_time::getMinutes() const {
    return m_minutes;
}
void OAIDrive_end_time::setMinutes(const qint32 &minutes) {
    m_minutes = minutes;
    m_minutes_isSet = true;
}

bool OAIDrive_end_time::is_minutes_Set() const{
    return m_minutes_isSet;
}

bool OAIDrive_end_time::is_minutes_Valid() const{
    return m_minutes_isValid;
}

qint32 OAIDrive_end_time::getSeconds() const {
    return m_seconds;
}
void OAIDrive_end_time::setSeconds(const qint32 &seconds) {
    m_seconds = seconds;
    m_seconds_isSet = true;
}

bool OAIDrive_end_time::is_seconds_Set() const{
    return m_seconds_isSet;
}

bool OAIDrive_end_time::is_seconds_Valid() const{
    return m_seconds_isValid;
}

bool OAIDrive_end_time::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDrive_end_time::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
