/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBoxScore_teams_rushing_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBoxScore_teams_rushing_inner::OAIBoxScore_teams_rushing_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBoxScore_teams_rushing_inner::OAIBoxScore_teams_rushing_inner() {
    this->initializeModel();
}

OAIBoxScore_teams_rushing_inner::~OAIBoxScore_teams_rushing_inner() {}

void OAIBoxScore_teams_rushing_inner::initializeModel() {

    m_line_yards_isSet = false;
    m_line_yards_isValid = false;

    m_line_yards_average_isSet = false;
    m_line_yards_average_isValid = false;

    m_open_field_yards_isSet = false;
    m_open_field_yards_isValid = false;

    m_open_field_yards_average_isSet = false;
    m_open_field_yards_average_isValid = false;

    m_power_success_isSet = false;
    m_power_success_isValid = false;

    m_second_level_yards_isSet = false;
    m_second_level_yards_isValid = false;

    m_second_level_yards_average_isSet = false;
    m_second_level_yards_average_isValid = false;

    m_stuff_rate_isSet = false;
    m_stuff_rate_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;
}

void OAIBoxScore_teams_rushing_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBoxScore_teams_rushing_inner::fromJsonObject(QJsonObject json) {

    m_line_yards_isValid = ::OpenAPI::fromJsonValue(m_line_yards, json[QString("lineYards")]);
    m_line_yards_isSet = !json[QString("lineYards")].isNull() && m_line_yards_isValid;

    m_line_yards_average_isValid = ::OpenAPI::fromJsonValue(m_line_yards_average, json[QString("lineYardsAverage")]);
    m_line_yards_average_isSet = !json[QString("lineYardsAverage")].isNull() && m_line_yards_average_isValid;

    m_open_field_yards_isValid = ::OpenAPI::fromJsonValue(m_open_field_yards, json[QString("openFieldYards")]);
    m_open_field_yards_isSet = !json[QString("openFieldYards")].isNull() && m_open_field_yards_isValid;

    m_open_field_yards_average_isValid = ::OpenAPI::fromJsonValue(m_open_field_yards_average, json[QString("openFieldYardsAverage")]);
    m_open_field_yards_average_isSet = !json[QString("openFieldYardsAverage")].isNull() && m_open_field_yards_average_isValid;

    m_power_success_isValid = ::OpenAPI::fromJsonValue(m_power_success, json[QString("powerSuccess")]);
    m_power_success_isSet = !json[QString("powerSuccess")].isNull() && m_power_success_isValid;

    m_second_level_yards_isValid = ::OpenAPI::fromJsonValue(m_second_level_yards, json[QString("secondLevelYards")]);
    m_second_level_yards_isSet = !json[QString("secondLevelYards")].isNull() && m_second_level_yards_isValid;

    m_second_level_yards_average_isValid = ::OpenAPI::fromJsonValue(m_second_level_yards_average, json[QString("secondLevelYardsAverage")]);
    m_second_level_yards_average_isSet = !json[QString("secondLevelYardsAverage")].isNull() && m_second_level_yards_average_isValid;

    m_stuff_rate_isValid = ::OpenAPI::fromJsonValue(m_stuff_rate, json[QString("stuffRate")]);
    m_stuff_rate_isSet = !json[QString("stuffRate")].isNull() && m_stuff_rate_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;
}

QString OAIBoxScore_teams_rushing_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBoxScore_teams_rushing_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_line_yards_isSet) {
        obj.insert(QString("lineYards"), ::OpenAPI::toJsonValue(m_line_yards));
    }
    if (m_line_yards_average_isSet) {
        obj.insert(QString("lineYardsAverage"), ::OpenAPI::toJsonValue(m_line_yards_average));
    }
    if (m_open_field_yards_isSet) {
        obj.insert(QString("openFieldYards"), ::OpenAPI::toJsonValue(m_open_field_yards));
    }
    if (m_open_field_yards_average_isSet) {
        obj.insert(QString("openFieldYardsAverage"), ::OpenAPI::toJsonValue(m_open_field_yards_average));
    }
    if (m_power_success_isSet) {
        obj.insert(QString("powerSuccess"), ::OpenAPI::toJsonValue(m_power_success));
    }
    if (m_second_level_yards_isSet) {
        obj.insert(QString("secondLevelYards"), ::OpenAPI::toJsonValue(m_second_level_yards));
    }
    if (m_second_level_yards_average_isSet) {
        obj.insert(QString("secondLevelYardsAverage"), ::OpenAPI::toJsonValue(m_second_level_yards_average));
    }
    if (m_stuff_rate_isSet) {
        obj.insert(QString("stuffRate"), ::OpenAPI::toJsonValue(m_stuff_rate));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    return obj;
}

double OAIBoxScore_teams_rushing_inner::getLineYards() const {
    return m_line_yards;
}
void OAIBoxScore_teams_rushing_inner::setLineYards(const double &line_yards) {
    m_line_yards = line_yards;
    m_line_yards_isSet = true;
}

bool OAIBoxScore_teams_rushing_inner::is_line_yards_Set() const{
    return m_line_yards_isSet;
}

bool OAIBoxScore_teams_rushing_inner::is_line_yards_Valid() const{
    return m_line_yards_isValid;
}

double OAIBoxScore_teams_rushing_inner::getLineYardsAverage() const {
    return m_line_yards_average;
}
void OAIBoxScore_teams_rushing_inner::setLineYardsAverage(const double &line_yards_average) {
    m_line_yards_average = line_yards_average;
    m_line_yards_average_isSet = true;
}

bool OAIBoxScore_teams_rushing_inner::is_line_yards_average_Set() const{
    return m_line_yards_average_isSet;
}

bool OAIBoxScore_teams_rushing_inner::is_line_yards_average_Valid() const{
    return m_line_yards_average_isValid;
}

qint32 OAIBoxScore_teams_rushing_inner::getOpenFieldYards() const {
    return m_open_field_yards;
}
void OAIBoxScore_teams_rushing_inner::setOpenFieldYards(const qint32 &open_field_yards) {
    m_open_field_yards = open_field_yards;
    m_open_field_yards_isSet = true;
}

bool OAIBoxScore_teams_rushing_inner::is_open_field_yards_Set() const{
    return m_open_field_yards_isSet;
}

bool OAIBoxScore_teams_rushing_inner::is_open_field_yards_Valid() const{
    return m_open_field_yards_isValid;
}

double OAIBoxScore_teams_rushing_inner::getOpenFieldYardsAverage() const {
    return m_open_field_yards_average;
}
void OAIBoxScore_teams_rushing_inner::setOpenFieldYardsAverage(const double &open_field_yards_average) {
    m_open_field_yards_average = open_field_yards_average;
    m_open_field_yards_average_isSet = true;
}

bool OAIBoxScore_teams_rushing_inner::is_open_field_yards_average_Set() const{
    return m_open_field_yards_average_isSet;
}

bool OAIBoxScore_teams_rushing_inner::is_open_field_yards_average_Valid() const{
    return m_open_field_yards_average_isValid;
}

double OAIBoxScore_teams_rushing_inner::getPowerSuccess() const {
    return m_power_success;
}
void OAIBoxScore_teams_rushing_inner::setPowerSuccess(const double &power_success) {
    m_power_success = power_success;
    m_power_success_isSet = true;
}

bool OAIBoxScore_teams_rushing_inner::is_power_success_Set() const{
    return m_power_success_isSet;
}

bool OAIBoxScore_teams_rushing_inner::is_power_success_Valid() const{
    return m_power_success_isValid;
}

qint32 OAIBoxScore_teams_rushing_inner::getSecondLevelYards() const {
    return m_second_level_yards;
}
void OAIBoxScore_teams_rushing_inner::setSecondLevelYards(const qint32 &second_level_yards) {
    m_second_level_yards = second_level_yards;
    m_second_level_yards_isSet = true;
}

bool OAIBoxScore_teams_rushing_inner::is_second_level_yards_Set() const{
    return m_second_level_yards_isSet;
}

bool OAIBoxScore_teams_rushing_inner::is_second_level_yards_Valid() const{
    return m_second_level_yards_isValid;
}

double OAIBoxScore_teams_rushing_inner::getSecondLevelYardsAverage() const {
    return m_second_level_yards_average;
}
void OAIBoxScore_teams_rushing_inner::setSecondLevelYardsAverage(const double &second_level_yards_average) {
    m_second_level_yards_average = second_level_yards_average;
    m_second_level_yards_average_isSet = true;
}

bool OAIBoxScore_teams_rushing_inner::is_second_level_yards_average_Set() const{
    return m_second_level_yards_average_isSet;
}

bool OAIBoxScore_teams_rushing_inner::is_second_level_yards_average_Valid() const{
    return m_second_level_yards_average_isValid;
}

double OAIBoxScore_teams_rushing_inner::getStuffRate() const {
    return m_stuff_rate;
}
void OAIBoxScore_teams_rushing_inner::setStuffRate(const double &stuff_rate) {
    m_stuff_rate = stuff_rate;
    m_stuff_rate_isSet = true;
}

bool OAIBoxScore_teams_rushing_inner::is_stuff_rate_Set() const{
    return m_stuff_rate_isSet;
}

bool OAIBoxScore_teams_rushing_inner::is_stuff_rate_Valid() const{
    return m_stuff_rate_isValid;
}

QString OAIBoxScore_teams_rushing_inner::getTeam() const {
    return m_team;
}
void OAIBoxScore_teams_rushing_inner::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIBoxScore_teams_rushing_inner::is_team_Set() const{
    return m_team_isSet;
}

bool OAIBoxScore_teams_rushing_inner::is_team_Valid() const{
    return m_team_isValid;
}

bool OAIBoxScore_teams_rushing_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_line_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_yards_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_field_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_field_yards_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_success_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_second_level_yards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_second_level_yards_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stuff_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBoxScore_teams_rushing_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
