/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBoxScore_teams_successRates_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBoxScore_teams_successRates_inner::OAIBoxScore_teams_successRates_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBoxScore_teams_successRates_inner::OAIBoxScore_teams_successRates_inner() {
    this->initializeModel();
}

OAIBoxScore_teams_successRates_inner::~OAIBoxScore_teams_successRates_inner() {}

void OAIBoxScore_teams_successRates_inner::initializeModel() {

    m_overall_isSet = false;
    m_overall_isValid = false;

    m_passing_downs_isSet = false;
    m_passing_downs_isValid = false;

    m_standard_downs_isSet = false;
    m_standard_downs_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;
}

void OAIBoxScore_teams_successRates_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBoxScore_teams_successRates_inner::fromJsonObject(QJsonObject json) {

    m_overall_isValid = ::OpenAPI::fromJsonValue(m_overall, json[QString("overall")]);
    m_overall_isSet = !json[QString("overall")].isNull() && m_overall_isValid;

    m_passing_downs_isValid = ::OpenAPI::fromJsonValue(m_passing_downs, json[QString("passingDowns")]);
    m_passing_downs_isSet = !json[QString("passingDowns")].isNull() && m_passing_downs_isValid;

    m_standard_downs_isValid = ::OpenAPI::fromJsonValue(m_standard_downs, json[QString("standardDowns")]);
    m_standard_downs_isSet = !json[QString("standardDowns")].isNull() && m_standard_downs_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;
}

QString OAIBoxScore_teams_successRates_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBoxScore_teams_successRates_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_overall.isSet()) {
        obj.insert(QString("overall"), ::OpenAPI::toJsonValue(m_overall));
    }
    if (m_passing_downs.isSet()) {
        obj.insert(QString("passingDowns"), ::OpenAPI::toJsonValue(m_passing_downs));
    }
    if (m_standard_downs.isSet()) {
        obj.insert(QString("standardDowns"), ::OpenAPI::toJsonValue(m_standard_downs));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    return obj;
}

OAIBoxScore_teams_cumulativePpa_inner_overall OAIBoxScore_teams_successRates_inner::getOverall() const {
    return m_overall;
}
void OAIBoxScore_teams_successRates_inner::setOverall(const OAIBoxScore_teams_cumulativePpa_inner_overall &overall) {
    m_overall = overall;
    m_overall_isSet = true;
}

bool OAIBoxScore_teams_successRates_inner::is_overall_Set() const{
    return m_overall_isSet;
}

bool OAIBoxScore_teams_successRates_inner::is_overall_Valid() const{
    return m_overall_isValid;
}

OAIBoxScore_teams_cumulativePpa_inner_overall OAIBoxScore_teams_successRates_inner::getPassingDowns() const {
    return m_passing_downs;
}
void OAIBoxScore_teams_successRates_inner::setPassingDowns(const OAIBoxScore_teams_cumulativePpa_inner_overall &passing_downs) {
    m_passing_downs = passing_downs;
    m_passing_downs_isSet = true;
}

bool OAIBoxScore_teams_successRates_inner::is_passing_downs_Set() const{
    return m_passing_downs_isSet;
}

bool OAIBoxScore_teams_successRates_inner::is_passing_downs_Valid() const{
    return m_passing_downs_isValid;
}

OAIBoxScore_teams_cumulativePpa_inner_overall OAIBoxScore_teams_successRates_inner::getStandardDowns() const {
    return m_standard_downs;
}
void OAIBoxScore_teams_successRates_inner::setStandardDowns(const OAIBoxScore_teams_cumulativePpa_inner_overall &standard_downs) {
    m_standard_downs = standard_downs;
    m_standard_downs_isSet = true;
}

bool OAIBoxScore_teams_successRates_inner::is_standard_downs_Set() const{
    return m_standard_downs_isSet;
}

bool OAIBoxScore_teams_successRates_inner::is_standard_downs_Valid() const{
    return m_standard_downs_isValid;
}

QString OAIBoxScore_teams_successRates_inner::getTeam() const {
    return m_team;
}
void OAIBoxScore_teams_successRates_inner::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIBoxScore_teams_successRates_inner::is_team_Set() const{
    return m_team_isSet;
}

bool OAIBoxScore_teams_successRates_inner::is_team_Valid() const{
    return m_team_isValid;
}

bool OAIBoxScore_teams_successRates_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_overall.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_downs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_downs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBoxScore_teams_successRates_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
