/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScoreboardGame.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScoreboardGame::OAIScoreboardGame(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScoreboardGame::OAIScoreboardGame() {
    this->initializeModel();
}

OAIScoreboardGame::~OAIScoreboardGame() {}

void OAIScoreboardGame::initializeModel() {

    m_away_team_isSet = false;
    m_away_team_isValid = false;

    m_betting_isSet = false;
    m_betting_isValid = false;

    m_clock_isSet = false;
    m_clock_isValid = false;

    m_conference_game_isSet = false;
    m_conference_game_isValid = false;

    m_home_team_isSet = false;
    m_home_team_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_neutral_site_isSet = false;
    m_neutral_site_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_possession_isSet = false;
    m_possession_isValid = false;

    m_situation_isSet = false;
    m_situation_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_start_time_tbd_isSet = false;
    m_start_time_tbd_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tv_isSet = false;
    m_tv_isValid = false;

    m_venue_isSet = false;
    m_venue_isValid = false;

    m_weather_isSet = false;
    m_weather_isValid = false;
}

void OAIScoreboardGame::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScoreboardGame::fromJsonObject(QJsonObject json) {

    m_away_team_isValid = ::OpenAPI::fromJsonValue(m_away_team, json[QString("awayTeam")]);
    m_away_team_isSet = !json[QString("awayTeam")].isNull() && m_away_team_isValid;

    m_betting_isValid = ::OpenAPI::fromJsonValue(m_betting, json[QString("betting")]);
    m_betting_isSet = !json[QString("betting")].isNull() && m_betting_isValid;

    m_clock_isValid = ::OpenAPI::fromJsonValue(m_clock, json[QString("clock")]);
    m_clock_isSet = !json[QString("clock")].isNull() && m_clock_isValid;

    m_conference_game_isValid = ::OpenAPI::fromJsonValue(m_conference_game, json[QString("conferenceGame")]);
    m_conference_game_isSet = !json[QString("conferenceGame")].isNull() && m_conference_game_isValid;

    m_home_team_isValid = ::OpenAPI::fromJsonValue(m_home_team, json[QString("homeTeam")]);
    m_home_team_isSet = !json[QString("homeTeam")].isNull() && m_home_team_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_neutral_site_isValid = ::OpenAPI::fromJsonValue(m_neutral_site, json[QString("neutralSite")]);
    m_neutral_site_isSet = !json[QString("neutralSite")].isNull() && m_neutral_site_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;

    m_possession_isValid = ::OpenAPI::fromJsonValue(m_possession, json[QString("possession")]);
    m_possession_isSet = !json[QString("possession")].isNull() && m_possession_isValid;

    m_situation_isValid = ::OpenAPI::fromJsonValue(m_situation, json[QString("situation")]);
    m_situation_isSet = !json[QString("situation")].isNull() && m_situation_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_start_time_tbd_isValid = ::OpenAPI::fromJsonValue(m_start_time_tbd, json[QString("startTimeTBD")]);
    m_start_time_tbd_isSet = !json[QString("startTimeTBD")].isNull() && m_start_time_tbd_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tv_isValid = ::OpenAPI::fromJsonValue(m_tv, json[QString("tv")]);
    m_tv_isSet = !json[QString("tv")].isNull() && m_tv_isValid;

    m_venue_isValid = ::OpenAPI::fromJsonValue(m_venue, json[QString("venue")]);
    m_venue_isSet = !json[QString("venue")].isNull() && m_venue_isValid;

    m_weather_isValid = ::OpenAPI::fromJsonValue(m_weather, json[QString("weather")]);
    m_weather_isSet = !json[QString("weather")].isNull() && m_weather_isValid;
}

QString OAIScoreboardGame::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScoreboardGame::asJsonObject() const {
    QJsonObject obj;
    if (m_away_team.isSet()) {
        obj.insert(QString("awayTeam"), ::OpenAPI::toJsonValue(m_away_team));
    }
    if (m_betting.isSet()) {
        obj.insert(QString("betting"), ::OpenAPI::toJsonValue(m_betting));
    }
    if (m_clock_isSet) {
        obj.insert(QString("clock"), ::OpenAPI::toJsonValue(m_clock));
    }
    if (m_conference_game_isSet) {
        obj.insert(QString("conferenceGame"), ::OpenAPI::toJsonValue(m_conference_game));
    }
    if (m_home_team.isSet()) {
        obj.insert(QString("homeTeam"), ::OpenAPI::toJsonValue(m_home_team));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_neutral_site_isSet) {
        obj.insert(QString("neutralSite"), ::OpenAPI::toJsonValue(m_neutral_site));
    }
    if (m_period_isSet) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_possession_isSet) {
        obj.insert(QString("possession"), ::OpenAPI::toJsonValue(m_possession));
    }
    if (m_situation_isSet) {
        obj.insert(QString("situation"), ::OpenAPI::toJsonValue(m_situation));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_start_time_tbd_isSet) {
        obj.insert(QString("startTimeTBD"), ::OpenAPI::toJsonValue(m_start_time_tbd));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tv_isSet) {
        obj.insert(QString("tv"), ::OpenAPI::toJsonValue(m_tv));
    }
    if (m_venue.isSet()) {
        obj.insert(QString("venue"), ::OpenAPI::toJsonValue(m_venue));
    }
    if (m_weather.isSet()) {
        obj.insert(QString("weather"), ::OpenAPI::toJsonValue(m_weather));
    }
    return obj;
}

OAIScoreboardGame_awayTeam OAIScoreboardGame::getAwayTeam() const {
    return m_away_team;
}
void OAIScoreboardGame::setAwayTeam(const OAIScoreboardGame_awayTeam &away_team) {
    m_away_team = away_team;
    m_away_team_isSet = true;
}

bool OAIScoreboardGame::is_away_team_Set() const{
    return m_away_team_isSet;
}

bool OAIScoreboardGame::is_away_team_Valid() const{
    return m_away_team_isValid;
}

OAIScoreboardGame_betting OAIScoreboardGame::getBetting() const {
    return m_betting;
}
void OAIScoreboardGame::setBetting(const OAIScoreboardGame_betting &betting) {
    m_betting = betting;
    m_betting_isSet = true;
}

bool OAIScoreboardGame::is_betting_Set() const{
    return m_betting_isSet;
}

bool OAIScoreboardGame::is_betting_Valid() const{
    return m_betting_isValid;
}

QString OAIScoreboardGame::getClock() const {
    return m_clock;
}
void OAIScoreboardGame::setClock(const QString &clock) {
    m_clock = clock;
    m_clock_isSet = true;
}

bool OAIScoreboardGame::is_clock_Set() const{
    return m_clock_isSet;
}

bool OAIScoreboardGame::is_clock_Valid() const{
    return m_clock_isValid;
}

bool OAIScoreboardGame::isConferenceGame() const {
    return m_conference_game;
}
void OAIScoreboardGame::setConferenceGame(const bool &conference_game) {
    m_conference_game = conference_game;
    m_conference_game_isSet = true;
}

bool OAIScoreboardGame::is_conference_game_Set() const{
    return m_conference_game_isSet;
}

bool OAIScoreboardGame::is_conference_game_Valid() const{
    return m_conference_game_isValid;
}

OAIScoreboardGame_awayTeam OAIScoreboardGame::getHomeTeam() const {
    return m_home_team;
}
void OAIScoreboardGame::setHomeTeam(const OAIScoreboardGame_awayTeam &home_team) {
    m_home_team = home_team;
    m_home_team_isSet = true;
}

bool OAIScoreboardGame::is_home_team_Set() const{
    return m_home_team_isSet;
}

bool OAIScoreboardGame::is_home_team_Valid() const{
    return m_home_team_isValid;
}

qint32 OAIScoreboardGame::getId() const {
    return m_id;
}
void OAIScoreboardGame::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIScoreboardGame::is_id_Set() const{
    return m_id_isSet;
}

bool OAIScoreboardGame::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIScoreboardGame::isNeutralSite() const {
    return m_neutral_site;
}
void OAIScoreboardGame::setNeutralSite(const bool &neutral_site) {
    m_neutral_site = neutral_site;
    m_neutral_site_isSet = true;
}

bool OAIScoreboardGame::is_neutral_site_Set() const{
    return m_neutral_site_isSet;
}

bool OAIScoreboardGame::is_neutral_site_Valid() const{
    return m_neutral_site_isValid;
}

qint32 OAIScoreboardGame::getPeriod() const {
    return m_period;
}
void OAIScoreboardGame::setPeriod(const qint32 &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIScoreboardGame::is_period_Set() const{
    return m_period_isSet;
}

bool OAIScoreboardGame::is_period_Valid() const{
    return m_period_isValid;
}

QString OAIScoreboardGame::getPossession() const {
    return m_possession;
}
void OAIScoreboardGame::setPossession(const QString &possession) {
    m_possession = possession;
    m_possession_isSet = true;
}

bool OAIScoreboardGame::is_possession_Set() const{
    return m_possession_isSet;
}

bool OAIScoreboardGame::is_possession_Valid() const{
    return m_possession_isValid;
}

QString OAIScoreboardGame::getSituation() const {
    return m_situation;
}
void OAIScoreboardGame::setSituation(const QString &situation) {
    m_situation = situation;
    m_situation_isSet = true;
}

bool OAIScoreboardGame::is_situation_Set() const{
    return m_situation_isSet;
}

bool OAIScoreboardGame::is_situation_Valid() const{
    return m_situation_isValid;
}

QString OAIScoreboardGame::getStartDate() const {
    return m_start_date;
}
void OAIScoreboardGame::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIScoreboardGame::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIScoreboardGame::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIScoreboardGame::isStartTimeTbd() const {
    return m_start_time_tbd;
}
void OAIScoreboardGame::setStartTimeTbd(const bool &start_time_tbd) {
    m_start_time_tbd = start_time_tbd;
    m_start_time_tbd_isSet = true;
}

bool OAIScoreboardGame::is_start_time_tbd_Set() const{
    return m_start_time_tbd_isSet;
}

bool OAIScoreboardGame::is_start_time_tbd_Valid() const{
    return m_start_time_tbd_isValid;
}

QString OAIScoreboardGame::getStatus() const {
    return m_status;
}
void OAIScoreboardGame::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIScoreboardGame::is_status_Set() const{
    return m_status_isSet;
}

bool OAIScoreboardGame::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIScoreboardGame::getTv() const {
    return m_tv;
}
void OAIScoreboardGame::setTv(const QString &tv) {
    m_tv = tv;
    m_tv_isSet = true;
}

bool OAIScoreboardGame::is_tv_Set() const{
    return m_tv_isSet;
}

bool OAIScoreboardGame::is_tv_Valid() const{
    return m_tv_isValid;
}

OAIScoreboardGame_venue OAIScoreboardGame::getVenue() const {
    return m_venue;
}
void OAIScoreboardGame::setVenue(const OAIScoreboardGame_venue &venue) {
    m_venue = venue;
    m_venue_isSet = true;
}

bool OAIScoreboardGame::is_venue_Set() const{
    return m_venue_isSet;
}

bool OAIScoreboardGame::is_venue_Valid() const{
    return m_venue_isValid;
}

OAIScoreboardGame_weather OAIScoreboardGame::getWeather() const {
    return m_weather;
}
void OAIScoreboardGame::setWeather(const OAIScoreboardGame_weather &weather) {
    m_weather = weather;
    m_weather_isSet = true;
}

bool OAIScoreboardGame::is_weather_Set() const{
    return m_weather_isSet;
}

bool OAIScoreboardGame::is_weather_Valid() const{
    return m_weather_isValid;
}

bool OAIScoreboardGame::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_away_team.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_betting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_game_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_team.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neutral_site_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_possession_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_situation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_tbd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_venue.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_weather.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScoreboardGame::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
