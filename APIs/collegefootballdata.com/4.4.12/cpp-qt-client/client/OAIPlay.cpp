/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlay.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlay::OAIPlay(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlay::OAIPlay() {
    this->initializeModel();
}

OAIPlay::~OAIPlay() {}

void OAIPlay::initializeModel() {

    m_away_isSet = false;
    m_away_isValid = false;

    m_clock_isSet = false;
    m_clock_isValid = false;

    m_defense_isSet = false;
    m_defense_isValid = false;

    m_defense_conference_isSet = false;
    m_defense_conference_isValid = false;

    m_defense_score_isSet = false;
    m_defense_score_isValid = false;

    m_defense_timeouts_isSet = false;
    m_defense_timeouts_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_down_isSet = false;
    m_down_isValid = false;

    m_drive_id_isSet = false;
    m_drive_id_isValid = false;

    m_drive_number_isSet = false;
    m_drive_number_isValid = false;

    m_game_id_isSet = false;
    m_game_id_isValid = false;

    m_home_isSet = false;
    m_home_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_offense_isSet = false;
    m_offense_isValid = false;

    m_offense_conference_isSet = false;
    m_offense_conference_isValid = false;

    m_offense_score_isSet = false;
    m_offense_score_isValid = false;

    m_offense_timeouts_isSet = false;
    m_offense_timeouts_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_play_number_isSet = false;
    m_play_number_isValid = false;

    m_play_text_isSet = false;
    m_play_text_isValid = false;

    m_play_type_isSet = false;
    m_play_type_isValid = false;

    m_ppa_isSet = false;
    m_ppa_isValid = false;

    m_scoring_isSet = false;
    m_scoring_isValid = false;

    m_wallclock_isSet = false;
    m_wallclock_isValid = false;

    m_yard_line_isSet = false;
    m_yard_line_isValid = false;

    m_yards_gained_isSet = false;
    m_yards_gained_isValid = false;

    m_yards_to_goal_isSet = false;
    m_yards_to_goal_isValid = false;
}

void OAIPlay::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlay::fromJsonObject(QJsonObject json) {

    m_away_isValid = ::OpenAPI::fromJsonValue(m_away, json[QString("away")]);
    m_away_isSet = !json[QString("away")].isNull() && m_away_isValid;

    m_clock_isValid = ::OpenAPI::fromJsonValue(m_clock, json[QString("clock")]);
    m_clock_isSet = !json[QString("clock")].isNull() && m_clock_isValid;

    m_defense_isValid = ::OpenAPI::fromJsonValue(m_defense, json[QString("defense")]);
    m_defense_isSet = !json[QString("defense")].isNull() && m_defense_isValid;

    m_defense_conference_isValid = ::OpenAPI::fromJsonValue(m_defense_conference, json[QString("defense_conference")]);
    m_defense_conference_isSet = !json[QString("defense_conference")].isNull() && m_defense_conference_isValid;

    m_defense_score_isValid = ::OpenAPI::fromJsonValue(m_defense_score, json[QString("defense_score")]);
    m_defense_score_isSet = !json[QString("defense_score")].isNull() && m_defense_score_isValid;

    m_defense_timeouts_isValid = ::OpenAPI::fromJsonValue(m_defense_timeouts, json[QString("defense_timeouts")]);
    m_defense_timeouts_isSet = !json[QString("defense_timeouts")].isNull() && m_defense_timeouts_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_down_isValid = ::OpenAPI::fromJsonValue(m_down, json[QString("down")]);
    m_down_isSet = !json[QString("down")].isNull() && m_down_isValid;

    m_drive_id_isValid = ::OpenAPI::fromJsonValue(m_drive_id, json[QString("drive_id")]);
    m_drive_id_isSet = !json[QString("drive_id")].isNull() && m_drive_id_isValid;

    m_drive_number_isValid = ::OpenAPI::fromJsonValue(m_drive_number, json[QString("drive_number")]);
    m_drive_number_isSet = !json[QString("drive_number")].isNull() && m_drive_number_isValid;

    m_game_id_isValid = ::OpenAPI::fromJsonValue(m_game_id, json[QString("game_id")]);
    m_game_id_isSet = !json[QString("game_id")].isNull() && m_game_id_isValid;

    m_home_isValid = ::OpenAPI::fromJsonValue(m_home, json[QString("home")]);
    m_home_isSet = !json[QString("home")].isNull() && m_home_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_offense_isValid = ::OpenAPI::fromJsonValue(m_offense, json[QString("offense")]);
    m_offense_isSet = !json[QString("offense")].isNull() && m_offense_isValid;

    m_offense_conference_isValid = ::OpenAPI::fromJsonValue(m_offense_conference, json[QString("offense_conference")]);
    m_offense_conference_isSet = !json[QString("offense_conference")].isNull() && m_offense_conference_isValid;

    m_offense_score_isValid = ::OpenAPI::fromJsonValue(m_offense_score, json[QString("offense_score")]);
    m_offense_score_isSet = !json[QString("offense_score")].isNull() && m_offense_score_isValid;

    m_offense_timeouts_isValid = ::OpenAPI::fromJsonValue(m_offense_timeouts, json[QString("offense_timeouts")]);
    m_offense_timeouts_isSet = !json[QString("offense_timeouts")].isNull() && m_offense_timeouts_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;

    m_play_number_isValid = ::OpenAPI::fromJsonValue(m_play_number, json[QString("play_number")]);
    m_play_number_isSet = !json[QString("play_number")].isNull() && m_play_number_isValid;

    m_play_text_isValid = ::OpenAPI::fromJsonValue(m_play_text, json[QString("play_text")]);
    m_play_text_isSet = !json[QString("play_text")].isNull() && m_play_text_isValid;

    m_play_type_isValid = ::OpenAPI::fromJsonValue(m_play_type, json[QString("play_type")]);
    m_play_type_isSet = !json[QString("play_type")].isNull() && m_play_type_isValid;

    m_ppa_isValid = ::OpenAPI::fromJsonValue(m_ppa, json[QString("ppa")]);
    m_ppa_isSet = !json[QString("ppa")].isNull() && m_ppa_isValid;

    m_scoring_isValid = ::OpenAPI::fromJsonValue(m_scoring, json[QString("scoring")]);
    m_scoring_isSet = !json[QString("scoring")].isNull() && m_scoring_isValid;

    m_wallclock_isValid = ::OpenAPI::fromJsonValue(m_wallclock, json[QString("wallclock")]);
    m_wallclock_isSet = !json[QString("wallclock")].isNull() && m_wallclock_isValid;

    m_yard_line_isValid = ::OpenAPI::fromJsonValue(m_yard_line, json[QString("yard_line")]);
    m_yard_line_isSet = !json[QString("yard_line")].isNull() && m_yard_line_isValid;

    m_yards_gained_isValid = ::OpenAPI::fromJsonValue(m_yards_gained, json[QString("yards_gained")]);
    m_yards_gained_isSet = !json[QString("yards_gained")].isNull() && m_yards_gained_isValid;

    m_yards_to_goal_isValid = ::OpenAPI::fromJsonValue(m_yards_to_goal, json[QString("yards_to_goal")]);
    m_yards_to_goal_isSet = !json[QString("yards_to_goal")].isNull() && m_yards_to_goal_isValid;
}

QString OAIPlay::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlay::asJsonObject() const {
    QJsonObject obj;
    if (m_away_isSet) {
        obj.insert(QString("away"), ::OpenAPI::toJsonValue(m_away));
    }
    if (m_clock.isSet()) {
        obj.insert(QString("clock"), ::OpenAPI::toJsonValue(m_clock));
    }
    if (m_defense_isSet) {
        obj.insert(QString("defense"), ::OpenAPI::toJsonValue(m_defense));
    }
    if (m_defense_conference_isSet) {
        obj.insert(QString("defense_conference"), ::OpenAPI::toJsonValue(m_defense_conference));
    }
    if (m_defense_score_isSet) {
        obj.insert(QString("defense_score"), ::OpenAPI::toJsonValue(m_defense_score));
    }
    if (m_defense_timeouts_isSet) {
        obj.insert(QString("defense_timeouts"), ::OpenAPI::toJsonValue(m_defense_timeouts));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_down_isSet) {
        obj.insert(QString("down"), ::OpenAPI::toJsonValue(m_down));
    }
    if (m_drive_id_isSet) {
        obj.insert(QString("drive_id"), ::OpenAPI::toJsonValue(m_drive_id));
    }
    if (m_drive_number_isSet) {
        obj.insert(QString("drive_number"), ::OpenAPI::toJsonValue(m_drive_number));
    }
    if (m_game_id_isSet) {
        obj.insert(QString("game_id"), ::OpenAPI::toJsonValue(m_game_id));
    }
    if (m_home_isSet) {
        obj.insert(QString("home"), ::OpenAPI::toJsonValue(m_home));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_offense_isSet) {
        obj.insert(QString("offense"), ::OpenAPI::toJsonValue(m_offense));
    }
    if (m_offense_conference_isSet) {
        obj.insert(QString("offense_conference"), ::OpenAPI::toJsonValue(m_offense_conference));
    }
    if (m_offense_score_isSet) {
        obj.insert(QString("offense_score"), ::OpenAPI::toJsonValue(m_offense_score));
    }
    if (m_offense_timeouts_isSet) {
        obj.insert(QString("offense_timeouts"), ::OpenAPI::toJsonValue(m_offense_timeouts));
    }
    if (m_period_isSet) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_play_number_isSet) {
        obj.insert(QString("play_number"), ::OpenAPI::toJsonValue(m_play_number));
    }
    if (m_play_text_isSet) {
        obj.insert(QString("play_text"), ::OpenAPI::toJsonValue(m_play_text));
    }
    if (m_play_type_isSet) {
        obj.insert(QString("play_type"), ::OpenAPI::toJsonValue(m_play_type));
    }
    if (m_ppa_isSet) {
        obj.insert(QString("ppa"), ::OpenAPI::toJsonValue(m_ppa));
    }
    if (m_scoring_isSet) {
        obj.insert(QString("scoring"), ::OpenAPI::toJsonValue(m_scoring));
    }
    if (m_wallclock_isSet) {
        obj.insert(QString("wallclock"), ::OpenAPI::toJsonValue(m_wallclock));
    }
    if (m_yard_line_isSet) {
        obj.insert(QString("yard_line"), ::OpenAPI::toJsonValue(m_yard_line));
    }
    if (m_yards_gained_isSet) {
        obj.insert(QString("yards_gained"), ::OpenAPI::toJsonValue(m_yards_gained));
    }
    if (m_yards_to_goal_isSet) {
        obj.insert(QString("yards_to_goal"), ::OpenAPI::toJsonValue(m_yards_to_goal));
    }
    return obj;
}

QString OAIPlay::getAway() const {
    return m_away;
}
void OAIPlay::setAway(const QString &away) {
    m_away = away;
    m_away_isSet = true;
}

bool OAIPlay::is_away_Set() const{
    return m_away_isSet;
}

bool OAIPlay::is_away_Valid() const{
    return m_away_isValid;
}

OAIDrive_end_time OAIPlay::getClock() const {
    return m_clock;
}
void OAIPlay::setClock(const OAIDrive_end_time &clock) {
    m_clock = clock;
    m_clock_isSet = true;
}

bool OAIPlay::is_clock_Set() const{
    return m_clock_isSet;
}

bool OAIPlay::is_clock_Valid() const{
    return m_clock_isValid;
}

QString OAIPlay::getDefense() const {
    return m_defense;
}
void OAIPlay::setDefense(const QString &defense) {
    m_defense = defense;
    m_defense_isSet = true;
}

bool OAIPlay::is_defense_Set() const{
    return m_defense_isSet;
}

bool OAIPlay::is_defense_Valid() const{
    return m_defense_isValid;
}

QString OAIPlay::getDefenseConference() const {
    return m_defense_conference;
}
void OAIPlay::setDefenseConference(const QString &defense_conference) {
    m_defense_conference = defense_conference;
    m_defense_conference_isSet = true;
}

bool OAIPlay::is_defense_conference_Set() const{
    return m_defense_conference_isSet;
}

bool OAIPlay::is_defense_conference_Valid() const{
    return m_defense_conference_isValid;
}

qint32 OAIPlay::getDefenseScore() const {
    return m_defense_score;
}
void OAIPlay::setDefenseScore(const qint32 &defense_score) {
    m_defense_score = defense_score;
    m_defense_score_isSet = true;
}

bool OAIPlay::is_defense_score_Set() const{
    return m_defense_score_isSet;
}

bool OAIPlay::is_defense_score_Valid() const{
    return m_defense_score_isValid;
}

qint32 OAIPlay::getDefenseTimeouts() const {
    return m_defense_timeouts;
}
void OAIPlay::setDefenseTimeouts(const qint32 &defense_timeouts) {
    m_defense_timeouts = defense_timeouts;
    m_defense_timeouts_isSet = true;
}

bool OAIPlay::is_defense_timeouts_Set() const{
    return m_defense_timeouts_isSet;
}

bool OAIPlay::is_defense_timeouts_Valid() const{
    return m_defense_timeouts_isValid;
}

qint32 OAIPlay::getDistance() const {
    return m_distance;
}
void OAIPlay::setDistance(const qint32 &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAIPlay::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAIPlay::is_distance_Valid() const{
    return m_distance_isValid;
}

qint32 OAIPlay::getDown() const {
    return m_down;
}
void OAIPlay::setDown(const qint32 &down) {
    m_down = down;
    m_down_isSet = true;
}

bool OAIPlay::is_down_Set() const{
    return m_down_isSet;
}

bool OAIPlay::is_down_Valid() const{
    return m_down_isValid;
}

qint32 OAIPlay::getDriveId() const {
    return m_drive_id;
}
void OAIPlay::setDriveId(const qint32 &drive_id) {
    m_drive_id = drive_id;
    m_drive_id_isSet = true;
}

bool OAIPlay::is_drive_id_Set() const{
    return m_drive_id_isSet;
}

bool OAIPlay::is_drive_id_Valid() const{
    return m_drive_id_isValid;
}

qint32 OAIPlay::getDriveNumber() const {
    return m_drive_number;
}
void OAIPlay::setDriveNumber(const qint32 &drive_number) {
    m_drive_number = drive_number;
    m_drive_number_isSet = true;
}

bool OAIPlay::is_drive_number_Set() const{
    return m_drive_number_isSet;
}

bool OAIPlay::is_drive_number_Valid() const{
    return m_drive_number_isValid;
}

qint32 OAIPlay::getGameId() const {
    return m_game_id;
}
void OAIPlay::setGameId(const qint32 &game_id) {
    m_game_id = game_id;
    m_game_id_isSet = true;
}

bool OAIPlay::is_game_id_Set() const{
    return m_game_id_isSet;
}

bool OAIPlay::is_game_id_Valid() const{
    return m_game_id_isValid;
}

QString OAIPlay::getHome() const {
    return m_home;
}
void OAIPlay::setHome(const QString &home) {
    m_home = home;
    m_home_isSet = true;
}

bool OAIPlay::is_home_Set() const{
    return m_home_isSet;
}

bool OAIPlay::is_home_Valid() const{
    return m_home_isValid;
}

qint32 OAIPlay::getId() const {
    return m_id;
}
void OAIPlay::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPlay::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPlay::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPlay::getOffense() const {
    return m_offense;
}
void OAIPlay::setOffense(const QString &offense) {
    m_offense = offense;
    m_offense_isSet = true;
}

bool OAIPlay::is_offense_Set() const{
    return m_offense_isSet;
}

bool OAIPlay::is_offense_Valid() const{
    return m_offense_isValid;
}

QString OAIPlay::getOffenseConference() const {
    return m_offense_conference;
}
void OAIPlay::setOffenseConference(const QString &offense_conference) {
    m_offense_conference = offense_conference;
    m_offense_conference_isSet = true;
}

bool OAIPlay::is_offense_conference_Set() const{
    return m_offense_conference_isSet;
}

bool OAIPlay::is_offense_conference_Valid() const{
    return m_offense_conference_isValid;
}

qint32 OAIPlay::getOffenseScore() const {
    return m_offense_score;
}
void OAIPlay::setOffenseScore(const qint32 &offense_score) {
    m_offense_score = offense_score;
    m_offense_score_isSet = true;
}

bool OAIPlay::is_offense_score_Set() const{
    return m_offense_score_isSet;
}

bool OAIPlay::is_offense_score_Valid() const{
    return m_offense_score_isValid;
}

qint32 OAIPlay::getOffenseTimeouts() const {
    return m_offense_timeouts;
}
void OAIPlay::setOffenseTimeouts(const qint32 &offense_timeouts) {
    m_offense_timeouts = offense_timeouts;
    m_offense_timeouts_isSet = true;
}

bool OAIPlay::is_offense_timeouts_Set() const{
    return m_offense_timeouts_isSet;
}

bool OAIPlay::is_offense_timeouts_Valid() const{
    return m_offense_timeouts_isValid;
}

qint32 OAIPlay::getPeriod() const {
    return m_period;
}
void OAIPlay::setPeriod(const qint32 &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIPlay::is_period_Set() const{
    return m_period_isSet;
}

bool OAIPlay::is_period_Valid() const{
    return m_period_isValid;
}

qint32 OAIPlay::getPlayNumber() const {
    return m_play_number;
}
void OAIPlay::setPlayNumber(const qint32 &play_number) {
    m_play_number = play_number;
    m_play_number_isSet = true;
}

bool OAIPlay::is_play_number_Set() const{
    return m_play_number_isSet;
}

bool OAIPlay::is_play_number_Valid() const{
    return m_play_number_isValid;
}

QString OAIPlay::getPlayText() const {
    return m_play_text;
}
void OAIPlay::setPlayText(const QString &play_text) {
    m_play_text = play_text;
    m_play_text_isSet = true;
}

bool OAIPlay::is_play_text_Set() const{
    return m_play_text_isSet;
}

bool OAIPlay::is_play_text_Valid() const{
    return m_play_text_isValid;
}

QString OAIPlay::getPlayType() const {
    return m_play_type;
}
void OAIPlay::setPlayType(const QString &play_type) {
    m_play_type = play_type;
    m_play_type_isSet = true;
}

bool OAIPlay::is_play_type_Set() const{
    return m_play_type_isSet;
}

bool OAIPlay::is_play_type_Valid() const{
    return m_play_type_isValid;
}

double OAIPlay::getPpa() const {
    return m_ppa;
}
void OAIPlay::setPpa(const double &ppa) {
    m_ppa = ppa;
    m_ppa_isSet = true;
}

bool OAIPlay::is_ppa_Set() const{
    return m_ppa_isSet;
}

bool OAIPlay::is_ppa_Valid() const{
    return m_ppa_isValid;
}

bool OAIPlay::isScoring() const {
    return m_scoring;
}
void OAIPlay::setScoring(const bool &scoring) {
    m_scoring = scoring;
    m_scoring_isSet = true;
}

bool OAIPlay::is_scoring_Set() const{
    return m_scoring_isSet;
}

bool OAIPlay::is_scoring_Valid() const{
    return m_scoring_isValid;
}

QString OAIPlay::getWallclock() const {
    return m_wallclock;
}
void OAIPlay::setWallclock(const QString &wallclock) {
    m_wallclock = wallclock;
    m_wallclock_isSet = true;
}

bool OAIPlay::is_wallclock_Set() const{
    return m_wallclock_isSet;
}

bool OAIPlay::is_wallclock_Valid() const{
    return m_wallclock_isValid;
}

qint32 OAIPlay::getYardLine() const {
    return m_yard_line;
}
void OAIPlay::setYardLine(const qint32 &yard_line) {
    m_yard_line = yard_line;
    m_yard_line_isSet = true;
}

bool OAIPlay::is_yard_line_Set() const{
    return m_yard_line_isSet;
}

bool OAIPlay::is_yard_line_Valid() const{
    return m_yard_line_isValid;
}

qint32 OAIPlay::getYardsGained() const {
    return m_yards_gained;
}
void OAIPlay::setYardsGained(const qint32 &yards_gained) {
    m_yards_gained = yards_gained;
    m_yards_gained_isSet = true;
}

bool OAIPlay::is_yards_gained_Set() const{
    return m_yards_gained_isSet;
}

bool OAIPlay::is_yards_gained_Valid() const{
    return m_yards_gained_isValid;
}

qint32 OAIPlay::getYardsToGoal() const {
    return m_yards_to_goal;
}
void OAIPlay::setYardsToGoal(const qint32 &yards_to_goal) {
    m_yards_to_goal = yards_to_goal;
    m_yards_to_goal_isSet = true;
}

bool OAIPlay::is_yards_to_goal_Set() const{
    return m_yards_to_goal_isSet;
}

bool OAIPlay::is_yards_to_goal_Valid() const{
    return m_yards_to_goal_isValid;
}

bool OAIPlay::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_away_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clock.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_defense_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defense_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defense_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defense_timeouts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_down_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drive_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drive_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offense_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offense_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offense_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offense_timeouts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ppa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scoring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wallclock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yard_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yards_gained_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yards_to_goal_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlay::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
