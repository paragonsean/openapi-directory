/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRecruitingApi_H
#define OAI_OAIRecruitingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPositionGroupRecruitingRating.h"
#include "OAIRecruit.h"
#include "OAITeamRecruitingRank.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRecruitingApi : public QObject {
    Q_OBJECT

public:
    OAIRecruitingApi(const int timeOut = 0);
    ~OAIRecruitingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  start_year qint32 [optional]
    * @param[in]  end_year qint32 [optional]
    * @param[in]  team QString [optional]
    * @param[in]  conference QString [optional]
    */
    virtual void getRecruitingGroups(const ::OpenAPI::OptionalParam<qint32> &start_year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &end_year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &team = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conference = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  year qint32 [optional]
    * @param[in]  classification QString [optional]
    * @param[in]  position QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  team QString [optional]
    */
    virtual void getRecruitingPlayers(const ::OpenAPI::OptionalParam<qint32> &year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &classification = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &position = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &team = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  year qint32 [optional]
    * @param[in]  team QString [optional]
    */
    virtual void getRecruitingTeams(const ::OpenAPI::OptionalParam<qint32> &year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &team = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getRecruitingGroupsCallback(OAIHttpRequestWorker *worker);
    void getRecruitingPlayersCallback(OAIHttpRequestWorker *worker);
    void getRecruitingTeamsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getRecruitingGroupsSignal(QList<OAIPositionGroupRecruitingRating> summary);
    void getRecruitingPlayersSignal(QList<OAIRecruit> summary);
    void getRecruitingTeamsSignal(QList<OAITeamRecruitingRank> summary);


    void getRecruitingGroupsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPositionGroupRecruitingRating> summary);
    void getRecruitingPlayersSignalFull(OAIHttpRequestWorker *worker, QList<OAIRecruit> summary);
    void getRecruitingTeamsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeamRecruitingRank> summary);

    Q_DECL_DEPRECATED_X("Use getRecruitingGroupsSignalError() instead")
    void getRecruitingGroupsSignalE(QList<OAIPositionGroupRecruitingRating> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecruitingGroupsSignalError(QList<OAIPositionGroupRecruitingRating> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecruitingPlayersSignalError() instead")
    void getRecruitingPlayersSignalE(QList<OAIRecruit> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecruitingPlayersSignalError(QList<OAIRecruit> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecruitingTeamsSignalError() instead")
    void getRecruitingTeamsSignalE(QList<OAITeamRecruitingRank> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecruitingTeamsSignalError(QList<OAITeamRecruitingRank> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getRecruitingGroupsSignalErrorFull() instead")
    void getRecruitingGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecruitingGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecruitingPlayersSignalErrorFull() instead")
    void getRecruitingPlayersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecruitingPlayersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecruitingTeamsSignalErrorFull() instead")
    void getRecruitingTeamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecruitingTeamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
