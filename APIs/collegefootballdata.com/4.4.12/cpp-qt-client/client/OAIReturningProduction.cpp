/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReturningProduction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReturningProduction::OAIReturningProduction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReturningProduction::OAIReturningProduction() {
    this->initializeModel();
}

OAIReturningProduction::~OAIReturningProduction() {}

void OAIReturningProduction::initializeModel() {

    m_conference_isSet = false;
    m_conference_isValid = false;

    m_passing_usage_isSet = false;
    m_passing_usage_isValid = false;

    m_percent_ppa_isSet = false;
    m_percent_ppa_isValid = false;

    m_percent_passing_ppa_isSet = false;
    m_percent_passing_ppa_isValid = false;

    m_percent_receiving_ppa_isSet = false;
    m_percent_receiving_ppa_isValid = false;

    m_percent_rushing_ppa_isSet = false;
    m_percent_rushing_ppa_isValid = false;

    m_receiving_usage_isSet = false;
    m_receiving_usage_isValid = false;

    m_rushing_usage_isSet = false;
    m_rushing_usage_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_total_ppa_isSet = false;
    m_total_ppa_isValid = false;

    m_total_passing_ppa_isSet = false;
    m_total_passing_ppa_isValid = false;

    m_total_receiving_ppa_isSet = false;
    m_total_receiving_ppa_isValid = false;

    m_total_rushing_ppa_isSet = false;
    m_total_rushing_ppa_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;
}

void OAIReturningProduction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReturningProduction::fromJsonObject(QJsonObject json) {

    m_conference_isValid = ::OpenAPI::fromJsonValue(m_conference, json[QString("conference")]);
    m_conference_isSet = !json[QString("conference")].isNull() && m_conference_isValid;

    m_passing_usage_isValid = ::OpenAPI::fromJsonValue(m_passing_usage, json[QString("passingUsage")]);
    m_passing_usage_isSet = !json[QString("passingUsage")].isNull() && m_passing_usage_isValid;

    m_percent_ppa_isValid = ::OpenAPI::fromJsonValue(m_percent_ppa, json[QString("percentPPA")]);
    m_percent_ppa_isSet = !json[QString("percentPPA")].isNull() && m_percent_ppa_isValid;

    m_percent_passing_ppa_isValid = ::OpenAPI::fromJsonValue(m_percent_passing_ppa, json[QString("percentPassingPPA")]);
    m_percent_passing_ppa_isSet = !json[QString("percentPassingPPA")].isNull() && m_percent_passing_ppa_isValid;

    m_percent_receiving_ppa_isValid = ::OpenAPI::fromJsonValue(m_percent_receiving_ppa, json[QString("percentReceivingPPA")]);
    m_percent_receiving_ppa_isSet = !json[QString("percentReceivingPPA")].isNull() && m_percent_receiving_ppa_isValid;

    m_percent_rushing_ppa_isValid = ::OpenAPI::fromJsonValue(m_percent_rushing_ppa, json[QString("percentRushingPPA")]);
    m_percent_rushing_ppa_isSet = !json[QString("percentRushingPPA")].isNull() && m_percent_rushing_ppa_isValid;

    m_receiving_usage_isValid = ::OpenAPI::fromJsonValue(m_receiving_usage, json[QString("receivingUsage")]);
    m_receiving_usage_isSet = !json[QString("receivingUsage")].isNull() && m_receiving_usage_isValid;

    m_rushing_usage_isValid = ::OpenAPI::fromJsonValue(m_rushing_usage, json[QString("rushingUsage")]);
    m_rushing_usage_isSet = !json[QString("rushingUsage")].isNull() && m_rushing_usage_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("season")]);
    m_season_isSet = !json[QString("season")].isNull() && m_season_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_total_ppa_isValid = ::OpenAPI::fromJsonValue(m_total_ppa, json[QString("totalPPA")]);
    m_total_ppa_isSet = !json[QString("totalPPA")].isNull() && m_total_ppa_isValid;

    m_total_passing_ppa_isValid = ::OpenAPI::fromJsonValue(m_total_passing_ppa, json[QString("totalPassingPPA")]);
    m_total_passing_ppa_isSet = !json[QString("totalPassingPPA")].isNull() && m_total_passing_ppa_isValid;

    m_total_receiving_ppa_isValid = ::OpenAPI::fromJsonValue(m_total_receiving_ppa, json[QString("totalReceivingPPA")]);
    m_total_receiving_ppa_isSet = !json[QString("totalReceivingPPA")].isNull() && m_total_receiving_ppa_isValid;

    m_total_rushing_ppa_isValid = ::OpenAPI::fromJsonValue(m_total_rushing_ppa, json[QString("totalRushingPPA")]);
    m_total_rushing_ppa_isSet = !json[QString("totalRushingPPA")].isNull() && m_total_rushing_ppa_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;
}

QString OAIReturningProduction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReturningProduction::asJsonObject() const {
    QJsonObject obj;
    if (m_conference_isSet) {
        obj.insert(QString("conference"), ::OpenAPI::toJsonValue(m_conference));
    }
    if (m_passing_usage_isSet) {
        obj.insert(QString("passingUsage"), ::OpenAPI::toJsonValue(m_passing_usage));
    }
    if (m_percent_ppa_isSet) {
        obj.insert(QString("percentPPA"), ::OpenAPI::toJsonValue(m_percent_ppa));
    }
    if (m_percent_passing_ppa_isSet) {
        obj.insert(QString("percentPassingPPA"), ::OpenAPI::toJsonValue(m_percent_passing_ppa));
    }
    if (m_percent_receiving_ppa_isSet) {
        obj.insert(QString("percentReceivingPPA"), ::OpenAPI::toJsonValue(m_percent_receiving_ppa));
    }
    if (m_percent_rushing_ppa_isSet) {
        obj.insert(QString("percentRushingPPA"), ::OpenAPI::toJsonValue(m_percent_rushing_ppa));
    }
    if (m_receiving_usage_isSet) {
        obj.insert(QString("receivingUsage"), ::OpenAPI::toJsonValue(m_receiving_usage));
    }
    if (m_rushing_usage_isSet) {
        obj.insert(QString("rushingUsage"), ::OpenAPI::toJsonValue(m_rushing_usage));
    }
    if (m_season_isSet) {
        obj.insert(QString("season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_total_ppa_isSet) {
        obj.insert(QString("totalPPA"), ::OpenAPI::toJsonValue(m_total_ppa));
    }
    if (m_total_passing_ppa_isSet) {
        obj.insert(QString("totalPassingPPA"), ::OpenAPI::toJsonValue(m_total_passing_ppa));
    }
    if (m_total_receiving_ppa_isSet) {
        obj.insert(QString("totalReceivingPPA"), ::OpenAPI::toJsonValue(m_total_receiving_ppa));
    }
    if (m_total_rushing_ppa_isSet) {
        obj.insert(QString("totalRushingPPA"), ::OpenAPI::toJsonValue(m_total_rushing_ppa));
    }
    if (m_usage_isSet) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    return obj;
}

QString OAIReturningProduction::getConference() const {
    return m_conference;
}
void OAIReturningProduction::setConference(const QString &conference) {
    m_conference = conference;
    m_conference_isSet = true;
}

bool OAIReturningProduction::is_conference_Set() const{
    return m_conference_isSet;
}

bool OAIReturningProduction::is_conference_Valid() const{
    return m_conference_isValid;
}

double OAIReturningProduction::getPassingUsage() const {
    return m_passing_usage;
}
void OAIReturningProduction::setPassingUsage(const double &passing_usage) {
    m_passing_usage = passing_usage;
    m_passing_usage_isSet = true;
}

bool OAIReturningProduction::is_passing_usage_Set() const{
    return m_passing_usage_isSet;
}

bool OAIReturningProduction::is_passing_usage_Valid() const{
    return m_passing_usage_isValid;
}

double OAIReturningProduction::getPercentPpa() const {
    return m_percent_ppa;
}
void OAIReturningProduction::setPercentPpa(const double &percent_ppa) {
    m_percent_ppa = percent_ppa;
    m_percent_ppa_isSet = true;
}

bool OAIReturningProduction::is_percent_ppa_Set() const{
    return m_percent_ppa_isSet;
}

bool OAIReturningProduction::is_percent_ppa_Valid() const{
    return m_percent_ppa_isValid;
}

double OAIReturningProduction::getPercentPassingPpa() const {
    return m_percent_passing_ppa;
}
void OAIReturningProduction::setPercentPassingPpa(const double &percent_passing_ppa) {
    m_percent_passing_ppa = percent_passing_ppa;
    m_percent_passing_ppa_isSet = true;
}

bool OAIReturningProduction::is_percent_passing_ppa_Set() const{
    return m_percent_passing_ppa_isSet;
}

bool OAIReturningProduction::is_percent_passing_ppa_Valid() const{
    return m_percent_passing_ppa_isValid;
}

double OAIReturningProduction::getPercentReceivingPpa() const {
    return m_percent_receiving_ppa;
}
void OAIReturningProduction::setPercentReceivingPpa(const double &percent_receiving_ppa) {
    m_percent_receiving_ppa = percent_receiving_ppa;
    m_percent_receiving_ppa_isSet = true;
}

bool OAIReturningProduction::is_percent_receiving_ppa_Set() const{
    return m_percent_receiving_ppa_isSet;
}

bool OAIReturningProduction::is_percent_receiving_ppa_Valid() const{
    return m_percent_receiving_ppa_isValid;
}

double OAIReturningProduction::getPercentRushingPpa() const {
    return m_percent_rushing_ppa;
}
void OAIReturningProduction::setPercentRushingPpa(const double &percent_rushing_ppa) {
    m_percent_rushing_ppa = percent_rushing_ppa;
    m_percent_rushing_ppa_isSet = true;
}

bool OAIReturningProduction::is_percent_rushing_ppa_Set() const{
    return m_percent_rushing_ppa_isSet;
}

bool OAIReturningProduction::is_percent_rushing_ppa_Valid() const{
    return m_percent_rushing_ppa_isValid;
}

double OAIReturningProduction::getReceivingUsage() const {
    return m_receiving_usage;
}
void OAIReturningProduction::setReceivingUsage(const double &receiving_usage) {
    m_receiving_usage = receiving_usage;
    m_receiving_usage_isSet = true;
}

bool OAIReturningProduction::is_receiving_usage_Set() const{
    return m_receiving_usage_isSet;
}

bool OAIReturningProduction::is_receiving_usage_Valid() const{
    return m_receiving_usage_isValid;
}

double OAIReturningProduction::getRushingUsage() const {
    return m_rushing_usage;
}
void OAIReturningProduction::setRushingUsage(const double &rushing_usage) {
    m_rushing_usage = rushing_usage;
    m_rushing_usage_isSet = true;
}

bool OAIReturningProduction::is_rushing_usage_Set() const{
    return m_rushing_usage_isSet;
}

bool OAIReturningProduction::is_rushing_usage_Valid() const{
    return m_rushing_usage_isValid;
}

qint32 OAIReturningProduction::getSeason() const {
    return m_season;
}
void OAIReturningProduction::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIReturningProduction::is_season_Set() const{
    return m_season_isSet;
}

bool OAIReturningProduction::is_season_Valid() const{
    return m_season_isValid;
}

QString OAIReturningProduction::getTeam() const {
    return m_team;
}
void OAIReturningProduction::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIReturningProduction::is_team_Set() const{
    return m_team_isSet;
}

bool OAIReturningProduction::is_team_Valid() const{
    return m_team_isValid;
}

double OAIReturningProduction::getTotalPpa() const {
    return m_total_ppa;
}
void OAIReturningProduction::setTotalPpa(const double &total_ppa) {
    m_total_ppa = total_ppa;
    m_total_ppa_isSet = true;
}

bool OAIReturningProduction::is_total_ppa_Set() const{
    return m_total_ppa_isSet;
}

bool OAIReturningProduction::is_total_ppa_Valid() const{
    return m_total_ppa_isValid;
}

double OAIReturningProduction::getTotalPassingPpa() const {
    return m_total_passing_ppa;
}
void OAIReturningProduction::setTotalPassingPpa(const double &total_passing_ppa) {
    m_total_passing_ppa = total_passing_ppa;
    m_total_passing_ppa_isSet = true;
}

bool OAIReturningProduction::is_total_passing_ppa_Set() const{
    return m_total_passing_ppa_isSet;
}

bool OAIReturningProduction::is_total_passing_ppa_Valid() const{
    return m_total_passing_ppa_isValid;
}

double OAIReturningProduction::getTotalReceivingPpa() const {
    return m_total_receiving_ppa;
}
void OAIReturningProduction::setTotalReceivingPpa(const double &total_receiving_ppa) {
    m_total_receiving_ppa = total_receiving_ppa;
    m_total_receiving_ppa_isSet = true;
}

bool OAIReturningProduction::is_total_receiving_ppa_Set() const{
    return m_total_receiving_ppa_isSet;
}

bool OAIReturningProduction::is_total_receiving_ppa_Valid() const{
    return m_total_receiving_ppa_isValid;
}

double OAIReturningProduction::getTotalRushingPpa() const {
    return m_total_rushing_ppa;
}
void OAIReturningProduction::setTotalRushingPpa(const double &total_rushing_ppa) {
    m_total_rushing_ppa = total_rushing_ppa;
    m_total_rushing_ppa_isSet = true;
}

bool OAIReturningProduction::is_total_rushing_ppa_Set() const{
    return m_total_rushing_ppa_isSet;
}

bool OAIReturningProduction::is_total_rushing_ppa_Valid() const{
    return m_total_rushing_ppa_isValid;
}

double OAIReturningProduction::getUsage() const {
    return m_usage;
}
void OAIReturningProduction::setUsage(const double &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIReturningProduction::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIReturningProduction::is_usage_Valid() const{
    return m_usage_isValid;
}

bool OAIReturningProduction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passing_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_ppa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_passing_ppa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_receiving_ppa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_rushing_ppa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiving_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rushing_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_ppa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_passing_ppa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_receiving_ppa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_rushing_ppa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReturningProduction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
