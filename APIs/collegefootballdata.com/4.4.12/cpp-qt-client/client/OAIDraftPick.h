/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDraftPick.h
 *
 * 
 */

#ifndef OAIDraftPick_H
#define OAIDraftPick_H

#include <QJsonObject>

#include "OAIDraftPick_hometownInfo.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDraftPick_hometownInfo;

class OAIDraftPick : public OAIObject {
public:
    OAIDraftPick();
    OAIDraftPick(QString json);
    ~OAIDraftPick() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCollegeAthleteId() const;
    void setCollegeAthleteId(const qint32 &college_athlete_id);
    bool is_college_athlete_id_Set() const;
    bool is_college_athlete_id_Valid() const;

    QString getCollegeConference() const;
    void setCollegeConference(const QString &college_conference);
    bool is_college_conference_Set() const;
    bool is_college_conference_Valid() const;

    qint32 getCollegeId() const;
    void setCollegeId(const qint32 &college_id);
    bool is_college_id_Set() const;
    bool is_college_id_Valid() const;

    QString getCollegeTeam() const;
    void setCollegeTeam(const QString &college_team);
    bool is_college_team_Set() const;
    bool is_college_team_Valid() const;

    qint32 getHeight() const;
    void setHeight(const qint32 &height);
    bool is_height_Set() const;
    bool is_height_Valid() const;

    OAIDraftPick_hometownInfo getHometownInfo() const;
    void setHometownInfo(const OAIDraftPick_hometownInfo &hometown_info);
    bool is_hometown_info_Set() const;
    bool is_hometown_info_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getNflAthleteId() const;
    void setNflAthleteId(const qint32 &nfl_athlete_id);
    bool is_nfl_athlete_id_Set() const;
    bool is_nfl_athlete_id_Valid() const;

    QString getNflTeam() const;
    void setNflTeam(const QString &nfl_team);
    bool is_nfl_team_Set() const;
    bool is_nfl_team_Valid() const;

    qint32 getOverall() const;
    void setOverall(const qint32 &overall);
    bool is_overall_Set() const;
    bool is_overall_Valid() const;

    qint32 getPick() const;
    void setPick(const qint32 &pick);
    bool is_pick_Set() const;
    bool is_pick_Valid() const;

    QString getPosition() const;
    void setPosition(const QString &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    qint32 getPreDraftGrade() const;
    void setPreDraftGrade(const qint32 &pre_draft_grade);
    bool is_pre_draft_grade_Set() const;
    bool is_pre_draft_grade_Valid() const;

    qint32 getPreDraftPositionRanking() const;
    void setPreDraftPositionRanking(const qint32 &pre_draft_position_ranking);
    bool is_pre_draft_position_ranking_Set() const;
    bool is_pre_draft_position_ranking_Valid() const;

    qint32 getPreDraftRanking() const;
    void setPreDraftRanking(const qint32 &pre_draft_ranking);
    bool is_pre_draft_ranking_Set() const;
    bool is_pre_draft_ranking_Valid() const;

    qint32 getRound() const;
    void setRound(const qint32 &round);
    bool is_round_Set() const;
    bool is_round_Valid() const;

    qint32 getWeight() const;
    void setWeight(const qint32 &weight);
    bool is_weight_Set() const;
    bool is_weight_Valid() const;

    qint32 getYear() const;
    void setYear(const qint32 &year);
    bool is_year_Set() const;
    bool is_year_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_college_athlete_id;
    bool m_college_athlete_id_isSet;
    bool m_college_athlete_id_isValid;

    QString m_college_conference;
    bool m_college_conference_isSet;
    bool m_college_conference_isValid;

    qint32 m_college_id;
    bool m_college_id_isSet;
    bool m_college_id_isValid;

    QString m_college_team;
    bool m_college_team_isSet;
    bool m_college_team_isValid;

    qint32 m_height;
    bool m_height_isSet;
    bool m_height_isValid;

    OAIDraftPick_hometownInfo m_hometown_info;
    bool m_hometown_info_isSet;
    bool m_hometown_info_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_nfl_athlete_id;
    bool m_nfl_athlete_id_isSet;
    bool m_nfl_athlete_id_isValid;

    QString m_nfl_team;
    bool m_nfl_team_isSet;
    bool m_nfl_team_isValid;

    qint32 m_overall;
    bool m_overall_isSet;
    bool m_overall_isValid;

    qint32 m_pick;
    bool m_pick_isSet;
    bool m_pick_isValid;

    QString m_position;
    bool m_position_isSet;
    bool m_position_isValid;

    qint32 m_pre_draft_grade;
    bool m_pre_draft_grade_isSet;
    bool m_pre_draft_grade_isValid;

    qint32 m_pre_draft_position_ranking;
    bool m_pre_draft_position_ranking_isSet;
    bool m_pre_draft_position_ranking_isValid;

    qint32 m_pre_draft_ranking;
    bool m_pre_draft_ranking_isSet;
    bool m_pre_draft_ranking_isValid;

    qint32 m_round;
    bool m_round_isSet;
    bool m_round_isValid;

    qint32 m_weight;
    bool m_weight_isSet;
    bool m_weight_isValid;

    qint32 m_year;
    bool m_year_isSet;
    bool m_year_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDraftPick)

#endif // OAIDraftPick_H
