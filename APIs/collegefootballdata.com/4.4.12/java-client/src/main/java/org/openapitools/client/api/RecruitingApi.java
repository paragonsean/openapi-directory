/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PositionGroupRecruitingRating;
import org.openapitools.client.model.Recruit;
import org.openapitools.client.model.TeamRecruitingRank;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RecruitingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RecruitingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RecruitingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getRecruitingGroups
     * @param startYear Starting year (optional)
     * @param endYear Ending year (optional)
     * @param team Team filter (optional)
     * @param conference conference filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecruitingGroupsCall(Integer startYear, Integer endYear, String team, String conference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recruiting/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startYear", startYear));
        }

        if (endYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endYear", endYear));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (conference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conference", conference));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecruitingGroupsValidateBeforeCall(Integer startYear, Integer endYear, String team, String conference, final ApiCallback _callback) throws ApiException {
        return getRecruitingGroupsCall(startYear, endYear, team, conference, _callback);

    }

    /**
     * Recruit position group ratings
     * Gets a list of aggregated statistics by team and position grouping
     * @param startYear Starting year (optional)
     * @param endYear Ending year (optional)
     * @param team Team filter (optional)
     * @param conference conference filter (optional)
     * @return List&lt;PositionGroupRecruitingRating&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<PositionGroupRecruitingRating> getRecruitingGroups(Integer startYear, Integer endYear, String team, String conference) throws ApiException {
        ApiResponse<List<PositionGroupRecruitingRating>> localVarResp = getRecruitingGroupsWithHttpInfo(startYear, endYear, team, conference);
        return localVarResp.getData();
    }

    /**
     * Recruit position group ratings
     * Gets a list of aggregated statistics by team and position grouping
     * @param startYear Starting year (optional)
     * @param endYear Ending year (optional)
     * @param team Team filter (optional)
     * @param conference conference filter (optional)
     * @return ApiResponse&lt;List&lt;PositionGroupRecruitingRating&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PositionGroupRecruitingRating>> getRecruitingGroupsWithHttpInfo(Integer startYear, Integer endYear, String team, String conference) throws ApiException {
        okhttp3.Call localVarCall = getRecruitingGroupsValidateBeforeCall(startYear, endYear, team, conference, null);
        Type localVarReturnType = new TypeToken<List<PositionGroupRecruitingRating>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recruit position group ratings (asynchronously)
     * Gets a list of aggregated statistics by team and position grouping
     * @param startYear Starting year (optional)
     * @param endYear Ending year (optional)
     * @param team Team filter (optional)
     * @param conference conference filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecruitingGroupsAsync(Integer startYear, Integer endYear, String team, String conference, final ApiCallback<List<PositionGroupRecruitingRating>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecruitingGroupsValidateBeforeCall(startYear, endYear, team, conference, _callback);
        Type localVarReturnType = new TypeToken<List<PositionGroupRecruitingRating>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecruitingPlayers
     * @param year Recruiting class year (required if team no specified) (optional)
     * @param classification Type of recruit (HighSchool, JUCO, PrepSchool) (optional, default to HighSchool)
     * @param position Position abbreviation filter (optional)
     * @param state State or province abbreviation filter (optional)
     * @param team Committed team filter (required if year not specified) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecruitingPlayersCall(Integer year, String classification, String position, String state, String team, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recruiting/players";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (classification != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("classification", classification));
        }

        if (position != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position", position));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecruitingPlayersValidateBeforeCall(Integer year, String classification, String position, String state, String team, final ApiCallback _callback) throws ApiException {
        return getRecruitingPlayersCall(year, classification, position, state, team, _callback);

    }

    /**
     * Player recruiting ratings and rankings
     * Get player recruiting rankings and data. Requires either a year or team to be specified.
     * @param year Recruiting class year (required if team no specified) (optional)
     * @param classification Type of recruit (HighSchool, JUCO, PrepSchool) (optional, default to HighSchool)
     * @param position Position abbreviation filter (optional)
     * @param state State or province abbreviation filter (optional)
     * @param team Committed team filter (required if year not specified) (optional)
     * @return List&lt;Recruit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<Recruit> getRecruitingPlayers(Integer year, String classification, String position, String state, String team) throws ApiException {
        ApiResponse<List<Recruit>> localVarResp = getRecruitingPlayersWithHttpInfo(year, classification, position, state, team);
        return localVarResp.getData();
    }

    /**
     * Player recruiting ratings and rankings
     * Get player recruiting rankings and data. Requires either a year or team to be specified.
     * @param year Recruiting class year (required if team no specified) (optional)
     * @param classification Type of recruit (HighSchool, JUCO, PrepSchool) (optional, default to HighSchool)
     * @param position Position abbreviation filter (optional)
     * @param state State or province abbreviation filter (optional)
     * @param team Committed team filter (required if year not specified) (optional)
     * @return ApiResponse&lt;List&lt;Recruit&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Recruit>> getRecruitingPlayersWithHttpInfo(Integer year, String classification, String position, String state, String team) throws ApiException {
        okhttp3.Call localVarCall = getRecruitingPlayersValidateBeforeCall(year, classification, position, state, team, null);
        Type localVarReturnType = new TypeToken<List<Recruit>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Player recruiting ratings and rankings (asynchronously)
     * Get player recruiting rankings and data. Requires either a year or team to be specified.
     * @param year Recruiting class year (required if team no specified) (optional)
     * @param classification Type of recruit (HighSchool, JUCO, PrepSchool) (optional, default to HighSchool)
     * @param position Position abbreviation filter (optional)
     * @param state State or province abbreviation filter (optional)
     * @param team Committed team filter (required if year not specified) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecruitingPlayersAsync(Integer year, String classification, String position, String state, String team, final ApiCallback<List<Recruit>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecruitingPlayersValidateBeforeCall(year, classification, position, state, team, _callback);
        Type localVarReturnType = new TypeToken<List<Recruit>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecruitingTeams
     * @param year Recruiting class year (optional)
     * @param team Team filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecruitingTeamsCall(Integer year, String team, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recruiting/teams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecruitingTeamsValidateBeforeCall(Integer year, String team, final ApiCallback _callback) throws ApiException {
        return getRecruitingTeamsCall(year, team, _callback);

    }

    /**
     * Team recruiting rankings and ratings
     * Team recruiting rankings
     * @param year Recruiting class year (optional)
     * @param team Team filter (optional)
     * @return List&lt;TeamRecruitingRank&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<TeamRecruitingRank> getRecruitingTeams(Integer year, String team) throws ApiException {
        ApiResponse<List<TeamRecruitingRank>> localVarResp = getRecruitingTeamsWithHttpInfo(year, team);
        return localVarResp.getData();
    }

    /**
     * Team recruiting rankings and ratings
     * Team recruiting rankings
     * @param year Recruiting class year (optional)
     * @param team Team filter (optional)
     * @return ApiResponse&lt;List&lt;TeamRecruitingRank&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TeamRecruitingRank>> getRecruitingTeamsWithHttpInfo(Integer year, String team) throws ApiException {
        okhttp3.Call localVarCall = getRecruitingTeamsValidateBeforeCall(year, team, null);
        Type localVarReturnType = new TypeToken<List<TeamRecruitingRank>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Team recruiting rankings and ratings (asynchronously)
     * Team recruiting rankings
     * @param year Recruiting class year (optional)
     * @param team Team filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecruitingTeamsAsync(Integer year, String team, final ApiCallback<List<TeamRecruitingRank>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecruitingTeamsValidateBeforeCall(year, team, _callback);
        Type localVarReturnType = new TypeToken<List<TeamRecruitingRank>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
