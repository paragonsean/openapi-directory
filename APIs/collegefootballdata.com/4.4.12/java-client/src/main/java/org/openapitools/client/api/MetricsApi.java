/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GamePPA;
import org.openapitools.client.model.PlayWP;
import org.openapitools.client.model.PlayerGamePPA;
import org.openapitools.client.model.PlayerSeasonPPA;
import org.openapitools.client.model.PredictedPoints;
import org.openapitools.client.model.PregameWP;
import org.openapitools.client.model.TeamPPA;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MetricsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MetricsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MetricsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getGamePPA
     * @param year Year filter (required)
     * @param week Week filter (optional)
     * @param team Team filter (optional)
     * @param conference Conference filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @param seasonType Season type filter (regular or postseason) (optional, default to regular)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGamePPACall(Integer year, Integer week, String team, String conference, Boolean excludeGarbageTime, String seasonType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ppa/games";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (week != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("week", week));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (conference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conference", conference));
        }

        if (excludeGarbageTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeGarbageTime", excludeGarbageTime));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seasonType", seasonType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGamePPAValidateBeforeCall(Integer year, Integer week, String team, String conference, Boolean excludeGarbageTime, String seasonType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getGamePPA(Async)");
        }

        return getGamePPACall(year, week, team, conference, excludeGarbageTime, seasonType, _callback);

    }

    /**
     * Team Predicated Points Added (PPA/EPA) by game
     * Predicted Points Added (PPA) by game
     * @param year Year filter (required)
     * @param week Week filter (optional)
     * @param team Team filter (optional)
     * @param conference Conference filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @param seasonType Season type filter (regular or postseason) (optional, default to regular)
     * @return List&lt;GamePPA&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<GamePPA> getGamePPA(Integer year, Integer week, String team, String conference, Boolean excludeGarbageTime, String seasonType) throws ApiException {
        ApiResponse<List<GamePPA>> localVarResp = getGamePPAWithHttpInfo(year, week, team, conference, excludeGarbageTime, seasonType);
        return localVarResp.getData();
    }

    /**
     * Team Predicated Points Added (PPA/EPA) by game
     * Predicted Points Added (PPA) by game
     * @param year Year filter (required)
     * @param week Week filter (optional)
     * @param team Team filter (optional)
     * @param conference Conference filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @param seasonType Season type filter (regular or postseason) (optional, default to regular)
     * @return ApiResponse&lt;List&lt;GamePPA&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GamePPA>> getGamePPAWithHttpInfo(Integer year, Integer week, String team, String conference, Boolean excludeGarbageTime, String seasonType) throws ApiException {
        okhttp3.Call localVarCall = getGamePPAValidateBeforeCall(year, week, team, conference, excludeGarbageTime, seasonType, null);
        Type localVarReturnType = new TypeToken<List<GamePPA>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Team Predicated Points Added (PPA/EPA) by game (asynchronously)
     * Predicted Points Added (PPA) by game
     * @param year Year filter (required)
     * @param week Week filter (optional)
     * @param team Team filter (optional)
     * @param conference Conference filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @param seasonType Season type filter (regular or postseason) (optional, default to regular)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGamePPAAsync(Integer year, Integer week, String team, String conference, Boolean excludeGarbageTime, String seasonType, final ApiCallback<List<GamePPA>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGamePPAValidateBeforeCall(year, week, team, conference, excludeGarbageTime, seasonType, _callback);
        Type localVarReturnType = new TypeToken<List<GamePPA>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPlayerGamePPA
     * @param year Year filter (optional)
     * @param week Week filter (optional)
     * @param team Team filter (optional)
     * @param position Position abbreviation filter (optional)
     * @param playerId Player id filter (optional)
     * @param threshold Minimum play threshold filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @param seasonType Season type filter (regular or postseason) (optional, default to regular)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlayerGamePPACall(Integer year, Integer week, String team, String position, Integer playerId, String threshold, Boolean excludeGarbageTime, String seasonType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ppa/players/games";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (week != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("week", week));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (position != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position", position));
        }

        if (playerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("playerId", playerId));
        }

        if (threshold != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("threshold", threshold));
        }

        if (excludeGarbageTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeGarbageTime", excludeGarbageTime));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seasonType", seasonType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlayerGamePPAValidateBeforeCall(Integer year, Integer week, String team, String position, Integer playerId, String threshold, Boolean excludeGarbageTime, String seasonType, final ApiCallback _callback) throws ApiException {
        return getPlayerGamePPACall(year, week, team, position, playerId, threshold, excludeGarbageTime, seasonType, _callback);

    }

    /**
     * Player Predicated Points Added (PPA/EPA) broken down by game
     * Predicted Points Added (PPA) by player game
     * @param year Year filter (optional)
     * @param week Week filter (optional)
     * @param team Team filter (optional)
     * @param position Position abbreviation filter (optional)
     * @param playerId Player id filter (optional)
     * @param threshold Minimum play threshold filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @param seasonType Season type filter (regular or postseason) (optional, default to regular)
     * @return List&lt;PlayerGamePPA&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<PlayerGamePPA> getPlayerGamePPA(Integer year, Integer week, String team, String position, Integer playerId, String threshold, Boolean excludeGarbageTime, String seasonType) throws ApiException {
        ApiResponse<List<PlayerGamePPA>> localVarResp = getPlayerGamePPAWithHttpInfo(year, week, team, position, playerId, threshold, excludeGarbageTime, seasonType);
        return localVarResp.getData();
    }

    /**
     * Player Predicated Points Added (PPA/EPA) broken down by game
     * Predicted Points Added (PPA) by player game
     * @param year Year filter (optional)
     * @param week Week filter (optional)
     * @param team Team filter (optional)
     * @param position Position abbreviation filter (optional)
     * @param playerId Player id filter (optional)
     * @param threshold Minimum play threshold filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @param seasonType Season type filter (regular or postseason) (optional, default to regular)
     * @return ApiResponse&lt;List&lt;PlayerGamePPA&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PlayerGamePPA>> getPlayerGamePPAWithHttpInfo(Integer year, Integer week, String team, String position, Integer playerId, String threshold, Boolean excludeGarbageTime, String seasonType) throws ApiException {
        okhttp3.Call localVarCall = getPlayerGamePPAValidateBeforeCall(year, week, team, position, playerId, threshold, excludeGarbageTime, seasonType, null);
        Type localVarReturnType = new TypeToken<List<PlayerGamePPA>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Player Predicated Points Added (PPA/EPA) broken down by game (asynchronously)
     * Predicted Points Added (PPA) by player game
     * @param year Year filter (optional)
     * @param week Week filter (optional)
     * @param team Team filter (optional)
     * @param position Position abbreviation filter (optional)
     * @param playerId Player id filter (optional)
     * @param threshold Minimum play threshold filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @param seasonType Season type filter (regular or postseason) (optional, default to regular)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlayerGamePPAAsync(Integer year, Integer week, String team, String position, Integer playerId, String threshold, Boolean excludeGarbageTime, String seasonType, final ApiCallback<List<PlayerGamePPA>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlayerGamePPAValidateBeforeCall(year, week, team, position, playerId, threshold, excludeGarbageTime, seasonType, _callback);
        Type localVarReturnType = new TypeToken<List<PlayerGamePPA>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPlayerSeasonPPA
     * @param year Year filter (optional)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param position Position abbreviation filter (optional)
     * @param playerId Player id filter (optional)
     * @param threshold Minimum play threshold filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlayerSeasonPPACall(Integer year, String team, String conference, String position, Integer playerId, String threshold, Boolean excludeGarbageTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ppa/players/season";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (conference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conference", conference));
        }

        if (position != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position", position));
        }

        if (playerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("playerId", playerId));
        }

        if (threshold != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("threshold", threshold));
        }

        if (excludeGarbageTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeGarbageTime", excludeGarbageTime));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlayerSeasonPPAValidateBeforeCall(Integer year, String team, String conference, String position, Integer playerId, String threshold, Boolean excludeGarbageTime, final ApiCallback _callback) throws ApiException {
        return getPlayerSeasonPPACall(year, team, conference, position, playerId, threshold, excludeGarbageTime, _callback);

    }

    /**
     * Player Predicated Points Added (PPA/EPA) broken down by season
     * Predicted Points Added (PPA) by player season
     * @param year Year filter (optional)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param position Position abbreviation filter (optional)
     * @param playerId Player id filter (optional)
     * @param threshold Minimum play threshold filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @return List&lt;PlayerSeasonPPA&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<PlayerSeasonPPA> getPlayerSeasonPPA(Integer year, String team, String conference, String position, Integer playerId, String threshold, Boolean excludeGarbageTime) throws ApiException {
        ApiResponse<List<PlayerSeasonPPA>> localVarResp = getPlayerSeasonPPAWithHttpInfo(year, team, conference, position, playerId, threshold, excludeGarbageTime);
        return localVarResp.getData();
    }

    /**
     * Player Predicated Points Added (PPA/EPA) broken down by season
     * Predicted Points Added (PPA) by player season
     * @param year Year filter (optional)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param position Position abbreviation filter (optional)
     * @param playerId Player id filter (optional)
     * @param threshold Minimum play threshold filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @return ApiResponse&lt;List&lt;PlayerSeasonPPA&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PlayerSeasonPPA>> getPlayerSeasonPPAWithHttpInfo(Integer year, String team, String conference, String position, Integer playerId, String threshold, Boolean excludeGarbageTime) throws ApiException {
        okhttp3.Call localVarCall = getPlayerSeasonPPAValidateBeforeCall(year, team, conference, position, playerId, threshold, excludeGarbageTime, null);
        Type localVarReturnType = new TypeToken<List<PlayerSeasonPPA>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Player Predicated Points Added (PPA/EPA) broken down by season (asynchronously)
     * Predicted Points Added (PPA) by player season
     * @param year Year filter (optional)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param position Position abbreviation filter (optional)
     * @param playerId Player id filter (optional)
     * @param threshold Minimum play threshold filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlayerSeasonPPAAsync(Integer year, String team, String conference, String position, Integer playerId, String threshold, Boolean excludeGarbageTime, final ApiCallback<List<PlayerSeasonPPA>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlayerSeasonPPAValidateBeforeCall(year, team, conference, position, playerId, threshold, excludeGarbageTime, _callback);
        Type localVarReturnType = new TypeToken<List<PlayerSeasonPPA>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPredictedPoints
     * @param down Down filter (required)
     * @param distance Distance filter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPredictedPointsCall(Integer down, Integer distance, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ppa/predicted";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (down != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("down", down));
        }

        if (distance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distance", distance));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPredictedPointsValidateBeforeCall(Integer down, Integer distance, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'down' is set
        if (down == null) {
            throw new ApiException("Missing the required parameter 'down' when calling getPredictedPoints(Async)");
        }

        // verify the required parameter 'distance' is set
        if (distance == null) {
            throw new ApiException("Missing the required parameter 'distance' when calling getPredictedPoints(Async)");
        }

        return getPredictedPointsCall(down, distance, _callback);

    }

    /**
     * Predicted Points (i.e. Expected Points or EP)
     * Predicted Points
     * @param down Down filter (required)
     * @param distance Distance filter (required)
     * @return List&lt;PredictedPoints&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<PredictedPoints> getPredictedPoints(Integer down, Integer distance) throws ApiException {
        ApiResponse<List<PredictedPoints>> localVarResp = getPredictedPointsWithHttpInfo(down, distance);
        return localVarResp.getData();
    }

    /**
     * Predicted Points (i.e. Expected Points or EP)
     * Predicted Points
     * @param down Down filter (required)
     * @param distance Distance filter (required)
     * @return ApiResponse&lt;List&lt;PredictedPoints&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PredictedPoints>> getPredictedPointsWithHttpInfo(Integer down, Integer distance) throws ApiException {
        okhttp3.Call localVarCall = getPredictedPointsValidateBeforeCall(down, distance, null);
        Type localVarReturnType = new TypeToken<List<PredictedPoints>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Predicted Points (i.e. Expected Points or EP) (asynchronously)
     * Predicted Points
     * @param down Down filter (required)
     * @param distance Distance filter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPredictedPointsAsync(Integer down, Integer distance, final ApiCallback<List<PredictedPoints>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPredictedPointsValidateBeforeCall(down, distance, _callback);
        Type localVarReturnType = new TypeToken<List<PredictedPoints>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPregameWinProbabilities
     * @param year Year filter (optional)
     * @param week Week filter (optional)
     * @param team Team filter (optional)
     * @param seasonType regular or postseason (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPregameWinProbabilitiesCall(Integer year, Integer week, String team, String seasonType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metrics/wp/pregame";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (week != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("week", week));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seasonType", seasonType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPregameWinProbabilitiesValidateBeforeCall(Integer year, Integer week, String team, String seasonType, final ApiCallback _callback) throws ApiException {
        return getPregameWinProbabilitiesCall(year, week, team, seasonType, _callback);

    }

    /**
     * Pregame win probability data
     * Pregame win probabilities
     * @param year Year filter (optional)
     * @param week Week filter (optional)
     * @param team Team filter (optional)
     * @param seasonType regular or postseason (optional)
     * @return List&lt;PregameWP&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<PregameWP> getPregameWinProbabilities(Integer year, Integer week, String team, String seasonType) throws ApiException {
        ApiResponse<List<PregameWP>> localVarResp = getPregameWinProbabilitiesWithHttpInfo(year, week, team, seasonType);
        return localVarResp.getData();
    }

    /**
     * Pregame win probability data
     * Pregame win probabilities
     * @param year Year filter (optional)
     * @param week Week filter (optional)
     * @param team Team filter (optional)
     * @param seasonType regular or postseason (optional)
     * @return ApiResponse&lt;List&lt;PregameWP&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PregameWP>> getPregameWinProbabilitiesWithHttpInfo(Integer year, Integer week, String team, String seasonType) throws ApiException {
        okhttp3.Call localVarCall = getPregameWinProbabilitiesValidateBeforeCall(year, week, team, seasonType, null);
        Type localVarReturnType = new TypeToken<List<PregameWP>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Pregame win probability data (asynchronously)
     * Pregame win probabilities
     * @param year Year filter (optional)
     * @param week Week filter (optional)
     * @param team Team filter (optional)
     * @param seasonType regular or postseason (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPregameWinProbabilitiesAsync(Integer year, Integer week, String team, String seasonType, final ApiCallback<List<PregameWP>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPregameWinProbabilitiesValidateBeforeCall(year, week, team, seasonType, _callback);
        Type localVarReturnType = new TypeToken<List<PregameWP>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTeamPPA
     * @param year Year filter (required if team not specified) (optional)
     * @param team Team filter (required if year not specified) (optional)
     * @param conference Conference filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamPPACall(Integer year, String team, String conference, Boolean excludeGarbageTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ppa/teams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (conference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conference", conference));
        }

        if (excludeGarbageTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeGarbageTime", excludeGarbageTime));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeamPPAValidateBeforeCall(Integer year, String team, String conference, Boolean excludeGarbageTime, final ApiCallback _callback) throws ApiException {
        return getTeamPPACall(year, team, conference, excludeGarbageTime, _callback);

    }

    /**
     * Predicted Points Added (PPA/EPA) data by team
     * Predicted Points Added (PPA)
     * @param year Year filter (required if team not specified) (optional)
     * @param team Team filter (required if year not specified) (optional)
     * @param conference Conference filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @return List&lt;TeamPPA&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<TeamPPA> getTeamPPA(Integer year, String team, String conference, Boolean excludeGarbageTime) throws ApiException {
        ApiResponse<List<TeamPPA>> localVarResp = getTeamPPAWithHttpInfo(year, team, conference, excludeGarbageTime);
        return localVarResp.getData();
    }

    /**
     * Predicted Points Added (PPA/EPA) data by team
     * Predicted Points Added (PPA)
     * @param year Year filter (required if team not specified) (optional)
     * @param team Team filter (required if year not specified) (optional)
     * @param conference Conference filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @return ApiResponse&lt;List&lt;TeamPPA&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TeamPPA>> getTeamPPAWithHttpInfo(Integer year, String team, String conference, Boolean excludeGarbageTime) throws ApiException {
        okhttp3.Call localVarCall = getTeamPPAValidateBeforeCall(year, team, conference, excludeGarbageTime, null);
        Type localVarReturnType = new TypeToken<List<TeamPPA>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Predicted Points Added (PPA/EPA) data by team (asynchronously)
     * Predicted Points Added (PPA)
     * @param year Year filter (required if team not specified) (optional)
     * @param team Team filter (required if year not specified) (optional)
     * @param conference Conference filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamPPAAsync(Integer year, String team, String conference, Boolean excludeGarbageTime, final ApiCallback<List<TeamPPA>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeamPPAValidateBeforeCall(year, team, conference, excludeGarbageTime, _callback);
        Type localVarReturnType = new TypeToken<List<TeamPPA>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWinProbabilityData
     * @param gameId Game id filter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWinProbabilityDataCall(Integer gameId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metrics/wp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gameId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gameId", gameId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWinProbabilityDataValidateBeforeCall(Integer gameId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling getWinProbabilityData(Async)");
        }

        return getWinProbabilityDataCall(gameId, _callback);

    }

    /**
     * Win probability chart data
     * Win probability data
     * @param gameId Game id filter (required)
     * @return List&lt;PlayWP&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<PlayWP> getWinProbabilityData(Integer gameId) throws ApiException {
        ApiResponse<List<PlayWP>> localVarResp = getWinProbabilityDataWithHttpInfo(gameId);
        return localVarResp.getData();
    }

    /**
     * Win probability chart data
     * Win probability data
     * @param gameId Game id filter (required)
     * @return ApiResponse&lt;List&lt;PlayWP&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PlayWP>> getWinProbabilityDataWithHttpInfo(Integer gameId) throws ApiException {
        okhttp3.Call localVarCall = getWinProbabilityDataValidateBeforeCall(gameId, null);
        Type localVarReturnType = new TypeToken<List<PlayWP>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Win probability chart data (asynchronously)
     * Win probability data
     * @param gameId Game id filter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWinProbabilityDataAsync(Integer gameId, final ApiCallback<List<PlayWP>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWinProbabilityDataValidateBeforeCall(gameId, _callback);
        Type localVarReturnType = new TypeToken<List<PlayWP>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
