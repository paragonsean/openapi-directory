/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TeamSeason
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TeamSeason {
  public static final String SERIALIZED_NAME_GAMES = "games";
  @SerializedName(SERIALIZED_NAME_GAMES)
  private Integer games;

  public static final String SERIALIZED_NAME_LOSSES = "losses";
  @SerializedName(SERIALIZED_NAME_LOSSES)
  private Integer losses;

  public static final String SERIALIZED_NAME_POSTSEASON_RANK = "postseason_rank";
  @SerializedName(SERIALIZED_NAME_POSTSEASON_RANK)
  private Integer postseasonRank;

  public static final String SERIALIZED_NAME_PRESEASON_RANK = "preseason_rank";
  @SerializedName(SERIALIZED_NAME_PRESEASON_RANK)
  private Integer preseasonRank;

  public static final String SERIALIZED_NAME_SCHOOL = "school";
  @SerializedName(SERIALIZED_NAME_SCHOOL)
  private String school;

  public static final String SERIALIZED_NAME_SP_DEFENSE = "sp_defense";
  @SerializedName(SERIALIZED_NAME_SP_DEFENSE)
  private BigDecimal spDefense;

  public static final String SERIALIZED_NAME_SP_OFFENSE = "sp_offense";
  @SerializedName(SERIALIZED_NAME_SP_OFFENSE)
  private BigDecimal spOffense;

  public static final String SERIALIZED_NAME_SP_OVERALL = "sp_overall";
  @SerializedName(SERIALIZED_NAME_SP_OVERALL)
  private BigDecimal spOverall;

  public static final String SERIALIZED_NAME_SRS = "srs";
  @SerializedName(SERIALIZED_NAME_SRS)
  private BigDecimal srs;

  public static final String SERIALIZED_NAME_TIES = "ties";
  @SerializedName(SERIALIZED_NAME_TIES)
  private Integer ties;

  public static final String SERIALIZED_NAME_WINS = "wins";
  @SerializedName(SERIALIZED_NAME_WINS)
  private Integer wins;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private String year;

  public TeamSeason() {
  }

  public TeamSeason games(Integer games) {
    this.games = games;
    return this;
  }

  /**
   * Get games
   * @return games
   */
  @javax.annotation.Nullable
  public Integer getGames() {
    return games;
  }

  public void setGames(Integer games) {
    this.games = games;
  }


  public TeamSeason losses(Integer losses) {
    this.losses = losses;
    return this;
  }

  /**
   * Get losses
   * @return losses
   */
  @javax.annotation.Nullable
  public Integer getLosses() {
    return losses;
  }

  public void setLosses(Integer losses) {
    this.losses = losses;
  }


  public TeamSeason postseasonRank(Integer postseasonRank) {
    this.postseasonRank = postseasonRank;
    return this;
  }

  /**
   * Final ranking in the AP poll
   * @return postseasonRank
   */
  @javax.annotation.Nullable
  public Integer getPostseasonRank() {
    return postseasonRank;
  }

  public void setPostseasonRank(Integer postseasonRank) {
    this.postseasonRank = postseasonRank;
  }


  public TeamSeason preseasonRank(Integer preseasonRank) {
    this.preseasonRank = preseasonRank;
    return this;
  }

  /**
   * Rank in the AP preseason poll
   * @return preseasonRank
   */
  @javax.annotation.Nullable
  public Integer getPreseasonRank() {
    return preseasonRank;
  }

  public void setPreseasonRank(Integer preseasonRank) {
    this.preseasonRank = preseasonRank;
  }


  public TeamSeason school(String school) {
    this.school = school;
    return this;
  }

  /**
   * Get school
   * @return school
   */
  @javax.annotation.Nullable
  public String getSchool() {
    return school;
  }

  public void setSchool(String school) {
    this.school = school;
  }


  public TeamSeason spDefense(BigDecimal spDefense) {
    this.spDefense = spDefense;
    return this;
  }

  /**
   * Final SP+ defensive rating
   * @return spDefense
   */
  @javax.annotation.Nullable
  public BigDecimal getSpDefense() {
    return spDefense;
  }

  public void setSpDefense(BigDecimal spDefense) {
    this.spDefense = spDefense;
  }


  public TeamSeason spOffense(BigDecimal spOffense) {
    this.spOffense = spOffense;
    return this;
  }

  /**
   * Final SP+ offensive rating
   * @return spOffense
   */
  @javax.annotation.Nullable
  public BigDecimal getSpOffense() {
    return spOffense;
  }

  public void setSpOffense(BigDecimal spOffense) {
    this.spOffense = spOffense;
  }


  public TeamSeason spOverall(BigDecimal spOverall) {
    this.spOverall = spOverall;
    return this;
  }

  /**
   * Final overall SP+ rating
   * @return spOverall
   */
  @javax.annotation.Nullable
  public BigDecimal getSpOverall() {
    return spOverall;
  }

  public void setSpOverall(BigDecimal spOverall) {
    this.spOverall = spOverall;
  }


  public TeamSeason srs(BigDecimal srs) {
    this.srs = srs;
    return this;
  }

  /**
   * Final SRS rankings
   * @return srs
   */
  @javax.annotation.Nullable
  public BigDecimal getSrs() {
    return srs;
  }

  public void setSrs(BigDecimal srs) {
    this.srs = srs;
  }


  public TeamSeason ties(Integer ties) {
    this.ties = ties;
    return this;
  }

  /**
   * Get ties
   * @return ties
   */
  @javax.annotation.Nullable
  public Integer getTies() {
    return ties;
  }

  public void setTies(Integer ties) {
    this.ties = ties;
  }


  public TeamSeason wins(Integer wins) {
    this.wins = wins;
    return this;
  }

  /**
   * Get wins
   * @return wins
   */
  @javax.annotation.Nullable
  public Integer getWins() {
    return wins;
  }

  public void setWins(Integer wins) {
    this.wins = wins;
  }


  public TeamSeason year(String year) {
    this.year = year;
    return this;
  }

  /**
   * Get year
   * @return year
   */
  @javax.annotation.Nullable
  public String getYear() {
    return year;
  }

  public void setYear(String year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamSeason teamSeason = (TeamSeason) o;
    return Objects.equals(this.games, teamSeason.games) &&
        Objects.equals(this.losses, teamSeason.losses) &&
        Objects.equals(this.postseasonRank, teamSeason.postseasonRank) &&
        Objects.equals(this.preseasonRank, teamSeason.preseasonRank) &&
        Objects.equals(this.school, teamSeason.school) &&
        Objects.equals(this.spDefense, teamSeason.spDefense) &&
        Objects.equals(this.spOffense, teamSeason.spOffense) &&
        Objects.equals(this.spOverall, teamSeason.spOverall) &&
        Objects.equals(this.srs, teamSeason.srs) &&
        Objects.equals(this.ties, teamSeason.ties) &&
        Objects.equals(this.wins, teamSeason.wins) &&
        Objects.equals(this.year, teamSeason.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(games, losses, postseasonRank, preseasonRank, school, spDefense, spOffense, spOverall, srs, ties, wins, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamSeason {\n");
    sb.append("    games: ").append(toIndentedString(games)).append("\n");
    sb.append("    losses: ").append(toIndentedString(losses)).append("\n");
    sb.append("    postseasonRank: ").append(toIndentedString(postseasonRank)).append("\n");
    sb.append("    preseasonRank: ").append(toIndentedString(preseasonRank)).append("\n");
    sb.append("    school: ").append(toIndentedString(school)).append("\n");
    sb.append("    spDefense: ").append(toIndentedString(spDefense)).append("\n");
    sb.append("    spOffense: ").append(toIndentedString(spOffense)).append("\n");
    sb.append("    spOverall: ").append(toIndentedString(spOverall)).append("\n");
    sb.append("    srs: ").append(toIndentedString(srs)).append("\n");
    sb.append("    ties: ").append(toIndentedString(ties)).append("\n");
    sb.append("    wins: ").append(toIndentedString(wins)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("games");
    openapiFields.add("losses");
    openapiFields.add("postseason_rank");
    openapiFields.add("preseason_rank");
    openapiFields.add("school");
    openapiFields.add("sp_defense");
    openapiFields.add("sp_offense");
    openapiFields.add("sp_overall");
    openapiFields.add("srs");
    openapiFields.add("ties");
    openapiFields.add("wins");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TeamSeason
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TeamSeason.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamSeason is not found in the empty JSON string", TeamSeason.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TeamSeason.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TeamSeason` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("school") != null && !jsonObj.get("school").isJsonNull()) && !jsonObj.get("school").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `school` to be a primitive type in the JSON string but got `%s`", jsonObj.get("school").toString()));
      }
      if ((jsonObj.get("year") != null && !jsonObj.get("year").isJsonNull()) && !jsonObj.get("year").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `year` to be a primitive type in the JSON string but got `%s`", jsonObj.get("year").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamSeason.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamSeason' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamSeason> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamSeason.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamSeason>() {
           @Override
           public void write(JsonWriter out, TeamSeason value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamSeason read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TeamSeason given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TeamSeason
   * @throws IOException if the JSON string is invalid with respect to TeamSeason
   */
  public static TeamSeason fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamSeason.class);
  }

  /**
   * Convert an instance of TeamSeason to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

