/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TeamMatchupGamesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TeamMatchup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TeamMatchup {
  public static final String SERIALIZED_NAME_END_YEAR = "endYear";
  @SerializedName(SERIALIZED_NAME_END_YEAR)
  private Integer endYear;

  public static final String SERIALIZED_NAME_GAMES = "games";
  @SerializedName(SERIALIZED_NAME_GAMES)
  private List<TeamMatchupGamesInner> games = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_YEAR = "startYear";
  @SerializedName(SERIALIZED_NAME_START_YEAR)
  private Integer startYear;

  public static final String SERIALIZED_NAME_TEAM1 = "team1";
  @SerializedName(SERIALIZED_NAME_TEAM1)
  private String team1;

  public static final String SERIALIZED_NAME_TEAM1_WINS = "team1Wins";
  @SerializedName(SERIALIZED_NAME_TEAM1_WINS)
  private Integer team1Wins;

  public static final String SERIALIZED_NAME_TEAM2 = "team2";
  @SerializedName(SERIALIZED_NAME_TEAM2)
  private String team2;

  public static final String SERIALIZED_NAME_TEAM2_WINS = "team2Wins";
  @SerializedName(SERIALIZED_NAME_TEAM2_WINS)
  private Integer team2Wins;

  public static final String SERIALIZED_NAME_TIES = "ties";
  @SerializedName(SERIALIZED_NAME_TIES)
  private Integer ties;

  public TeamMatchup() {
  }

  public TeamMatchup endYear(Integer endYear) {
    this.endYear = endYear;
    return this;
  }

  /**
   * Get endYear
   * @return endYear
   */
  @javax.annotation.Nullable
  public Integer getEndYear() {
    return endYear;
  }

  public void setEndYear(Integer endYear) {
    this.endYear = endYear;
  }


  public TeamMatchup games(List<TeamMatchupGamesInner> games) {
    this.games = games;
    return this;
  }

  public TeamMatchup addGamesItem(TeamMatchupGamesInner gamesItem) {
    if (this.games == null) {
      this.games = new ArrayList<>();
    }
    this.games.add(gamesItem);
    return this;
  }

  /**
   * Get games
   * @return games
   */
  @javax.annotation.Nullable
  public List<TeamMatchupGamesInner> getGames() {
    return games;
  }

  public void setGames(List<TeamMatchupGamesInner> games) {
    this.games = games;
  }


  public TeamMatchup startYear(Integer startYear) {
    this.startYear = startYear;
    return this;
  }

  /**
   * Get startYear
   * @return startYear
   */
  @javax.annotation.Nullable
  public Integer getStartYear() {
    return startYear;
  }

  public void setStartYear(Integer startYear) {
    this.startYear = startYear;
  }


  public TeamMatchup team1(String team1) {
    this.team1 = team1;
    return this;
  }

  /**
   * Get team1
   * @return team1
   */
  @javax.annotation.Nullable
  public String getTeam1() {
    return team1;
  }

  public void setTeam1(String team1) {
    this.team1 = team1;
  }


  public TeamMatchup team1Wins(Integer team1Wins) {
    this.team1Wins = team1Wins;
    return this;
  }

  /**
   * Get team1Wins
   * @return team1Wins
   */
  @javax.annotation.Nullable
  public Integer getTeam1Wins() {
    return team1Wins;
  }

  public void setTeam1Wins(Integer team1Wins) {
    this.team1Wins = team1Wins;
  }


  public TeamMatchup team2(String team2) {
    this.team2 = team2;
    return this;
  }

  /**
   * Get team2
   * @return team2
   */
  @javax.annotation.Nullable
  public String getTeam2() {
    return team2;
  }

  public void setTeam2(String team2) {
    this.team2 = team2;
  }


  public TeamMatchup team2Wins(Integer team2Wins) {
    this.team2Wins = team2Wins;
    return this;
  }

  /**
   * Get team2Wins
   * @return team2Wins
   */
  @javax.annotation.Nullable
  public Integer getTeam2Wins() {
    return team2Wins;
  }

  public void setTeam2Wins(Integer team2Wins) {
    this.team2Wins = team2Wins;
  }


  public TeamMatchup ties(Integer ties) {
    this.ties = ties;
    return this;
  }

  /**
   * Get ties
   * @return ties
   */
  @javax.annotation.Nullable
  public Integer getTies() {
    return ties;
  }

  public void setTies(Integer ties) {
    this.ties = ties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamMatchup teamMatchup = (TeamMatchup) o;
    return Objects.equals(this.endYear, teamMatchup.endYear) &&
        Objects.equals(this.games, teamMatchup.games) &&
        Objects.equals(this.startYear, teamMatchup.startYear) &&
        Objects.equals(this.team1, teamMatchup.team1) &&
        Objects.equals(this.team1Wins, teamMatchup.team1Wins) &&
        Objects.equals(this.team2, teamMatchup.team2) &&
        Objects.equals(this.team2Wins, teamMatchup.team2Wins) &&
        Objects.equals(this.ties, teamMatchup.ties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endYear, games, startYear, team1, team1Wins, team2, team2Wins, ties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamMatchup {\n");
    sb.append("    endYear: ").append(toIndentedString(endYear)).append("\n");
    sb.append("    games: ").append(toIndentedString(games)).append("\n");
    sb.append("    startYear: ").append(toIndentedString(startYear)).append("\n");
    sb.append("    team1: ").append(toIndentedString(team1)).append("\n");
    sb.append("    team1Wins: ").append(toIndentedString(team1Wins)).append("\n");
    sb.append("    team2: ").append(toIndentedString(team2)).append("\n");
    sb.append("    team2Wins: ").append(toIndentedString(team2Wins)).append("\n");
    sb.append("    ties: ").append(toIndentedString(ties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endYear");
    openapiFields.add("games");
    openapiFields.add("startYear");
    openapiFields.add("team1");
    openapiFields.add("team1Wins");
    openapiFields.add("team2");
    openapiFields.add("team2Wins");
    openapiFields.add("ties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TeamMatchup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TeamMatchup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamMatchup is not found in the empty JSON string", TeamMatchup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TeamMatchup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TeamMatchup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("games") != null && !jsonObj.get("games").isJsonNull()) {
        JsonArray jsonArraygames = jsonObj.getAsJsonArray("games");
        if (jsonArraygames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("games").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `games` to be an array in the JSON string but got `%s`", jsonObj.get("games").toString()));
          }

          // validate the optional field `games` (array)
          for (int i = 0; i < jsonArraygames.size(); i++) {
            TeamMatchupGamesInner.validateJsonElement(jsonArraygames.get(i));
          };
        }
      }
      if ((jsonObj.get("team1") != null && !jsonObj.get("team1").isJsonNull()) && !jsonObj.get("team1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team1").toString()));
      }
      if ((jsonObj.get("team2") != null && !jsonObj.get("team2").isJsonNull()) && !jsonObj.get("team2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team2").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamMatchup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamMatchup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamMatchup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamMatchup.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamMatchup>() {
           @Override
           public void write(JsonWriter out, TeamMatchup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamMatchup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TeamMatchup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TeamMatchup
   * @throws IOException if the JSON string is invalid with respect to TeamMatchup
   */
  public static TeamMatchup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamMatchup.class);
  }

  /**
   * Convert an instance of TeamMatchup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

