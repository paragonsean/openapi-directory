/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Player;
import org.openapitools.client.model.Team;
import org.openapitools.client.model.TeamMatchup;
import org.openapitools.client.model.TeamTalent;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TeamsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TeamsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TeamsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getFbsTeams
     * @param year Year filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFbsTeamsCall(Integer year, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/fbs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFbsTeamsValidateBeforeCall(Integer year, final ApiCallback _callback) throws ApiException {
        return getFbsTeamsCall(year, _callback);

    }

    /**
     * FBS team list
     * Information on major division teams
     * @param year Year filter (optional)
     * @return List&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<Team> getFbsTeams(Integer year) throws ApiException {
        ApiResponse<List<Team>> localVarResp = getFbsTeamsWithHttpInfo(year);
        return localVarResp.getData();
    }

    /**
     * FBS team list
     * Information on major division teams
     * @param year Year filter (optional)
     * @return ApiResponse&lt;List&lt;Team&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Team>> getFbsTeamsWithHttpInfo(Integer year) throws ApiException {
        okhttp3.Call localVarCall = getFbsTeamsValidateBeforeCall(year, null);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * FBS team list (asynchronously)
     * Information on major division teams
     * @param year Year filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFbsTeamsAsync(Integer year, final ApiCallback<List<Team>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFbsTeamsValidateBeforeCall(year, _callback);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRoster
     * @param team Team name (optional)
     * @param year Season year (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRosterCall(String team, Integer year, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/roster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRosterValidateBeforeCall(String team, Integer year, final ApiCallback _callback) throws ApiException {
        return getRosterCall(team, year, _callback);

    }

    /**
     * Team rosters
     * Roster data
     * @param team Team name (optional)
     * @param year Season year (optional)
     * @return List&lt;Player&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<Player> getRoster(String team, Integer year) throws ApiException {
        ApiResponse<List<Player>> localVarResp = getRosterWithHttpInfo(team, year);
        return localVarResp.getData();
    }

    /**
     * Team rosters
     * Roster data
     * @param team Team name (optional)
     * @param year Season year (optional)
     * @return ApiResponse&lt;List&lt;Player&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Player>> getRosterWithHttpInfo(String team, Integer year) throws ApiException {
        okhttp3.Call localVarCall = getRosterValidateBeforeCall(team, year, null);
        Type localVarReturnType = new TypeToken<List<Player>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Team rosters (asynchronously)
     * Roster data
     * @param team Team name (optional)
     * @param year Season year (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRosterAsync(String team, Integer year, final ApiCallback<List<Player>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRosterValidateBeforeCall(team, year, _callback);
        Type localVarReturnType = new TypeToken<List<Player>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTalent
     * @param year Year filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTalentCall(Integer year, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/talent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTalentValidateBeforeCall(Integer year, final ApiCallback _callback) throws ApiException {
        return getTalentCall(year, _callback);

    }

    /**
     * Team talent composite rankings
     * Team talent composite
     * @param year Year filter (optional)
     * @return List&lt;TeamTalent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<TeamTalent> getTalent(Integer year) throws ApiException {
        ApiResponse<List<TeamTalent>> localVarResp = getTalentWithHttpInfo(year);
        return localVarResp.getData();
    }

    /**
     * Team talent composite rankings
     * Team talent composite
     * @param year Year filter (optional)
     * @return ApiResponse&lt;List&lt;TeamTalent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TeamTalent>> getTalentWithHttpInfo(Integer year) throws ApiException {
        okhttp3.Call localVarCall = getTalentValidateBeforeCall(year, null);
        Type localVarReturnType = new TypeToken<List<TeamTalent>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Team talent composite rankings (asynchronously)
     * Team talent composite
     * @param year Year filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTalentAsync(Integer year, final ApiCallback<List<TeamTalent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTalentValidateBeforeCall(year, _callback);
        Type localVarReturnType = new TypeToken<List<TeamTalent>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTeamMatchup
     * @param team1 First team (required)
     * @param team2 Second team (required)
     * @param minYear Minimum year (optional)
     * @param maxYear Maximum year (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamMatchupCall(String team1, String team2, Integer minYear, Integer maxYear, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/matchup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (team1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team1", team1));
        }

        if (team2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team2", team2));
        }

        if (minYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minYear", minYear));
        }

        if (maxYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxYear", maxYear));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeamMatchupValidateBeforeCall(String team1, String team2, Integer minYear, Integer maxYear, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'team1' is set
        if (team1 == null) {
            throw new ApiException("Missing the required parameter 'team1' when calling getTeamMatchup(Async)");
        }

        // verify the required parameter 'team2' is set
        if (team2 == null) {
            throw new ApiException("Missing the required parameter 'team2' when calling getTeamMatchup(Async)");
        }

        return getTeamMatchupCall(team1, team2, minYear, maxYear, _callback);

    }

    /**
     * Team matchup history
     * Matchup history
     * @param team1 First team (required)
     * @param team2 Second team (required)
     * @param minYear Minimum year (optional)
     * @param maxYear Maximum year (optional)
     * @return TeamMatchup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public TeamMatchup getTeamMatchup(String team1, String team2, Integer minYear, Integer maxYear) throws ApiException {
        ApiResponse<TeamMatchup> localVarResp = getTeamMatchupWithHttpInfo(team1, team2, minYear, maxYear);
        return localVarResp.getData();
    }

    /**
     * Team matchup history
     * Matchup history
     * @param team1 First team (required)
     * @param team2 Second team (required)
     * @param minYear Minimum year (optional)
     * @param maxYear Maximum year (optional)
     * @return ApiResponse&lt;TeamMatchup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamMatchup> getTeamMatchupWithHttpInfo(String team1, String team2, Integer minYear, Integer maxYear) throws ApiException {
        okhttp3.Call localVarCall = getTeamMatchupValidateBeforeCall(team1, team2, minYear, maxYear, null);
        Type localVarReturnType = new TypeToken<TeamMatchup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Team matchup history (asynchronously)
     * Matchup history
     * @param team1 First team (required)
     * @param team2 Second team (required)
     * @param minYear Minimum year (optional)
     * @param maxYear Maximum year (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamMatchupAsync(String team1, String team2, Integer minYear, Integer maxYear, final ApiCallback<TeamMatchup> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeamMatchupValidateBeforeCall(team1, team2, minYear, maxYear, _callback);
        Type localVarReturnType = new TypeToken<TeamMatchup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTeams
     * @param conference Conference abbreviation filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamsCall(String conference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (conference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conference", conference));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeamsValidateBeforeCall(String conference, final ApiCallback _callback) throws ApiException {
        return getTeamsCall(conference, _callback);

    }

    /**
     * Team information
     * Get team information
     * @param conference Conference abbreviation filter (optional)
     * @return List&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<Team> getTeams(String conference) throws ApiException {
        ApiResponse<List<Team>> localVarResp = getTeamsWithHttpInfo(conference);
        return localVarResp.getData();
    }

    /**
     * Team information
     * Get team information
     * @param conference Conference abbreviation filter (optional)
     * @return ApiResponse&lt;List&lt;Team&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Team>> getTeamsWithHttpInfo(String conference) throws ApiException {
        okhttp3.Call localVarCall = getTeamsValidateBeforeCall(conference, null);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Team information (asynchronously)
     * Get team information
     * @param conference Conference abbreviation filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamsAsync(String conference, final ApiCallback<List<Team>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeamsValidateBeforeCall(conference, _callback);
        Type localVarReturnType = new TypeToken<List<Team>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
