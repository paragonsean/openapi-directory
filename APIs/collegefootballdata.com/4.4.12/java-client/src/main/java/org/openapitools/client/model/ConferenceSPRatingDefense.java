/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.AdvancedSeasonStatDefenseHavoc;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConferenceSPRatingDefense
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConferenceSPRatingDefense {
  public static final String SERIALIZED_NAME_EXPLOSIVENESS = "explosiveness";
  @SerializedName(SERIALIZED_NAME_EXPLOSIVENESS)
  private BigDecimal explosiveness;

  public static final String SERIALIZED_NAME_HAVOC = "havoc";
  @SerializedName(SERIALIZED_NAME_HAVOC)
  private AdvancedSeasonStatDefenseHavoc havoc;

  public static final String SERIALIZED_NAME_PASING = "pasing";
  @SerializedName(SERIALIZED_NAME_PASING)
  private BigDecimal pasing;

  public static final String SERIALIZED_NAME_PASSING_DOWNS = "passingDowns";
  @SerializedName(SERIALIZED_NAME_PASSING_DOWNS)
  private BigDecimal passingDowns;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private BigDecimal rating;

  public static final String SERIALIZED_NAME_RUSHING = "rushing";
  @SerializedName(SERIALIZED_NAME_RUSHING)
  private BigDecimal rushing;

  public static final String SERIALIZED_NAME_STANDARD_DOWNS = "standardDowns";
  @SerializedName(SERIALIZED_NAME_STANDARD_DOWNS)
  private BigDecimal standardDowns;

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private BigDecimal success;

  public ConferenceSPRatingDefense() {
  }

  public ConferenceSPRatingDefense explosiveness(BigDecimal explosiveness) {
    this.explosiveness = explosiveness;
    return this;
  }

  /**
   * Get explosiveness
   * @return explosiveness
   */
  @javax.annotation.Nullable
  public BigDecimal getExplosiveness() {
    return explosiveness;
  }

  public void setExplosiveness(BigDecimal explosiveness) {
    this.explosiveness = explosiveness;
  }


  public ConferenceSPRatingDefense havoc(AdvancedSeasonStatDefenseHavoc havoc) {
    this.havoc = havoc;
    return this;
  }

  /**
   * Get havoc
   * @return havoc
   */
  @javax.annotation.Nullable
  public AdvancedSeasonStatDefenseHavoc getHavoc() {
    return havoc;
  }

  public void setHavoc(AdvancedSeasonStatDefenseHavoc havoc) {
    this.havoc = havoc;
  }


  public ConferenceSPRatingDefense pasing(BigDecimal pasing) {
    this.pasing = pasing;
    return this;
  }

  /**
   * Get pasing
   * @return pasing
   */
  @javax.annotation.Nullable
  public BigDecimal getPasing() {
    return pasing;
  }

  public void setPasing(BigDecimal pasing) {
    this.pasing = pasing;
  }


  public ConferenceSPRatingDefense passingDowns(BigDecimal passingDowns) {
    this.passingDowns = passingDowns;
    return this;
  }

  /**
   * Get passingDowns
   * @return passingDowns
   */
  @javax.annotation.Nullable
  public BigDecimal getPassingDowns() {
    return passingDowns;
  }

  public void setPassingDowns(BigDecimal passingDowns) {
    this.passingDowns = passingDowns;
  }


  public ConferenceSPRatingDefense rating(BigDecimal rating) {
    this.rating = rating;
    return this;
  }

  /**
   * Get rating
   * @return rating
   */
  @javax.annotation.Nullable
  public BigDecimal getRating() {
    return rating;
  }

  public void setRating(BigDecimal rating) {
    this.rating = rating;
  }


  public ConferenceSPRatingDefense rushing(BigDecimal rushing) {
    this.rushing = rushing;
    return this;
  }

  /**
   * Get rushing
   * @return rushing
   */
  @javax.annotation.Nullable
  public BigDecimal getRushing() {
    return rushing;
  }

  public void setRushing(BigDecimal rushing) {
    this.rushing = rushing;
  }


  public ConferenceSPRatingDefense standardDowns(BigDecimal standardDowns) {
    this.standardDowns = standardDowns;
    return this;
  }

  /**
   * Get standardDowns
   * @return standardDowns
   */
  @javax.annotation.Nullable
  public BigDecimal getStandardDowns() {
    return standardDowns;
  }

  public void setStandardDowns(BigDecimal standardDowns) {
    this.standardDowns = standardDowns;
  }


  public ConferenceSPRatingDefense success(BigDecimal success) {
    this.success = success;
    return this;
  }

  /**
   * Get success
   * @return success
   */
  @javax.annotation.Nullable
  public BigDecimal getSuccess() {
    return success;
  }

  public void setSuccess(BigDecimal success) {
    this.success = success;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConferenceSPRatingDefense conferenceSPRatingDefense = (ConferenceSPRatingDefense) o;
    return Objects.equals(this.explosiveness, conferenceSPRatingDefense.explosiveness) &&
        Objects.equals(this.havoc, conferenceSPRatingDefense.havoc) &&
        Objects.equals(this.pasing, conferenceSPRatingDefense.pasing) &&
        Objects.equals(this.passingDowns, conferenceSPRatingDefense.passingDowns) &&
        Objects.equals(this.rating, conferenceSPRatingDefense.rating) &&
        Objects.equals(this.rushing, conferenceSPRatingDefense.rushing) &&
        Objects.equals(this.standardDowns, conferenceSPRatingDefense.standardDowns) &&
        Objects.equals(this.success, conferenceSPRatingDefense.success);
  }

  @Override
  public int hashCode() {
    return Objects.hash(explosiveness, havoc, pasing, passingDowns, rating, rushing, standardDowns, success);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConferenceSPRatingDefense {\n");
    sb.append("    explosiveness: ").append(toIndentedString(explosiveness)).append("\n");
    sb.append("    havoc: ").append(toIndentedString(havoc)).append("\n");
    sb.append("    pasing: ").append(toIndentedString(pasing)).append("\n");
    sb.append("    passingDowns: ").append(toIndentedString(passingDowns)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    rushing: ").append(toIndentedString(rushing)).append("\n");
    sb.append("    standardDowns: ").append(toIndentedString(standardDowns)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("explosiveness");
    openapiFields.add("havoc");
    openapiFields.add("pasing");
    openapiFields.add("passingDowns");
    openapiFields.add("rating");
    openapiFields.add("rushing");
    openapiFields.add("standardDowns");
    openapiFields.add("success");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConferenceSPRatingDefense
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConferenceSPRatingDefense.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConferenceSPRatingDefense is not found in the empty JSON string", ConferenceSPRatingDefense.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConferenceSPRatingDefense.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConferenceSPRatingDefense` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `havoc`
      if (jsonObj.get("havoc") != null && !jsonObj.get("havoc").isJsonNull()) {
        AdvancedSeasonStatDefenseHavoc.validateJsonElement(jsonObj.get("havoc"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConferenceSPRatingDefense.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConferenceSPRatingDefense' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConferenceSPRatingDefense> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConferenceSPRatingDefense.class));

       return (TypeAdapter<T>) new TypeAdapter<ConferenceSPRatingDefense>() {
           @Override
           public void write(JsonWriter out, ConferenceSPRatingDefense value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConferenceSPRatingDefense read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConferenceSPRatingDefense given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConferenceSPRatingDefense
   * @throws IOException if the JSON string is invalid with respect to ConferenceSPRatingDefense
   */
  public static ConferenceSPRatingDefense fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConferenceSPRatingDefense.class);
  }

  /**
   * Convert an instance of ConferenceSPRatingDefense to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

