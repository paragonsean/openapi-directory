/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ScoreboardGameAwayTeam;
import org.openapitools.client.model.ScoreboardGameBetting;
import org.openapitools.client.model.ScoreboardGameVenue;
import org.openapitools.client.model.ScoreboardGameWeather;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ScoreboardGame
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScoreboardGame {
  public static final String SERIALIZED_NAME_AWAY_TEAM = "awayTeam";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM)
  private ScoreboardGameAwayTeam awayTeam;

  public static final String SERIALIZED_NAME_BETTING = "betting";
  @SerializedName(SERIALIZED_NAME_BETTING)
  private ScoreboardGameBetting betting;

  public static final String SERIALIZED_NAME_CLOCK = "clock";
  @SerializedName(SERIALIZED_NAME_CLOCK)
  private String clock;

  public static final String SERIALIZED_NAME_CONFERENCE_GAME = "conferenceGame";
  @SerializedName(SERIALIZED_NAME_CONFERENCE_GAME)
  private Boolean conferenceGame;

  public static final String SERIALIZED_NAME_HOME_TEAM = "homeTeam";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM)
  private ScoreboardGameAwayTeam homeTeam;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NEUTRAL_SITE = "neutralSite";
  @SerializedName(SERIALIZED_NAME_NEUTRAL_SITE)
  private Boolean neutralSite;

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private Integer period;

  public static final String SERIALIZED_NAME_POSSESSION = "possession";
  @SerializedName(SERIALIZED_NAME_POSSESSION)
  private String possession;

  public static final String SERIALIZED_NAME_SITUATION = "situation";
  @SerializedName(SERIALIZED_NAME_SITUATION)
  private String situation;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_START_TIME_T_B_D = "startTimeTBD";
  @SerializedName(SERIALIZED_NAME_START_TIME_T_B_D)
  private Boolean startTimeTBD;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TV = "tv";
  @SerializedName(SERIALIZED_NAME_TV)
  private String tv;

  public static final String SERIALIZED_NAME_VENUE = "venue";
  @SerializedName(SERIALIZED_NAME_VENUE)
  private ScoreboardGameVenue venue;

  public static final String SERIALIZED_NAME_WEATHER = "weather";
  @SerializedName(SERIALIZED_NAME_WEATHER)
  private ScoreboardGameWeather weather;

  public ScoreboardGame() {
  }

  public ScoreboardGame awayTeam(ScoreboardGameAwayTeam awayTeam) {
    this.awayTeam = awayTeam;
    return this;
  }

  /**
   * Get awayTeam
   * @return awayTeam
   */
  @javax.annotation.Nullable
  public ScoreboardGameAwayTeam getAwayTeam() {
    return awayTeam;
  }

  public void setAwayTeam(ScoreboardGameAwayTeam awayTeam) {
    this.awayTeam = awayTeam;
  }


  public ScoreboardGame betting(ScoreboardGameBetting betting) {
    this.betting = betting;
    return this;
  }

  /**
   * Get betting
   * @return betting
   */
  @javax.annotation.Nullable
  public ScoreboardGameBetting getBetting() {
    return betting;
  }

  public void setBetting(ScoreboardGameBetting betting) {
    this.betting = betting;
  }


  public ScoreboardGame clock(String clock) {
    this.clock = clock;
    return this;
  }

  /**
   * Get clock
   * @return clock
   */
  @javax.annotation.Nullable
  public String getClock() {
    return clock;
  }

  public void setClock(String clock) {
    this.clock = clock;
  }


  public ScoreboardGame conferenceGame(Boolean conferenceGame) {
    this.conferenceGame = conferenceGame;
    return this;
  }

  /**
   * Get conferenceGame
   * @return conferenceGame
   */
  @javax.annotation.Nullable
  public Boolean getConferenceGame() {
    return conferenceGame;
  }

  public void setConferenceGame(Boolean conferenceGame) {
    this.conferenceGame = conferenceGame;
  }


  public ScoreboardGame homeTeam(ScoreboardGameAwayTeam homeTeam) {
    this.homeTeam = homeTeam;
    return this;
  }

  /**
   * Get homeTeam
   * @return homeTeam
   */
  @javax.annotation.Nullable
  public ScoreboardGameAwayTeam getHomeTeam() {
    return homeTeam;
  }

  public void setHomeTeam(ScoreboardGameAwayTeam homeTeam) {
    this.homeTeam = homeTeam;
  }


  public ScoreboardGame id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ScoreboardGame neutralSite(Boolean neutralSite) {
    this.neutralSite = neutralSite;
    return this;
  }

  /**
   * Get neutralSite
   * @return neutralSite
   */
  @javax.annotation.Nullable
  public Boolean getNeutralSite() {
    return neutralSite;
  }

  public void setNeutralSite(Boolean neutralSite) {
    this.neutralSite = neutralSite;
  }


  public ScoreboardGame period(Integer period) {
    this.period = period;
    return this;
  }

  /**
   * Get period
   * @return period
   */
  @javax.annotation.Nullable
  public Integer getPeriod() {
    return period;
  }

  public void setPeriod(Integer period) {
    this.period = period;
  }


  public ScoreboardGame possession(String possession) {
    this.possession = possession;
    return this;
  }

  /**
   * Get possession
   * @return possession
   */
  @javax.annotation.Nullable
  public String getPossession() {
    return possession;
  }

  public void setPossession(String possession) {
    this.possession = possession;
  }


  public ScoreboardGame situation(String situation) {
    this.situation = situation;
    return this;
  }

  /**
   * Get situation
   * @return situation
   */
  @javax.annotation.Nullable
  public String getSituation() {
    return situation;
  }

  public void setSituation(String situation) {
    this.situation = situation;
  }


  public ScoreboardGame startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public ScoreboardGame startTimeTBD(Boolean startTimeTBD) {
    this.startTimeTBD = startTimeTBD;
    return this;
  }

  /**
   * Get startTimeTBD
   * @return startTimeTBD
   */
  @javax.annotation.Nullable
  public Boolean getStartTimeTBD() {
    return startTimeTBD;
  }

  public void setStartTimeTBD(Boolean startTimeTBD) {
    this.startTimeTBD = startTimeTBD;
  }


  public ScoreboardGame status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public ScoreboardGame tv(String tv) {
    this.tv = tv;
    return this;
  }

  /**
   * Get tv
   * @return tv
   */
  @javax.annotation.Nullable
  public String getTv() {
    return tv;
  }

  public void setTv(String tv) {
    this.tv = tv;
  }


  public ScoreboardGame venue(ScoreboardGameVenue venue) {
    this.venue = venue;
    return this;
  }

  /**
   * Get venue
   * @return venue
   */
  @javax.annotation.Nullable
  public ScoreboardGameVenue getVenue() {
    return venue;
  }

  public void setVenue(ScoreboardGameVenue venue) {
    this.venue = venue;
  }


  public ScoreboardGame weather(ScoreboardGameWeather weather) {
    this.weather = weather;
    return this;
  }

  /**
   * Get weather
   * @return weather
   */
  @javax.annotation.Nullable
  public ScoreboardGameWeather getWeather() {
    return weather;
  }

  public void setWeather(ScoreboardGameWeather weather) {
    this.weather = weather;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScoreboardGame scoreboardGame = (ScoreboardGame) o;
    return Objects.equals(this.awayTeam, scoreboardGame.awayTeam) &&
        Objects.equals(this.betting, scoreboardGame.betting) &&
        Objects.equals(this.clock, scoreboardGame.clock) &&
        Objects.equals(this.conferenceGame, scoreboardGame.conferenceGame) &&
        Objects.equals(this.homeTeam, scoreboardGame.homeTeam) &&
        Objects.equals(this.id, scoreboardGame.id) &&
        Objects.equals(this.neutralSite, scoreboardGame.neutralSite) &&
        Objects.equals(this.period, scoreboardGame.period) &&
        Objects.equals(this.possession, scoreboardGame.possession) &&
        Objects.equals(this.situation, scoreboardGame.situation) &&
        Objects.equals(this.startDate, scoreboardGame.startDate) &&
        Objects.equals(this.startTimeTBD, scoreboardGame.startTimeTBD) &&
        Objects.equals(this.status, scoreboardGame.status) &&
        Objects.equals(this.tv, scoreboardGame.tv) &&
        Objects.equals(this.venue, scoreboardGame.venue) &&
        Objects.equals(this.weather, scoreboardGame.weather);
  }

  @Override
  public int hashCode() {
    return Objects.hash(awayTeam, betting, clock, conferenceGame, homeTeam, id, neutralSite, period, possession, situation, startDate, startTimeTBD, status, tv, venue, weather);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScoreboardGame {\n");
    sb.append("    awayTeam: ").append(toIndentedString(awayTeam)).append("\n");
    sb.append("    betting: ").append(toIndentedString(betting)).append("\n");
    sb.append("    clock: ").append(toIndentedString(clock)).append("\n");
    sb.append("    conferenceGame: ").append(toIndentedString(conferenceGame)).append("\n");
    sb.append("    homeTeam: ").append(toIndentedString(homeTeam)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    neutralSite: ").append(toIndentedString(neutralSite)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    possession: ").append(toIndentedString(possession)).append("\n");
    sb.append("    situation: ").append(toIndentedString(situation)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    startTimeTBD: ").append(toIndentedString(startTimeTBD)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tv: ").append(toIndentedString(tv)).append("\n");
    sb.append("    venue: ").append(toIndentedString(venue)).append("\n");
    sb.append("    weather: ").append(toIndentedString(weather)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("awayTeam");
    openapiFields.add("betting");
    openapiFields.add("clock");
    openapiFields.add("conferenceGame");
    openapiFields.add("homeTeam");
    openapiFields.add("id");
    openapiFields.add("neutralSite");
    openapiFields.add("period");
    openapiFields.add("possession");
    openapiFields.add("situation");
    openapiFields.add("startDate");
    openapiFields.add("startTimeTBD");
    openapiFields.add("status");
    openapiFields.add("tv");
    openapiFields.add("venue");
    openapiFields.add("weather");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScoreboardGame
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScoreboardGame.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScoreboardGame is not found in the empty JSON string", ScoreboardGame.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScoreboardGame.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScoreboardGame` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `awayTeam`
      if (jsonObj.get("awayTeam") != null && !jsonObj.get("awayTeam").isJsonNull()) {
        ScoreboardGameAwayTeam.validateJsonElement(jsonObj.get("awayTeam"));
      }
      // validate the optional field `betting`
      if (jsonObj.get("betting") != null && !jsonObj.get("betting").isJsonNull()) {
        ScoreboardGameBetting.validateJsonElement(jsonObj.get("betting"));
      }
      if ((jsonObj.get("clock") != null && !jsonObj.get("clock").isJsonNull()) && !jsonObj.get("clock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clock").toString()));
      }
      // validate the optional field `homeTeam`
      if (jsonObj.get("homeTeam") != null && !jsonObj.get("homeTeam").isJsonNull()) {
        ScoreboardGameAwayTeam.validateJsonElement(jsonObj.get("homeTeam"));
      }
      if ((jsonObj.get("possession") != null && !jsonObj.get("possession").isJsonNull()) && !jsonObj.get("possession").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `possession` to be a primitive type in the JSON string but got `%s`", jsonObj.get("possession").toString()));
      }
      if ((jsonObj.get("situation") != null && !jsonObj.get("situation").isJsonNull()) && !jsonObj.get("situation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `situation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("situation").toString()));
      }
      if ((jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull()) && !jsonObj.get("startDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDate").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("tv") != null && !jsonObj.get("tv").isJsonNull()) && !jsonObj.get("tv").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tv` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tv").toString()));
      }
      // validate the optional field `venue`
      if (jsonObj.get("venue") != null && !jsonObj.get("venue").isJsonNull()) {
        ScoreboardGameVenue.validateJsonElement(jsonObj.get("venue"));
      }
      // validate the optional field `weather`
      if (jsonObj.get("weather") != null && !jsonObj.get("weather").isJsonNull()) {
        ScoreboardGameWeather.validateJsonElement(jsonObj.get("weather"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScoreboardGame.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScoreboardGame' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScoreboardGame> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScoreboardGame.class));

       return (TypeAdapter<T>) new TypeAdapter<ScoreboardGame>() {
           @Override
           public void write(JsonWriter out, ScoreboardGame value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScoreboardGame read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScoreboardGame given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScoreboardGame
   * @throws IOException if the JSON string is invalid with respect to ScoreboardGame
   */
  public static ScoreboardGame fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScoreboardGame.class);
  }

  /**
   * Convert an instance of ScoreboardGame to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

