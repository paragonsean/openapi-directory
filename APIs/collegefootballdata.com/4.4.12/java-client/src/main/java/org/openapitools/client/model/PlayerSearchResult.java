/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlayerSearchResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlayerSearchResult {
  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_HOMETOWN = "hometown";
  @SerializedName(SERIALIZED_NAME_HOMETOWN)
  private String hometown;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_JERSEY = "jersey";
  @SerializedName(SERIALIZED_NAME_JERSEY)
  private Integer jersey;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_TEAM_COLOR = "teamColor";
  @SerializedName(SERIALIZED_NAME_TEAM_COLOR)
  private String teamColor;

  public static final String SERIALIZED_NAME_TEAM_COLOR_SECONDARY = "teamColorSecondary";
  @SerializedName(SERIALIZED_NAME_TEAM_COLOR_SECONDARY)
  private String teamColorSecondary;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Integer weight;

  public PlayerSearchResult() {
  }

  public PlayerSearchResult firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public PlayerSearchResult height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Get height
   * @return height
   */
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public PlayerSearchResult hometown(String hometown) {
    this.hometown = hometown;
    return this;
  }

  /**
   * Get hometown
   * @return hometown
   */
  @javax.annotation.Nullable
  public String getHometown() {
    return hometown;
  }

  public void setHometown(String hometown) {
    this.hometown = hometown;
  }


  public PlayerSearchResult id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public PlayerSearchResult jersey(Integer jersey) {
    this.jersey = jersey;
    return this;
  }

  /**
   * Get jersey
   * @return jersey
   */
  @javax.annotation.Nullable
  public Integer getJersey() {
    return jersey;
  }

  public void setJersey(Integer jersey) {
    this.jersey = jersey;
  }


  public PlayerSearchResult lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Get lastName
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public PlayerSearchResult name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PlayerSearchResult position(String position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }


  public PlayerSearchResult team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public PlayerSearchResult teamColor(String teamColor) {
    this.teamColor = teamColor;
    return this;
  }

  /**
   * Get teamColor
   * @return teamColor
   */
  @javax.annotation.Nullable
  public String getTeamColor() {
    return teamColor;
  }

  public void setTeamColor(String teamColor) {
    this.teamColor = teamColor;
  }


  public PlayerSearchResult teamColorSecondary(String teamColorSecondary) {
    this.teamColorSecondary = teamColorSecondary;
    return this;
  }

  /**
   * Get teamColorSecondary
   * @return teamColorSecondary
   */
  @javax.annotation.Nullable
  public String getTeamColorSecondary() {
    return teamColorSecondary;
  }

  public void setTeamColorSecondary(String teamColorSecondary) {
    this.teamColorSecondary = teamColorSecondary;
  }


  public PlayerSearchResult weight(Integer weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Get weight
   * @return weight
   */
  @javax.annotation.Nullable
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerSearchResult playerSearchResult = (PlayerSearchResult) o;
    return Objects.equals(this.firstName, playerSearchResult.firstName) &&
        Objects.equals(this.height, playerSearchResult.height) &&
        Objects.equals(this.hometown, playerSearchResult.hometown) &&
        Objects.equals(this.id, playerSearchResult.id) &&
        Objects.equals(this.jersey, playerSearchResult.jersey) &&
        Objects.equals(this.lastName, playerSearchResult.lastName) &&
        Objects.equals(this.name, playerSearchResult.name) &&
        Objects.equals(this.position, playerSearchResult.position) &&
        Objects.equals(this.team, playerSearchResult.team) &&
        Objects.equals(this.teamColor, playerSearchResult.teamColor) &&
        Objects.equals(this.teamColorSecondary, playerSearchResult.teamColorSecondary) &&
        Objects.equals(this.weight, playerSearchResult.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstName, height, hometown, id, jersey, lastName, name, position, team, teamColor, teamColorSecondary, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerSearchResult {\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    hometown: ").append(toIndentedString(hometown)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jersey: ").append(toIndentedString(jersey)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    teamColor: ").append(toIndentedString(teamColor)).append("\n");
    sb.append("    teamColorSecondary: ").append(toIndentedString(teamColorSecondary)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("firstName");
    openapiFields.add("height");
    openapiFields.add("hometown");
    openapiFields.add("id");
    openapiFields.add("jersey");
    openapiFields.add("lastName");
    openapiFields.add("name");
    openapiFields.add("position");
    openapiFields.add("team");
    openapiFields.add("teamColor");
    openapiFields.add("teamColorSecondary");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlayerSearchResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlayerSearchResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayerSearchResult is not found in the empty JSON string", PlayerSearchResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlayerSearchResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlayerSearchResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("hometown") != null && !jsonObj.get("hometown").isJsonNull()) && !jsonObj.get("hometown").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hometown` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hometown").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) && !jsonObj.get("position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("position").toString()));
      }
      if ((jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) && !jsonObj.get("team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team").toString()));
      }
      if ((jsonObj.get("teamColor") != null && !jsonObj.get("teamColor").isJsonNull()) && !jsonObj.get("teamColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teamColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teamColor").toString()));
      }
      if ((jsonObj.get("teamColorSecondary") != null && !jsonObj.get("teamColorSecondary").isJsonNull()) && !jsonObj.get("teamColorSecondary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teamColorSecondary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teamColorSecondary").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayerSearchResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayerSearchResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayerSearchResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayerSearchResult.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayerSearchResult>() {
           @Override
           public void write(JsonWriter out, PlayerSearchResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayerSearchResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlayerSearchResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlayerSearchResult
   * @throws IOException if the JSON string is invalid with respect to PlayerSearchResult
   */
  public static PlayerSearchResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayerSearchResult.class);
  }

  /**
   * Convert an instance of PlayerSearchResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

