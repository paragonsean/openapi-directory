/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BoxScorePlayersPpaInnerAverage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BoxScorePlayersPpaInnerAverage {
  public static final String SERIALIZED_NAME_PASSING = "passing";
  @SerializedName(SERIALIZED_NAME_PASSING)
  private BigDecimal passing;

  public static final String SERIALIZED_NAME_QUARTER1 = "quarter1";
  @SerializedName(SERIALIZED_NAME_QUARTER1)
  private BigDecimal quarter1;

  public static final String SERIALIZED_NAME_QUARTER2 = "quarter2";
  @SerializedName(SERIALIZED_NAME_QUARTER2)
  private BigDecimal quarter2;

  public static final String SERIALIZED_NAME_QUARTER3 = "quarter3";
  @SerializedName(SERIALIZED_NAME_QUARTER3)
  private BigDecimal quarter3;

  public static final String SERIALIZED_NAME_QUARTER4 = "quarter4";
  @SerializedName(SERIALIZED_NAME_QUARTER4)
  private BigDecimal quarter4;

  public static final String SERIALIZED_NAME_RUSHING = "rushing";
  @SerializedName(SERIALIZED_NAME_RUSHING)
  private BigDecimal rushing;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private BigDecimal total;

  public BoxScorePlayersPpaInnerAverage() {
  }

  public BoxScorePlayersPpaInnerAverage passing(BigDecimal passing) {
    this.passing = passing;
    return this;
  }

  /**
   * Get passing
   * @return passing
   */
  @javax.annotation.Nullable
  public BigDecimal getPassing() {
    return passing;
  }

  public void setPassing(BigDecimal passing) {
    this.passing = passing;
  }


  public BoxScorePlayersPpaInnerAverage quarter1(BigDecimal quarter1) {
    this.quarter1 = quarter1;
    return this;
  }

  /**
   * Get quarter1
   * @return quarter1
   */
  @javax.annotation.Nullable
  public BigDecimal getQuarter1() {
    return quarter1;
  }

  public void setQuarter1(BigDecimal quarter1) {
    this.quarter1 = quarter1;
  }


  public BoxScorePlayersPpaInnerAverage quarter2(BigDecimal quarter2) {
    this.quarter2 = quarter2;
    return this;
  }

  /**
   * Get quarter2
   * @return quarter2
   */
  @javax.annotation.Nullable
  public BigDecimal getQuarter2() {
    return quarter2;
  }

  public void setQuarter2(BigDecimal quarter2) {
    this.quarter2 = quarter2;
  }


  public BoxScorePlayersPpaInnerAverage quarter3(BigDecimal quarter3) {
    this.quarter3 = quarter3;
    return this;
  }

  /**
   * Get quarter3
   * @return quarter3
   */
  @javax.annotation.Nullable
  public BigDecimal getQuarter3() {
    return quarter3;
  }

  public void setQuarter3(BigDecimal quarter3) {
    this.quarter3 = quarter3;
  }


  public BoxScorePlayersPpaInnerAverage quarter4(BigDecimal quarter4) {
    this.quarter4 = quarter4;
    return this;
  }

  /**
   * Get quarter4
   * @return quarter4
   */
  @javax.annotation.Nullable
  public BigDecimal getQuarter4() {
    return quarter4;
  }

  public void setQuarter4(BigDecimal quarter4) {
    this.quarter4 = quarter4;
  }


  public BoxScorePlayersPpaInnerAverage rushing(BigDecimal rushing) {
    this.rushing = rushing;
    return this;
  }

  /**
   * Get rushing
   * @return rushing
   */
  @javax.annotation.Nullable
  public BigDecimal getRushing() {
    return rushing;
  }

  public void setRushing(BigDecimal rushing) {
    this.rushing = rushing;
  }


  public BoxScorePlayersPpaInnerAverage total(BigDecimal total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public BigDecimal getTotal() {
    return total;
  }

  public void setTotal(BigDecimal total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BoxScorePlayersPpaInnerAverage boxScorePlayersPpaInnerAverage = (BoxScorePlayersPpaInnerAverage) o;
    return Objects.equals(this.passing, boxScorePlayersPpaInnerAverage.passing) &&
        Objects.equals(this.quarter1, boxScorePlayersPpaInnerAverage.quarter1) &&
        Objects.equals(this.quarter2, boxScorePlayersPpaInnerAverage.quarter2) &&
        Objects.equals(this.quarter3, boxScorePlayersPpaInnerAverage.quarter3) &&
        Objects.equals(this.quarter4, boxScorePlayersPpaInnerAverage.quarter4) &&
        Objects.equals(this.rushing, boxScorePlayersPpaInnerAverage.rushing) &&
        Objects.equals(this.total, boxScorePlayersPpaInnerAverage.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(passing, quarter1, quarter2, quarter3, quarter4, rushing, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BoxScorePlayersPpaInnerAverage {\n");
    sb.append("    passing: ").append(toIndentedString(passing)).append("\n");
    sb.append("    quarter1: ").append(toIndentedString(quarter1)).append("\n");
    sb.append("    quarter2: ").append(toIndentedString(quarter2)).append("\n");
    sb.append("    quarter3: ").append(toIndentedString(quarter3)).append("\n");
    sb.append("    quarter4: ").append(toIndentedString(quarter4)).append("\n");
    sb.append("    rushing: ").append(toIndentedString(rushing)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("passing");
    openapiFields.add("quarter1");
    openapiFields.add("quarter2");
    openapiFields.add("quarter3");
    openapiFields.add("quarter4");
    openapiFields.add("rushing");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BoxScorePlayersPpaInnerAverage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BoxScorePlayersPpaInnerAverage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BoxScorePlayersPpaInnerAverage is not found in the empty JSON string", BoxScorePlayersPpaInnerAverage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BoxScorePlayersPpaInnerAverage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BoxScorePlayersPpaInnerAverage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BoxScorePlayersPpaInnerAverage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BoxScorePlayersPpaInnerAverage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BoxScorePlayersPpaInnerAverage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BoxScorePlayersPpaInnerAverage.class));

       return (TypeAdapter<T>) new TypeAdapter<BoxScorePlayersPpaInnerAverage>() {
           @Override
           public void write(JsonWriter out, BoxScorePlayersPpaInnerAverage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BoxScorePlayersPpaInnerAverage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BoxScorePlayersPpaInnerAverage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BoxScorePlayersPpaInnerAverage
   * @throws IOException if the JSON string is invalid with respect to BoxScorePlayersPpaInnerAverage
   */
  public static BoxScorePlayersPpaInnerAverage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BoxScorePlayersPpaInnerAverage.class);
  }

  /**
   * Convert an instance of BoxScorePlayersPpaInnerAverage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

