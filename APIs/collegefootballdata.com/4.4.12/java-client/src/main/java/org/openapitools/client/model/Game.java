/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Game
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Game {
  public static final String SERIALIZED_NAME_ATTENDANCE = "attendance";
  @SerializedName(SERIALIZED_NAME_ATTENDANCE)
  private Integer attendance;

  public static final String SERIALIZED_NAME_AWAY_CONFERENCE = "away_conference";
  @SerializedName(SERIALIZED_NAME_AWAY_CONFERENCE)
  private String awayConference;

  public static final String SERIALIZED_NAME_AWAY_DIVISION = "away_division";
  @SerializedName(SERIALIZED_NAME_AWAY_DIVISION)
  private String awayDivision;

  public static final String SERIALIZED_NAME_AWAY_ID = "away_id";
  @SerializedName(SERIALIZED_NAME_AWAY_ID)
  private Integer awayId;

  public static final String SERIALIZED_NAME_AWAY_LINE_SCORES = "away_line_scores";
  @SerializedName(SERIALIZED_NAME_AWAY_LINE_SCORES)
  private List<Integer> awayLineScores = new ArrayList<>();

  public static final String SERIALIZED_NAME_AWAY_POINTS = "away_points";
  @SerializedName(SERIALIZED_NAME_AWAY_POINTS)
  private Integer awayPoints;

  public static final String SERIALIZED_NAME_AWAY_POST_WIN_PROB = "away_post_win_prob";
  @SerializedName(SERIALIZED_NAME_AWAY_POST_WIN_PROB)
  private BigDecimal awayPostWinProb;

  public static final String SERIALIZED_NAME_AWAY_POSTGAME_ELO = "away_postgame_elo";
  @SerializedName(SERIALIZED_NAME_AWAY_POSTGAME_ELO)
  private Integer awayPostgameElo;

  public static final String SERIALIZED_NAME_AWAY_PREGAME_ELO = "away_pregame_elo";
  @SerializedName(SERIALIZED_NAME_AWAY_PREGAME_ELO)
  private Integer awayPregameElo;

  public static final String SERIALIZED_NAME_AWAY_TEAM = "away_team";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM)
  private String awayTeam;

  public static final String SERIALIZED_NAME_COMPLETED = "completed";
  @SerializedName(SERIALIZED_NAME_COMPLETED)
  private Boolean completed;

  public static final String SERIALIZED_NAME_CONFERENCE_GAME = "conference_game";
  @SerializedName(SERIALIZED_NAME_CONFERENCE_GAME)
  private Boolean conferenceGame;

  public static final String SERIALIZED_NAME_EXCITEMENT_INDEX = "excitement_index";
  @SerializedName(SERIALIZED_NAME_EXCITEMENT_INDEX)
  private BigDecimal excitementIndex;

  public static final String SERIALIZED_NAME_HIGHLIGHTS = "highlights";
  @SerializedName(SERIALIZED_NAME_HIGHLIGHTS)
  private String highlights;

  public static final String SERIALIZED_NAME_HOME_CONFERENCE = "home_conference";
  @SerializedName(SERIALIZED_NAME_HOME_CONFERENCE)
  private String homeConference;

  public static final String SERIALIZED_NAME_HOME_DIVISION = "home_division";
  @SerializedName(SERIALIZED_NAME_HOME_DIVISION)
  private String homeDivision;

  public static final String SERIALIZED_NAME_HOME_ID = "home_id";
  @SerializedName(SERIALIZED_NAME_HOME_ID)
  private Integer homeId;

  public static final String SERIALIZED_NAME_HOME_LINE_SCORES = "home_line_scores";
  @SerializedName(SERIALIZED_NAME_HOME_LINE_SCORES)
  private List<Integer> homeLineScores = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOME_POINTS = "home_points";
  @SerializedName(SERIALIZED_NAME_HOME_POINTS)
  private Integer homePoints;

  public static final String SERIALIZED_NAME_HOME_POST_WIN_PROB = "home_post_win_prob";
  @SerializedName(SERIALIZED_NAME_HOME_POST_WIN_PROB)
  private BigDecimal homePostWinProb;

  public static final String SERIALIZED_NAME_HOME_POSTGAME_ELO = "home_postgame_elo";
  @SerializedName(SERIALIZED_NAME_HOME_POSTGAME_ELO)
  private Integer homePostgameElo;

  public static final String SERIALIZED_NAME_HOME_PREGAME_ELO = "home_pregame_elo";
  @SerializedName(SERIALIZED_NAME_HOME_PREGAME_ELO)
  private Integer homePregameElo;

  public static final String SERIALIZED_NAME_HOME_TEAM = "home_team";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM)
  private String homeTeam;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NEUTRAL_SITE = "neutral_site";
  @SerializedName(SERIALIZED_NAME_NEUTRAL_SITE)
  private Boolean neutralSite;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_SEASON = "season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private Integer season;

  public static final String SERIALIZED_NAME_SEASON_TYPE = "season_type";
  @SerializedName(SERIALIZED_NAME_SEASON_TYPE)
  private String seasonType;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_START_TIME_TBD = "start_time_tbd";
  @SerializedName(SERIALIZED_NAME_START_TIME_TBD)
  private Boolean startTimeTbd;

  public static final String SERIALIZED_NAME_VENUE = "venue";
  @SerializedName(SERIALIZED_NAME_VENUE)
  private String venue;

  public static final String SERIALIZED_NAME_VENUE_ID = "venue_id";
  @SerializedName(SERIALIZED_NAME_VENUE_ID)
  private Integer venueId;

  public static final String SERIALIZED_NAME_WEEK = "week";
  @SerializedName(SERIALIZED_NAME_WEEK)
  private Integer week;

  public Game() {
  }

  public Game attendance(Integer attendance) {
    this.attendance = attendance;
    return this;
  }

  /**
   * Get attendance
   * @return attendance
   */
  @javax.annotation.Nullable
  public Integer getAttendance() {
    return attendance;
  }

  public void setAttendance(Integer attendance) {
    this.attendance = attendance;
  }


  public Game awayConference(String awayConference) {
    this.awayConference = awayConference;
    return this;
  }

  /**
   * Get awayConference
   * @return awayConference
   */
  @javax.annotation.Nullable
  public String getAwayConference() {
    return awayConference;
  }

  public void setAwayConference(String awayConference) {
    this.awayConference = awayConference;
  }


  public Game awayDivision(String awayDivision) {
    this.awayDivision = awayDivision;
    return this;
  }

  /**
   * Get awayDivision
   * @return awayDivision
   */
  @javax.annotation.Nullable
  public String getAwayDivision() {
    return awayDivision;
  }

  public void setAwayDivision(String awayDivision) {
    this.awayDivision = awayDivision;
  }


  public Game awayId(Integer awayId) {
    this.awayId = awayId;
    return this;
  }

  /**
   * Get awayId
   * @return awayId
   */
  @javax.annotation.Nullable
  public Integer getAwayId() {
    return awayId;
  }

  public void setAwayId(Integer awayId) {
    this.awayId = awayId;
  }


  public Game awayLineScores(List<Integer> awayLineScores) {
    this.awayLineScores = awayLineScores;
    return this;
  }

  public Game addAwayLineScoresItem(Integer awayLineScoresItem) {
    if (this.awayLineScores == null) {
      this.awayLineScores = new ArrayList<>();
    }
    this.awayLineScores.add(awayLineScoresItem);
    return this;
  }

  /**
   * Get awayLineScores
   * @return awayLineScores
   */
  @javax.annotation.Nullable
  public List<Integer> getAwayLineScores() {
    return awayLineScores;
  }

  public void setAwayLineScores(List<Integer> awayLineScores) {
    this.awayLineScores = awayLineScores;
  }


  public Game awayPoints(Integer awayPoints) {
    this.awayPoints = awayPoints;
    return this;
  }

  /**
   * Get awayPoints
   * @return awayPoints
   */
  @javax.annotation.Nullable
  public Integer getAwayPoints() {
    return awayPoints;
  }

  public void setAwayPoints(Integer awayPoints) {
    this.awayPoints = awayPoints;
  }


  public Game awayPostWinProb(BigDecimal awayPostWinProb) {
    this.awayPostWinProb = awayPostWinProb;
    return this;
  }

  /**
   * Get awayPostWinProb
   * @return awayPostWinProb
   */
  @javax.annotation.Nullable
  public BigDecimal getAwayPostWinProb() {
    return awayPostWinProb;
  }

  public void setAwayPostWinProb(BigDecimal awayPostWinProb) {
    this.awayPostWinProb = awayPostWinProb;
  }


  public Game awayPostgameElo(Integer awayPostgameElo) {
    this.awayPostgameElo = awayPostgameElo;
    return this;
  }

  /**
   * Get awayPostgameElo
   * @return awayPostgameElo
   */
  @javax.annotation.Nullable
  public Integer getAwayPostgameElo() {
    return awayPostgameElo;
  }

  public void setAwayPostgameElo(Integer awayPostgameElo) {
    this.awayPostgameElo = awayPostgameElo;
  }


  public Game awayPregameElo(Integer awayPregameElo) {
    this.awayPregameElo = awayPregameElo;
    return this;
  }

  /**
   * Get awayPregameElo
   * @return awayPregameElo
   */
  @javax.annotation.Nullable
  public Integer getAwayPregameElo() {
    return awayPregameElo;
  }

  public void setAwayPregameElo(Integer awayPregameElo) {
    this.awayPregameElo = awayPregameElo;
  }


  public Game awayTeam(String awayTeam) {
    this.awayTeam = awayTeam;
    return this;
  }

  /**
   * Get awayTeam
   * @return awayTeam
   */
  @javax.annotation.Nullable
  public String getAwayTeam() {
    return awayTeam;
  }

  public void setAwayTeam(String awayTeam) {
    this.awayTeam = awayTeam;
  }


  public Game completed(Boolean completed) {
    this.completed = completed;
    return this;
  }

  /**
   * Get completed
   * @return completed
   */
  @javax.annotation.Nullable
  public Boolean getCompleted() {
    return completed;
  }

  public void setCompleted(Boolean completed) {
    this.completed = completed;
  }


  public Game conferenceGame(Boolean conferenceGame) {
    this.conferenceGame = conferenceGame;
    return this;
  }

  /**
   * Get conferenceGame
   * @return conferenceGame
   */
  @javax.annotation.Nullable
  public Boolean getConferenceGame() {
    return conferenceGame;
  }

  public void setConferenceGame(Boolean conferenceGame) {
    this.conferenceGame = conferenceGame;
  }


  public Game excitementIndex(BigDecimal excitementIndex) {
    this.excitementIndex = excitementIndex;
    return this;
  }

  /**
   * Get excitementIndex
   * @return excitementIndex
   */
  @javax.annotation.Nullable
  public BigDecimal getExcitementIndex() {
    return excitementIndex;
  }

  public void setExcitementIndex(BigDecimal excitementIndex) {
    this.excitementIndex = excitementIndex;
  }


  public Game highlights(String highlights) {
    this.highlights = highlights;
    return this;
  }

  /**
   * Get highlights
   * @return highlights
   */
  @javax.annotation.Nullable
  public String getHighlights() {
    return highlights;
  }

  public void setHighlights(String highlights) {
    this.highlights = highlights;
  }


  public Game homeConference(String homeConference) {
    this.homeConference = homeConference;
    return this;
  }

  /**
   * Get homeConference
   * @return homeConference
   */
  @javax.annotation.Nullable
  public String getHomeConference() {
    return homeConference;
  }

  public void setHomeConference(String homeConference) {
    this.homeConference = homeConference;
  }


  public Game homeDivision(String homeDivision) {
    this.homeDivision = homeDivision;
    return this;
  }

  /**
   * Get homeDivision
   * @return homeDivision
   */
  @javax.annotation.Nullable
  public String getHomeDivision() {
    return homeDivision;
  }

  public void setHomeDivision(String homeDivision) {
    this.homeDivision = homeDivision;
  }


  public Game homeId(Integer homeId) {
    this.homeId = homeId;
    return this;
  }

  /**
   * Get homeId
   * @return homeId
   */
  @javax.annotation.Nullable
  public Integer getHomeId() {
    return homeId;
  }

  public void setHomeId(Integer homeId) {
    this.homeId = homeId;
  }


  public Game homeLineScores(List<Integer> homeLineScores) {
    this.homeLineScores = homeLineScores;
    return this;
  }

  public Game addHomeLineScoresItem(Integer homeLineScoresItem) {
    if (this.homeLineScores == null) {
      this.homeLineScores = new ArrayList<>();
    }
    this.homeLineScores.add(homeLineScoresItem);
    return this;
  }

  /**
   * Get homeLineScores
   * @return homeLineScores
   */
  @javax.annotation.Nullable
  public List<Integer> getHomeLineScores() {
    return homeLineScores;
  }

  public void setHomeLineScores(List<Integer> homeLineScores) {
    this.homeLineScores = homeLineScores;
  }


  public Game homePoints(Integer homePoints) {
    this.homePoints = homePoints;
    return this;
  }

  /**
   * Get homePoints
   * @return homePoints
   */
  @javax.annotation.Nullable
  public Integer getHomePoints() {
    return homePoints;
  }

  public void setHomePoints(Integer homePoints) {
    this.homePoints = homePoints;
  }


  public Game homePostWinProb(BigDecimal homePostWinProb) {
    this.homePostWinProb = homePostWinProb;
    return this;
  }

  /**
   * Get homePostWinProb
   * @return homePostWinProb
   */
  @javax.annotation.Nullable
  public BigDecimal getHomePostWinProb() {
    return homePostWinProb;
  }

  public void setHomePostWinProb(BigDecimal homePostWinProb) {
    this.homePostWinProb = homePostWinProb;
  }


  public Game homePostgameElo(Integer homePostgameElo) {
    this.homePostgameElo = homePostgameElo;
    return this;
  }

  /**
   * Get homePostgameElo
   * @return homePostgameElo
   */
  @javax.annotation.Nullable
  public Integer getHomePostgameElo() {
    return homePostgameElo;
  }

  public void setHomePostgameElo(Integer homePostgameElo) {
    this.homePostgameElo = homePostgameElo;
  }


  public Game homePregameElo(Integer homePregameElo) {
    this.homePregameElo = homePregameElo;
    return this;
  }

  /**
   * Get homePregameElo
   * @return homePregameElo
   */
  @javax.annotation.Nullable
  public Integer getHomePregameElo() {
    return homePregameElo;
  }

  public void setHomePregameElo(Integer homePregameElo) {
    this.homePregameElo = homePregameElo;
  }


  public Game homeTeam(String homeTeam) {
    this.homeTeam = homeTeam;
    return this;
  }

  /**
   * Get homeTeam
   * @return homeTeam
   */
  @javax.annotation.Nullable
  public String getHomeTeam() {
    return homeTeam;
  }

  public void setHomeTeam(String homeTeam) {
    this.homeTeam = homeTeam;
  }


  public Game id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Game neutralSite(Boolean neutralSite) {
    this.neutralSite = neutralSite;
    return this;
  }

  /**
   * Get neutralSite
   * @return neutralSite
   */
  @javax.annotation.Nullable
  public Boolean getNeutralSite() {
    return neutralSite;
  }

  public void setNeutralSite(Boolean neutralSite) {
    this.neutralSite = neutralSite;
  }


  public Game notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public Game season(Integer season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public Integer getSeason() {
    return season;
  }

  public void setSeason(Integer season) {
    this.season = season;
  }


  public Game seasonType(String seasonType) {
    this.seasonType = seasonType;
    return this;
  }

  /**
   * Get seasonType
   * @return seasonType
   */
  @javax.annotation.Nullable
  public String getSeasonType() {
    return seasonType;
  }

  public void setSeasonType(String seasonType) {
    this.seasonType = seasonType;
  }


  public Game startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public Game startTimeTbd(Boolean startTimeTbd) {
    this.startTimeTbd = startTimeTbd;
    return this;
  }

  /**
   * Get startTimeTbd
   * @return startTimeTbd
   */
  @javax.annotation.Nullable
  public Boolean getStartTimeTbd() {
    return startTimeTbd;
  }

  public void setStartTimeTbd(Boolean startTimeTbd) {
    this.startTimeTbd = startTimeTbd;
  }


  public Game venue(String venue) {
    this.venue = venue;
    return this;
  }

  /**
   * Get venue
   * @return venue
   */
  @javax.annotation.Nullable
  public String getVenue() {
    return venue;
  }

  public void setVenue(String venue) {
    this.venue = venue;
  }


  public Game venueId(Integer venueId) {
    this.venueId = venueId;
    return this;
  }

  /**
   * Get venueId
   * @return venueId
   */
  @javax.annotation.Nullable
  public Integer getVenueId() {
    return venueId;
  }

  public void setVenueId(Integer venueId) {
    this.venueId = venueId;
  }


  public Game week(Integer week) {
    this.week = week;
    return this;
  }

  /**
   * Get week
   * @return week
   */
  @javax.annotation.Nullable
  public Integer getWeek() {
    return week;
  }

  public void setWeek(Integer week) {
    this.week = week;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Game game = (Game) o;
    return Objects.equals(this.attendance, game.attendance) &&
        Objects.equals(this.awayConference, game.awayConference) &&
        Objects.equals(this.awayDivision, game.awayDivision) &&
        Objects.equals(this.awayId, game.awayId) &&
        Objects.equals(this.awayLineScores, game.awayLineScores) &&
        Objects.equals(this.awayPoints, game.awayPoints) &&
        Objects.equals(this.awayPostWinProb, game.awayPostWinProb) &&
        Objects.equals(this.awayPostgameElo, game.awayPostgameElo) &&
        Objects.equals(this.awayPregameElo, game.awayPregameElo) &&
        Objects.equals(this.awayTeam, game.awayTeam) &&
        Objects.equals(this.completed, game.completed) &&
        Objects.equals(this.conferenceGame, game.conferenceGame) &&
        Objects.equals(this.excitementIndex, game.excitementIndex) &&
        Objects.equals(this.highlights, game.highlights) &&
        Objects.equals(this.homeConference, game.homeConference) &&
        Objects.equals(this.homeDivision, game.homeDivision) &&
        Objects.equals(this.homeId, game.homeId) &&
        Objects.equals(this.homeLineScores, game.homeLineScores) &&
        Objects.equals(this.homePoints, game.homePoints) &&
        Objects.equals(this.homePostWinProb, game.homePostWinProb) &&
        Objects.equals(this.homePostgameElo, game.homePostgameElo) &&
        Objects.equals(this.homePregameElo, game.homePregameElo) &&
        Objects.equals(this.homeTeam, game.homeTeam) &&
        Objects.equals(this.id, game.id) &&
        Objects.equals(this.neutralSite, game.neutralSite) &&
        Objects.equals(this.notes, game.notes) &&
        Objects.equals(this.season, game.season) &&
        Objects.equals(this.seasonType, game.seasonType) &&
        Objects.equals(this.startDate, game.startDate) &&
        Objects.equals(this.startTimeTbd, game.startTimeTbd) &&
        Objects.equals(this.venue, game.venue) &&
        Objects.equals(this.venueId, game.venueId) &&
        Objects.equals(this.week, game.week);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attendance, awayConference, awayDivision, awayId, awayLineScores, awayPoints, awayPostWinProb, awayPostgameElo, awayPregameElo, awayTeam, completed, conferenceGame, excitementIndex, highlights, homeConference, homeDivision, homeId, homeLineScores, homePoints, homePostWinProb, homePostgameElo, homePregameElo, homeTeam, id, neutralSite, notes, season, seasonType, startDate, startTimeTbd, venue, venueId, week);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Game {\n");
    sb.append("    attendance: ").append(toIndentedString(attendance)).append("\n");
    sb.append("    awayConference: ").append(toIndentedString(awayConference)).append("\n");
    sb.append("    awayDivision: ").append(toIndentedString(awayDivision)).append("\n");
    sb.append("    awayId: ").append(toIndentedString(awayId)).append("\n");
    sb.append("    awayLineScores: ").append(toIndentedString(awayLineScores)).append("\n");
    sb.append("    awayPoints: ").append(toIndentedString(awayPoints)).append("\n");
    sb.append("    awayPostWinProb: ").append(toIndentedString(awayPostWinProb)).append("\n");
    sb.append("    awayPostgameElo: ").append(toIndentedString(awayPostgameElo)).append("\n");
    sb.append("    awayPregameElo: ").append(toIndentedString(awayPregameElo)).append("\n");
    sb.append("    awayTeam: ").append(toIndentedString(awayTeam)).append("\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    conferenceGame: ").append(toIndentedString(conferenceGame)).append("\n");
    sb.append("    excitementIndex: ").append(toIndentedString(excitementIndex)).append("\n");
    sb.append("    highlights: ").append(toIndentedString(highlights)).append("\n");
    sb.append("    homeConference: ").append(toIndentedString(homeConference)).append("\n");
    sb.append("    homeDivision: ").append(toIndentedString(homeDivision)).append("\n");
    sb.append("    homeId: ").append(toIndentedString(homeId)).append("\n");
    sb.append("    homeLineScores: ").append(toIndentedString(homeLineScores)).append("\n");
    sb.append("    homePoints: ").append(toIndentedString(homePoints)).append("\n");
    sb.append("    homePostWinProb: ").append(toIndentedString(homePostWinProb)).append("\n");
    sb.append("    homePostgameElo: ").append(toIndentedString(homePostgameElo)).append("\n");
    sb.append("    homePregameElo: ").append(toIndentedString(homePregameElo)).append("\n");
    sb.append("    homeTeam: ").append(toIndentedString(homeTeam)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    neutralSite: ").append(toIndentedString(neutralSite)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    seasonType: ").append(toIndentedString(seasonType)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    startTimeTbd: ").append(toIndentedString(startTimeTbd)).append("\n");
    sb.append("    venue: ").append(toIndentedString(venue)).append("\n");
    sb.append("    venueId: ").append(toIndentedString(venueId)).append("\n");
    sb.append("    week: ").append(toIndentedString(week)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attendance");
    openapiFields.add("away_conference");
    openapiFields.add("away_division");
    openapiFields.add("away_id");
    openapiFields.add("away_line_scores");
    openapiFields.add("away_points");
    openapiFields.add("away_post_win_prob");
    openapiFields.add("away_postgame_elo");
    openapiFields.add("away_pregame_elo");
    openapiFields.add("away_team");
    openapiFields.add("completed");
    openapiFields.add("conference_game");
    openapiFields.add("excitement_index");
    openapiFields.add("highlights");
    openapiFields.add("home_conference");
    openapiFields.add("home_division");
    openapiFields.add("home_id");
    openapiFields.add("home_line_scores");
    openapiFields.add("home_points");
    openapiFields.add("home_post_win_prob");
    openapiFields.add("home_postgame_elo");
    openapiFields.add("home_pregame_elo");
    openapiFields.add("home_team");
    openapiFields.add("id");
    openapiFields.add("neutral_site");
    openapiFields.add("notes");
    openapiFields.add("season");
    openapiFields.add("season_type");
    openapiFields.add("start_date");
    openapiFields.add("start_time_tbd");
    openapiFields.add("venue");
    openapiFields.add("venue_id");
    openapiFields.add("week");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Game
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Game.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Game is not found in the empty JSON string", Game.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Game.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Game` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("away_conference") != null && !jsonObj.get("away_conference").isJsonNull()) && !jsonObj.get("away_conference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `away_conference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("away_conference").toString()));
      }
      if ((jsonObj.get("away_division") != null && !jsonObj.get("away_division").isJsonNull()) && !jsonObj.get("away_division").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `away_division` to be a primitive type in the JSON string but got `%s`", jsonObj.get("away_division").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("away_line_scores") != null && !jsonObj.get("away_line_scores").isJsonNull() && !jsonObj.get("away_line_scores").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `away_line_scores` to be an array in the JSON string but got `%s`", jsonObj.get("away_line_scores").toString()));
      }
      if ((jsonObj.get("away_team") != null && !jsonObj.get("away_team").isJsonNull()) && !jsonObj.get("away_team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `away_team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("away_team").toString()));
      }
      if ((jsonObj.get("highlights") != null && !jsonObj.get("highlights").isJsonNull()) && !jsonObj.get("highlights").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `highlights` to be a primitive type in the JSON string but got `%s`", jsonObj.get("highlights").toString()));
      }
      if ((jsonObj.get("home_conference") != null && !jsonObj.get("home_conference").isJsonNull()) && !jsonObj.get("home_conference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `home_conference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("home_conference").toString()));
      }
      if ((jsonObj.get("home_division") != null && !jsonObj.get("home_division").isJsonNull()) && !jsonObj.get("home_division").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `home_division` to be a primitive type in the JSON string but got `%s`", jsonObj.get("home_division").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("home_line_scores") != null && !jsonObj.get("home_line_scores").isJsonNull() && !jsonObj.get("home_line_scores").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `home_line_scores` to be an array in the JSON string but got `%s`", jsonObj.get("home_line_scores").toString()));
      }
      if ((jsonObj.get("home_team") != null && !jsonObj.get("home_team").isJsonNull()) && !jsonObj.get("home_team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `home_team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("home_team").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("season_type") != null && !jsonObj.get("season_type").isJsonNull()) && !jsonObj.get("season_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `season_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("season_type").toString()));
      }
      if ((jsonObj.get("start_date") != null && !jsonObj.get("start_date").isJsonNull()) && !jsonObj.get("start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_date").toString()));
      }
      if ((jsonObj.get("venue") != null && !jsonObj.get("venue").isJsonNull()) && !jsonObj.get("venue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `venue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("venue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Game.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Game' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Game> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Game.class));

       return (TypeAdapter<T>) new TypeAdapter<Game>() {
           @Override
           public void write(JsonWriter out, Game value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Game read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Game given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Game
   * @throws IOException if the JSON string is invalid with respect to Game
   */
  public static Game fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Game.class);
  }

  /**
   * Convert an instance of Game to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

