/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.RecruitHometownInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Recruit
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Recruit {
  public static final String SERIALIZED_NAME_ATHLETE_ID = "athleteId";
  @SerializedName(SERIALIZED_NAME_ATHLETE_ID)
  private Integer athleteId;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COMMITTED_TO = "committedTo";
  @SerializedName(SERIALIZED_NAME_COMMITTED_TO)
  private String committedTo;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private BigDecimal height;

  public static final String SERIALIZED_NAME_HOMETOWN_INFO = "hometownInfo";
  @SerializedName(SERIALIZED_NAME_HOMETOWN_INFO)
  private RecruitHometownInfo hometownInfo;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_RANKING = "ranking";
  @SerializedName(SERIALIZED_NAME_RANKING)
  private Integer ranking;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private BigDecimal rating;

  public static final String SERIALIZED_NAME_RECRUIT_TYPE = "recruitType";
  @SerializedName(SERIALIZED_NAME_RECRUIT_TYPE)
  private String recruitType;

  public static final String SERIALIZED_NAME_SCHOOL = "school";
  @SerializedName(SERIALIZED_NAME_SCHOOL)
  private String school;

  public static final String SERIALIZED_NAME_STARS = "stars";
  @SerializedName(SERIALIZED_NAME_STARS)
  private Integer stars;

  public static final String SERIALIZED_NAME_STATE_PROVINCE = "stateProvince";
  @SerializedName(SERIALIZED_NAME_STATE_PROVINCE)
  private String stateProvince;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Integer weight;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Integer year;

  public Recruit() {
  }

  public Recruit athleteId(Integer athleteId) {
    this.athleteId = athleteId;
    return this;
  }

  /**
   * Get athleteId
   * @return athleteId
   */
  @javax.annotation.Nullable
  public Integer getAthleteId() {
    return athleteId;
  }

  public void setAthleteId(Integer athleteId) {
    this.athleteId = athleteId;
  }


  public Recruit city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public Recruit committedTo(String committedTo) {
    this.committedTo = committedTo;
    return this;
  }

  /**
   * Get committedTo
   * @return committedTo
   */
  @javax.annotation.Nullable
  public String getCommittedTo() {
    return committedTo;
  }

  public void setCommittedTo(String committedTo) {
    this.committedTo = committedTo;
  }


  public Recruit country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public Recruit height(BigDecimal height) {
    this.height = height;
    return this;
  }

  /**
   * Get height
   * @return height
   */
  @javax.annotation.Nullable
  public BigDecimal getHeight() {
    return height;
  }

  public void setHeight(BigDecimal height) {
    this.height = height;
  }


  public Recruit hometownInfo(RecruitHometownInfo hometownInfo) {
    this.hometownInfo = hometownInfo;
    return this;
  }

  /**
   * Get hometownInfo
   * @return hometownInfo
   */
  @javax.annotation.Nullable
  public RecruitHometownInfo getHometownInfo() {
    return hometownInfo;
  }

  public void setHometownInfo(RecruitHometownInfo hometownInfo) {
    this.hometownInfo = hometownInfo;
  }


  public Recruit id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Recruit name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Recruit position(String position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }


  public Recruit ranking(Integer ranking) {
    this.ranking = ranking;
    return this;
  }

  /**
   * Get ranking
   * @return ranking
   */
  @javax.annotation.Nullable
  public Integer getRanking() {
    return ranking;
  }

  public void setRanking(Integer ranking) {
    this.ranking = ranking;
  }


  public Recruit rating(BigDecimal rating) {
    this.rating = rating;
    return this;
  }

  /**
   * Get rating
   * @return rating
   */
  @javax.annotation.Nullable
  public BigDecimal getRating() {
    return rating;
  }

  public void setRating(BigDecimal rating) {
    this.rating = rating;
  }


  public Recruit recruitType(String recruitType) {
    this.recruitType = recruitType;
    return this;
  }

  /**
   * Get recruitType
   * @return recruitType
   */
  @javax.annotation.Nullable
  public String getRecruitType() {
    return recruitType;
  }

  public void setRecruitType(String recruitType) {
    this.recruitType = recruitType;
  }


  public Recruit school(String school) {
    this.school = school;
    return this;
  }

  /**
   * Get school
   * @return school
   */
  @javax.annotation.Nullable
  public String getSchool() {
    return school;
  }

  public void setSchool(String school) {
    this.school = school;
  }


  public Recruit stars(Integer stars) {
    this.stars = stars;
    return this;
  }

  /**
   * Get stars
   * @return stars
   */
  @javax.annotation.Nullable
  public Integer getStars() {
    return stars;
  }

  public void setStars(Integer stars) {
    this.stars = stars;
  }


  public Recruit stateProvince(String stateProvince) {
    this.stateProvince = stateProvince;
    return this;
  }

  /**
   * Get stateProvince
   * @return stateProvince
   */
  @javax.annotation.Nullable
  public String getStateProvince() {
    return stateProvince;
  }

  public void setStateProvince(String stateProvince) {
    this.stateProvince = stateProvince;
  }


  public Recruit weight(Integer weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Get weight
   * @return weight
   */
  @javax.annotation.Nullable
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }


  public Recruit year(Integer year) {
    this.year = year;
    return this;
  }

  /**
   * Get year
   * @return year
   */
  @javax.annotation.Nullable
  public Integer getYear() {
    return year;
  }

  public void setYear(Integer year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Recruit recruit = (Recruit) o;
    return Objects.equals(this.athleteId, recruit.athleteId) &&
        Objects.equals(this.city, recruit.city) &&
        Objects.equals(this.committedTo, recruit.committedTo) &&
        Objects.equals(this.country, recruit.country) &&
        Objects.equals(this.height, recruit.height) &&
        Objects.equals(this.hometownInfo, recruit.hometownInfo) &&
        Objects.equals(this.id, recruit.id) &&
        Objects.equals(this.name, recruit.name) &&
        Objects.equals(this.position, recruit.position) &&
        Objects.equals(this.ranking, recruit.ranking) &&
        Objects.equals(this.rating, recruit.rating) &&
        Objects.equals(this.recruitType, recruit.recruitType) &&
        Objects.equals(this.school, recruit.school) &&
        Objects.equals(this.stars, recruit.stars) &&
        Objects.equals(this.stateProvince, recruit.stateProvince) &&
        Objects.equals(this.weight, recruit.weight) &&
        Objects.equals(this.year, recruit.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(athleteId, city, committedTo, country, height, hometownInfo, id, name, position, ranking, rating, recruitType, school, stars, stateProvince, weight, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Recruit {\n");
    sb.append("    athleteId: ").append(toIndentedString(athleteId)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    committedTo: ").append(toIndentedString(committedTo)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    hometownInfo: ").append(toIndentedString(hometownInfo)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    ranking: ").append(toIndentedString(ranking)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    recruitType: ").append(toIndentedString(recruitType)).append("\n");
    sb.append("    school: ").append(toIndentedString(school)).append("\n");
    sb.append("    stars: ").append(toIndentedString(stars)).append("\n");
    sb.append("    stateProvince: ").append(toIndentedString(stateProvince)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("athleteId");
    openapiFields.add("city");
    openapiFields.add("committedTo");
    openapiFields.add("country");
    openapiFields.add("height");
    openapiFields.add("hometownInfo");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("position");
    openapiFields.add("ranking");
    openapiFields.add("rating");
    openapiFields.add("recruitType");
    openapiFields.add("school");
    openapiFields.add("stars");
    openapiFields.add("stateProvince");
    openapiFields.add("weight");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Recruit
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Recruit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Recruit is not found in the empty JSON string", Recruit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Recruit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Recruit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("committedTo") != null && !jsonObj.get("committedTo").isJsonNull()) && !jsonObj.get("committedTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committedTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committedTo").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      // validate the optional field `hometownInfo`
      if (jsonObj.get("hometownInfo") != null && !jsonObj.get("hometownInfo").isJsonNull()) {
        RecruitHometownInfo.validateJsonElement(jsonObj.get("hometownInfo"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) && !jsonObj.get("position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("position").toString()));
      }
      if ((jsonObj.get("recruitType") != null && !jsonObj.get("recruitType").isJsonNull()) && !jsonObj.get("recruitType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recruitType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recruitType").toString()));
      }
      if ((jsonObj.get("school") != null && !jsonObj.get("school").isJsonNull()) && !jsonObj.get("school").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `school` to be a primitive type in the JSON string but got `%s`", jsonObj.get("school").toString()));
      }
      if ((jsonObj.get("stateProvince") != null && !jsonObj.get("stateProvince").isJsonNull()) && !jsonObj.get("stateProvince").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateProvince` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateProvince").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Recruit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Recruit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Recruit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Recruit.class));

       return (TypeAdapter<T>) new TypeAdapter<Recruit>() {
           @Override
           public void write(JsonWriter out, Recruit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Recruit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Recruit given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Recruit
   * @throws IOException if the JSON string is invalid with respect to Recruit
   */
  public static Recruit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Recruit.class);
  }

  /**
   * Convert an instance of Recruit to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

