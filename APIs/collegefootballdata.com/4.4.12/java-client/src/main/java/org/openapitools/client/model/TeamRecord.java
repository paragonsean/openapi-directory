/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.TeamRecordAwayGames;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TeamRecord
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TeamRecord {
  public static final String SERIALIZED_NAME_AWAY_GAMES = "awayGames";
  @SerializedName(SERIALIZED_NAME_AWAY_GAMES)
  private TeamRecordAwayGames awayGames;

  public static final String SERIALIZED_NAME_CONFERENCE = "conference";
  @SerializedName(SERIALIZED_NAME_CONFERENCE)
  private String conference;

  public static final String SERIALIZED_NAME_CONFERENCE_GAMES = "conferenceGames";
  @SerializedName(SERIALIZED_NAME_CONFERENCE_GAMES)
  private TeamRecordAwayGames conferenceGames;

  public static final String SERIALIZED_NAME_DIVISION = "division";
  @SerializedName(SERIALIZED_NAME_DIVISION)
  private String division;

  public static final String SERIALIZED_NAME_EXPECTED_WINS = "expectedWins";
  @SerializedName(SERIALIZED_NAME_EXPECTED_WINS)
  private BigDecimal expectedWins;

  public static final String SERIALIZED_NAME_HOME_GAMES = "homeGames";
  @SerializedName(SERIALIZED_NAME_HOME_GAMES)
  private TeamRecordAwayGames homeGames;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private TeamRecordAwayGames total;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Integer year;

  public TeamRecord() {
  }

  public TeamRecord awayGames(TeamRecordAwayGames awayGames) {
    this.awayGames = awayGames;
    return this;
  }

  /**
   * Get awayGames
   * @return awayGames
   */
  @javax.annotation.Nullable
  public TeamRecordAwayGames getAwayGames() {
    return awayGames;
  }

  public void setAwayGames(TeamRecordAwayGames awayGames) {
    this.awayGames = awayGames;
  }


  public TeamRecord conference(String conference) {
    this.conference = conference;
    return this;
  }

  /**
   * Get conference
   * @return conference
   */
  @javax.annotation.Nullable
  public String getConference() {
    return conference;
  }

  public void setConference(String conference) {
    this.conference = conference;
  }


  public TeamRecord conferenceGames(TeamRecordAwayGames conferenceGames) {
    this.conferenceGames = conferenceGames;
    return this;
  }

  /**
   * Get conferenceGames
   * @return conferenceGames
   */
  @javax.annotation.Nullable
  public TeamRecordAwayGames getConferenceGames() {
    return conferenceGames;
  }

  public void setConferenceGames(TeamRecordAwayGames conferenceGames) {
    this.conferenceGames = conferenceGames;
  }


  public TeamRecord division(String division) {
    this.division = division;
    return this;
  }

  /**
   * Get division
   * @return division
   */
  @javax.annotation.Nullable
  public String getDivision() {
    return division;
  }

  public void setDivision(String division) {
    this.division = division;
  }


  public TeamRecord expectedWins(BigDecimal expectedWins) {
    this.expectedWins = expectedWins;
    return this;
  }

  /**
   * Get expectedWins
   * @return expectedWins
   */
  @javax.annotation.Nullable
  public BigDecimal getExpectedWins() {
    return expectedWins;
  }

  public void setExpectedWins(BigDecimal expectedWins) {
    this.expectedWins = expectedWins;
  }


  public TeamRecord homeGames(TeamRecordAwayGames homeGames) {
    this.homeGames = homeGames;
    return this;
  }

  /**
   * Get homeGames
   * @return homeGames
   */
  @javax.annotation.Nullable
  public TeamRecordAwayGames getHomeGames() {
    return homeGames;
  }

  public void setHomeGames(TeamRecordAwayGames homeGames) {
    this.homeGames = homeGames;
  }


  public TeamRecord team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public TeamRecord total(TeamRecordAwayGames total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public TeamRecordAwayGames getTotal() {
    return total;
  }

  public void setTotal(TeamRecordAwayGames total) {
    this.total = total;
  }


  public TeamRecord year(Integer year) {
    this.year = year;
    return this;
  }

  /**
   * Get year
   * @return year
   */
  @javax.annotation.Nullable
  public Integer getYear() {
    return year;
  }

  public void setYear(Integer year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamRecord teamRecord = (TeamRecord) o;
    return Objects.equals(this.awayGames, teamRecord.awayGames) &&
        Objects.equals(this.conference, teamRecord.conference) &&
        Objects.equals(this.conferenceGames, teamRecord.conferenceGames) &&
        Objects.equals(this.division, teamRecord.division) &&
        Objects.equals(this.expectedWins, teamRecord.expectedWins) &&
        Objects.equals(this.homeGames, teamRecord.homeGames) &&
        Objects.equals(this.team, teamRecord.team) &&
        Objects.equals(this.total, teamRecord.total) &&
        Objects.equals(this.year, teamRecord.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(awayGames, conference, conferenceGames, division, expectedWins, homeGames, team, total, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamRecord {\n");
    sb.append("    awayGames: ").append(toIndentedString(awayGames)).append("\n");
    sb.append("    conference: ").append(toIndentedString(conference)).append("\n");
    sb.append("    conferenceGames: ").append(toIndentedString(conferenceGames)).append("\n");
    sb.append("    division: ").append(toIndentedString(division)).append("\n");
    sb.append("    expectedWins: ").append(toIndentedString(expectedWins)).append("\n");
    sb.append("    homeGames: ").append(toIndentedString(homeGames)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("awayGames");
    openapiFields.add("conference");
    openapiFields.add("conferenceGames");
    openapiFields.add("division");
    openapiFields.add("expectedWins");
    openapiFields.add("homeGames");
    openapiFields.add("team");
    openapiFields.add("total");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TeamRecord
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TeamRecord.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamRecord is not found in the empty JSON string", TeamRecord.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TeamRecord.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TeamRecord` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `awayGames`
      if (jsonObj.get("awayGames") != null && !jsonObj.get("awayGames").isJsonNull()) {
        TeamRecordAwayGames.validateJsonElement(jsonObj.get("awayGames"));
      }
      if ((jsonObj.get("conference") != null && !jsonObj.get("conference").isJsonNull()) && !jsonObj.get("conference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conference").toString()));
      }
      // validate the optional field `conferenceGames`
      if (jsonObj.get("conferenceGames") != null && !jsonObj.get("conferenceGames").isJsonNull()) {
        TeamRecordAwayGames.validateJsonElement(jsonObj.get("conferenceGames"));
      }
      if ((jsonObj.get("division") != null && !jsonObj.get("division").isJsonNull()) && !jsonObj.get("division").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `division` to be a primitive type in the JSON string but got `%s`", jsonObj.get("division").toString()));
      }
      // validate the optional field `homeGames`
      if (jsonObj.get("homeGames") != null && !jsonObj.get("homeGames").isJsonNull()) {
        TeamRecordAwayGames.validateJsonElement(jsonObj.get("homeGames"));
      }
      if ((jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) && !jsonObj.get("team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team").toString()));
      }
      // validate the optional field `total`
      if (jsonObj.get("total") != null && !jsonObj.get("total").isJsonNull()) {
        TeamRecordAwayGames.validateJsonElement(jsonObj.get("total"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamRecord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamRecord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamRecord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamRecord.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamRecord>() {
           @Override
           public void write(JsonWriter out, TeamRecord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamRecord read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TeamRecord given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TeamRecord
   * @throws IOException if the JSON string is invalid with respect to TeamRecord
   */
  public static TeamRecord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamRecord.class);
  }

  /**
   * Convert an instance of TeamRecord to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

