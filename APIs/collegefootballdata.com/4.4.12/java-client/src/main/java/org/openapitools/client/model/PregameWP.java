/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PregameWP
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PregameWP {
  public static final String SERIALIZED_NAME_AWAY_TEAM = "awayTeam";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM)
  private String awayTeam;

  public static final String SERIALIZED_NAME_GAME_ID = "gameId";
  @SerializedName(SERIALIZED_NAME_GAME_ID)
  private Integer gameId;

  public static final String SERIALIZED_NAME_HOME_TEAM = "homeTeam";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM)
  private String homeTeam;

  public static final String SERIALIZED_NAME_HOME_WIN_PROB = "homeWinProb";
  @SerializedName(SERIALIZED_NAME_HOME_WIN_PROB)
  private BigDecimal homeWinProb;

  public static final String SERIALIZED_NAME_SEASON = "season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private Integer season;

  public static final String SERIALIZED_NAME_SEASON_TYPE = "seasonType";
  @SerializedName(SERIALIZED_NAME_SEASON_TYPE)
  private String seasonType;

  public static final String SERIALIZED_NAME_SPREAD = "spread";
  @SerializedName(SERIALIZED_NAME_SPREAD)
  private BigDecimal spread;

  public static final String SERIALIZED_NAME_WEEK = "week";
  @SerializedName(SERIALIZED_NAME_WEEK)
  private Integer week;

  public PregameWP() {
  }

  public PregameWP awayTeam(String awayTeam) {
    this.awayTeam = awayTeam;
    return this;
  }

  /**
   * Get awayTeam
   * @return awayTeam
   */
  @javax.annotation.Nullable
  public String getAwayTeam() {
    return awayTeam;
  }

  public void setAwayTeam(String awayTeam) {
    this.awayTeam = awayTeam;
  }


  public PregameWP gameId(Integer gameId) {
    this.gameId = gameId;
    return this;
  }

  /**
   * Get gameId
   * @return gameId
   */
  @javax.annotation.Nullable
  public Integer getGameId() {
    return gameId;
  }

  public void setGameId(Integer gameId) {
    this.gameId = gameId;
  }


  public PregameWP homeTeam(String homeTeam) {
    this.homeTeam = homeTeam;
    return this;
  }

  /**
   * Get homeTeam
   * @return homeTeam
   */
  @javax.annotation.Nullable
  public String getHomeTeam() {
    return homeTeam;
  }

  public void setHomeTeam(String homeTeam) {
    this.homeTeam = homeTeam;
  }


  public PregameWP homeWinProb(BigDecimal homeWinProb) {
    this.homeWinProb = homeWinProb;
    return this;
  }

  /**
   * Get homeWinProb
   * @return homeWinProb
   */
  @javax.annotation.Nullable
  public BigDecimal getHomeWinProb() {
    return homeWinProb;
  }

  public void setHomeWinProb(BigDecimal homeWinProb) {
    this.homeWinProb = homeWinProb;
  }


  public PregameWP season(Integer season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public Integer getSeason() {
    return season;
  }

  public void setSeason(Integer season) {
    this.season = season;
  }


  public PregameWP seasonType(String seasonType) {
    this.seasonType = seasonType;
    return this;
  }

  /**
   * Get seasonType
   * @return seasonType
   */
  @javax.annotation.Nullable
  public String getSeasonType() {
    return seasonType;
  }

  public void setSeasonType(String seasonType) {
    this.seasonType = seasonType;
  }


  public PregameWP spread(BigDecimal spread) {
    this.spread = spread;
    return this;
  }

  /**
   * Get spread
   * @return spread
   */
  @javax.annotation.Nullable
  public BigDecimal getSpread() {
    return spread;
  }

  public void setSpread(BigDecimal spread) {
    this.spread = spread;
  }


  public PregameWP week(Integer week) {
    this.week = week;
    return this;
  }

  /**
   * Get week
   * @return week
   */
  @javax.annotation.Nullable
  public Integer getWeek() {
    return week;
  }

  public void setWeek(Integer week) {
    this.week = week;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PregameWP pregameWP = (PregameWP) o;
    return Objects.equals(this.awayTeam, pregameWP.awayTeam) &&
        Objects.equals(this.gameId, pregameWP.gameId) &&
        Objects.equals(this.homeTeam, pregameWP.homeTeam) &&
        Objects.equals(this.homeWinProb, pregameWP.homeWinProb) &&
        Objects.equals(this.season, pregameWP.season) &&
        Objects.equals(this.seasonType, pregameWP.seasonType) &&
        Objects.equals(this.spread, pregameWP.spread) &&
        Objects.equals(this.week, pregameWP.week);
  }

  @Override
  public int hashCode() {
    return Objects.hash(awayTeam, gameId, homeTeam, homeWinProb, season, seasonType, spread, week);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PregameWP {\n");
    sb.append("    awayTeam: ").append(toIndentedString(awayTeam)).append("\n");
    sb.append("    gameId: ").append(toIndentedString(gameId)).append("\n");
    sb.append("    homeTeam: ").append(toIndentedString(homeTeam)).append("\n");
    sb.append("    homeWinProb: ").append(toIndentedString(homeWinProb)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    seasonType: ").append(toIndentedString(seasonType)).append("\n");
    sb.append("    spread: ").append(toIndentedString(spread)).append("\n");
    sb.append("    week: ").append(toIndentedString(week)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("awayTeam");
    openapiFields.add("gameId");
    openapiFields.add("homeTeam");
    openapiFields.add("homeWinProb");
    openapiFields.add("season");
    openapiFields.add("seasonType");
    openapiFields.add("spread");
    openapiFields.add("week");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PregameWP
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PregameWP.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PregameWP is not found in the empty JSON string", PregameWP.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PregameWP.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PregameWP` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("awayTeam") != null && !jsonObj.get("awayTeam").isJsonNull()) && !jsonObj.get("awayTeam").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `awayTeam` to be a primitive type in the JSON string but got `%s`", jsonObj.get("awayTeam").toString()));
      }
      if ((jsonObj.get("homeTeam") != null && !jsonObj.get("homeTeam").isJsonNull()) && !jsonObj.get("homeTeam").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homeTeam` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homeTeam").toString()));
      }
      if ((jsonObj.get("seasonType") != null && !jsonObj.get("seasonType").isJsonNull()) && !jsonObj.get("seasonType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seasonType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seasonType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PregameWP.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PregameWP' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PregameWP> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PregameWP.class));

       return (TypeAdapter<T>) new TypeAdapter<PregameWP>() {
           @Override
           public void write(JsonWriter out, PregameWP value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PregameWP read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PregameWP given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PregameWP
   * @throws IOException if the JSON string is invalid with respect to PregameWP
   */
  public static PregameWP fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PregameWP.class);
  }

  /**
   * Convert an instance of PregameWP to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

