/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReturningProduction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReturningProduction {
  public static final String SERIALIZED_NAME_CONFERENCE = "conference";
  @SerializedName(SERIALIZED_NAME_CONFERENCE)
  private String conference;

  public static final String SERIALIZED_NAME_PASSING_USAGE = "passingUsage";
  @SerializedName(SERIALIZED_NAME_PASSING_USAGE)
  private BigDecimal passingUsage;

  public static final String SERIALIZED_NAME_PERCENT_P_P_A = "percentPPA";
  @SerializedName(SERIALIZED_NAME_PERCENT_P_P_A)
  private BigDecimal percentPPA;

  public static final String SERIALIZED_NAME_PERCENT_PASSING_P_P_A = "percentPassingPPA";
  @SerializedName(SERIALIZED_NAME_PERCENT_PASSING_P_P_A)
  private BigDecimal percentPassingPPA;

  public static final String SERIALIZED_NAME_PERCENT_RECEIVING_P_P_A = "percentReceivingPPA";
  @SerializedName(SERIALIZED_NAME_PERCENT_RECEIVING_P_P_A)
  private BigDecimal percentReceivingPPA;

  public static final String SERIALIZED_NAME_PERCENT_RUSHING_P_P_A = "percentRushingPPA";
  @SerializedName(SERIALIZED_NAME_PERCENT_RUSHING_P_P_A)
  private BigDecimal percentRushingPPA;

  public static final String SERIALIZED_NAME_RECEIVING_USAGE = "receivingUsage";
  @SerializedName(SERIALIZED_NAME_RECEIVING_USAGE)
  private BigDecimal receivingUsage;

  public static final String SERIALIZED_NAME_RUSHING_USAGE = "rushingUsage";
  @SerializedName(SERIALIZED_NAME_RUSHING_USAGE)
  private BigDecimal rushingUsage;

  public static final String SERIALIZED_NAME_SEASON = "season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private Integer season;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_TOTAL_P_P_A = "totalPPA";
  @SerializedName(SERIALIZED_NAME_TOTAL_P_P_A)
  private BigDecimal totalPPA;

  public static final String SERIALIZED_NAME_TOTAL_PASSING_P_P_A = "totalPassingPPA";
  @SerializedName(SERIALIZED_NAME_TOTAL_PASSING_P_P_A)
  private BigDecimal totalPassingPPA;

  public static final String SERIALIZED_NAME_TOTAL_RECEIVING_P_P_A = "totalReceivingPPA";
  @SerializedName(SERIALIZED_NAME_TOTAL_RECEIVING_P_P_A)
  private BigDecimal totalReceivingPPA;

  public static final String SERIALIZED_NAME_TOTAL_RUSHING_P_P_A = "totalRushingPPA";
  @SerializedName(SERIALIZED_NAME_TOTAL_RUSHING_P_P_A)
  private BigDecimal totalRushingPPA;

  public static final String SERIALIZED_NAME_USAGE = "usage";
  @SerializedName(SERIALIZED_NAME_USAGE)
  private BigDecimal usage;

  public ReturningProduction() {
  }

  public ReturningProduction conference(String conference) {
    this.conference = conference;
    return this;
  }

  /**
   * Get conference
   * @return conference
   */
  @javax.annotation.Nullable
  public String getConference() {
    return conference;
  }

  public void setConference(String conference) {
    this.conference = conference;
  }


  public ReturningProduction passingUsage(BigDecimal passingUsage) {
    this.passingUsage = passingUsage;
    return this;
  }

  /**
   * Get passingUsage
   * @return passingUsage
   */
  @javax.annotation.Nullable
  public BigDecimal getPassingUsage() {
    return passingUsage;
  }

  public void setPassingUsage(BigDecimal passingUsage) {
    this.passingUsage = passingUsage;
  }


  public ReturningProduction percentPPA(BigDecimal percentPPA) {
    this.percentPPA = percentPPA;
    return this;
  }

  /**
   * Get percentPPA
   * @return percentPPA
   */
  @javax.annotation.Nullable
  public BigDecimal getPercentPPA() {
    return percentPPA;
  }

  public void setPercentPPA(BigDecimal percentPPA) {
    this.percentPPA = percentPPA;
  }


  public ReturningProduction percentPassingPPA(BigDecimal percentPassingPPA) {
    this.percentPassingPPA = percentPassingPPA;
    return this;
  }

  /**
   * Get percentPassingPPA
   * @return percentPassingPPA
   */
  @javax.annotation.Nullable
  public BigDecimal getPercentPassingPPA() {
    return percentPassingPPA;
  }

  public void setPercentPassingPPA(BigDecimal percentPassingPPA) {
    this.percentPassingPPA = percentPassingPPA;
  }


  public ReturningProduction percentReceivingPPA(BigDecimal percentReceivingPPA) {
    this.percentReceivingPPA = percentReceivingPPA;
    return this;
  }

  /**
   * Get percentReceivingPPA
   * @return percentReceivingPPA
   */
  @javax.annotation.Nullable
  public BigDecimal getPercentReceivingPPA() {
    return percentReceivingPPA;
  }

  public void setPercentReceivingPPA(BigDecimal percentReceivingPPA) {
    this.percentReceivingPPA = percentReceivingPPA;
  }


  public ReturningProduction percentRushingPPA(BigDecimal percentRushingPPA) {
    this.percentRushingPPA = percentRushingPPA;
    return this;
  }

  /**
   * Get percentRushingPPA
   * @return percentRushingPPA
   */
  @javax.annotation.Nullable
  public BigDecimal getPercentRushingPPA() {
    return percentRushingPPA;
  }

  public void setPercentRushingPPA(BigDecimal percentRushingPPA) {
    this.percentRushingPPA = percentRushingPPA;
  }


  public ReturningProduction receivingUsage(BigDecimal receivingUsage) {
    this.receivingUsage = receivingUsage;
    return this;
  }

  /**
   * Get receivingUsage
   * @return receivingUsage
   */
  @javax.annotation.Nullable
  public BigDecimal getReceivingUsage() {
    return receivingUsage;
  }

  public void setReceivingUsage(BigDecimal receivingUsage) {
    this.receivingUsage = receivingUsage;
  }


  public ReturningProduction rushingUsage(BigDecimal rushingUsage) {
    this.rushingUsage = rushingUsage;
    return this;
  }

  /**
   * Get rushingUsage
   * @return rushingUsage
   */
  @javax.annotation.Nullable
  public BigDecimal getRushingUsage() {
    return rushingUsage;
  }

  public void setRushingUsage(BigDecimal rushingUsage) {
    this.rushingUsage = rushingUsage;
  }


  public ReturningProduction season(Integer season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public Integer getSeason() {
    return season;
  }

  public void setSeason(Integer season) {
    this.season = season;
  }


  public ReturningProduction team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public ReturningProduction totalPPA(BigDecimal totalPPA) {
    this.totalPPA = totalPPA;
    return this;
  }

  /**
   * Get totalPPA
   * @return totalPPA
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalPPA() {
    return totalPPA;
  }

  public void setTotalPPA(BigDecimal totalPPA) {
    this.totalPPA = totalPPA;
  }


  public ReturningProduction totalPassingPPA(BigDecimal totalPassingPPA) {
    this.totalPassingPPA = totalPassingPPA;
    return this;
  }

  /**
   * Get totalPassingPPA
   * @return totalPassingPPA
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalPassingPPA() {
    return totalPassingPPA;
  }

  public void setTotalPassingPPA(BigDecimal totalPassingPPA) {
    this.totalPassingPPA = totalPassingPPA;
  }


  public ReturningProduction totalReceivingPPA(BigDecimal totalReceivingPPA) {
    this.totalReceivingPPA = totalReceivingPPA;
    return this;
  }

  /**
   * Get totalReceivingPPA
   * @return totalReceivingPPA
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalReceivingPPA() {
    return totalReceivingPPA;
  }

  public void setTotalReceivingPPA(BigDecimal totalReceivingPPA) {
    this.totalReceivingPPA = totalReceivingPPA;
  }


  public ReturningProduction totalRushingPPA(BigDecimal totalRushingPPA) {
    this.totalRushingPPA = totalRushingPPA;
    return this;
  }

  /**
   * Get totalRushingPPA
   * @return totalRushingPPA
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalRushingPPA() {
    return totalRushingPPA;
  }

  public void setTotalRushingPPA(BigDecimal totalRushingPPA) {
    this.totalRushingPPA = totalRushingPPA;
  }


  public ReturningProduction usage(BigDecimal usage) {
    this.usage = usage;
    return this;
  }

  /**
   * Get usage
   * @return usage
   */
  @javax.annotation.Nullable
  public BigDecimal getUsage() {
    return usage;
  }

  public void setUsage(BigDecimal usage) {
    this.usage = usage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReturningProduction returningProduction = (ReturningProduction) o;
    return Objects.equals(this.conference, returningProduction.conference) &&
        Objects.equals(this.passingUsage, returningProduction.passingUsage) &&
        Objects.equals(this.percentPPA, returningProduction.percentPPA) &&
        Objects.equals(this.percentPassingPPA, returningProduction.percentPassingPPA) &&
        Objects.equals(this.percentReceivingPPA, returningProduction.percentReceivingPPA) &&
        Objects.equals(this.percentRushingPPA, returningProduction.percentRushingPPA) &&
        Objects.equals(this.receivingUsage, returningProduction.receivingUsage) &&
        Objects.equals(this.rushingUsage, returningProduction.rushingUsage) &&
        Objects.equals(this.season, returningProduction.season) &&
        Objects.equals(this.team, returningProduction.team) &&
        Objects.equals(this.totalPPA, returningProduction.totalPPA) &&
        Objects.equals(this.totalPassingPPA, returningProduction.totalPassingPPA) &&
        Objects.equals(this.totalReceivingPPA, returningProduction.totalReceivingPPA) &&
        Objects.equals(this.totalRushingPPA, returningProduction.totalRushingPPA) &&
        Objects.equals(this.usage, returningProduction.usage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conference, passingUsage, percentPPA, percentPassingPPA, percentReceivingPPA, percentRushingPPA, receivingUsage, rushingUsage, season, team, totalPPA, totalPassingPPA, totalReceivingPPA, totalRushingPPA, usage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReturningProduction {\n");
    sb.append("    conference: ").append(toIndentedString(conference)).append("\n");
    sb.append("    passingUsage: ").append(toIndentedString(passingUsage)).append("\n");
    sb.append("    percentPPA: ").append(toIndentedString(percentPPA)).append("\n");
    sb.append("    percentPassingPPA: ").append(toIndentedString(percentPassingPPA)).append("\n");
    sb.append("    percentReceivingPPA: ").append(toIndentedString(percentReceivingPPA)).append("\n");
    sb.append("    percentRushingPPA: ").append(toIndentedString(percentRushingPPA)).append("\n");
    sb.append("    receivingUsage: ").append(toIndentedString(receivingUsage)).append("\n");
    sb.append("    rushingUsage: ").append(toIndentedString(rushingUsage)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    totalPPA: ").append(toIndentedString(totalPPA)).append("\n");
    sb.append("    totalPassingPPA: ").append(toIndentedString(totalPassingPPA)).append("\n");
    sb.append("    totalReceivingPPA: ").append(toIndentedString(totalReceivingPPA)).append("\n");
    sb.append("    totalRushingPPA: ").append(toIndentedString(totalRushingPPA)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conference");
    openapiFields.add("passingUsage");
    openapiFields.add("percentPPA");
    openapiFields.add("percentPassingPPA");
    openapiFields.add("percentReceivingPPA");
    openapiFields.add("percentRushingPPA");
    openapiFields.add("receivingUsage");
    openapiFields.add("rushingUsage");
    openapiFields.add("season");
    openapiFields.add("team");
    openapiFields.add("totalPPA");
    openapiFields.add("totalPassingPPA");
    openapiFields.add("totalReceivingPPA");
    openapiFields.add("totalRushingPPA");
    openapiFields.add("usage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReturningProduction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReturningProduction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReturningProduction is not found in the empty JSON string", ReturningProduction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReturningProduction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReturningProduction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("conference") != null && !jsonObj.get("conference").isJsonNull()) && !jsonObj.get("conference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conference").toString()));
      }
      if ((jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) && !jsonObj.get("team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReturningProduction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReturningProduction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReturningProduction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReturningProduction.class));

       return (TypeAdapter<T>) new TypeAdapter<ReturningProduction>() {
           @Override
           public void write(JsonWriter out, ReturningProduction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReturningProduction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReturningProduction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReturningProduction
   * @throws IOException if the JSON string is invalid with respect to ReturningProduction
   */
  public static ReturningProduction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReturningProduction.class);
  }

  /**
   * Convert an instance of ReturningProduction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

