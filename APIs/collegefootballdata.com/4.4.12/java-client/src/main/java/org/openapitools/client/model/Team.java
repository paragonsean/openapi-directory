/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TeamLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Team
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Team {
  public static final String SERIALIZED_NAME_ABBREVIATION = "abbreviation";
  @SerializedName(SERIALIZED_NAME_ABBREVIATION)
  private String abbreviation;

  public static final String SERIALIZED_NAME_ALT_COLOR = "alt_color";
  @SerializedName(SERIALIZED_NAME_ALT_COLOR)
  private String altColor;

  public static final String SERIALIZED_NAME_ALT_NAME1 = "alt_name_1";
  @SerializedName(SERIALIZED_NAME_ALT_NAME1)
  private String altName1;

  public static final String SERIALIZED_NAME_ALT_NAME2 = "alt_name_2";
  @SerializedName(SERIALIZED_NAME_ALT_NAME2)
  private String altName2;

  public static final String SERIALIZED_NAME_ALT_NAME3 = "alt_name_3";
  @SerializedName(SERIALIZED_NAME_ALT_NAME3)
  private String altName3;

  public static final String SERIALIZED_NAME_CLASSIFICATION = "classification";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION)
  private String classification;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_CONFERENCE = "conference";
  @SerializedName(SERIALIZED_NAME_CONFERENCE)
  private String conference;

  public static final String SERIALIZED_NAME_DIVISION = "division";
  @SerializedName(SERIALIZED_NAME_DIVISION)
  private String division;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private TeamLocation location;

  public static final String SERIALIZED_NAME_LOGOS = "logos";
  @SerializedName(SERIALIZED_NAME_LOGOS)
  private List<String> logos = new ArrayList<>();

  public static final String SERIALIZED_NAME_MASCOT = "mascot";
  @SerializedName(SERIALIZED_NAME_MASCOT)
  private String mascot;

  public static final String SERIALIZED_NAME_SCHOOL = "school";
  @SerializedName(SERIALIZED_NAME_SCHOOL)
  private String school;

  public static final String SERIALIZED_NAME_TWITTER = "twitter";
  @SerializedName(SERIALIZED_NAME_TWITTER)
  private String twitter;

  public Team() {
  }

  public Team abbreviation(String abbreviation) {
    this.abbreviation = abbreviation;
    return this;
  }

  /**
   * Get abbreviation
   * @return abbreviation
   */
  @javax.annotation.Nullable
  public String getAbbreviation() {
    return abbreviation;
  }

  public void setAbbreviation(String abbreviation) {
    this.abbreviation = abbreviation;
  }


  public Team altColor(String altColor) {
    this.altColor = altColor;
    return this;
  }

  /**
   * Get altColor
   * @return altColor
   */
  @javax.annotation.Nullable
  public String getAltColor() {
    return altColor;
  }

  public void setAltColor(String altColor) {
    this.altColor = altColor;
  }


  public Team altName1(String altName1) {
    this.altName1 = altName1;
    return this;
  }

  /**
   * Get altName1
   * @return altName1
   */
  @javax.annotation.Nullable
  public String getAltName1() {
    return altName1;
  }

  public void setAltName1(String altName1) {
    this.altName1 = altName1;
  }


  public Team altName2(String altName2) {
    this.altName2 = altName2;
    return this;
  }

  /**
   * Get altName2
   * @return altName2
   */
  @javax.annotation.Nullable
  public String getAltName2() {
    return altName2;
  }

  public void setAltName2(String altName2) {
    this.altName2 = altName2;
  }


  public Team altName3(String altName3) {
    this.altName3 = altName3;
    return this;
  }

  /**
   * Get altName3
   * @return altName3
   */
  @javax.annotation.Nullable
  public String getAltName3() {
    return altName3;
  }

  public void setAltName3(String altName3) {
    this.altName3 = altName3;
  }


  public Team classification(String classification) {
    this.classification = classification;
    return this;
  }

  /**
   * Get classification
   * @return classification
   */
  @javax.annotation.Nullable
  public String getClassification() {
    return classification;
  }

  public void setClassification(String classification) {
    this.classification = classification;
  }


  public Team color(String color) {
    this.color = color;
    return this;
  }

  /**
   * Get color
   * @return color
   */
  @javax.annotation.Nullable
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }


  public Team conference(String conference) {
    this.conference = conference;
    return this;
  }

  /**
   * Get conference
   * @return conference
   */
  @javax.annotation.Nullable
  public String getConference() {
    return conference;
  }

  public void setConference(String conference) {
    this.conference = conference;
  }


  public Team division(String division) {
    this.division = division;
    return this;
  }

  /**
   * Get division
   * @return division
   */
  @javax.annotation.Nullable
  public String getDivision() {
    return division;
  }

  public void setDivision(String division) {
    this.division = division;
  }


  public Team id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Team location(TeamLocation location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public TeamLocation getLocation() {
    return location;
  }

  public void setLocation(TeamLocation location) {
    this.location = location;
  }


  public Team logos(List<String> logos) {
    this.logos = logos;
    return this;
  }

  public Team addLogosItem(String logosItem) {
    if (this.logos == null) {
      this.logos = new ArrayList<>();
    }
    this.logos.add(logosItem);
    return this;
  }

  /**
   * Get logos
   * @return logos
   */
  @javax.annotation.Nullable
  public List<String> getLogos() {
    return logos;
  }

  public void setLogos(List<String> logos) {
    this.logos = logos;
  }


  public Team mascot(String mascot) {
    this.mascot = mascot;
    return this;
  }

  /**
   * Get mascot
   * @return mascot
   */
  @javax.annotation.Nullable
  public String getMascot() {
    return mascot;
  }

  public void setMascot(String mascot) {
    this.mascot = mascot;
  }


  public Team school(String school) {
    this.school = school;
    return this;
  }

  /**
   * Get school
   * @return school
   */
  @javax.annotation.Nullable
  public String getSchool() {
    return school;
  }

  public void setSchool(String school) {
    this.school = school;
  }


  public Team twitter(String twitter) {
    this.twitter = twitter;
    return this;
  }

  /**
   * Get twitter
   * @return twitter
   */
  @javax.annotation.Nullable
  public String getTwitter() {
    return twitter;
  }

  public void setTwitter(String twitter) {
    this.twitter = twitter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Team team = (Team) o;
    return Objects.equals(this.abbreviation, team.abbreviation) &&
        Objects.equals(this.altColor, team.altColor) &&
        Objects.equals(this.altName1, team.altName1) &&
        Objects.equals(this.altName2, team.altName2) &&
        Objects.equals(this.altName3, team.altName3) &&
        Objects.equals(this.classification, team.classification) &&
        Objects.equals(this.color, team.color) &&
        Objects.equals(this.conference, team.conference) &&
        Objects.equals(this.division, team.division) &&
        Objects.equals(this.id, team.id) &&
        Objects.equals(this.location, team.location) &&
        Objects.equals(this.logos, team.logos) &&
        Objects.equals(this.mascot, team.mascot) &&
        Objects.equals(this.school, team.school) &&
        Objects.equals(this.twitter, team.twitter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abbreviation, altColor, altName1, altName2, altName3, classification, color, conference, division, id, location, logos, mascot, school, twitter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Team {\n");
    sb.append("    abbreviation: ").append(toIndentedString(abbreviation)).append("\n");
    sb.append("    altColor: ").append(toIndentedString(altColor)).append("\n");
    sb.append("    altName1: ").append(toIndentedString(altName1)).append("\n");
    sb.append("    altName2: ").append(toIndentedString(altName2)).append("\n");
    sb.append("    altName3: ").append(toIndentedString(altName3)).append("\n");
    sb.append("    classification: ").append(toIndentedString(classification)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    conference: ").append(toIndentedString(conference)).append("\n");
    sb.append("    division: ").append(toIndentedString(division)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    logos: ").append(toIndentedString(logos)).append("\n");
    sb.append("    mascot: ").append(toIndentedString(mascot)).append("\n");
    sb.append("    school: ").append(toIndentedString(school)).append("\n");
    sb.append("    twitter: ").append(toIndentedString(twitter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("abbreviation");
    openapiFields.add("alt_color");
    openapiFields.add("alt_name_1");
    openapiFields.add("alt_name_2");
    openapiFields.add("alt_name_3");
    openapiFields.add("classification");
    openapiFields.add("color");
    openapiFields.add("conference");
    openapiFields.add("division");
    openapiFields.add("id");
    openapiFields.add("location");
    openapiFields.add("logos");
    openapiFields.add("mascot");
    openapiFields.add("school");
    openapiFields.add("twitter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Team
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Team.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Team is not found in the empty JSON string", Team.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Team.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Team` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("abbreviation") != null && !jsonObj.get("abbreviation").isJsonNull()) && !jsonObj.get("abbreviation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `abbreviation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("abbreviation").toString()));
      }
      if ((jsonObj.get("alt_color") != null && !jsonObj.get("alt_color").isJsonNull()) && !jsonObj.get("alt_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alt_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alt_color").toString()));
      }
      if ((jsonObj.get("alt_name_1") != null && !jsonObj.get("alt_name_1").isJsonNull()) && !jsonObj.get("alt_name_1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alt_name_1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alt_name_1").toString()));
      }
      if ((jsonObj.get("alt_name_2") != null && !jsonObj.get("alt_name_2").isJsonNull()) && !jsonObj.get("alt_name_2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alt_name_2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alt_name_2").toString()));
      }
      if ((jsonObj.get("alt_name_3") != null && !jsonObj.get("alt_name_3").isJsonNull()) && !jsonObj.get("alt_name_3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alt_name_3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alt_name_3").toString()));
      }
      if ((jsonObj.get("classification") != null && !jsonObj.get("classification").isJsonNull()) && !jsonObj.get("classification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `classification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("classification").toString()));
      }
      if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      if ((jsonObj.get("conference") != null && !jsonObj.get("conference").isJsonNull()) && !jsonObj.get("conference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conference").toString()));
      }
      if ((jsonObj.get("division") != null && !jsonObj.get("division").isJsonNull()) && !jsonObj.get("division").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `division` to be a primitive type in the JSON string but got `%s`", jsonObj.get("division").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        TeamLocation.validateJsonElement(jsonObj.get("location"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("logos") != null && !jsonObj.get("logos").isJsonNull() && !jsonObj.get("logos").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `logos` to be an array in the JSON string but got `%s`", jsonObj.get("logos").toString()));
      }
      if ((jsonObj.get("mascot") != null && !jsonObj.get("mascot").isJsonNull()) && !jsonObj.get("mascot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mascot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mascot").toString()));
      }
      if ((jsonObj.get("school") != null && !jsonObj.get("school").isJsonNull()) && !jsonObj.get("school").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `school` to be a primitive type in the JSON string but got `%s`", jsonObj.get("school").toString()));
      }
      if ((jsonObj.get("twitter") != null && !jsonObj.get("twitter").isJsonNull()) && !jsonObj.get("twitter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `twitter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("twitter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Team.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Team' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Team> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Team.class));

       return (TypeAdapter<T>) new TypeAdapter<Team>() {
           @Override
           public void write(JsonWriter out, Team value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Team read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Team given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Team
   * @throws IOException if the JSON string is invalid with respect to Team
   */
  public static Team fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Team.class);
  }

  /**
   * Convert an instance of Team to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

