/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.AdvancedGameStatDefensePassingDowns;
import org.openapitools.client.model.AdvancedGameStatDefensePassingPlays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AdvancedGameStatDefense
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdvancedGameStatDefense {
  public static final String SERIALIZED_NAME_DRIVES = "drives";
  @SerializedName(SERIALIZED_NAME_DRIVES)
  private Integer drives;

  public static final String SERIALIZED_NAME_EXPLOSIVENESS = "explosiveness";
  @SerializedName(SERIALIZED_NAME_EXPLOSIVENESS)
  private BigDecimal explosiveness;

  public static final String SERIALIZED_NAME_LINE_YARDS = "lineYards";
  @SerializedName(SERIALIZED_NAME_LINE_YARDS)
  private BigDecimal lineYards;

  public static final String SERIALIZED_NAME_LINE_YARDS_TOTAL = "lineYardsTotal";
  @SerializedName(SERIALIZED_NAME_LINE_YARDS_TOTAL)
  private BigDecimal lineYardsTotal;

  public static final String SERIALIZED_NAME_OPEN_FIELD_YARDS = "openFieldYards";
  @SerializedName(SERIALIZED_NAME_OPEN_FIELD_YARDS)
  private BigDecimal openFieldYards;

  public static final String SERIALIZED_NAME_OPEN_FIELD_YARDS_TOTAL = "openFieldYardsTotal";
  @SerializedName(SERIALIZED_NAME_OPEN_FIELD_YARDS_TOTAL)
  private Integer openFieldYardsTotal;

  public static final String SERIALIZED_NAME_PASSING_DOWNS = "passingDowns";
  @SerializedName(SERIALIZED_NAME_PASSING_DOWNS)
  private AdvancedGameStatDefensePassingDowns passingDowns;

  public static final String SERIALIZED_NAME_PASSING_PLAYS = "passingPlays";
  @SerializedName(SERIALIZED_NAME_PASSING_PLAYS)
  private AdvancedGameStatDefensePassingPlays passingPlays;

  public static final String SERIALIZED_NAME_PLAYS = "plays";
  @SerializedName(SERIALIZED_NAME_PLAYS)
  private Integer plays;

  public static final String SERIALIZED_NAME_POWER_SUCCESS = "powerSuccess";
  @SerializedName(SERIALIZED_NAME_POWER_SUCCESS)
  private BigDecimal powerSuccess;

  public static final String SERIALIZED_NAME_PPA = "ppa";
  @SerializedName(SERIALIZED_NAME_PPA)
  private BigDecimal ppa;

  public static final String SERIALIZED_NAME_RUSHING_PLAYS = "rushingPlays";
  @SerializedName(SERIALIZED_NAME_RUSHING_PLAYS)
  private AdvancedGameStatDefensePassingPlays rushingPlays;

  public static final String SERIALIZED_NAME_SECOND_LEVEL_YARDS = "secondLevelYards";
  @SerializedName(SERIALIZED_NAME_SECOND_LEVEL_YARDS)
  private BigDecimal secondLevelYards;

  public static final String SERIALIZED_NAME_SECOND_LEVEL_YARDS_TOTAL = "secondLevelYardsTotal";
  @SerializedName(SERIALIZED_NAME_SECOND_LEVEL_YARDS_TOTAL)
  private Integer secondLevelYardsTotal;

  public static final String SERIALIZED_NAME_STANDARD_DOWNS = "standardDowns";
  @SerializedName(SERIALIZED_NAME_STANDARD_DOWNS)
  private AdvancedGameStatDefensePassingDowns standardDowns;

  public static final String SERIALIZED_NAME_STUFF_RATE = "stuffRate";
  @SerializedName(SERIALIZED_NAME_STUFF_RATE)
  private BigDecimal stuffRate;

  public static final String SERIALIZED_NAME_SUCCESS_RATE = "successRate";
  @SerializedName(SERIALIZED_NAME_SUCCESS_RATE)
  private BigDecimal successRate;

  public static final String SERIALIZED_NAME_TOTAL_P_P_A = "totalPPA";
  @SerializedName(SERIALIZED_NAME_TOTAL_P_P_A)
  private BigDecimal totalPPA;

  public AdvancedGameStatDefense() {
  }

  public AdvancedGameStatDefense drives(Integer drives) {
    this.drives = drives;
    return this;
  }

  /**
   * Get drives
   * @return drives
   */
  @javax.annotation.Nullable
  public Integer getDrives() {
    return drives;
  }

  public void setDrives(Integer drives) {
    this.drives = drives;
  }


  public AdvancedGameStatDefense explosiveness(BigDecimal explosiveness) {
    this.explosiveness = explosiveness;
    return this;
  }

  /**
   * Get explosiveness
   * @return explosiveness
   */
  @javax.annotation.Nullable
  public BigDecimal getExplosiveness() {
    return explosiveness;
  }

  public void setExplosiveness(BigDecimal explosiveness) {
    this.explosiveness = explosiveness;
  }


  public AdvancedGameStatDefense lineYards(BigDecimal lineYards) {
    this.lineYards = lineYards;
    return this;
  }

  /**
   * Get lineYards
   * @return lineYards
   */
  @javax.annotation.Nullable
  public BigDecimal getLineYards() {
    return lineYards;
  }

  public void setLineYards(BigDecimal lineYards) {
    this.lineYards = lineYards;
  }


  public AdvancedGameStatDefense lineYardsTotal(BigDecimal lineYardsTotal) {
    this.lineYardsTotal = lineYardsTotal;
    return this;
  }

  /**
   * Get lineYardsTotal
   * @return lineYardsTotal
   */
  @javax.annotation.Nullable
  public BigDecimal getLineYardsTotal() {
    return lineYardsTotal;
  }

  public void setLineYardsTotal(BigDecimal lineYardsTotal) {
    this.lineYardsTotal = lineYardsTotal;
  }


  public AdvancedGameStatDefense openFieldYards(BigDecimal openFieldYards) {
    this.openFieldYards = openFieldYards;
    return this;
  }

  /**
   * Get openFieldYards
   * @return openFieldYards
   */
  @javax.annotation.Nullable
  public BigDecimal getOpenFieldYards() {
    return openFieldYards;
  }

  public void setOpenFieldYards(BigDecimal openFieldYards) {
    this.openFieldYards = openFieldYards;
  }


  public AdvancedGameStatDefense openFieldYardsTotal(Integer openFieldYardsTotal) {
    this.openFieldYardsTotal = openFieldYardsTotal;
    return this;
  }

  /**
   * Get openFieldYardsTotal
   * @return openFieldYardsTotal
   */
  @javax.annotation.Nullable
  public Integer getOpenFieldYardsTotal() {
    return openFieldYardsTotal;
  }

  public void setOpenFieldYardsTotal(Integer openFieldYardsTotal) {
    this.openFieldYardsTotal = openFieldYardsTotal;
  }


  public AdvancedGameStatDefense passingDowns(AdvancedGameStatDefensePassingDowns passingDowns) {
    this.passingDowns = passingDowns;
    return this;
  }

  /**
   * Get passingDowns
   * @return passingDowns
   */
  @javax.annotation.Nullable
  public AdvancedGameStatDefensePassingDowns getPassingDowns() {
    return passingDowns;
  }

  public void setPassingDowns(AdvancedGameStatDefensePassingDowns passingDowns) {
    this.passingDowns = passingDowns;
  }


  public AdvancedGameStatDefense passingPlays(AdvancedGameStatDefensePassingPlays passingPlays) {
    this.passingPlays = passingPlays;
    return this;
  }

  /**
   * Get passingPlays
   * @return passingPlays
   */
  @javax.annotation.Nullable
  public AdvancedGameStatDefensePassingPlays getPassingPlays() {
    return passingPlays;
  }

  public void setPassingPlays(AdvancedGameStatDefensePassingPlays passingPlays) {
    this.passingPlays = passingPlays;
  }


  public AdvancedGameStatDefense plays(Integer plays) {
    this.plays = plays;
    return this;
  }

  /**
   * Get plays
   * @return plays
   */
  @javax.annotation.Nullable
  public Integer getPlays() {
    return plays;
  }

  public void setPlays(Integer plays) {
    this.plays = plays;
  }


  public AdvancedGameStatDefense powerSuccess(BigDecimal powerSuccess) {
    this.powerSuccess = powerSuccess;
    return this;
  }

  /**
   * Get powerSuccess
   * @return powerSuccess
   */
  @javax.annotation.Nullable
  public BigDecimal getPowerSuccess() {
    return powerSuccess;
  }

  public void setPowerSuccess(BigDecimal powerSuccess) {
    this.powerSuccess = powerSuccess;
  }


  public AdvancedGameStatDefense ppa(BigDecimal ppa) {
    this.ppa = ppa;
    return this;
  }

  /**
   * Get ppa
   * @return ppa
   */
  @javax.annotation.Nullable
  public BigDecimal getPpa() {
    return ppa;
  }

  public void setPpa(BigDecimal ppa) {
    this.ppa = ppa;
  }


  public AdvancedGameStatDefense rushingPlays(AdvancedGameStatDefensePassingPlays rushingPlays) {
    this.rushingPlays = rushingPlays;
    return this;
  }

  /**
   * Get rushingPlays
   * @return rushingPlays
   */
  @javax.annotation.Nullable
  public AdvancedGameStatDefensePassingPlays getRushingPlays() {
    return rushingPlays;
  }

  public void setRushingPlays(AdvancedGameStatDefensePassingPlays rushingPlays) {
    this.rushingPlays = rushingPlays;
  }


  public AdvancedGameStatDefense secondLevelYards(BigDecimal secondLevelYards) {
    this.secondLevelYards = secondLevelYards;
    return this;
  }

  /**
   * Get secondLevelYards
   * @return secondLevelYards
   */
  @javax.annotation.Nullable
  public BigDecimal getSecondLevelYards() {
    return secondLevelYards;
  }

  public void setSecondLevelYards(BigDecimal secondLevelYards) {
    this.secondLevelYards = secondLevelYards;
  }


  public AdvancedGameStatDefense secondLevelYardsTotal(Integer secondLevelYardsTotal) {
    this.secondLevelYardsTotal = secondLevelYardsTotal;
    return this;
  }

  /**
   * Get secondLevelYardsTotal
   * @return secondLevelYardsTotal
   */
  @javax.annotation.Nullable
  public Integer getSecondLevelYardsTotal() {
    return secondLevelYardsTotal;
  }

  public void setSecondLevelYardsTotal(Integer secondLevelYardsTotal) {
    this.secondLevelYardsTotal = secondLevelYardsTotal;
  }


  public AdvancedGameStatDefense standardDowns(AdvancedGameStatDefensePassingDowns standardDowns) {
    this.standardDowns = standardDowns;
    return this;
  }

  /**
   * Get standardDowns
   * @return standardDowns
   */
  @javax.annotation.Nullable
  public AdvancedGameStatDefensePassingDowns getStandardDowns() {
    return standardDowns;
  }

  public void setStandardDowns(AdvancedGameStatDefensePassingDowns standardDowns) {
    this.standardDowns = standardDowns;
  }


  public AdvancedGameStatDefense stuffRate(BigDecimal stuffRate) {
    this.stuffRate = stuffRate;
    return this;
  }

  /**
   * Get stuffRate
   * @return stuffRate
   */
  @javax.annotation.Nullable
  public BigDecimal getStuffRate() {
    return stuffRate;
  }

  public void setStuffRate(BigDecimal stuffRate) {
    this.stuffRate = stuffRate;
  }


  public AdvancedGameStatDefense successRate(BigDecimal successRate) {
    this.successRate = successRate;
    return this;
  }

  /**
   * Get successRate
   * @return successRate
   */
  @javax.annotation.Nullable
  public BigDecimal getSuccessRate() {
    return successRate;
  }

  public void setSuccessRate(BigDecimal successRate) {
    this.successRate = successRate;
  }


  public AdvancedGameStatDefense totalPPA(BigDecimal totalPPA) {
    this.totalPPA = totalPPA;
    return this;
  }

  /**
   * Get totalPPA
   * @return totalPPA
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalPPA() {
    return totalPPA;
  }

  public void setTotalPPA(BigDecimal totalPPA) {
    this.totalPPA = totalPPA;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdvancedGameStatDefense advancedGameStatDefense = (AdvancedGameStatDefense) o;
    return Objects.equals(this.drives, advancedGameStatDefense.drives) &&
        Objects.equals(this.explosiveness, advancedGameStatDefense.explosiveness) &&
        Objects.equals(this.lineYards, advancedGameStatDefense.lineYards) &&
        Objects.equals(this.lineYardsTotal, advancedGameStatDefense.lineYardsTotal) &&
        Objects.equals(this.openFieldYards, advancedGameStatDefense.openFieldYards) &&
        Objects.equals(this.openFieldYardsTotal, advancedGameStatDefense.openFieldYardsTotal) &&
        Objects.equals(this.passingDowns, advancedGameStatDefense.passingDowns) &&
        Objects.equals(this.passingPlays, advancedGameStatDefense.passingPlays) &&
        Objects.equals(this.plays, advancedGameStatDefense.plays) &&
        Objects.equals(this.powerSuccess, advancedGameStatDefense.powerSuccess) &&
        Objects.equals(this.ppa, advancedGameStatDefense.ppa) &&
        Objects.equals(this.rushingPlays, advancedGameStatDefense.rushingPlays) &&
        Objects.equals(this.secondLevelYards, advancedGameStatDefense.secondLevelYards) &&
        Objects.equals(this.secondLevelYardsTotal, advancedGameStatDefense.secondLevelYardsTotal) &&
        Objects.equals(this.standardDowns, advancedGameStatDefense.standardDowns) &&
        Objects.equals(this.stuffRate, advancedGameStatDefense.stuffRate) &&
        Objects.equals(this.successRate, advancedGameStatDefense.successRate) &&
        Objects.equals(this.totalPPA, advancedGameStatDefense.totalPPA);
  }

  @Override
  public int hashCode() {
    return Objects.hash(drives, explosiveness, lineYards, lineYardsTotal, openFieldYards, openFieldYardsTotal, passingDowns, passingPlays, plays, powerSuccess, ppa, rushingPlays, secondLevelYards, secondLevelYardsTotal, standardDowns, stuffRate, successRate, totalPPA);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdvancedGameStatDefense {\n");
    sb.append("    drives: ").append(toIndentedString(drives)).append("\n");
    sb.append("    explosiveness: ").append(toIndentedString(explosiveness)).append("\n");
    sb.append("    lineYards: ").append(toIndentedString(lineYards)).append("\n");
    sb.append("    lineYardsTotal: ").append(toIndentedString(lineYardsTotal)).append("\n");
    sb.append("    openFieldYards: ").append(toIndentedString(openFieldYards)).append("\n");
    sb.append("    openFieldYardsTotal: ").append(toIndentedString(openFieldYardsTotal)).append("\n");
    sb.append("    passingDowns: ").append(toIndentedString(passingDowns)).append("\n");
    sb.append("    passingPlays: ").append(toIndentedString(passingPlays)).append("\n");
    sb.append("    plays: ").append(toIndentedString(plays)).append("\n");
    sb.append("    powerSuccess: ").append(toIndentedString(powerSuccess)).append("\n");
    sb.append("    ppa: ").append(toIndentedString(ppa)).append("\n");
    sb.append("    rushingPlays: ").append(toIndentedString(rushingPlays)).append("\n");
    sb.append("    secondLevelYards: ").append(toIndentedString(secondLevelYards)).append("\n");
    sb.append("    secondLevelYardsTotal: ").append(toIndentedString(secondLevelYardsTotal)).append("\n");
    sb.append("    standardDowns: ").append(toIndentedString(standardDowns)).append("\n");
    sb.append("    stuffRate: ").append(toIndentedString(stuffRate)).append("\n");
    sb.append("    successRate: ").append(toIndentedString(successRate)).append("\n");
    sb.append("    totalPPA: ").append(toIndentedString(totalPPA)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("drives");
    openapiFields.add("explosiveness");
    openapiFields.add("lineYards");
    openapiFields.add("lineYardsTotal");
    openapiFields.add("openFieldYards");
    openapiFields.add("openFieldYardsTotal");
    openapiFields.add("passingDowns");
    openapiFields.add("passingPlays");
    openapiFields.add("plays");
    openapiFields.add("powerSuccess");
    openapiFields.add("ppa");
    openapiFields.add("rushingPlays");
    openapiFields.add("secondLevelYards");
    openapiFields.add("secondLevelYardsTotal");
    openapiFields.add("standardDowns");
    openapiFields.add("stuffRate");
    openapiFields.add("successRate");
    openapiFields.add("totalPPA");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdvancedGameStatDefense
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdvancedGameStatDefense.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdvancedGameStatDefense is not found in the empty JSON string", AdvancedGameStatDefense.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdvancedGameStatDefense.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdvancedGameStatDefense` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `passingDowns`
      if (jsonObj.get("passingDowns") != null && !jsonObj.get("passingDowns").isJsonNull()) {
        AdvancedGameStatDefensePassingDowns.validateJsonElement(jsonObj.get("passingDowns"));
      }
      // validate the optional field `passingPlays`
      if (jsonObj.get("passingPlays") != null && !jsonObj.get("passingPlays").isJsonNull()) {
        AdvancedGameStatDefensePassingPlays.validateJsonElement(jsonObj.get("passingPlays"));
      }
      // validate the optional field `rushingPlays`
      if (jsonObj.get("rushingPlays") != null && !jsonObj.get("rushingPlays").isJsonNull()) {
        AdvancedGameStatDefensePassingPlays.validateJsonElement(jsonObj.get("rushingPlays"));
      }
      // validate the optional field `standardDowns`
      if (jsonObj.get("standardDowns") != null && !jsonObj.get("standardDowns").isJsonNull()) {
        AdvancedGameStatDefensePassingDowns.validateJsonElement(jsonObj.get("standardDowns"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdvancedGameStatDefense.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdvancedGameStatDefense' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdvancedGameStatDefense> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdvancedGameStatDefense.class));

       return (TypeAdapter<T>) new TypeAdapter<AdvancedGameStatDefense>() {
           @Override
           public void write(JsonWriter out, AdvancedGameStatDefense value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdvancedGameStatDefense read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdvancedGameStatDefense given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdvancedGameStatDefense
   * @throws IOException if the JSON string is invalid with respect to AdvancedGameStatDefense
   */
  public static AdvancedGameStatDefense fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdvancedGameStatDefense.class);
  }

  /**
   * Convert an instance of AdvancedGameStatDefense to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

