/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BoxScore;
import org.openapitools.client.model.Game;
import org.openapitools.client.model.GameMedia;
import org.openapitools.client.model.GameWeather;
import org.openapitools.client.model.PlayerGame;
import org.openapitools.client.model.ScoreboardGame;
import org.openapitools.client.model.TeamGame;
import org.openapitools.client.model.TeamRecord;
import org.openapitools.client.model.Week;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GamesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GamesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GamesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAdvancedBoxScore
     * @param gameId Game id parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvancedBoxScoreCall(Integer gameId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/game/box/advanced";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gameId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gameId", gameId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdvancedBoxScoreValidateBeforeCall(Integer gameId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling getAdvancedBoxScore(Async)");
        }

        return getAdvancedBoxScoreCall(gameId, _callback);

    }

    /**
     * Advanced box scores
     * Get advanced box score data
     * @param gameId Game id parameters (required)
     * @return BoxScore
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BoxScore getAdvancedBoxScore(Integer gameId) throws ApiException {
        ApiResponse<BoxScore> localVarResp = getAdvancedBoxScoreWithHttpInfo(gameId);
        return localVarResp.getData();
    }

    /**
     * Advanced box scores
     * Get advanced box score data
     * @param gameId Game id parameters (required)
     * @return ApiResponse&lt;BoxScore&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BoxScore> getAdvancedBoxScoreWithHttpInfo(Integer gameId) throws ApiException {
        okhttp3.Call localVarCall = getAdvancedBoxScoreValidateBeforeCall(gameId, null);
        Type localVarReturnType = new TypeToken<BoxScore>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Advanced box scores (asynchronously)
     * Get advanced box score data
     * @param gameId Game id parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvancedBoxScoreAsync(Integer gameId, final ApiCallback<BoxScore> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdvancedBoxScoreValidateBeforeCall(gameId, _callback);
        Type localVarReturnType = new TypeToken<BoxScore>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCalendar
     * @param year Year filter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCalendarCall(Integer year, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calendar";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCalendarValidateBeforeCall(Integer year, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getCalendar(Async)");
        }

        return getCalendarCall(year, _callback);

    }

    /**
     * Season calendar
     * Get calendar of weeks by season
     * @param year Year filter (required)
     * @return List&lt;Week&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<Week> getCalendar(Integer year) throws ApiException {
        ApiResponse<List<Week>> localVarResp = getCalendarWithHttpInfo(year);
        return localVarResp.getData();
    }

    /**
     * Season calendar
     * Get calendar of weeks by season
     * @param year Year filter (required)
     * @return ApiResponse&lt;List&lt;Week&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Week>> getCalendarWithHttpInfo(Integer year) throws ApiException {
        okhttp3.Call localVarCall = getCalendarValidateBeforeCall(year, null);
        Type localVarReturnType = new TypeToken<List<Week>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Season calendar (asynchronously)
     * Get calendar of weeks by season
     * @param year Year filter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCalendarAsync(Integer year, final ApiCallback<List<Week>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCalendarValidateBeforeCall(year, _callback);
        Type localVarReturnType = new TypeToken<List<Week>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGameMedia
     * @param year Year filter (required)
     * @param week Week filter (optional)
     * @param seasonType Season type filter (regular, postseason, or both) (optional)
     * @param team Team filter (optional)
     * @param conference Conference filter (optional)
     * @param mediaType Media type filter (tv, radio, web, ppv, or mobile) (optional)
     * @param classification Division classification filter (fbs/fcs/ii/iii) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGameMediaCall(Integer year, Integer week, String seasonType, String team, String conference, String mediaType, String classification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/media";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (week != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("week", week));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seasonType", seasonType));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (conference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conference", conference));
        }

        if (mediaType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mediaType", mediaType));
        }

        if (classification != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("classification", classification));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGameMediaValidateBeforeCall(Integer year, Integer week, String seasonType, String team, String conference, String mediaType, String classification, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getGameMedia(Async)");
        }

        return getGameMediaCall(year, week, seasonType, team, conference, mediaType, classification, _callback);

    }

    /**
     * Game media information and schedules
     * Game media information (TV, radio, etc)
     * @param year Year filter (required)
     * @param week Week filter (optional)
     * @param seasonType Season type filter (regular, postseason, or both) (optional)
     * @param team Team filter (optional)
     * @param conference Conference filter (optional)
     * @param mediaType Media type filter (tv, radio, web, ppv, or mobile) (optional)
     * @param classification Division classification filter (fbs/fcs/ii/iii) (optional)
     * @return List&lt;GameMedia&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<GameMedia> getGameMedia(Integer year, Integer week, String seasonType, String team, String conference, String mediaType, String classification) throws ApiException {
        ApiResponse<List<GameMedia>> localVarResp = getGameMediaWithHttpInfo(year, week, seasonType, team, conference, mediaType, classification);
        return localVarResp.getData();
    }

    /**
     * Game media information and schedules
     * Game media information (TV, radio, etc)
     * @param year Year filter (required)
     * @param week Week filter (optional)
     * @param seasonType Season type filter (regular, postseason, or both) (optional)
     * @param team Team filter (optional)
     * @param conference Conference filter (optional)
     * @param mediaType Media type filter (tv, radio, web, ppv, or mobile) (optional)
     * @param classification Division classification filter (fbs/fcs/ii/iii) (optional)
     * @return ApiResponse&lt;List&lt;GameMedia&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GameMedia>> getGameMediaWithHttpInfo(Integer year, Integer week, String seasonType, String team, String conference, String mediaType, String classification) throws ApiException {
        okhttp3.Call localVarCall = getGameMediaValidateBeforeCall(year, week, seasonType, team, conference, mediaType, classification, null);
        Type localVarReturnType = new TypeToken<List<GameMedia>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Game media information and schedules (asynchronously)
     * Game media information (TV, radio, etc)
     * @param year Year filter (required)
     * @param week Week filter (optional)
     * @param seasonType Season type filter (regular, postseason, or both) (optional)
     * @param team Team filter (optional)
     * @param conference Conference filter (optional)
     * @param mediaType Media type filter (tv, radio, web, ppv, or mobile) (optional)
     * @param classification Division classification filter (fbs/fcs/ii/iii) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGameMediaAsync(Integer year, Integer week, String seasonType, String team, String conference, String mediaType, String classification, final ApiCallback<List<GameMedia>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGameMediaValidateBeforeCall(year, week, seasonType, team, conference, mediaType, classification, _callback);
        Type localVarReturnType = new TypeToken<List<GameMedia>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGameWeather
     * @param gameId Game id filter (required if no year) (optional)
     * @param year Year filter (required if no game id) (optional)
     * @param week Week filter (optional)
     * @param seasonType Season type filter (regular, postseason, or both) (optional)
     * @param team Team filter (optional)
     * @param conference Conference filter (optional)
     * @param classification Division classification filter (fbs/fcs/ii/iii) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGameWeatherCall(Integer gameId, Integer year, Integer week, String seasonType, String team, String conference, String classification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/weather";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (gameId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gameId", gameId));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (week != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("week", week));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seasonType", seasonType));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (conference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conference", conference));
        }

        if (classification != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("classification", classification));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGameWeatherValidateBeforeCall(Integer gameId, Integer year, Integer week, String seasonType, String team, String conference, String classification, final ApiCallback _callback) throws ApiException {
        return getGameWeatherCall(gameId, year, week, seasonType, team, conference, classification, _callback);

    }

    /**
     * Game weather information (Patreon only)
     * Weather information for the hour of kickoff
     * @param gameId Game id filter (required if no year) (optional)
     * @param year Year filter (required if no game id) (optional)
     * @param week Week filter (optional)
     * @param seasonType Season type filter (regular, postseason, or both) (optional)
     * @param team Team filter (optional)
     * @param conference Conference filter (optional)
     * @param classification Division classification filter (fbs/fcs/ii/iii) (optional)
     * @return List&lt;GameWeather&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<GameWeather> getGameWeather(Integer gameId, Integer year, Integer week, String seasonType, String team, String conference, String classification) throws ApiException {
        ApiResponse<List<GameWeather>> localVarResp = getGameWeatherWithHttpInfo(gameId, year, week, seasonType, team, conference, classification);
        return localVarResp.getData();
    }

    /**
     * Game weather information (Patreon only)
     * Weather information for the hour of kickoff
     * @param gameId Game id filter (required if no year) (optional)
     * @param year Year filter (required if no game id) (optional)
     * @param week Week filter (optional)
     * @param seasonType Season type filter (regular, postseason, or both) (optional)
     * @param team Team filter (optional)
     * @param conference Conference filter (optional)
     * @param classification Division classification filter (fbs/fcs/ii/iii) (optional)
     * @return ApiResponse&lt;List&lt;GameWeather&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GameWeather>> getGameWeatherWithHttpInfo(Integer gameId, Integer year, Integer week, String seasonType, String team, String conference, String classification) throws ApiException {
        okhttp3.Call localVarCall = getGameWeatherValidateBeforeCall(gameId, year, week, seasonType, team, conference, classification, null);
        Type localVarReturnType = new TypeToken<List<GameWeather>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Game weather information (Patreon only) (asynchronously)
     * Weather information for the hour of kickoff
     * @param gameId Game id filter (required if no year) (optional)
     * @param year Year filter (required if no game id) (optional)
     * @param week Week filter (optional)
     * @param seasonType Season type filter (regular, postseason, or both) (optional)
     * @param team Team filter (optional)
     * @param conference Conference filter (optional)
     * @param classification Division classification filter (fbs/fcs/ii/iii) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGameWeatherAsync(Integer gameId, Integer year, Integer week, String seasonType, String team, String conference, String classification, final ApiCallback<List<GameWeather>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGameWeatherValidateBeforeCall(gameId, year, week, seasonType, team, conference, classification, _callback);
        Type localVarReturnType = new TypeToken<List<GameWeather>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGames
     * @param year Year/season filter for games (required)
     * @param week Week filter (optional)
     * @param seasonType Season type filter (regular or postseason) (optional, default to regular)
     * @param team Team (optional)
     * @param home Home team filter (optional)
     * @param away Away team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param division Division classification filter (fbs/fcs/ii/iii) (optional)
     * @param id id filter for querying a single game (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGamesCall(Integer year, Integer week, String seasonType, String team, String home, String away, String conference, String division, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (week != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("week", week));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seasonType", seasonType));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (home != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("home", home));
        }

        if (away != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("away", away));
        }

        if (conference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conference", conference));
        }

        if (division != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("division", division));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGamesValidateBeforeCall(Integer year, Integer week, String seasonType, String team, String home, String away, String conference, String division, Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getGames(Async)");
        }

        return getGamesCall(year, week, seasonType, team, home, away, conference, division, id, _callback);

    }

    /**
     * Games and results
     * Get game results
     * @param year Year/season filter for games (required)
     * @param week Week filter (optional)
     * @param seasonType Season type filter (regular or postseason) (optional, default to regular)
     * @param team Team (optional)
     * @param home Home team filter (optional)
     * @param away Away team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param division Division classification filter (fbs/fcs/ii/iii) (optional)
     * @param id id filter for querying a single game (optional)
     * @return List&lt;Game&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<Game> getGames(Integer year, Integer week, String seasonType, String team, String home, String away, String conference, String division, Integer id) throws ApiException {
        ApiResponse<List<Game>> localVarResp = getGamesWithHttpInfo(year, week, seasonType, team, home, away, conference, division, id);
        return localVarResp.getData();
    }

    /**
     * Games and results
     * Get game results
     * @param year Year/season filter for games (required)
     * @param week Week filter (optional)
     * @param seasonType Season type filter (regular or postseason) (optional, default to regular)
     * @param team Team (optional)
     * @param home Home team filter (optional)
     * @param away Away team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param division Division classification filter (fbs/fcs/ii/iii) (optional)
     * @param id id filter for querying a single game (optional)
     * @return ApiResponse&lt;List&lt;Game&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Game>> getGamesWithHttpInfo(Integer year, Integer week, String seasonType, String team, String home, String away, String conference, String division, Integer id) throws ApiException {
        okhttp3.Call localVarCall = getGamesValidateBeforeCall(year, week, seasonType, team, home, away, conference, division, id, null);
        Type localVarReturnType = new TypeToken<List<Game>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Games and results (asynchronously)
     * Get game results
     * @param year Year/season filter for games (required)
     * @param week Week filter (optional)
     * @param seasonType Season type filter (regular or postseason) (optional, default to regular)
     * @param team Team (optional)
     * @param home Home team filter (optional)
     * @param away Away team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param division Division classification filter (fbs/fcs/ii/iii) (optional)
     * @param id id filter for querying a single game (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGamesAsync(Integer year, Integer week, String seasonType, String team, String home, String away, String conference, String division, Integer id, final ApiCallback<List<Game>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGamesValidateBeforeCall(year, week, seasonType, team, home, away, conference, division, id, _callback);
        Type localVarReturnType = new TypeToken<List<Game>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPlayerGameStats
     * @param year Year/season filter for games (required)
     * @param week Week filter (optional)
     * @param seasonType Season type filter (regular or postseason) (optional, default to regular)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param category Category filter (e.g defensive) (optional)
     * @param gameId Game id filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlayerGameStatsCall(Integer year, Integer week, String seasonType, String team, String conference, String category, Integer gameId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/players";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (week != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("week", week));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seasonType", seasonType));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (conference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conference", conference));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (gameId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gameId", gameId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlayerGameStatsValidateBeforeCall(Integer year, Integer week, String seasonType, String team, String conference, String category, Integer gameId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getPlayerGameStats(Async)");
        }

        return getPlayerGameStatsCall(year, week, seasonType, team, conference, category, gameId, _callback);

    }

    /**
     * Player game stats
     * Player stats broken down by game
     * @param year Year/season filter for games (required)
     * @param week Week filter (optional)
     * @param seasonType Season type filter (regular or postseason) (optional, default to regular)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param category Category filter (e.g defensive) (optional)
     * @param gameId Game id filter (optional)
     * @return List&lt;PlayerGame&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<PlayerGame> getPlayerGameStats(Integer year, Integer week, String seasonType, String team, String conference, String category, Integer gameId) throws ApiException {
        ApiResponse<List<PlayerGame>> localVarResp = getPlayerGameStatsWithHttpInfo(year, week, seasonType, team, conference, category, gameId);
        return localVarResp.getData();
    }

    /**
     * Player game stats
     * Player stats broken down by game
     * @param year Year/season filter for games (required)
     * @param week Week filter (optional)
     * @param seasonType Season type filter (regular or postseason) (optional, default to regular)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param category Category filter (e.g defensive) (optional)
     * @param gameId Game id filter (optional)
     * @return ApiResponse&lt;List&lt;PlayerGame&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PlayerGame>> getPlayerGameStatsWithHttpInfo(Integer year, Integer week, String seasonType, String team, String conference, String category, Integer gameId) throws ApiException {
        okhttp3.Call localVarCall = getPlayerGameStatsValidateBeforeCall(year, week, seasonType, team, conference, category, gameId, null);
        Type localVarReturnType = new TypeToken<List<PlayerGame>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Player game stats (asynchronously)
     * Player stats broken down by game
     * @param year Year/season filter for games (required)
     * @param week Week filter (optional)
     * @param seasonType Season type filter (regular or postseason) (optional, default to regular)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param category Category filter (e.g defensive) (optional)
     * @param gameId Game id filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlayerGameStatsAsync(Integer year, Integer week, String seasonType, String team, String conference, String category, Integer gameId, final ApiCallback<List<PlayerGame>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlayerGameStatsValidateBeforeCall(year, week, seasonType, team, conference, category, gameId, _callback);
        Type localVarReturnType = new TypeToken<List<PlayerGame>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScoreboard
     * @param classification Classification filter (fbs, fcs, ii, or iii). Defaults to fbs. (optional)
     * @param conference Conference abbreviation filter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScoreboardCall(String classification, String conference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scoreboard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (classification != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("classification", classification));
        }

        if (conference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conference", conference));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScoreboardValidateBeforeCall(String classification, String conference, final ApiCallback _callback) throws ApiException {
        return getScoreboardCall(classification, conference, _callback);

    }

    /**
     * Live game results (Patreon only)
     * Get live game results
     * @param classification Classification filter (fbs, fcs, ii, or iii). Defaults to fbs. (optional)
     * @param conference Conference abbreviation filter. (optional)
     * @return List&lt;ScoreboardGame&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<ScoreboardGame> getScoreboard(String classification, String conference) throws ApiException {
        ApiResponse<List<ScoreboardGame>> localVarResp = getScoreboardWithHttpInfo(classification, conference);
        return localVarResp.getData();
    }

    /**
     * Live game results (Patreon only)
     * Get live game results
     * @param classification Classification filter (fbs, fcs, ii, or iii). Defaults to fbs. (optional)
     * @param conference Conference abbreviation filter. (optional)
     * @return ApiResponse&lt;List&lt;ScoreboardGame&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScoreboardGame>> getScoreboardWithHttpInfo(String classification, String conference) throws ApiException {
        okhttp3.Call localVarCall = getScoreboardValidateBeforeCall(classification, conference, null);
        Type localVarReturnType = new TypeToken<List<ScoreboardGame>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Live game results (Patreon only) (asynchronously)
     * Get live game results
     * @param classification Classification filter (fbs, fcs, ii, or iii). Defaults to fbs. (optional)
     * @param conference Conference abbreviation filter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScoreboardAsync(String classification, String conference, final ApiCallback<List<ScoreboardGame>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScoreboardValidateBeforeCall(classification, conference, _callback);
        Type localVarReturnType = new TypeToken<List<ScoreboardGame>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTeamGameStats
     * @param year Year/season filter for games (required)
     * @param week Week filter (optional)
     * @param seasonType Season type filter (regular or postseason) (optional, default to regular)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param gameId Game id filter (optional)
     * @param classification Division classification filter (fbs/fcs/ii/iii) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamGameStatsCall(Integer year, Integer week, String seasonType, String team, String conference, Integer gameId, String classification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/teams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (week != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("week", week));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seasonType", seasonType));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (conference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conference", conference));
        }

        if (gameId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gameId", gameId));
        }

        if (classification != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("classification", classification));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeamGameStatsValidateBeforeCall(Integer year, Integer week, String seasonType, String team, String conference, Integer gameId, String classification, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getTeamGameStats(Async)");
        }

        return getTeamGameStatsCall(year, week, seasonType, team, conference, gameId, classification, _callback);

    }

    /**
     * Team game stats
     * Team stats broken down by game
     * @param year Year/season filter for games (required)
     * @param week Week filter (optional)
     * @param seasonType Season type filter (regular or postseason) (optional, default to regular)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param gameId Game id filter (optional)
     * @param classification Division classification filter (fbs/fcs/ii/iii) (optional)
     * @return List&lt;TeamGame&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<TeamGame> getTeamGameStats(Integer year, Integer week, String seasonType, String team, String conference, Integer gameId, String classification) throws ApiException {
        ApiResponse<List<TeamGame>> localVarResp = getTeamGameStatsWithHttpInfo(year, week, seasonType, team, conference, gameId, classification);
        return localVarResp.getData();
    }

    /**
     * Team game stats
     * Team stats broken down by game
     * @param year Year/season filter for games (required)
     * @param week Week filter (optional)
     * @param seasonType Season type filter (regular or postseason) (optional, default to regular)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param gameId Game id filter (optional)
     * @param classification Division classification filter (fbs/fcs/ii/iii) (optional)
     * @return ApiResponse&lt;List&lt;TeamGame&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TeamGame>> getTeamGameStatsWithHttpInfo(Integer year, Integer week, String seasonType, String team, String conference, Integer gameId, String classification) throws ApiException {
        okhttp3.Call localVarCall = getTeamGameStatsValidateBeforeCall(year, week, seasonType, team, conference, gameId, classification, null);
        Type localVarReturnType = new TypeToken<List<TeamGame>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Team game stats (asynchronously)
     * Team stats broken down by game
     * @param year Year/season filter for games (required)
     * @param week Week filter (optional)
     * @param seasonType Season type filter (regular or postseason) (optional, default to regular)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param gameId Game id filter (optional)
     * @param classification Division classification filter (fbs/fcs/ii/iii) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamGameStatsAsync(Integer year, Integer week, String seasonType, String team, String conference, Integer gameId, String classification, final ApiCallback<List<TeamGame>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeamGameStatsValidateBeforeCall(year, week, seasonType, team, conference, gameId, classification, _callback);
        Type localVarReturnType = new TypeToken<List<TeamGame>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTeamRecords
     * @param year Year filter (optional)
     * @param team Team filter (optional)
     * @param conference Conference filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamRecordsCall(Integer year, String team, String conference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/records";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (conference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conference", conference));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeamRecordsValidateBeforeCall(Integer year, String team, String conference, final ApiCallback _callback) throws ApiException {
        return getTeamRecordsCall(year, team, conference, _callback);

    }

    /**
     * Team records
     * Get team records by year
     * @param year Year filter (optional)
     * @param team Team filter (optional)
     * @param conference Conference filter (optional)
     * @return List&lt;TeamRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<TeamRecord> getTeamRecords(Integer year, String team, String conference) throws ApiException {
        ApiResponse<List<TeamRecord>> localVarResp = getTeamRecordsWithHttpInfo(year, team, conference);
        return localVarResp.getData();
    }

    /**
     * Team records
     * Get team records by year
     * @param year Year filter (optional)
     * @param team Team filter (optional)
     * @param conference Conference filter (optional)
     * @return ApiResponse&lt;List&lt;TeamRecord&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TeamRecord>> getTeamRecordsWithHttpInfo(Integer year, String team, String conference) throws ApiException {
        okhttp3.Call localVarCall = getTeamRecordsValidateBeforeCall(year, team, conference, null);
        Type localVarReturnType = new TypeToken<List<TeamRecord>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Team records (asynchronously)
     * Get team records by year
     * @param year Year filter (optional)
     * @param team Team filter (optional)
     * @param conference Conference filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamRecordsAsync(Integer year, String team, String conference, final ApiCallback<List<TeamRecord>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeamRecordsValidateBeforeCall(year, team, conference, _callback);
        Type localVarReturnType = new TypeToken<List<TeamRecord>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
