/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LivePlayByPlayTeamsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LivePlayByPlayTeamsInner {
  public static final String SERIALIZED_NAME_DRIVES = "drives";
  @SerializedName(SERIALIZED_NAME_DRIVES)
  private Integer drives;

  public static final String SERIALIZED_NAME_EPA_PER_PASS = "epaPerPass";
  @SerializedName(SERIALIZED_NAME_EPA_PER_PASS)
  private BigDecimal epaPerPass;

  public static final String SERIALIZED_NAME_EPA_PER_PLAY = "epaPerPlay";
  @SerializedName(SERIALIZED_NAME_EPA_PER_PLAY)
  private BigDecimal epaPerPlay;

  public static final String SERIALIZED_NAME_EPA_PER_RUSH = "epaPerRush";
  @SerializedName(SERIALIZED_NAME_EPA_PER_RUSH)
  private BigDecimal epaPerRush;

  public static final String SERIALIZED_NAME_EXPLOSIVENESS = "explosiveness";
  @SerializedName(SERIALIZED_NAME_EXPLOSIVENESS)
  private BigDecimal explosiveness;

  public static final String SERIALIZED_NAME_HOME_AWAY = "homeAway";
  @SerializedName(SERIALIZED_NAME_HOME_AWAY)
  private String homeAway;

  public static final String SERIALIZED_NAME_LINE_YARDS = "lineYards";
  @SerializedName(SERIALIZED_NAME_LINE_YARDS)
  private Integer lineYards;

  public static final String SERIALIZED_NAME_LINE_YARDS_PER_RUSH = "lineYardsPerRush";
  @SerializedName(SERIALIZED_NAME_LINE_YARDS_PER_RUSH)
  private BigDecimal lineYardsPerRush;

  public static final String SERIALIZED_NAME_OPEN_FIELD_YARDS = "openFieldYards";
  @SerializedName(SERIALIZED_NAME_OPEN_FIELD_YARDS)
  private Integer openFieldYards;

  public static final String SERIALIZED_NAME_OPEN_FIELD_YARDS_PER_RUSH = "openFieldYardsPerRush";
  @SerializedName(SERIALIZED_NAME_OPEN_FIELD_YARDS_PER_RUSH)
  private BigDecimal openFieldYardsPerRush;

  public static final String SERIALIZED_NAME_PASSING_DOWN_SUCCESS_RATE = "passingDownSuccessRate";
  @SerializedName(SERIALIZED_NAME_PASSING_DOWN_SUCCESS_RATE)
  private BigDecimal passingDownSuccessRate;

  public static final String SERIALIZED_NAME_PASSING_EPA = "passingEpa";
  @SerializedName(SERIALIZED_NAME_PASSING_EPA)
  private BigDecimal passingEpa;

  public static final String SERIALIZED_NAME_PLAYS = "plays";
  @SerializedName(SERIALIZED_NAME_PLAYS)
  private Integer plays;

  public static final String SERIALIZED_NAME_POINTS = "points";
  @SerializedName(SERIALIZED_NAME_POINTS)
  private Integer points;

  public static final String SERIALIZED_NAME_POINTS_PER_OPPORTUNITY = "pointsPerOpportunity";
  @SerializedName(SERIALIZED_NAME_POINTS_PER_OPPORTUNITY)
  private BigDecimal pointsPerOpportunity;

  public static final String SERIALIZED_NAME_RUSHING_EPA = "rushingEpa";
  @SerializedName(SERIALIZED_NAME_RUSHING_EPA)
  private BigDecimal rushingEpa;

  public static final String SERIALIZED_NAME_SCORING_OPPORTUNITIES = "scoringOpportunities";
  @SerializedName(SERIALIZED_NAME_SCORING_OPPORTUNITIES)
  private Integer scoringOpportunities;

  public static final String SERIALIZED_NAME_SECOND_LEVEL_YARDS = "secondLevelYards";
  @SerializedName(SERIALIZED_NAME_SECOND_LEVEL_YARDS)
  private Integer secondLevelYards;

  public static final String SERIALIZED_NAME_SECOND_LEVEL_YARDS_PER_RUSH = "secondLevelYardsPerRush";
  @SerializedName(SERIALIZED_NAME_SECOND_LEVEL_YARDS_PER_RUSH)
  private BigDecimal secondLevelYardsPerRush;

  public static final String SERIALIZED_NAME_STANDARD_DOWN_SUCCESS_RATE = "standardDownSuccessRate";
  @SerializedName(SERIALIZED_NAME_STANDARD_DOWN_SUCCESS_RATE)
  private BigDecimal standardDownSuccessRate;

  public static final String SERIALIZED_NAME_SUCCESS_RATE = "successRate";
  @SerializedName(SERIALIZED_NAME_SUCCESS_RATE)
  private BigDecimal successRate;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_TEAM_ID = "teamId";
  @SerializedName(SERIALIZED_NAME_TEAM_ID)
  private Integer teamId;

  public static final String SERIALIZED_NAME_TOTAL_EPA = "totalEpa";
  @SerializedName(SERIALIZED_NAME_TOTAL_EPA)
  private BigDecimal totalEpa;

  public LivePlayByPlayTeamsInner() {
  }

  public LivePlayByPlayTeamsInner drives(Integer drives) {
    this.drives = drives;
    return this;
  }

  /**
   * Get drives
   * @return drives
   */
  @javax.annotation.Nullable
  public Integer getDrives() {
    return drives;
  }

  public void setDrives(Integer drives) {
    this.drives = drives;
  }


  public LivePlayByPlayTeamsInner epaPerPass(BigDecimal epaPerPass) {
    this.epaPerPass = epaPerPass;
    return this;
  }

  /**
   * Get epaPerPass
   * @return epaPerPass
   */
  @javax.annotation.Nullable
  public BigDecimal getEpaPerPass() {
    return epaPerPass;
  }

  public void setEpaPerPass(BigDecimal epaPerPass) {
    this.epaPerPass = epaPerPass;
  }


  public LivePlayByPlayTeamsInner epaPerPlay(BigDecimal epaPerPlay) {
    this.epaPerPlay = epaPerPlay;
    return this;
  }

  /**
   * Get epaPerPlay
   * @return epaPerPlay
   */
  @javax.annotation.Nullable
  public BigDecimal getEpaPerPlay() {
    return epaPerPlay;
  }

  public void setEpaPerPlay(BigDecimal epaPerPlay) {
    this.epaPerPlay = epaPerPlay;
  }


  public LivePlayByPlayTeamsInner epaPerRush(BigDecimal epaPerRush) {
    this.epaPerRush = epaPerRush;
    return this;
  }

  /**
   * Get epaPerRush
   * @return epaPerRush
   */
  @javax.annotation.Nullable
  public BigDecimal getEpaPerRush() {
    return epaPerRush;
  }

  public void setEpaPerRush(BigDecimal epaPerRush) {
    this.epaPerRush = epaPerRush;
  }


  public LivePlayByPlayTeamsInner explosiveness(BigDecimal explosiveness) {
    this.explosiveness = explosiveness;
    return this;
  }

  /**
   * Get explosiveness
   * @return explosiveness
   */
  @javax.annotation.Nullable
  public BigDecimal getExplosiveness() {
    return explosiveness;
  }

  public void setExplosiveness(BigDecimal explosiveness) {
    this.explosiveness = explosiveness;
  }


  public LivePlayByPlayTeamsInner homeAway(String homeAway) {
    this.homeAway = homeAway;
    return this;
  }

  /**
   * Get homeAway
   * @return homeAway
   */
  @javax.annotation.Nullable
  public String getHomeAway() {
    return homeAway;
  }

  public void setHomeAway(String homeAway) {
    this.homeAway = homeAway;
  }


  public LivePlayByPlayTeamsInner lineYards(Integer lineYards) {
    this.lineYards = lineYards;
    return this;
  }

  /**
   * Get lineYards
   * @return lineYards
   */
  @javax.annotation.Nullable
  public Integer getLineYards() {
    return lineYards;
  }

  public void setLineYards(Integer lineYards) {
    this.lineYards = lineYards;
  }


  public LivePlayByPlayTeamsInner lineYardsPerRush(BigDecimal lineYardsPerRush) {
    this.lineYardsPerRush = lineYardsPerRush;
    return this;
  }

  /**
   * Get lineYardsPerRush
   * @return lineYardsPerRush
   */
  @javax.annotation.Nullable
  public BigDecimal getLineYardsPerRush() {
    return lineYardsPerRush;
  }

  public void setLineYardsPerRush(BigDecimal lineYardsPerRush) {
    this.lineYardsPerRush = lineYardsPerRush;
  }


  public LivePlayByPlayTeamsInner openFieldYards(Integer openFieldYards) {
    this.openFieldYards = openFieldYards;
    return this;
  }

  /**
   * Get openFieldYards
   * @return openFieldYards
   */
  @javax.annotation.Nullable
  public Integer getOpenFieldYards() {
    return openFieldYards;
  }

  public void setOpenFieldYards(Integer openFieldYards) {
    this.openFieldYards = openFieldYards;
  }


  public LivePlayByPlayTeamsInner openFieldYardsPerRush(BigDecimal openFieldYardsPerRush) {
    this.openFieldYardsPerRush = openFieldYardsPerRush;
    return this;
  }

  /**
   * Get openFieldYardsPerRush
   * @return openFieldYardsPerRush
   */
  @javax.annotation.Nullable
  public BigDecimal getOpenFieldYardsPerRush() {
    return openFieldYardsPerRush;
  }

  public void setOpenFieldYardsPerRush(BigDecimal openFieldYardsPerRush) {
    this.openFieldYardsPerRush = openFieldYardsPerRush;
  }


  public LivePlayByPlayTeamsInner passingDownSuccessRate(BigDecimal passingDownSuccessRate) {
    this.passingDownSuccessRate = passingDownSuccessRate;
    return this;
  }

  /**
   * Get passingDownSuccessRate
   * @return passingDownSuccessRate
   */
  @javax.annotation.Nullable
  public BigDecimal getPassingDownSuccessRate() {
    return passingDownSuccessRate;
  }

  public void setPassingDownSuccessRate(BigDecimal passingDownSuccessRate) {
    this.passingDownSuccessRate = passingDownSuccessRate;
  }


  public LivePlayByPlayTeamsInner passingEpa(BigDecimal passingEpa) {
    this.passingEpa = passingEpa;
    return this;
  }

  /**
   * Get passingEpa
   * @return passingEpa
   */
  @javax.annotation.Nullable
  public BigDecimal getPassingEpa() {
    return passingEpa;
  }

  public void setPassingEpa(BigDecimal passingEpa) {
    this.passingEpa = passingEpa;
  }


  public LivePlayByPlayTeamsInner plays(Integer plays) {
    this.plays = plays;
    return this;
  }

  /**
   * Get plays
   * @return plays
   */
  @javax.annotation.Nullable
  public Integer getPlays() {
    return plays;
  }

  public void setPlays(Integer plays) {
    this.plays = plays;
  }


  public LivePlayByPlayTeamsInner points(Integer points) {
    this.points = points;
    return this;
  }

  /**
   * Get points
   * @return points
   */
  @javax.annotation.Nullable
  public Integer getPoints() {
    return points;
  }

  public void setPoints(Integer points) {
    this.points = points;
  }


  public LivePlayByPlayTeamsInner pointsPerOpportunity(BigDecimal pointsPerOpportunity) {
    this.pointsPerOpportunity = pointsPerOpportunity;
    return this;
  }

  /**
   * Get pointsPerOpportunity
   * @return pointsPerOpportunity
   */
  @javax.annotation.Nullable
  public BigDecimal getPointsPerOpportunity() {
    return pointsPerOpportunity;
  }

  public void setPointsPerOpportunity(BigDecimal pointsPerOpportunity) {
    this.pointsPerOpportunity = pointsPerOpportunity;
  }


  public LivePlayByPlayTeamsInner rushingEpa(BigDecimal rushingEpa) {
    this.rushingEpa = rushingEpa;
    return this;
  }

  /**
   * Get rushingEpa
   * @return rushingEpa
   */
  @javax.annotation.Nullable
  public BigDecimal getRushingEpa() {
    return rushingEpa;
  }

  public void setRushingEpa(BigDecimal rushingEpa) {
    this.rushingEpa = rushingEpa;
  }


  public LivePlayByPlayTeamsInner scoringOpportunities(Integer scoringOpportunities) {
    this.scoringOpportunities = scoringOpportunities;
    return this;
  }

  /**
   * Get scoringOpportunities
   * @return scoringOpportunities
   */
  @javax.annotation.Nullable
  public Integer getScoringOpportunities() {
    return scoringOpportunities;
  }

  public void setScoringOpportunities(Integer scoringOpportunities) {
    this.scoringOpportunities = scoringOpportunities;
  }


  public LivePlayByPlayTeamsInner secondLevelYards(Integer secondLevelYards) {
    this.secondLevelYards = secondLevelYards;
    return this;
  }

  /**
   * Get secondLevelYards
   * @return secondLevelYards
   */
  @javax.annotation.Nullable
  public Integer getSecondLevelYards() {
    return secondLevelYards;
  }

  public void setSecondLevelYards(Integer secondLevelYards) {
    this.secondLevelYards = secondLevelYards;
  }


  public LivePlayByPlayTeamsInner secondLevelYardsPerRush(BigDecimal secondLevelYardsPerRush) {
    this.secondLevelYardsPerRush = secondLevelYardsPerRush;
    return this;
  }

  /**
   * Get secondLevelYardsPerRush
   * @return secondLevelYardsPerRush
   */
  @javax.annotation.Nullable
  public BigDecimal getSecondLevelYardsPerRush() {
    return secondLevelYardsPerRush;
  }

  public void setSecondLevelYardsPerRush(BigDecimal secondLevelYardsPerRush) {
    this.secondLevelYardsPerRush = secondLevelYardsPerRush;
  }


  public LivePlayByPlayTeamsInner standardDownSuccessRate(BigDecimal standardDownSuccessRate) {
    this.standardDownSuccessRate = standardDownSuccessRate;
    return this;
  }

  /**
   * Get standardDownSuccessRate
   * @return standardDownSuccessRate
   */
  @javax.annotation.Nullable
  public BigDecimal getStandardDownSuccessRate() {
    return standardDownSuccessRate;
  }

  public void setStandardDownSuccessRate(BigDecimal standardDownSuccessRate) {
    this.standardDownSuccessRate = standardDownSuccessRate;
  }


  public LivePlayByPlayTeamsInner successRate(BigDecimal successRate) {
    this.successRate = successRate;
    return this;
  }

  /**
   * Get successRate
   * @return successRate
   */
  @javax.annotation.Nullable
  public BigDecimal getSuccessRate() {
    return successRate;
  }

  public void setSuccessRate(BigDecimal successRate) {
    this.successRate = successRate;
  }


  public LivePlayByPlayTeamsInner team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public LivePlayByPlayTeamsInner teamId(Integer teamId) {
    this.teamId = teamId;
    return this;
  }

  /**
   * Get teamId
   * @return teamId
   */
  @javax.annotation.Nullable
  public Integer getTeamId() {
    return teamId;
  }

  public void setTeamId(Integer teamId) {
    this.teamId = teamId;
  }


  public LivePlayByPlayTeamsInner totalEpa(BigDecimal totalEpa) {
    this.totalEpa = totalEpa;
    return this;
  }

  /**
   * Get totalEpa
   * @return totalEpa
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalEpa() {
    return totalEpa;
  }

  public void setTotalEpa(BigDecimal totalEpa) {
    this.totalEpa = totalEpa;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LivePlayByPlayTeamsInner livePlayByPlayTeamsInner = (LivePlayByPlayTeamsInner) o;
    return Objects.equals(this.drives, livePlayByPlayTeamsInner.drives) &&
        Objects.equals(this.epaPerPass, livePlayByPlayTeamsInner.epaPerPass) &&
        Objects.equals(this.epaPerPlay, livePlayByPlayTeamsInner.epaPerPlay) &&
        Objects.equals(this.epaPerRush, livePlayByPlayTeamsInner.epaPerRush) &&
        Objects.equals(this.explosiveness, livePlayByPlayTeamsInner.explosiveness) &&
        Objects.equals(this.homeAway, livePlayByPlayTeamsInner.homeAway) &&
        Objects.equals(this.lineYards, livePlayByPlayTeamsInner.lineYards) &&
        Objects.equals(this.lineYardsPerRush, livePlayByPlayTeamsInner.lineYardsPerRush) &&
        Objects.equals(this.openFieldYards, livePlayByPlayTeamsInner.openFieldYards) &&
        Objects.equals(this.openFieldYardsPerRush, livePlayByPlayTeamsInner.openFieldYardsPerRush) &&
        Objects.equals(this.passingDownSuccessRate, livePlayByPlayTeamsInner.passingDownSuccessRate) &&
        Objects.equals(this.passingEpa, livePlayByPlayTeamsInner.passingEpa) &&
        Objects.equals(this.plays, livePlayByPlayTeamsInner.plays) &&
        Objects.equals(this.points, livePlayByPlayTeamsInner.points) &&
        Objects.equals(this.pointsPerOpportunity, livePlayByPlayTeamsInner.pointsPerOpportunity) &&
        Objects.equals(this.rushingEpa, livePlayByPlayTeamsInner.rushingEpa) &&
        Objects.equals(this.scoringOpportunities, livePlayByPlayTeamsInner.scoringOpportunities) &&
        Objects.equals(this.secondLevelYards, livePlayByPlayTeamsInner.secondLevelYards) &&
        Objects.equals(this.secondLevelYardsPerRush, livePlayByPlayTeamsInner.secondLevelYardsPerRush) &&
        Objects.equals(this.standardDownSuccessRate, livePlayByPlayTeamsInner.standardDownSuccessRate) &&
        Objects.equals(this.successRate, livePlayByPlayTeamsInner.successRate) &&
        Objects.equals(this.team, livePlayByPlayTeamsInner.team) &&
        Objects.equals(this.teamId, livePlayByPlayTeamsInner.teamId) &&
        Objects.equals(this.totalEpa, livePlayByPlayTeamsInner.totalEpa);
  }

  @Override
  public int hashCode() {
    return Objects.hash(drives, epaPerPass, epaPerPlay, epaPerRush, explosiveness, homeAway, lineYards, lineYardsPerRush, openFieldYards, openFieldYardsPerRush, passingDownSuccessRate, passingEpa, plays, points, pointsPerOpportunity, rushingEpa, scoringOpportunities, secondLevelYards, secondLevelYardsPerRush, standardDownSuccessRate, successRate, team, teamId, totalEpa);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LivePlayByPlayTeamsInner {\n");
    sb.append("    drives: ").append(toIndentedString(drives)).append("\n");
    sb.append("    epaPerPass: ").append(toIndentedString(epaPerPass)).append("\n");
    sb.append("    epaPerPlay: ").append(toIndentedString(epaPerPlay)).append("\n");
    sb.append("    epaPerRush: ").append(toIndentedString(epaPerRush)).append("\n");
    sb.append("    explosiveness: ").append(toIndentedString(explosiveness)).append("\n");
    sb.append("    homeAway: ").append(toIndentedString(homeAway)).append("\n");
    sb.append("    lineYards: ").append(toIndentedString(lineYards)).append("\n");
    sb.append("    lineYardsPerRush: ").append(toIndentedString(lineYardsPerRush)).append("\n");
    sb.append("    openFieldYards: ").append(toIndentedString(openFieldYards)).append("\n");
    sb.append("    openFieldYardsPerRush: ").append(toIndentedString(openFieldYardsPerRush)).append("\n");
    sb.append("    passingDownSuccessRate: ").append(toIndentedString(passingDownSuccessRate)).append("\n");
    sb.append("    passingEpa: ").append(toIndentedString(passingEpa)).append("\n");
    sb.append("    plays: ").append(toIndentedString(plays)).append("\n");
    sb.append("    points: ").append(toIndentedString(points)).append("\n");
    sb.append("    pointsPerOpportunity: ").append(toIndentedString(pointsPerOpportunity)).append("\n");
    sb.append("    rushingEpa: ").append(toIndentedString(rushingEpa)).append("\n");
    sb.append("    scoringOpportunities: ").append(toIndentedString(scoringOpportunities)).append("\n");
    sb.append("    secondLevelYards: ").append(toIndentedString(secondLevelYards)).append("\n");
    sb.append("    secondLevelYardsPerRush: ").append(toIndentedString(secondLevelYardsPerRush)).append("\n");
    sb.append("    standardDownSuccessRate: ").append(toIndentedString(standardDownSuccessRate)).append("\n");
    sb.append("    successRate: ").append(toIndentedString(successRate)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    totalEpa: ").append(toIndentedString(totalEpa)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("drives");
    openapiFields.add("epaPerPass");
    openapiFields.add("epaPerPlay");
    openapiFields.add("epaPerRush");
    openapiFields.add("explosiveness");
    openapiFields.add("homeAway");
    openapiFields.add("lineYards");
    openapiFields.add("lineYardsPerRush");
    openapiFields.add("openFieldYards");
    openapiFields.add("openFieldYardsPerRush");
    openapiFields.add("passingDownSuccessRate");
    openapiFields.add("passingEpa");
    openapiFields.add("plays");
    openapiFields.add("points");
    openapiFields.add("pointsPerOpportunity");
    openapiFields.add("rushingEpa");
    openapiFields.add("scoringOpportunities");
    openapiFields.add("secondLevelYards");
    openapiFields.add("secondLevelYardsPerRush");
    openapiFields.add("standardDownSuccessRate");
    openapiFields.add("successRate");
    openapiFields.add("team");
    openapiFields.add("teamId");
    openapiFields.add("totalEpa");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LivePlayByPlayTeamsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LivePlayByPlayTeamsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LivePlayByPlayTeamsInner is not found in the empty JSON string", LivePlayByPlayTeamsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LivePlayByPlayTeamsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LivePlayByPlayTeamsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("homeAway") != null && !jsonObj.get("homeAway").isJsonNull()) && !jsonObj.get("homeAway").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homeAway` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homeAway").toString()));
      }
      if ((jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) && !jsonObj.get("team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LivePlayByPlayTeamsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LivePlayByPlayTeamsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LivePlayByPlayTeamsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LivePlayByPlayTeamsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<LivePlayByPlayTeamsInner>() {
           @Override
           public void write(JsonWriter out, LivePlayByPlayTeamsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LivePlayByPlayTeamsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LivePlayByPlayTeamsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LivePlayByPlayTeamsInner
   * @throws IOException if the JSON string is invalid with respect to LivePlayByPlayTeamsInner
   */
  public static LivePlayByPlayTeamsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LivePlayByPlayTeamsInner.class);
  }

  /**
   * Convert an instance of LivePlayByPlayTeamsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

