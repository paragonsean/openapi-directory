/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BoxScoreTeamsCumulativePpaInner;
import org.openapitools.client.model.BoxScoreTeamsExplosivenessInner;
import org.openapitools.client.model.BoxScoreTeamsFieldPositionInner;
import org.openapitools.client.model.BoxScoreTeamsHavocInner;
import org.openapitools.client.model.BoxScoreTeamsRushingInner;
import org.openapitools.client.model.BoxScoreTeamsScoringOpportunitiesInner;
import org.openapitools.client.model.BoxScoreTeamsSuccessRatesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BoxScoreTeams
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BoxScoreTeams {
  public static final String SERIALIZED_NAME_CUMULATIVE_PPA = "cumulativePpa";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_PPA)
  private List<BoxScoreTeamsCumulativePpaInner> cumulativePpa = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPLOSIVENESS = "explosiveness";
  @SerializedName(SERIALIZED_NAME_EXPLOSIVENESS)
  private List<BoxScoreTeamsExplosivenessInner> explosiveness = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIELD_POSITION = "fieldPosition";
  @SerializedName(SERIALIZED_NAME_FIELD_POSITION)
  private List<BoxScoreTeamsFieldPositionInner> fieldPosition = new ArrayList<>();

  public static final String SERIALIZED_NAME_HAVOC = "havoc";
  @SerializedName(SERIALIZED_NAME_HAVOC)
  private List<BoxScoreTeamsHavocInner> havoc = new ArrayList<>();

  public static final String SERIALIZED_NAME_PPA = "ppa";
  @SerializedName(SERIALIZED_NAME_PPA)
  private List<BoxScoreTeamsCumulativePpaInner> ppa = new ArrayList<>();

  public static final String SERIALIZED_NAME_RUSHING = "rushing";
  @SerializedName(SERIALIZED_NAME_RUSHING)
  private List<BoxScoreTeamsRushingInner> rushing = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCORING_OPPORTUNITIES = "scoringOpportunities";
  @SerializedName(SERIALIZED_NAME_SCORING_OPPORTUNITIES)
  private List<BoxScoreTeamsScoringOpportunitiesInner> scoringOpportunities = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUCCESS_RATES = "successRates";
  @SerializedName(SERIALIZED_NAME_SUCCESS_RATES)
  private List<BoxScoreTeamsSuccessRatesInner> successRates = new ArrayList<>();

  public BoxScoreTeams() {
  }

  public BoxScoreTeams cumulativePpa(List<BoxScoreTeamsCumulativePpaInner> cumulativePpa) {
    this.cumulativePpa = cumulativePpa;
    return this;
  }

  public BoxScoreTeams addCumulativePpaItem(BoxScoreTeamsCumulativePpaInner cumulativePpaItem) {
    if (this.cumulativePpa == null) {
      this.cumulativePpa = new ArrayList<>();
    }
    this.cumulativePpa.add(cumulativePpaItem);
    return this;
  }

  /**
   * Get cumulativePpa
   * @return cumulativePpa
   */
  @javax.annotation.Nullable
  public List<BoxScoreTeamsCumulativePpaInner> getCumulativePpa() {
    return cumulativePpa;
  }

  public void setCumulativePpa(List<BoxScoreTeamsCumulativePpaInner> cumulativePpa) {
    this.cumulativePpa = cumulativePpa;
  }


  public BoxScoreTeams explosiveness(List<BoxScoreTeamsExplosivenessInner> explosiveness) {
    this.explosiveness = explosiveness;
    return this;
  }

  public BoxScoreTeams addExplosivenessItem(BoxScoreTeamsExplosivenessInner explosivenessItem) {
    if (this.explosiveness == null) {
      this.explosiveness = new ArrayList<>();
    }
    this.explosiveness.add(explosivenessItem);
    return this;
  }

  /**
   * Get explosiveness
   * @return explosiveness
   */
  @javax.annotation.Nullable
  public List<BoxScoreTeamsExplosivenessInner> getExplosiveness() {
    return explosiveness;
  }

  public void setExplosiveness(List<BoxScoreTeamsExplosivenessInner> explosiveness) {
    this.explosiveness = explosiveness;
  }


  public BoxScoreTeams fieldPosition(List<BoxScoreTeamsFieldPositionInner> fieldPosition) {
    this.fieldPosition = fieldPosition;
    return this;
  }

  public BoxScoreTeams addFieldPositionItem(BoxScoreTeamsFieldPositionInner fieldPositionItem) {
    if (this.fieldPosition == null) {
      this.fieldPosition = new ArrayList<>();
    }
    this.fieldPosition.add(fieldPositionItem);
    return this;
  }

  /**
   * Get fieldPosition
   * @return fieldPosition
   */
  @javax.annotation.Nullable
  public List<BoxScoreTeamsFieldPositionInner> getFieldPosition() {
    return fieldPosition;
  }

  public void setFieldPosition(List<BoxScoreTeamsFieldPositionInner> fieldPosition) {
    this.fieldPosition = fieldPosition;
  }


  public BoxScoreTeams havoc(List<BoxScoreTeamsHavocInner> havoc) {
    this.havoc = havoc;
    return this;
  }

  public BoxScoreTeams addHavocItem(BoxScoreTeamsHavocInner havocItem) {
    if (this.havoc == null) {
      this.havoc = new ArrayList<>();
    }
    this.havoc.add(havocItem);
    return this;
  }

  /**
   * Get havoc
   * @return havoc
   */
  @javax.annotation.Nullable
  public List<BoxScoreTeamsHavocInner> getHavoc() {
    return havoc;
  }

  public void setHavoc(List<BoxScoreTeamsHavocInner> havoc) {
    this.havoc = havoc;
  }


  public BoxScoreTeams ppa(List<BoxScoreTeamsCumulativePpaInner> ppa) {
    this.ppa = ppa;
    return this;
  }

  public BoxScoreTeams addPpaItem(BoxScoreTeamsCumulativePpaInner ppaItem) {
    if (this.ppa == null) {
      this.ppa = new ArrayList<>();
    }
    this.ppa.add(ppaItem);
    return this;
  }

  /**
   * Get ppa
   * @return ppa
   */
  @javax.annotation.Nullable
  public List<BoxScoreTeamsCumulativePpaInner> getPpa() {
    return ppa;
  }

  public void setPpa(List<BoxScoreTeamsCumulativePpaInner> ppa) {
    this.ppa = ppa;
  }


  public BoxScoreTeams rushing(List<BoxScoreTeamsRushingInner> rushing) {
    this.rushing = rushing;
    return this;
  }

  public BoxScoreTeams addRushingItem(BoxScoreTeamsRushingInner rushingItem) {
    if (this.rushing == null) {
      this.rushing = new ArrayList<>();
    }
    this.rushing.add(rushingItem);
    return this;
  }

  /**
   * Get rushing
   * @return rushing
   */
  @javax.annotation.Nullable
  public List<BoxScoreTeamsRushingInner> getRushing() {
    return rushing;
  }

  public void setRushing(List<BoxScoreTeamsRushingInner> rushing) {
    this.rushing = rushing;
  }


  public BoxScoreTeams scoringOpportunities(List<BoxScoreTeamsScoringOpportunitiesInner> scoringOpportunities) {
    this.scoringOpportunities = scoringOpportunities;
    return this;
  }

  public BoxScoreTeams addScoringOpportunitiesItem(BoxScoreTeamsScoringOpportunitiesInner scoringOpportunitiesItem) {
    if (this.scoringOpportunities == null) {
      this.scoringOpportunities = new ArrayList<>();
    }
    this.scoringOpportunities.add(scoringOpportunitiesItem);
    return this;
  }

  /**
   * Get scoringOpportunities
   * @return scoringOpportunities
   */
  @javax.annotation.Nullable
  public List<BoxScoreTeamsScoringOpportunitiesInner> getScoringOpportunities() {
    return scoringOpportunities;
  }

  public void setScoringOpportunities(List<BoxScoreTeamsScoringOpportunitiesInner> scoringOpportunities) {
    this.scoringOpportunities = scoringOpportunities;
  }


  public BoxScoreTeams successRates(List<BoxScoreTeamsSuccessRatesInner> successRates) {
    this.successRates = successRates;
    return this;
  }

  public BoxScoreTeams addSuccessRatesItem(BoxScoreTeamsSuccessRatesInner successRatesItem) {
    if (this.successRates == null) {
      this.successRates = new ArrayList<>();
    }
    this.successRates.add(successRatesItem);
    return this;
  }

  /**
   * Get successRates
   * @return successRates
   */
  @javax.annotation.Nullable
  public List<BoxScoreTeamsSuccessRatesInner> getSuccessRates() {
    return successRates;
  }

  public void setSuccessRates(List<BoxScoreTeamsSuccessRatesInner> successRates) {
    this.successRates = successRates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BoxScoreTeams boxScoreTeams = (BoxScoreTeams) o;
    return Objects.equals(this.cumulativePpa, boxScoreTeams.cumulativePpa) &&
        Objects.equals(this.explosiveness, boxScoreTeams.explosiveness) &&
        Objects.equals(this.fieldPosition, boxScoreTeams.fieldPosition) &&
        Objects.equals(this.havoc, boxScoreTeams.havoc) &&
        Objects.equals(this.ppa, boxScoreTeams.ppa) &&
        Objects.equals(this.rushing, boxScoreTeams.rushing) &&
        Objects.equals(this.scoringOpportunities, boxScoreTeams.scoringOpportunities) &&
        Objects.equals(this.successRates, boxScoreTeams.successRates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cumulativePpa, explosiveness, fieldPosition, havoc, ppa, rushing, scoringOpportunities, successRates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BoxScoreTeams {\n");
    sb.append("    cumulativePpa: ").append(toIndentedString(cumulativePpa)).append("\n");
    sb.append("    explosiveness: ").append(toIndentedString(explosiveness)).append("\n");
    sb.append("    fieldPosition: ").append(toIndentedString(fieldPosition)).append("\n");
    sb.append("    havoc: ").append(toIndentedString(havoc)).append("\n");
    sb.append("    ppa: ").append(toIndentedString(ppa)).append("\n");
    sb.append("    rushing: ").append(toIndentedString(rushing)).append("\n");
    sb.append("    scoringOpportunities: ").append(toIndentedString(scoringOpportunities)).append("\n");
    sb.append("    successRates: ").append(toIndentedString(successRates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cumulativePpa");
    openapiFields.add("explosiveness");
    openapiFields.add("fieldPosition");
    openapiFields.add("havoc");
    openapiFields.add("ppa");
    openapiFields.add("rushing");
    openapiFields.add("scoringOpportunities");
    openapiFields.add("successRates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BoxScoreTeams
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BoxScoreTeams.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BoxScoreTeams is not found in the empty JSON string", BoxScoreTeams.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BoxScoreTeams.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BoxScoreTeams` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("cumulativePpa") != null && !jsonObj.get("cumulativePpa").isJsonNull()) {
        JsonArray jsonArraycumulativePpa = jsonObj.getAsJsonArray("cumulativePpa");
        if (jsonArraycumulativePpa != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cumulativePpa").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cumulativePpa` to be an array in the JSON string but got `%s`", jsonObj.get("cumulativePpa").toString()));
          }

          // validate the optional field `cumulativePpa` (array)
          for (int i = 0; i < jsonArraycumulativePpa.size(); i++) {
            BoxScoreTeamsCumulativePpaInner.validateJsonElement(jsonArraycumulativePpa.get(i));
          };
        }
      }
      if (jsonObj.get("explosiveness") != null && !jsonObj.get("explosiveness").isJsonNull()) {
        JsonArray jsonArrayexplosiveness = jsonObj.getAsJsonArray("explosiveness");
        if (jsonArrayexplosiveness != null) {
          // ensure the json data is an array
          if (!jsonObj.get("explosiveness").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `explosiveness` to be an array in the JSON string but got `%s`", jsonObj.get("explosiveness").toString()));
          }

          // validate the optional field `explosiveness` (array)
          for (int i = 0; i < jsonArrayexplosiveness.size(); i++) {
            BoxScoreTeamsExplosivenessInner.validateJsonElement(jsonArrayexplosiveness.get(i));
          };
        }
      }
      if (jsonObj.get("fieldPosition") != null && !jsonObj.get("fieldPosition").isJsonNull()) {
        JsonArray jsonArrayfieldPosition = jsonObj.getAsJsonArray("fieldPosition");
        if (jsonArrayfieldPosition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fieldPosition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fieldPosition` to be an array in the JSON string but got `%s`", jsonObj.get("fieldPosition").toString()));
          }

          // validate the optional field `fieldPosition` (array)
          for (int i = 0; i < jsonArrayfieldPosition.size(); i++) {
            BoxScoreTeamsFieldPositionInner.validateJsonElement(jsonArrayfieldPosition.get(i));
          };
        }
      }
      if (jsonObj.get("havoc") != null && !jsonObj.get("havoc").isJsonNull()) {
        JsonArray jsonArrayhavoc = jsonObj.getAsJsonArray("havoc");
        if (jsonArrayhavoc != null) {
          // ensure the json data is an array
          if (!jsonObj.get("havoc").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `havoc` to be an array in the JSON string but got `%s`", jsonObj.get("havoc").toString()));
          }

          // validate the optional field `havoc` (array)
          for (int i = 0; i < jsonArrayhavoc.size(); i++) {
            BoxScoreTeamsHavocInner.validateJsonElement(jsonArrayhavoc.get(i));
          };
        }
      }
      if (jsonObj.get("ppa") != null && !jsonObj.get("ppa").isJsonNull()) {
        JsonArray jsonArrayppa = jsonObj.getAsJsonArray("ppa");
        if (jsonArrayppa != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ppa").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ppa` to be an array in the JSON string but got `%s`", jsonObj.get("ppa").toString()));
          }

          // validate the optional field `ppa` (array)
          for (int i = 0; i < jsonArrayppa.size(); i++) {
            BoxScoreTeamsCumulativePpaInner.validateJsonElement(jsonArrayppa.get(i));
          };
        }
      }
      if (jsonObj.get("rushing") != null && !jsonObj.get("rushing").isJsonNull()) {
        JsonArray jsonArrayrushing = jsonObj.getAsJsonArray("rushing");
        if (jsonArrayrushing != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rushing").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rushing` to be an array in the JSON string but got `%s`", jsonObj.get("rushing").toString()));
          }

          // validate the optional field `rushing` (array)
          for (int i = 0; i < jsonArrayrushing.size(); i++) {
            BoxScoreTeamsRushingInner.validateJsonElement(jsonArrayrushing.get(i));
          };
        }
      }
      if (jsonObj.get("scoringOpportunities") != null && !jsonObj.get("scoringOpportunities").isJsonNull()) {
        JsonArray jsonArrayscoringOpportunities = jsonObj.getAsJsonArray("scoringOpportunities");
        if (jsonArrayscoringOpportunities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scoringOpportunities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scoringOpportunities` to be an array in the JSON string but got `%s`", jsonObj.get("scoringOpportunities").toString()));
          }

          // validate the optional field `scoringOpportunities` (array)
          for (int i = 0; i < jsonArrayscoringOpportunities.size(); i++) {
            BoxScoreTeamsScoringOpportunitiesInner.validateJsonElement(jsonArrayscoringOpportunities.get(i));
          };
        }
      }
      if (jsonObj.get("successRates") != null && !jsonObj.get("successRates").isJsonNull()) {
        JsonArray jsonArraysuccessRates = jsonObj.getAsJsonArray("successRates");
        if (jsonArraysuccessRates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("successRates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `successRates` to be an array in the JSON string but got `%s`", jsonObj.get("successRates").toString()));
          }

          // validate the optional field `successRates` (array)
          for (int i = 0; i < jsonArraysuccessRates.size(); i++) {
            BoxScoreTeamsSuccessRatesInner.validateJsonElement(jsonArraysuccessRates.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BoxScoreTeams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BoxScoreTeams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BoxScoreTeams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BoxScoreTeams.class));

       return (TypeAdapter<T>) new TypeAdapter<BoxScoreTeams>() {
           @Override
           public void write(JsonWriter out, BoxScoreTeams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BoxScoreTeams read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BoxScoreTeams given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BoxScoreTeams
   * @throws IOException if the JSON string is invalid with respect to BoxScoreTeams
   */
  public static BoxScoreTeams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BoxScoreTeams.class);
  }

  /**
   * Convert an instance of BoxScoreTeams to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

