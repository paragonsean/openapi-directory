/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PlayerSeasonPPAAveragePPA;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlayerSeasonPPA
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlayerSeasonPPA {
  public static final String SERIALIZED_NAME_AVERAGE_P_P_A = "averagePPA";
  @SerializedName(SERIALIZED_NAME_AVERAGE_P_P_A)
  private PlayerSeasonPPAAveragePPA averagePPA;

  public static final String SERIALIZED_NAME_CONFERENCE = "conference";
  @SerializedName(SERIALIZED_NAME_CONFERENCE)
  private String conference;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_SEASON = "season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private Integer season;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_TOTAL_P_P_A = "totalPPA";
  @SerializedName(SERIALIZED_NAME_TOTAL_P_P_A)
  private PlayerSeasonPPAAveragePPA totalPPA;

  public PlayerSeasonPPA() {
  }

  public PlayerSeasonPPA averagePPA(PlayerSeasonPPAAveragePPA averagePPA) {
    this.averagePPA = averagePPA;
    return this;
  }

  /**
   * Get averagePPA
   * @return averagePPA
   */
  @javax.annotation.Nullable
  public PlayerSeasonPPAAveragePPA getAveragePPA() {
    return averagePPA;
  }

  public void setAveragePPA(PlayerSeasonPPAAveragePPA averagePPA) {
    this.averagePPA = averagePPA;
  }


  public PlayerSeasonPPA conference(String conference) {
    this.conference = conference;
    return this;
  }

  /**
   * Get conference
   * @return conference
   */
  @javax.annotation.Nullable
  public String getConference() {
    return conference;
  }

  public void setConference(String conference) {
    this.conference = conference;
  }


  public PlayerSeasonPPA id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public PlayerSeasonPPA name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PlayerSeasonPPA position(String position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }


  public PlayerSeasonPPA season(Integer season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public Integer getSeason() {
    return season;
  }

  public void setSeason(Integer season) {
    this.season = season;
  }


  public PlayerSeasonPPA team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public PlayerSeasonPPA totalPPA(PlayerSeasonPPAAveragePPA totalPPA) {
    this.totalPPA = totalPPA;
    return this;
  }

  /**
   * Get totalPPA
   * @return totalPPA
   */
  @javax.annotation.Nullable
  public PlayerSeasonPPAAveragePPA getTotalPPA() {
    return totalPPA;
  }

  public void setTotalPPA(PlayerSeasonPPAAveragePPA totalPPA) {
    this.totalPPA = totalPPA;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerSeasonPPA playerSeasonPPA = (PlayerSeasonPPA) o;
    return Objects.equals(this.averagePPA, playerSeasonPPA.averagePPA) &&
        Objects.equals(this.conference, playerSeasonPPA.conference) &&
        Objects.equals(this.id, playerSeasonPPA.id) &&
        Objects.equals(this.name, playerSeasonPPA.name) &&
        Objects.equals(this.position, playerSeasonPPA.position) &&
        Objects.equals(this.season, playerSeasonPPA.season) &&
        Objects.equals(this.team, playerSeasonPPA.team) &&
        Objects.equals(this.totalPPA, playerSeasonPPA.totalPPA);
  }

  @Override
  public int hashCode() {
    return Objects.hash(averagePPA, conference, id, name, position, season, team, totalPPA);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerSeasonPPA {\n");
    sb.append("    averagePPA: ").append(toIndentedString(averagePPA)).append("\n");
    sb.append("    conference: ").append(toIndentedString(conference)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    totalPPA: ").append(toIndentedString(totalPPA)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("averagePPA");
    openapiFields.add("conference");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("position");
    openapiFields.add("season");
    openapiFields.add("team");
    openapiFields.add("totalPPA");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlayerSeasonPPA
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlayerSeasonPPA.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayerSeasonPPA is not found in the empty JSON string", PlayerSeasonPPA.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlayerSeasonPPA.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlayerSeasonPPA` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `averagePPA`
      if (jsonObj.get("averagePPA") != null && !jsonObj.get("averagePPA").isJsonNull()) {
        PlayerSeasonPPAAveragePPA.validateJsonElement(jsonObj.get("averagePPA"));
      }
      if ((jsonObj.get("conference") != null && !jsonObj.get("conference").isJsonNull()) && !jsonObj.get("conference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conference").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) && !jsonObj.get("position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("position").toString()));
      }
      if ((jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) && !jsonObj.get("team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team").toString()));
      }
      // validate the optional field `totalPPA`
      if (jsonObj.get("totalPPA") != null && !jsonObj.get("totalPPA").isJsonNull()) {
        PlayerSeasonPPAAveragePPA.validateJsonElement(jsonObj.get("totalPPA"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayerSeasonPPA.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayerSeasonPPA' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayerSeasonPPA> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayerSeasonPPA.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayerSeasonPPA>() {
           @Override
           public void write(JsonWriter out, PlayerSeasonPPA value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayerSeasonPPA read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlayerSeasonPPA given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlayerSeasonPPA
   * @throws IOException if the JSON string is invalid with respect to PlayerSeasonPPA
   */
  public static PlayerSeasonPPA fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayerSeasonPPA.class);
  }

  /**
   * Convert an instance of PlayerSeasonPPA to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

