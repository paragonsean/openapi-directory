/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PlayerSearchResult;
import org.openapitools.client.model.PlayerSeasonStat;
import org.openapitools.client.model.PlayerUsage;
import org.openapitools.client.model.PortalPlayer;
import org.openapitools.client.model.ReturningProduction;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlayersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PlayersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlayersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getPlayerSeasonStats
     * @param year Year filter (required)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param startWeek Start week filter (optional)
     * @param endWeek Start week filter (optional)
     * @param seasonType Season type filter (regular, postseason, or both) (optional)
     * @param category Stat category filter (e.g. passing) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlayerSeasonStatsCall(Integer year, String team, String conference, Integer startWeek, Integer endWeek, String seasonType, String category, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/player/season";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (conference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conference", conference));
        }

        if (startWeek != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startWeek", startWeek));
        }

        if (endWeek != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endWeek", endWeek));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seasonType", seasonType));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlayerSeasonStatsValidateBeforeCall(Integer year, String team, String conference, Integer startWeek, Integer endWeek, String seasonType, String category, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getPlayerSeasonStats(Async)");
        }

        return getPlayerSeasonStatsCall(year, team, conference, startWeek, endWeek, seasonType, category, _callback);

    }

    /**
     * Player stats by season
     * Season player stats
     * @param year Year filter (required)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param startWeek Start week filter (optional)
     * @param endWeek Start week filter (optional)
     * @param seasonType Season type filter (regular, postseason, or both) (optional)
     * @param category Stat category filter (e.g. passing) (optional)
     * @return List&lt;PlayerSeasonStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<PlayerSeasonStat> getPlayerSeasonStats(Integer year, String team, String conference, Integer startWeek, Integer endWeek, String seasonType, String category) throws ApiException {
        ApiResponse<List<PlayerSeasonStat>> localVarResp = getPlayerSeasonStatsWithHttpInfo(year, team, conference, startWeek, endWeek, seasonType, category);
        return localVarResp.getData();
    }

    /**
     * Player stats by season
     * Season player stats
     * @param year Year filter (required)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param startWeek Start week filter (optional)
     * @param endWeek Start week filter (optional)
     * @param seasonType Season type filter (regular, postseason, or both) (optional)
     * @param category Stat category filter (e.g. passing) (optional)
     * @return ApiResponse&lt;List&lt;PlayerSeasonStat&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PlayerSeasonStat>> getPlayerSeasonStatsWithHttpInfo(Integer year, String team, String conference, Integer startWeek, Integer endWeek, String seasonType, String category) throws ApiException {
        okhttp3.Call localVarCall = getPlayerSeasonStatsValidateBeforeCall(year, team, conference, startWeek, endWeek, seasonType, category, null);
        Type localVarReturnType = new TypeToken<List<PlayerSeasonStat>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Player stats by season (asynchronously)
     * Season player stats
     * @param year Year filter (required)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param startWeek Start week filter (optional)
     * @param endWeek Start week filter (optional)
     * @param seasonType Season type filter (regular, postseason, or both) (optional)
     * @param category Stat category filter (e.g. passing) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlayerSeasonStatsAsync(Integer year, String team, String conference, Integer startWeek, Integer endWeek, String seasonType, String category, final ApiCallback<List<PlayerSeasonStat>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlayerSeasonStatsValidateBeforeCall(year, team, conference, startWeek, endWeek, seasonType, category, _callback);
        Type localVarReturnType = new TypeToken<List<PlayerSeasonStat>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPlayerUsage
     * @param year Year filter (required)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param position Position abbreviation filter (optional)
     * @param playerId Player id filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlayerUsageCall(Integer year, String team, String conference, String position, Integer playerId, Boolean excludeGarbageTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/player/usage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (conference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conference", conference));
        }

        if (position != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position", position));
        }

        if (playerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("playerId", playerId));
        }

        if (excludeGarbageTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeGarbageTime", excludeGarbageTime));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlayerUsageValidateBeforeCall(Integer year, String team, String conference, String position, Integer playerId, Boolean excludeGarbageTime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getPlayerUsage(Async)");
        }

        return getPlayerUsageCall(year, team, conference, position, playerId, excludeGarbageTime, _callback);

    }

    /**
     * Player usage metrics broken down by season
     * Player usage metrics by season
     * @param year Year filter (required)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param position Position abbreviation filter (optional)
     * @param playerId Player id filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @return List&lt;PlayerUsage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<PlayerUsage> getPlayerUsage(Integer year, String team, String conference, String position, Integer playerId, Boolean excludeGarbageTime) throws ApiException {
        ApiResponse<List<PlayerUsage>> localVarResp = getPlayerUsageWithHttpInfo(year, team, conference, position, playerId, excludeGarbageTime);
        return localVarResp.getData();
    }

    /**
     * Player usage metrics broken down by season
     * Player usage metrics by season
     * @param year Year filter (required)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param position Position abbreviation filter (optional)
     * @param playerId Player id filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @return ApiResponse&lt;List&lt;PlayerUsage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PlayerUsage>> getPlayerUsageWithHttpInfo(Integer year, String team, String conference, String position, Integer playerId, Boolean excludeGarbageTime) throws ApiException {
        okhttp3.Call localVarCall = getPlayerUsageValidateBeforeCall(year, team, conference, position, playerId, excludeGarbageTime, null);
        Type localVarReturnType = new TypeToken<List<PlayerUsage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Player usage metrics broken down by season (asynchronously)
     * Player usage metrics by season
     * @param year Year filter (required)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param position Position abbreviation filter (optional)
     * @param playerId Player id filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlayerUsageAsync(Integer year, String team, String conference, String position, Integer playerId, Boolean excludeGarbageTime, final ApiCallback<List<PlayerUsage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlayerUsageValidateBeforeCall(year, team, conference, position, playerId, excludeGarbageTime, _callback);
        Type localVarReturnType = new TypeToken<List<PlayerUsage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReturningProduction
     * @param year Year filter (optional)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReturningProductionCall(Integer year, String team, String conference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/player/returning";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (conference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conference", conference));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReturningProductionValidateBeforeCall(Integer year, String team, String conference, final ApiCallback _callback) throws ApiException {
        return getReturningProductionCall(year, team, conference, _callback);

    }

    /**
     * Team returning production metrics
     * Returning production metrics
     * @param year Year filter (optional)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @return List&lt;ReturningProduction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<ReturningProduction> getReturningProduction(Integer year, String team, String conference) throws ApiException {
        ApiResponse<List<ReturningProduction>> localVarResp = getReturningProductionWithHttpInfo(year, team, conference);
        return localVarResp.getData();
    }

    /**
     * Team returning production metrics
     * Returning production metrics
     * @param year Year filter (optional)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @return ApiResponse&lt;List&lt;ReturningProduction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReturningProduction>> getReturningProductionWithHttpInfo(Integer year, String team, String conference) throws ApiException {
        okhttp3.Call localVarCall = getReturningProductionValidateBeforeCall(year, team, conference, null);
        Type localVarReturnType = new TypeToken<List<ReturningProduction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Team returning production metrics (asynchronously)
     * Returning production metrics
     * @param year Year filter (optional)
     * @param team Team filter (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReturningProductionAsync(Integer year, String team, String conference, final ApiCallback<List<ReturningProduction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReturningProductionValidateBeforeCall(year, team, conference, _callback);
        Type localVarReturnType = new TypeToken<List<ReturningProduction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransferPortal
     * @param year Year filter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransferPortalCall(Integer year, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/player/portal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransferPortalValidateBeforeCall(Integer year, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getTransferPortal(Async)");
        }

        return getTransferPortalCall(year, _callback);

    }

    /**
     * Transfer portal by season
     * Transfer portal by season
     * @param year Year filter (required)
     * @return List&lt;PortalPlayer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<PortalPlayer> getTransferPortal(Integer year) throws ApiException {
        ApiResponse<List<PortalPlayer>> localVarResp = getTransferPortalWithHttpInfo(year);
        return localVarResp.getData();
    }

    /**
     * Transfer portal by season
     * Transfer portal by season
     * @param year Year filter (required)
     * @return ApiResponse&lt;List&lt;PortalPlayer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PortalPlayer>> getTransferPortalWithHttpInfo(Integer year) throws ApiException {
        okhttp3.Call localVarCall = getTransferPortalValidateBeforeCall(year, null);
        Type localVarReturnType = new TypeToken<List<PortalPlayer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Transfer portal by season (asynchronously)
     * Transfer portal by season
     * @param year Year filter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransferPortalAsync(Integer year, final ApiCallback<List<PortalPlayer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransferPortalValidateBeforeCall(year, _callback);
        Type localVarReturnType = new TypeToken<List<PortalPlayer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for playerSearch
     * @param searchTerm Term to search on (required)
     * @param position Position abbreviation filter (optional)
     * @param team Team filter (optional)
     * @param year Year filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerSearchCall(String searchTerm, String position, String team, Integer year, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/player/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchTerm", searchTerm));
        }

        if (position != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position", position));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call playerSearchValidateBeforeCall(String searchTerm, String position, String team, Integer year, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchTerm' is set
        if (searchTerm == null) {
            throw new ApiException("Missing the required parameter 'searchTerm' when calling playerSearch(Async)");
        }

        return playerSearchCall(searchTerm, position, team, year, _callback);

    }

    /**
     * Search for player information
     * Search for players
     * @param searchTerm Term to search on (required)
     * @param position Position abbreviation filter (optional)
     * @param team Team filter (optional)
     * @param year Year filter (optional)
     * @return List&lt;PlayerSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<PlayerSearchResult> playerSearch(String searchTerm, String position, String team, Integer year) throws ApiException {
        ApiResponse<List<PlayerSearchResult>> localVarResp = playerSearchWithHttpInfo(searchTerm, position, team, year);
        return localVarResp.getData();
    }

    /**
     * Search for player information
     * Search for players
     * @param searchTerm Term to search on (required)
     * @param position Position abbreviation filter (optional)
     * @param team Team filter (optional)
     * @param year Year filter (optional)
     * @return ApiResponse&lt;List&lt;PlayerSearchResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PlayerSearchResult>> playerSearchWithHttpInfo(String searchTerm, String position, String team, Integer year) throws ApiException {
        okhttp3.Call localVarCall = playerSearchValidateBeforeCall(searchTerm, position, team, year, null);
        Type localVarReturnType = new TypeToken<List<PlayerSearchResult>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for player information (asynchronously)
     * Search for players
     * @param searchTerm Term to search on (required)
     * @param position Position abbreviation filter (optional)
     * @param team Team filter (optional)
     * @param year Year filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call playerSearchAsync(String searchTerm, String position, String team, Integer year, final ApiCallback<List<PlayerSearchResult>> _callback) throws ApiException {

        okhttp3.Call localVarCall = playerSearchValidateBeforeCall(searchTerm, position, team, year, _callback);
        Type localVarReturnType = new TypeToken<List<PlayerSearchResult>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
