/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LivePlayByPlayDrivesInnerPlaysInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LivePlayByPlayDrivesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LivePlayByPlayDrivesInner {
  public static final String SERIALIZED_NAME_DEFENSE = "defense";
  @SerializedName(SERIALIZED_NAME_DEFENSE)
  private String defense;

  public static final String SERIALIZED_NAME_DEFENSE_ID = "defenseId";
  @SerializedName(SERIALIZED_NAME_DEFENSE_ID)
  private Integer defenseId;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_END_CLOCK = "endClock";
  @SerializedName(SERIALIZED_NAME_END_CLOCK)
  private String endClock;

  public static final String SERIALIZED_NAME_END_PERIOD = "endPeriod";
  @SerializedName(SERIALIZED_NAME_END_PERIOD)
  private Integer endPeriod;

  public static final String SERIALIZED_NAME_END_YARDS_TO_GOAL = "endYardsToGoal";
  @SerializedName(SERIALIZED_NAME_END_YARDS_TO_GOAL)
  private Integer endYardsToGoal;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_OFFENSE = "offense";
  @SerializedName(SERIALIZED_NAME_OFFENSE)
  private String offense;

  public static final String SERIALIZED_NAME_OFFENSE_ID = "offenseId";
  @SerializedName(SERIALIZED_NAME_OFFENSE_ID)
  private Integer offenseId;

  public static final String SERIALIZED_NAME_PLAY_COUNT = "playCount";
  @SerializedName(SERIALIZED_NAME_PLAY_COUNT)
  private Integer playCount;

  public static final String SERIALIZED_NAME_PLAYS = "plays";
  @SerializedName(SERIALIZED_NAME_PLAYS)
  private List<LivePlayByPlayDrivesInnerPlaysInner> plays = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCORING_OPPORTUNITY = "scoringOpportunity";
  @SerializedName(SERIALIZED_NAME_SCORING_OPPORTUNITY)
  private Boolean scoringOpportunity;

  public static final String SERIALIZED_NAME_START_CLOCK = "startClock";
  @SerializedName(SERIALIZED_NAME_START_CLOCK)
  private String startClock;

  public static final String SERIALIZED_NAME_START_PERIOD = "startPeriod";
  @SerializedName(SERIALIZED_NAME_START_PERIOD)
  private Integer startPeriod;

  public static final String SERIALIZED_NAME_START_YARDS_TO_GOAL = "startYardsToGoal";
  @SerializedName(SERIALIZED_NAME_START_YARDS_TO_GOAL)
  private Integer startYardsToGoal;

  public static final String SERIALIZED_NAME_YARDS = "yards";
  @SerializedName(SERIALIZED_NAME_YARDS)
  private Integer yards;

  public LivePlayByPlayDrivesInner() {
  }

  public LivePlayByPlayDrivesInner defense(String defense) {
    this.defense = defense;
    return this;
  }

  /**
   * Get defense
   * @return defense
   */
  @javax.annotation.Nullable
  public String getDefense() {
    return defense;
  }

  public void setDefense(String defense) {
    this.defense = defense;
  }


  public LivePlayByPlayDrivesInner defenseId(Integer defenseId) {
    this.defenseId = defenseId;
    return this;
  }

  /**
   * Get defenseId
   * @return defenseId
   */
  @javax.annotation.Nullable
  public Integer getDefenseId() {
    return defenseId;
  }

  public void setDefenseId(Integer defenseId) {
    this.defenseId = defenseId;
  }


  public LivePlayByPlayDrivesInner duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nullable
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public LivePlayByPlayDrivesInner endClock(String endClock) {
    this.endClock = endClock;
    return this;
  }

  /**
   * Get endClock
   * @return endClock
   */
  @javax.annotation.Nullable
  public String getEndClock() {
    return endClock;
  }

  public void setEndClock(String endClock) {
    this.endClock = endClock;
  }


  public LivePlayByPlayDrivesInner endPeriod(Integer endPeriod) {
    this.endPeriod = endPeriod;
    return this;
  }

  /**
   * Get endPeriod
   * @return endPeriod
   */
  @javax.annotation.Nullable
  public Integer getEndPeriod() {
    return endPeriod;
  }

  public void setEndPeriod(Integer endPeriod) {
    this.endPeriod = endPeriod;
  }


  public LivePlayByPlayDrivesInner endYardsToGoal(Integer endYardsToGoal) {
    this.endYardsToGoal = endYardsToGoal;
    return this;
  }

  /**
   * Get endYardsToGoal
   * @return endYardsToGoal
   */
  @javax.annotation.Nullable
  public Integer getEndYardsToGoal() {
    return endYardsToGoal;
  }

  public void setEndYardsToGoal(Integer endYardsToGoal) {
    this.endYardsToGoal = endYardsToGoal;
  }


  public LivePlayByPlayDrivesInner id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public LivePlayByPlayDrivesInner offense(String offense) {
    this.offense = offense;
    return this;
  }

  /**
   * Get offense
   * @return offense
   */
  @javax.annotation.Nullable
  public String getOffense() {
    return offense;
  }

  public void setOffense(String offense) {
    this.offense = offense;
  }


  public LivePlayByPlayDrivesInner offenseId(Integer offenseId) {
    this.offenseId = offenseId;
    return this;
  }

  /**
   * Get offenseId
   * @return offenseId
   */
  @javax.annotation.Nullable
  public Integer getOffenseId() {
    return offenseId;
  }

  public void setOffenseId(Integer offenseId) {
    this.offenseId = offenseId;
  }


  public LivePlayByPlayDrivesInner playCount(Integer playCount) {
    this.playCount = playCount;
    return this;
  }

  /**
   * Get playCount
   * @return playCount
   */
  @javax.annotation.Nullable
  public Integer getPlayCount() {
    return playCount;
  }

  public void setPlayCount(Integer playCount) {
    this.playCount = playCount;
  }


  public LivePlayByPlayDrivesInner plays(List<LivePlayByPlayDrivesInnerPlaysInner> plays) {
    this.plays = plays;
    return this;
  }

  public LivePlayByPlayDrivesInner addPlaysItem(LivePlayByPlayDrivesInnerPlaysInner playsItem) {
    if (this.plays == null) {
      this.plays = new ArrayList<>();
    }
    this.plays.add(playsItem);
    return this;
  }

  /**
   * Get plays
   * @return plays
   */
  @javax.annotation.Nullable
  public List<LivePlayByPlayDrivesInnerPlaysInner> getPlays() {
    return plays;
  }

  public void setPlays(List<LivePlayByPlayDrivesInnerPlaysInner> plays) {
    this.plays = plays;
  }


  public LivePlayByPlayDrivesInner scoringOpportunity(Boolean scoringOpportunity) {
    this.scoringOpportunity = scoringOpportunity;
    return this;
  }

  /**
   * Get scoringOpportunity
   * @return scoringOpportunity
   */
  @javax.annotation.Nullable
  public Boolean getScoringOpportunity() {
    return scoringOpportunity;
  }

  public void setScoringOpportunity(Boolean scoringOpportunity) {
    this.scoringOpportunity = scoringOpportunity;
  }


  public LivePlayByPlayDrivesInner startClock(String startClock) {
    this.startClock = startClock;
    return this;
  }

  /**
   * Get startClock
   * @return startClock
   */
  @javax.annotation.Nullable
  public String getStartClock() {
    return startClock;
  }

  public void setStartClock(String startClock) {
    this.startClock = startClock;
  }


  public LivePlayByPlayDrivesInner startPeriod(Integer startPeriod) {
    this.startPeriod = startPeriod;
    return this;
  }

  /**
   * Get startPeriod
   * @return startPeriod
   */
  @javax.annotation.Nullable
  public Integer getStartPeriod() {
    return startPeriod;
  }

  public void setStartPeriod(Integer startPeriod) {
    this.startPeriod = startPeriod;
  }


  public LivePlayByPlayDrivesInner startYardsToGoal(Integer startYardsToGoal) {
    this.startYardsToGoal = startYardsToGoal;
    return this;
  }

  /**
   * Get startYardsToGoal
   * @return startYardsToGoal
   */
  @javax.annotation.Nullable
  public Integer getStartYardsToGoal() {
    return startYardsToGoal;
  }

  public void setStartYardsToGoal(Integer startYardsToGoal) {
    this.startYardsToGoal = startYardsToGoal;
  }


  public LivePlayByPlayDrivesInner yards(Integer yards) {
    this.yards = yards;
    return this;
  }

  /**
   * Get yards
   * @return yards
   */
  @javax.annotation.Nullable
  public Integer getYards() {
    return yards;
  }

  public void setYards(Integer yards) {
    this.yards = yards;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LivePlayByPlayDrivesInner livePlayByPlayDrivesInner = (LivePlayByPlayDrivesInner) o;
    return Objects.equals(this.defense, livePlayByPlayDrivesInner.defense) &&
        Objects.equals(this.defenseId, livePlayByPlayDrivesInner.defenseId) &&
        Objects.equals(this.duration, livePlayByPlayDrivesInner.duration) &&
        Objects.equals(this.endClock, livePlayByPlayDrivesInner.endClock) &&
        Objects.equals(this.endPeriod, livePlayByPlayDrivesInner.endPeriod) &&
        Objects.equals(this.endYardsToGoal, livePlayByPlayDrivesInner.endYardsToGoal) &&
        Objects.equals(this.id, livePlayByPlayDrivesInner.id) &&
        Objects.equals(this.offense, livePlayByPlayDrivesInner.offense) &&
        Objects.equals(this.offenseId, livePlayByPlayDrivesInner.offenseId) &&
        Objects.equals(this.playCount, livePlayByPlayDrivesInner.playCount) &&
        Objects.equals(this.plays, livePlayByPlayDrivesInner.plays) &&
        Objects.equals(this.scoringOpportunity, livePlayByPlayDrivesInner.scoringOpportunity) &&
        Objects.equals(this.startClock, livePlayByPlayDrivesInner.startClock) &&
        Objects.equals(this.startPeriod, livePlayByPlayDrivesInner.startPeriod) &&
        Objects.equals(this.startYardsToGoal, livePlayByPlayDrivesInner.startYardsToGoal) &&
        Objects.equals(this.yards, livePlayByPlayDrivesInner.yards);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defense, defenseId, duration, endClock, endPeriod, endYardsToGoal, id, offense, offenseId, playCount, plays, scoringOpportunity, startClock, startPeriod, startYardsToGoal, yards);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LivePlayByPlayDrivesInner {\n");
    sb.append("    defense: ").append(toIndentedString(defense)).append("\n");
    sb.append("    defenseId: ").append(toIndentedString(defenseId)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    endClock: ").append(toIndentedString(endClock)).append("\n");
    sb.append("    endPeriod: ").append(toIndentedString(endPeriod)).append("\n");
    sb.append("    endYardsToGoal: ").append(toIndentedString(endYardsToGoal)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    offense: ").append(toIndentedString(offense)).append("\n");
    sb.append("    offenseId: ").append(toIndentedString(offenseId)).append("\n");
    sb.append("    playCount: ").append(toIndentedString(playCount)).append("\n");
    sb.append("    plays: ").append(toIndentedString(plays)).append("\n");
    sb.append("    scoringOpportunity: ").append(toIndentedString(scoringOpportunity)).append("\n");
    sb.append("    startClock: ").append(toIndentedString(startClock)).append("\n");
    sb.append("    startPeriod: ").append(toIndentedString(startPeriod)).append("\n");
    sb.append("    startYardsToGoal: ").append(toIndentedString(startYardsToGoal)).append("\n");
    sb.append("    yards: ").append(toIndentedString(yards)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defense");
    openapiFields.add("defenseId");
    openapiFields.add("duration");
    openapiFields.add("endClock");
    openapiFields.add("endPeriod");
    openapiFields.add("endYardsToGoal");
    openapiFields.add("id");
    openapiFields.add("offense");
    openapiFields.add("offenseId");
    openapiFields.add("playCount");
    openapiFields.add("plays");
    openapiFields.add("scoringOpportunity");
    openapiFields.add("startClock");
    openapiFields.add("startPeriod");
    openapiFields.add("startYardsToGoal");
    openapiFields.add("yards");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LivePlayByPlayDrivesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LivePlayByPlayDrivesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LivePlayByPlayDrivesInner is not found in the empty JSON string", LivePlayByPlayDrivesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LivePlayByPlayDrivesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LivePlayByPlayDrivesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("defense") != null && !jsonObj.get("defense").isJsonNull()) && !jsonObj.get("defense").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defense` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defense").toString()));
      }
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if ((jsonObj.get("endClock") != null && !jsonObj.get("endClock").isJsonNull()) && !jsonObj.get("endClock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endClock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endClock").toString()));
      }
      if ((jsonObj.get("offense") != null && !jsonObj.get("offense").isJsonNull()) && !jsonObj.get("offense").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offense` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offense").toString()));
      }
      if (jsonObj.get("plays") != null && !jsonObj.get("plays").isJsonNull()) {
        JsonArray jsonArrayplays = jsonObj.getAsJsonArray("plays");
        if (jsonArrayplays != null) {
          // ensure the json data is an array
          if (!jsonObj.get("plays").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `plays` to be an array in the JSON string but got `%s`", jsonObj.get("plays").toString()));
          }

          // validate the optional field `plays` (array)
          for (int i = 0; i < jsonArrayplays.size(); i++) {
            LivePlayByPlayDrivesInnerPlaysInner.validateJsonElement(jsonArrayplays.get(i));
          };
        }
      }
      if ((jsonObj.get("startClock") != null && !jsonObj.get("startClock").isJsonNull()) && !jsonObj.get("startClock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startClock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startClock").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LivePlayByPlayDrivesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LivePlayByPlayDrivesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LivePlayByPlayDrivesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LivePlayByPlayDrivesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<LivePlayByPlayDrivesInner>() {
           @Override
           public void write(JsonWriter out, LivePlayByPlayDrivesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LivePlayByPlayDrivesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LivePlayByPlayDrivesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LivePlayByPlayDrivesInner
   * @throws IOException if the JSON string is invalid with respect to LivePlayByPlayDrivesInner
   */
  public static LivePlayByPlayDrivesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LivePlayByPlayDrivesInner.class);
  }

  /**
   * Convert an instance of LivePlayByPlayDrivesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

