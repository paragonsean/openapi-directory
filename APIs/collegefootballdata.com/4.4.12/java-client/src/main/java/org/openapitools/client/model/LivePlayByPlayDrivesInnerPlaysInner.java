/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LivePlayByPlayDrivesInnerPlaysInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LivePlayByPlayDrivesInnerPlaysInner {
  public static final String SERIALIZED_NAME_AWAY_SCORE = "awayScore";
  @SerializedName(SERIALIZED_NAME_AWAY_SCORE)
  private Integer awayScore;

  public static final String SERIALIZED_NAME_CLOCK = "clock";
  @SerializedName(SERIALIZED_NAME_CLOCK)
  private String clock;

  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private Integer distance;

  public static final String SERIALIZED_NAME_DOWN = "down";
  @SerializedName(SERIALIZED_NAME_DOWN)
  private Integer down;

  public static final String SERIALIZED_NAME_DOWN_TYPE = "downType";
  @SerializedName(SERIALIZED_NAME_DOWN_TYPE)
  private String downType;

  public static final String SERIALIZED_NAME_EPA = "epa";
  @SerializedName(SERIALIZED_NAME_EPA)
  private BigDecimal epa;

  public static final String SERIALIZED_NAME_GARBAGE_TIME = "garbageTime";
  @SerializedName(SERIALIZED_NAME_GARBAGE_TIME)
  private Boolean garbageTime;

  public static final String SERIALIZED_NAME_HOME_SCORE = "homeScore";
  @SerializedName(SERIALIZED_NAME_HOME_SCORE)
  private Integer homeScore;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private Integer period;

  public static final String SERIALIZED_NAME_PLAY_TEXT = "playText";
  @SerializedName(SERIALIZED_NAME_PLAY_TEXT)
  private String playText;

  public static final String SERIALIZED_NAME_PLAY_TYPE = "playType";
  @SerializedName(SERIALIZED_NAME_PLAY_TYPE)
  private String playType;

  public static final String SERIALIZED_NAME_PLAY_TYPE_ID = "playTypeId";
  @SerializedName(SERIALIZED_NAME_PLAY_TYPE_ID)
  private Integer playTypeId;

  public static final String SERIALIZED_NAME_RUSH_PASS = "rushPass";
  @SerializedName(SERIALIZED_NAME_RUSH_PASS)
  private String rushPass;

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Boolean success;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_TEAM_ID = "teamId";
  @SerializedName(SERIALIZED_NAME_TEAM_ID)
  private Integer teamId;

  public static final String SERIALIZED_NAME_WALLCLOCK = "wallclock";
  @SerializedName(SERIALIZED_NAME_WALLCLOCK)
  private String wallclock;

  public static final String SERIALIZED_NAME_YARDS_GAINED = "yardsGained";
  @SerializedName(SERIALIZED_NAME_YARDS_GAINED)
  private Integer yardsGained;

  public static final String SERIALIZED_NAME_YARDS_TO_GOAL = "yardsToGoal";
  @SerializedName(SERIALIZED_NAME_YARDS_TO_GOAL)
  private Integer yardsToGoal;

  public LivePlayByPlayDrivesInnerPlaysInner() {
  }

  public LivePlayByPlayDrivesInnerPlaysInner awayScore(Integer awayScore) {
    this.awayScore = awayScore;
    return this;
  }

  /**
   * Get awayScore
   * @return awayScore
   */
  @javax.annotation.Nullable
  public Integer getAwayScore() {
    return awayScore;
  }

  public void setAwayScore(Integer awayScore) {
    this.awayScore = awayScore;
  }


  public LivePlayByPlayDrivesInnerPlaysInner clock(String clock) {
    this.clock = clock;
    return this;
  }

  /**
   * Get clock
   * @return clock
   */
  @javax.annotation.Nullable
  public String getClock() {
    return clock;
  }

  public void setClock(String clock) {
    this.clock = clock;
  }


  public LivePlayByPlayDrivesInnerPlaysInner distance(Integer distance) {
    this.distance = distance;
    return this;
  }

  /**
   * Get distance
   * @return distance
   */
  @javax.annotation.Nullable
  public Integer getDistance() {
    return distance;
  }

  public void setDistance(Integer distance) {
    this.distance = distance;
  }


  public LivePlayByPlayDrivesInnerPlaysInner down(Integer down) {
    this.down = down;
    return this;
  }

  /**
   * Get down
   * @return down
   */
  @javax.annotation.Nullable
  public Integer getDown() {
    return down;
  }

  public void setDown(Integer down) {
    this.down = down;
  }


  public LivePlayByPlayDrivesInnerPlaysInner downType(String downType) {
    this.downType = downType;
    return this;
  }

  /**
   * Get downType
   * @return downType
   */
  @javax.annotation.Nullable
  public String getDownType() {
    return downType;
  }

  public void setDownType(String downType) {
    this.downType = downType;
  }


  public LivePlayByPlayDrivesInnerPlaysInner epa(BigDecimal epa) {
    this.epa = epa;
    return this;
  }

  /**
   * Get epa
   * @return epa
   */
  @javax.annotation.Nullable
  public BigDecimal getEpa() {
    return epa;
  }

  public void setEpa(BigDecimal epa) {
    this.epa = epa;
  }


  public LivePlayByPlayDrivesInnerPlaysInner garbageTime(Boolean garbageTime) {
    this.garbageTime = garbageTime;
    return this;
  }

  /**
   * Get garbageTime
   * @return garbageTime
   */
  @javax.annotation.Nullable
  public Boolean getGarbageTime() {
    return garbageTime;
  }

  public void setGarbageTime(Boolean garbageTime) {
    this.garbageTime = garbageTime;
  }


  public LivePlayByPlayDrivesInnerPlaysInner homeScore(Integer homeScore) {
    this.homeScore = homeScore;
    return this;
  }

  /**
   * Get homeScore
   * @return homeScore
   */
  @javax.annotation.Nullable
  public Integer getHomeScore() {
    return homeScore;
  }

  public void setHomeScore(Integer homeScore) {
    this.homeScore = homeScore;
  }


  public LivePlayByPlayDrivesInnerPlaysInner id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public LivePlayByPlayDrivesInnerPlaysInner period(Integer period) {
    this.period = period;
    return this;
  }

  /**
   * Get period
   * @return period
   */
  @javax.annotation.Nullable
  public Integer getPeriod() {
    return period;
  }

  public void setPeriod(Integer period) {
    this.period = period;
  }


  public LivePlayByPlayDrivesInnerPlaysInner playText(String playText) {
    this.playText = playText;
    return this;
  }

  /**
   * Get playText
   * @return playText
   */
  @javax.annotation.Nullable
  public String getPlayText() {
    return playText;
  }

  public void setPlayText(String playText) {
    this.playText = playText;
  }


  public LivePlayByPlayDrivesInnerPlaysInner playType(String playType) {
    this.playType = playType;
    return this;
  }

  /**
   * Get playType
   * @return playType
   */
  @javax.annotation.Nullable
  public String getPlayType() {
    return playType;
  }

  public void setPlayType(String playType) {
    this.playType = playType;
  }


  public LivePlayByPlayDrivesInnerPlaysInner playTypeId(Integer playTypeId) {
    this.playTypeId = playTypeId;
    return this;
  }

  /**
   * Get playTypeId
   * @return playTypeId
   */
  @javax.annotation.Nullable
  public Integer getPlayTypeId() {
    return playTypeId;
  }

  public void setPlayTypeId(Integer playTypeId) {
    this.playTypeId = playTypeId;
  }


  public LivePlayByPlayDrivesInnerPlaysInner rushPass(String rushPass) {
    this.rushPass = rushPass;
    return this;
  }

  /**
   * Get rushPass
   * @return rushPass
   */
  @javax.annotation.Nullable
  public String getRushPass() {
    return rushPass;
  }

  public void setRushPass(String rushPass) {
    this.rushPass = rushPass;
  }


  public LivePlayByPlayDrivesInnerPlaysInner success(Boolean success) {
    this.success = success;
    return this;
  }

  /**
   * Get success
   * @return success
   */
  @javax.annotation.Nullable
  public Boolean getSuccess() {
    return success;
  }

  public void setSuccess(Boolean success) {
    this.success = success;
  }


  public LivePlayByPlayDrivesInnerPlaysInner team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public LivePlayByPlayDrivesInnerPlaysInner teamId(Integer teamId) {
    this.teamId = teamId;
    return this;
  }

  /**
   * Get teamId
   * @return teamId
   */
  @javax.annotation.Nullable
  public Integer getTeamId() {
    return teamId;
  }

  public void setTeamId(Integer teamId) {
    this.teamId = teamId;
  }


  public LivePlayByPlayDrivesInnerPlaysInner wallclock(String wallclock) {
    this.wallclock = wallclock;
    return this;
  }

  /**
   * Get wallclock
   * @return wallclock
   */
  @javax.annotation.Nullable
  public String getWallclock() {
    return wallclock;
  }

  public void setWallclock(String wallclock) {
    this.wallclock = wallclock;
  }


  public LivePlayByPlayDrivesInnerPlaysInner yardsGained(Integer yardsGained) {
    this.yardsGained = yardsGained;
    return this;
  }

  /**
   * Get yardsGained
   * @return yardsGained
   */
  @javax.annotation.Nullable
  public Integer getYardsGained() {
    return yardsGained;
  }

  public void setYardsGained(Integer yardsGained) {
    this.yardsGained = yardsGained;
  }


  public LivePlayByPlayDrivesInnerPlaysInner yardsToGoal(Integer yardsToGoal) {
    this.yardsToGoal = yardsToGoal;
    return this;
  }

  /**
   * Get yardsToGoal
   * @return yardsToGoal
   */
  @javax.annotation.Nullable
  public Integer getYardsToGoal() {
    return yardsToGoal;
  }

  public void setYardsToGoal(Integer yardsToGoal) {
    this.yardsToGoal = yardsToGoal;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LivePlayByPlayDrivesInnerPlaysInner livePlayByPlayDrivesInnerPlaysInner = (LivePlayByPlayDrivesInnerPlaysInner) o;
    return Objects.equals(this.awayScore, livePlayByPlayDrivesInnerPlaysInner.awayScore) &&
        Objects.equals(this.clock, livePlayByPlayDrivesInnerPlaysInner.clock) &&
        Objects.equals(this.distance, livePlayByPlayDrivesInnerPlaysInner.distance) &&
        Objects.equals(this.down, livePlayByPlayDrivesInnerPlaysInner.down) &&
        Objects.equals(this.downType, livePlayByPlayDrivesInnerPlaysInner.downType) &&
        Objects.equals(this.epa, livePlayByPlayDrivesInnerPlaysInner.epa) &&
        Objects.equals(this.garbageTime, livePlayByPlayDrivesInnerPlaysInner.garbageTime) &&
        Objects.equals(this.homeScore, livePlayByPlayDrivesInnerPlaysInner.homeScore) &&
        Objects.equals(this.id, livePlayByPlayDrivesInnerPlaysInner.id) &&
        Objects.equals(this.period, livePlayByPlayDrivesInnerPlaysInner.period) &&
        Objects.equals(this.playText, livePlayByPlayDrivesInnerPlaysInner.playText) &&
        Objects.equals(this.playType, livePlayByPlayDrivesInnerPlaysInner.playType) &&
        Objects.equals(this.playTypeId, livePlayByPlayDrivesInnerPlaysInner.playTypeId) &&
        Objects.equals(this.rushPass, livePlayByPlayDrivesInnerPlaysInner.rushPass) &&
        Objects.equals(this.success, livePlayByPlayDrivesInnerPlaysInner.success) &&
        Objects.equals(this.team, livePlayByPlayDrivesInnerPlaysInner.team) &&
        Objects.equals(this.teamId, livePlayByPlayDrivesInnerPlaysInner.teamId) &&
        Objects.equals(this.wallclock, livePlayByPlayDrivesInnerPlaysInner.wallclock) &&
        Objects.equals(this.yardsGained, livePlayByPlayDrivesInnerPlaysInner.yardsGained) &&
        Objects.equals(this.yardsToGoal, livePlayByPlayDrivesInnerPlaysInner.yardsToGoal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(awayScore, clock, distance, down, downType, epa, garbageTime, homeScore, id, period, playText, playType, playTypeId, rushPass, success, team, teamId, wallclock, yardsGained, yardsToGoal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LivePlayByPlayDrivesInnerPlaysInner {\n");
    sb.append("    awayScore: ").append(toIndentedString(awayScore)).append("\n");
    sb.append("    clock: ").append(toIndentedString(clock)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    down: ").append(toIndentedString(down)).append("\n");
    sb.append("    downType: ").append(toIndentedString(downType)).append("\n");
    sb.append("    epa: ").append(toIndentedString(epa)).append("\n");
    sb.append("    garbageTime: ").append(toIndentedString(garbageTime)).append("\n");
    sb.append("    homeScore: ").append(toIndentedString(homeScore)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    playText: ").append(toIndentedString(playText)).append("\n");
    sb.append("    playType: ").append(toIndentedString(playType)).append("\n");
    sb.append("    playTypeId: ").append(toIndentedString(playTypeId)).append("\n");
    sb.append("    rushPass: ").append(toIndentedString(rushPass)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    wallclock: ").append(toIndentedString(wallclock)).append("\n");
    sb.append("    yardsGained: ").append(toIndentedString(yardsGained)).append("\n");
    sb.append("    yardsToGoal: ").append(toIndentedString(yardsToGoal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("awayScore");
    openapiFields.add("clock");
    openapiFields.add("distance");
    openapiFields.add("down");
    openapiFields.add("downType");
    openapiFields.add("epa");
    openapiFields.add("garbageTime");
    openapiFields.add("homeScore");
    openapiFields.add("id");
    openapiFields.add("period");
    openapiFields.add("playText");
    openapiFields.add("playType");
    openapiFields.add("playTypeId");
    openapiFields.add("rushPass");
    openapiFields.add("success");
    openapiFields.add("team");
    openapiFields.add("teamId");
    openapiFields.add("wallclock");
    openapiFields.add("yardsGained");
    openapiFields.add("yardsToGoal");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LivePlayByPlayDrivesInnerPlaysInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LivePlayByPlayDrivesInnerPlaysInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LivePlayByPlayDrivesInnerPlaysInner is not found in the empty JSON string", LivePlayByPlayDrivesInnerPlaysInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LivePlayByPlayDrivesInnerPlaysInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LivePlayByPlayDrivesInnerPlaysInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clock") != null && !jsonObj.get("clock").isJsonNull()) && !jsonObj.get("clock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clock").toString()));
      }
      if ((jsonObj.get("downType") != null && !jsonObj.get("downType").isJsonNull()) && !jsonObj.get("downType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downType").toString()));
      }
      if ((jsonObj.get("playText") != null && !jsonObj.get("playText").isJsonNull()) && !jsonObj.get("playText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `playText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("playText").toString()));
      }
      if ((jsonObj.get("playType") != null && !jsonObj.get("playType").isJsonNull()) && !jsonObj.get("playType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `playType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("playType").toString()));
      }
      if ((jsonObj.get("rushPass") != null && !jsonObj.get("rushPass").isJsonNull()) && !jsonObj.get("rushPass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rushPass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rushPass").toString()));
      }
      if ((jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) && !jsonObj.get("team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team").toString()));
      }
      if ((jsonObj.get("wallclock") != null && !jsonObj.get("wallclock").isJsonNull()) && !jsonObj.get("wallclock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wallclock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wallclock").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LivePlayByPlayDrivesInnerPlaysInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LivePlayByPlayDrivesInnerPlaysInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LivePlayByPlayDrivesInnerPlaysInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LivePlayByPlayDrivesInnerPlaysInner.class));

       return (TypeAdapter<T>) new TypeAdapter<LivePlayByPlayDrivesInnerPlaysInner>() {
           @Override
           public void write(JsonWriter out, LivePlayByPlayDrivesInnerPlaysInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LivePlayByPlayDrivesInnerPlaysInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LivePlayByPlayDrivesInnerPlaysInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LivePlayByPlayDrivesInnerPlaysInner
   * @throws IOException if the JSON string is invalid with respect to LivePlayByPlayDrivesInnerPlaysInner
   */
  public static LivePlayByPlayDrivesInnerPlaysInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LivePlayByPlayDrivesInnerPlaysInner.class);
  }

  /**
   * Convert an instance of LivePlayByPlayDrivesInnerPlaysInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

