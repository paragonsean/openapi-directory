/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PositionGroupRecruitingRating
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PositionGroupRecruitingRating {
  public static final String SERIALIZED_NAME_AVERAGE_RATING = "averageRating";
  @SerializedName(SERIALIZED_NAME_AVERAGE_RATING)
  private BigDecimal averageRating;

  public static final String SERIALIZED_NAME_AVERAGE_STARS = "averageStars";
  @SerializedName(SERIALIZED_NAME_AVERAGE_STARS)
  private BigDecimal averageStars;

  public static final String SERIALIZED_NAME_COMMITS = "commits";
  @SerializedName(SERIALIZED_NAME_COMMITS)
  private BigDecimal commits;

  public static final String SERIALIZED_NAME_CONFERENCE = "conference";
  @SerializedName(SERIALIZED_NAME_CONFERENCE)
  private String conference;

  public static final String SERIALIZED_NAME_POSITION_GROUP = "positionGroup";
  @SerializedName(SERIALIZED_NAME_POSITION_GROUP)
  private String positionGroup;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_TOTAL_RATING = "totalRating";
  @SerializedName(SERIALIZED_NAME_TOTAL_RATING)
  private BigDecimal totalRating;

  public PositionGroupRecruitingRating() {
  }

  public PositionGroupRecruitingRating averageRating(BigDecimal averageRating) {
    this.averageRating = averageRating;
    return this;
  }

  /**
   * Get averageRating
   * @return averageRating
   */
  @javax.annotation.Nullable
  public BigDecimal getAverageRating() {
    return averageRating;
  }

  public void setAverageRating(BigDecimal averageRating) {
    this.averageRating = averageRating;
  }


  public PositionGroupRecruitingRating averageStars(BigDecimal averageStars) {
    this.averageStars = averageStars;
    return this;
  }

  /**
   * Get averageStars
   * @return averageStars
   */
  @javax.annotation.Nullable
  public BigDecimal getAverageStars() {
    return averageStars;
  }

  public void setAverageStars(BigDecimal averageStars) {
    this.averageStars = averageStars;
  }


  public PositionGroupRecruitingRating commits(BigDecimal commits) {
    this.commits = commits;
    return this;
  }

  /**
   * Get commits
   * @return commits
   */
  @javax.annotation.Nullable
  public BigDecimal getCommits() {
    return commits;
  }

  public void setCommits(BigDecimal commits) {
    this.commits = commits;
  }


  public PositionGroupRecruitingRating conference(String conference) {
    this.conference = conference;
    return this;
  }

  /**
   * Get conference
   * @return conference
   */
  @javax.annotation.Nullable
  public String getConference() {
    return conference;
  }

  public void setConference(String conference) {
    this.conference = conference;
  }


  public PositionGroupRecruitingRating positionGroup(String positionGroup) {
    this.positionGroup = positionGroup;
    return this;
  }

  /**
   * Get positionGroup
   * @return positionGroup
   */
  @javax.annotation.Nullable
  public String getPositionGroup() {
    return positionGroup;
  }

  public void setPositionGroup(String positionGroup) {
    this.positionGroup = positionGroup;
  }


  public PositionGroupRecruitingRating team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public PositionGroupRecruitingRating totalRating(BigDecimal totalRating) {
    this.totalRating = totalRating;
    return this;
  }

  /**
   * Get totalRating
   * @return totalRating
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalRating() {
    return totalRating;
  }

  public void setTotalRating(BigDecimal totalRating) {
    this.totalRating = totalRating;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PositionGroupRecruitingRating positionGroupRecruitingRating = (PositionGroupRecruitingRating) o;
    return Objects.equals(this.averageRating, positionGroupRecruitingRating.averageRating) &&
        Objects.equals(this.averageStars, positionGroupRecruitingRating.averageStars) &&
        Objects.equals(this.commits, positionGroupRecruitingRating.commits) &&
        Objects.equals(this.conference, positionGroupRecruitingRating.conference) &&
        Objects.equals(this.positionGroup, positionGroupRecruitingRating.positionGroup) &&
        Objects.equals(this.team, positionGroupRecruitingRating.team) &&
        Objects.equals(this.totalRating, positionGroupRecruitingRating.totalRating);
  }

  @Override
  public int hashCode() {
    return Objects.hash(averageRating, averageStars, commits, conference, positionGroup, team, totalRating);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PositionGroupRecruitingRating {\n");
    sb.append("    averageRating: ").append(toIndentedString(averageRating)).append("\n");
    sb.append("    averageStars: ").append(toIndentedString(averageStars)).append("\n");
    sb.append("    commits: ").append(toIndentedString(commits)).append("\n");
    sb.append("    conference: ").append(toIndentedString(conference)).append("\n");
    sb.append("    positionGroup: ").append(toIndentedString(positionGroup)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    totalRating: ").append(toIndentedString(totalRating)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("averageRating");
    openapiFields.add("averageStars");
    openapiFields.add("commits");
    openapiFields.add("conference");
    openapiFields.add("positionGroup");
    openapiFields.add("team");
    openapiFields.add("totalRating");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PositionGroupRecruitingRating
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PositionGroupRecruitingRating.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PositionGroupRecruitingRating is not found in the empty JSON string", PositionGroupRecruitingRating.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PositionGroupRecruitingRating.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PositionGroupRecruitingRating` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("conference") != null && !jsonObj.get("conference").isJsonNull()) && !jsonObj.get("conference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conference").toString()));
      }
      if ((jsonObj.get("positionGroup") != null && !jsonObj.get("positionGroup").isJsonNull()) && !jsonObj.get("positionGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `positionGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("positionGroup").toString()));
      }
      if ((jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) && !jsonObj.get("team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PositionGroupRecruitingRating.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PositionGroupRecruitingRating' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PositionGroupRecruitingRating> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PositionGroupRecruitingRating.class));

       return (TypeAdapter<T>) new TypeAdapter<PositionGroupRecruitingRating>() {
           @Override
           public void write(JsonWriter out, PositionGroupRecruitingRating value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PositionGroupRecruitingRating read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PositionGroupRecruitingRating given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PositionGroupRecruitingRating
   * @throws IOException if the JSON string is invalid with respect to PositionGroupRecruitingRating
   */
  public static PositionGroupRecruitingRating fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PositionGroupRecruitingRating.class);
  }

  /**
   * Convert an instance of PositionGroupRecruitingRating to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

