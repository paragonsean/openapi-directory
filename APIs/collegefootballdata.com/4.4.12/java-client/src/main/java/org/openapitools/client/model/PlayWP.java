/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlayWP
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlayWP {
  public static final String SERIALIZED_NAME_AWAY = "away";
  @SerializedName(SERIALIZED_NAME_AWAY)
  private String away;

  public static final String SERIALIZED_NAME_AWAY_ID = "awayId";
  @SerializedName(SERIALIZED_NAME_AWAY_ID)
  private Integer awayId;

  public static final String SERIALIZED_NAME_AWAY_SCORE = "awayScore";
  @SerializedName(SERIALIZED_NAME_AWAY_SCORE)
  private Integer awayScore;

  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private Integer distance;

  public static final String SERIALIZED_NAME_DOWN = "down";
  @SerializedName(SERIALIZED_NAME_DOWN)
  private Integer down;

  public static final String SERIALIZED_NAME_GAMES_ID = "gamesId";
  @SerializedName(SERIALIZED_NAME_GAMES_ID)
  private Integer gamesId;

  public static final String SERIALIZED_NAME_HOME = "home";
  @SerializedName(SERIALIZED_NAME_HOME)
  private String home;

  public static final String SERIALIZED_NAME_HOME_BALL = "homeBall";
  @SerializedName(SERIALIZED_NAME_HOME_BALL)
  private Boolean homeBall;

  public static final String SERIALIZED_NAME_HOME_ID = "homeId";
  @SerializedName(SERIALIZED_NAME_HOME_ID)
  private Integer homeId;

  public static final String SERIALIZED_NAME_HOME_SCORE = "homeScore";
  @SerializedName(SERIALIZED_NAME_HOME_SCORE)
  private Integer homeScore;

  public static final String SERIALIZED_NAME_HOME_WIN_PROB = "homeWinProb";
  @SerializedName(SERIALIZED_NAME_HOME_WIN_PROB)
  private BigDecimal homeWinProb;

  public static final String SERIALIZED_NAME_PLAY_ID = "playId";
  @SerializedName(SERIALIZED_NAME_PLAY_ID)
  private Integer playId;

  public static final String SERIALIZED_NAME_PLAY_NUMBER = "playNumber";
  @SerializedName(SERIALIZED_NAME_PLAY_NUMBER)
  private Integer playNumber;

  public static final String SERIALIZED_NAME_PLAY_TEXT = "playText";
  @SerializedName(SERIALIZED_NAME_PLAY_TEXT)
  private String playText;

  public static final String SERIALIZED_NAME_SPREAD = "spread";
  @SerializedName(SERIALIZED_NAME_SPREAD)
  private BigDecimal spread;

  public static final String SERIALIZED_NAME_TIME_REMAINING = "timeRemaining";
  @SerializedName(SERIALIZED_NAME_TIME_REMAINING)
  private Integer timeRemaining;

  public static final String SERIALIZED_NAME_YARD_LINE = "yardLine";
  @SerializedName(SERIALIZED_NAME_YARD_LINE)
  private Integer yardLine;

  public PlayWP() {
  }

  public PlayWP away(String away) {
    this.away = away;
    return this;
  }

  /**
   * Get away
   * @return away
   */
  @javax.annotation.Nullable
  public String getAway() {
    return away;
  }

  public void setAway(String away) {
    this.away = away;
  }


  public PlayWP awayId(Integer awayId) {
    this.awayId = awayId;
    return this;
  }

  /**
   * Get awayId
   * @return awayId
   */
  @javax.annotation.Nullable
  public Integer getAwayId() {
    return awayId;
  }

  public void setAwayId(Integer awayId) {
    this.awayId = awayId;
  }


  public PlayWP awayScore(Integer awayScore) {
    this.awayScore = awayScore;
    return this;
  }

  /**
   * Get awayScore
   * @return awayScore
   */
  @javax.annotation.Nullable
  public Integer getAwayScore() {
    return awayScore;
  }

  public void setAwayScore(Integer awayScore) {
    this.awayScore = awayScore;
  }


  public PlayWP distance(Integer distance) {
    this.distance = distance;
    return this;
  }

  /**
   * Get distance
   * @return distance
   */
  @javax.annotation.Nullable
  public Integer getDistance() {
    return distance;
  }

  public void setDistance(Integer distance) {
    this.distance = distance;
  }


  public PlayWP down(Integer down) {
    this.down = down;
    return this;
  }

  /**
   * Get down
   * @return down
   */
  @javax.annotation.Nullable
  public Integer getDown() {
    return down;
  }

  public void setDown(Integer down) {
    this.down = down;
  }


  public PlayWP gamesId(Integer gamesId) {
    this.gamesId = gamesId;
    return this;
  }

  /**
   * Get gamesId
   * @return gamesId
   */
  @javax.annotation.Nullable
  public Integer getGamesId() {
    return gamesId;
  }

  public void setGamesId(Integer gamesId) {
    this.gamesId = gamesId;
  }


  public PlayWP home(String home) {
    this.home = home;
    return this;
  }

  /**
   * Get home
   * @return home
   */
  @javax.annotation.Nullable
  public String getHome() {
    return home;
  }

  public void setHome(String home) {
    this.home = home;
  }


  public PlayWP homeBall(Boolean homeBall) {
    this.homeBall = homeBall;
    return this;
  }

  /**
   * Get homeBall
   * @return homeBall
   */
  @javax.annotation.Nullable
  public Boolean getHomeBall() {
    return homeBall;
  }

  public void setHomeBall(Boolean homeBall) {
    this.homeBall = homeBall;
  }


  public PlayWP homeId(Integer homeId) {
    this.homeId = homeId;
    return this;
  }

  /**
   * Get homeId
   * @return homeId
   */
  @javax.annotation.Nullable
  public Integer getHomeId() {
    return homeId;
  }

  public void setHomeId(Integer homeId) {
    this.homeId = homeId;
  }


  public PlayWP homeScore(Integer homeScore) {
    this.homeScore = homeScore;
    return this;
  }

  /**
   * Get homeScore
   * @return homeScore
   */
  @javax.annotation.Nullable
  public Integer getHomeScore() {
    return homeScore;
  }

  public void setHomeScore(Integer homeScore) {
    this.homeScore = homeScore;
  }


  public PlayWP homeWinProb(BigDecimal homeWinProb) {
    this.homeWinProb = homeWinProb;
    return this;
  }

  /**
   * Get homeWinProb
   * @return homeWinProb
   */
  @javax.annotation.Nullable
  public BigDecimal getHomeWinProb() {
    return homeWinProb;
  }

  public void setHomeWinProb(BigDecimal homeWinProb) {
    this.homeWinProb = homeWinProb;
  }


  public PlayWP playId(Integer playId) {
    this.playId = playId;
    return this;
  }

  /**
   * Get playId
   * @return playId
   */
  @javax.annotation.Nullable
  public Integer getPlayId() {
    return playId;
  }

  public void setPlayId(Integer playId) {
    this.playId = playId;
  }


  public PlayWP playNumber(Integer playNumber) {
    this.playNumber = playNumber;
    return this;
  }

  /**
   * Get playNumber
   * @return playNumber
   */
  @javax.annotation.Nullable
  public Integer getPlayNumber() {
    return playNumber;
  }

  public void setPlayNumber(Integer playNumber) {
    this.playNumber = playNumber;
  }


  public PlayWP playText(String playText) {
    this.playText = playText;
    return this;
  }

  /**
   * Get playText
   * @return playText
   */
  @javax.annotation.Nullable
  public String getPlayText() {
    return playText;
  }

  public void setPlayText(String playText) {
    this.playText = playText;
  }


  public PlayWP spread(BigDecimal spread) {
    this.spread = spread;
    return this;
  }

  /**
   * Get spread
   * @return spread
   */
  @javax.annotation.Nullable
  public BigDecimal getSpread() {
    return spread;
  }

  public void setSpread(BigDecimal spread) {
    this.spread = spread;
  }


  public PlayWP timeRemaining(Integer timeRemaining) {
    this.timeRemaining = timeRemaining;
    return this;
  }

  /**
   * Get timeRemaining
   * @return timeRemaining
   */
  @javax.annotation.Nullable
  public Integer getTimeRemaining() {
    return timeRemaining;
  }

  public void setTimeRemaining(Integer timeRemaining) {
    this.timeRemaining = timeRemaining;
  }


  public PlayWP yardLine(Integer yardLine) {
    this.yardLine = yardLine;
    return this;
  }

  /**
   * Get yardLine
   * @return yardLine
   */
  @javax.annotation.Nullable
  public Integer getYardLine() {
    return yardLine;
  }

  public void setYardLine(Integer yardLine) {
    this.yardLine = yardLine;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayWP playWP = (PlayWP) o;
    return Objects.equals(this.away, playWP.away) &&
        Objects.equals(this.awayId, playWP.awayId) &&
        Objects.equals(this.awayScore, playWP.awayScore) &&
        Objects.equals(this.distance, playWP.distance) &&
        Objects.equals(this.down, playWP.down) &&
        Objects.equals(this.gamesId, playWP.gamesId) &&
        Objects.equals(this.home, playWP.home) &&
        Objects.equals(this.homeBall, playWP.homeBall) &&
        Objects.equals(this.homeId, playWP.homeId) &&
        Objects.equals(this.homeScore, playWP.homeScore) &&
        Objects.equals(this.homeWinProb, playWP.homeWinProb) &&
        Objects.equals(this.playId, playWP.playId) &&
        Objects.equals(this.playNumber, playWP.playNumber) &&
        Objects.equals(this.playText, playWP.playText) &&
        Objects.equals(this.spread, playWP.spread) &&
        Objects.equals(this.timeRemaining, playWP.timeRemaining) &&
        Objects.equals(this.yardLine, playWP.yardLine);
  }

  @Override
  public int hashCode() {
    return Objects.hash(away, awayId, awayScore, distance, down, gamesId, home, homeBall, homeId, homeScore, homeWinProb, playId, playNumber, playText, spread, timeRemaining, yardLine);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayWP {\n");
    sb.append("    away: ").append(toIndentedString(away)).append("\n");
    sb.append("    awayId: ").append(toIndentedString(awayId)).append("\n");
    sb.append("    awayScore: ").append(toIndentedString(awayScore)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    down: ").append(toIndentedString(down)).append("\n");
    sb.append("    gamesId: ").append(toIndentedString(gamesId)).append("\n");
    sb.append("    home: ").append(toIndentedString(home)).append("\n");
    sb.append("    homeBall: ").append(toIndentedString(homeBall)).append("\n");
    sb.append("    homeId: ").append(toIndentedString(homeId)).append("\n");
    sb.append("    homeScore: ").append(toIndentedString(homeScore)).append("\n");
    sb.append("    homeWinProb: ").append(toIndentedString(homeWinProb)).append("\n");
    sb.append("    playId: ").append(toIndentedString(playId)).append("\n");
    sb.append("    playNumber: ").append(toIndentedString(playNumber)).append("\n");
    sb.append("    playText: ").append(toIndentedString(playText)).append("\n");
    sb.append("    spread: ").append(toIndentedString(spread)).append("\n");
    sb.append("    timeRemaining: ").append(toIndentedString(timeRemaining)).append("\n");
    sb.append("    yardLine: ").append(toIndentedString(yardLine)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("away");
    openapiFields.add("awayId");
    openapiFields.add("awayScore");
    openapiFields.add("distance");
    openapiFields.add("down");
    openapiFields.add("gamesId");
    openapiFields.add("home");
    openapiFields.add("homeBall");
    openapiFields.add("homeId");
    openapiFields.add("homeScore");
    openapiFields.add("homeWinProb");
    openapiFields.add("playId");
    openapiFields.add("playNumber");
    openapiFields.add("playText");
    openapiFields.add("spread");
    openapiFields.add("timeRemaining");
    openapiFields.add("yardLine");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlayWP
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlayWP.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayWP is not found in the empty JSON string", PlayWP.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlayWP.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlayWP` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("away") != null && !jsonObj.get("away").isJsonNull()) && !jsonObj.get("away").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `away` to be a primitive type in the JSON string but got `%s`", jsonObj.get("away").toString()));
      }
      if ((jsonObj.get("home") != null && !jsonObj.get("home").isJsonNull()) && !jsonObj.get("home").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `home` to be a primitive type in the JSON string but got `%s`", jsonObj.get("home").toString()));
      }
      if ((jsonObj.get("playText") != null && !jsonObj.get("playText").isJsonNull()) && !jsonObj.get("playText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `playText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("playText").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayWP.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayWP' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayWP> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayWP.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayWP>() {
           @Override
           public void write(JsonWriter out, PlayWP value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayWP read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlayWP given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlayWP
   * @throws IOException if the JSON string is invalid with respect to PlayWP
   */
  public static PlayWP fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayWP.class);
  }

  /**
   * Convert an instance of PlayWP to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

