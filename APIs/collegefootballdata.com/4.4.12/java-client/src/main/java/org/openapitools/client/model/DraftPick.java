/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DraftPickHometownInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DraftPick
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DraftPick {
  public static final String SERIALIZED_NAME_COLLEGE_ATHLETE_ID = "collegeAthleteId";
  @SerializedName(SERIALIZED_NAME_COLLEGE_ATHLETE_ID)
  private Integer collegeAthleteId;

  public static final String SERIALIZED_NAME_COLLEGE_CONFERENCE = "collegeConference";
  @SerializedName(SERIALIZED_NAME_COLLEGE_CONFERENCE)
  private String collegeConference;

  public static final String SERIALIZED_NAME_COLLEGE_ID = "collegeId";
  @SerializedName(SERIALIZED_NAME_COLLEGE_ID)
  private Integer collegeId;

  public static final String SERIALIZED_NAME_COLLEGE_TEAM = "collegeTeam";
  @SerializedName(SERIALIZED_NAME_COLLEGE_TEAM)
  private String collegeTeam;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_HOMETOWN_INFO = "hometownInfo";
  @SerializedName(SERIALIZED_NAME_HOMETOWN_INFO)
  private DraftPickHometownInfo hometownInfo;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NFL_ATHLETE_ID = "nflAthleteId";
  @SerializedName(SERIALIZED_NAME_NFL_ATHLETE_ID)
  private Integer nflAthleteId;

  public static final String SERIALIZED_NAME_NFL_TEAM = "nflTeam";
  @SerializedName(SERIALIZED_NAME_NFL_TEAM)
  private String nflTeam;

  public static final String SERIALIZED_NAME_OVERALL = "overall";
  @SerializedName(SERIALIZED_NAME_OVERALL)
  private Integer overall;

  public static final String SERIALIZED_NAME_PICK = "pick";
  @SerializedName(SERIALIZED_NAME_PICK)
  private Integer pick;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_PRE_DRAFT_GRADE = "preDraftGrade";
  @SerializedName(SERIALIZED_NAME_PRE_DRAFT_GRADE)
  private Integer preDraftGrade;

  public static final String SERIALIZED_NAME_PRE_DRAFT_POSITION_RANKING = "preDraftPositionRanking";
  @SerializedName(SERIALIZED_NAME_PRE_DRAFT_POSITION_RANKING)
  private Integer preDraftPositionRanking;

  public static final String SERIALIZED_NAME_PRE_DRAFT_RANKING = "preDraftRanking";
  @SerializedName(SERIALIZED_NAME_PRE_DRAFT_RANKING)
  private Integer preDraftRanking;

  public static final String SERIALIZED_NAME_ROUND = "round";
  @SerializedName(SERIALIZED_NAME_ROUND)
  private Integer round;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Integer weight;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Integer year;

  public DraftPick() {
  }

  public DraftPick collegeAthleteId(Integer collegeAthleteId) {
    this.collegeAthleteId = collegeAthleteId;
    return this;
  }

  /**
   * Get collegeAthleteId
   * @return collegeAthleteId
   */
  @javax.annotation.Nullable
  public Integer getCollegeAthleteId() {
    return collegeAthleteId;
  }

  public void setCollegeAthleteId(Integer collegeAthleteId) {
    this.collegeAthleteId = collegeAthleteId;
  }


  public DraftPick collegeConference(String collegeConference) {
    this.collegeConference = collegeConference;
    return this;
  }

  /**
   * Get collegeConference
   * @return collegeConference
   */
  @javax.annotation.Nullable
  public String getCollegeConference() {
    return collegeConference;
  }

  public void setCollegeConference(String collegeConference) {
    this.collegeConference = collegeConference;
  }


  public DraftPick collegeId(Integer collegeId) {
    this.collegeId = collegeId;
    return this;
  }

  /**
   * Get collegeId
   * @return collegeId
   */
  @javax.annotation.Nullable
  public Integer getCollegeId() {
    return collegeId;
  }

  public void setCollegeId(Integer collegeId) {
    this.collegeId = collegeId;
  }


  public DraftPick collegeTeam(String collegeTeam) {
    this.collegeTeam = collegeTeam;
    return this;
  }

  /**
   * Get collegeTeam
   * @return collegeTeam
   */
  @javax.annotation.Nullable
  public String getCollegeTeam() {
    return collegeTeam;
  }

  public void setCollegeTeam(String collegeTeam) {
    this.collegeTeam = collegeTeam;
  }


  public DraftPick height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Get height
   * @return height
   */
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public DraftPick hometownInfo(DraftPickHometownInfo hometownInfo) {
    this.hometownInfo = hometownInfo;
    return this;
  }

  /**
   * Get hometownInfo
   * @return hometownInfo
   */
  @javax.annotation.Nullable
  public DraftPickHometownInfo getHometownInfo() {
    return hometownInfo;
  }

  public void setHometownInfo(DraftPickHometownInfo hometownInfo) {
    this.hometownInfo = hometownInfo;
  }


  public DraftPick name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DraftPick nflAthleteId(Integer nflAthleteId) {
    this.nflAthleteId = nflAthleteId;
    return this;
  }

  /**
   * Get nflAthleteId
   * @return nflAthleteId
   */
  @javax.annotation.Nullable
  public Integer getNflAthleteId() {
    return nflAthleteId;
  }

  public void setNflAthleteId(Integer nflAthleteId) {
    this.nflAthleteId = nflAthleteId;
  }


  public DraftPick nflTeam(String nflTeam) {
    this.nflTeam = nflTeam;
    return this;
  }

  /**
   * Get nflTeam
   * @return nflTeam
   */
  @javax.annotation.Nullable
  public String getNflTeam() {
    return nflTeam;
  }

  public void setNflTeam(String nflTeam) {
    this.nflTeam = nflTeam;
  }


  public DraftPick overall(Integer overall) {
    this.overall = overall;
    return this;
  }

  /**
   * Get overall
   * @return overall
   */
  @javax.annotation.Nullable
  public Integer getOverall() {
    return overall;
  }

  public void setOverall(Integer overall) {
    this.overall = overall;
  }


  public DraftPick pick(Integer pick) {
    this.pick = pick;
    return this;
  }

  /**
   * Get pick
   * @return pick
   */
  @javax.annotation.Nullable
  public Integer getPick() {
    return pick;
  }

  public void setPick(Integer pick) {
    this.pick = pick;
  }


  public DraftPick position(String position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }


  public DraftPick preDraftGrade(Integer preDraftGrade) {
    this.preDraftGrade = preDraftGrade;
    return this;
  }

  /**
   * Get preDraftGrade
   * @return preDraftGrade
   */
  @javax.annotation.Nullable
  public Integer getPreDraftGrade() {
    return preDraftGrade;
  }

  public void setPreDraftGrade(Integer preDraftGrade) {
    this.preDraftGrade = preDraftGrade;
  }


  public DraftPick preDraftPositionRanking(Integer preDraftPositionRanking) {
    this.preDraftPositionRanking = preDraftPositionRanking;
    return this;
  }

  /**
   * Get preDraftPositionRanking
   * @return preDraftPositionRanking
   */
  @javax.annotation.Nullable
  public Integer getPreDraftPositionRanking() {
    return preDraftPositionRanking;
  }

  public void setPreDraftPositionRanking(Integer preDraftPositionRanking) {
    this.preDraftPositionRanking = preDraftPositionRanking;
  }


  public DraftPick preDraftRanking(Integer preDraftRanking) {
    this.preDraftRanking = preDraftRanking;
    return this;
  }

  /**
   * Get preDraftRanking
   * @return preDraftRanking
   */
  @javax.annotation.Nullable
  public Integer getPreDraftRanking() {
    return preDraftRanking;
  }

  public void setPreDraftRanking(Integer preDraftRanking) {
    this.preDraftRanking = preDraftRanking;
  }


  public DraftPick round(Integer round) {
    this.round = round;
    return this;
  }

  /**
   * Get round
   * @return round
   */
  @javax.annotation.Nullable
  public Integer getRound() {
    return round;
  }

  public void setRound(Integer round) {
    this.round = round;
  }


  public DraftPick weight(Integer weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Get weight
   * @return weight
   */
  @javax.annotation.Nullable
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }


  public DraftPick year(Integer year) {
    this.year = year;
    return this;
  }

  /**
   * Get year
   * @return year
   */
  @javax.annotation.Nullable
  public Integer getYear() {
    return year;
  }

  public void setYear(Integer year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DraftPick draftPick = (DraftPick) o;
    return Objects.equals(this.collegeAthleteId, draftPick.collegeAthleteId) &&
        Objects.equals(this.collegeConference, draftPick.collegeConference) &&
        Objects.equals(this.collegeId, draftPick.collegeId) &&
        Objects.equals(this.collegeTeam, draftPick.collegeTeam) &&
        Objects.equals(this.height, draftPick.height) &&
        Objects.equals(this.hometownInfo, draftPick.hometownInfo) &&
        Objects.equals(this.name, draftPick.name) &&
        Objects.equals(this.nflAthleteId, draftPick.nflAthleteId) &&
        Objects.equals(this.nflTeam, draftPick.nflTeam) &&
        Objects.equals(this.overall, draftPick.overall) &&
        Objects.equals(this.pick, draftPick.pick) &&
        Objects.equals(this.position, draftPick.position) &&
        Objects.equals(this.preDraftGrade, draftPick.preDraftGrade) &&
        Objects.equals(this.preDraftPositionRanking, draftPick.preDraftPositionRanking) &&
        Objects.equals(this.preDraftRanking, draftPick.preDraftRanking) &&
        Objects.equals(this.round, draftPick.round) &&
        Objects.equals(this.weight, draftPick.weight) &&
        Objects.equals(this.year, draftPick.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collegeAthleteId, collegeConference, collegeId, collegeTeam, height, hometownInfo, name, nflAthleteId, nflTeam, overall, pick, position, preDraftGrade, preDraftPositionRanking, preDraftRanking, round, weight, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DraftPick {\n");
    sb.append("    collegeAthleteId: ").append(toIndentedString(collegeAthleteId)).append("\n");
    sb.append("    collegeConference: ").append(toIndentedString(collegeConference)).append("\n");
    sb.append("    collegeId: ").append(toIndentedString(collegeId)).append("\n");
    sb.append("    collegeTeam: ").append(toIndentedString(collegeTeam)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    hometownInfo: ").append(toIndentedString(hometownInfo)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nflAthleteId: ").append(toIndentedString(nflAthleteId)).append("\n");
    sb.append("    nflTeam: ").append(toIndentedString(nflTeam)).append("\n");
    sb.append("    overall: ").append(toIndentedString(overall)).append("\n");
    sb.append("    pick: ").append(toIndentedString(pick)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    preDraftGrade: ").append(toIndentedString(preDraftGrade)).append("\n");
    sb.append("    preDraftPositionRanking: ").append(toIndentedString(preDraftPositionRanking)).append("\n");
    sb.append("    preDraftRanking: ").append(toIndentedString(preDraftRanking)).append("\n");
    sb.append("    round: ").append(toIndentedString(round)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("collegeAthleteId");
    openapiFields.add("collegeConference");
    openapiFields.add("collegeId");
    openapiFields.add("collegeTeam");
    openapiFields.add("height");
    openapiFields.add("hometownInfo");
    openapiFields.add("name");
    openapiFields.add("nflAthleteId");
    openapiFields.add("nflTeam");
    openapiFields.add("overall");
    openapiFields.add("pick");
    openapiFields.add("position");
    openapiFields.add("preDraftGrade");
    openapiFields.add("preDraftPositionRanking");
    openapiFields.add("preDraftRanking");
    openapiFields.add("round");
    openapiFields.add("weight");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DraftPick
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DraftPick.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DraftPick is not found in the empty JSON string", DraftPick.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DraftPick.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DraftPick` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("collegeConference") != null && !jsonObj.get("collegeConference").isJsonNull()) && !jsonObj.get("collegeConference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collegeConference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collegeConference").toString()));
      }
      if ((jsonObj.get("collegeTeam") != null && !jsonObj.get("collegeTeam").isJsonNull()) && !jsonObj.get("collegeTeam").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collegeTeam` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collegeTeam").toString()));
      }
      // validate the optional field `hometownInfo`
      if (jsonObj.get("hometownInfo") != null && !jsonObj.get("hometownInfo").isJsonNull()) {
        DraftPickHometownInfo.validateJsonElement(jsonObj.get("hometownInfo"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("nflTeam") != null && !jsonObj.get("nflTeam").isJsonNull()) && !jsonObj.get("nflTeam").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nflTeam` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nflTeam").toString()));
      }
      if ((jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) && !jsonObj.get("position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("position").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DraftPick.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DraftPick' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DraftPick> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DraftPick.class));

       return (TypeAdapter<T>) new TypeAdapter<DraftPick>() {
           @Override
           public void write(JsonWriter out, DraftPick value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DraftPick read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DraftPick given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DraftPick
   * @throws IOException if the JSON string is invalid with respect to DraftPick
   */
  public static DraftPick fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DraftPick.class);
  }

  /**
   * Convert an instance of DraftPick to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

