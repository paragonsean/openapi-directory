/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BoxScorePlayersPpaInner;
import org.openapitools.client.model.BoxScorePlayersUsageInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BoxScorePlayers
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BoxScorePlayers {
  public static final String SERIALIZED_NAME_PPA = "ppa";
  @SerializedName(SERIALIZED_NAME_PPA)
  private List<BoxScorePlayersPpaInner> ppa = new ArrayList<>();

  public static final String SERIALIZED_NAME_USAGE = "usage";
  @SerializedName(SERIALIZED_NAME_USAGE)
  private List<BoxScorePlayersUsageInner> usage = new ArrayList<>();

  public BoxScorePlayers() {
  }

  public BoxScorePlayers ppa(List<BoxScorePlayersPpaInner> ppa) {
    this.ppa = ppa;
    return this;
  }

  public BoxScorePlayers addPpaItem(BoxScorePlayersPpaInner ppaItem) {
    if (this.ppa == null) {
      this.ppa = new ArrayList<>();
    }
    this.ppa.add(ppaItem);
    return this;
  }

  /**
   * Get ppa
   * @return ppa
   */
  @javax.annotation.Nullable
  public List<BoxScorePlayersPpaInner> getPpa() {
    return ppa;
  }

  public void setPpa(List<BoxScorePlayersPpaInner> ppa) {
    this.ppa = ppa;
  }


  public BoxScorePlayers usage(List<BoxScorePlayersUsageInner> usage) {
    this.usage = usage;
    return this;
  }

  public BoxScorePlayers addUsageItem(BoxScorePlayersUsageInner usageItem) {
    if (this.usage == null) {
      this.usage = new ArrayList<>();
    }
    this.usage.add(usageItem);
    return this;
  }

  /**
   * Get usage
   * @return usage
   */
  @javax.annotation.Nullable
  public List<BoxScorePlayersUsageInner> getUsage() {
    return usage;
  }

  public void setUsage(List<BoxScorePlayersUsageInner> usage) {
    this.usage = usage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BoxScorePlayers boxScorePlayers = (BoxScorePlayers) o;
    return Objects.equals(this.ppa, boxScorePlayers.ppa) &&
        Objects.equals(this.usage, boxScorePlayers.usage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ppa, usage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BoxScorePlayers {\n");
    sb.append("    ppa: ").append(toIndentedString(ppa)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ppa");
    openapiFields.add("usage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BoxScorePlayers
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BoxScorePlayers.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BoxScorePlayers is not found in the empty JSON string", BoxScorePlayers.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BoxScorePlayers.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BoxScorePlayers` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("ppa") != null && !jsonObj.get("ppa").isJsonNull()) {
        JsonArray jsonArrayppa = jsonObj.getAsJsonArray("ppa");
        if (jsonArrayppa != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ppa").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ppa` to be an array in the JSON string but got `%s`", jsonObj.get("ppa").toString()));
          }

          // validate the optional field `ppa` (array)
          for (int i = 0; i < jsonArrayppa.size(); i++) {
            BoxScorePlayersPpaInner.validateJsonElement(jsonArrayppa.get(i));
          };
        }
      }
      if (jsonObj.get("usage") != null && !jsonObj.get("usage").isJsonNull()) {
        JsonArray jsonArrayusage = jsonObj.getAsJsonArray("usage");
        if (jsonArrayusage != null) {
          // ensure the json data is an array
          if (!jsonObj.get("usage").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `usage` to be an array in the JSON string but got `%s`", jsonObj.get("usage").toString()));
          }

          // validate the optional field `usage` (array)
          for (int i = 0; i < jsonArrayusage.size(); i++) {
            BoxScorePlayersUsageInner.validateJsonElement(jsonArrayusage.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BoxScorePlayers.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BoxScorePlayers' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BoxScorePlayers> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BoxScorePlayers.class));

       return (TypeAdapter<T>) new TypeAdapter<BoxScorePlayers>() {
           @Override
           public void write(JsonWriter out, BoxScorePlayers value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BoxScorePlayers read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BoxScorePlayers given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BoxScorePlayers
   * @throws IOException if the JSON string is invalid with respect to BoxScorePlayers
   */
  public static BoxScorePlayers fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BoxScorePlayers.class);
  }

  /**
   * Convert an instance of BoxScorePlayers to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

