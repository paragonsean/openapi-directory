/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GameWeather
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GameWeather {
  public static final String SERIALIZED_NAME_AWAY_CONFERENCE = "awayConference";
  @SerializedName(SERIALIZED_NAME_AWAY_CONFERENCE)
  private String awayConference;

  public static final String SERIALIZED_NAME_AWAY_TEAM = "awayTeam";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM)
  private String awayTeam;

  public static final String SERIALIZED_NAME_DEW_POINT = "dewPoint";
  @SerializedName(SERIALIZED_NAME_DEW_POINT)
  private BigDecimal dewPoint;

  public static final String SERIALIZED_NAME_GAME_INDOORS = "gameIndoors";
  @SerializedName(SERIALIZED_NAME_GAME_INDOORS)
  private Boolean gameIndoors;

  public static final String SERIALIZED_NAME_HOME_CONFERENCE = "homeConference";
  @SerializedName(SERIALIZED_NAME_HOME_CONFERENCE)
  private String homeConference;

  public static final String SERIALIZED_NAME_HOME_TEAM = "homeTeam";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM)
  private String homeTeam;

  public static final String SERIALIZED_NAME_HUMIDITY = "humidity";
  @SerializedName(SERIALIZED_NAME_HUMIDITY)
  private BigDecimal humidity;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_PRECIPITATION = "precipitation";
  @SerializedName(SERIALIZED_NAME_PRECIPITATION)
  private BigDecimal precipitation;

  public static final String SERIALIZED_NAME_PRESSURE = "pressure";
  @SerializedName(SERIALIZED_NAME_PRESSURE)
  private BigDecimal pressure;

  public static final String SERIALIZED_NAME_SEASON = "season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private Integer season;

  public static final String SERIALIZED_NAME_SEASON_TYPE = "seasonType";
  @SerializedName(SERIALIZED_NAME_SEASON_TYPE)
  private String seasonType;

  public static final String SERIALIZED_NAME_SNOWFALL = "snowfall";
  @SerializedName(SERIALIZED_NAME_SNOWFALL)
  private BigDecimal snowfall;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_TEMPERATURE = "temperature";
  @SerializedName(SERIALIZED_NAME_TEMPERATURE)
  private BigDecimal temperature;

  public static final String SERIALIZED_NAME_VENUE = "venue";
  @SerializedName(SERIALIZED_NAME_VENUE)
  private String venue;

  public static final String SERIALIZED_NAME_VENUE_ID = "venueId";
  @SerializedName(SERIALIZED_NAME_VENUE_ID)
  private Integer venueId;

  public static final String SERIALIZED_NAME_WEATHER_CONDITION = "weatherCondition";
  @SerializedName(SERIALIZED_NAME_WEATHER_CONDITION)
  private String weatherCondition;

  public static final String SERIALIZED_NAME_WEATHER_CONDITION_CODE = "weatherConditionCode";
  @SerializedName(SERIALIZED_NAME_WEATHER_CONDITION_CODE)
  private Integer weatherConditionCode;

  public static final String SERIALIZED_NAME_WEEK = "week";
  @SerializedName(SERIALIZED_NAME_WEEK)
  private Integer week;

  public static final String SERIALIZED_NAME_WIND_DIRECTION = "windDirection";
  @SerializedName(SERIALIZED_NAME_WIND_DIRECTION)
  private BigDecimal windDirection;

  public static final String SERIALIZED_NAME_WIND_SPEED = "windSpeed";
  @SerializedName(SERIALIZED_NAME_WIND_SPEED)
  private BigDecimal windSpeed;

  public GameWeather() {
  }

  public GameWeather awayConference(String awayConference) {
    this.awayConference = awayConference;
    return this;
  }

  /**
   * Get awayConference
   * @return awayConference
   */
  @javax.annotation.Nullable
  public String getAwayConference() {
    return awayConference;
  }

  public void setAwayConference(String awayConference) {
    this.awayConference = awayConference;
  }


  public GameWeather awayTeam(String awayTeam) {
    this.awayTeam = awayTeam;
    return this;
  }

  /**
   * Get awayTeam
   * @return awayTeam
   */
  @javax.annotation.Nullable
  public String getAwayTeam() {
    return awayTeam;
  }

  public void setAwayTeam(String awayTeam) {
    this.awayTeam = awayTeam;
  }


  public GameWeather dewPoint(BigDecimal dewPoint) {
    this.dewPoint = dewPoint;
    return this;
  }

  /**
   * Get dewPoint
   * @return dewPoint
   */
  @javax.annotation.Nullable
  public BigDecimal getDewPoint() {
    return dewPoint;
  }

  public void setDewPoint(BigDecimal dewPoint) {
    this.dewPoint = dewPoint;
  }


  public GameWeather gameIndoors(Boolean gameIndoors) {
    this.gameIndoors = gameIndoors;
    return this;
  }

  /**
   * Get gameIndoors
   * @return gameIndoors
   */
  @javax.annotation.Nullable
  public Boolean getGameIndoors() {
    return gameIndoors;
  }

  public void setGameIndoors(Boolean gameIndoors) {
    this.gameIndoors = gameIndoors;
  }


  public GameWeather homeConference(String homeConference) {
    this.homeConference = homeConference;
    return this;
  }

  /**
   * Get homeConference
   * @return homeConference
   */
  @javax.annotation.Nullable
  public String getHomeConference() {
    return homeConference;
  }

  public void setHomeConference(String homeConference) {
    this.homeConference = homeConference;
  }


  public GameWeather homeTeam(String homeTeam) {
    this.homeTeam = homeTeam;
    return this;
  }

  /**
   * Get homeTeam
   * @return homeTeam
   */
  @javax.annotation.Nullable
  public String getHomeTeam() {
    return homeTeam;
  }

  public void setHomeTeam(String homeTeam) {
    this.homeTeam = homeTeam;
  }


  public GameWeather humidity(BigDecimal humidity) {
    this.humidity = humidity;
    return this;
  }

  /**
   * Get humidity
   * @return humidity
   */
  @javax.annotation.Nullable
  public BigDecimal getHumidity() {
    return humidity;
  }

  public void setHumidity(BigDecimal humidity) {
    this.humidity = humidity;
  }


  public GameWeather id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public GameWeather precipitation(BigDecimal precipitation) {
    this.precipitation = precipitation;
    return this;
  }

  /**
   * Get precipitation
   * @return precipitation
   */
  @javax.annotation.Nullable
  public BigDecimal getPrecipitation() {
    return precipitation;
  }

  public void setPrecipitation(BigDecimal precipitation) {
    this.precipitation = precipitation;
  }


  public GameWeather pressure(BigDecimal pressure) {
    this.pressure = pressure;
    return this;
  }

  /**
   * Get pressure
   * @return pressure
   */
  @javax.annotation.Nullable
  public BigDecimal getPressure() {
    return pressure;
  }

  public void setPressure(BigDecimal pressure) {
    this.pressure = pressure;
  }


  public GameWeather season(Integer season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public Integer getSeason() {
    return season;
  }

  public void setSeason(Integer season) {
    this.season = season;
  }


  public GameWeather seasonType(String seasonType) {
    this.seasonType = seasonType;
    return this;
  }

  /**
   * Get seasonType
   * @return seasonType
   */
  @javax.annotation.Nullable
  public String getSeasonType() {
    return seasonType;
  }

  public void setSeasonType(String seasonType) {
    this.seasonType = seasonType;
  }


  public GameWeather snowfall(BigDecimal snowfall) {
    this.snowfall = snowfall;
    return this;
  }

  /**
   * Get snowfall
   * @return snowfall
   */
  @javax.annotation.Nullable
  public BigDecimal getSnowfall() {
    return snowfall;
  }

  public void setSnowfall(BigDecimal snowfall) {
    this.snowfall = snowfall;
  }


  public GameWeather startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public GameWeather temperature(BigDecimal temperature) {
    this.temperature = temperature;
    return this;
  }

  /**
   * Get temperature
   * @return temperature
   */
  @javax.annotation.Nullable
  public BigDecimal getTemperature() {
    return temperature;
  }

  public void setTemperature(BigDecimal temperature) {
    this.temperature = temperature;
  }


  public GameWeather venue(String venue) {
    this.venue = venue;
    return this;
  }

  /**
   * Get venue
   * @return venue
   */
  @javax.annotation.Nullable
  public String getVenue() {
    return venue;
  }

  public void setVenue(String venue) {
    this.venue = venue;
  }


  public GameWeather venueId(Integer venueId) {
    this.venueId = venueId;
    return this;
  }

  /**
   * Get venueId
   * @return venueId
   */
  @javax.annotation.Nullable
  public Integer getVenueId() {
    return venueId;
  }

  public void setVenueId(Integer venueId) {
    this.venueId = venueId;
  }


  public GameWeather weatherCondition(String weatherCondition) {
    this.weatherCondition = weatherCondition;
    return this;
  }

  /**
   * Get weatherCondition
   * @return weatherCondition
   */
  @javax.annotation.Nullable
  public String getWeatherCondition() {
    return weatherCondition;
  }

  public void setWeatherCondition(String weatherCondition) {
    this.weatherCondition = weatherCondition;
  }


  public GameWeather weatherConditionCode(Integer weatherConditionCode) {
    this.weatherConditionCode = weatherConditionCode;
    return this;
  }

  /**
   * Get weatherConditionCode
   * @return weatherConditionCode
   */
  @javax.annotation.Nullable
  public Integer getWeatherConditionCode() {
    return weatherConditionCode;
  }

  public void setWeatherConditionCode(Integer weatherConditionCode) {
    this.weatherConditionCode = weatherConditionCode;
  }


  public GameWeather week(Integer week) {
    this.week = week;
    return this;
  }

  /**
   * Get week
   * @return week
   */
  @javax.annotation.Nullable
  public Integer getWeek() {
    return week;
  }

  public void setWeek(Integer week) {
    this.week = week;
  }


  public GameWeather windDirection(BigDecimal windDirection) {
    this.windDirection = windDirection;
    return this;
  }

  /**
   * Get windDirection
   * @return windDirection
   */
  @javax.annotation.Nullable
  public BigDecimal getWindDirection() {
    return windDirection;
  }

  public void setWindDirection(BigDecimal windDirection) {
    this.windDirection = windDirection;
  }


  public GameWeather windSpeed(BigDecimal windSpeed) {
    this.windSpeed = windSpeed;
    return this;
  }

  /**
   * Get windSpeed
   * @return windSpeed
   */
  @javax.annotation.Nullable
  public BigDecimal getWindSpeed() {
    return windSpeed;
  }

  public void setWindSpeed(BigDecimal windSpeed) {
    this.windSpeed = windSpeed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GameWeather gameWeather = (GameWeather) o;
    return Objects.equals(this.awayConference, gameWeather.awayConference) &&
        Objects.equals(this.awayTeam, gameWeather.awayTeam) &&
        Objects.equals(this.dewPoint, gameWeather.dewPoint) &&
        Objects.equals(this.gameIndoors, gameWeather.gameIndoors) &&
        Objects.equals(this.homeConference, gameWeather.homeConference) &&
        Objects.equals(this.homeTeam, gameWeather.homeTeam) &&
        Objects.equals(this.humidity, gameWeather.humidity) &&
        Objects.equals(this.id, gameWeather.id) &&
        Objects.equals(this.precipitation, gameWeather.precipitation) &&
        Objects.equals(this.pressure, gameWeather.pressure) &&
        Objects.equals(this.season, gameWeather.season) &&
        Objects.equals(this.seasonType, gameWeather.seasonType) &&
        Objects.equals(this.snowfall, gameWeather.snowfall) &&
        Objects.equals(this.startTime, gameWeather.startTime) &&
        Objects.equals(this.temperature, gameWeather.temperature) &&
        Objects.equals(this.venue, gameWeather.venue) &&
        Objects.equals(this.venueId, gameWeather.venueId) &&
        Objects.equals(this.weatherCondition, gameWeather.weatherCondition) &&
        Objects.equals(this.weatherConditionCode, gameWeather.weatherConditionCode) &&
        Objects.equals(this.week, gameWeather.week) &&
        Objects.equals(this.windDirection, gameWeather.windDirection) &&
        Objects.equals(this.windSpeed, gameWeather.windSpeed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(awayConference, awayTeam, dewPoint, gameIndoors, homeConference, homeTeam, humidity, id, precipitation, pressure, season, seasonType, snowfall, startTime, temperature, venue, venueId, weatherCondition, weatherConditionCode, week, windDirection, windSpeed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GameWeather {\n");
    sb.append("    awayConference: ").append(toIndentedString(awayConference)).append("\n");
    sb.append("    awayTeam: ").append(toIndentedString(awayTeam)).append("\n");
    sb.append("    dewPoint: ").append(toIndentedString(dewPoint)).append("\n");
    sb.append("    gameIndoors: ").append(toIndentedString(gameIndoors)).append("\n");
    sb.append("    homeConference: ").append(toIndentedString(homeConference)).append("\n");
    sb.append("    homeTeam: ").append(toIndentedString(homeTeam)).append("\n");
    sb.append("    humidity: ").append(toIndentedString(humidity)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    precipitation: ").append(toIndentedString(precipitation)).append("\n");
    sb.append("    pressure: ").append(toIndentedString(pressure)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    seasonType: ").append(toIndentedString(seasonType)).append("\n");
    sb.append("    snowfall: ").append(toIndentedString(snowfall)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    venue: ").append(toIndentedString(venue)).append("\n");
    sb.append("    venueId: ").append(toIndentedString(venueId)).append("\n");
    sb.append("    weatherCondition: ").append(toIndentedString(weatherCondition)).append("\n");
    sb.append("    weatherConditionCode: ").append(toIndentedString(weatherConditionCode)).append("\n");
    sb.append("    week: ").append(toIndentedString(week)).append("\n");
    sb.append("    windDirection: ").append(toIndentedString(windDirection)).append("\n");
    sb.append("    windSpeed: ").append(toIndentedString(windSpeed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("awayConference");
    openapiFields.add("awayTeam");
    openapiFields.add("dewPoint");
    openapiFields.add("gameIndoors");
    openapiFields.add("homeConference");
    openapiFields.add("homeTeam");
    openapiFields.add("humidity");
    openapiFields.add("id");
    openapiFields.add("precipitation");
    openapiFields.add("pressure");
    openapiFields.add("season");
    openapiFields.add("seasonType");
    openapiFields.add("snowfall");
    openapiFields.add("startTime");
    openapiFields.add("temperature");
    openapiFields.add("venue");
    openapiFields.add("venueId");
    openapiFields.add("weatherCondition");
    openapiFields.add("weatherConditionCode");
    openapiFields.add("week");
    openapiFields.add("windDirection");
    openapiFields.add("windSpeed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GameWeather
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GameWeather.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GameWeather is not found in the empty JSON string", GameWeather.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GameWeather.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GameWeather` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("awayConference") != null && !jsonObj.get("awayConference").isJsonNull()) && !jsonObj.get("awayConference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `awayConference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("awayConference").toString()));
      }
      if ((jsonObj.get("awayTeam") != null && !jsonObj.get("awayTeam").isJsonNull()) && !jsonObj.get("awayTeam").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `awayTeam` to be a primitive type in the JSON string but got `%s`", jsonObj.get("awayTeam").toString()));
      }
      if ((jsonObj.get("homeConference") != null && !jsonObj.get("homeConference").isJsonNull()) && !jsonObj.get("homeConference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homeConference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homeConference").toString()));
      }
      if ((jsonObj.get("homeTeam") != null && !jsonObj.get("homeTeam").isJsonNull()) && !jsonObj.get("homeTeam").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homeTeam` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homeTeam").toString()));
      }
      if ((jsonObj.get("seasonType") != null && !jsonObj.get("seasonType").isJsonNull()) && !jsonObj.get("seasonType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seasonType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seasonType").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("venue") != null && !jsonObj.get("venue").isJsonNull()) && !jsonObj.get("venue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `venue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("venue").toString()));
      }
      if ((jsonObj.get("weatherCondition") != null && !jsonObj.get("weatherCondition").isJsonNull()) && !jsonObj.get("weatherCondition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `weatherCondition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("weatherCondition").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GameWeather.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GameWeather' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GameWeather> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GameWeather.class));

       return (TypeAdapter<T>) new TypeAdapter<GameWeather>() {
           @Override
           public void write(JsonWriter out, GameWeather value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GameWeather read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GameWeather given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GameWeather
   * @throws IOException if the JSON string is invalid with respect to GameWeather
   */
  public static GameWeather fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GameWeather.class);
  }

  /**
   * Convert an instance of GameWeather to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

