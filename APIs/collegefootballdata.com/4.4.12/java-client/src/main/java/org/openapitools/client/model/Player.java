/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Player
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Player {
  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_HOME_CITY = "home_city";
  @SerializedName(SERIALIZED_NAME_HOME_CITY)
  private String homeCity;

  public static final String SERIALIZED_NAME_HOME_COUNTRY = "home_country";
  @SerializedName(SERIALIZED_NAME_HOME_COUNTRY)
  private String homeCountry;

  public static final String SERIALIZED_NAME_HOME_COUNTY_FIPS = "home_county_fips";
  @SerializedName(SERIALIZED_NAME_HOME_COUNTY_FIPS)
  private String homeCountyFips;

  public static final String SERIALIZED_NAME_HOME_LATITUDE = "home_latitude";
  @SerializedName(SERIALIZED_NAME_HOME_LATITUDE)
  private BigDecimal homeLatitude;

  public static final String SERIALIZED_NAME_HOME_LONGITUDE = "home_longitude";
  @SerializedName(SERIALIZED_NAME_HOME_LONGITUDE)
  private BigDecimal homeLongitude;

  public static final String SERIALIZED_NAME_HOME_STATE = "home_state";
  @SerializedName(SERIALIZED_NAME_HOME_STATE)
  private String homeState;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_JERSEY = "jersey";
  @SerializedName(SERIALIZED_NAME_JERSEY)
  private Integer jersey;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_RECRUIT_IDS = "recruit_ids";
  @SerializedName(SERIALIZED_NAME_RECRUIT_IDS)
  private List<Integer> recruitIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Integer weight;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Integer year;

  public Player() {
  }

  public Player firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public Player height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Get height
   * @return height
   */
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public Player homeCity(String homeCity) {
    this.homeCity = homeCity;
    return this;
  }

  /**
   * Get homeCity
   * @return homeCity
   */
  @javax.annotation.Nullable
  public String getHomeCity() {
    return homeCity;
  }

  public void setHomeCity(String homeCity) {
    this.homeCity = homeCity;
  }


  public Player homeCountry(String homeCountry) {
    this.homeCountry = homeCountry;
    return this;
  }

  /**
   * Get homeCountry
   * @return homeCountry
   */
  @javax.annotation.Nullable
  public String getHomeCountry() {
    return homeCountry;
  }

  public void setHomeCountry(String homeCountry) {
    this.homeCountry = homeCountry;
  }


  public Player homeCountyFips(String homeCountyFips) {
    this.homeCountyFips = homeCountyFips;
    return this;
  }

  /**
   * Get homeCountyFips
   * @return homeCountyFips
   */
  @javax.annotation.Nullable
  public String getHomeCountyFips() {
    return homeCountyFips;
  }

  public void setHomeCountyFips(String homeCountyFips) {
    this.homeCountyFips = homeCountyFips;
  }


  public Player homeLatitude(BigDecimal homeLatitude) {
    this.homeLatitude = homeLatitude;
    return this;
  }

  /**
   * Get homeLatitude
   * @return homeLatitude
   */
  @javax.annotation.Nullable
  public BigDecimal getHomeLatitude() {
    return homeLatitude;
  }

  public void setHomeLatitude(BigDecimal homeLatitude) {
    this.homeLatitude = homeLatitude;
  }


  public Player homeLongitude(BigDecimal homeLongitude) {
    this.homeLongitude = homeLongitude;
    return this;
  }

  /**
   * Get homeLongitude
   * @return homeLongitude
   */
  @javax.annotation.Nullable
  public BigDecimal getHomeLongitude() {
    return homeLongitude;
  }

  public void setHomeLongitude(BigDecimal homeLongitude) {
    this.homeLongitude = homeLongitude;
  }


  public Player homeState(String homeState) {
    this.homeState = homeState;
    return this;
  }

  /**
   * Get homeState
   * @return homeState
   */
  @javax.annotation.Nullable
  public String getHomeState() {
    return homeState;
  }

  public void setHomeState(String homeState) {
    this.homeState = homeState;
  }


  public Player id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Player jersey(Integer jersey) {
    this.jersey = jersey;
    return this;
  }

  /**
   * Get jersey
   * @return jersey
   */
  @javax.annotation.Nullable
  public Integer getJersey() {
    return jersey;
  }

  public void setJersey(Integer jersey) {
    this.jersey = jersey;
  }


  public Player lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Get lastName
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public Player position(String position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }


  public Player recruitIds(List<Integer> recruitIds) {
    this.recruitIds = recruitIds;
    return this;
  }

  public Player addRecruitIdsItem(Integer recruitIdsItem) {
    if (this.recruitIds == null) {
      this.recruitIds = new ArrayList<>();
    }
    this.recruitIds.add(recruitIdsItem);
    return this;
  }

  /**
   * Get recruitIds
   * @return recruitIds
   */
  @javax.annotation.Nullable
  public List<Integer> getRecruitIds() {
    return recruitIds;
  }

  public void setRecruitIds(List<Integer> recruitIds) {
    this.recruitIds = recruitIds;
  }


  public Player team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public Player weight(Integer weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Get weight
   * @return weight
   */
  @javax.annotation.Nullable
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }


  public Player year(Integer year) {
    this.year = year;
    return this;
  }

  /**
   * Get year
   * @return year
   */
  @javax.annotation.Nullable
  public Integer getYear() {
    return year;
  }

  public void setYear(Integer year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Player player = (Player) o;
    return Objects.equals(this.firstName, player.firstName) &&
        Objects.equals(this.height, player.height) &&
        Objects.equals(this.homeCity, player.homeCity) &&
        Objects.equals(this.homeCountry, player.homeCountry) &&
        Objects.equals(this.homeCountyFips, player.homeCountyFips) &&
        Objects.equals(this.homeLatitude, player.homeLatitude) &&
        Objects.equals(this.homeLongitude, player.homeLongitude) &&
        Objects.equals(this.homeState, player.homeState) &&
        Objects.equals(this.id, player.id) &&
        Objects.equals(this.jersey, player.jersey) &&
        Objects.equals(this.lastName, player.lastName) &&
        Objects.equals(this.position, player.position) &&
        Objects.equals(this.recruitIds, player.recruitIds) &&
        Objects.equals(this.team, player.team) &&
        Objects.equals(this.weight, player.weight) &&
        Objects.equals(this.year, player.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstName, height, homeCity, homeCountry, homeCountyFips, homeLatitude, homeLongitude, homeState, id, jersey, lastName, position, recruitIds, team, weight, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Player {\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    homeCity: ").append(toIndentedString(homeCity)).append("\n");
    sb.append("    homeCountry: ").append(toIndentedString(homeCountry)).append("\n");
    sb.append("    homeCountyFips: ").append(toIndentedString(homeCountyFips)).append("\n");
    sb.append("    homeLatitude: ").append(toIndentedString(homeLatitude)).append("\n");
    sb.append("    homeLongitude: ").append(toIndentedString(homeLongitude)).append("\n");
    sb.append("    homeState: ").append(toIndentedString(homeState)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jersey: ").append(toIndentedString(jersey)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    recruitIds: ").append(toIndentedString(recruitIds)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("first_name");
    openapiFields.add("height");
    openapiFields.add("home_city");
    openapiFields.add("home_country");
    openapiFields.add("home_county_fips");
    openapiFields.add("home_latitude");
    openapiFields.add("home_longitude");
    openapiFields.add("home_state");
    openapiFields.add("id");
    openapiFields.add("jersey");
    openapiFields.add("last_name");
    openapiFields.add("position");
    openapiFields.add("recruit_ids");
    openapiFields.add("team");
    openapiFields.add("weight");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Player
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Player.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Player is not found in the empty JSON string", Player.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Player.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Player` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonNull()) && !jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if ((jsonObj.get("home_city") != null && !jsonObj.get("home_city").isJsonNull()) && !jsonObj.get("home_city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `home_city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("home_city").toString()));
      }
      if ((jsonObj.get("home_country") != null && !jsonObj.get("home_country").isJsonNull()) && !jsonObj.get("home_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `home_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("home_country").toString()));
      }
      if ((jsonObj.get("home_county_fips") != null && !jsonObj.get("home_county_fips").isJsonNull()) && !jsonObj.get("home_county_fips").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `home_county_fips` to be a primitive type in the JSON string but got `%s`", jsonObj.get("home_county_fips").toString()));
      }
      if ((jsonObj.get("home_state") != null && !jsonObj.get("home_state").isJsonNull()) && !jsonObj.get("home_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `home_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("home_state").toString()));
      }
      if ((jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonNull()) && !jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if ((jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) && !jsonObj.get("position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("position").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("recruit_ids") != null && !jsonObj.get("recruit_ids").isJsonNull() && !jsonObj.get("recruit_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `recruit_ids` to be an array in the JSON string but got `%s`", jsonObj.get("recruit_ids").toString()));
      }
      if ((jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) && !jsonObj.get("team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Player.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Player' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Player> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Player.class));

       return (TypeAdapter<T>) new TypeAdapter<Player>() {
           @Override
           public void write(JsonWriter out, Player value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Player read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Player given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Player
   * @throws IOException if the JSON string is invalid with respect to Player
   */
  public static Player fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Player.class);
  }

  /**
   * Convert an instance of Player to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

