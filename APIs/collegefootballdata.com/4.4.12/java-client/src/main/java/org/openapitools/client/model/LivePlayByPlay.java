/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LivePlayByPlayDrivesInner;
import org.openapitools.client.model.LivePlayByPlayTeamsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LivePlayByPlay
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LivePlayByPlay {
  public static final String SERIALIZED_NAME_CLOCK = "clock";
  @SerializedName(SERIALIZED_NAME_CLOCK)
  private String clock;

  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private Integer distance;

  public static final String SERIALIZED_NAME_DOWN = "down";
  @SerializedName(SERIALIZED_NAME_DOWN)
  private Integer down;

  public static final String SERIALIZED_NAME_DRIVES = "drives";
  @SerializedName(SERIALIZED_NAME_DRIVES)
  private List<LivePlayByPlayDrivesInner> drives = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private Integer period;

  public static final String SERIALIZED_NAME_POSSESSION = "possession";
  @SerializedName(SERIALIZED_NAME_POSSESSION)
  private String possession;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TEAMS = "teams";
  @SerializedName(SERIALIZED_NAME_TEAMS)
  private List<LivePlayByPlayTeamsInner> teams = new ArrayList<>();

  public static final String SERIALIZED_NAME_YARDS_TO_GOAL = "yardsToGoal";
  @SerializedName(SERIALIZED_NAME_YARDS_TO_GOAL)
  private Integer yardsToGoal;

  public LivePlayByPlay() {
  }

  public LivePlayByPlay clock(String clock) {
    this.clock = clock;
    return this;
  }

  /**
   * Get clock
   * @return clock
   */
  @javax.annotation.Nullable
  public String getClock() {
    return clock;
  }

  public void setClock(String clock) {
    this.clock = clock;
  }


  public LivePlayByPlay distance(Integer distance) {
    this.distance = distance;
    return this;
  }

  /**
   * Get distance
   * @return distance
   */
  @javax.annotation.Nullable
  public Integer getDistance() {
    return distance;
  }

  public void setDistance(Integer distance) {
    this.distance = distance;
  }


  public LivePlayByPlay down(Integer down) {
    this.down = down;
    return this;
  }

  /**
   * Get down
   * @return down
   */
  @javax.annotation.Nullable
  public Integer getDown() {
    return down;
  }

  public void setDown(Integer down) {
    this.down = down;
  }


  public LivePlayByPlay drives(List<LivePlayByPlayDrivesInner> drives) {
    this.drives = drives;
    return this;
  }

  public LivePlayByPlay addDrivesItem(LivePlayByPlayDrivesInner drivesItem) {
    if (this.drives == null) {
      this.drives = new ArrayList<>();
    }
    this.drives.add(drivesItem);
    return this;
  }

  /**
   * Get drives
   * @return drives
   */
  @javax.annotation.Nullable
  public List<LivePlayByPlayDrivesInner> getDrives() {
    return drives;
  }

  public void setDrives(List<LivePlayByPlayDrivesInner> drives) {
    this.drives = drives;
  }


  public LivePlayByPlay id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public LivePlayByPlay period(Integer period) {
    this.period = period;
    return this;
  }

  /**
   * Get period
   * @return period
   */
  @javax.annotation.Nullable
  public Integer getPeriod() {
    return period;
  }

  public void setPeriod(Integer period) {
    this.period = period;
  }


  public LivePlayByPlay possession(String possession) {
    this.possession = possession;
    return this;
  }

  /**
   * Get possession
   * @return possession
   */
  @javax.annotation.Nullable
  public String getPossession() {
    return possession;
  }

  public void setPossession(String possession) {
    this.possession = possession;
  }


  public LivePlayByPlay status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public LivePlayByPlay teams(List<LivePlayByPlayTeamsInner> teams) {
    this.teams = teams;
    return this;
  }

  public LivePlayByPlay addTeamsItem(LivePlayByPlayTeamsInner teamsItem) {
    if (this.teams == null) {
      this.teams = new ArrayList<>();
    }
    this.teams.add(teamsItem);
    return this;
  }

  /**
   * Get teams
   * @return teams
   */
  @javax.annotation.Nullable
  public List<LivePlayByPlayTeamsInner> getTeams() {
    return teams;
  }

  public void setTeams(List<LivePlayByPlayTeamsInner> teams) {
    this.teams = teams;
  }


  public LivePlayByPlay yardsToGoal(Integer yardsToGoal) {
    this.yardsToGoal = yardsToGoal;
    return this;
  }

  /**
   * Get yardsToGoal
   * @return yardsToGoal
   */
  @javax.annotation.Nullable
  public Integer getYardsToGoal() {
    return yardsToGoal;
  }

  public void setYardsToGoal(Integer yardsToGoal) {
    this.yardsToGoal = yardsToGoal;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LivePlayByPlay livePlayByPlay = (LivePlayByPlay) o;
    return Objects.equals(this.clock, livePlayByPlay.clock) &&
        Objects.equals(this.distance, livePlayByPlay.distance) &&
        Objects.equals(this.down, livePlayByPlay.down) &&
        Objects.equals(this.drives, livePlayByPlay.drives) &&
        Objects.equals(this.id, livePlayByPlay.id) &&
        Objects.equals(this.period, livePlayByPlay.period) &&
        Objects.equals(this.possession, livePlayByPlay.possession) &&
        Objects.equals(this.status, livePlayByPlay.status) &&
        Objects.equals(this.teams, livePlayByPlay.teams) &&
        Objects.equals(this.yardsToGoal, livePlayByPlay.yardsToGoal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clock, distance, down, drives, id, period, possession, status, teams, yardsToGoal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LivePlayByPlay {\n");
    sb.append("    clock: ").append(toIndentedString(clock)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    down: ").append(toIndentedString(down)).append("\n");
    sb.append("    drives: ").append(toIndentedString(drives)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    possession: ").append(toIndentedString(possession)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    teams: ").append(toIndentedString(teams)).append("\n");
    sb.append("    yardsToGoal: ").append(toIndentedString(yardsToGoal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clock");
    openapiFields.add("distance");
    openapiFields.add("down");
    openapiFields.add("drives");
    openapiFields.add("id");
    openapiFields.add("period");
    openapiFields.add("possession");
    openapiFields.add("status");
    openapiFields.add("teams");
    openapiFields.add("yardsToGoal");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LivePlayByPlay
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LivePlayByPlay.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LivePlayByPlay is not found in the empty JSON string", LivePlayByPlay.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LivePlayByPlay.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LivePlayByPlay` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clock") != null && !jsonObj.get("clock").isJsonNull()) && !jsonObj.get("clock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clock").toString()));
      }
      if (jsonObj.get("drives") != null && !jsonObj.get("drives").isJsonNull()) {
        JsonArray jsonArraydrives = jsonObj.getAsJsonArray("drives");
        if (jsonArraydrives != null) {
          // ensure the json data is an array
          if (!jsonObj.get("drives").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `drives` to be an array in the JSON string but got `%s`", jsonObj.get("drives").toString()));
          }

          // validate the optional field `drives` (array)
          for (int i = 0; i < jsonArraydrives.size(); i++) {
            LivePlayByPlayDrivesInner.validateJsonElement(jsonArraydrives.get(i));
          };
        }
      }
      if ((jsonObj.get("possession") != null && !jsonObj.get("possession").isJsonNull()) && !jsonObj.get("possession").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `possession` to be a primitive type in the JSON string but got `%s`", jsonObj.get("possession").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (jsonObj.get("teams") != null && !jsonObj.get("teams").isJsonNull()) {
        JsonArray jsonArrayteams = jsonObj.getAsJsonArray("teams");
        if (jsonArrayteams != null) {
          // ensure the json data is an array
          if (!jsonObj.get("teams").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `teams` to be an array in the JSON string but got `%s`", jsonObj.get("teams").toString()));
          }

          // validate the optional field `teams` (array)
          for (int i = 0; i < jsonArrayteams.size(); i++) {
            LivePlayByPlayTeamsInner.validateJsonElement(jsonArrayteams.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LivePlayByPlay.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LivePlayByPlay' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LivePlayByPlay> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LivePlayByPlay.class));

       return (TypeAdapter<T>) new TypeAdapter<LivePlayByPlay>() {
           @Override
           public void write(JsonWriter out, LivePlayByPlay value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LivePlayByPlay read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LivePlayByPlay given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LivePlayByPlay
   * @throws IOException if the JSON string is invalid with respect to LivePlayByPlay
   */
  public static LivePlayByPlay fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LivePlayByPlay.class);
  }

  /**
   * Convert an instance of LivePlayByPlay to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

