/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.ConferenceSPRatingDefense;
import org.openapitools.client.model.ConferenceSPRatingOffense;
import org.openapitools.client.model.ConferenceSPRatingSpecialTeams;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConferenceSPRating
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConferenceSPRating {
  public static final String SERIALIZED_NAME_CONFERENCE = "conference";
  @SerializedName(SERIALIZED_NAME_CONFERENCE)
  private String conference;

  public static final String SERIALIZED_NAME_DEFENSE = "defense";
  @SerializedName(SERIALIZED_NAME_DEFENSE)
  private ConferenceSPRatingDefense defense;

  public static final String SERIALIZED_NAME_OFFENSE = "offense";
  @SerializedName(SERIALIZED_NAME_OFFENSE)
  private ConferenceSPRatingOffense offense;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private BigDecimal rating;

  public static final String SERIALIZED_NAME_SECOND_ORDER_WINS = "secondOrderWins";
  @SerializedName(SERIALIZED_NAME_SECOND_ORDER_WINS)
  private BigDecimal secondOrderWins;

  public static final String SERIALIZED_NAME_SOS = "sos";
  @SerializedName(SERIALIZED_NAME_SOS)
  private BigDecimal sos;

  public static final String SERIALIZED_NAME_SPECIAL_TEAMS = "specialTeams";
  @SerializedName(SERIALIZED_NAME_SPECIAL_TEAMS)
  private ConferenceSPRatingSpecialTeams specialTeams;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Integer year;

  public ConferenceSPRating() {
  }

  public ConferenceSPRating conference(String conference) {
    this.conference = conference;
    return this;
  }

  /**
   * Get conference
   * @return conference
   */
  @javax.annotation.Nullable
  public String getConference() {
    return conference;
  }

  public void setConference(String conference) {
    this.conference = conference;
  }


  public ConferenceSPRating defense(ConferenceSPRatingDefense defense) {
    this.defense = defense;
    return this;
  }

  /**
   * Get defense
   * @return defense
   */
  @javax.annotation.Nullable
  public ConferenceSPRatingDefense getDefense() {
    return defense;
  }

  public void setDefense(ConferenceSPRatingDefense defense) {
    this.defense = defense;
  }


  public ConferenceSPRating offense(ConferenceSPRatingOffense offense) {
    this.offense = offense;
    return this;
  }

  /**
   * Get offense
   * @return offense
   */
  @javax.annotation.Nullable
  public ConferenceSPRatingOffense getOffense() {
    return offense;
  }

  public void setOffense(ConferenceSPRatingOffense offense) {
    this.offense = offense;
  }


  public ConferenceSPRating rating(BigDecimal rating) {
    this.rating = rating;
    return this;
  }

  /**
   * Get rating
   * @return rating
   */
  @javax.annotation.Nullable
  public BigDecimal getRating() {
    return rating;
  }

  public void setRating(BigDecimal rating) {
    this.rating = rating;
  }


  public ConferenceSPRating secondOrderWins(BigDecimal secondOrderWins) {
    this.secondOrderWins = secondOrderWins;
    return this;
  }

  /**
   * Get secondOrderWins
   * @return secondOrderWins
   */
  @javax.annotation.Nullable
  public BigDecimal getSecondOrderWins() {
    return secondOrderWins;
  }

  public void setSecondOrderWins(BigDecimal secondOrderWins) {
    this.secondOrderWins = secondOrderWins;
  }


  public ConferenceSPRating sos(BigDecimal sos) {
    this.sos = sos;
    return this;
  }

  /**
   * Get sos
   * @return sos
   */
  @javax.annotation.Nullable
  public BigDecimal getSos() {
    return sos;
  }

  public void setSos(BigDecimal sos) {
    this.sos = sos;
  }


  public ConferenceSPRating specialTeams(ConferenceSPRatingSpecialTeams specialTeams) {
    this.specialTeams = specialTeams;
    return this;
  }

  /**
   * Get specialTeams
   * @return specialTeams
   */
  @javax.annotation.Nullable
  public ConferenceSPRatingSpecialTeams getSpecialTeams() {
    return specialTeams;
  }

  public void setSpecialTeams(ConferenceSPRatingSpecialTeams specialTeams) {
    this.specialTeams = specialTeams;
  }


  public ConferenceSPRating year(Integer year) {
    this.year = year;
    return this;
  }

  /**
   * Get year
   * @return year
   */
  @javax.annotation.Nullable
  public Integer getYear() {
    return year;
  }

  public void setYear(Integer year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConferenceSPRating conferenceSPRating = (ConferenceSPRating) o;
    return Objects.equals(this.conference, conferenceSPRating.conference) &&
        Objects.equals(this.defense, conferenceSPRating.defense) &&
        Objects.equals(this.offense, conferenceSPRating.offense) &&
        Objects.equals(this.rating, conferenceSPRating.rating) &&
        Objects.equals(this.secondOrderWins, conferenceSPRating.secondOrderWins) &&
        Objects.equals(this.sos, conferenceSPRating.sos) &&
        Objects.equals(this.specialTeams, conferenceSPRating.specialTeams) &&
        Objects.equals(this.year, conferenceSPRating.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conference, defense, offense, rating, secondOrderWins, sos, specialTeams, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConferenceSPRating {\n");
    sb.append("    conference: ").append(toIndentedString(conference)).append("\n");
    sb.append("    defense: ").append(toIndentedString(defense)).append("\n");
    sb.append("    offense: ").append(toIndentedString(offense)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    secondOrderWins: ").append(toIndentedString(secondOrderWins)).append("\n");
    sb.append("    sos: ").append(toIndentedString(sos)).append("\n");
    sb.append("    specialTeams: ").append(toIndentedString(specialTeams)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conference");
    openapiFields.add("defense");
    openapiFields.add("offense");
    openapiFields.add("rating");
    openapiFields.add("secondOrderWins");
    openapiFields.add("sos");
    openapiFields.add("specialTeams");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConferenceSPRating
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConferenceSPRating.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConferenceSPRating is not found in the empty JSON string", ConferenceSPRating.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConferenceSPRating.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConferenceSPRating` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("conference") != null && !jsonObj.get("conference").isJsonNull()) && !jsonObj.get("conference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conference").toString()));
      }
      // validate the optional field `defense`
      if (jsonObj.get("defense") != null && !jsonObj.get("defense").isJsonNull()) {
        ConferenceSPRatingDefense.validateJsonElement(jsonObj.get("defense"));
      }
      // validate the optional field `offense`
      if (jsonObj.get("offense") != null && !jsonObj.get("offense").isJsonNull()) {
        ConferenceSPRatingOffense.validateJsonElement(jsonObj.get("offense"));
      }
      // validate the optional field `specialTeams`
      if (jsonObj.get("specialTeams") != null && !jsonObj.get("specialTeams").isJsonNull()) {
        ConferenceSPRatingSpecialTeams.validateJsonElement(jsonObj.get("specialTeams"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConferenceSPRating.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConferenceSPRating' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConferenceSPRating> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConferenceSPRating.class));

       return (TypeAdapter<T>) new TypeAdapter<ConferenceSPRating>() {
           @Override
           public void write(JsonWriter out, ConferenceSPRating value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConferenceSPRating read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConferenceSPRating given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConferenceSPRating
   * @throws IOException if the JSON string is invalid with respect to ConferenceSPRating
   */
  public static ConferenceSPRating fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConferenceSPRating.class);
  }

  /**
   * Convert an instance of ConferenceSPRating to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

