/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.BoxScoreTeamsCumulativePpaInnerOverall;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BoxScoreTeamsCumulativePpaInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BoxScoreTeamsCumulativePpaInner {
  public static final String SERIALIZED_NAME_OVERALL = "overall";
  @SerializedName(SERIALIZED_NAME_OVERALL)
  private BoxScoreTeamsCumulativePpaInnerOverall overall;

  public static final String SERIALIZED_NAME_PASSING = "passing";
  @SerializedName(SERIALIZED_NAME_PASSING)
  private BoxScoreTeamsCumulativePpaInnerOverall passing;

  public static final String SERIALIZED_NAME_PLAYS = "plays";
  @SerializedName(SERIALIZED_NAME_PLAYS)
  private BigDecimal plays;

  public static final String SERIALIZED_NAME_RUSHING = "rushing";
  @SerializedName(SERIALIZED_NAME_RUSHING)
  private BoxScoreTeamsCumulativePpaInnerOverall rushing;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public BoxScoreTeamsCumulativePpaInner() {
  }

  public BoxScoreTeamsCumulativePpaInner overall(BoxScoreTeamsCumulativePpaInnerOverall overall) {
    this.overall = overall;
    return this;
  }

  /**
   * Get overall
   * @return overall
   */
  @javax.annotation.Nullable
  public BoxScoreTeamsCumulativePpaInnerOverall getOverall() {
    return overall;
  }

  public void setOverall(BoxScoreTeamsCumulativePpaInnerOverall overall) {
    this.overall = overall;
  }


  public BoxScoreTeamsCumulativePpaInner passing(BoxScoreTeamsCumulativePpaInnerOverall passing) {
    this.passing = passing;
    return this;
  }

  /**
   * Get passing
   * @return passing
   */
  @javax.annotation.Nullable
  public BoxScoreTeamsCumulativePpaInnerOverall getPassing() {
    return passing;
  }

  public void setPassing(BoxScoreTeamsCumulativePpaInnerOverall passing) {
    this.passing = passing;
  }


  public BoxScoreTeamsCumulativePpaInner plays(BigDecimal plays) {
    this.plays = plays;
    return this;
  }

  /**
   * Get plays
   * @return plays
   */
  @javax.annotation.Nullable
  public BigDecimal getPlays() {
    return plays;
  }

  public void setPlays(BigDecimal plays) {
    this.plays = plays;
  }


  public BoxScoreTeamsCumulativePpaInner rushing(BoxScoreTeamsCumulativePpaInnerOverall rushing) {
    this.rushing = rushing;
    return this;
  }

  /**
   * Get rushing
   * @return rushing
   */
  @javax.annotation.Nullable
  public BoxScoreTeamsCumulativePpaInnerOverall getRushing() {
    return rushing;
  }

  public void setRushing(BoxScoreTeamsCumulativePpaInnerOverall rushing) {
    this.rushing = rushing;
  }


  public BoxScoreTeamsCumulativePpaInner team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BoxScoreTeamsCumulativePpaInner boxScoreTeamsCumulativePpaInner = (BoxScoreTeamsCumulativePpaInner) o;
    return Objects.equals(this.overall, boxScoreTeamsCumulativePpaInner.overall) &&
        Objects.equals(this.passing, boxScoreTeamsCumulativePpaInner.passing) &&
        Objects.equals(this.plays, boxScoreTeamsCumulativePpaInner.plays) &&
        Objects.equals(this.rushing, boxScoreTeamsCumulativePpaInner.rushing) &&
        Objects.equals(this.team, boxScoreTeamsCumulativePpaInner.team);
  }

  @Override
  public int hashCode() {
    return Objects.hash(overall, passing, plays, rushing, team);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BoxScoreTeamsCumulativePpaInner {\n");
    sb.append("    overall: ").append(toIndentedString(overall)).append("\n");
    sb.append("    passing: ").append(toIndentedString(passing)).append("\n");
    sb.append("    plays: ").append(toIndentedString(plays)).append("\n");
    sb.append("    rushing: ").append(toIndentedString(rushing)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("overall");
    openapiFields.add("passing");
    openapiFields.add("plays");
    openapiFields.add("rushing");
    openapiFields.add("team");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BoxScoreTeamsCumulativePpaInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BoxScoreTeamsCumulativePpaInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BoxScoreTeamsCumulativePpaInner is not found in the empty JSON string", BoxScoreTeamsCumulativePpaInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BoxScoreTeamsCumulativePpaInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BoxScoreTeamsCumulativePpaInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `overall`
      if (jsonObj.get("overall") != null && !jsonObj.get("overall").isJsonNull()) {
        BoxScoreTeamsCumulativePpaInnerOverall.validateJsonElement(jsonObj.get("overall"));
      }
      // validate the optional field `passing`
      if (jsonObj.get("passing") != null && !jsonObj.get("passing").isJsonNull()) {
        BoxScoreTeamsCumulativePpaInnerOverall.validateJsonElement(jsonObj.get("passing"));
      }
      // validate the optional field `rushing`
      if (jsonObj.get("rushing") != null && !jsonObj.get("rushing").isJsonNull()) {
        BoxScoreTeamsCumulativePpaInnerOverall.validateJsonElement(jsonObj.get("rushing"));
      }
      if ((jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) && !jsonObj.get("team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BoxScoreTeamsCumulativePpaInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BoxScoreTeamsCumulativePpaInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BoxScoreTeamsCumulativePpaInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BoxScoreTeamsCumulativePpaInner.class));

       return (TypeAdapter<T>) new TypeAdapter<BoxScoreTeamsCumulativePpaInner>() {
           @Override
           public void write(JsonWriter out, BoxScoreTeamsCumulativePpaInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BoxScoreTeamsCumulativePpaInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BoxScoreTeamsCumulativePpaInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BoxScoreTeamsCumulativePpaInner
   * @throws IOException if the JSON string is invalid with respect to BoxScoreTeamsCumulativePpaInner
   */
  public static BoxScoreTeamsCumulativePpaInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BoxScoreTeamsCumulativePpaInner.class);
  }

  /**
   * Convert an instance of BoxScoreTeamsCumulativePpaInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

