/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GameLinesLinesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GameLines
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GameLines {
  public static final String SERIALIZED_NAME_AWAY_CONFERENCE = "awayConference";
  @SerializedName(SERIALIZED_NAME_AWAY_CONFERENCE)
  private String awayConference;

  public static final String SERIALIZED_NAME_AWAY_SCORE = "awayScore";
  @SerializedName(SERIALIZED_NAME_AWAY_SCORE)
  private Integer awayScore;

  public static final String SERIALIZED_NAME_AWAY_TEAM = "awayTeam";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM)
  private String awayTeam;

  public static final String SERIALIZED_NAME_HOME_CONFERENCE = "homeConference";
  @SerializedName(SERIALIZED_NAME_HOME_CONFERENCE)
  private String homeConference;

  public static final String SERIALIZED_NAME_HOME_SCORE = "homeScore";
  @SerializedName(SERIALIZED_NAME_HOME_SCORE)
  private Integer homeScore;

  public static final String SERIALIZED_NAME_HOME_TEAM = "homeTeam";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM)
  private String homeTeam;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LINES = "lines";
  @SerializedName(SERIALIZED_NAME_LINES)
  private List<GameLinesLinesInner> lines = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEASON = "season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private Integer season;

  public static final String SERIALIZED_NAME_SEASON_TYPE = "seasonType";
  @SerializedName(SERIALIZED_NAME_SEASON_TYPE)
  private String seasonType;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_WEEK = "week";
  @SerializedName(SERIALIZED_NAME_WEEK)
  private Integer week;

  public GameLines() {
  }

  public GameLines awayConference(String awayConference) {
    this.awayConference = awayConference;
    return this;
  }

  /**
   * Get awayConference
   * @return awayConference
   */
  @javax.annotation.Nullable
  public String getAwayConference() {
    return awayConference;
  }

  public void setAwayConference(String awayConference) {
    this.awayConference = awayConference;
  }


  public GameLines awayScore(Integer awayScore) {
    this.awayScore = awayScore;
    return this;
  }

  /**
   * Get awayScore
   * @return awayScore
   */
  @javax.annotation.Nullable
  public Integer getAwayScore() {
    return awayScore;
  }

  public void setAwayScore(Integer awayScore) {
    this.awayScore = awayScore;
  }


  public GameLines awayTeam(String awayTeam) {
    this.awayTeam = awayTeam;
    return this;
  }

  /**
   * Get awayTeam
   * @return awayTeam
   */
  @javax.annotation.Nullable
  public String getAwayTeam() {
    return awayTeam;
  }

  public void setAwayTeam(String awayTeam) {
    this.awayTeam = awayTeam;
  }


  public GameLines homeConference(String homeConference) {
    this.homeConference = homeConference;
    return this;
  }

  /**
   * Get homeConference
   * @return homeConference
   */
  @javax.annotation.Nullable
  public String getHomeConference() {
    return homeConference;
  }

  public void setHomeConference(String homeConference) {
    this.homeConference = homeConference;
  }


  public GameLines homeScore(Integer homeScore) {
    this.homeScore = homeScore;
    return this;
  }

  /**
   * Get homeScore
   * @return homeScore
   */
  @javax.annotation.Nullable
  public Integer getHomeScore() {
    return homeScore;
  }

  public void setHomeScore(Integer homeScore) {
    this.homeScore = homeScore;
  }


  public GameLines homeTeam(String homeTeam) {
    this.homeTeam = homeTeam;
    return this;
  }

  /**
   * Get homeTeam
   * @return homeTeam
   */
  @javax.annotation.Nullable
  public String getHomeTeam() {
    return homeTeam;
  }

  public void setHomeTeam(String homeTeam) {
    this.homeTeam = homeTeam;
  }


  public GameLines id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public GameLines lines(List<GameLinesLinesInner> lines) {
    this.lines = lines;
    return this;
  }

  public GameLines addLinesItem(GameLinesLinesInner linesItem) {
    if (this.lines == null) {
      this.lines = new ArrayList<>();
    }
    this.lines.add(linesItem);
    return this;
  }

  /**
   * Get lines
   * @return lines
   */
  @javax.annotation.Nullable
  public List<GameLinesLinesInner> getLines() {
    return lines;
  }

  public void setLines(List<GameLinesLinesInner> lines) {
    this.lines = lines;
  }


  public GameLines season(Integer season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public Integer getSeason() {
    return season;
  }

  public void setSeason(Integer season) {
    this.season = season;
  }


  public GameLines seasonType(String seasonType) {
    this.seasonType = seasonType;
    return this;
  }

  /**
   * Get seasonType
   * @return seasonType
   */
  @javax.annotation.Nullable
  public String getSeasonType() {
    return seasonType;
  }

  public void setSeasonType(String seasonType) {
    this.seasonType = seasonType;
  }


  public GameLines startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public GameLines week(Integer week) {
    this.week = week;
    return this;
  }

  /**
   * Get week
   * @return week
   */
  @javax.annotation.Nullable
  public Integer getWeek() {
    return week;
  }

  public void setWeek(Integer week) {
    this.week = week;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GameLines gameLines = (GameLines) o;
    return Objects.equals(this.awayConference, gameLines.awayConference) &&
        Objects.equals(this.awayScore, gameLines.awayScore) &&
        Objects.equals(this.awayTeam, gameLines.awayTeam) &&
        Objects.equals(this.homeConference, gameLines.homeConference) &&
        Objects.equals(this.homeScore, gameLines.homeScore) &&
        Objects.equals(this.homeTeam, gameLines.homeTeam) &&
        Objects.equals(this.id, gameLines.id) &&
        Objects.equals(this.lines, gameLines.lines) &&
        Objects.equals(this.season, gameLines.season) &&
        Objects.equals(this.seasonType, gameLines.seasonType) &&
        Objects.equals(this.startDate, gameLines.startDate) &&
        Objects.equals(this.week, gameLines.week);
  }

  @Override
  public int hashCode() {
    return Objects.hash(awayConference, awayScore, awayTeam, homeConference, homeScore, homeTeam, id, lines, season, seasonType, startDate, week);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GameLines {\n");
    sb.append("    awayConference: ").append(toIndentedString(awayConference)).append("\n");
    sb.append("    awayScore: ").append(toIndentedString(awayScore)).append("\n");
    sb.append("    awayTeam: ").append(toIndentedString(awayTeam)).append("\n");
    sb.append("    homeConference: ").append(toIndentedString(homeConference)).append("\n");
    sb.append("    homeScore: ").append(toIndentedString(homeScore)).append("\n");
    sb.append("    homeTeam: ").append(toIndentedString(homeTeam)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lines: ").append(toIndentedString(lines)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    seasonType: ").append(toIndentedString(seasonType)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    week: ").append(toIndentedString(week)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("awayConference");
    openapiFields.add("awayScore");
    openapiFields.add("awayTeam");
    openapiFields.add("homeConference");
    openapiFields.add("homeScore");
    openapiFields.add("homeTeam");
    openapiFields.add("id");
    openapiFields.add("lines");
    openapiFields.add("season");
    openapiFields.add("seasonType");
    openapiFields.add("startDate");
    openapiFields.add("week");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GameLines
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GameLines.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GameLines is not found in the empty JSON string", GameLines.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GameLines.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GameLines` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("awayConference") != null && !jsonObj.get("awayConference").isJsonNull()) && !jsonObj.get("awayConference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `awayConference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("awayConference").toString()));
      }
      if ((jsonObj.get("awayTeam") != null && !jsonObj.get("awayTeam").isJsonNull()) && !jsonObj.get("awayTeam").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `awayTeam` to be a primitive type in the JSON string but got `%s`", jsonObj.get("awayTeam").toString()));
      }
      if ((jsonObj.get("homeConference") != null && !jsonObj.get("homeConference").isJsonNull()) && !jsonObj.get("homeConference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homeConference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homeConference").toString()));
      }
      if ((jsonObj.get("homeTeam") != null && !jsonObj.get("homeTeam").isJsonNull()) && !jsonObj.get("homeTeam").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homeTeam` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homeTeam").toString()));
      }
      if (jsonObj.get("lines") != null && !jsonObj.get("lines").isJsonNull()) {
        JsonArray jsonArraylines = jsonObj.getAsJsonArray("lines");
        if (jsonArraylines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lines` to be an array in the JSON string but got `%s`", jsonObj.get("lines").toString()));
          }

          // validate the optional field `lines` (array)
          for (int i = 0; i < jsonArraylines.size(); i++) {
            GameLinesLinesInner.validateJsonElement(jsonArraylines.get(i));
          };
        }
      }
      if ((jsonObj.get("seasonType") != null && !jsonObj.get("seasonType").isJsonNull()) && !jsonObj.get("seasonType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seasonType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seasonType").toString()));
      }
      if ((jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull()) && !jsonObj.get("startDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GameLines.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GameLines' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GameLines> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GameLines.class));

       return (TypeAdapter<T>) new TypeAdapter<GameLines>() {
           @Override
           public void write(JsonWriter out, GameLines value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GameLines read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GameLines given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GameLines
   * @throws IOException if the JSON string is invalid with respect to GameLines
   */
  public static GameLines fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GameLines.class);
  }

  /**
   * Convert an instance of GameLines to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

