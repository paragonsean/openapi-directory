/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TeamMatchupGamesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TeamMatchupGamesInner {
  public static final String SERIALIZED_NAME_AWAY_SCORE = "awayScore";
  @SerializedName(SERIALIZED_NAME_AWAY_SCORE)
  private Integer awayScore;

  public static final String SERIALIZED_NAME_AWAY_TEAM = "awayTeam";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM)
  private String awayTeam;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_HOME_SCORE = "homeScore";
  @SerializedName(SERIALIZED_NAME_HOME_SCORE)
  private Integer homeScore;

  public static final String SERIALIZED_NAME_HOME_TEAM = "homeTeam";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM)
  private String homeTeam;

  public static final String SERIALIZED_NAME_NEUTRAL_SITE = "neutralSite";
  @SerializedName(SERIALIZED_NAME_NEUTRAL_SITE)
  private Boolean neutralSite;

  public static final String SERIALIZED_NAME_SEASON = "season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private Integer season;

  public static final String SERIALIZED_NAME_SEASON_TYPE = "season_type";
  @SerializedName(SERIALIZED_NAME_SEASON_TYPE)
  private String seasonType;

  public static final String SERIALIZED_NAME_VENUE = "venue";
  @SerializedName(SERIALIZED_NAME_VENUE)
  private String venue;

  public static final String SERIALIZED_NAME_WEEK = "week";
  @SerializedName(SERIALIZED_NAME_WEEK)
  private Integer week;

  public static final String SERIALIZED_NAME_WINNER = "winner";
  @SerializedName(SERIALIZED_NAME_WINNER)
  private String winner;

  public TeamMatchupGamesInner() {
  }

  public TeamMatchupGamesInner awayScore(Integer awayScore) {
    this.awayScore = awayScore;
    return this;
  }

  /**
   * Get awayScore
   * @return awayScore
   */
  @javax.annotation.Nullable
  public Integer getAwayScore() {
    return awayScore;
  }

  public void setAwayScore(Integer awayScore) {
    this.awayScore = awayScore;
  }


  public TeamMatchupGamesInner awayTeam(String awayTeam) {
    this.awayTeam = awayTeam;
    return this;
  }

  /**
   * Get awayTeam
   * @return awayTeam
   */
  @javax.annotation.Nullable
  public String getAwayTeam() {
    return awayTeam;
  }

  public void setAwayTeam(String awayTeam) {
    this.awayTeam = awayTeam;
  }


  public TeamMatchupGamesInner date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public TeamMatchupGamesInner homeScore(Integer homeScore) {
    this.homeScore = homeScore;
    return this;
  }

  /**
   * Get homeScore
   * @return homeScore
   */
  @javax.annotation.Nullable
  public Integer getHomeScore() {
    return homeScore;
  }

  public void setHomeScore(Integer homeScore) {
    this.homeScore = homeScore;
  }


  public TeamMatchupGamesInner homeTeam(String homeTeam) {
    this.homeTeam = homeTeam;
    return this;
  }

  /**
   * Get homeTeam
   * @return homeTeam
   */
  @javax.annotation.Nullable
  public String getHomeTeam() {
    return homeTeam;
  }

  public void setHomeTeam(String homeTeam) {
    this.homeTeam = homeTeam;
  }


  public TeamMatchupGamesInner neutralSite(Boolean neutralSite) {
    this.neutralSite = neutralSite;
    return this;
  }

  /**
   * Get neutralSite
   * @return neutralSite
   */
  @javax.annotation.Nullable
  public Boolean getNeutralSite() {
    return neutralSite;
  }

  public void setNeutralSite(Boolean neutralSite) {
    this.neutralSite = neutralSite;
  }


  public TeamMatchupGamesInner season(Integer season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public Integer getSeason() {
    return season;
  }

  public void setSeason(Integer season) {
    this.season = season;
  }


  public TeamMatchupGamesInner seasonType(String seasonType) {
    this.seasonType = seasonType;
    return this;
  }

  /**
   * Get seasonType
   * @return seasonType
   */
  @javax.annotation.Nullable
  public String getSeasonType() {
    return seasonType;
  }

  public void setSeasonType(String seasonType) {
    this.seasonType = seasonType;
  }


  public TeamMatchupGamesInner venue(String venue) {
    this.venue = venue;
    return this;
  }

  /**
   * Get venue
   * @return venue
   */
  @javax.annotation.Nullable
  public String getVenue() {
    return venue;
  }

  public void setVenue(String venue) {
    this.venue = venue;
  }


  public TeamMatchupGamesInner week(Integer week) {
    this.week = week;
    return this;
  }

  /**
   * Get week
   * @return week
   */
  @javax.annotation.Nullable
  public Integer getWeek() {
    return week;
  }

  public void setWeek(Integer week) {
    this.week = week;
  }


  public TeamMatchupGamesInner winner(String winner) {
    this.winner = winner;
    return this;
  }

  /**
   * Get winner
   * @return winner
   */
  @javax.annotation.Nullable
  public String getWinner() {
    return winner;
  }

  public void setWinner(String winner) {
    this.winner = winner;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamMatchupGamesInner teamMatchupGamesInner = (TeamMatchupGamesInner) o;
    return Objects.equals(this.awayScore, teamMatchupGamesInner.awayScore) &&
        Objects.equals(this.awayTeam, teamMatchupGamesInner.awayTeam) &&
        Objects.equals(this.date, teamMatchupGamesInner.date) &&
        Objects.equals(this.homeScore, teamMatchupGamesInner.homeScore) &&
        Objects.equals(this.homeTeam, teamMatchupGamesInner.homeTeam) &&
        Objects.equals(this.neutralSite, teamMatchupGamesInner.neutralSite) &&
        Objects.equals(this.season, teamMatchupGamesInner.season) &&
        Objects.equals(this.seasonType, teamMatchupGamesInner.seasonType) &&
        Objects.equals(this.venue, teamMatchupGamesInner.venue) &&
        Objects.equals(this.week, teamMatchupGamesInner.week) &&
        Objects.equals(this.winner, teamMatchupGamesInner.winner);
  }

  @Override
  public int hashCode() {
    return Objects.hash(awayScore, awayTeam, date, homeScore, homeTeam, neutralSite, season, seasonType, venue, week, winner);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamMatchupGamesInner {\n");
    sb.append("    awayScore: ").append(toIndentedString(awayScore)).append("\n");
    sb.append("    awayTeam: ").append(toIndentedString(awayTeam)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    homeScore: ").append(toIndentedString(homeScore)).append("\n");
    sb.append("    homeTeam: ").append(toIndentedString(homeTeam)).append("\n");
    sb.append("    neutralSite: ").append(toIndentedString(neutralSite)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    seasonType: ").append(toIndentedString(seasonType)).append("\n");
    sb.append("    venue: ").append(toIndentedString(venue)).append("\n");
    sb.append("    week: ").append(toIndentedString(week)).append("\n");
    sb.append("    winner: ").append(toIndentedString(winner)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("awayScore");
    openapiFields.add("awayTeam");
    openapiFields.add("date");
    openapiFields.add("homeScore");
    openapiFields.add("homeTeam");
    openapiFields.add("neutralSite");
    openapiFields.add("season");
    openapiFields.add("season_type");
    openapiFields.add("venue");
    openapiFields.add("week");
    openapiFields.add("winner");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TeamMatchupGamesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TeamMatchupGamesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamMatchupGamesInner is not found in the empty JSON string", TeamMatchupGamesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TeamMatchupGamesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TeamMatchupGamesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("awayTeam") != null && !jsonObj.get("awayTeam").isJsonNull()) && !jsonObj.get("awayTeam").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `awayTeam` to be a primitive type in the JSON string but got `%s`", jsonObj.get("awayTeam").toString()));
      }
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if ((jsonObj.get("homeTeam") != null && !jsonObj.get("homeTeam").isJsonNull()) && !jsonObj.get("homeTeam").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homeTeam` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homeTeam").toString()));
      }
      if ((jsonObj.get("season_type") != null && !jsonObj.get("season_type").isJsonNull()) && !jsonObj.get("season_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `season_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("season_type").toString()));
      }
      if ((jsonObj.get("venue") != null && !jsonObj.get("venue").isJsonNull()) && !jsonObj.get("venue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `venue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("venue").toString()));
      }
      if ((jsonObj.get("winner") != null && !jsonObj.get("winner").isJsonNull()) && !jsonObj.get("winner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `winner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("winner").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamMatchupGamesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamMatchupGamesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamMatchupGamesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamMatchupGamesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamMatchupGamesInner>() {
           @Override
           public void write(JsonWriter out, TeamMatchupGamesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamMatchupGamesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TeamMatchupGamesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TeamMatchupGamesInner
   * @throws IOException if the JSON string is invalid with respect to TeamMatchupGamesInner
   */
  public static TeamMatchupGamesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamMatchupGamesInner.class);
  }

  /**
   * Convert an instance of TeamMatchupGamesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

