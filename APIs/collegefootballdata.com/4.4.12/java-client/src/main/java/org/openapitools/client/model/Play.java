/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.DriveEndTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Play
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Play {
  public static final String SERIALIZED_NAME_AWAY = "away";
  @SerializedName(SERIALIZED_NAME_AWAY)
  private String away;

  public static final String SERIALIZED_NAME_CLOCK = "clock";
  @SerializedName(SERIALIZED_NAME_CLOCK)
  private DriveEndTime clock;

  public static final String SERIALIZED_NAME_DEFENSE = "defense";
  @SerializedName(SERIALIZED_NAME_DEFENSE)
  private String defense;

  public static final String SERIALIZED_NAME_DEFENSE_CONFERENCE = "defense_conference";
  @SerializedName(SERIALIZED_NAME_DEFENSE_CONFERENCE)
  private String defenseConference;

  public static final String SERIALIZED_NAME_DEFENSE_SCORE = "defense_score";
  @SerializedName(SERIALIZED_NAME_DEFENSE_SCORE)
  private Integer defenseScore;

  public static final String SERIALIZED_NAME_DEFENSE_TIMEOUTS = "defense_timeouts";
  @SerializedName(SERIALIZED_NAME_DEFENSE_TIMEOUTS)
  private Integer defenseTimeouts;

  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private Integer distance;

  public static final String SERIALIZED_NAME_DOWN = "down";
  @SerializedName(SERIALIZED_NAME_DOWN)
  private Integer down;

  public static final String SERIALIZED_NAME_DRIVE_ID = "drive_id";
  @SerializedName(SERIALIZED_NAME_DRIVE_ID)
  private Integer driveId;

  public static final String SERIALIZED_NAME_DRIVE_NUMBER = "drive_number";
  @SerializedName(SERIALIZED_NAME_DRIVE_NUMBER)
  private Integer driveNumber;

  public static final String SERIALIZED_NAME_GAME_ID = "game_id";
  @SerializedName(SERIALIZED_NAME_GAME_ID)
  private Integer gameId;

  public static final String SERIALIZED_NAME_HOME = "home";
  @SerializedName(SERIALIZED_NAME_HOME)
  private String home;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_OFFENSE = "offense";
  @SerializedName(SERIALIZED_NAME_OFFENSE)
  private String offense;

  public static final String SERIALIZED_NAME_OFFENSE_CONFERENCE = "offense_conference";
  @SerializedName(SERIALIZED_NAME_OFFENSE_CONFERENCE)
  private String offenseConference;

  public static final String SERIALIZED_NAME_OFFENSE_SCORE = "offense_score";
  @SerializedName(SERIALIZED_NAME_OFFENSE_SCORE)
  private Integer offenseScore;

  public static final String SERIALIZED_NAME_OFFENSE_TIMEOUTS = "offense_timeouts";
  @SerializedName(SERIALIZED_NAME_OFFENSE_TIMEOUTS)
  private Integer offenseTimeouts;

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private Integer period;

  public static final String SERIALIZED_NAME_PLAY_NUMBER = "play_number";
  @SerializedName(SERIALIZED_NAME_PLAY_NUMBER)
  private Integer playNumber;

  public static final String SERIALIZED_NAME_PLAY_TEXT = "play_text";
  @SerializedName(SERIALIZED_NAME_PLAY_TEXT)
  private String playText;

  public static final String SERIALIZED_NAME_PLAY_TYPE = "play_type";
  @SerializedName(SERIALIZED_NAME_PLAY_TYPE)
  private String playType;

  public static final String SERIALIZED_NAME_PPA = "ppa";
  @SerializedName(SERIALIZED_NAME_PPA)
  private BigDecimal ppa;

  public static final String SERIALIZED_NAME_SCORING = "scoring";
  @SerializedName(SERIALIZED_NAME_SCORING)
  private Boolean scoring;

  public static final String SERIALIZED_NAME_WALLCLOCK = "wallclock";
  @SerializedName(SERIALIZED_NAME_WALLCLOCK)
  private String wallclock;

  public static final String SERIALIZED_NAME_YARD_LINE = "yard_line";
  @SerializedName(SERIALIZED_NAME_YARD_LINE)
  private Integer yardLine;

  public static final String SERIALIZED_NAME_YARDS_GAINED = "yards_gained";
  @SerializedName(SERIALIZED_NAME_YARDS_GAINED)
  private Integer yardsGained;

  public static final String SERIALIZED_NAME_YARDS_TO_GOAL = "yards_to_goal";
  @SerializedName(SERIALIZED_NAME_YARDS_TO_GOAL)
  private Integer yardsToGoal;

  public Play() {
  }

  public Play away(String away) {
    this.away = away;
    return this;
  }

  /**
   * Get away
   * @return away
   */
  @javax.annotation.Nullable
  public String getAway() {
    return away;
  }

  public void setAway(String away) {
    this.away = away;
  }


  public Play clock(DriveEndTime clock) {
    this.clock = clock;
    return this;
  }

  /**
   * Get clock
   * @return clock
   */
  @javax.annotation.Nullable
  public DriveEndTime getClock() {
    return clock;
  }

  public void setClock(DriveEndTime clock) {
    this.clock = clock;
  }


  public Play defense(String defense) {
    this.defense = defense;
    return this;
  }

  /**
   * Get defense
   * @return defense
   */
  @javax.annotation.Nullable
  public String getDefense() {
    return defense;
  }

  public void setDefense(String defense) {
    this.defense = defense;
  }


  public Play defenseConference(String defenseConference) {
    this.defenseConference = defenseConference;
    return this;
  }

  /**
   * Get defenseConference
   * @return defenseConference
   */
  @javax.annotation.Nullable
  public String getDefenseConference() {
    return defenseConference;
  }

  public void setDefenseConference(String defenseConference) {
    this.defenseConference = defenseConference;
  }


  public Play defenseScore(Integer defenseScore) {
    this.defenseScore = defenseScore;
    return this;
  }

  /**
   * Get defenseScore
   * @return defenseScore
   */
  @javax.annotation.Nullable
  public Integer getDefenseScore() {
    return defenseScore;
  }

  public void setDefenseScore(Integer defenseScore) {
    this.defenseScore = defenseScore;
  }


  public Play defenseTimeouts(Integer defenseTimeouts) {
    this.defenseTimeouts = defenseTimeouts;
    return this;
  }

  /**
   * Get defenseTimeouts
   * @return defenseTimeouts
   */
  @javax.annotation.Nullable
  public Integer getDefenseTimeouts() {
    return defenseTimeouts;
  }

  public void setDefenseTimeouts(Integer defenseTimeouts) {
    this.defenseTimeouts = defenseTimeouts;
  }


  public Play distance(Integer distance) {
    this.distance = distance;
    return this;
  }

  /**
   * Get distance
   * @return distance
   */
  @javax.annotation.Nullable
  public Integer getDistance() {
    return distance;
  }

  public void setDistance(Integer distance) {
    this.distance = distance;
  }


  public Play down(Integer down) {
    this.down = down;
    return this;
  }

  /**
   * Get down
   * @return down
   */
  @javax.annotation.Nullable
  public Integer getDown() {
    return down;
  }

  public void setDown(Integer down) {
    this.down = down;
  }


  public Play driveId(Integer driveId) {
    this.driveId = driveId;
    return this;
  }

  /**
   * Get driveId
   * @return driveId
   */
  @javax.annotation.Nullable
  public Integer getDriveId() {
    return driveId;
  }

  public void setDriveId(Integer driveId) {
    this.driveId = driveId;
  }


  public Play driveNumber(Integer driveNumber) {
    this.driveNumber = driveNumber;
    return this;
  }

  /**
   * Get driveNumber
   * @return driveNumber
   */
  @javax.annotation.Nullable
  public Integer getDriveNumber() {
    return driveNumber;
  }

  public void setDriveNumber(Integer driveNumber) {
    this.driveNumber = driveNumber;
  }


  public Play gameId(Integer gameId) {
    this.gameId = gameId;
    return this;
  }

  /**
   * Get gameId
   * @return gameId
   */
  @javax.annotation.Nullable
  public Integer getGameId() {
    return gameId;
  }

  public void setGameId(Integer gameId) {
    this.gameId = gameId;
  }


  public Play home(String home) {
    this.home = home;
    return this;
  }

  /**
   * Get home
   * @return home
   */
  @javax.annotation.Nullable
  public String getHome() {
    return home;
  }

  public void setHome(String home) {
    this.home = home;
  }


  public Play id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Play offense(String offense) {
    this.offense = offense;
    return this;
  }

  /**
   * Get offense
   * @return offense
   */
  @javax.annotation.Nullable
  public String getOffense() {
    return offense;
  }

  public void setOffense(String offense) {
    this.offense = offense;
  }


  public Play offenseConference(String offenseConference) {
    this.offenseConference = offenseConference;
    return this;
  }

  /**
   * Get offenseConference
   * @return offenseConference
   */
  @javax.annotation.Nullable
  public String getOffenseConference() {
    return offenseConference;
  }

  public void setOffenseConference(String offenseConference) {
    this.offenseConference = offenseConference;
  }


  public Play offenseScore(Integer offenseScore) {
    this.offenseScore = offenseScore;
    return this;
  }

  /**
   * Get offenseScore
   * @return offenseScore
   */
  @javax.annotation.Nullable
  public Integer getOffenseScore() {
    return offenseScore;
  }

  public void setOffenseScore(Integer offenseScore) {
    this.offenseScore = offenseScore;
  }


  public Play offenseTimeouts(Integer offenseTimeouts) {
    this.offenseTimeouts = offenseTimeouts;
    return this;
  }

  /**
   * Get offenseTimeouts
   * @return offenseTimeouts
   */
  @javax.annotation.Nullable
  public Integer getOffenseTimeouts() {
    return offenseTimeouts;
  }

  public void setOffenseTimeouts(Integer offenseTimeouts) {
    this.offenseTimeouts = offenseTimeouts;
  }


  public Play period(Integer period) {
    this.period = period;
    return this;
  }

  /**
   * Get period
   * @return period
   */
  @javax.annotation.Nullable
  public Integer getPeriod() {
    return period;
  }

  public void setPeriod(Integer period) {
    this.period = period;
  }


  public Play playNumber(Integer playNumber) {
    this.playNumber = playNumber;
    return this;
  }

  /**
   * Get playNumber
   * @return playNumber
   */
  @javax.annotation.Nullable
  public Integer getPlayNumber() {
    return playNumber;
  }

  public void setPlayNumber(Integer playNumber) {
    this.playNumber = playNumber;
  }


  public Play playText(String playText) {
    this.playText = playText;
    return this;
  }

  /**
   * Get playText
   * @return playText
   */
  @javax.annotation.Nullable
  public String getPlayText() {
    return playText;
  }

  public void setPlayText(String playText) {
    this.playText = playText;
  }


  public Play playType(String playType) {
    this.playType = playType;
    return this;
  }

  /**
   * Get playType
   * @return playType
   */
  @javax.annotation.Nullable
  public String getPlayType() {
    return playType;
  }

  public void setPlayType(String playType) {
    this.playType = playType;
  }


  public Play ppa(BigDecimal ppa) {
    this.ppa = ppa;
    return this;
  }

  /**
   * Get ppa
   * @return ppa
   */
  @javax.annotation.Nullable
  public BigDecimal getPpa() {
    return ppa;
  }

  public void setPpa(BigDecimal ppa) {
    this.ppa = ppa;
  }


  public Play scoring(Boolean scoring) {
    this.scoring = scoring;
    return this;
  }

  /**
   * Get scoring
   * @return scoring
   */
  @javax.annotation.Nullable
  public Boolean getScoring() {
    return scoring;
  }

  public void setScoring(Boolean scoring) {
    this.scoring = scoring;
  }


  public Play wallclock(String wallclock) {
    this.wallclock = wallclock;
    return this;
  }

  /**
   * Get wallclock
   * @return wallclock
   */
  @javax.annotation.Nullable
  public String getWallclock() {
    return wallclock;
  }

  public void setWallclock(String wallclock) {
    this.wallclock = wallclock;
  }


  public Play yardLine(Integer yardLine) {
    this.yardLine = yardLine;
    return this;
  }

  /**
   * Get yardLine
   * @return yardLine
   */
  @javax.annotation.Nullable
  public Integer getYardLine() {
    return yardLine;
  }

  public void setYardLine(Integer yardLine) {
    this.yardLine = yardLine;
  }


  public Play yardsGained(Integer yardsGained) {
    this.yardsGained = yardsGained;
    return this;
  }

  /**
   * Get yardsGained
   * @return yardsGained
   */
  @javax.annotation.Nullable
  public Integer getYardsGained() {
    return yardsGained;
  }

  public void setYardsGained(Integer yardsGained) {
    this.yardsGained = yardsGained;
  }


  public Play yardsToGoal(Integer yardsToGoal) {
    this.yardsToGoal = yardsToGoal;
    return this;
  }

  /**
   * Get yardsToGoal
   * @return yardsToGoal
   */
  @javax.annotation.Nullable
  public Integer getYardsToGoal() {
    return yardsToGoal;
  }

  public void setYardsToGoal(Integer yardsToGoal) {
    this.yardsToGoal = yardsToGoal;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Play play = (Play) o;
    return Objects.equals(this.away, play.away) &&
        Objects.equals(this.clock, play.clock) &&
        Objects.equals(this.defense, play.defense) &&
        Objects.equals(this.defenseConference, play.defenseConference) &&
        Objects.equals(this.defenseScore, play.defenseScore) &&
        Objects.equals(this.defenseTimeouts, play.defenseTimeouts) &&
        Objects.equals(this.distance, play.distance) &&
        Objects.equals(this.down, play.down) &&
        Objects.equals(this.driveId, play.driveId) &&
        Objects.equals(this.driveNumber, play.driveNumber) &&
        Objects.equals(this.gameId, play.gameId) &&
        Objects.equals(this.home, play.home) &&
        Objects.equals(this.id, play.id) &&
        Objects.equals(this.offense, play.offense) &&
        Objects.equals(this.offenseConference, play.offenseConference) &&
        Objects.equals(this.offenseScore, play.offenseScore) &&
        Objects.equals(this.offenseTimeouts, play.offenseTimeouts) &&
        Objects.equals(this.period, play.period) &&
        Objects.equals(this.playNumber, play.playNumber) &&
        Objects.equals(this.playText, play.playText) &&
        Objects.equals(this.playType, play.playType) &&
        Objects.equals(this.ppa, play.ppa) &&
        Objects.equals(this.scoring, play.scoring) &&
        Objects.equals(this.wallclock, play.wallclock) &&
        Objects.equals(this.yardLine, play.yardLine) &&
        Objects.equals(this.yardsGained, play.yardsGained) &&
        Objects.equals(this.yardsToGoal, play.yardsToGoal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(away, clock, defense, defenseConference, defenseScore, defenseTimeouts, distance, down, driveId, driveNumber, gameId, home, id, offense, offenseConference, offenseScore, offenseTimeouts, period, playNumber, playText, playType, ppa, scoring, wallclock, yardLine, yardsGained, yardsToGoal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Play {\n");
    sb.append("    away: ").append(toIndentedString(away)).append("\n");
    sb.append("    clock: ").append(toIndentedString(clock)).append("\n");
    sb.append("    defense: ").append(toIndentedString(defense)).append("\n");
    sb.append("    defenseConference: ").append(toIndentedString(defenseConference)).append("\n");
    sb.append("    defenseScore: ").append(toIndentedString(defenseScore)).append("\n");
    sb.append("    defenseTimeouts: ").append(toIndentedString(defenseTimeouts)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    down: ").append(toIndentedString(down)).append("\n");
    sb.append("    driveId: ").append(toIndentedString(driveId)).append("\n");
    sb.append("    driveNumber: ").append(toIndentedString(driveNumber)).append("\n");
    sb.append("    gameId: ").append(toIndentedString(gameId)).append("\n");
    sb.append("    home: ").append(toIndentedString(home)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    offense: ").append(toIndentedString(offense)).append("\n");
    sb.append("    offenseConference: ").append(toIndentedString(offenseConference)).append("\n");
    sb.append("    offenseScore: ").append(toIndentedString(offenseScore)).append("\n");
    sb.append("    offenseTimeouts: ").append(toIndentedString(offenseTimeouts)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    playNumber: ").append(toIndentedString(playNumber)).append("\n");
    sb.append("    playText: ").append(toIndentedString(playText)).append("\n");
    sb.append("    playType: ").append(toIndentedString(playType)).append("\n");
    sb.append("    ppa: ").append(toIndentedString(ppa)).append("\n");
    sb.append("    scoring: ").append(toIndentedString(scoring)).append("\n");
    sb.append("    wallclock: ").append(toIndentedString(wallclock)).append("\n");
    sb.append("    yardLine: ").append(toIndentedString(yardLine)).append("\n");
    sb.append("    yardsGained: ").append(toIndentedString(yardsGained)).append("\n");
    sb.append("    yardsToGoal: ").append(toIndentedString(yardsToGoal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("away");
    openapiFields.add("clock");
    openapiFields.add("defense");
    openapiFields.add("defense_conference");
    openapiFields.add("defense_score");
    openapiFields.add("defense_timeouts");
    openapiFields.add("distance");
    openapiFields.add("down");
    openapiFields.add("drive_id");
    openapiFields.add("drive_number");
    openapiFields.add("game_id");
    openapiFields.add("home");
    openapiFields.add("id");
    openapiFields.add("offense");
    openapiFields.add("offense_conference");
    openapiFields.add("offense_score");
    openapiFields.add("offense_timeouts");
    openapiFields.add("period");
    openapiFields.add("play_number");
    openapiFields.add("play_text");
    openapiFields.add("play_type");
    openapiFields.add("ppa");
    openapiFields.add("scoring");
    openapiFields.add("wallclock");
    openapiFields.add("yard_line");
    openapiFields.add("yards_gained");
    openapiFields.add("yards_to_goal");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Play
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Play.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Play is not found in the empty JSON string", Play.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Play.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Play` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("away") != null && !jsonObj.get("away").isJsonNull()) && !jsonObj.get("away").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `away` to be a primitive type in the JSON string but got `%s`", jsonObj.get("away").toString()));
      }
      // validate the optional field `clock`
      if (jsonObj.get("clock") != null && !jsonObj.get("clock").isJsonNull()) {
        DriveEndTime.validateJsonElement(jsonObj.get("clock"));
      }
      if ((jsonObj.get("defense") != null && !jsonObj.get("defense").isJsonNull()) && !jsonObj.get("defense").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defense` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defense").toString()));
      }
      if ((jsonObj.get("defense_conference") != null && !jsonObj.get("defense_conference").isJsonNull()) && !jsonObj.get("defense_conference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defense_conference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defense_conference").toString()));
      }
      if ((jsonObj.get("home") != null && !jsonObj.get("home").isJsonNull()) && !jsonObj.get("home").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `home` to be a primitive type in the JSON string but got `%s`", jsonObj.get("home").toString()));
      }
      if ((jsonObj.get("offense") != null && !jsonObj.get("offense").isJsonNull()) && !jsonObj.get("offense").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offense` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offense").toString()));
      }
      if ((jsonObj.get("offense_conference") != null && !jsonObj.get("offense_conference").isJsonNull()) && !jsonObj.get("offense_conference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offense_conference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offense_conference").toString()));
      }
      if ((jsonObj.get("play_text") != null && !jsonObj.get("play_text").isJsonNull()) && !jsonObj.get("play_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `play_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("play_text").toString()));
      }
      if ((jsonObj.get("play_type") != null && !jsonObj.get("play_type").isJsonNull()) && !jsonObj.get("play_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `play_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("play_type").toString()));
      }
      if ((jsonObj.get("wallclock") != null && !jsonObj.get("wallclock").isJsonNull()) && !jsonObj.get("wallclock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wallclock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wallclock").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Play.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Play' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Play> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Play.class));

       return (TypeAdapter<T>) new TypeAdapter<Play>() {
           @Override
           public void write(JsonWriter out, Play value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Play read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Play given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Play
   * @throws IOException if the JSON string is invalid with respect to Play
   */
  public static Play fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Play.class);
  }

  /**
   * Convert an instance of Play to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

