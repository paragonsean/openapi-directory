/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.LivePlayByPlay;
import org.openapitools.client.model.Play;
import org.openapitools.client.model.PlayStat;
import org.openapitools.client.model.PlayStatType;
import org.openapitools.client.model.PlayType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlaysApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PlaysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlaysApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getLivePlays
     * @param id Game id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLivePlaysCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/live/plays";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLivePlaysValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getLivePlays(Async)");
        }

        return getLivePlaysCall(id, _callback);

    }

    /**
     * Live metrics and PBP (Patreon only)
     * Get live metrics and PBP
     * @param id Game id (required)
     * @return LivePlayByPlay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public LivePlayByPlay getLivePlays(Integer id) throws ApiException {
        ApiResponse<LivePlayByPlay> localVarResp = getLivePlaysWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Live metrics and PBP (Patreon only)
     * Get live metrics and PBP
     * @param id Game id (required)
     * @return ApiResponse&lt;LivePlayByPlay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LivePlayByPlay> getLivePlaysWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getLivePlaysValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<LivePlayByPlay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Live metrics and PBP (Patreon only) (asynchronously)
     * Get live metrics and PBP
     * @param id Game id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLivePlaysAsync(Integer id, final ApiCallback<LivePlayByPlay> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLivePlaysValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<LivePlayByPlay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPlayStatTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlayStatTypesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/play/stat/types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlayStatTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getPlayStatTypesCall(_callback);

    }

    /**
     * Types of player play stats
     * Type of play stats
     * @return List&lt;PlayStatType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<PlayStatType> getPlayStatTypes() throws ApiException {
        ApiResponse<List<PlayStatType>> localVarResp = getPlayStatTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Types of player play stats
     * Type of play stats
     * @return ApiResponse&lt;List&lt;PlayStatType&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PlayStatType>> getPlayStatTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPlayStatTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<PlayStatType>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Types of player play stats (asynchronously)
     * Type of play stats
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlayStatTypesAsync(final ApiCallback<List<PlayStatType>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlayStatTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<PlayStatType>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPlayStats
     * @param year Year filter (optional)
     * @param week Week filter (optional)
     * @param team Team filter (optional)
     * @param gameId gameId filter (from /games endpoint) (optional)
     * @param athleteId athleteId filter (from /roster endpoint) (optional)
     * @param statTypeId statTypeId filter (from /play/stat/types endpoint) (optional)
     * @param seasonType regular, postseason, or both (optional)
     * @param conference conference abbreviation filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlayStatsCall(Integer year, Integer week, String team, Integer gameId, Integer athleteId, Integer statTypeId, String seasonType, String conference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/play/stats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (week != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("week", week));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (gameId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gameId", gameId));
        }

        if (athleteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("athleteId", athleteId));
        }

        if (statTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statTypeId", statTypeId));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seasonType", seasonType));
        }

        if (conference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conference", conference));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlayStatsValidateBeforeCall(Integer year, Integer week, String team, Integer gameId, Integer athleteId, Integer statTypeId, String seasonType, String conference, final ApiCallback _callback) throws ApiException {
        return getPlayStatsCall(year, week, team, gameId, athleteId, statTypeId, seasonType, conference, _callback);

    }

    /**
     * Play stats by play
     * Gets player stats associated by play (limit 1000)
     * @param year Year filter (optional)
     * @param week Week filter (optional)
     * @param team Team filter (optional)
     * @param gameId gameId filter (from /games endpoint) (optional)
     * @param athleteId athleteId filter (from /roster endpoint) (optional)
     * @param statTypeId statTypeId filter (from /play/stat/types endpoint) (optional)
     * @param seasonType regular, postseason, or both (optional)
     * @param conference conference abbreviation filter (optional)
     * @return List&lt;PlayStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<PlayStat> getPlayStats(Integer year, Integer week, String team, Integer gameId, Integer athleteId, Integer statTypeId, String seasonType, String conference) throws ApiException {
        ApiResponse<List<PlayStat>> localVarResp = getPlayStatsWithHttpInfo(year, week, team, gameId, athleteId, statTypeId, seasonType, conference);
        return localVarResp.getData();
    }

    /**
     * Play stats by play
     * Gets player stats associated by play (limit 1000)
     * @param year Year filter (optional)
     * @param week Week filter (optional)
     * @param team Team filter (optional)
     * @param gameId gameId filter (from /games endpoint) (optional)
     * @param athleteId athleteId filter (from /roster endpoint) (optional)
     * @param statTypeId statTypeId filter (from /play/stat/types endpoint) (optional)
     * @param seasonType regular, postseason, or both (optional)
     * @param conference conference abbreviation filter (optional)
     * @return ApiResponse&lt;List&lt;PlayStat&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PlayStat>> getPlayStatsWithHttpInfo(Integer year, Integer week, String team, Integer gameId, Integer athleteId, Integer statTypeId, String seasonType, String conference) throws ApiException {
        okhttp3.Call localVarCall = getPlayStatsValidateBeforeCall(year, week, team, gameId, athleteId, statTypeId, seasonType, conference, null);
        Type localVarReturnType = new TypeToken<List<PlayStat>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Play stats by play (asynchronously)
     * Gets player stats associated by play (limit 1000)
     * @param year Year filter (optional)
     * @param week Week filter (optional)
     * @param team Team filter (optional)
     * @param gameId gameId filter (from /games endpoint) (optional)
     * @param athleteId athleteId filter (from /roster endpoint) (optional)
     * @param statTypeId statTypeId filter (from /play/stat/types endpoint) (optional)
     * @param seasonType regular, postseason, or both (optional)
     * @param conference conference abbreviation filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlayStatsAsync(Integer year, Integer week, String team, Integer gameId, Integer athleteId, Integer statTypeId, String seasonType, String conference, final ApiCallback<List<PlayStat>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlayStatsValidateBeforeCall(year, week, team, gameId, athleteId, statTypeId, seasonType, conference, _callback);
        Type localVarReturnType = new TypeToken<List<PlayStat>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPlayTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlayTypesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/play/types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlayTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getPlayTypesCall(_callback);

    }

    /**
     * Play types
     * Types of plays
     * @return List&lt;PlayType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<PlayType> getPlayTypes() throws ApiException {
        ApiResponse<List<PlayType>> localVarResp = getPlayTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Play types
     * Types of plays
     * @return ApiResponse&lt;List&lt;PlayType&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PlayType>> getPlayTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPlayTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<PlayType>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Play types (asynchronously)
     * Types of plays
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlayTypesAsync(final ApiCallback<List<PlayType>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlayTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<PlayType>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPlays
     * @param year Year filter (required)
     * @param week Week filter (required if team, offense, or defense, not specified) (required)
     * @param seasonType Season type filter (optional, default to regular)
     * @param team Team filter (optional)
     * @param offense Offensive team filter (optional)
     * @param defense Defensive team filter (optional)
     * @param conference Conference filter (optional)
     * @param offenseConference Offensive conference filter (optional)
     * @param defenseConference Defensive conference filter (optional)
     * @param playType Play type filter (optional)
     * @param classification Division classification filter (fbs/fcs/ii/iii) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlaysCall(Integer year, Integer week, String seasonType, String team, String offense, String defense, String conference, String offenseConference, String defenseConference, Integer playType, String classification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/plays";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seasonType", seasonType));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (week != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("week", week));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (offense != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offense", offense));
        }

        if (defense != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("defense", defense));
        }

        if (conference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conference", conference));
        }

        if (offenseConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offenseConference", offenseConference));
        }

        if (defenseConference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("defenseConference", defenseConference));
        }

        if (playType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("playType", playType));
        }

        if (classification != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("classification", classification));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlaysValidateBeforeCall(Integer year, Integer week, String seasonType, String team, String offense, String defense, String conference, String offenseConference, String defenseConference, Integer playType, String classification, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getPlays(Async)");
        }

        // verify the required parameter 'week' is set
        if (week == null) {
            throw new ApiException("Missing the required parameter 'week' when calling getPlays(Async)");
        }

        return getPlaysCall(year, week, seasonType, team, offense, defense, conference, offenseConference, defenseConference, playType, classification, _callback);

    }

    /**
     * Play by play data
     * Get play data and results
     * @param year Year filter (required)
     * @param week Week filter (required if team, offense, or defense, not specified) (required)
     * @param seasonType Season type filter (optional, default to regular)
     * @param team Team filter (optional)
     * @param offense Offensive team filter (optional)
     * @param defense Defensive team filter (optional)
     * @param conference Conference filter (optional)
     * @param offenseConference Offensive conference filter (optional)
     * @param defenseConference Defensive conference filter (optional)
     * @param playType Play type filter (optional)
     * @param classification Division classification filter (fbs/fcs/ii/iii) (optional)
     * @return List&lt;Play&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<Play> getPlays(Integer year, Integer week, String seasonType, String team, String offense, String defense, String conference, String offenseConference, String defenseConference, Integer playType, String classification) throws ApiException {
        ApiResponse<List<Play>> localVarResp = getPlaysWithHttpInfo(year, week, seasonType, team, offense, defense, conference, offenseConference, defenseConference, playType, classification);
        return localVarResp.getData();
    }

    /**
     * Play by play data
     * Get play data and results
     * @param year Year filter (required)
     * @param week Week filter (required if team, offense, or defense, not specified) (required)
     * @param seasonType Season type filter (optional, default to regular)
     * @param team Team filter (optional)
     * @param offense Offensive team filter (optional)
     * @param defense Defensive team filter (optional)
     * @param conference Conference filter (optional)
     * @param offenseConference Offensive conference filter (optional)
     * @param defenseConference Defensive conference filter (optional)
     * @param playType Play type filter (optional)
     * @param classification Division classification filter (fbs/fcs/ii/iii) (optional)
     * @return ApiResponse&lt;List&lt;Play&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Play>> getPlaysWithHttpInfo(Integer year, Integer week, String seasonType, String team, String offense, String defense, String conference, String offenseConference, String defenseConference, Integer playType, String classification) throws ApiException {
        okhttp3.Call localVarCall = getPlaysValidateBeforeCall(year, week, seasonType, team, offense, defense, conference, offenseConference, defenseConference, playType, classification, null);
        Type localVarReturnType = new TypeToken<List<Play>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Play by play data (asynchronously)
     * Get play data and results
     * @param year Year filter (required)
     * @param week Week filter (required if team, offense, or defense, not specified) (required)
     * @param seasonType Season type filter (optional, default to regular)
     * @param team Team filter (optional)
     * @param offense Offensive team filter (optional)
     * @param defense Defensive team filter (optional)
     * @param conference Conference filter (optional)
     * @param offenseConference Offensive conference filter (optional)
     * @param defenseConference Defensive conference filter (optional)
     * @param playType Play type filter (optional)
     * @param classification Division classification filter (fbs/fcs/ii/iii) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPlaysAsync(Integer year, Integer week, String seasonType, String team, String offense, String defense, String conference, String offenseConference, String defenseConference, Integer playType, String classification, final ApiCallback<List<Play>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlaysValidateBeforeCall(year, week, seasonType, team, offense, defense, conference, offenseConference, defenseConference, playType, classification, _callback);
        Type localVarReturnType = new TypeToken<List<Play>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
