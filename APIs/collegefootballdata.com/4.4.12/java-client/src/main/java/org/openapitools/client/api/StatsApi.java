/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AdvancedGameStat;
import org.openapitools.client.model.AdvancedSeasonStat;
import org.openapitools.client.model.TeamSeasonStat;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StatsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StatsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StatsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAdvancedTeamGameStats
     * @param year Year filter (required if no team specified) (optional)
     * @param week Week filter (optional)
     * @param team Team filter (required if no year specified) (optional)
     * @param opponent Opponent filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @param seasonType Season type filter (regular, postseason, or both) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvancedTeamGameStatsCall(Integer year, Integer week, String team, String opponent, Boolean excludeGarbageTime, String seasonType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/game/advanced";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (week != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("week", week));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (opponent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opponent", opponent));
        }

        if (excludeGarbageTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeGarbageTime", excludeGarbageTime));
        }

        if (seasonType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seasonType", seasonType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdvancedTeamGameStatsValidateBeforeCall(Integer year, Integer week, String team, String opponent, Boolean excludeGarbageTime, String seasonType, final ApiCallback _callback) throws ApiException {
        return getAdvancedTeamGameStatsCall(year, week, team, opponent, excludeGarbageTime, seasonType, _callback);

    }

    /**
     * Advanced team metrics by game
     * Advanced team game stats
     * @param year Year filter (required if no team specified) (optional)
     * @param week Week filter (optional)
     * @param team Team filter (required if no year specified) (optional)
     * @param opponent Opponent filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @param seasonType Season type filter (regular, postseason, or both) (optional)
     * @return List&lt;AdvancedGameStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<AdvancedGameStat> getAdvancedTeamGameStats(Integer year, Integer week, String team, String opponent, Boolean excludeGarbageTime, String seasonType) throws ApiException {
        ApiResponse<List<AdvancedGameStat>> localVarResp = getAdvancedTeamGameStatsWithHttpInfo(year, week, team, opponent, excludeGarbageTime, seasonType);
        return localVarResp.getData();
    }

    /**
     * Advanced team metrics by game
     * Advanced team game stats
     * @param year Year filter (required if no team specified) (optional)
     * @param week Week filter (optional)
     * @param team Team filter (required if no year specified) (optional)
     * @param opponent Opponent filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @param seasonType Season type filter (regular, postseason, or both) (optional)
     * @return ApiResponse&lt;List&lt;AdvancedGameStat&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AdvancedGameStat>> getAdvancedTeamGameStatsWithHttpInfo(Integer year, Integer week, String team, String opponent, Boolean excludeGarbageTime, String seasonType) throws ApiException {
        okhttp3.Call localVarCall = getAdvancedTeamGameStatsValidateBeforeCall(year, week, team, opponent, excludeGarbageTime, seasonType, null);
        Type localVarReturnType = new TypeToken<List<AdvancedGameStat>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Advanced team metrics by game (asynchronously)
     * Advanced team game stats
     * @param year Year filter (required if no team specified) (optional)
     * @param week Week filter (optional)
     * @param team Team filter (required if no year specified) (optional)
     * @param opponent Opponent filter (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @param seasonType Season type filter (regular, postseason, or both) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvancedTeamGameStatsAsync(Integer year, Integer week, String team, String opponent, Boolean excludeGarbageTime, String seasonType, final ApiCallback<List<AdvancedGameStat>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdvancedTeamGameStatsValidateBeforeCall(year, week, team, opponent, excludeGarbageTime, seasonType, _callback);
        Type localVarReturnType = new TypeToken<List<AdvancedGameStat>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAdvancedTeamSeasonStats
     * @param year Year filter (required if no team specified) (optional)
     * @param team Team filter (required if no year specified) (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @param startWeek Starting week filter (optional)
     * @param endWeek Starting week filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvancedTeamSeasonStatsCall(Integer year, String team, Boolean excludeGarbageTime, Integer startWeek, Integer endWeek, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/season/advanced";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (excludeGarbageTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeGarbageTime", excludeGarbageTime));
        }

        if (startWeek != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startWeek", startWeek));
        }

        if (endWeek != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endWeek", endWeek));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdvancedTeamSeasonStatsValidateBeforeCall(Integer year, String team, Boolean excludeGarbageTime, Integer startWeek, Integer endWeek, final ApiCallback _callback) throws ApiException {
        return getAdvancedTeamSeasonStatsCall(year, team, excludeGarbageTime, startWeek, endWeek, _callback);

    }

    /**
     * Advanced team metrics by season
     * Advanced team season stats
     * @param year Year filter (required if no team specified) (optional)
     * @param team Team filter (required if no year specified) (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @param startWeek Starting week filter (optional)
     * @param endWeek Starting week filter (optional)
     * @return List&lt;AdvancedSeasonStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<AdvancedSeasonStat> getAdvancedTeamSeasonStats(Integer year, String team, Boolean excludeGarbageTime, Integer startWeek, Integer endWeek) throws ApiException {
        ApiResponse<List<AdvancedSeasonStat>> localVarResp = getAdvancedTeamSeasonStatsWithHttpInfo(year, team, excludeGarbageTime, startWeek, endWeek);
        return localVarResp.getData();
    }

    /**
     * Advanced team metrics by season
     * Advanced team season stats
     * @param year Year filter (required if no team specified) (optional)
     * @param team Team filter (required if no year specified) (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @param startWeek Starting week filter (optional)
     * @param endWeek Starting week filter (optional)
     * @return ApiResponse&lt;List&lt;AdvancedSeasonStat&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AdvancedSeasonStat>> getAdvancedTeamSeasonStatsWithHttpInfo(Integer year, String team, Boolean excludeGarbageTime, Integer startWeek, Integer endWeek) throws ApiException {
        okhttp3.Call localVarCall = getAdvancedTeamSeasonStatsValidateBeforeCall(year, team, excludeGarbageTime, startWeek, endWeek, null);
        Type localVarReturnType = new TypeToken<List<AdvancedSeasonStat>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Advanced team metrics by season (asynchronously)
     * Advanced team season stats
     * @param year Year filter (required if no team specified) (optional)
     * @param team Team filter (required if no year specified) (optional)
     * @param excludeGarbageTime Filter to remove garbage time plays from calculations (optional)
     * @param startWeek Starting week filter (optional)
     * @param endWeek Starting week filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAdvancedTeamSeasonStatsAsync(Integer year, String team, Boolean excludeGarbageTime, Integer startWeek, Integer endWeek, final ApiCallback<List<AdvancedSeasonStat>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdvancedTeamSeasonStatsValidateBeforeCall(year, team, excludeGarbageTime, startWeek, endWeek, _callback);
        Type localVarReturnType = new TypeToken<List<AdvancedSeasonStat>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStatCategories
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatCategoriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatCategoriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getStatCategoriesCall(_callback);

    }

    /**
     * Team stat categories
     * Stat category list
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getStatCategories() throws ApiException {
        ApiResponse<List<String>> localVarResp = getStatCategoriesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Team stat categories
     * Stat category list
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getStatCategoriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getStatCategoriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Team stat categories (asynchronously)
     * Stat category list
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatCategoriesAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatCategoriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTeamSeasonStats
     * @param year Year filter (required if no team specified) (optional)
     * @param team Team filter (required if no year specified) (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param startWeek Starting week filter (optional)
     * @param endWeek Starting week filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamSeasonStatsCall(Integer year, String team, String conference, Integer startWeek, Integer endWeek, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats/season";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        if (conference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conference", conference));
        }

        if (startWeek != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startWeek", startWeek));
        }

        if (endWeek != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endWeek", endWeek));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeamSeasonStatsValidateBeforeCall(Integer year, String team, String conference, Integer startWeek, Integer endWeek, final ApiCallback _callback) throws ApiException {
        return getTeamSeasonStatsCall(year, team, conference, startWeek, endWeek, _callback);

    }

    /**
     * Team statistics by season
     * Team season stats
     * @param year Year filter (required if no team specified) (optional)
     * @param team Team filter (required if no year specified) (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param startWeek Starting week filter (optional)
     * @param endWeek Starting week filter (optional)
     * @return List&lt;TeamSeasonStat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<TeamSeasonStat> getTeamSeasonStats(Integer year, String team, String conference, Integer startWeek, Integer endWeek) throws ApiException {
        ApiResponse<List<TeamSeasonStat>> localVarResp = getTeamSeasonStatsWithHttpInfo(year, team, conference, startWeek, endWeek);
        return localVarResp.getData();
    }

    /**
     * Team statistics by season
     * Team season stats
     * @param year Year filter (required if no team specified) (optional)
     * @param team Team filter (required if no year specified) (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param startWeek Starting week filter (optional)
     * @param endWeek Starting week filter (optional)
     * @return ApiResponse&lt;List&lt;TeamSeasonStat&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TeamSeasonStat>> getTeamSeasonStatsWithHttpInfo(Integer year, String team, String conference, Integer startWeek, Integer endWeek) throws ApiException {
        okhttp3.Call localVarCall = getTeamSeasonStatsValidateBeforeCall(year, team, conference, startWeek, endWeek, null);
        Type localVarReturnType = new TypeToken<List<TeamSeasonStat>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Team statistics by season (asynchronously)
     * Team season stats
     * @param year Year filter (required if no team specified) (optional)
     * @param team Team filter (required if no year specified) (optional)
     * @param conference Conference abbreviation filter (optional)
     * @param startWeek Starting week filter (optional)
     * @param endWeek Starting week filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamSeasonStatsAsync(Integer year, String team, String conference, Integer startWeek, Integer endWeek, final ApiCallback<List<TeamSeasonStat>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeamSeasonStatsValidateBeforeCall(year, team, conference, startWeek, endWeek, _callback);
        Type localVarReturnType = new TypeToken<List<TeamSeasonStat>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
