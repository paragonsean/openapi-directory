/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DriveEndTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlayStat
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:22.913706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlayStat {
  public static final String SERIALIZED_NAME_ATHLETE_ID = "athleteId";
  @SerializedName(SERIALIZED_NAME_ATHLETE_ID)
  private Integer athleteId;

  public static final String SERIALIZED_NAME_ATHLETE_NAME = "athleteName";
  @SerializedName(SERIALIZED_NAME_ATHLETE_NAME)
  private String athleteName;

  public static final String SERIALIZED_NAME_CLOCK = "clock";
  @SerializedName(SERIALIZED_NAME_CLOCK)
  private DriveEndTime clock;

  public static final String SERIALIZED_NAME_CONFERENCE = "conference";
  @SerializedName(SERIALIZED_NAME_CONFERENCE)
  private String conference;

  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private Integer distance;

  public static final String SERIALIZED_NAME_DOWN = "down";
  @SerializedName(SERIALIZED_NAME_DOWN)
  private Integer down;

  public static final String SERIALIZED_NAME_DRIVE_ID = "driveId";
  @SerializedName(SERIALIZED_NAME_DRIVE_ID)
  private Integer driveId;

  public static final String SERIALIZED_NAME_GAME_ID = "gameId";
  @SerializedName(SERIALIZED_NAME_GAME_ID)
  private Integer gameId;

  public static final String SERIALIZED_NAME_OPPONENT = "opponent";
  @SerializedName(SERIALIZED_NAME_OPPONENT)
  private String opponent;

  public static final String SERIALIZED_NAME_OPPONENT_SCORE = "opponentScore";
  @SerializedName(SERIALIZED_NAME_OPPONENT_SCORE)
  private Integer opponentScore;

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private Integer period;

  public static final String SERIALIZED_NAME_PLAY_ID = "playId";
  @SerializedName(SERIALIZED_NAME_PLAY_ID)
  private Integer playId;

  public static final String SERIALIZED_NAME_SEASON = "season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private Integer season;

  public static final String SERIALIZED_NAME_STAT = "stat";
  @SerializedName(SERIALIZED_NAME_STAT)
  private Integer stat;

  public static final String SERIALIZED_NAME_STAT_TYPE = "statType";
  @SerializedName(SERIALIZED_NAME_STAT_TYPE)
  private String statType;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_TEAM_SCORE = "teamScore";
  @SerializedName(SERIALIZED_NAME_TEAM_SCORE)
  private Integer teamScore;

  public static final String SERIALIZED_NAME_WEEK = "week";
  @SerializedName(SERIALIZED_NAME_WEEK)
  private Integer week;

  public static final String SERIALIZED_NAME_YARDS_TO_GOAL = "yardsToGoal";
  @SerializedName(SERIALIZED_NAME_YARDS_TO_GOAL)
  private Integer yardsToGoal;

  public PlayStat() {
  }

  public PlayStat athleteId(Integer athleteId) {
    this.athleteId = athleteId;
    return this;
  }

  /**
   * Get athleteId
   * @return athleteId
   */
  @javax.annotation.Nullable
  public Integer getAthleteId() {
    return athleteId;
  }

  public void setAthleteId(Integer athleteId) {
    this.athleteId = athleteId;
  }


  public PlayStat athleteName(String athleteName) {
    this.athleteName = athleteName;
    return this;
  }

  /**
   * Get athleteName
   * @return athleteName
   */
  @javax.annotation.Nullable
  public String getAthleteName() {
    return athleteName;
  }

  public void setAthleteName(String athleteName) {
    this.athleteName = athleteName;
  }


  public PlayStat clock(DriveEndTime clock) {
    this.clock = clock;
    return this;
  }

  /**
   * Get clock
   * @return clock
   */
  @javax.annotation.Nullable
  public DriveEndTime getClock() {
    return clock;
  }

  public void setClock(DriveEndTime clock) {
    this.clock = clock;
  }


  public PlayStat conference(String conference) {
    this.conference = conference;
    return this;
  }

  /**
   * Get conference
   * @return conference
   */
  @javax.annotation.Nullable
  public String getConference() {
    return conference;
  }

  public void setConference(String conference) {
    this.conference = conference;
  }


  public PlayStat distance(Integer distance) {
    this.distance = distance;
    return this;
  }

  /**
   * Get distance
   * @return distance
   */
  @javax.annotation.Nullable
  public Integer getDistance() {
    return distance;
  }

  public void setDistance(Integer distance) {
    this.distance = distance;
  }


  public PlayStat down(Integer down) {
    this.down = down;
    return this;
  }

  /**
   * Get down
   * @return down
   */
  @javax.annotation.Nullable
  public Integer getDown() {
    return down;
  }

  public void setDown(Integer down) {
    this.down = down;
  }


  public PlayStat driveId(Integer driveId) {
    this.driveId = driveId;
    return this;
  }

  /**
   * Get driveId
   * @return driveId
   */
  @javax.annotation.Nullable
  public Integer getDriveId() {
    return driveId;
  }

  public void setDriveId(Integer driveId) {
    this.driveId = driveId;
  }


  public PlayStat gameId(Integer gameId) {
    this.gameId = gameId;
    return this;
  }

  /**
   * Get gameId
   * @return gameId
   */
  @javax.annotation.Nullable
  public Integer getGameId() {
    return gameId;
  }

  public void setGameId(Integer gameId) {
    this.gameId = gameId;
  }


  public PlayStat opponent(String opponent) {
    this.opponent = opponent;
    return this;
  }

  /**
   * Get opponent
   * @return opponent
   */
  @javax.annotation.Nullable
  public String getOpponent() {
    return opponent;
  }

  public void setOpponent(String opponent) {
    this.opponent = opponent;
  }


  public PlayStat opponentScore(Integer opponentScore) {
    this.opponentScore = opponentScore;
    return this;
  }

  /**
   * Get opponentScore
   * @return opponentScore
   */
  @javax.annotation.Nullable
  public Integer getOpponentScore() {
    return opponentScore;
  }

  public void setOpponentScore(Integer opponentScore) {
    this.opponentScore = opponentScore;
  }


  public PlayStat period(Integer period) {
    this.period = period;
    return this;
  }

  /**
   * Get period
   * @return period
   */
  @javax.annotation.Nullable
  public Integer getPeriod() {
    return period;
  }

  public void setPeriod(Integer period) {
    this.period = period;
  }


  public PlayStat playId(Integer playId) {
    this.playId = playId;
    return this;
  }

  /**
   * Get playId
   * @return playId
   */
  @javax.annotation.Nullable
  public Integer getPlayId() {
    return playId;
  }

  public void setPlayId(Integer playId) {
    this.playId = playId;
  }


  public PlayStat season(Integer season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public Integer getSeason() {
    return season;
  }

  public void setSeason(Integer season) {
    this.season = season;
  }


  public PlayStat stat(Integer stat) {
    this.stat = stat;
    return this;
  }

  /**
   * Get stat
   * @return stat
   */
  @javax.annotation.Nullable
  public Integer getStat() {
    return stat;
  }

  public void setStat(Integer stat) {
    this.stat = stat;
  }


  public PlayStat statType(String statType) {
    this.statType = statType;
    return this;
  }

  /**
   * Get statType
   * @return statType
   */
  @javax.annotation.Nullable
  public String getStatType() {
    return statType;
  }

  public void setStatType(String statType) {
    this.statType = statType;
  }


  public PlayStat team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public PlayStat teamScore(Integer teamScore) {
    this.teamScore = teamScore;
    return this;
  }

  /**
   * Get teamScore
   * @return teamScore
   */
  @javax.annotation.Nullable
  public Integer getTeamScore() {
    return teamScore;
  }

  public void setTeamScore(Integer teamScore) {
    this.teamScore = teamScore;
  }


  public PlayStat week(Integer week) {
    this.week = week;
    return this;
  }

  /**
   * Get week
   * @return week
   */
  @javax.annotation.Nullable
  public Integer getWeek() {
    return week;
  }

  public void setWeek(Integer week) {
    this.week = week;
  }


  public PlayStat yardsToGoal(Integer yardsToGoal) {
    this.yardsToGoal = yardsToGoal;
    return this;
  }

  /**
   * Get yardsToGoal
   * @return yardsToGoal
   */
  @javax.annotation.Nullable
  public Integer getYardsToGoal() {
    return yardsToGoal;
  }

  public void setYardsToGoal(Integer yardsToGoal) {
    this.yardsToGoal = yardsToGoal;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayStat playStat = (PlayStat) o;
    return Objects.equals(this.athleteId, playStat.athleteId) &&
        Objects.equals(this.athleteName, playStat.athleteName) &&
        Objects.equals(this.clock, playStat.clock) &&
        Objects.equals(this.conference, playStat.conference) &&
        Objects.equals(this.distance, playStat.distance) &&
        Objects.equals(this.down, playStat.down) &&
        Objects.equals(this.driveId, playStat.driveId) &&
        Objects.equals(this.gameId, playStat.gameId) &&
        Objects.equals(this.opponent, playStat.opponent) &&
        Objects.equals(this.opponentScore, playStat.opponentScore) &&
        Objects.equals(this.period, playStat.period) &&
        Objects.equals(this.playId, playStat.playId) &&
        Objects.equals(this.season, playStat.season) &&
        Objects.equals(this.stat, playStat.stat) &&
        Objects.equals(this.statType, playStat.statType) &&
        Objects.equals(this.team, playStat.team) &&
        Objects.equals(this.teamScore, playStat.teamScore) &&
        Objects.equals(this.week, playStat.week) &&
        Objects.equals(this.yardsToGoal, playStat.yardsToGoal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(athleteId, athleteName, clock, conference, distance, down, driveId, gameId, opponent, opponentScore, period, playId, season, stat, statType, team, teamScore, week, yardsToGoal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayStat {\n");
    sb.append("    athleteId: ").append(toIndentedString(athleteId)).append("\n");
    sb.append("    athleteName: ").append(toIndentedString(athleteName)).append("\n");
    sb.append("    clock: ").append(toIndentedString(clock)).append("\n");
    sb.append("    conference: ").append(toIndentedString(conference)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    down: ").append(toIndentedString(down)).append("\n");
    sb.append("    driveId: ").append(toIndentedString(driveId)).append("\n");
    sb.append("    gameId: ").append(toIndentedString(gameId)).append("\n");
    sb.append("    opponent: ").append(toIndentedString(opponent)).append("\n");
    sb.append("    opponentScore: ").append(toIndentedString(opponentScore)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    playId: ").append(toIndentedString(playId)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    stat: ").append(toIndentedString(stat)).append("\n");
    sb.append("    statType: ").append(toIndentedString(statType)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    teamScore: ").append(toIndentedString(teamScore)).append("\n");
    sb.append("    week: ").append(toIndentedString(week)).append("\n");
    sb.append("    yardsToGoal: ").append(toIndentedString(yardsToGoal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("athleteId");
    openapiFields.add("athleteName");
    openapiFields.add("clock");
    openapiFields.add("conference");
    openapiFields.add("distance");
    openapiFields.add("down");
    openapiFields.add("driveId");
    openapiFields.add("gameId");
    openapiFields.add("opponent");
    openapiFields.add("opponentScore");
    openapiFields.add("period");
    openapiFields.add("playId");
    openapiFields.add("season");
    openapiFields.add("stat");
    openapiFields.add("statType");
    openapiFields.add("team");
    openapiFields.add("teamScore");
    openapiFields.add("week");
    openapiFields.add("yardsToGoal");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlayStat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlayStat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayStat is not found in the empty JSON string", PlayStat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlayStat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlayStat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("athleteName") != null && !jsonObj.get("athleteName").isJsonNull()) && !jsonObj.get("athleteName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `athleteName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("athleteName").toString()));
      }
      // validate the optional field `clock`
      if (jsonObj.get("clock") != null && !jsonObj.get("clock").isJsonNull()) {
        DriveEndTime.validateJsonElement(jsonObj.get("clock"));
      }
      if ((jsonObj.get("conference") != null && !jsonObj.get("conference").isJsonNull()) && !jsonObj.get("conference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conference").toString()));
      }
      if ((jsonObj.get("opponent") != null && !jsonObj.get("opponent").isJsonNull()) && !jsonObj.get("opponent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `opponent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("opponent").toString()));
      }
      if ((jsonObj.get("statType") != null && !jsonObj.get("statType").isJsonNull()) && !jsonObj.get("statType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statType").toString()));
      }
      if ((jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) && !jsonObj.get("team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayStat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayStat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayStat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayStat.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayStat>() {
           @Override
           public void write(JsonWriter out, PlayStat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayStat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlayStat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlayStat
   * @throws IOException if the JSON string is invalid with respect to PlayStat
   */
  public static PlayStat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayStat.class);
  }

  /**
   * Convert an instance of PlayStat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

