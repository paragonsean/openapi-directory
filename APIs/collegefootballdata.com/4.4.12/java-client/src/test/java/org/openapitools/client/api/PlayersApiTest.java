/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.PlayerSearchResult;
import org.openapitools.client.model.PlayerSeasonStat;
import org.openapitools.client.model.PlayerUsage;
import org.openapitools.client.model.PortalPlayer;
import org.openapitools.client.model.ReturningProduction;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PlayersApi
 */
@Disabled
public class PlayersApiTest {

    private final PlayersApi api = new PlayersApi();

    /**
     * Player stats by season
     *
     * Season player stats
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlayerSeasonStatsTest() throws ApiException {
        Integer year = null;
        String team = null;
        String conference = null;
        Integer startWeek = null;
        Integer endWeek = null;
        String seasonType = null;
        String category = null;
        List<PlayerSeasonStat> response = api.getPlayerSeasonStats(year, team, conference, startWeek, endWeek, seasonType, category);
        // TODO: test validations
    }

    /**
     * Player usage metrics broken down by season
     *
     * Player usage metrics by season
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlayerUsageTest() throws ApiException {
        Integer year = null;
        String team = null;
        String conference = null;
        String position = null;
        Integer playerId = null;
        Boolean excludeGarbageTime = null;
        List<PlayerUsage> response = api.getPlayerUsage(year, team, conference, position, playerId, excludeGarbageTime);
        // TODO: test validations
    }

    /**
     * Team returning production metrics
     *
     * Returning production metrics
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReturningProductionTest() throws ApiException {
        Integer year = null;
        String team = null;
        String conference = null;
        List<ReturningProduction> response = api.getReturningProduction(year, team, conference);
        // TODO: test validations
    }

    /**
     * Transfer portal by season
     *
     * Transfer portal by season
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransferPortalTest() throws ApiException {
        Integer year = null;
        List<PortalPlayer> response = api.getTransferPortal(year);
        // TODO: test validations
    }

    /**
     * Search for player information
     *
     * Search for players
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void playerSearchTest() throws ApiException {
        String searchTerm = null;
        String position = null;
        String team = null;
        Integer year = null;
        List<PlayerSearchResult> response = api.playerSearch(searchTerm, position, team, year);
        // TODO: test validations
    }

}
