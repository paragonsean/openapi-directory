/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GamePPA;
import org.openapitools.client.model.PlayWP;
import org.openapitools.client.model.PlayerGamePPA;
import org.openapitools.client.model.PlayerSeasonPPA;
import org.openapitools.client.model.PredictedPoints;
import org.openapitools.client.model.PregameWP;
import org.openapitools.client.model.TeamPPA;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MetricsApi
 */
@Disabled
public class MetricsApiTest {

    private final MetricsApi api = new MetricsApi();

    /**
     * Team Predicated Points Added (PPA/EPA) by game
     *
     * Predicted Points Added (PPA) by game
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGamePPATest() throws ApiException {
        Integer year = null;
        Integer week = null;
        String team = null;
        String conference = null;
        Boolean excludeGarbageTime = null;
        String seasonType = null;
        List<GamePPA> response = api.getGamePPA(year, week, team, conference, excludeGarbageTime, seasonType);
        // TODO: test validations
    }

    /**
     * Player Predicated Points Added (PPA/EPA) broken down by game
     *
     * Predicted Points Added (PPA) by player game
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlayerGamePPATest() throws ApiException {
        Integer year = null;
        Integer week = null;
        String team = null;
        String position = null;
        Integer playerId = null;
        String threshold = null;
        Boolean excludeGarbageTime = null;
        String seasonType = null;
        List<PlayerGamePPA> response = api.getPlayerGamePPA(year, week, team, position, playerId, threshold, excludeGarbageTime, seasonType);
        // TODO: test validations
    }

    /**
     * Player Predicated Points Added (PPA/EPA) broken down by season
     *
     * Predicted Points Added (PPA) by player season
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlayerSeasonPPATest() throws ApiException {
        Integer year = null;
        String team = null;
        String conference = null;
        String position = null;
        Integer playerId = null;
        String threshold = null;
        Boolean excludeGarbageTime = null;
        List<PlayerSeasonPPA> response = api.getPlayerSeasonPPA(year, team, conference, position, playerId, threshold, excludeGarbageTime);
        // TODO: test validations
    }

    /**
     * Predicted Points (i.e. Expected Points or EP)
     *
     * Predicted Points
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPredictedPointsTest() throws ApiException {
        Integer down = null;
        Integer distance = null;
        List<PredictedPoints> response = api.getPredictedPoints(down, distance);
        // TODO: test validations
    }

    /**
     * Pregame win probability data
     *
     * Pregame win probabilities
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPregameWinProbabilitiesTest() throws ApiException {
        Integer year = null;
        Integer week = null;
        String team = null;
        String seasonType = null;
        List<PregameWP> response = api.getPregameWinProbabilities(year, week, team, seasonType);
        // TODO: test validations
    }

    /**
     * Predicted Points Added (PPA/EPA) data by team
     *
     * Predicted Points Added (PPA)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamPPATest() throws ApiException {
        Integer year = null;
        String team = null;
        String conference = null;
        Boolean excludeGarbageTime = null;
        List<TeamPPA> response = api.getTeamPPA(year, team, conference, excludeGarbageTime);
        // TODO: test validations
    }

    /**
     * Win probability chart data
     *
     * Win probability data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWinProbabilityDataTest() throws ApiException {
        Integer gameId = null;
        List<PlayWP> response = api.getWinProbabilityData(gameId);
        // TODO: test validations
    }

}
