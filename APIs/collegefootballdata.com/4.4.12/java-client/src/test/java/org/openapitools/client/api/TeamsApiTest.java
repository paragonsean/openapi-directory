/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Player;
import org.openapitools.client.model.Team;
import org.openapitools.client.model.TeamMatchup;
import org.openapitools.client.model.TeamTalent;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TeamsApi
 */
@Disabled
public class TeamsApiTest {

    private final TeamsApi api = new TeamsApi();

    /**
     * FBS team list
     *
     * Information on major division teams
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFbsTeamsTest() throws ApiException {
        Integer year = null;
        List<Team> response = api.getFbsTeams(year);
        // TODO: test validations
    }

    /**
     * Team rosters
     *
     * Roster data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRosterTest() throws ApiException {
        String team = null;
        Integer year = null;
        List<Player> response = api.getRoster(team, year);
        // TODO: test validations
    }

    /**
     * Team talent composite rankings
     *
     * Team talent composite
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTalentTest() throws ApiException {
        Integer year = null;
        List<TeamTalent> response = api.getTalent(year);
        // TODO: test validations
    }

    /**
     * Team matchup history
     *
     * Matchup history
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamMatchupTest() throws ApiException {
        String team1 = null;
        String team2 = null;
        Integer minYear = null;
        Integer maxYear = null;
        TeamMatchup response = api.getTeamMatchup(team1, team2, minYear, maxYear);
        // TODO: test validations
    }

    /**
     * Team information
     *
     * Get team information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamsTest() throws ApiException {
        String conference = null;
        List<Team> response = api.getTeams(conference);
        // TODO: test validations
    }

}
