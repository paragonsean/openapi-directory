/*
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BoxScore;
import org.openapitools.client.model.Game;
import org.openapitools.client.model.GameMedia;
import org.openapitools.client.model.GameWeather;
import org.openapitools.client.model.PlayerGame;
import org.openapitools.client.model.ScoreboardGame;
import org.openapitools.client.model.TeamGame;
import org.openapitools.client.model.TeamRecord;
import org.openapitools.client.model.Week;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GamesApi
 */
@Disabled
public class GamesApiTest {

    private final GamesApi api = new GamesApi();

    /**
     * Advanced box scores
     *
     * Get advanced box score data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAdvancedBoxScoreTest() throws ApiException {
        Integer gameId = null;
        BoxScore response = api.getAdvancedBoxScore(gameId);
        // TODO: test validations
    }

    /**
     * Season calendar
     *
     * Get calendar of weeks by season
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCalendarTest() throws ApiException {
        Integer year = null;
        List<Week> response = api.getCalendar(year);
        // TODO: test validations
    }

    /**
     * Game media information and schedules
     *
     * Game media information (TV, radio, etc)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGameMediaTest() throws ApiException {
        Integer year = null;
        Integer week = null;
        String seasonType = null;
        String team = null;
        String conference = null;
        String mediaType = null;
        String classification = null;
        List<GameMedia> response = api.getGameMedia(year, week, seasonType, team, conference, mediaType, classification);
        // TODO: test validations
    }

    /**
     * Game weather information (Patreon only)
     *
     * Weather information for the hour of kickoff
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGameWeatherTest() throws ApiException {
        Integer gameId = null;
        Integer year = null;
        Integer week = null;
        String seasonType = null;
        String team = null;
        String conference = null;
        String classification = null;
        List<GameWeather> response = api.getGameWeather(gameId, year, week, seasonType, team, conference, classification);
        // TODO: test validations
    }

    /**
     * Games and results
     *
     * Get game results
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGamesTest() throws ApiException {
        Integer year = null;
        Integer week = null;
        String seasonType = null;
        String team = null;
        String home = null;
        String away = null;
        String conference = null;
        String division = null;
        Integer id = null;
        List<Game> response = api.getGames(year, week, seasonType, team, home, away, conference, division, id);
        // TODO: test validations
    }

    /**
     * Player game stats
     *
     * Player stats broken down by game
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlayerGameStatsTest() throws ApiException {
        Integer year = null;
        Integer week = null;
        String seasonType = null;
        String team = null;
        String conference = null;
        String category = null;
        Integer gameId = null;
        List<PlayerGame> response = api.getPlayerGameStats(year, week, seasonType, team, conference, category, gameId);
        // TODO: test validations
    }

    /**
     * Live game results (Patreon only)
     *
     * Get live game results
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScoreboardTest() throws ApiException {
        String classification = null;
        String conference = null;
        List<ScoreboardGame> response = api.getScoreboard(classification, conference);
        // TODO: test validations
    }

    /**
     * Team game stats
     *
     * Team stats broken down by game
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamGameStatsTest() throws ApiException {
        Integer year = null;
        Integer week = null;
        String seasonType = null;
        String team = null;
        String conference = null;
        Integer gameId = null;
        String classification = null;
        List<TeamGame> response = api.getTeamGameStats(year, week, seasonType, team, conference, gameId, classification);
        // TODO: test validations
    }

    /**
     * Team records
     *
     * Get team records by year
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamRecordsTest() throws ApiException {
        Integer year = null;
        String team = null;
        String conference = null;
        List<TeamRecord> response = api.getTeamRecords(year, team, conference);
        // TODO: test validations
    }

}
