# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.player_usage_usage import PlayerUsageUsage
from openapi_server import util


class PlayerUsage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conference: str=None, id: int=None, name: str=None, position: str=None, season: int=None, team: str=None, usage: PlayerUsageUsage=None):
        """PlayerUsage - a model defined in OpenAPI

        :param conference: The conference of this PlayerUsage.
        :param id: The id of this PlayerUsage.
        :param name: The name of this PlayerUsage.
        :param position: The position of this PlayerUsage.
        :param season: The season of this PlayerUsage.
        :param team: The team of this PlayerUsage.
        :param usage: The usage of this PlayerUsage.
        """
        self.openapi_types = {
            'conference': str,
            'id': int,
            'name': str,
            'position': str,
            'season': int,
            'team': str,
            'usage': PlayerUsageUsage
        }

        self.attribute_map = {
            'conference': 'conference',
            'id': 'id',
            'name': 'name',
            'position': 'position',
            'season': 'season',
            'team': 'team',
            'usage': 'usage'
        }

        self._conference = conference
        self._id = id
        self._name = name
        self._position = position
        self._season = season
        self._team = team
        self._usage = usage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlayerUsage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlayerUsage of this PlayerUsage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conference(self):
        """Gets the conference of this PlayerUsage.


        :return: The conference of this PlayerUsage.
        :rtype: str
        """
        return self._conference

    @conference.setter
    def conference(self, conference):
        """Sets the conference of this PlayerUsage.


        :param conference: The conference of this PlayerUsage.
        :type conference: str
        """

        self._conference = conference

    @property
    def id(self):
        """Gets the id of this PlayerUsage.


        :return: The id of this PlayerUsage.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlayerUsage.


        :param id: The id of this PlayerUsage.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PlayerUsage.


        :return: The name of this PlayerUsage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlayerUsage.


        :param name: The name of this PlayerUsage.
        :type name: str
        """

        self._name = name

    @property
    def position(self):
        """Gets the position of this PlayerUsage.


        :return: The position of this PlayerUsage.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this PlayerUsage.


        :param position: The position of this PlayerUsage.
        :type position: str
        """

        self._position = position

    @property
    def season(self):
        """Gets the season of this PlayerUsage.


        :return: The season of this PlayerUsage.
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this PlayerUsage.


        :param season: The season of this PlayerUsage.
        :type season: int
        """

        self._season = season

    @property
    def team(self):
        """Gets the team of this PlayerUsage.


        :return: The team of this PlayerUsage.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this PlayerUsage.


        :param team: The team of this PlayerUsage.
        :type team: str
        """

        self._team = team

    @property
    def usage(self):
        """Gets the usage of this PlayerUsage.


        :return: The usage of this PlayerUsage.
        :rtype: PlayerUsageUsage
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this PlayerUsage.


        :param usage: The usage of this PlayerUsage.
        :type usage: PlayerUsageUsage
        """

        self._usage = usage
