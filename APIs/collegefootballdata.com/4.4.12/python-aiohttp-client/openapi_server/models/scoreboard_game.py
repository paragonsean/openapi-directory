# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scoreboard_game_away_team import ScoreboardGameAwayTeam
from openapi_server.models.scoreboard_game_betting import ScoreboardGameBetting
from openapi_server.models.scoreboard_game_venue import ScoreboardGameVenue
from openapi_server.models.scoreboard_game_weather import ScoreboardGameWeather
from openapi_server import util


class ScoreboardGame(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, away_team: ScoreboardGameAwayTeam=None, betting: ScoreboardGameBetting=None, clock: str=None, conference_game: bool=None, home_team: ScoreboardGameAwayTeam=None, id: int=None, neutral_site: bool=None, period: int=None, possession: str=None, situation: str=None, start_date: str=None, start_time_tbd: bool=None, status: str=None, tv: str=None, venue: ScoreboardGameVenue=None, weather: ScoreboardGameWeather=None):
        """ScoreboardGame - a model defined in OpenAPI

        :param away_team: The away_team of this ScoreboardGame.
        :param betting: The betting of this ScoreboardGame.
        :param clock: The clock of this ScoreboardGame.
        :param conference_game: The conference_game of this ScoreboardGame.
        :param home_team: The home_team of this ScoreboardGame.
        :param id: The id of this ScoreboardGame.
        :param neutral_site: The neutral_site of this ScoreboardGame.
        :param period: The period of this ScoreboardGame.
        :param possession: The possession of this ScoreboardGame.
        :param situation: The situation of this ScoreboardGame.
        :param start_date: The start_date of this ScoreboardGame.
        :param start_time_tbd: The start_time_tbd of this ScoreboardGame.
        :param status: The status of this ScoreboardGame.
        :param tv: The tv of this ScoreboardGame.
        :param venue: The venue of this ScoreboardGame.
        :param weather: The weather of this ScoreboardGame.
        """
        self.openapi_types = {
            'away_team': ScoreboardGameAwayTeam,
            'betting': ScoreboardGameBetting,
            'clock': str,
            'conference_game': bool,
            'home_team': ScoreboardGameAwayTeam,
            'id': int,
            'neutral_site': bool,
            'period': int,
            'possession': str,
            'situation': str,
            'start_date': str,
            'start_time_tbd': bool,
            'status': str,
            'tv': str,
            'venue': ScoreboardGameVenue,
            'weather': ScoreboardGameWeather
        }

        self.attribute_map = {
            'away_team': 'awayTeam',
            'betting': 'betting',
            'clock': 'clock',
            'conference_game': 'conferenceGame',
            'home_team': 'homeTeam',
            'id': 'id',
            'neutral_site': 'neutralSite',
            'period': 'period',
            'possession': 'possession',
            'situation': 'situation',
            'start_date': 'startDate',
            'start_time_tbd': 'startTimeTBD',
            'status': 'status',
            'tv': 'tv',
            'venue': 'venue',
            'weather': 'weather'
        }

        self._away_team = away_team
        self._betting = betting
        self._clock = clock
        self._conference_game = conference_game
        self._home_team = home_team
        self._id = id
        self._neutral_site = neutral_site
        self._period = period
        self._possession = possession
        self._situation = situation
        self._start_date = start_date
        self._start_time_tbd = start_time_tbd
        self._status = status
        self._tv = tv
        self._venue = venue
        self._weather = weather

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScoreboardGame':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScoreboardGame of this ScoreboardGame.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def away_team(self):
        """Gets the away_team of this ScoreboardGame.


        :return: The away_team of this ScoreboardGame.
        :rtype: ScoreboardGameAwayTeam
        """
        return self._away_team

    @away_team.setter
    def away_team(self, away_team):
        """Sets the away_team of this ScoreboardGame.


        :param away_team: The away_team of this ScoreboardGame.
        :type away_team: ScoreboardGameAwayTeam
        """

        self._away_team = away_team

    @property
    def betting(self):
        """Gets the betting of this ScoreboardGame.


        :return: The betting of this ScoreboardGame.
        :rtype: ScoreboardGameBetting
        """
        return self._betting

    @betting.setter
    def betting(self, betting):
        """Sets the betting of this ScoreboardGame.


        :param betting: The betting of this ScoreboardGame.
        :type betting: ScoreboardGameBetting
        """

        self._betting = betting

    @property
    def clock(self):
        """Gets the clock of this ScoreboardGame.


        :return: The clock of this ScoreboardGame.
        :rtype: str
        """
        return self._clock

    @clock.setter
    def clock(self, clock):
        """Sets the clock of this ScoreboardGame.


        :param clock: The clock of this ScoreboardGame.
        :type clock: str
        """

        self._clock = clock

    @property
    def conference_game(self):
        """Gets the conference_game of this ScoreboardGame.


        :return: The conference_game of this ScoreboardGame.
        :rtype: bool
        """
        return self._conference_game

    @conference_game.setter
    def conference_game(self, conference_game):
        """Sets the conference_game of this ScoreboardGame.


        :param conference_game: The conference_game of this ScoreboardGame.
        :type conference_game: bool
        """

        self._conference_game = conference_game

    @property
    def home_team(self):
        """Gets the home_team of this ScoreboardGame.


        :return: The home_team of this ScoreboardGame.
        :rtype: ScoreboardGameAwayTeam
        """
        return self._home_team

    @home_team.setter
    def home_team(self, home_team):
        """Sets the home_team of this ScoreboardGame.


        :param home_team: The home_team of this ScoreboardGame.
        :type home_team: ScoreboardGameAwayTeam
        """

        self._home_team = home_team

    @property
    def id(self):
        """Gets the id of this ScoreboardGame.


        :return: The id of this ScoreboardGame.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScoreboardGame.


        :param id: The id of this ScoreboardGame.
        :type id: int
        """

        self._id = id

    @property
    def neutral_site(self):
        """Gets the neutral_site of this ScoreboardGame.


        :return: The neutral_site of this ScoreboardGame.
        :rtype: bool
        """
        return self._neutral_site

    @neutral_site.setter
    def neutral_site(self, neutral_site):
        """Sets the neutral_site of this ScoreboardGame.


        :param neutral_site: The neutral_site of this ScoreboardGame.
        :type neutral_site: bool
        """

        self._neutral_site = neutral_site

    @property
    def period(self):
        """Gets the period of this ScoreboardGame.


        :return: The period of this ScoreboardGame.
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this ScoreboardGame.


        :param period: The period of this ScoreboardGame.
        :type period: int
        """

        self._period = period

    @property
    def possession(self):
        """Gets the possession of this ScoreboardGame.


        :return: The possession of this ScoreboardGame.
        :rtype: str
        """
        return self._possession

    @possession.setter
    def possession(self, possession):
        """Sets the possession of this ScoreboardGame.


        :param possession: The possession of this ScoreboardGame.
        :type possession: str
        """

        self._possession = possession

    @property
    def situation(self):
        """Gets the situation of this ScoreboardGame.


        :return: The situation of this ScoreboardGame.
        :rtype: str
        """
        return self._situation

    @situation.setter
    def situation(self, situation):
        """Sets the situation of this ScoreboardGame.


        :param situation: The situation of this ScoreboardGame.
        :type situation: str
        """

        self._situation = situation

    @property
    def start_date(self):
        """Gets the start_date of this ScoreboardGame.


        :return: The start_date of this ScoreboardGame.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ScoreboardGame.


        :param start_date: The start_date of this ScoreboardGame.
        :type start_date: str
        """

        self._start_date = start_date

    @property
    def start_time_tbd(self):
        """Gets the start_time_tbd of this ScoreboardGame.


        :return: The start_time_tbd of this ScoreboardGame.
        :rtype: bool
        """
        return self._start_time_tbd

    @start_time_tbd.setter
    def start_time_tbd(self, start_time_tbd):
        """Sets the start_time_tbd of this ScoreboardGame.


        :param start_time_tbd: The start_time_tbd of this ScoreboardGame.
        :type start_time_tbd: bool
        """

        self._start_time_tbd = start_time_tbd

    @property
    def status(self):
        """Gets the status of this ScoreboardGame.


        :return: The status of this ScoreboardGame.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ScoreboardGame.


        :param status: The status of this ScoreboardGame.
        :type status: str
        """

        self._status = status

    @property
    def tv(self):
        """Gets the tv of this ScoreboardGame.


        :return: The tv of this ScoreboardGame.
        :rtype: str
        """
        return self._tv

    @tv.setter
    def tv(self, tv):
        """Sets the tv of this ScoreboardGame.


        :param tv: The tv of this ScoreboardGame.
        :type tv: str
        """

        self._tv = tv

    @property
    def venue(self):
        """Gets the venue of this ScoreboardGame.


        :return: The venue of this ScoreboardGame.
        :rtype: ScoreboardGameVenue
        """
        return self._venue

    @venue.setter
    def venue(self, venue):
        """Sets the venue of this ScoreboardGame.


        :param venue: The venue of this ScoreboardGame.
        :type venue: ScoreboardGameVenue
        """

        self._venue = venue

    @property
    def weather(self):
        """Gets the weather of this ScoreboardGame.


        :return: The weather of this ScoreboardGame.
        :rtype: ScoreboardGameWeather
        """
        return self._weather

    @weather.setter
    def weather(self, weather):
        """Sets the weather of this ScoreboardGame.


        :param weather: The weather of this ScoreboardGame.
        :type weather: ScoreboardGameWeather
        """

        self._weather = weather
