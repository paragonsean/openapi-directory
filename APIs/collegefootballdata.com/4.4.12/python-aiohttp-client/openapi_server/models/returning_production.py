# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReturningProduction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conference: str=None, passing_usage: float=None, percent_ppa: float=None, percent_passing_ppa: float=None, percent_receiving_ppa: float=None, percent_rushing_ppa: float=None, receiving_usage: float=None, rushing_usage: float=None, season: int=None, team: str=None, total_ppa: float=None, total_passing_ppa: float=None, total_receiving_ppa: float=None, total_rushing_ppa: float=None, usage: float=None):
        """ReturningProduction - a model defined in OpenAPI

        :param conference: The conference of this ReturningProduction.
        :param passing_usage: The passing_usage of this ReturningProduction.
        :param percent_ppa: The percent_ppa of this ReturningProduction.
        :param percent_passing_ppa: The percent_passing_ppa of this ReturningProduction.
        :param percent_receiving_ppa: The percent_receiving_ppa of this ReturningProduction.
        :param percent_rushing_ppa: The percent_rushing_ppa of this ReturningProduction.
        :param receiving_usage: The receiving_usage of this ReturningProduction.
        :param rushing_usage: The rushing_usage of this ReturningProduction.
        :param season: The season of this ReturningProduction.
        :param team: The team of this ReturningProduction.
        :param total_ppa: The total_ppa of this ReturningProduction.
        :param total_passing_ppa: The total_passing_ppa of this ReturningProduction.
        :param total_receiving_ppa: The total_receiving_ppa of this ReturningProduction.
        :param total_rushing_ppa: The total_rushing_ppa of this ReturningProduction.
        :param usage: The usage of this ReturningProduction.
        """
        self.openapi_types = {
            'conference': str,
            'passing_usage': float,
            'percent_ppa': float,
            'percent_passing_ppa': float,
            'percent_receiving_ppa': float,
            'percent_rushing_ppa': float,
            'receiving_usage': float,
            'rushing_usage': float,
            'season': int,
            'team': str,
            'total_ppa': float,
            'total_passing_ppa': float,
            'total_receiving_ppa': float,
            'total_rushing_ppa': float,
            'usage': float
        }

        self.attribute_map = {
            'conference': 'conference',
            'passing_usage': 'passingUsage',
            'percent_ppa': 'percentPPA',
            'percent_passing_ppa': 'percentPassingPPA',
            'percent_receiving_ppa': 'percentReceivingPPA',
            'percent_rushing_ppa': 'percentRushingPPA',
            'receiving_usage': 'receivingUsage',
            'rushing_usage': 'rushingUsage',
            'season': 'season',
            'team': 'team',
            'total_ppa': 'totalPPA',
            'total_passing_ppa': 'totalPassingPPA',
            'total_receiving_ppa': 'totalReceivingPPA',
            'total_rushing_ppa': 'totalRushingPPA',
            'usage': 'usage'
        }

        self._conference = conference
        self._passing_usage = passing_usage
        self._percent_ppa = percent_ppa
        self._percent_passing_ppa = percent_passing_ppa
        self._percent_receiving_ppa = percent_receiving_ppa
        self._percent_rushing_ppa = percent_rushing_ppa
        self._receiving_usage = receiving_usage
        self._rushing_usage = rushing_usage
        self._season = season
        self._team = team
        self._total_ppa = total_ppa
        self._total_passing_ppa = total_passing_ppa
        self._total_receiving_ppa = total_receiving_ppa
        self._total_rushing_ppa = total_rushing_ppa
        self._usage = usage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReturningProduction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReturningProduction of this ReturningProduction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conference(self):
        """Gets the conference of this ReturningProduction.


        :return: The conference of this ReturningProduction.
        :rtype: str
        """
        return self._conference

    @conference.setter
    def conference(self, conference):
        """Sets the conference of this ReturningProduction.


        :param conference: The conference of this ReturningProduction.
        :type conference: str
        """

        self._conference = conference

    @property
    def passing_usage(self):
        """Gets the passing_usage of this ReturningProduction.


        :return: The passing_usage of this ReturningProduction.
        :rtype: float
        """
        return self._passing_usage

    @passing_usage.setter
    def passing_usage(self, passing_usage):
        """Sets the passing_usage of this ReturningProduction.


        :param passing_usage: The passing_usage of this ReturningProduction.
        :type passing_usage: float
        """

        self._passing_usage = passing_usage

    @property
    def percent_ppa(self):
        """Gets the percent_ppa of this ReturningProduction.


        :return: The percent_ppa of this ReturningProduction.
        :rtype: float
        """
        return self._percent_ppa

    @percent_ppa.setter
    def percent_ppa(self, percent_ppa):
        """Sets the percent_ppa of this ReturningProduction.


        :param percent_ppa: The percent_ppa of this ReturningProduction.
        :type percent_ppa: float
        """

        self._percent_ppa = percent_ppa

    @property
    def percent_passing_ppa(self):
        """Gets the percent_passing_ppa of this ReturningProduction.


        :return: The percent_passing_ppa of this ReturningProduction.
        :rtype: float
        """
        return self._percent_passing_ppa

    @percent_passing_ppa.setter
    def percent_passing_ppa(self, percent_passing_ppa):
        """Sets the percent_passing_ppa of this ReturningProduction.


        :param percent_passing_ppa: The percent_passing_ppa of this ReturningProduction.
        :type percent_passing_ppa: float
        """

        self._percent_passing_ppa = percent_passing_ppa

    @property
    def percent_receiving_ppa(self):
        """Gets the percent_receiving_ppa of this ReturningProduction.


        :return: The percent_receiving_ppa of this ReturningProduction.
        :rtype: float
        """
        return self._percent_receiving_ppa

    @percent_receiving_ppa.setter
    def percent_receiving_ppa(self, percent_receiving_ppa):
        """Sets the percent_receiving_ppa of this ReturningProduction.


        :param percent_receiving_ppa: The percent_receiving_ppa of this ReturningProduction.
        :type percent_receiving_ppa: float
        """

        self._percent_receiving_ppa = percent_receiving_ppa

    @property
    def percent_rushing_ppa(self):
        """Gets the percent_rushing_ppa of this ReturningProduction.


        :return: The percent_rushing_ppa of this ReturningProduction.
        :rtype: float
        """
        return self._percent_rushing_ppa

    @percent_rushing_ppa.setter
    def percent_rushing_ppa(self, percent_rushing_ppa):
        """Sets the percent_rushing_ppa of this ReturningProduction.


        :param percent_rushing_ppa: The percent_rushing_ppa of this ReturningProduction.
        :type percent_rushing_ppa: float
        """

        self._percent_rushing_ppa = percent_rushing_ppa

    @property
    def receiving_usage(self):
        """Gets the receiving_usage of this ReturningProduction.


        :return: The receiving_usage of this ReturningProduction.
        :rtype: float
        """
        return self._receiving_usage

    @receiving_usage.setter
    def receiving_usage(self, receiving_usage):
        """Sets the receiving_usage of this ReturningProduction.


        :param receiving_usage: The receiving_usage of this ReturningProduction.
        :type receiving_usage: float
        """

        self._receiving_usage = receiving_usage

    @property
    def rushing_usage(self):
        """Gets the rushing_usage of this ReturningProduction.


        :return: The rushing_usage of this ReturningProduction.
        :rtype: float
        """
        return self._rushing_usage

    @rushing_usage.setter
    def rushing_usage(self, rushing_usage):
        """Sets the rushing_usage of this ReturningProduction.


        :param rushing_usage: The rushing_usage of this ReturningProduction.
        :type rushing_usage: float
        """

        self._rushing_usage = rushing_usage

    @property
    def season(self):
        """Gets the season of this ReturningProduction.


        :return: The season of this ReturningProduction.
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this ReturningProduction.


        :param season: The season of this ReturningProduction.
        :type season: int
        """

        self._season = season

    @property
    def team(self):
        """Gets the team of this ReturningProduction.


        :return: The team of this ReturningProduction.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this ReturningProduction.


        :param team: The team of this ReturningProduction.
        :type team: str
        """

        self._team = team

    @property
    def total_ppa(self):
        """Gets the total_ppa of this ReturningProduction.


        :return: The total_ppa of this ReturningProduction.
        :rtype: float
        """
        return self._total_ppa

    @total_ppa.setter
    def total_ppa(self, total_ppa):
        """Sets the total_ppa of this ReturningProduction.


        :param total_ppa: The total_ppa of this ReturningProduction.
        :type total_ppa: float
        """

        self._total_ppa = total_ppa

    @property
    def total_passing_ppa(self):
        """Gets the total_passing_ppa of this ReturningProduction.


        :return: The total_passing_ppa of this ReturningProduction.
        :rtype: float
        """
        return self._total_passing_ppa

    @total_passing_ppa.setter
    def total_passing_ppa(self, total_passing_ppa):
        """Sets the total_passing_ppa of this ReturningProduction.


        :param total_passing_ppa: The total_passing_ppa of this ReturningProduction.
        :type total_passing_ppa: float
        """

        self._total_passing_ppa = total_passing_ppa

    @property
    def total_receiving_ppa(self):
        """Gets the total_receiving_ppa of this ReturningProduction.


        :return: The total_receiving_ppa of this ReturningProduction.
        :rtype: float
        """
        return self._total_receiving_ppa

    @total_receiving_ppa.setter
    def total_receiving_ppa(self, total_receiving_ppa):
        """Sets the total_receiving_ppa of this ReturningProduction.


        :param total_receiving_ppa: The total_receiving_ppa of this ReturningProduction.
        :type total_receiving_ppa: float
        """

        self._total_receiving_ppa = total_receiving_ppa

    @property
    def total_rushing_ppa(self):
        """Gets the total_rushing_ppa of this ReturningProduction.


        :return: The total_rushing_ppa of this ReturningProduction.
        :rtype: float
        """
        return self._total_rushing_ppa

    @total_rushing_ppa.setter
    def total_rushing_ppa(self, total_rushing_ppa):
        """Sets the total_rushing_ppa of this ReturningProduction.


        :param total_rushing_ppa: The total_rushing_ppa of this ReturningProduction.
        :type total_rushing_ppa: float
        """

        self._total_rushing_ppa = total_rushing_ppa

    @property
    def usage(self):
        """Gets the usage of this ReturningProduction.


        :return: The usage of this ReturningProduction.
        :rtype: float
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this ReturningProduction.


        :param usage: The usage of this ReturningProduction.
        :type usage: float
        """

        self._usage = usage
