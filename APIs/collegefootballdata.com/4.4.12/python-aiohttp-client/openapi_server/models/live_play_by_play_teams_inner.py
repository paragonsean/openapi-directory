# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LivePlayByPlayTeamsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, drives: int=None, epa_per_pass: float=None, epa_per_play: float=None, epa_per_rush: float=None, explosiveness: float=None, home_away: str=None, line_yards: int=None, line_yards_per_rush: float=None, open_field_yards: int=None, open_field_yards_per_rush: float=None, passing_down_success_rate: float=None, passing_epa: float=None, plays: int=None, points: int=None, points_per_opportunity: float=None, rushing_epa: float=None, scoring_opportunities: int=None, second_level_yards: int=None, second_level_yards_per_rush: float=None, standard_down_success_rate: float=None, success_rate: float=None, team: str=None, team_id: int=None, total_epa: float=None):
        """LivePlayByPlayTeamsInner - a model defined in OpenAPI

        :param drives: The drives of this LivePlayByPlayTeamsInner.
        :param epa_per_pass: The epa_per_pass of this LivePlayByPlayTeamsInner.
        :param epa_per_play: The epa_per_play of this LivePlayByPlayTeamsInner.
        :param epa_per_rush: The epa_per_rush of this LivePlayByPlayTeamsInner.
        :param explosiveness: The explosiveness of this LivePlayByPlayTeamsInner.
        :param home_away: The home_away of this LivePlayByPlayTeamsInner.
        :param line_yards: The line_yards of this LivePlayByPlayTeamsInner.
        :param line_yards_per_rush: The line_yards_per_rush of this LivePlayByPlayTeamsInner.
        :param open_field_yards: The open_field_yards of this LivePlayByPlayTeamsInner.
        :param open_field_yards_per_rush: The open_field_yards_per_rush of this LivePlayByPlayTeamsInner.
        :param passing_down_success_rate: The passing_down_success_rate of this LivePlayByPlayTeamsInner.
        :param passing_epa: The passing_epa of this LivePlayByPlayTeamsInner.
        :param plays: The plays of this LivePlayByPlayTeamsInner.
        :param points: The points of this LivePlayByPlayTeamsInner.
        :param points_per_opportunity: The points_per_opportunity of this LivePlayByPlayTeamsInner.
        :param rushing_epa: The rushing_epa of this LivePlayByPlayTeamsInner.
        :param scoring_opportunities: The scoring_opportunities of this LivePlayByPlayTeamsInner.
        :param second_level_yards: The second_level_yards of this LivePlayByPlayTeamsInner.
        :param second_level_yards_per_rush: The second_level_yards_per_rush of this LivePlayByPlayTeamsInner.
        :param standard_down_success_rate: The standard_down_success_rate of this LivePlayByPlayTeamsInner.
        :param success_rate: The success_rate of this LivePlayByPlayTeamsInner.
        :param team: The team of this LivePlayByPlayTeamsInner.
        :param team_id: The team_id of this LivePlayByPlayTeamsInner.
        :param total_epa: The total_epa of this LivePlayByPlayTeamsInner.
        """
        self.openapi_types = {
            'drives': int,
            'epa_per_pass': float,
            'epa_per_play': float,
            'epa_per_rush': float,
            'explosiveness': float,
            'home_away': str,
            'line_yards': int,
            'line_yards_per_rush': float,
            'open_field_yards': int,
            'open_field_yards_per_rush': float,
            'passing_down_success_rate': float,
            'passing_epa': float,
            'plays': int,
            'points': int,
            'points_per_opportunity': float,
            'rushing_epa': float,
            'scoring_opportunities': int,
            'second_level_yards': int,
            'second_level_yards_per_rush': float,
            'standard_down_success_rate': float,
            'success_rate': float,
            'team': str,
            'team_id': int,
            'total_epa': float
        }

        self.attribute_map = {
            'drives': 'drives',
            'epa_per_pass': 'epaPerPass',
            'epa_per_play': 'epaPerPlay',
            'epa_per_rush': 'epaPerRush',
            'explosiveness': 'explosiveness',
            'home_away': 'homeAway',
            'line_yards': 'lineYards',
            'line_yards_per_rush': 'lineYardsPerRush',
            'open_field_yards': 'openFieldYards',
            'open_field_yards_per_rush': 'openFieldYardsPerRush',
            'passing_down_success_rate': 'passingDownSuccessRate',
            'passing_epa': 'passingEpa',
            'plays': 'plays',
            'points': 'points',
            'points_per_opportunity': 'pointsPerOpportunity',
            'rushing_epa': 'rushingEpa',
            'scoring_opportunities': 'scoringOpportunities',
            'second_level_yards': 'secondLevelYards',
            'second_level_yards_per_rush': 'secondLevelYardsPerRush',
            'standard_down_success_rate': 'standardDownSuccessRate',
            'success_rate': 'successRate',
            'team': 'team',
            'team_id': 'teamId',
            'total_epa': 'totalEpa'
        }

        self._drives = drives
        self._epa_per_pass = epa_per_pass
        self._epa_per_play = epa_per_play
        self._epa_per_rush = epa_per_rush
        self._explosiveness = explosiveness
        self._home_away = home_away
        self._line_yards = line_yards
        self._line_yards_per_rush = line_yards_per_rush
        self._open_field_yards = open_field_yards
        self._open_field_yards_per_rush = open_field_yards_per_rush
        self._passing_down_success_rate = passing_down_success_rate
        self._passing_epa = passing_epa
        self._plays = plays
        self._points = points
        self._points_per_opportunity = points_per_opportunity
        self._rushing_epa = rushing_epa
        self._scoring_opportunities = scoring_opportunities
        self._second_level_yards = second_level_yards
        self._second_level_yards_per_rush = second_level_yards_per_rush
        self._standard_down_success_rate = standard_down_success_rate
        self._success_rate = success_rate
        self._team = team
        self._team_id = team_id
        self._total_epa = total_epa

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LivePlayByPlayTeamsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LivePlayByPlay_teams_inner of this LivePlayByPlayTeamsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def drives(self):
        """Gets the drives of this LivePlayByPlayTeamsInner.


        :return: The drives of this LivePlayByPlayTeamsInner.
        :rtype: int
        """
        return self._drives

    @drives.setter
    def drives(self, drives):
        """Sets the drives of this LivePlayByPlayTeamsInner.


        :param drives: The drives of this LivePlayByPlayTeamsInner.
        :type drives: int
        """

        self._drives = drives

    @property
    def epa_per_pass(self):
        """Gets the epa_per_pass of this LivePlayByPlayTeamsInner.


        :return: The epa_per_pass of this LivePlayByPlayTeamsInner.
        :rtype: float
        """
        return self._epa_per_pass

    @epa_per_pass.setter
    def epa_per_pass(self, epa_per_pass):
        """Sets the epa_per_pass of this LivePlayByPlayTeamsInner.


        :param epa_per_pass: The epa_per_pass of this LivePlayByPlayTeamsInner.
        :type epa_per_pass: float
        """

        self._epa_per_pass = epa_per_pass

    @property
    def epa_per_play(self):
        """Gets the epa_per_play of this LivePlayByPlayTeamsInner.


        :return: The epa_per_play of this LivePlayByPlayTeamsInner.
        :rtype: float
        """
        return self._epa_per_play

    @epa_per_play.setter
    def epa_per_play(self, epa_per_play):
        """Sets the epa_per_play of this LivePlayByPlayTeamsInner.


        :param epa_per_play: The epa_per_play of this LivePlayByPlayTeamsInner.
        :type epa_per_play: float
        """

        self._epa_per_play = epa_per_play

    @property
    def epa_per_rush(self):
        """Gets the epa_per_rush of this LivePlayByPlayTeamsInner.


        :return: The epa_per_rush of this LivePlayByPlayTeamsInner.
        :rtype: float
        """
        return self._epa_per_rush

    @epa_per_rush.setter
    def epa_per_rush(self, epa_per_rush):
        """Sets the epa_per_rush of this LivePlayByPlayTeamsInner.


        :param epa_per_rush: The epa_per_rush of this LivePlayByPlayTeamsInner.
        :type epa_per_rush: float
        """

        self._epa_per_rush = epa_per_rush

    @property
    def explosiveness(self):
        """Gets the explosiveness of this LivePlayByPlayTeamsInner.


        :return: The explosiveness of this LivePlayByPlayTeamsInner.
        :rtype: float
        """
        return self._explosiveness

    @explosiveness.setter
    def explosiveness(self, explosiveness):
        """Sets the explosiveness of this LivePlayByPlayTeamsInner.


        :param explosiveness: The explosiveness of this LivePlayByPlayTeamsInner.
        :type explosiveness: float
        """

        self._explosiveness = explosiveness

    @property
    def home_away(self):
        """Gets the home_away of this LivePlayByPlayTeamsInner.


        :return: The home_away of this LivePlayByPlayTeamsInner.
        :rtype: str
        """
        return self._home_away

    @home_away.setter
    def home_away(self, home_away):
        """Sets the home_away of this LivePlayByPlayTeamsInner.


        :param home_away: The home_away of this LivePlayByPlayTeamsInner.
        :type home_away: str
        """

        self._home_away = home_away

    @property
    def line_yards(self):
        """Gets the line_yards of this LivePlayByPlayTeamsInner.


        :return: The line_yards of this LivePlayByPlayTeamsInner.
        :rtype: int
        """
        return self._line_yards

    @line_yards.setter
    def line_yards(self, line_yards):
        """Sets the line_yards of this LivePlayByPlayTeamsInner.


        :param line_yards: The line_yards of this LivePlayByPlayTeamsInner.
        :type line_yards: int
        """

        self._line_yards = line_yards

    @property
    def line_yards_per_rush(self):
        """Gets the line_yards_per_rush of this LivePlayByPlayTeamsInner.


        :return: The line_yards_per_rush of this LivePlayByPlayTeamsInner.
        :rtype: float
        """
        return self._line_yards_per_rush

    @line_yards_per_rush.setter
    def line_yards_per_rush(self, line_yards_per_rush):
        """Sets the line_yards_per_rush of this LivePlayByPlayTeamsInner.


        :param line_yards_per_rush: The line_yards_per_rush of this LivePlayByPlayTeamsInner.
        :type line_yards_per_rush: float
        """

        self._line_yards_per_rush = line_yards_per_rush

    @property
    def open_field_yards(self):
        """Gets the open_field_yards of this LivePlayByPlayTeamsInner.


        :return: The open_field_yards of this LivePlayByPlayTeamsInner.
        :rtype: int
        """
        return self._open_field_yards

    @open_field_yards.setter
    def open_field_yards(self, open_field_yards):
        """Sets the open_field_yards of this LivePlayByPlayTeamsInner.


        :param open_field_yards: The open_field_yards of this LivePlayByPlayTeamsInner.
        :type open_field_yards: int
        """

        self._open_field_yards = open_field_yards

    @property
    def open_field_yards_per_rush(self):
        """Gets the open_field_yards_per_rush of this LivePlayByPlayTeamsInner.


        :return: The open_field_yards_per_rush of this LivePlayByPlayTeamsInner.
        :rtype: float
        """
        return self._open_field_yards_per_rush

    @open_field_yards_per_rush.setter
    def open_field_yards_per_rush(self, open_field_yards_per_rush):
        """Sets the open_field_yards_per_rush of this LivePlayByPlayTeamsInner.


        :param open_field_yards_per_rush: The open_field_yards_per_rush of this LivePlayByPlayTeamsInner.
        :type open_field_yards_per_rush: float
        """

        self._open_field_yards_per_rush = open_field_yards_per_rush

    @property
    def passing_down_success_rate(self):
        """Gets the passing_down_success_rate of this LivePlayByPlayTeamsInner.


        :return: The passing_down_success_rate of this LivePlayByPlayTeamsInner.
        :rtype: float
        """
        return self._passing_down_success_rate

    @passing_down_success_rate.setter
    def passing_down_success_rate(self, passing_down_success_rate):
        """Sets the passing_down_success_rate of this LivePlayByPlayTeamsInner.


        :param passing_down_success_rate: The passing_down_success_rate of this LivePlayByPlayTeamsInner.
        :type passing_down_success_rate: float
        """

        self._passing_down_success_rate = passing_down_success_rate

    @property
    def passing_epa(self):
        """Gets the passing_epa of this LivePlayByPlayTeamsInner.


        :return: The passing_epa of this LivePlayByPlayTeamsInner.
        :rtype: float
        """
        return self._passing_epa

    @passing_epa.setter
    def passing_epa(self, passing_epa):
        """Sets the passing_epa of this LivePlayByPlayTeamsInner.


        :param passing_epa: The passing_epa of this LivePlayByPlayTeamsInner.
        :type passing_epa: float
        """

        self._passing_epa = passing_epa

    @property
    def plays(self):
        """Gets the plays of this LivePlayByPlayTeamsInner.


        :return: The plays of this LivePlayByPlayTeamsInner.
        :rtype: int
        """
        return self._plays

    @plays.setter
    def plays(self, plays):
        """Sets the plays of this LivePlayByPlayTeamsInner.


        :param plays: The plays of this LivePlayByPlayTeamsInner.
        :type plays: int
        """

        self._plays = plays

    @property
    def points(self):
        """Gets the points of this LivePlayByPlayTeamsInner.


        :return: The points of this LivePlayByPlayTeamsInner.
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this LivePlayByPlayTeamsInner.


        :param points: The points of this LivePlayByPlayTeamsInner.
        :type points: int
        """

        self._points = points

    @property
    def points_per_opportunity(self):
        """Gets the points_per_opportunity of this LivePlayByPlayTeamsInner.


        :return: The points_per_opportunity of this LivePlayByPlayTeamsInner.
        :rtype: float
        """
        return self._points_per_opportunity

    @points_per_opportunity.setter
    def points_per_opportunity(self, points_per_opportunity):
        """Sets the points_per_opportunity of this LivePlayByPlayTeamsInner.


        :param points_per_opportunity: The points_per_opportunity of this LivePlayByPlayTeamsInner.
        :type points_per_opportunity: float
        """

        self._points_per_opportunity = points_per_opportunity

    @property
    def rushing_epa(self):
        """Gets the rushing_epa of this LivePlayByPlayTeamsInner.


        :return: The rushing_epa of this LivePlayByPlayTeamsInner.
        :rtype: float
        """
        return self._rushing_epa

    @rushing_epa.setter
    def rushing_epa(self, rushing_epa):
        """Sets the rushing_epa of this LivePlayByPlayTeamsInner.


        :param rushing_epa: The rushing_epa of this LivePlayByPlayTeamsInner.
        :type rushing_epa: float
        """

        self._rushing_epa = rushing_epa

    @property
    def scoring_opportunities(self):
        """Gets the scoring_opportunities of this LivePlayByPlayTeamsInner.


        :return: The scoring_opportunities of this LivePlayByPlayTeamsInner.
        :rtype: int
        """
        return self._scoring_opportunities

    @scoring_opportunities.setter
    def scoring_opportunities(self, scoring_opportunities):
        """Sets the scoring_opportunities of this LivePlayByPlayTeamsInner.


        :param scoring_opportunities: The scoring_opportunities of this LivePlayByPlayTeamsInner.
        :type scoring_opportunities: int
        """

        self._scoring_opportunities = scoring_opportunities

    @property
    def second_level_yards(self):
        """Gets the second_level_yards of this LivePlayByPlayTeamsInner.


        :return: The second_level_yards of this LivePlayByPlayTeamsInner.
        :rtype: int
        """
        return self._second_level_yards

    @second_level_yards.setter
    def second_level_yards(self, second_level_yards):
        """Sets the second_level_yards of this LivePlayByPlayTeamsInner.


        :param second_level_yards: The second_level_yards of this LivePlayByPlayTeamsInner.
        :type second_level_yards: int
        """

        self._second_level_yards = second_level_yards

    @property
    def second_level_yards_per_rush(self):
        """Gets the second_level_yards_per_rush of this LivePlayByPlayTeamsInner.


        :return: The second_level_yards_per_rush of this LivePlayByPlayTeamsInner.
        :rtype: float
        """
        return self._second_level_yards_per_rush

    @second_level_yards_per_rush.setter
    def second_level_yards_per_rush(self, second_level_yards_per_rush):
        """Sets the second_level_yards_per_rush of this LivePlayByPlayTeamsInner.


        :param second_level_yards_per_rush: The second_level_yards_per_rush of this LivePlayByPlayTeamsInner.
        :type second_level_yards_per_rush: float
        """

        self._second_level_yards_per_rush = second_level_yards_per_rush

    @property
    def standard_down_success_rate(self):
        """Gets the standard_down_success_rate of this LivePlayByPlayTeamsInner.


        :return: The standard_down_success_rate of this LivePlayByPlayTeamsInner.
        :rtype: float
        """
        return self._standard_down_success_rate

    @standard_down_success_rate.setter
    def standard_down_success_rate(self, standard_down_success_rate):
        """Sets the standard_down_success_rate of this LivePlayByPlayTeamsInner.


        :param standard_down_success_rate: The standard_down_success_rate of this LivePlayByPlayTeamsInner.
        :type standard_down_success_rate: float
        """

        self._standard_down_success_rate = standard_down_success_rate

    @property
    def success_rate(self):
        """Gets the success_rate of this LivePlayByPlayTeamsInner.


        :return: The success_rate of this LivePlayByPlayTeamsInner.
        :rtype: float
        """
        return self._success_rate

    @success_rate.setter
    def success_rate(self, success_rate):
        """Sets the success_rate of this LivePlayByPlayTeamsInner.


        :param success_rate: The success_rate of this LivePlayByPlayTeamsInner.
        :type success_rate: float
        """

        self._success_rate = success_rate

    @property
    def team(self):
        """Gets the team of this LivePlayByPlayTeamsInner.


        :return: The team of this LivePlayByPlayTeamsInner.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this LivePlayByPlayTeamsInner.


        :param team: The team of this LivePlayByPlayTeamsInner.
        :type team: str
        """

        self._team = team

    @property
    def team_id(self):
        """Gets the team_id of this LivePlayByPlayTeamsInner.


        :return: The team_id of this LivePlayByPlayTeamsInner.
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this LivePlayByPlayTeamsInner.


        :param team_id: The team_id of this LivePlayByPlayTeamsInner.
        :type team_id: int
        """

        self._team_id = team_id

    @property
    def total_epa(self):
        """Gets the total_epa of this LivePlayByPlayTeamsInner.


        :return: The total_epa of this LivePlayByPlayTeamsInner.
        :rtype: float
        """
        return self._total_epa

    @total_epa.setter
    def total_epa(self, total_epa):
        """Sets the total_epa of this LivePlayByPlayTeamsInner.


        :param total_epa: The total_epa of this LivePlayByPlayTeamsInner.
        :type total_epa: float
        """

        self._total_epa = total_epa
