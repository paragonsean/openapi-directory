# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TeamEloRating(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conference: str=None, elo: float=None, team: str=None, year: int=None):
        """TeamEloRating - a model defined in OpenAPI

        :param conference: The conference of this TeamEloRating.
        :param elo: The elo of this TeamEloRating.
        :param team: The team of this TeamEloRating.
        :param year: The year of this TeamEloRating.
        """
        self.openapi_types = {
            'conference': str,
            'elo': float,
            'team': str,
            'year': int
        }

        self.attribute_map = {
            'conference': 'conference',
            'elo': 'elo',
            'team': 'team',
            'year': 'year'
        }

        self._conference = conference
        self._elo = elo
        self._team = team
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TeamEloRating':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TeamEloRating of this TeamEloRating.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conference(self):
        """Gets the conference of this TeamEloRating.


        :return: The conference of this TeamEloRating.
        :rtype: str
        """
        return self._conference

    @conference.setter
    def conference(self, conference):
        """Sets the conference of this TeamEloRating.


        :param conference: The conference of this TeamEloRating.
        :type conference: str
        """

        self._conference = conference

    @property
    def elo(self):
        """Gets the elo of this TeamEloRating.


        :return: The elo of this TeamEloRating.
        :rtype: float
        """
        return self._elo

    @elo.setter
    def elo(self, elo):
        """Sets the elo of this TeamEloRating.


        :param elo: The elo of this TeamEloRating.
        :type elo: float
        """

        self._elo = elo

    @property
    def team(self):
        """Gets the team of this TeamEloRating.


        :return: The team of this TeamEloRating.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this TeamEloRating.


        :param team: The team of this TeamEloRating.
        :type team: str
        """

        self._team = team

    @property
    def year(self):
        """Gets the year of this TeamEloRating.


        :return: The year of this TeamEloRating.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this TeamEloRating.


        :param year: The year of this TeamEloRating.
        :type year: int
        """

        self._year = year
