# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.venue_location import VenueLocation
from openapi_server import util


class Venue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capacity: int=None, city: str=None, country_code: str=None, dome: bool=None, elevation: float=None, grass: bool=None, id: int=None, location: VenueLocation=None, name: str=None, state: str=None, timezone: str=None, year_constructed: int=None, zip: str=None):
        """Venue - a model defined in OpenAPI

        :param capacity: The capacity of this Venue.
        :param city: The city of this Venue.
        :param country_code: The country_code of this Venue.
        :param dome: The dome of this Venue.
        :param elevation: The elevation of this Venue.
        :param grass: The grass of this Venue.
        :param id: The id of this Venue.
        :param location: The location of this Venue.
        :param name: The name of this Venue.
        :param state: The state of this Venue.
        :param timezone: The timezone of this Venue.
        :param year_constructed: The year_constructed of this Venue.
        :param zip: The zip of this Venue.
        """
        self.openapi_types = {
            'capacity': int,
            'city': str,
            'country_code': str,
            'dome': bool,
            'elevation': float,
            'grass': bool,
            'id': int,
            'location': VenueLocation,
            'name': str,
            'state': str,
            'timezone': str,
            'year_constructed': int,
            'zip': str
        }

        self.attribute_map = {
            'capacity': 'capacity',
            'city': 'city',
            'country_code': 'country_code',
            'dome': 'dome',
            'elevation': 'elevation',
            'grass': 'grass',
            'id': 'id',
            'location': 'location',
            'name': 'name',
            'state': 'state',
            'timezone': 'timezone',
            'year_constructed': 'year_constructed',
            'zip': 'zip'
        }

        self._capacity = capacity
        self._city = city
        self._country_code = country_code
        self._dome = dome
        self._elevation = elevation
        self._grass = grass
        self._id = id
        self._location = location
        self._name = name
        self._state = state
        self._timezone = timezone
        self._year_constructed = year_constructed
        self._zip = zip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Venue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Venue of this Venue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capacity(self):
        """Gets the capacity of this Venue.


        :return: The capacity of this Venue.
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this Venue.


        :param capacity: The capacity of this Venue.
        :type capacity: int
        """

        self._capacity = capacity

    @property
    def city(self):
        """Gets the city of this Venue.


        :return: The city of this Venue.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Venue.


        :param city: The city of this Venue.
        :type city: str
        """

        self._city = city

    @property
    def country_code(self):
        """Gets the country_code of this Venue.


        :return: The country_code of this Venue.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Venue.


        :param country_code: The country_code of this Venue.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def dome(self):
        """Gets the dome of this Venue.


        :return: The dome of this Venue.
        :rtype: bool
        """
        return self._dome

    @dome.setter
    def dome(self, dome):
        """Sets the dome of this Venue.


        :param dome: The dome of this Venue.
        :type dome: bool
        """

        self._dome = dome

    @property
    def elevation(self):
        """Gets the elevation of this Venue.


        :return: The elevation of this Venue.
        :rtype: float
        """
        return self._elevation

    @elevation.setter
    def elevation(self, elevation):
        """Sets the elevation of this Venue.


        :param elevation: The elevation of this Venue.
        :type elevation: float
        """

        self._elevation = elevation

    @property
    def grass(self):
        """Gets the grass of this Venue.


        :return: The grass of this Venue.
        :rtype: bool
        """
        return self._grass

    @grass.setter
    def grass(self, grass):
        """Sets the grass of this Venue.


        :param grass: The grass of this Venue.
        :type grass: bool
        """

        self._grass = grass

    @property
    def id(self):
        """Gets the id of this Venue.


        :return: The id of this Venue.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Venue.


        :param id: The id of this Venue.
        :type id: int
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this Venue.


        :return: The location of this Venue.
        :rtype: VenueLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Venue.


        :param location: The location of this Venue.
        :type location: VenueLocation
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this Venue.


        :return: The name of this Venue.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Venue.


        :param name: The name of this Venue.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this Venue.


        :return: The state of this Venue.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Venue.


        :param state: The state of this Venue.
        :type state: str
        """

        self._state = state

    @property
    def timezone(self):
        """Gets the timezone of this Venue.


        :return: The timezone of this Venue.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Venue.


        :param timezone: The timezone of this Venue.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def year_constructed(self):
        """Gets the year_constructed of this Venue.


        :return: The year_constructed of this Venue.
        :rtype: int
        """
        return self._year_constructed

    @year_constructed.setter
    def year_constructed(self, year_constructed):
        """Sets the year_constructed of this Venue.


        :param year_constructed: The year_constructed of this Venue.
        :type year_constructed: int
        """

        self._year_constructed = year_constructed

    @property
    def zip(self):
        """Gets the zip of this Venue.


        :return: The zip of this Venue.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this Venue.


        :param zip: The zip of this Venue.
        :type zip: str
        """

        self._zip = zip
