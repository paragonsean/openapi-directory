# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.drive_end_time import DriveEndTime
from openapi_server import util


class PlayStat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, athlete_id: int=None, athlete_name: str=None, clock: DriveEndTime=None, conference: str=None, distance: int=None, down: int=None, drive_id: int=None, game_id: int=None, opponent: str=None, opponent_score: int=None, period: int=None, play_id: int=None, season: int=None, stat: int=None, stat_type: str=None, team: str=None, team_score: int=None, week: int=None, yards_to_goal: int=None):
        """PlayStat - a model defined in OpenAPI

        :param athlete_id: The athlete_id of this PlayStat.
        :param athlete_name: The athlete_name of this PlayStat.
        :param clock: The clock of this PlayStat.
        :param conference: The conference of this PlayStat.
        :param distance: The distance of this PlayStat.
        :param down: The down of this PlayStat.
        :param drive_id: The drive_id of this PlayStat.
        :param game_id: The game_id of this PlayStat.
        :param opponent: The opponent of this PlayStat.
        :param opponent_score: The opponent_score of this PlayStat.
        :param period: The period of this PlayStat.
        :param play_id: The play_id of this PlayStat.
        :param season: The season of this PlayStat.
        :param stat: The stat of this PlayStat.
        :param stat_type: The stat_type of this PlayStat.
        :param team: The team of this PlayStat.
        :param team_score: The team_score of this PlayStat.
        :param week: The week of this PlayStat.
        :param yards_to_goal: The yards_to_goal of this PlayStat.
        """
        self.openapi_types = {
            'athlete_id': int,
            'athlete_name': str,
            'clock': DriveEndTime,
            'conference': str,
            'distance': int,
            'down': int,
            'drive_id': int,
            'game_id': int,
            'opponent': str,
            'opponent_score': int,
            'period': int,
            'play_id': int,
            'season': int,
            'stat': int,
            'stat_type': str,
            'team': str,
            'team_score': int,
            'week': int,
            'yards_to_goal': int
        }

        self.attribute_map = {
            'athlete_id': 'athleteId',
            'athlete_name': 'athleteName',
            'clock': 'clock',
            'conference': 'conference',
            'distance': 'distance',
            'down': 'down',
            'drive_id': 'driveId',
            'game_id': 'gameId',
            'opponent': 'opponent',
            'opponent_score': 'opponentScore',
            'period': 'period',
            'play_id': 'playId',
            'season': 'season',
            'stat': 'stat',
            'stat_type': 'statType',
            'team': 'team',
            'team_score': 'teamScore',
            'week': 'week',
            'yards_to_goal': 'yardsToGoal'
        }

        self._athlete_id = athlete_id
        self._athlete_name = athlete_name
        self._clock = clock
        self._conference = conference
        self._distance = distance
        self._down = down
        self._drive_id = drive_id
        self._game_id = game_id
        self._opponent = opponent
        self._opponent_score = opponent_score
        self._period = period
        self._play_id = play_id
        self._season = season
        self._stat = stat
        self._stat_type = stat_type
        self._team = team
        self._team_score = team_score
        self._week = week
        self._yards_to_goal = yards_to_goal

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlayStat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlayStat of this PlayStat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def athlete_id(self):
        """Gets the athlete_id of this PlayStat.


        :return: The athlete_id of this PlayStat.
        :rtype: int
        """
        return self._athlete_id

    @athlete_id.setter
    def athlete_id(self, athlete_id):
        """Sets the athlete_id of this PlayStat.


        :param athlete_id: The athlete_id of this PlayStat.
        :type athlete_id: int
        """

        self._athlete_id = athlete_id

    @property
    def athlete_name(self):
        """Gets the athlete_name of this PlayStat.


        :return: The athlete_name of this PlayStat.
        :rtype: str
        """
        return self._athlete_name

    @athlete_name.setter
    def athlete_name(self, athlete_name):
        """Sets the athlete_name of this PlayStat.


        :param athlete_name: The athlete_name of this PlayStat.
        :type athlete_name: str
        """

        self._athlete_name = athlete_name

    @property
    def clock(self):
        """Gets the clock of this PlayStat.


        :return: The clock of this PlayStat.
        :rtype: DriveEndTime
        """
        return self._clock

    @clock.setter
    def clock(self, clock):
        """Sets the clock of this PlayStat.


        :param clock: The clock of this PlayStat.
        :type clock: DriveEndTime
        """

        self._clock = clock

    @property
    def conference(self):
        """Gets the conference of this PlayStat.


        :return: The conference of this PlayStat.
        :rtype: str
        """
        return self._conference

    @conference.setter
    def conference(self, conference):
        """Sets the conference of this PlayStat.


        :param conference: The conference of this PlayStat.
        :type conference: str
        """

        self._conference = conference

    @property
    def distance(self):
        """Gets the distance of this PlayStat.


        :return: The distance of this PlayStat.
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this PlayStat.


        :param distance: The distance of this PlayStat.
        :type distance: int
        """

        self._distance = distance

    @property
    def down(self):
        """Gets the down of this PlayStat.


        :return: The down of this PlayStat.
        :rtype: int
        """
        return self._down

    @down.setter
    def down(self, down):
        """Sets the down of this PlayStat.


        :param down: The down of this PlayStat.
        :type down: int
        """

        self._down = down

    @property
    def drive_id(self):
        """Gets the drive_id of this PlayStat.


        :return: The drive_id of this PlayStat.
        :rtype: int
        """
        return self._drive_id

    @drive_id.setter
    def drive_id(self, drive_id):
        """Sets the drive_id of this PlayStat.


        :param drive_id: The drive_id of this PlayStat.
        :type drive_id: int
        """

        self._drive_id = drive_id

    @property
    def game_id(self):
        """Gets the game_id of this PlayStat.


        :return: The game_id of this PlayStat.
        :rtype: int
        """
        return self._game_id

    @game_id.setter
    def game_id(self, game_id):
        """Sets the game_id of this PlayStat.


        :param game_id: The game_id of this PlayStat.
        :type game_id: int
        """

        self._game_id = game_id

    @property
    def opponent(self):
        """Gets the opponent of this PlayStat.


        :return: The opponent of this PlayStat.
        :rtype: str
        """
        return self._opponent

    @opponent.setter
    def opponent(self, opponent):
        """Sets the opponent of this PlayStat.


        :param opponent: The opponent of this PlayStat.
        :type opponent: str
        """

        self._opponent = opponent

    @property
    def opponent_score(self):
        """Gets the opponent_score of this PlayStat.


        :return: The opponent_score of this PlayStat.
        :rtype: int
        """
        return self._opponent_score

    @opponent_score.setter
    def opponent_score(self, opponent_score):
        """Sets the opponent_score of this PlayStat.


        :param opponent_score: The opponent_score of this PlayStat.
        :type opponent_score: int
        """

        self._opponent_score = opponent_score

    @property
    def period(self):
        """Gets the period of this PlayStat.


        :return: The period of this PlayStat.
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this PlayStat.


        :param period: The period of this PlayStat.
        :type period: int
        """

        self._period = period

    @property
    def play_id(self):
        """Gets the play_id of this PlayStat.


        :return: The play_id of this PlayStat.
        :rtype: int
        """
        return self._play_id

    @play_id.setter
    def play_id(self, play_id):
        """Sets the play_id of this PlayStat.


        :param play_id: The play_id of this PlayStat.
        :type play_id: int
        """

        self._play_id = play_id

    @property
    def season(self):
        """Gets the season of this PlayStat.


        :return: The season of this PlayStat.
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this PlayStat.


        :param season: The season of this PlayStat.
        :type season: int
        """

        self._season = season

    @property
    def stat(self):
        """Gets the stat of this PlayStat.


        :return: The stat of this PlayStat.
        :rtype: int
        """
        return self._stat

    @stat.setter
    def stat(self, stat):
        """Sets the stat of this PlayStat.


        :param stat: The stat of this PlayStat.
        :type stat: int
        """

        self._stat = stat

    @property
    def stat_type(self):
        """Gets the stat_type of this PlayStat.


        :return: The stat_type of this PlayStat.
        :rtype: str
        """
        return self._stat_type

    @stat_type.setter
    def stat_type(self, stat_type):
        """Sets the stat_type of this PlayStat.


        :param stat_type: The stat_type of this PlayStat.
        :type stat_type: str
        """

        self._stat_type = stat_type

    @property
    def team(self):
        """Gets the team of this PlayStat.


        :return: The team of this PlayStat.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this PlayStat.


        :param team: The team of this PlayStat.
        :type team: str
        """

        self._team = team

    @property
    def team_score(self):
        """Gets the team_score of this PlayStat.


        :return: The team_score of this PlayStat.
        :rtype: int
        """
        return self._team_score

    @team_score.setter
    def team_score(self, team_score):
        """Sets the team_score of this PlayStat.


        :param team_score: The team_score of this PlayStat.
        :type team_score: int
        """

        self._team_score = team_score

    @property
    def week(self):
        """Gets the week of this PlayStat.


        :return: The week of this PlayStat.
        :rtype: int
        """
        return self._week

    @week.setter
    def week(self, week):
        """Sets the week of this PlayStat.


        :param week: The week of this PlayStat.
        :type week: int
        """

        self._week = week

    @property
    def yards_to_goal(self):
        """Gets the yards_to_goal of this PlayStat.


        :return: The yards_to_goal of this PlayStat.
        :rtype: int
        """
        return self._yards_to_goal

    @yards_to_goal.setter
    def yards_to_goal(self, yards_to_goal):
        """Sets the yards_to_goal of this PlayStat.


        :param yards_to_goal: The yards_to_goal of this PlayStat.
        :type yards_to_goal: int
        """

        self._yards_to_goal = yards_to_goal
