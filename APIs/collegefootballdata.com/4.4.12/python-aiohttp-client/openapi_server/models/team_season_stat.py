# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TeamSeasonStat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conference: str=None, season: int=None, stat_name: str=None, stat_value: int=None, team: str=None):
        """TeamSeasonStat - a model defined in OpenAPI

        :param conference: The conference of this TeamSeasonStat.
        :param season: The season of this TeamSeasonStat.
        :param stat_name: The stat_name of this TeamSeasonStat.
        :param stat_value: The stat_value of this TeamSeasonStat.
        :param team: The team of this TeamSeasonStat.
        """
        self.openapi_types = {
            'conference': str,
            'season': int,
            'stat_name': str,
            'stat_value': int,
            'team': str
        }

        self.attribute_map = {
            'conference': 'conference',
            'season': 'season',
            'stat_name': 'statName',
            'stat_value': 'statValue',
            'team': 'team'
        }

        self._conference = conference
        self._season = season
        self._stat_name = stat_name
        self._stat_value = stat_value
        self._team = team

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TeamSeasonStat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TeamSeasonStat of this TeamSeasonStat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conference(self):
        """Gets the conference of this TeamSeasonStat.


        :return: The conference of this TeamSeasonStat.
        :rtype: str
        """
        return self._conference

    @conference.setter
    def conference(self, conference):
        """Sets the conference of this TeamSeasonStat.


        :param conference: The conference of this TeamSeasonStat.
        :type conference: str
        """

        self._conference = conference

    @property
    def season(self):
        """Gets the season of this TeamSeasonStat.


        :return: The season of this TeamSeasonStat.
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this TeamSeasonStat.


        :param season: The season of this TeamSeasonStat.
        :type season: int
        """

        self._season = season

    @property
    def stat_name(self):
        """Gets the stat_name of this TeamSeasonStat.


        :return: The stat_name of this TeamSeasonStat.
        :rtype: str
        """
        return self._stat_name

    @stat_name.setter
    def stat_name(self, stat_name):
        """Sets the stat_name of this TeamSeasonStat.


        :param stat_name: The stat_name of this TeamSeasonStat.
        :type stat_name: str
        """

        self._stat_name = stat_name

    @property
    def stat_value(self):
        """Gets the stat_value of this TeamSeasonStat.


        :return: The stat_value of this TeamSeasonStat.
        :rtype: int
        """
        return self._stat_value

    @stat_value.setter
    def stat_value(self, stat_value):
        """Sets the stat_value of this TeamSeasonStat.


        :param stat_value: The stat_value of this TeamSeasonStat.
        :type stat_value: int
        """

        self._stat_value = stat_value

    @property
    def team(self):
        """Gets the team of this TeamSeasonStat.


        :return: The team of this TeamSeasonStat.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this TeamSeasonStat.


        :param team: The team of this TeamSeasonStat.
        :type team: str
        """

        self._team = team
