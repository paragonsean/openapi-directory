# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.advanced_season_stat_defense_havoc import AdvancedSeasonStatDefenseHavoc
from openapi_server import util


class TeamSPRatingDefense(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, explosiveness: float=None, havoc: AdvancedSeasonStatDefenseHavoc=None, pasing: float=None, passing_downs: float=None, ranking: float=None, rating: float=None, rushing: float=None, standard_downs: float=None, success: float=None):
        """TeamSPRatingDefense - a model defined in OpenAPI

        :param explosiveness: The explosiveness of this TeamSPRatingDefense.
        :param havoc: The havoc of this TeamSPRatingDefense.
        :param pasing: The pasing of this TeamSPRatingDefense.
        :param passing_downs: The passing_downs of this TeamSPRatingDefense.
        :param ranking: The ranking of this TeamSPRatingDefense.
        :param rating: The rating of this TeamSPRatingDefense.
        :param rushing: The rushing of this TeamSPRatingDefense.
        :param standard_downs: The standard_downs of this TeamSPRatingDefense.
        :param success: The success of this TeamSPRatingDefense.
        """
        self.openapi_types = {
            'explosiveness': float,
            'havoc': AdvancedSeasonStatDefenseHavoc,
            'pasing': float,
            'passing_downs': float,
            'ranking': float,
            'rating': float,
            'rushing': float,
            'standard_downs': float,
            'success': float
        }

        self.attribute_map = {
            'explosiveness': 'explosiveness',
            'havoc': 'havoc',
            'pasing': 'pasing',
            'passing_downs': 'passingDowns',
            'ranking': 'ranking',
            'rating': 'rating',
            'rushing': 'rushing',
            'standard_downs': 'standardDowns',
            'success': 'success'
        }

        self._explosiveness = explosiveness
        self._havoc = havoc
        self._pasing = pasing
        self._passing_downs = passing_downs
        self._ranking = ranking
        self._rating = rating
        self._rushing = rushing
        self._standard_downs = standard_downs
        self._success = success

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TeamSPRatingDefense':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TeamSPRating_defense of this TeamSPRatingDefense.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def explosiveness(self):
        """Gets the explosiveness of this TeamSPRatingDefense.


        :return: The explosiveness of this TeamSPRatingDefense.
        :rtype: float
        """
        return self._explosiveness

    @explosiveness.setter
    def explosiveness(self, explosiveness):
        """Sets the explosiveness of this TeamSPRatingDefense.


        :param explosiveness: The explosiveness of this TeamSPRatingDefense.
        :type explosiveness: float
        """

        self._explosiveness = explosiveness

    @property
    def havoc(self):
        """Gets the havoc of this TeamSPRatingDefense.


        :return: The havoc of this TeamSPRatingDefense.
        :rtype: AdvancedSeasonStatDefenseHavoc
        """
        return self._havoc

    @havoc.setter
    def havoc(self, havoc):
        """Sets the havoc of this TeamSPRatingDefense.


        :param havoc: The havoc of this TeamSPRatingDefense.
        :type havoc: AdvancedSeasonStatDefenseHavoc
        """

        self._havoc = havoc

    @property
    def pasing(self):
        """Gets the pasing of this TeamSPRatingDefense.


        :return: The pasing of this TeamSPRatingDefense.
        :rtype: float
        """
        return self._pasing

    @pasing.setter
    def pasing(self, pasing):
        """Sets the pasing of this TeamSPRatingDefense.


        :param pasing: The pasing of this TeamSPRatingDefense.
        :type pasing: float
        """

        self._pasing = pasing

    @property
    def passing_downs(self):
        """Gets the passing_downs of this TeamSPRatingDefense.


        :return: The passing_downs of this TeamSPRatingDefense.
        :rtype: float
        """
        return self._passing_downs

    @passing_downs.setter
    def passing_downs(self, passing_downs):
        """Sets the passing_downs of this TeamSPRatingDefense.


        :param passing_downs: The passing_downs of this TeamSPRatingDefense.
        :type passing_downs: float
        """

        self._passing_downs = passing_downs

    @property
    def ranking(self):
        """Gets the ranking of this TeamSPRatingDefense.


        :return: The ranking of this TeamSPRatingDefense.
        :rtype: float
        """
        return self._ranking

    @ranking.setter
    def ranking(self, ranking):
        """Sets the ranking of this TeamSPRatingDefense.


        :param ranking: The ranking of this TeamSPRatingDefense.
        :type ranking: float
        """

        self._ranking = ranking

    @property
    def rating(self):
        """Gets the rating of this TeamSPRatingDefense.


        :return: The rating of this TeamSPRatingDefense.
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this TeamSPRatingDefense.


        :param rating: The rating of this TeamSPRatingDefense.
        :type rating: float
        """

        self._rating = rating

    @property
    def rushing(self):
        """Gets the rushing of this TeamSPRatingDefense.


        :return: The rushing of this TeamSPRatingDefense.
        :rtype: float
        """
        return self._rushing

    @rushing.setter
    def rushing(self, rushing):
        """Sets the rushing of this TeamSPRatingDefense.


        :param rushing: The rushing of this TeamSPRatingDefense.
        :type rushing: float
        """

        self._rushing = rushing

    @property
    def standard_downs(self):
        """Gets the standard_downs of this TeamSPRatingDefense.


        :return: The standard_downs of this TeamSPRatingDefense.
        :rtype: float
        """
        return self._standard_downs

    @standard_downs.setter
    def standard_downs(self, standard_downs):
        """Sets the standard_downs of this TeamSPRatingDefense.


        :param standard_downs: The standard_downs of this TeamSPRatingDefense.
        :type standard_downs: float
        """

        self._standard_downs = standard_downs

    @property
    def success(self):
        """Gets the success of this TeamSPRatingDefense.


        :return: The success of this TeamSPRatingDefense.
        :rtype: float
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this TeamSPRatingDefense.


        :param success: The success of this TeamSPRatingDefense.
        :type success: float
        """

        self._success = success
