# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.live_play_by_play_drives_inner import LivePlayByPlayDrivesInner
from openapi_server.models.live_play_by_play_teams_inner import LivePlayByPlayTeamsInner
from openapi_server import util


class LivePlayByPlay(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clock: str=None, distance: int=None, down: int=None, drives: List[LivePlayByPlayDrivesInner]=None, id: int=None, period: int=None, possession: str=None, status: str=None, teams: List[LivePlayByPlayTeamsInner]=None, yards_to_goal: int=None):
        """LivePlayByPlay - a model defined in OpenAPI

        :param clock: The clock of this LivePlayByPlay.
        :param distance: The distance of this LivePlayByPlay.
        :param down: The down of this LivePlayByPlay.
        :param drives: The drives of this LivePlayByPlay.
        :param id: The id of this LivePlayByPlay.
        :param period: The period of this LivePlayByPlay.
        :param possession: The possession of this LivePlayByPlay.
        :param status: The status of this LivePlayByPlay.
        :param teams: The teams of this LivePlayByPlay.
        :param yards_to_goal: The yards_to_goal of this LivePlayByPlay.
        """
        self.openapi_types = {
            'clock': str,
            'distance': int,
            'down': int,
            'drives': List[LivePlayByPlayDrivesInner],
            'id': int,
            'period': int,
            'possession': str,
            'status': str,
            'teams': List[LivePlayByPlayTeamsInner],
            'yards_to_goal': int
        }

        self.attribute_map = {
            'clock': 'clock',
            'distance': 'distance',
            'down': 'down',
            'drives': 'drives',
            'id': 'id',
            'period': 'period',
            'possession': 'possession',
            'status': 'status',
            'teams': 'teams',
            'yards_to_goal': 'yardsToGoal'
        }

        self._clock = clock
        self._distance = distance
        self._down = down
        self._drives = drives
        self._id = id
        self._period = period
        self._possession = possession
        self._status = status
        self._teams = teams
        self._yards_to_goal = yards_to_goal

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LivePlayByPlay':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LivePlayByPlay of this LivePlayByPlay.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clock(self):
        """Gets the clock of this LivePlayByPlay.


        :return: The clock of this LivePlayByPlay.
        :rtype: str
        """
        return self._clock

    @clock.setter
    def clock(self, clock):
        """Sets the clock of this LivePlayByPlay.


        :param clock: The clock of this LivePlayByPlay.
        :type clock: str
        """

        self._clock = clock

    @property
    def distance(self):
        """Gets the distance of this LivePlayByPlay.


        :return: The distance of this LivePlayByPlay.
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this LivePlayByPlay.


        :param distance: The distance of this LivePlayByPlay.
        :type distance: int
        """

        self._distance = distance

    @property
    def down(self):
        """Gets the down of this LivePlayByPlay.


        :return: The down of this LivePlayByPlay.
        :rtype: int
        """
        return self._down

    @down.setter
    def down(self, down):
        """Sets the down of this LivePlayByPlay.


        :param down: The down of this LivePlayByPlay.
        :type down: int
        """

        self._down = down

    @property
    def drives(self):
        """Gets the drives of this LivePlayByPlay.


        :return: The drives of this LivePlayByPlay.
        :rtype: List[LivePlayByPlayDrivesInner]
        """
        return self._drives

    @drives.setter
    def drives(self, drives):
        """Sets the drives of this LivePlayByPlay.


        :param drives: The drives of this LivePlayByPlay.
        :type drives: List[LivePlayByPlayDrivesInner]
        """

        self._drives = drives

    @property
    def id(self):
        """Gets the id of this LivePlayByPlay.


        :return: The id of this LivePlayByPlay.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LivePlayByPlay.


        :param id: The id of this LivePlayByPlay.
        :type id: int
        """

        self._id = id

    @property
    def period(self):
        """Gets the period of this LivePlayByPlay.


        :return: The period of this LivePlayByPlay.
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this LivePlayByPlay.


        :param period: The period of this LivePlayByPlay.
        :type period: int
        """

        self._period = period

    @property
    def possession(self):
        """Gets the possession of this LivePlayByPlay.


        :return: The possession of this LivePlayByPlay.
        :rtype: str
        """
        return self._possession

    @possession.setter
    def possession(self, possession):
        """Sets the possession of this LivePlayByPlay.


        :param possession: The possession of this LivePlayByPlay.
        :type possession: str
        """

        self._possession = possession

    @property
    def status(self):
        """Gets the status of this LivePlayByPlay.


        :return: The status of this LivePlayByPlay.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LivePlayByPlay.


        :param status: The status of this LivePlayByPlay.
        :type status: str
        """

        self._status = status

    @property
    def teams(self):
        """Gets the teams of this LivePlayByPlay.


        :return: The teams of this LivePlayByPlay.
        :rtype: List[LivePlayByPlayTeamsInner]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this LivePlayByPlay.


        :param teams: The teams of this LivePlayByPlay.
        :type teams: List[LivePlayByPlayTeamsInner]
        """

        self._teams = teams

    @property
    def yards_to_goal(self):
        """Gets the yards_to_goal of this LivePlayByPlay.


        :return: The yards_to_goal of this LivePlayByPlay.
        :rtype: int
        """
        return self._yards_to_goal

    @yards_to_goal.setter
    def yards_to_goal(self, yards_to_goal):
        """Sets the yards_to_goal of this LivePlayByPlay.


        :param yards_to_goal: The yards_to_goal of this LivePlayByPlay.
        :type yards_to_goal: int
        """

        self._yards_to_goal = yards_to_goal
