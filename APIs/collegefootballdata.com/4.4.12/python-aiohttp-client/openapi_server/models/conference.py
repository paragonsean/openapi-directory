# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Conference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abbreviation: str=None, classification: str=None, id: int=None, name: str=None, short_name: str=None):
        """Conference - a model defined in OpenAPI

        :param abbreviation: The abbreviation of this Conference.
        :param classification: The classification of this Conference.
        :param id: The id of this Conference.
        :param name: The name of this Conference.
        :param short_name: The short_name of this Conference.
        """
        self.openapi_types = {
            'abbreviation': str,
            'classification': str,
            'id': int,
            'name': str,
            'short_name': str
        }

        self.attribute_map = {
            'abbreviation': 'abbreviation',
            'classification': 'classification',
            'id': 'id',
            'name': 'name',
            'short_name': 'short_name'
        }

        self._abbreviation = abbreviation
        self._classification = classification
        self._id = id
        self._name = name
        self._short_name = short_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Conference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Conference of this Conference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abbreviation(self):
        """Gets the abbreviation of this Conference.


        :return: The abbreviation of this Conference.
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this Conference.


        :param abbreviation: The abbreviation of this Conference.
        :type abbreviation: str
        """

        self._abbreviation = abbreviation

    @property
    def classification(self):
        """Gets the classification of this Conference.


        :return: The classification of this Conference.
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this Conference.


        :param classification: The classification of this Conference.
        :type classification: str
        """

        self._classification = classification

    @property
    def id(self):
        """Gets the id of this Conference.


        :return: The id of this Conference.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Conference.


        :param id: The id of this Conference.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Conference.


        :return: The name of this Conference.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Conference.


        :param name: The name of this Conference.
        :type name: str
        """

        self._name = name

    @property
    def short_name(self):
        """Gets the short_name of this Conference.


        :return: The short_name of this Conference.
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this Conference.


        :param short_name: The short_name of this Conference.
        :type short_name: str
        """

        self._short_name = short_name
