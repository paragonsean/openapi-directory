/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TeamMatchupGamesInner from './TeamMatchupGamesInner';

/**
 * The TeamMatchup model module.
 * @module model/TeamMatchup
 * @version 4.4.12
 */
class TeamMatchup {
    /**
     * Constructs a new <code>TeamMatchup</code>.
     * @alias module:model/TeamMatchup
     */
    constructor() { 
        
        TeamMatchup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TeamMatchup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TeamMatchup} obj Optional instance to populate.
     * @return {module:model/TeamMatchup} The populated <code>TeamMatchup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TeamMatchup();

            if (data.hasOwnProperty('endYear')) {
                obj['endYear'] = ApiClient.convertToType(data['endYear'], 'Number');
            }
            if (data.hasOwnProperty('games')) {
                obj['games'] = ApiClient.convertToType(data['games'], [TeamMatchupGamesInner]);
            }
            if (data.hasOwnProperty('startYear')) {
                obj['startYear'] = ApiClient.convertToType(data['startYear'], 'Number');
            }
            if (data.hasOwnProperty('team1')) {
                obj['team1'] = ApiClient.convertToType(data['team1'], 'String');
            }
            if (data.hasOwnProperty('team1Wins')) {
                obj['team1Wins'] = ApiClient.convertToType(data['team1Wins'], 'Number');
            }
            if (data.hasOwnProperty('team2')) {
                obj['team2'] = ApiClient.convertToType(data['team2'], 'String');
            }
            if (data.hasOwnProperty('team2Wins')) {
                obj['team2Wins'] = ApiClient.convertToType(data['team2Wins'], 'Number');
            }
            if (data.hasOwnProperty('ties')) {
                obj['ties'] = ApiClient.convertToType(data['ties'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TeamMatchup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TeamMatchup</code>.
     */
    static validateJSON(data) {
        if (data['games']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['games'])) {
                throw new Error("Expected the field `games` to be an array in the JSON data but got " + data['games']);
            }
            // validate the optional field `games` (array)
            for (const item of data['games']) {
                TeamMatchupGamesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['team1'] && !(typeof data['team1'] === 'string' || data['team1'] instanceof String)) {
            throw new Error("Expected the field `team1` to be a primitive type in the JSON string but got " + data['team1']);
        }
        // ensure the json data is a string
        if (data['team2'] && !(typeof data['team2'] === 'string' || data['team2'] instanceof String)) {
            throw new Error("Expected the field `team2` to be a primitive type in the JSON string but got " + data['team2']);
        }

        return true;
    }


}



/**
 * @member {Number} endYear
 */
TeamMatchup.prototype['endYear'] = undefined;

/**
 * @member {Array.<module:model/TeamMatchupGamesInner>} games
 */
TeamMatchup.prototype['games'] = undefined;

/**
 * @member {Number} startYear
 */
TeamMatchup.prototype['startYear'] = undefined;

/**
 * @member {String} team1
 */
TeamMatchup.prototype['team1'] = undefined;

/**
 * @member {Number} team1Wins
 */
TeamMatchup.prototype['team1Wins'] = undefined;

/**
 * @member {String} team2
 */
TeamMatchup.prototype['team2'] = undefined;

/**
 * @member {Number} team2Wins
 */
TeamMatchup.prototype['team2Wins'] = undefined;

/**
 * @member {Number} ties
 */
TeamMatchup.prototype['ties'] = undefined;






export default TeamMatchup;

