/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DriveEndTime from './DriveEndTime';

/**
 * The Play model module.
 * @module model/Play
 * @version 4.4.12
 */
class Play {
    /**
     * Constructs a new <code>Play</code>.
     * @alias module:model/Play
     */
    constructor() { 
        
        Play.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Play</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Play} obj Optional instance to populate.
     * @return {module:model/Play} The populated <code>Play</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Play();

            if (data.hasOwnProperty('away')) {
                obj['away'] = ApiClient.convertToType(data['away'], 'String');
            }
            if (data.hasOwnProperty('clock')) {
                obj['clock'] = DriveEndTime.constructFromObject(data['clock']);
            }
            if (data.hasOwnProperty('defense')) {
                obj['defense'] = ApiClient.convertToType(data['defense'], 'String');
            }
            if (data.hasOwnProperty('defense_conference')) {
                obj['defense_conference'] = ApiClient.convertToType(data['defense_conference'], 'String');
            }
            if (data.hasOwnProperty('defense_score')) {
                obj['defense_score'] = ApiClient.convertToType(data['defense_score'], 'Number');
            }
            if (data.hasOwnProperty('defense_timeouts')) {
                obj['defense_timeouts'] = ApiClient.convertToType(data['defense_timeouts'], 'Number');
            }
            if (data.hasOwnProperty('distance')) {
                obj['distance'] = ApiClient.convertToType(data['distance'], 'Number');
            }
            if (data.hasOwnProperty('down')) {
                obj['down'] = ApiClient.convertToType(data['down'], 'Number');
            }
            if (data.hasOwnProperty('drive_id')) {
                obj['drive_id'] = ApiClient.convertToType(data['drive_id'], 'Number');
            }
            if (data.hasOwnProperty('drive_number')) {
                obj['drive_number'] = ApiClient.convertToType(data['drive_number'], 'Number');
            }
            if (data.hasOwnProperty('game_id')) {
                obj['game_id'] = ApiClient.convertToType(data['game_id'], 'Number');
            }
            if (data.hasOwnProperty('home')) {
                obj['home'] = ApiClient.convertToType(data['home'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('offense')) {
                obj['offense'] = ApiClient.convertToType(data['offense'], 'String');
            }
            if (data.hasOwnProperty('offense_conference')) {
                obj['offense_conference'] = ApiClient.convertToType(data['offense_conference'], 'String');
            }
            if (data.hasOwnProperty('offense_score')) {
                obj['offense_score'] = ApiClient.convertToType(data['offense_score'], 'Number');
            }
            if (data.hasOwnProperty('offense_timeouts')) {
                obj['offense_timeouts'] = ApiClient.convertToType(data['offense_timeouts'], 'Number');
            }
            if (data.hasOwnProperty('period')) {
                obj['period'] = ApiClient.convertToType(data['period'], 'Number');
            }
            if (data.hasOwnProperty('play_number')) {
                obj['play_number'] = ApiClient.convertToType(data['play_number'], 'Number');
            }
            if (data.hasOwnProperty('play_text')) {
                obj['play_text'] = ApiClient.convertToType(data['play_text'], 'String');
            }
            if (data.hasOwnProperty('play_type')) {
                obj['play_type'] = ApiClient.convertToType(data['play_type'], 'String');
            }
            if (data.hasOwnProperty('ppa')) {
                obj['ppa'] = ApiClient.convertToType(data['ppa'], 'Number');
            }
            if (data.hasOwnProperty('scoring')) {
                obj['scoring'] = ApiClient.convertToType(data['scoring'], 'Boolean');
            }
            if (data.hasOwnProperty('wallclock')) {
                obj['wallclock'] = ApiClient.convertToType(data['wallclock'], 'String');
            }
            if (data.hasOwnProperty('yard_line')) {
                obj['yard_line'] = ApiClient.convertToType(data['yard_line'], 'Number');
            }
            if (data.hasOwnProperty('yards_gained')) {
                obj['yards_gained'] = ApiClient.convertToType(data['yards_gained'], 'Number');
            }
            if (data.hasOwnProperty('yards_to_goal')) {
                obj['yards_to_goal'] = ApiClient.convertToType(data['yards_to_goal'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Play</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Play</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['away'] && !(typeof data['away'] === 'string' || data['away'] instanceof String)) {
            throw new Error("Expected the field `away` to be a primitive type in the JSON string but got " + data['away']);
        }
        // validate the optional field `clock`
        if (data['clock']) { // data not null
          DriveEndTime.validateJSON(data['clock']);
        }
        // ensure the json data is a string
        if (data['defense'] && !(typeof data['defense'] === 'string' || data['defense'] instanceof String)) {
            throw new Error("Expected the field `defense` to be a primitive type in the JSON string but got " + data['defense']);
        }
        // ensure the json data is a string
        if (data['defense_conference'] && !(typeof data['defense_conference'] === 'string' || data['defense_conference'] instanceof String)) {
            throw new Error("Expected the field `defense_conference` to be a primitive type in the JSON string but got " + data['defense_conference']);
        }
        // ensure the json data is a string
        if (data['home'] && !(typeof data['home'] === 'string' || data['home'] instanceof String)) {
            throw new Error("Expected the field `home` to be a primitive type in the JSON string but got " + data['home']);
        }
        // ensure the json data is a string
        if (data['offense'] && !(typeof data['offense'] === 'string' || data['offense'] instanceof String)) {
            throw new Error("Expected the field `offense` to be a primitive type in the JSON string but got " + data['offense']);
        }
        // ensure the json data is a string
        if (data['offense_conference'] && !(typeof data['offense_conference'] === 'string' || data['offense_conference'] instanceof String)) {
            throw new Error("Expected the field `offense_conference` to be a primitive type in the JSON string but got " + data['offense_conference']);
        }
        // ensure the json data is a string
        if (data['play_text'] && !(typeof data['play_text'] === 'string' || data['play_text'] instanceof String)) {
            throw new Error("Expected the field `play_text` to be a primitive type in the JSON string but got " + data['play_text']);
        }
        // ensure the json data is a string
        if (data['play_type'] && !(typeof data['play_type'] === 'string' || data['play_type'] instanceof String)) {
            throw new Error("Expected the field `play_type` to be a primitive type in the JSON string but got " + data['play_type']);
        }
        // ensure the json data is a string
        if (data['wallclock'] && !(typeof data['wallclock'] === 'string' || data['wallclock'] instanceof String)) {
            throw new Error("Expected the field `wallclock` to be a primitive type in the JSON string but got " + data['wallclock']);
        }

        return true;
    }


}



/**
 * @member {String} away
 */
Play.prototype['away'] = undefined;

/**
 * @member {module:model/DriveEndTime} clock
 */
Play.prototype['clock'] = undefined;

/**
 * @member {String} defense
 */
Play.prototype['defense'] = undefined;

/**
 * @member {String} defense_conference
 */
Play.prototype['defense_conference'] = undefined;

/**
 * @member {Number} defense_score
 */
Play.prototype['defense_score'] = undefined;

/**
 * @member {Number} defense_timeouts
 */
Play.prototype['defense_timeouts'] = undefined;

/**
 * @member {Number} distance
 */
Play.prototype['distance'] = undefined;

/**
 * @member {Number} down
 */
Play.prototype['down'] = undefined;

/**
 * @member {Number} drive_id
 */
Play.prototype['drive_id'] = undefined;

/**
 * @member {Number} drive_number
 */
Play.prototype['drive_number'] = undefined;

/**
 * @member {Number} game_id
 */
Play.prototype['game_id'] = undefined;

/**
 * @member {String} home
 */
Play.prototype['home'] = undefined;

/**
 * @member {Number} id
 */
Play.prototype['id'] = undefined;

/**
 * @member {String} offense
 */
Play.prototype['offense'] = undefined;

/**
 * @member {String} offense_conference
 */
Play.prototype['offense_conference'] = undefined;

/**
 * @member {Number} offense_score
 */
Play.prototype['offense_score'] = undefined;

/**
 * @member {Number} offense_timeouts
 */
Play.prototype['offense_timeouts'] = undefined;

/**
 * @member {Number} period
 */
Play.prototype['period'] = undefined;

/**
 * @member {Number} play_number
 */
Play.prototype['play_number'] = undefined;

/**
 * @member {String} play_text
 */
Play.prototype['play_text'] = undefined;

/**
 * @member {String} play_type
 */
Play.prototype['play_type'] = undefined;

/**
 * @member {Number} ppa
 */
Play.prototype['ppa'] = undefined;

/**
 * @member {Boolean} scoring
 */
Play.prototype['scoring'] = undefined;

/**
 * @member {String} wallclock
 */
Play.prototype['wallclock'] = undefined;

/**
 * @member {Number} yard_line
 */
Play.prototype['yard_line'] = undefined;

/**
 * @member {Number} yards_gained
 */
Play.prototype['yards_gained'] = undefined;

/**
 * @member {Number} yards_to_goal
 */
Play.prototype['yards_to_goal'] = undefined;






export default Play;

