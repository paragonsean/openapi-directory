/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GameLinesLinesInner from './GameLinesLinesInner';

/**
 * The GameLines model module.
 * @module model/GameLines
 * @version 4.4.12
 */
class GameLines {
    /**
     * Constructs a new <code>GameLines</code>.
     * @alias module:model/GameLines
     */
    constructor() { 
        
        GameLines.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GameLines</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GameLines} obj Optional instance to populate.
     * @return {module:model/GameLines} The populated <code>GameLines</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GameLines();

            if (data.hasOwnProperty('awayConference')) {
                obj['awayConference'] = ApiClient.convertToType(data['awayConference'], 'String');
            }
            if (data.hasOwnProperty('awayScore')) {
                obj['awayScore'] = ApiClient.convertToType(data['awayScore'], 'Number');
            }
            if (data.hasOwnProperty('awayTeam')) {
                obj['awayTeam'] = ApiClient.convertToType(data['awayTeam'], 'String');
            }
            if (data.hasOwnProperty('homeConference')) {
                obj['homeConference'] = ApiClient.convertToType(data['homeConference'], 'String');
            }
            if (data.hasOwnProperty('homeScore')) {
                obj['homeScore'] = ApiClient.convertToType(data['homeScore'], 'Number');
            }
            if (data.hasOwnProperty('homeTeam')) {
                obj['homeTeam'] = ApiClient.convertToType(data['homeTeam'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lines')) {
                obj['lines'] = ApiClient.convertToType(data['lines'], [GameLinesLinesInner]);
            }
            if (data.hasOwnProperty('season')) {
                obj['season'] = ApiClient.convertToType(data['season'], 'Number');
            }
            if (data.hasOwnProperty('seasonType')) {
                obj['seasonType'] = ApiClient.convertToType(data['seasonType'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'String');
            }
            if (data.hasOwnProperty('week')) {
                obj['week'] = ApiClient.convertToType(data['week'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GameLines</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GameLines</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['awayConference'] && !(typeof data['awayConference'] === 'string' || data['awayConference'] instanceof String)) {
            throw new Error("Expected the field `awayConference` to be a primitive type in the JSON string but got " + data['awayConference']);
        }
        // ensure the json data is a string
        if (data['awayTeam'] && !(typeof data['awayTeam'] === 'string' || data['awayTeam'] instanceof String)) {
            throw new Error("Expected the field `awayTeam` to be a primitive type in the JSON string but got " + data['awayTeam']);
        }
        // ensure the json data is a string
        if (data['homeConference'] && !(typeof data['homeConference'] === 'string' || data['homeConference'] instanceof String)) {
            throw new Error("Expected the field `homeConference` to be a primitive type in the JSON string but got " + data['homeConference']);
        }
        // ensure the json data is a string
        if (data['homeTeam'] && !(typeof data['homeTeam'] === 'string' || data['homeTeam'] instanceof String)) {
            throw new Error("Expected the field `homeTeam` to be a primitive type in the JSON string but got " + data['homeTeam']);
        }
        if (data['lines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lines'])) {
                throw new Error("Expected the field `lines` to be an array in the JSON data but got " + data['lines']);
            }
            // validate the optional field `lines` (array)
            for (const item of data['lines']) {
                GameLinesLinesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['seasonType'] && !(typeof data['seasonType'] === 'string' || data['seasonType'] instanceof String)) {
            throw new Error("Expected the field `seasonType` to be a primitive type in the JSON string but got " + data['seasonType']);
        }
        // ensure the json data is a string
        if (data['startDate'] && !(typeof data['startDate'] === 'string' || data['startDate'] instanceof String)) {
            throw new Error("Expected the field `startDate` to be a primitive type in the JSON string but got " + data['startDate']);
        }

        return true;
    }


}



/**
 * @member {String} awayConference
 */
GameLines.prototype['awayConference'] = undefined;

/**
 * @member {Number} awayScore
 */
GameLines.prototype['awayScore'] = undefined;

/**
 * @member {String} awayTeam
 */
GameLines.prototype['awayTeam'] = undefined;

/**
 * @member {String} homeConference
 */
GameLines.prototype['homeConference'] = undefined;

/**
 * @member {Number} homeScore
 */
GameLines.prototype['homeScore'] = undefined;

/**
 * @member {String} homeTeam
 */
GameLines.prototype['homeTeam'] = undefined;

/**
 * @member {Number} id
 */
GameLines.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/GameLinesLinesInner>} lines
 */
GameLines.prototype['lines'] = undefined;

/**
 * @member {Number} season
 */
GameLines.prototype['season'] = undefined;

/**
 * @member {String} seasonType
 */
GameLines.prototype['seasonType'] = undefined;

/**
 * @member {String} startDate
 */
GameLines.prototype['startDate'] = undefined;

/**
 * @member {Number} week
 */
GameLines.prototype['week'] = undefined;






export default GameLines;

