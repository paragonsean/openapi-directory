/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TeamRecordAwayGames from './TeamRecordAwayGames';

/**
 * The TeamRecord model module.
 * @module model/TeamRecord
 * @version 4.4.12
 */
class TeamRecord {
    /**
     * Constructs a new <code>TeamRecord</code>.
     * @alias module:model/TeamRecord
     */
    constructor() { 
        
        TeamRecord.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TeamRecord</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TeamRecord} obj Optional instance to populate.
     * @return {module:model/TeamRecord} The populated <code>TeamRecord</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TeamRecord();

            if (data.hasOwnProperty('awayGames')) {
                obj['awayGames'] = TeamRecordAwayGames.constructFromObject(data['awayGames']);
            }
            if (data.hasOwnProperty('conference')) {
                obj['conference'] = ApiClient.convertToType(data['conference'], 'String');
            }
            if (data.hasOwnProperty('conferenceGames')) {
                obj['conferenceGames'] = TeamRecordAwayGames.constructFromObject(data['conferenceGames']);
            }
            if (data.hasOwnProperty('division')) {
                obj['division'] = ApiClient.convertToType(data['division'], 'String');
            }
            if (data.hasOwnProperty('expectedWins')) {
                obj['expectedWins'] = ApiClient.convertToType(data['expectedWins'], 'Number');
            }
            if (data.hasOwnProperty('homeGames')) {
                obj['homeGames'] = TeamRecordAwayGames.constructFromObject(data['homeGames']);
            }
            if (data.hasOwnProperty('team')) {
                obj['team'] = ApiClient.convertToType(data['team'], 'String');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = TeamRecordAwayGames.constructFromObject(data['total']);
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TeamRecord</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TeamRecord</code>.
     */
    static validateJSON(data) {
        // validate the optional field `awayGames`
        if (data['awayGames']) { // data not null
          TeamRecordAwayGames.validateJSON(data['awayGames']);
        }
        // ensure the json data is a string
        if (data['conference'] && !(typeof data['conference'] === 'string' || data['conference'] instanceof String)) {
            throw new Error("Expected the field `conference` to be a primitive type in the JSON string but got " + data['conference']);
        }
        // validate the optional field `conferenceGames`
        if (data['conferenceGames']) { // data not null
          TeamRecordAwayGames.validateJSON(data['conferenceGames']);
        }
        // ensure the json data is a string
        if (data['division'] && !(typeof data['division'] === 'string' || data['division'] instanceof String)) {
            throw new Error("Expected the field `division` to be a primitive type in the JSON string but got " + data['division']);
        }
        // validate the optional field `homeGames`
        if (data['homeGames']) { // data not null
          TeamRecordAwayGames.validateJSON(data['homeGames']);
        }
        // ensure the json data is a string
        if (data['team'] && !(typeof data['team'] === 'string' || data['team'] instanceof String)) {
            throw new Error("Expected the field `team` to be a primitive type in the JSON string but got " + data['team']);
        }
        // validate the optional field `total`
        if (data['total']) { // data not null
          TeamRecordAwayGames.validateJSON(data['total']);
        }

        return true;
    }


}



/**
 * @member {module:model/TeamRecordAwayGames} awayGames
 */
TeamRecord.prototype['awayGames'] = undefined;

/**
 * @member {String} conference
 */
TeamRecord.prototype['conference'] = undefined;

/**
 * @member {module:model/TeamRecordAwayGames} conferenceGames
 */
TeamRecord.prototype['conferenceGames'] = undefined;

/**
 * @member {String} division
 */
TeamRecord.prototype['division'] = undefined;

/**
 * @member {Number} expectedWins
 */
TeamRecord.prototype['expectedWins'] = undefined;

/**
 * @member {module:model/TeamRecordAwayGames} homeGames
 */
TeamRecord.prototype['homeGames'] = undefined;

/**
 * @member {String} team
 */
TeamRecord.prototype['team'] = undefined;

/**
 * @member {module:model/TeamRecordAwayGames} total
 */
TeamRecord.prototype['total'] = undefined;

/**
 * @member {Number} year
 */
TeamRecord.prototype['year'] = undefined;






export default TeamRecord;

