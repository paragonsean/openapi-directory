/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DriveEndTime from './DriveEndTime';

/**
 * The PlayStat model module.
 * @module model/PlayStat
 * @version 4.4.12
 */
class PlayStat {
    /**
     * Constructs a new <code>PlayStat</code>.
     * @alias module:model/PlayStat
     */
    constructor() { 
        
        PlayStat.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlayStat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlayStat} obj Optional instance to populate.
     * @return {module:model/PlayStat} The populated <code>PlayStat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlayStat();

            if (data.hasOwnProperty('athleteId')) {
                obj['athleteId'] = ApiClient.convertToType(data['athleteId'], 'Number');
            }
            if (data.hasOwnProperty('athleteName')) {
                obj['athleteName'] = ApiClient.convertToType(data['athleteName'], 'String');
            }
            if (data.hasOwnProperty('clock')) {
                obj['clock'] = DriveEndTime.constructFromObject(data['clock']);
            }
            if (data.hasOwnProperty('conference')) {
                obj['conference'] = ApiClient.convertToType(data['conference'], 'String');
            }
            if (data.hasOwnProperty('distance')) {
                obj['distance'] = ApiClient.convertToType(data['distance'], 'Number');
            }
            if (data.hasOwnProperty('down')) {
                obj['down'] = ApiClient.convertToType(data['down'], 'Number');
            }
            if (data.hasOwnProperty('driveId')) {
                obj['driveId'] = ApiClient.convertToType(data['driveId'], 'Number');
            }
            if (data.hasOwnProperty('gameId')) {
                obj['gameId'] = ApiClient.convertToType(data['gameId'], 'Number');
            }
            if (data.hasOwnProperty('opponent')) {
                obj['opponent'] = ApiClient.convertToType(data['opponent'], 'String');
            }
            if (data.hasOwnProperty('opponentScore')) {
                obj['opponentScore'] = ApiClient.convertToType(data['opponentScore'], 'Number');
            }
            if (data.hasOwnProperty('period')) {
                obj['period'] = ApiClient.convertToType(data['period'], 'Number');
            }
            if (data.hasOwnProperty('playId')) {
                obj['playId'] = ApiClient.convertToType(data['playId'], 'Number');
            }
            if (data.hasOwnProperty('season')) {
                obj['season'] = ApiClient.convertToType(data['season'], 'Number');
            }
            if (data.hasOwnProperty('stat')) {
                obj['stat'] = ApiClient.convertToType(data['stat'], 'Number');
            }
            if (data.hasOwnProperty('statType')) {
                obj['statType'] = ApiClient.convertToType(data['statType'], 'String');
            }
            if (data.hasOwnProperty('team')) {
                obj['team'] = ApiClient.convertToType(data['team'], 'String');
            }
            if (data.hasOwnProperty('teamScore')) {
                obj['teamScore'] = ApiClient.convertToType(data['teamScore'], 'Number');
            }
            if (data.hasOwnProperty('week')) {
                obj['week'] = ApiClient.convertToType(data['week'], 'Number');
            }
            if (data.hasOwnProperty('yardsToGoal')) {
                obj['yardsToGoal'] = ApiClient.convertToType(data['yardsToGoal'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlayStat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlayStat</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['athleteName'] && !(typeof data['athleteName'] === 'string' || data['athleteName'] instanceof String)) {
            throw new Error("Expected the field `athleteName` to be a primitive type in the JSON string but got " + data['athleteName']);
        }
        // validate the optional field `clock`
        if (data['clock']) { // data not null
          DriveEndTime.validateJSON(data['clock']);
        }
        // ensure the json data is a string
        if (data['conference'] && !(typeof data['conference'] === 'string' || data['conference'] instanceof String)) {
            throw new Error("Expected the field `conference` to be a primitive type in the JSON string but got " + data['conference']);
        }
        // ensure the json data is a string
        if (data['opponent'] && !(typeof data['opponent'] === 'string' || data['opponent'] instanceof String)) {
            throw new Error("Expected the field `opponent` to be a primitive type in the JSON string but got " + data['opponent']);
        }
        // ensure the json data is a string
        if (data['statType'] && !(typeof data['statType'] === 'string' || data['statType'] instanceof String)) {
            throw new Error("Expected the field `statType` to be a primitive type in the JSON string but got " + data['statType']);
        }
        // ensure the json data is a string
        if (data['team'] && !(typeof data['team'] === 'string' || data['team'] instanceof String)) {
            throw new Error("Expected the field `team` to be a primitive type in the JSON string but got " + data['team']);
        }

        return true;
    }


}



/**
 * @member {Number} athleteId
 */
PlayStat.prototype['athleteId'] = undefined;

/**
 * @member {String} athleteName
 */
PlayStat.prototype['athleteName'] = undefined;

/**
 * @member {module:model/DriveEndTime} clock
 */
PlayStat.prototype['clock'] = undefined;

/**
 * @member {String} conference
 */
PlayStat.prototype['conference'] = undefined;

/**
 * @member {Number} distance
 */
PlayStat.prototype['distance'] = undefined;

/**
 * @member {Number} down
 */
PlayStat.prototype['down'] = undefined;

/**
 * @member {Number} driveId
 */
PlayStat.prototype['driveId'] = undefined;

/**
 * @member {Number} gameId
 */
PlayStat.prototype['gameId'] = undefined;

/**
 * @member {String} opponent
 */
PlayStat.prototype['opponent'] = undefined;

/**
 * @member {Number} opponentScore
 */
PlayStat.prototype['opponentScore'] = undefined;

/**
 * @member {Number} period
 */
PlayStat.prototype['period'] = undefined;

/**
 * @member {Number} playId
 */
PlayStat.prototype['playId'] = undefined;

/**
 * @member {Number} season
 */
PlayStat.prototype['season'] = undefined;

/**
 * @member {Number} stat
 */
PlayStat.prototype['stat'] = undefined;

/**
 * @member {String} statType
 */
PlayStat.prototype['statType'] = undefined;

/**
 * @member {String} team
 */
PlayStat.prototype['team'] = undefined;

/**
 * @member {Number} teamScore
 */
PlayStat.prototype['teamScore'] = undefined;

/**
 * @member {Number} week
 */
PlayStat.prototype['week'] = undefined;

/**
 * @member {Number} yardsToGoal
 */
PlayStat.prototype['yardsToGoal'] = undefined;






export default PlayStat;

