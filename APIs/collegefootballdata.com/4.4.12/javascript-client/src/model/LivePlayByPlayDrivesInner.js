/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LivePlayByPlayDrivesInnerPlaysInner from './LivePlayByPlayDrivesInnerPlaysInner';

/**
 * The LivePlayByPlayDrivesInner model module.
 * @module model/LivePlayByPlayDrivesInner
 * @version 4.4.12
 */
class LivePlayByPlayDrivesInner {
    /**
     * Constructs a new <code>LivePlayByPlayDrivesInner</code>.
     * @alias module:model/LivePlayByPlayDrivesInner
     */
    constructor() { 
        
        LivePlayByPlayDrivesInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LivePlayByPlayDrivesInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LivePlayByPlayDrivesInner} obj Optional instance to populate.
     * @return {module:model/LivePlayByPlayDrivesInner} The populated <code>LivePlayByPlayDrivesInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LivePlayByPlayDrivesInner();

            if (data.hasOwnProperty('defense')) {
                obj['defense'] = ApiClient.convertToType(data['defense'], 'String');
            }
            if (data.hasOwnProperty('defenseId')) {
                obj['defenseId'] = ApiClient.convertToType(data['defenseId'], 'Number');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'String');
            }
            if (data.hasOwnProperty('endClock')) {
                obj['endClock'] = ApiClient.convertToType(data['endClock'], 'String');
            }
            if (data.hasOwnProperty('endPeriod')) {
                obj['endPeriod'] = ApiClient.convertToType(data['endPeriod'], 'Number');
            }
            if (data.hasOwnProperty('endYardsToGoal')) {
                obj['endYardsToGoal'] = ApiClient.convertToType(data['endYardsToGoal'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('offense')) {
                obj['offense'] = ApiClient.convertToType(data['offense'], 'String');
            }
            if (data.hasOwnProperty('offenseId')) {
                obj['offenseId'] = ApiClient.convertToType(data['offenseId'], 'Number');
            }
            if (data.hasOwnProperty('playCount')) {
                obj['playCount'] = ApiClient.convertToType(data['playCount'], 'Number');
            }
            if (data.hasOwnProperty('plays')) {
                obj['plays'] = ApiClient.convertToType(data['plays'], [LivePlayByPlayDrivesInnerPlaysInner]);
            }
            if (data.hasOwnProperty('scoringOpportunity')) {
                obj['scoringOpportunity'] = ApiClient.convertToType(data['scoringOpportunity'], 'Boolean');
            }
            if (data.hasOwnProperty('startClock')) {
                obj['startClock'] = ApiClient.convertToType(data['startClock'], 'String');
            }
            if (data.hasOwnProperty('startPeriod')) {
                obj['startPeriod'] = ApiClient.convertToType(data['startPeriod'], 'Number');
            }
            if (data.hasOwnProperty('startYardsToGoal')) {
                obj['startYardsToGoal'] = ApiClient.convertToType(data['startYardsToGoal'], 'Number');
            }
            if (data.hasOwnProperty('yards')) {
                obj['yards'] = ApiClient.convertToType(data['yards'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LivePlayByPlayDrivesInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LivePlayByPlayDrivesInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['defense'] && !(typeof data['defense'] === 'string' || data['defense'] instanceof String)) {
            throw new Error("Expected the field `defense` to be a primitive type in the JSON string but got " + data['defense']);
        }
        // ensure the json data is a string
        if (data['duration'] && !(typeof data['duration'] === 'string' || data['duration'] instanceof String)) {
            throw new Error("Expected the field `duration` to be a primitive type in the JSON string but got " + data['duration']);
        }
        // ensure the json data is a string
        if (data['endClock'] && !(typeof data['endClock'] === 'string' || data['endClock'] instanceof String)) {
            throw new Error("Expected the field `endClock` to be a primitive type in the JSON string but got " + data['endClock']);
        }
        // ensure the json data is a string
        if (data['offense'] && !(typeof data['offense'] === 'string' || data['offense'] instanceof String)) {
            throw new Error("Expected the field `offense` to be a primitive type in the JSON string but got " + data['offense']);
        }
        if (data['plays']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['plays'])) {
                throw new Error("Expected the field `plays` to be an array in the JSON data but got " + data['plays']);
            }
            // validate the optional field `plays` (array)
            for (const item of data['plays']) {
                LivePlayByPlayDrivesInnerPlaysInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['startClock'] && !(typeof data['startClock'] === 'string' || data['startClock'] instanceof String)) {
            throw new Error("Expected the field `startClock` to be a primitive type in the JSON string but got " + data['startClock']);
        }

        return true;
    }


}



/**
 * @member {String} defense
 */
LivePlayByPlayDrivesInner.prototype['defense'] = undefined;

/**
 * @member {Number} defenseId
 */
LivePlayByPlayDrivesInner.prototype['defenseId'] = undefined;

/**
 * @member {String} duration
 */
LivePlayByPlayDrivesInner.prototype['duration'] = undefined;

/**
 * @member {String} endClock
 */
LivePlayByPlayDrivesInner.prototype['endClock'] = undefined;

/**
 * @member {Number} endPeriod
 */
LivePlayByPlayDrivesInner.prototype['endPeriod'] = undefined;

/**
 * @member {Number} endYardsToGoal
 */
LivePlayByPlayDrivesInner.prototype['endYardsToGoal'] = undefined;

/**
 * @member {Number} id
 */
LivePlayByPlayDrivesInner.prototype['id'] = undefined;

/**
 * @member {String} offense
 */
LivePlayByPlayDrivesInner.prototype['offense'] = undefined;

/**
 * @member {Number} offenseId
 */
LivePlayByPlayDrivesInner.prototype['offenseId'] = undefined;

/**
 * @member {Number} playCount
 */
LivePlayByPlayDrivesInner.prototype['playCount'] = undefined;

/**
 * @member {Array.<module:model/LivePlayByPlayDrivesInnerPlaysInner>} plays
 */
LivePlayByPlayDrivesInner.prototype['plays'] = undefined;

/**
 * @member {Boolean} scoringOpportunity
 */
LivePlayByPlayDrivesInner.prototype['scoringOpportunity'] = undefined;

/**
 * @member {String} startClock
 */
LivePlayByPlayDrivesInner.prototype['startClock'] = undefined;

/**
 * @member {Number} startPeriod
 */
LivePlayByPlayDrivesInner.prototype['startPeriod'] = undefined;

/**
 * @member {Number} startYardsToGoal
 */
LivePlayByPlayDrivesInner.prototype['startYardsToGoal'] = undefined;

/**
 * @member {Number} yards
 */
LivePlayByPlayDrivesInner.prototype['yards'] = undefined;






export default LivePlayByPlayDrivesInner;

