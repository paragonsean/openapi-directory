/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TeamMatchupGamesInner model module.
 * @module model/TeamMatchupGamesInner
 * @version 4.4.12
 */
class TeamMatchupGamesInner {
    /**
     * Constructs a new <code>TeamMatchupGamesInner</code>.
     * @alias module:model/TeamMatchupGamesInner
     */
    constructor() { 
        
        TeamMatchupGamesInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TeamMatchupGamesInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TeamMatchupGamesInner} obj Optional instance to populate.
     * @return {module:model/TeamMatchupGamesInner} The populated <code>TeamMatchupGamesInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TeamMatchupGamesInner();

            if (data.hasOwnProperty('awayScore')) {
                obj['awayScore'] = ApiClient.convertToType(data['awayScore'], 'Number');
            }
            if (data.hasOwnProperty('awayTeam')) {
                obj['awayTeam'] = ApiClient.convertToType(data['awayTeam'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'String');
            }
            if (data.hasOwnProperty('homeScore')) {
                obj['homeScore'] = ApiClient.convertToType(data['homeScore'], 'Number');
            }
            if (data.hasOwnProperty('homeTeam')) {
                obj['homeTeam'] = ApiClient.convertToType(data['homeTeam'], 'String');
            }
            if (data.hasOwnProperty('neutralSite')) {
                obj['neutralSite'] = ApiClient.convertToType(data['neutralSite'], 'Boolean');
            }
            if (data.hasOwnProperty('season')) {
                obj['season'] = ApiClient.convertToType(data['season'], 'Number');
            }
            if (data.hasOwnProperty('season_type')) {
                obj['season_type'] = ApiClient.convertToType(data['season_type'], 'String');
            }
            if (data.hasOwnProperty('venue')) {
                obj['venue'] = ApiClient.convertToType(data['venue'], 'String');
            }
            if (data.hasOwnProperty('week')) {
                obj['week'] = ApiClient.convertToType(data['week'], 'Number');
            }
            if (data.hasOwnProperty('winner')) {
                obj['winner'] = ApiClient.convertToType(data['winner'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TeamMatchupGamesInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TeamMatchupGamesInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['awayTeam'] && !(typeof data['awayTeam'] === 'string' || data['awayTeam'] instanceof String)) {
            throw new Error("Expected the field `awayTeam` to be a primitive type in the JSON string but got " + data['awayTeam']);
        }
        // ensure the json data is a string
        if (data['date'] && !(typeof data['date'] === 'string' || data['date'] instanceof String)) {
            throw new Error("Expected the field `date` to be a primitive type in the JSON string but got " + data['date']);
        }
        // ensure the json data is a string
        if (data['homeTeam'] && !(typeof data['homeTeam'] === 'string' || data['homeTeam'] instanceof String)) {
            throw new Error("Expected the field `homeTeam` to be a primitive type in the JSON string but got " + data['homeTeam']);
        }
        // ensure the json data is a string
        if (data['season_type'] && !(typeof data['season_type'] === 'string' || data['season_type'] instanceof String)) {
            throw new Error("Expected the field `season_type` to be a primitive type in the JSON string but got " + data['season_type']);
        }
        // ensure the json data is a string
        if (data['venue'] && !(typeof data['venue'] === 'string' || data['venue'] instanceof String)) {
            throw new Error("Expected the field `venue` to be a primitive type in the JSON string but got " + data['venue']);
        }
        // ensure the json data is a string
        if (data['winner'] && !(typeof data['winner'] === 'string' || data['winner'] instanceof String)) {
            throw new Error("Expected the field `winner` to be a primitive type in the JSON string but got " + data['winner']);
        }

        return true;
    }


}



/**
 * @member {Number} awayScore
 */
TeamMatchupGamesInner.prototype['awayScore'] = undefined;

/**
 * @member {String} awayTeam
 */
TeamMatchupGamesInner.prototype['awayTeam'] = undefined;

/**
 * @member {String} date
 */
TeamMatchupGamesInner.prototype['date'] = undefined;

/**
 * @member {Number} homeScore
 */
TeamMatchupGamesInner.prototype['homeScore'] = undefined;

/**
 * @member {String} homeTeam
 */
TeamMatchupGamesInner.prototype['homeTeam'] = undefined;

/**
 * @member {Boolean} neutralSite
 */
TeamMatchupGamesInner.prototype['neutralSite'] = undefined;

/**
 * @member {Number} season
 */
TeamMatchupGamesInner.prototype['season'] = undefined;

/**
 * @member {String} season_type
 */
TeamMatchupGamesInner.prototype['season_type'] = undefined;

/**
 * @member {String} venue
 */
TeamMatchupGamesInner.prototype['venue'] = undefined;

/**
 * @member {Number} week
 */
TeamMatchupGamesInner.prototype['week'] = undefined;

/**
 * @member {String} winner
 */
TeamMatchupGamesInner.prototype['winner'] = undefined;






export default TeamMatchupGamesInner;

