/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TeamLocation from './TeamLocation';

/**
 * The Team model module.
 * @module model/Team
 * @version 4.4.12
 */
class Team {
    /**
     * Constructs a new <code>Team</code>.
     * @alias module:model/Team
     */
    constructor() { 
        
        Team.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Team</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Team} obj Optional instance to populate.
     * @return {module:model/Team} The populated <code>Team</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Team();

            if (data.hasOwnProperty('abbreviation')) {
                obj['abbreviation'] = ApiClient.convertToType(data['abbreviation'], 'String');
            }
            if (data.hasOwnProperty('alt_color')) {
                obj['alt_color'] = ApiClient.convertToType(data['alt_color'], 'String');
            }
            if (data.hasOwnProperty('alt_name_1')) {
                obj['alt_name_1'] = ApiClient.convertToType(data['alt_name_1'], 'String');
            }
            if (data.hasOwnProperty('alt_name_2')) {
                obj['alt_name_2'] = ApiClient.convertToType(data['alt_name_2'], 'String');
            }
            if (data.hasOwnProperty('alt_name_3')) {
                obj['alt_name_3'] = ApiClient.convertToType(data['alt_name_3'], 'String');
            }
            if (data.hasOwnProperty('classification')) {
                obj['classification'] = ApiClient.convertToType(data['classification'], 'String');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('conference')) {
                obj['conference'] = ApiClient.convertToType(data['conference'], 'String');
            }
            if (data.hasOwnProperty('division')) {
                obj['division'] = ApiClient.convertToType(data['division'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = TeamLocation.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('logos')) {
                obj['logos'] = ApiClient.convertToType(data['logos'], ['String']);
            }
            if (data.hasOwnProperty('mascot')) {
                obj['mascot'] = ApiClient.convertToType(data['mascot'], 'String');
            }
            if (data.hasOwnProperty('school')) {
                obj['school'] = ApiClient.convertToType(data['school'], 'String');
            }
            if (data.hasOwnProperty('twitter')) {
                obj['twitter'] = ApiClient.convertToType(data['twitter'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Team</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Team</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['abbreviation'] && !(typeof data['abbreviation'] === 'string' || data['abbreviation'] instanceof String)) {
            throw new Error("Expected the field `abbreviation` to be a primitive type in the JSON string but got " + data['abbreviation']);
        }
        // ensure the json data is a string
        if (data['alt_color'] && !(typeof data['alt_color'] === 'string' || data['alt_color'] instanceof String)) {
            throw new Error("Expected the field `alt_color` to be a primitive type in the JSON string but got " + data['alt_color']);
        }
        // ensure the json data is a string
        if (data['alt_name_1'] && !(typeof data['alt_name_1'] === 'string' || data['alt_name_1'] instanceof String)) {
            throw new Error("Expected the field `alt_name_1` to be a primitive type in the JSON string but got " + data['alt_name_1']);
        }
        // ensure the json data is a string
        if (data['alt_name_2'] && !(typeof data['alt_name_2'] === 'string' || data['alt_name_2'] instanceof String)) {
            throw new Error("Expected the field `alt_name_2` to be a primitive type in the JSON string but got " + data['alt_name_2']);
        }
        // ensure the json data is a string
        if (data['alt_name_3'] && !(typeof data['alt_name_3'] === 'string' || data['alt_name_3'] instanceof String)) {
            throw new Error("Expected the field `alt_name_3` to be a primitive type in the JSON string but got " + data['alt_name_3']);
        }
        // ensure the json data is a string
        if (data['classification'] && !(typeof data['classification'] === 'string' || data['classification'] instanceof String)) {
            throw new Error("Expected the field `classification` to be a primitive type in the JSON string but got " + data['classification']);
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is a string
        if (data['conference'] && !(typeof data['conference'] === 'string' || data['conference'] instanceof String)) {
            throw new Error("Expected the field `conference` to be a primitive type in the JSON string but got " + data['conference']);
        }
        // ensure the json data is a string
        if (data['division'] && !(typeof data['division'] === 'string' || data['division'] instanceof String)) {
            throw new Error("Expected the field `division` to be a primitive type in the JSON string but got " + data['division']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          TeamLocation.validateJSON(data['location']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['logos'])) {
            throw new Error("Expected the field `logos` to be an array in the JSON data but got " + data['logos']);
        }
        // ensure the json data is a string
        if (data['mascot'] && !(typeof data['mascot'] === 'string' || data['mascot'] instanceof String)) {
            throw new Error("Expected the field `mascot` to be a primitive type in the JSON string but got " + data['mascot']);
        }
        // ensure the json data is a string
        if (data['school'] && !(typeof data['school'] === 'string' || data['school'] instanceof String)) {
            throw new Error("Expected the field `school` to be a primitive type in the JSON string but got " + data['school']);
        }
        // ensure the json data is a string
        if (data['twitter'] && !(typeof data['twitter'] === 'string' || data['twitter'] instanceof String)) {
            throw new Error("Expected the field `twitter` to be a primitive type in the JSON string but got " + data['twitter']);
        }

        return true;
    }


}



/**
 * @member {String} abbreviation
 */
Team.prototype['abbreviation'] = undefined;

/**
 * @member {String} alt_color
 */
Team.prototype['alt_color'] = undefined;

/**
 * @member {String} alt_name_1
 */
Team.prototype['alt_name_1'] = undefined;

/**
 * @member {String} alt_name_2
 */
Team.prototype['alt_name_2'] = undefined;

/**
 * @member {String} alt_name_3
 */
Team.prototype['alt_name_3'] = undefined;

/**
 * @member {String} classification
 */
Team.prototype['classification'] = undefined;

/**
 * @member {String} color
 */
Team.prototype['color'] = undefined;

/**
 * @member {String} conference
 */
Team.prototype['conference'] = undefined;

/**
 * @member {String} division
 */
Team.prototype['division'] = undefined;

/**
 * @member {Number} id
 */
Team.prototype['id'] = undefined;

/**
 * @member {module:model/TeamLocation} location
 */
Team.prototype['location'] = undefined;

/**
 * @member {Array.<String>} logos
 */
Team.prototype['logos'] = undefined;

/**
 * @member {String} mascot
 */
Team.prototype['mascot'] = undefined;

/**
 * @member {String} school
 */
Team.prototype['school'] = undefined;

/**
 * @member {String} twitter
 */
Team.prototype['twitter'] = undefined;






export default Team;

