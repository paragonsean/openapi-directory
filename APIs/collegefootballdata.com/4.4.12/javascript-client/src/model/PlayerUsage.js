/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlayerUsageUsage from './PlayerUsageUsage';

/**
 * The PlayerUsage model module.
 * @module model/PlayerUsage
 * @version 4.4.12
 */
class PlayerUsage {
    /**
     * Constructs a new <code>PlayerUsage</code>.
     * @alias module:model/PlayerUsage
     */
    constructor() { 
        
        PlayerUsage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlayerUsage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlayerUsage} obj Optional instance to populate.
     * @return {module:model/PlayerUsage} The populated <code>PlayerUsage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlayerUsage();

            if (data.hasOwnProperty('conference')) {
                obj['conference'] = ApiClient.convertToType(data['conference'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'String');
            }
            if (data.hasOwnProperty('season')) {
                obj['season'] = ApiClient.convertToType(data['season'], 'Number');
            }
            if (data.hasOwnProperty('team')) {
                obj['team'] = ApiClient.convertToType(data['team'], 'String');
            }
            if (data.hasOwnProperty('usage')) {
                obj['usage'] = PlayerUsageUsage.constructFromObject(data['usage']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlayerUsage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlayerUsage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['conference'] && !(typeof data['conference'] === 'string' || data['conference'] instanceof String)) {
            throw new Error("Expected the field `conference` to be a primitive type in the JSON string but got " + data['conference']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['position'] && !(typeof data['position'] === 'string' || data['position'] instanceof String)) {
            throw new Error("Expected the field `position` to be a primitive type in the JSON string but got " + data['position']);
        }
        // ensure the json data is a string
        if (data['team'] && !(typeof data['team'] === 'string' || data['team'] instanceof String)) {
            throw new Error("Expected the field `team` to be a primitive type in the JSON string but got " + data['team']);
        }
        // validate the optional field `usage`
        if (data['usage']) { // data not null
          PlayerUsageUsage.validateJSON(data['usage']);
        }

        return true;
    }


}



/**
 * @member {String} conference
 */
PlayerUsage.prototype['conference'] = undefined;

/**
 * @member {Number} id
 */
PlayerUsage.prototype['id'] = undefined;

/**
 * @member {String} name
 */
PlayerUsage.prototype['name'] = undefined;

/**
 * @member {String} position
 */
PlayerUsage.prototype['position'] = undefined;

/**
 * @member {Number} season
 */
PlayerUsage.prototype['season'] = undefined;

/**
 * @member {String} team
 */
PlayerUsage.prototype['team'] = undefined;

/**
 * @member {module:model/PlayerUsageUsage} usage
 */
PlayerUsage.prototype['usage'] = undefined;






export default PlayerUsage;

