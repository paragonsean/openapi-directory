/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Game model module.
 * @module model/Game
 * @version 4.4.12
 */
class Game {
    /**
     * Constructs a new <code>Game</code>.
     * @alias module:model/Game
     */
    constructor() { 
        
        Game.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Game</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Game} obj Optional instance to populate.
     * @return {module:model/Game} The populated <code>Game</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Game();

            if (data.hasOwnProperty('attendance')) {
                obj['attendance'] = ApiClient.convertToType(data['attendance'], 'Number');
            }
            if (data.hasOwnProperty('away_conference')) {
                obj['away_conference'] = ApiClient.convertToType(data['away_conference'], 'String');
            }
            if (data.hasOwnProperty('away_division')) {
                obj['away_division'] = ApiClient.convertToType(data['away_division'], 'String');
            }
            if (data.hasOwnProperty('away_id')) {
                obj['away_id'] = ApiClient.convertToType(data['away_id'], 'Number');
            }
            if (data.hasOwnProperty('away_line_scores')) {
                obj['away_line_scores'] = ApiClient.convertToType(data['away_line_scores'], ['Number']);
            }
            if (data.hasOwnProperty('away_points')) {
                obj['away_points'] = ApiClient.convertToType(data['away_points'], 'Number');
            }
            if (data.hasOwnProperty('away_post_win_prob')) {
                obj['away_post_win_prob'] = ApiClient.convertToType(data['away_post_win_prob'], 'Number');
            }
            if (data.hasOwnProperty('away_postgame_elo')) {
                obj['away_postgame_elo'] = ApiClient.convertToType(data['away_postgame_elo'], 'Number');
            }
            if (data.hasOwnProperty('away_pregame_elo')) {
                obj['away_pregame_elo'] = ApiClient.convertToType(data['away_pregame_elo'], 'Number');
            }
            if (data.hasOwnProperty('away_team')) {
                obj['away_team'] = ApiClient.convertToType(data['away_team'], 'String');
            }
            if (data.hasOwnProperty('completed')) {
                obj['completed'] = ApiClient.convertToType(data['completed'], 'Boolean');
            }
            if (data.hasOwnProperty('conference_game')) {
                obj['conference_game'] = ApiClient.convertToType(data['conference_game'], 'Boolean');
            }
            if (data.hasOwnProperty('excitement_index')) {
                obj['excitement_index'] = ApiClient.convertToType(data['excitement_index'], 'Number');
            }
            if (data.hasOwnProperty('highlights')) {
                obj['highlights'] = ApiClient.convertToType(data['highlights'], 'String');
            }
            if (data.hasOwnProperty('home_conference')) {
                obj['home_conference'] = ApiClient.convertToType(data['home_conference'], 'String');
            }
            if (data.hasOwnProperty('home_division')) {
                obj['home_division'] = ApiClient.convertToType(data['home_division'], 'String');
            }
            if (data.hasOwnProperty('home_id')) {
                obj['home_id'] = ApiClient.convertToType(data['home_id'], 'Number');
            }
            if (data.hasOwnProperty('home_line_scores')) {
                obj['home_line_scores'] = ApiClient.convertToType(data['home_line_scores'], ['Number']);
            }
            if (data.hasOwnProperty('home_points')) {
                obj['home_points'] = ApiClient.convertToType(data['home_points'], 'Number');
            }
            if (data.hasOwnProperty('home_post_win_prob')) {
                obj['home_post_win_prob'] = ApiClient.convertToType(data['home_post_win_prob'], 'Number');
            }
            if (data.hasOwnProperty('home_postgame_elo')) {
                obj['home_postgame_elo'] = ApiClient.convertToType(data['home_postgame_elo'], 'Number');
            }
            if (data.hasOwnProperty('home_pregame_elo')) {
                obj['home_pregame_elo'] = ApiClient.convertToType(data['home_pregame_elo'], 'Number');
            }
            if (data.hasOwnProperty('home_team')) {
                obj['home_team'] = ApiClient.convertToType(data['home_team'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('neutral_site')) {
                obj['neutral_site'] = ApiClient.convertToType(data['neutral_site'], 'Boolean');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('season')) {
                obj['season'] = ApiClient.convertToType(data['season'], 'Number');
            }
            if (data.hasOwnProperty('season_type')) {
                obj['season_type'] = ApiClient.convertToType(data['season_type'], 'String');
            }
            if (data.hasOwnProperty('start_date')) {
                obj['start_date'] = ApiClient.convertToType(data['start_date'], 'String');
            }
            if (data.hasOwnProperty('start_time_tbd')) {
                obj['start_time_tbd'] = ApiClient.convertToType(data['start_time_tbd'], 'Boolean');
            }
            if (data.hasOwnProperty('venue')) {
                obj['venue'] = ApiClient.convertToType(data['venue'], 'String');
            }
            if (data.hasOwnProperty('venue_id')) {
                obj['venue_id'] = ApiClient.convertToType(data['venue_id'], 'Number');
            }
            if (data.hasOwnProperty('week')) {
                obj['week'] = ApiClient.convertToType(data['week'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Game</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Game</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['away_conference'] && !(typeof data['away_conference'] === 'string' || data['away_conference'] instanceof String)) {
            throw new Error("Expected the field `away_conference` to be a primitive type in the JSON string but got " + data['away_conference']);
        }
        // ensure the json data is a string
        if (data['away_division'] && !(typeof data['away_division'] === 'string' || data['away_division'] instanceof String)) {
            throw new Error("Expected the field `away_division` to be a primitive type in the JSON string but got " + data['away_division']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['away_line_scores'])) {
            throw new Error("Expected the field `away_line_scores` to be an array in the JSON data but got " + data['away_line_scores']);
        }
        // ensure the json data is a string
        if (data['away_team'] && !(typeof data['away_team'] === 'string' || data['away_team'] instanceof String)) {
            throw new Error("Expected the field `away_team` to be a primitive type in the JSON string but got " + data['away_team']);
        }
        // ensure the json data is a string
        if (data['highlights'] && !(typeof data['highlights'] === 'string' || data['highlights'] instanceof String)) {
            throw new Error("Expected the field `highlights` to be a primitive type in the JSON string but got " + data['highlights']);
        }
        // ensure the json data is a string
        if (data['home_conference'] && !(typeof data['home_conference'] === 'string' || data['home_conference'] instanceof String)) {
            throw new Error("Expected the field `home_conference` to be a primitive type in the JSON string but got " + data['home_conference']);
        }
        // ensure the json data is a string
        if (data['home_division'] && !(typeof data['home_division'] === 'string' || data['home_division'] instanceof String)) {
            throw new Error("Expected the field `home_division` to be a primitive type in the JSON string but got " + data['home_division']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['home_line_scores'])) {
            throw new Error("Expected the field `home_line_scores` to be an array in the JSON data but got " + data['home_line_scores']);
        }
        // ensure the json data is a string
        if (data['home_team'] && !(typeof data['home_team'] === 'string' || data['home_team'] instanceof String)) {
            throw new Error("Expected the field `home_team` to be a primitive type in the JSON string but got " + data['home_team']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['season_type'] && !(typeof data['season_type'] === 'string' || data['season_type'] instanceof String)) {
            throw new Error("Expected the field `season_type` to be a primitive type in the JSON string but got " + data['season_type']);
        }
        // ensure the json data is a string
        if (data['start_date'] && !(typeof data['start_date'] === 'string' || data['start_date'] instanceof String)) {
            throw new Error("Expected the field `start_date` to be a primitive type in the JSON string but got " + data['start_date']);
        }
        // ensure the json data is a string
        if (data['venue'] && !(typeof data['venue'] === 'string' || data['venue'] instanceof String)) {
            throw new Error("Expected the field `venue` to be a primitive type in the JSON string but got " + data['venue']);
        }

        return true;
    }


}



/**
 * @member {Number} attendance
 */
Game.prototype['attendance'] = undefined;

/**
 * @member {String} away_conference
 */
Game.prototype['away_conference'] = undefined;

/**
 * @member {String} away_division
 */
Game.prototype['away_division'] = undefined;

/**
 * @member {Number} away_id
 */
Game.prototype['away_id'] = undefined;

/**
 * @member {Array.<Number>} away_line_scores
 */
Game.prototype['away_line_scores'] = undefined;

/**
 * @member {Number} away_points
 */
Game.prototype['away_points'] = undefined;

/**
 * @member {Number} away_post_win_prob
 */
Game.prototype['away_post_win_prob'] = undefined;

/**
 * @member {Number} away_postgame_elo
 */
Game.prototype['away_postgame_elo'] = undefined;

/**
 * @member {Number} away_pregame_elo
 */
Game.prototype['away_pregame_elo'] = undefined;

/**
 * @member {String} away_team
 */
Game.prototype['away_team'] = undefined;

/**
 * @member {Boolean} completed
 */
Game.prototype['completed'] = undefined;

/**
 * @member {Boolean} conference_game
 */
Game.prototype['conference_game'] = undefined;

/**
 * @member {Number} excitement_index
 */
Game.prototype['excitement_index'] = undefined;

/**
 * @member {String} highlights
 */
Game.prototype['highlights'] = undefined;

/**
 * @member {String} home_conference
 */
Game.prototype['home_conference'] = undefined;

/**
 * @member {String} home_division
 */
Game.prototype['home_division'] = undefined;

/**
 * @member {Number} home_id
 */
Game.prototype['home_id'] = undefined;

/**
 * @member {Array.<Number>} home_line_scores
 */
Game.prototype['home_line_scores'] = undefined;

/**
 * @member {Number} home_points
 */
Game.prototype['home_points'] = undefined;

/**
 * @member {Number} home_post_win_prob
 */
Game.prototype['home_post_win_prob'] = undefined;

/**
 * @member {Number} home_postgame_elo
 */
Game.prototype['home_postgame_elo'] = undefined;

/**
 * @member {Number} home_pregame_elo
 */
Game.prototype['home_pregame_elo'] = undefined;

/**
 * @member {String} home_team
 */
Game.prototype['home_team'] = undefined;

/**
 * @member {Number} id
 */
Game.prototype['id'] = undefined;

/**
 * @member {Boolean} neutral_site
 */
Game.prototype['neutral_site'] = undefined;

/**
 * @member {String} notes
 */
Game.prototype['notes'] = undefined;

/**
 * @member {Number} season
 */
Game.prototype['season'] = undefined;

/**
 * @member {String} season_type
 */
Game.prototype['season_type'] = undefined;

/**
 * @member {String} start_date
 */
Game.prototype['start_date'] = undefined;

/**
 * @member {Boolean} start_time_tbd
 */
Game.prototype['start_time_tbd'] = undefined;

/**
 * @member {String} venue
 */
Game.prototype['venue'] = undefined;

/**
 * @member {Number} venue_id
 */
Game.prototype['venue_id'] = undefined;

/**
 * @member {Number} week
 */
Game.prototype['week'] = undefined;






export default Game;

