/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VenueLocation from './VenueLocation';

/**
 * The Venue model module.
 * @module model/Venue
 * @version 4.4.12
 */
class Venue {
    /**
     * Constructs a new <code>Venue</code>.
     * @alias module:model/Venue
     */
    constructor() { 
        
        Venue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Venue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Venue} obj Optional instance to populate.
     * @return {module:model/Venue} The populated <code>Venue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Venue();

            if (data.hasOwnProperty('capacity')) {
                obj['capacity'] = ApiClient.convertToType(data['capacity'], 'Number');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country_code')) {
                obj['country_code'] = ApiClient.convertToType(data['country_code'], 'String');
            }
            if (data.hasOwnProperty('dome')) {
                obj['dome'] = ApiClient.convertToType(data['dome'], 'Boolean');
            }
            if (data.hasOwnProperty('elevation')) {
                obj['elevation'] = ApiClient.convertToType(data['elevation'], 'Number');
            }
            if (data.hasOwnProperty('grass')) {
                obj['grass'] = ApiClient.convertToType(data['grass'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = VenueLocation.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('year_constructed')) {
                obj['year_constructed'] = ApiClient.convertToType(data['year_constructed'], 'Number');
            }
            if (data.hasOwnProperty('zip')) {
                obj['zip'] = ApiClient.convertToType(data['zip'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Venue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Venue</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country_code'] && !(typeof data['country_code'] === 'string' || data['country_code'] instanceof String)) {
            throw new Error("Expected the field `country_code` to be a primitive type in the JSON string but got " + data['country_code']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          VenueLocation.validateJSON(data['location']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }
        // ensure the json data is a string
        if (data['zip'] && !(typeof data['zip'] === 'string' || data['zip'] instanceof String)) {
            throw new Error("Expected the field `zip` to be a primitive type in the JSON string but got " + data['zip']);
        }

        return true;
    }


}



/**
 * @member {Number} capacity
 */
Venue.prototype['capacity'] = undefined;

/**
 * @member {String} city
 */
Venue.prototype['city'] = undefined;

/**
 * @member {String} country_code
 */
Venue.prototype['country_code'] = undefined;

/**
 * @member {Boolean} dome
 */
Venue.prototype['dome'] = undefined;

/**
 * @member {Number} elevation
 */
Venue.prototype['elevation'] = undefined;

/**
 * @member {Boolean} grass
 */
Venue.prototype['grass'] = undefined;

/**
 * @member {Number} id
 */
Venue.prototype['id'] = undefined;

/**
 * @member {module:model/VenueLocation} location
 */
Venue.prototype['location'] = undefined;

/**
 * @member {String} name
 */
Venue.prototype['name'] = undefined;

/**
 * @member {String} state
 */
Venue.prototype['state'] = undefined;

/**
 * @member {String} timezone
 */
Venue.prototype['timezone'] = undefined;

/**
 * @member {Number} year_constructed
 */
Venue.prototype['year_constructed'] = undefined;

/**
 * @member {String} zip
 */
Venue.prototype['zip'] = undefined;






export default Venue;

