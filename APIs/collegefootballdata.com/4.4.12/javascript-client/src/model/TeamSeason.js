/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TeamSeason model module.
 * @module model/TeamSeason
 * @version 4.4.12
 */
class TeamSeason {
    /**
     * Constructs a new <code>TeamSeason</code>.
     * @alias module:model/TeamSeason
     */
    constructor() { 
        
        TeamSeason.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TeamSeason</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TeamSeason} obj Optional instance to populate.
     * @return {module:model/TeamSeason} The populated <code>TeamSeason</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TeamSeason();

            if (data.hasOwnProperty('games')) {
                obj['games'] = ApiClient.convertToType(data['games'], 'Number');
            }
            if (data.hasOwnProperty('losses')) {
                obj['losses'] = ApiClient.convertToType(data['losses'], 'Number');
            }
            if (data.hasOwnProperty('postseason_rank')) {
                obj['postseason_rank'] = ApiClient.convertToType(data['postseason_rank'], 'Number');
            }
            if (data.hasOwnProperty('preseason_rank')) {
                obj['preseason_rank'] = ApiClient.convertToType(data['preseason_rank'], 'Number');
            }
            if (data.hasOwnProperty('school')) {
                obj['school'] = ApiClient.convertToType(data['school'], 'String');
            }
            if (data.hasOwnProperty('sp_defense')) {
                obj['sp_defense'] = ApiClient.convertToType(data['sp_defense'], 'Number');
            }
            if (data.hasOwnProperty('sp_offense')) {
                obj['sp_offense'] = ApiClient.convertToType(data['sp_offense'], 'Number');
            }
            if (data.hasOwnProperty('sp_overall')) {
                obj['sp_overall'] = ApiClient.convertToType(data['sp_overall'], 'Number');
            }
            if (data.hasOwnProperty('srs')) {
                obj['srs'] = ApiClient.convertToType(data['srs'], 'Number');
            }
            if (data.hasOwnProperty('ties')) {
                obj['ties'] = ApiClient.convertToType(data['ties'], 'Number');
            }
            if (data.hasOwnProperty('wins')) {
                obj['wins'] = ApiClient.convertToType(data['wins'], 'Number');
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TeamSeason</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TeamSeason</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['school'] && !(typeof data['school'] === 'string' || data['school'] instanceof String)) {
            throw new Error("Expected the field `school` to be a primitive type in the JSON string but got " + data['school']);
        }
        // ensure the json data is a string
        if (data['year'] && !(typeof data['year'] === 'string' || data['year'] instanceof String)) {
            throw new Error("Expected the field `year` to be a primitive type in the JSON string but got " + data['year']);
        }

        return true;
    }


}



/**
 * @member {Number} games
 */
TeamSeason.prototype['games'] = undefined;

/**
 * @member {Number} losses
 */
TeamSeason.prototype['losses'] = undefined;

/**
 * Final ranking in the AP poll
 * @member {Number} postseason_rank
 */
TeamSeason.prototype['postseason_rank'] = undefined;

/**
 * Rank in the AP preseason poll
 * @member {Number} preseason_rank
 */
TeamSeason.prototype['preseason_rank'] = undefined;

/**
 * @member {String} school
 */
TeamSeason.prototype['school'] = undefined;

/**
 * Final SP+ defensive rating
 * @member {Number} sp_defense
 */
TeamSeason.prototype['sp_defense'] = undefined;

/**
 * Final SP+ offensive rating
 * @member {Number} sp_offense
 */
TeamSeason.prototype['sp_offense'] = undefined;

/**
 * Final overall SP+ rating
 * @member {Number} sp_overall
 */
TeamSeason.prototype['sp_overall'] = undefined;

/**
 * Final SRS rankings
 * @member {Number} srs
 */
TeamSeason.prototype['srs'] = undefined;

/**
 * @member {Number} ties
 */
TeamSeason.prototype['ties'] = undefined;

/**
 * @member {Number} wins
 */
TeamSeason.prototype['wins'] = undefined;

/**
 * @member {String} year
 */
TeamSeason.prototype['year'] = undefined;






export default TeamSeason;

