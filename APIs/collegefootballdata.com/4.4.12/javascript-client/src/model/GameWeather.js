/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GameWeather model module.
 * @module model/GameWeather
 * @version 4.4.12
 */
class GameWeather {
    /**
     * Constructs a new <code>GameWeather</code>.
     * @alias module:model/GameWeather
     */
    constructor() { 
        
        GameWeather.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GameWeather</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GameWeather} obj Optional instance to populate.
     * @return {module:model/GameWeather} The populated <code>GameWeather</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GameWeather();

            if (data.hasOwnProperty('awayConference')) {
                obj['awayConference'] = ApiClient.convertToType(data['awayConference'], 'String');
            }
            if (data.hasOwnProperty('awayTeam')) {
                obj['awayTeam'] = ApiClient.convertToType(data['awayTeam'], 'String');
            }
            if (data.hasOwnProperty('dewPoint')) {
                obj['dewPoint'] = ApiClient.convertToType(data['dewPoint'], 'Number');
            }
            if (data.hasOwnProperty('gameIndoors')) {
                obj['gameIndoors'] = ApiClient.convertToType(data['gameIndoors'], 'Boolean');
            }
            if (data.hasOwnProperty('homeConference')) {
                obj['homeConference'] = ApiClient.convertToType(data['homeConference'], 'String');
            }
            if (data.hasOwnProperty('homeTeam')) {
                obj['homeTeam'] = ApiClient.convertToType(data['homeTeam'], 'String');
            }
            if (data.hasOwnProperty('humidity')) {
                obj['humidity'] = ApiClient.convertToType(data['humidity'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('precipitation')) {
                obj['precipitation'] = ApiClient.convertToType(data['precipitation'], 'Number');
            }
            if (data.hasOwnProperty('pressure')) {
                obj['pressure'] = ApiClient.convertToType(data['pressure'], 'Number');
            }
            if (data.hasOwnProperty('season')) {
                obj['season'] = ApiClient.convertToType(data['season'], 'Number');
            }
            if (data.hasOwnProperty('seasonType')) {
                obj['seasonType'] = ApiClient.convertToType(data['seasonType'], 'String');
            }
            if (data.hasOwnProperty('snowfall')) {
                obj['snowfall'] = ApiClient.convertToType(data['snowfall'], 'Number');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('temperature')) {
                obj['temperature'] = ApiClient.convertToType(data['temperature'], 'Number');
            }
            if (data.hasOwnProperty('venue')) {
                obj['venue'] = ApiClient.convertToType(data['venue'], 'String');
            }
            if (data.hasOwnProperty('venueId')) {
                obj['venueId'] = ApiClient.convertToType(data['venueId'], 'Number');
            }
            if (data.hasOwnProperty('weatherCondition')) {
                obj['weatherCondition'] = ApiClient.convertToType(data['weatherCondition'], 'String');
            }
            if (data.hasOwnProperty('weatherConditionCode')) {
                obj['weatherConditionCode'] = ApiClient.convertToType(data['weatherConditionCode'], 'Number');
            }
            if (data.hasOwnProperty('week')) {
                obj['week'] = ApiClient.convertToType(data['week'], 'Number');
            }
            if (data.hasOwnProperty('windDirection')) {
                obj['windDirection'] = ApiClient.convertToType(data['windDirection'], 'Number');
            }
            if (data.hasOwnProperty('windSpeed')) {
                obj['windSpeed'] = ApiClient.convertToType(data['windSpeed'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GameWeather</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GameWeather</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['awayConference'] && !(typeof data['awayConference'] === 'string' || data['awayConference'] instanceof String)) {
            throw new Error("Expected the field `awayConference` to be a primitive type in the JSON string but got " + data['awayConference']);
        }
        // ensure the json data is a string
        if (data['awayTeam'] && !(typeof data['awayTeam'] === 'string' || data['awayTeam'] instanceof String)) {
            throw new Error("Expected the field `awayTeam` to be a primitive type in the JSON string but got " + data['awayTeam']);
        }
        // ensure the json data is a string
        if (data['homeConference'] && !(typeof data['homeConference'] === 'string' || data['homeConference'] instanceof String)) {
            throw new Error("Expected the field `homeConference` to be a primitive type in the JSON string but got " + data['homeConference']);
        }
        // ensure the json data is a string
        if (data['homeTeam'] && !(typeof data['homeTeam'] === 'string' || data['homeTeam'] instanceof String)) {
            throw new Error("Expected the field `homeTeam` to be a primitive type in the JSON string but got " + data['homeTeam']);
        }
        // ensure the json data is a string
        if (data['seasonType'] && !(typeof data['seasonType'] === 'string' || data['seasonType'] instanceof String)) {
            throw new Error("Expected the field `seasonType` to be a primitive type in the JSON string but got " + data['seasonType']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['venue'] && !(typeof data['venue'] === 'string' || data['venue'] instanceof String)) {
            throw new Error("Expected the field `venue` to be a primitive type in the JSON string but got " + data['venue']);
        }
        // ensure the json data is a string
        if (data['weatherCondition'] && !(typeof data['weatherCondition'] === 'string' || data['weatherCondition'] instanceof String)) {
            throw new Error("Expected the field `weatherCondition` to be a primitive type in the JSON string but got " + data['weatherCondition']);
        }

        return true;
    }


}



/**
 * @member {String} awayConference
 */
GameWeather.prototype['awayConference'] = undefined;

/**
 * @member {String} awayTeam
 */
GameWeather.prototype['awayTeam'] = undefined;

/**
 * @member {Number} dewPoint
 */
GameWeather.prototype['dewPoint'] = undefined;

/**
 * @member {Boolean} gameIndoors
 */
GameWeather.prototype['gameIndoors'] = undefined;

/**
 * @member {String} homeConference
 */
GameWeather.prototype['homeConference'] = undefined;

/**
 * @member {String} homeTeam
 */
GameWeather.prototype['homeTeam'] = undefined;

/**
 * @member {Number} humidity
 */
GameWeather.prototype['humidity'] = undefined;

/**
 * @member {Number} id
 */
GameWeather.prototype['id'] = undefined;

/**
 * @member {Number} precipitation
 */
GameWeather.prototype['precipitation'] = undefined;

/**
 * @member {Number} pressure
 */
GameWeather.prototype['pressure'] = undefined;

/**
 * @member {Number} season
 */
GameWeather.prototype['season'] = undefined;

/**
 * @member {String} seasonType
 */
GameWeather.prototype['seasonType'] = undefined;

/**
 * @member {Number} snowfall
 */
GameWeather.prototype['snowfall'] = undefined;

/**
 * @member {String} startTime
 */
GameWeather.prototype['startTime'] = undefined;

/**
 * @member {Number} temperature
 */
GameWeather.prototype['temperature'] = undefined;

/**
 * @member {String} venue
 */
GameWeather.prototype['venue'] = undefined;

/**
 * @member {Number} venueId
 */
GameWeather.prototype['venueId'] = undefined;

/**
 * @member {String} weatherCondition
 */
GameWeather.prototype['weatherCondition'] = undefined;

/**
 * @member {Number} weatherConditionCode
 */
GameWeather.prototype['weatherConditionCode'] = undefined;

/**
 * @member {Number} week
 */
GameWeather.prototype['week'] = undefined;

/**
 * @member {Number} windDirection
 */
GameWeather.prototype['windDirection'] = undefined;

/**
 * @member {Number} windSpeed
 */
GameWeather.prototype['windSpeed'] = undefined;






export default GameWeather;

