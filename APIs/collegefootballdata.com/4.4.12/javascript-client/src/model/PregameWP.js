/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PregameWP model module.
 * @module model/PregameWP
 * @version 4.4.12
 */
class PregameWP {
    /**
     * Constructs a new <code>PregameWP</code>.
     * @alias module:model/PregameWP
     */
    constructor() { 
        
        PregameWP.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PregameWP</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PregameWP} obj Optional instance to populate.
     * @return {module:model/PregameWP} The populated <code>PregameWP</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PregameWP();

            if (data.hasOwnProperty('awayTeam')) {
                obj['awayTeam'] = ApiClient.convertToType(data['awayTeam'], 'String');
            }
            if (data.hasOwnProperty('gameId')) {
                obj['gameId'] = ApiClient.convertToType(data['gameId'], 'Number');
            }
            if (data.hasOwnProperty('homeTeam')) {
                obj['homeTeam'] = ApiClient.convertToType(data['homeTeam'], 'String');
            }
            if (data.hasOwnProperty('homeWinProb')) {
                obj['homeWinProb'] = ApiClient.convertToType(data['homeWinProb'], 'Number');
            }
            if (data.hasOwnProperty('season')) {
                obj['season'] = ApiClient.convertToType(data['season'], 'Number');
            }
            if (data.hasOwnProperty('seasonType')) {
                obj['seasonType'] = ApiClient.convertToType(data['seasonType'], 'String');
            }
            if (data.hasOwnProperty('spread')) {
                obj['spread'] = ApiClient.convertToType(data['spread'], 'Number');
            }
            if (data.hasOwnProperty('week')) {
                obj['week'] = ApiClient.convertToType(data['week'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PregameWP</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PregameWP</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['awayTeam'] && !(typeof data['awayTeam'] === 'string' || data['awayTeam'] instanceof String)) {
            throw new Error("Expected the field `awayTeam` to be a primitive type in the JSON string but got " + data['awayTeam']);
        }
        // ensure the json data is a string
        if (data['homeTeam'] && !(typeof data['homeTeam'] === 'string' || data['homeTeam'] instanceof String)) {
            throw new Error("Expected the field `homeTeam` to be a primitive type in the JSON string but got " + data['homeTeam']);
        }
        // ensure the json data is a string
        if (data['seasonType'] && !(typeof data['seasonType'] === 'string' || data['seasonType'] instanceof String)) {
            throw new Error("Expected the field `seasonType` to be a primitive type in the JSON string but got " + data['seasonType']);
        }

        return true;
    }


}



/**
 * @member {String} awayTeam
 */
PregameWP.prototype['awayTeam'] = undefined;

/**
 * @member {Number} gameId
 */
PregameWP.prototype['gameId'] = undefined;

/**
 * @member {String} homeTeam
 */
PregameWP.prototype['homeTeam'] = undefined;

/**
 * @member {Number} homeWinProb
 */
PregameWP.prototype['homeWinProb'] = undefined;

/**
 * @member {Number} season
 */
PregameWP.prototype['season'] = undefined;

/**
 * @member {String} seasonType
 */
PregameWP.prototype['seasonType'] = undefined;

/**
 * @member {Number} spread
 */
PregameWP.prototype['spread'] = undefined;

/**
 * @member {Number} week
 */
PregameWP.prototype['week'] = undefined;






export default PregameWP;

