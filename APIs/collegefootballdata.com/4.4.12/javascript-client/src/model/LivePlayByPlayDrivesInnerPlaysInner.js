/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LivePlayByPlayDrivesInnerPlaysInner model module.
 * @module model/LivePlayByPlayDrivesInnerPlaysInner
 * @version 4.4.12
 */
class LivePlayByPlayDrivesInnerPlaysInner {
    /**
     * Constructs a new <code>LivePlayByPlayDrivesInnerPlaysInner</code>.
     * @alias module:model/LivePlayByPlayDrivesInnerPlaysInner
     */
    constructor() { 
        
        LivePlayByPlayDrivesInnerPlaysInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LivePlayByPlayDrivesInnerPlaysInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LivePlayByPlayDrivesInnerPlaysInner} obj Optional instance to populate.
     * @return {module:model/LivePlayByPlayDrivesInnerPlaysInner} The populated <code>LivePlayByPlayDrivesInnerPlaysInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LivePlayByPlayDrivesInnerPlaysInner();

            if (data.hasOwnProperty('awayScore')) {
                obj['awayScore'] = ApiClient.convertToType(data['awayScore'], 'Number');
            }
            if (data.hasOwnProperty('clock')) {
                obj['clock'] = ApiClient.convertToType(data['clock'], 'String');
            }
            if (data.hasOwnProperty('distance')) {
                obj['distance'] = ApiClient.convertToType(data['distance'], 'Number');
            }
            if (data.hasOwnProperty('down')) {
                obj['down'] = ApiClient.convertToType(data['down'], 'Number');
            }
            if (data.hasOwnProperty('downType')) {
                obj['downType'] = ApiClient.convertToType(data['downType'], 'String');
            }
            if (data.hasOwnProperty('epa')) {
                obj['epa'] = ApiClient.convertToType(data['epa'], 'Number');
            }
            if (data.hasOwnProperty('garbageTime')) {
                obj['garbageTime'] = ApiClient.convertToType(data['garbageTime'], 'Boolean');
            }
            if (data.hasOwnProperty('homeScore')) {
                obj['homeScore'] = ApiClient.convertToType(data['homeScore'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('period')) {
                obj['period'] = ApiClient.convertToType(data['period'], 'Number');
            }
            if (data.hasOwnProperty('playText')) {
                obj['playText'] = ApiClient.convertToType(data['playText'], 'String');
            }
            if (data.hasOwnProperty('playType')) {
                obj['playType'] = ApiClient.convertToType(data['playType'], 'String');
            }
            if (data.hasOwnProperty('playTypeId')) {
                obj['playTypeId'] = ApiClient.convertToType(data['playTypeId'], 'Number');
            }
            if (data.hasOwnProperty('rushPass')) {
                obj['rushPass'] = ApiClient.convertToType(data['rushPass'], 'String');
            }
            if (data.hasOwnProperty('success')) {
                obj['success'] = ApiClient.convertToType(data['success'], 'Boolean');
            }
            if (data.hasOwnProperty('team')) {
                obj['team'] = ApiClient.convertToType(data['team'], 'String');
            }
            if (data.hasOwnProperty('teamId')) {
                obj['teamId'] = ApiClient.convertToType(data['teamId'], 'Number');
            }
            if (data.hasOwnProperty('wallclock')) {
                obj['wallclock'] = ApiClient.convertToType(data['wallclock'], 'String');
            }
            if (data.hasOwnProperty('yardsGained')) {
                obj['yardsGained'] = ApiClient.convertToType(data['yardsGained'], 'Number');
            }
            if (data.hasOwnProperty('yardsToGoal')) {
                obj['yardsToGoal'] = ApiClient.convertToType(data['yardsToGoal'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LivePlayByPlayDrivesInnerPlaysInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LivePlayByPlayDrivesInnerPlaysInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clock'] && !(typeof data['clock'] === 'string' || data['clock'] instanceof String)) {
            throw new Error("Expected the field `clock` to be a primitive type in the JSON string but got " + data['clock']);
        }
        // ensure the json data is a string
        if (data['downType'] && !(typeof data['downType'] === 'string' || data['downType'] instanceof String)) {
            throw new Error("Expected the field `downType` to be a primitive type in the JSON string but got " + data['downType']);
        }
        // ensure the json data is a string
        if (data['playText'] && !(typeof data['playText'] === 'string' || data['playText'] instanceof String)) {
            throw new Error("Expected the field `playText` to be a primitive type in the JSON string but got " + data['playText']);
        }
        // ensure the json data is a string
        if (data['playType'] && !(typeof data['playType'] === 'string' || data['playType'] instanceof String)) {
            throw new Error("Expected the field `playType` to be a primitive type in the JSON string but got " + data['playType']);
        }
        // ensure the json data is a string
        if (data['rushPass'] && !(typeof data['rushPass'] === 'string' || data['rushPass'] instanceof String)) {
            throw new Error("Expected the field `rushPass` to be a primitive type in the JSON string but got " + data['rushPass']);
        }
        // ensure the json data is a string
        if (data['team'] && !(typeof data['team'] === 'string' || data['team'] instanceof String)) {
            throw new Error("Expected the field `team` to be a primitive type in the JSON string but got " + data['team']);
        }
        // ensure the json data is a string
        if (data['wallclock'] && !(typeof data['wallclock'] === 'string' || data['wallclock'] instanceof String)) {
            throw new Error("Expected the field `wallclock` to be a primitive type in the JSON string but got " + data['wallclock']);
        }

        return true;
    }


}



/**
 * @member {Number} awayScore
 */
LivePlayByPlayDrivesInnerPlaysInner.prototype['awayScore'] = undefined;

/**
 * @member {String} clock
 */
LivePlayByPlayDrivesInnerPlaysInner.prototype['clock'] = undefined;

/**
 * @member {Number} distance
 */
LivePlayByPlayDrivesInnerPlaysInner.prototype['distance'] = undefined;

/**
 * @member {Number} down
 */
LivePlayByPlayDrivesInnerPlaysInner.prototype['down'] = undefined;

/**
 * @member {String} downType
 */
LivePlayByPlayDrivesInnerPlaysInner.prototype['downType'] = undefined;

/**
 * @member {Number} epa
 */
LivePlayByPlayDrivesInnerPlaysInner.prototype['epa'] = undefined;

/**
 * @member {Boolean} garbageTime
 */
LivePlayByPlayDrivesInnerPlaysInner.prototype['garbageTime'] = undefined;

/**
 * @member {Number} homeScore
 */
LivePlayByPlayDrivesInnerPlaysInner.prototype['homeScore'] = undefined;

/**
 * @member {Number} id
 */
LivePlayByPlayDrivesInnerPlaysInner.prototype['id'] = undefined;

/**
 * @member {Number} period
 */
LivePlayByPlayDrivesInnerPlaysInner.prototype['period'] = undefined;

/**
 * @member {String} playText
 */
LivePlayByPlayDrivesInnerPlaysInner.prototype['playText'] = undefined;

/**
 * @member {String} playType
 */
LivePlayByPlayDrivesInnerPlaysInner.prototype['playType'] = undefined;

/**
 * @member {Number} playTypeId
 */
LivePlayByPlayDrivesInnerPlaysInner.prototype['playTypeId'] = undefined;

/**
 * @member {String} rushPass
 */
LivePlayByPlayDrivesInnerPlaysInner.prototype['rushPass'] = undefined;

/**
 * @member {Boolean} success
 */
LivePlayByPlayDrivesInnerPlaysInner.prototype['success'] = undefined;

/**
 * @member {String} team
 */
LivePlayByPlayDrivesInnerPlaysInner.prototype['team'] = undefined;

/**
 * @member {Number} teamId
 */
LivePlayByPlayDrivesInnerPlaysInner.prototype['teamId'] = undefined;

/**
 * @member {String} wallclock
 */
LivePlayByPlayDrivesInnerPlaysInner.prototype['wallclock'] = undefined;

/**
 * @member {Number} yardsGained
 */
LivePlayByPlayDrivesInnerPlaysInner.prototype['yardsGained'] = undefined;

/**
 * @member {Number} yardsToGoal
 */
LivePlayByPlayDrivesInnerPlaysInner.prototype['yardsToGoal'] = undefined;






export default LivePlayByPlayDrivesInnerPlaysInner;

