/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LivePlayByPlayDrivesInner from './LivePlayByPlayDrivesInner';
import LivePlayByPlayTeamsInner from './LivePlayByPlayTeamsInner';

/**
 * The LivePlayByPlay model module.
 * @module model/LivePlayByPlay
 * @version 4.4.12
 */
class LivePlayByPlay {
    /**
     * Constructs a new <code>LivePlayByPlay</code>.
     * @alias module:model/LivePlayByPlay
     */
    constructor() { 
        
        LivePlayByPlay.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LivePlayByPlay</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LivePlayByPlay} obj Optional instance to populate.
     * @return {module:model/LivePlayByPlay} The populated <code>LivePlayByPlay</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LivePlayByPlay();

            if (data.hasOwnProperty('clock')) {
                obj['clock'] = ApiClient.convertToType(data['clock'], 'String');
            }
            if (data.hasOwnProperty('distance')) {
                obj['distance'] = ApiClient.convertToType(data['distance'], 'Number');
            }
            if (data.hasOwnProperty('down')) {
                obj['down'] = ApiClient.convertToType(data['down'], 'Number');
            }
            if (data.hasOwnProperty('drives')) {
                obj['drives'] = ApiClient.convertToType(data['drives'], [LivePlayByPlayDrivesInner]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('period')) {
                obj['period'] = ApiClient.convertToType(data['period'], 'Number');
            }
            if (data.hasOwnProperty('possession')) {
                obj['possession'] = ApiClient.convertToType(data['possession'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('teams')) {
                obj['teams'] = ApiClient.convertToType(data['teams'], [LivePlayByPlayTeamsInner]);
            }
            if (data.hasOwnProperty('yardsToGoal')) {
                obj['yardsToGoal'] = ApiClient.convertToType(data['yardsToGoal'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LivePlayByPlay</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LivePlayByPlay</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clock'] && !(typeof data['clock'] === 'string' || data['clock'] instanceof String)) {
            throw new Error("Expected the field `clock` to be a primitive type in the JSON string but got " + data['clock']);
        }
        if (data['drives']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['drives'])) {
                throw new Error("Expected the field `drives` to be an array in the JSON data but got " + data['drives']);
            }
            // validate the optional field `drives` (array)
            for (const item of data['drives']) {
                LivePlayByPlayDrivesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['possession'] && !(typeof data['possession'] === 'string' || data['possession'] instanceof String)) {
            throw new Error("Expected the field `possession` to be a primitive type in the JSON string but got " + data['possession']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        if (data['teams']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['teams'])) {
                throw new Error("Expected the field `teams` to be an array in the JSON data but got " + data['teams']);
            }
            // validate the optional field `teams` (array)
            for (const item of data['teams']) {
                LivePlayByPlayTeamsInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} clock
 */
LivePlayByPlay.prototype['clock'] = undefined;

/**
 * @member {Number} distance
 */
LivePlayByPlay.prototype['distance'] = undefined;

/**
 * @member {Number} down
 */
LivePlayByPlay.prototype['down'] = undefined;

/**
 * @member {Array.<module:model/LivePlayByPlayDrivesInner>} drives
 */
LivePlayByPlay.prototype['drives'] = undefined;

/**
 * @member {Number} id
 */
LivePlayByPlay.prototype['id'] = undefined;

/**
 * @member {Number} period
 */
LivePlayByPlay.prototype['period'] = undefined;

/**
 * @member {String} possession
 */
LivePlayByPlay.prototype['possession'] = undefined;

/**
 * @member {String} status
 */
LivePlayByPlay.prototype['status'] = undefined;

/**
 * @member {Array.<module:model/LivePlayByPlayTeamsInner>} teams
 */
LivePlayByPlay.prototype['teams'] = undefined;

/**
 * @member {Number} yardsToGoal
 */
LivePlayByPlay.prototype['yardsToGoal'] = undefined;






export default LivePlayByPlay;

