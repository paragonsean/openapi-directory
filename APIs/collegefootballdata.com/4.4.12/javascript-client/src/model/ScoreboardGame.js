/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ScoreboardGameAwayTeam from './ScoreboardGameAwayTeam';
import ScoreboardGameBetting from './ScoreboardGameBetting';
import ScoreboardGameVenue from './ScoreboardGameVenue';
import ScoreboardGameWeather from './ScoreboardGameWeather';

/**
 * The ScoreboardGame model module.
 * @module model/ScoreboardGame
 * @version 4.4.12
 */
class ScoreboardGame {
    /**
     * Constructs a new <code>ScoreboardGame</code>.
     * @alias module:model/ScoreboardGame
     */
    constructor() { 
        
        ScoreboardGame.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScoreboardGame</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScoreboardGame} obj Optional instance to populate.
     * @return {module:model/ScoreboardGame} The populated <code>ScoreboardGame</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScoreboardGame();

            if (data.hasOwnProperty('awayTeam')) {
                obj['awayTeam'] = ScoreboardGameAwayTeam.constructFromObject(data['awayTeam']);
            }
            if (data.hasOwnProperty('betting')) {
                obj['betting'] = ScoreboardGameBetting.constructFromObject(data['betting']);
            }
            if (data.hasOwnProperty('clock')) {
                obj['clock'] = ApiClient.convertToType(data['clock'], 'String');
            }
            if (data.hasOwnProperty('conferenceGame')) {
                obj['conferenceGame'] = ApiClient.convertToType(data['conferenceGame'], 'Boolean');
            }
            if (data.hasOwnProperty('homeTeam')) {
                obj['homeTeam'] = ScoreboardGameAwayTeam.constructFromObject(data['homeTeam']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('neutralSite')) {
                obj['neutralSite'] = ApiClient.convertToType(data['neutralSite'], 'Boolean');
            }
            if (data.hasOwnProperty('period')) {
                obj['period'] = ApiClient.convertToType(data['period'], 'Number');
            }
            if (data.hasOwnProperty('possession')) {
                obj['possession'] = ApiClient.convertToType(data['possession'], 'String');
            }
            if (data.hasOwnProperty('situation')) {
                obj['situation'] = ApiClient.convertToType(data['situation'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'String');
            }
            if (data.hasOwnProperty('startTimeTBD')) {
                obj['startTimeTBD'] = ApiClient.convertToType(data['startTimeTBD'], 'Boolean');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('tv')) {
                obj['tv'] = ApiClient.convertToType(data['tv'], 'String');
            }
            if (data.hasOwnProperty('venue')) {
                obj['venue'] = ScoreboardGameVenue.constructFromObject(data['venue']);
            }
            if (data.hasOwnProperty('weather')) {
                obj['weather'] = ScoreboardGameWeather.constructFromObject(data['weather']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScoreboardGame</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScoreboardGame</code>.
     */
    static validateJSON(data) {
        // validate the optional field `awayTeam`
        if (data['awayTeam']) { // data not null
          ScoreboardGameAwayTeam.validateJSON(data['awayTeam']);
        }
        // validate the optional field `betting`
        if (data['betting']) { // data not null
          ScoreboardGameBetting.validateJSON(data['betting']);
        }
        // ensure the json data is a string
        if (data['clock'] && !(typeof data['clock'] === 'string' || data['clock'] instanceof String)) {
            throw new Error("Expected the field `clock` to be a primitive type in the JSON string but got " + data['clock']);
        }
        // validate the optional field `homeTeam`
        if (data['homeTeam']) { // data not null
          ScoreboardGameAwayTeam.validateJSON(data['homeTeam']);
        }
        // ensure the json data is a string
        if (data['possession'] && !(typeof data['possession'] === 'string' || data['possession'] instanceof String)) {
            throw new Error("Expected the field `possession` to be a primitive type in the JSON string but got " + data['possession']);
        }
        // ensure the json data is a string
        if (data['situation'] && !(typeof data['situation'] === 'string' || data['situation'] instanceof String)) {
            throw new Error("Expected the field `situation` to be a primitive type in the JSON string but got " + data['situation']);
        }
        // ensure the json data is a string
        if (data['startDate'] && !(typeof data['startDate'] === 'string' || data['startDate'] instanceof String)) {
            throw new Error("Expected the field `startDate` to be a primitive type in the JSON string but got " + data['startDate']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['tv'] && !(typeof data['tv'] === 'string' || data['tv'] instanceof String)) {
            throw new Error("Expected the field `tv` to be a primitive type in the JSON string but got " + data['tv']);
        }
        // validate the optional field `venue`
        if (data['venue']) { // data not null
          ScoreboardGameVenue.validateJSON(data['venue']);
        }
        // validate the optional field `weather`
        if (data['weather']) { // data not null
          ScoreboardGameWeather.validateJSON(data['weather']);
        }

        return true;
    }


}



/**
 * @member {module:model/ScoreboardGameAwayTeam} awayTeam
 */
ScoreboardGame.prototype['awayTeam'] = undefined;

/**
 * @member {module:model/ScoreboardGameBetting} betting
 */
ScoreboardGame.prototype['betting'] = undefined;

/**
 * @member {String} clock
 */
ScoreboardGame.prototype['clock'] = undefined;

/**
 * @member {Boolean} conferenceGame
 */
ScoreboardGame.prototype['conferenceGame'] = undefined;

/**
 * @member {module:model/ScoreboardGameAwayTeam} homeTeam
 */
ScoreboardGame.prototype['homeTeam'] = undefined;

/**
 * @member {Number} id
 */
ScoreboardGame.prototype['id'] = undefined;

/**
 * @member {Boolean} neutralSite
 */
ScoreboardGame.prototype['neutralSite'] = undefined;

/**
 * @member {Number} period
 */
ScoreboardGame.prototype['period'] = undefined;

/**
 * @member {String} possession
 */
ScoreboardGame.prototype['possession'] = undefined;

/**
 * @member {String} situation
 */
ScoreboardGame.prototype['situation'] = undefined;

/**
 * @member {String} startDate
 */
ScoreboardGame.prototype['startDate'] = undefined;

/**
 * @member {Boolean} startTimeTBD
 */
ScoreboardGame.prototype['startTimeTBD'] = undefined;

/**
 * @member {String} status
 */
ScoreboardGame.prototype['status'] = undefined;

/**
 * @member {String} tv
 */
ScoreboardGame.prototype['tv'] = undefined;

/**
 * @member {module:model/ScoreboardGameVenue} venue
 */
ScoreboardGame.prototype['venue'] = undefined;

/**
 * @member {module:model/ScoreboardGameWeather} weather
 */
ScoreboardGame.prototype['weather'] = undefined;






export default ScoreboardGame;

