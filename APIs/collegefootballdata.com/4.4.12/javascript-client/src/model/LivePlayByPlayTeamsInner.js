/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LivePlayByPlayTeamsInner model module.
 * @module model/LivePlayByPlayTeamsInner
 * @version 4.4.12
 */
class LivePlayByPlayTeamsInner {
    /**
     * Constructs a new <code>LivePlayByPlayTeamsInner</code>.
     * @alias module:model/LivePlayByPlayTeamsInner
     */
    constructor() { 
        
        LivePlayByPlayTeamsInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LivePlayByPlayTeamsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LivePlayByPlayTeamsInner} obj Optional instance to populate.
     * @return {module:model/LivePlayByPlayTeamsInner} The populated <code>LivePlayByPlayTeamsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LivePlayByPlayTeamsInner();

            if (data.hasOwnProperty('drives')) {
                obj['drives'] = ApiClient.convertToType(data['drives'], 'Number');
            }
            if (data.hasOwnProperty('epaPerPass')) {
                obj['epaPerPass'] = ApiClient.convertToType(data['epaPerPass'], 'Number');
            }
            if (data.hasOwnProperty('epaPerPlay')) {
                obj['epaPerPlay'] = ApiClient.convertToType(data['epaPerPlay'], 'Number');
            }
            if (data.hasOwnProperty('epaPerRush')) {
                obj['epaPerRush'] = ApiClient.convertToType(data['epaPerRush'], 'Number');
            }
            if (data.hasOwnProperty('explosiveness')) {
                obj['explosiveness'] = ApiClient.convertToType(data['explosiveness'], 'Number');
            }
            if (data.hasOwnProperty('homeAway')) {
                obj['homeAway'] = ApiClient.convertToType(data['homeAway'], 'String');
            }
            if (data.hasOwnProperty('lineYards')) {
                obj['lineYards'] = ApiClient.convertToType(data['lineYards'], 'Number');
            }
            if (data.hasOwnProperty('lineYardsPerRush')) {
                obj['lineYardsPerRush'] = ApiClient.convertToType(data['lineYardsPerRush'], 'Number');
            }
            if (data.hasOwnProperty('openFieldYards')) {
                obj['openFieldYards'] = ApiClient.convertToType(data['openFieldYards'], 'Number');
            }
            if (data.hasOwnProperty('openFieldYardsPerRush')) {
                obj['openFieldYardsPerRush'] = ApiClient.convertToType(data['openFieldYardsPerRush'], 'Number');
            }
            if (data.hasOwnProperty('passingDownSuccessRate')) {
                obj['passingDownSuccessRate'] = ApiClient.convertToType(data['passingDownSuccessRate'], 'Number');
            }
            if (data.hasOwnProperty('passingEpa')) {
                obj['passingEpa'] = ApiClient.convertToType(data['passingEpa'], 'Number');
            }
            if (data.hasOwnProperty('plays')) {
                obj['plays'] = ApiClient.convertToType(data['plays'], 'Number');
            }
            if (data.hasOwnProperty('points')) {
                obj['points'] = ApiClient.convertToType(data['points'], 'Number');
            }
            if (data.hasOwnProperty('pointsPerOpportunity')) {
                obj['pointsPerOpportunity'] = ApiClient.convertToType(data['pointsPerOpportunity'], 'Number');
            }
            if (data.hasOwnProperty('rushingEpa')) {
                obj['rushingEpa'] = ApiClient.convertToType(data['rushingEpa'], 'Number');
            }
            if (data.hasOwnProperty('scoringOpportunities')) {
                obj['scoringOpportunities'] = ApiClient.convertToType(data['scoringOpportunities'], 'Number');
            }
            if (data.hasOwnProperty('secondLevelYards')) {
                obj['secondLevelYards'] = ApiClient.convertToType(data['secondLevelYards'], 'Number');
            }
            if (data.hasOwnProperty('secondLevelYardsPerRush')) {
                obj['secondLevelYardsPerRush'] = ApiClient.convertToType(data['secondLevelYardsPerRush'], 'Number');
            }
            if (data.hasOwnProperty('standardDownSuccessRate')) {
                obj['standardDownSuccessRate'] = ApiClient.convertToType(data['standardDownSuccessRate'], 'Number');
            }
            if (data.hasOwnProperty('successRate')) {
                obj['successRate'] = ApiClient.convertToType(data['successRate'], 'Number');
            }
            if (data.hasOwnProperty('team')) {
                obj['team'] = ApiClient.convertToType(data['team'], 'String');
            }
            if (data.hasOwnProperty('teamId')) {
                obj['teamId'] = ApiClient.convertToType(data['teamId'], 'Number');
            }
            if (data.hasOwnProperty('totalEpa')) {
                obj['totalEpa'] = ApiClient.convertToType(data['totalEpa'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LivePlayByPlayTeamsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LivePlayByPlayTeamsInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['homeAway'] && !(typeof data['homeAway'] === 'string' || data['homeAway'] instanceof String)) {
            throw new Error("Expected the field `homeAway` to be a primitive type in the JSON string but got " + data['homeAway']);
        }
        // ensure the json data is a string
        if (data['team'] && !(typeof data['team'] === 'string' || data['team'] instanceof String)) {
            throw new Error("Expected the field `team` to be a primitive type in the JSON string but got " + data['team']);
        }

        return true;
    }


}



/**
 * @member {Number} drives
 */
LivePlayByPlayTeamsInner.prototype['drives'] = undefined;

/**
 * @member {Number} epaPerPass
 */
LivePlayByPlayTeamsInner.prototype['epaPerPass'] = undefined;

/**
 * @member {Number} epaPerPlay
 */
LivePlayByPlayTeamsInner.prototype['epaPerPlay'] = undefined;

/**
 * @member {Number} epaPerRush
 */
LivePlayByPlayTeamsInner.prototype['epaPerRush'] = undefined;

/**
 * @member {Number} explosiveness
 */
LivePlayByPlayTeamsInner.prototype['explosiveness'] = undefined;

/**
 * @member {String} homeAway
 */
LivePlayByPlayTeamsInner.prototype['homeAway'] = undefined;

/**
 * @member {Number} lineYards
 */
LivePlayByPlayTeamsInner.prototype['lineYards'] = undefined;

/**
 * @member {Number} lineYardsPerRush
 */
LivePlayByPlayTeamsInner.prototype['lineYardsPerRush'] = undefined;

/**
 * @member {Number} openFieldYards
 */
LivePlayByPlayTeamsInner.prototype['openFieldYards'] = undefined;

/**
 * @member {Number} openFieldYardsPerRush
 */
LivePlayByPlayTeamsInner.prototype['openFieldYardsPerRush'] = undefined;

/**
 * @member {Number} passingDownSuccessRate
 */
LivePlayByPlayTeamsInner.prototype['passingDownSuccessRate'] = undefined;

/**
 * @member {Number} passingEpa
 */
LivePlayByPlayTeamsInner.prototype['passingEpa'] = undefined;

/**
 * @member {Number} plays
 */
LivePlayByPlayTeamsInner.prototype['plays'] = undefined;

/**
 * @member {Number} points
 */
LivePlayByPlayTeamsInner.prototype['points'] = undefined;

/**
 * @member {Number} pointsPerOpportunity
 */
LivePlayByPlayTeamsInner.prototype['pointsPerOpportunity'] = undefined;

/**
 * @member {Number} rushingEpa
 */
LivePlayByPlayTeamsInner.prototype['rushingEpa'] = undefined;

/**
 * @member {Number} scoringOpportunities
 */
LivePlayByPlayTeamsInner.prototype['scoringOpportunities'] = undefined;

/**
 * @member {Number} secondLevelYards
 */
LivePlayByPlayTeamsInner.prototype['secondLevelYards'] = undefined;

/**
 * @member {Number} secondLevelYardsPerRush
 */
LivePlayByPlayTeamsInner.prototype['secondLevelYardsPerRush'] = undefined;

/**
 * @member {Number} standardDownSuccessRate
 */
LivePlayByPlayTeamsInner.prototype['standardDownSuccessRate'] = undefined;

/**
 * @member {Number} successRate
 */
LivePlayByPlayTeamsInner.prototype['successRate'] = undefined;

/**
 * @member {String} team
 */
LivePlayByPlayTeamsInner.prototype['team'] = undefined;

/**
 * @member {Number} teamId
 */
LivePlayByPlayTeamsInner.prototype['teamId'] = undefined;

/**
 * @member {Number} totalEpa
 */
LivePlayByPlayTeamsInner.prototype['totalEpa'] = undefined;






export default LivePlayByPlayTeamsInner;

