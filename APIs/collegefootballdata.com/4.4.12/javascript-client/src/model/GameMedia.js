/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GameMedia model module.
 * @module model/GameMedia
 * @version 4.4.12
 */
class GameMedia {
    /**
     * Constructs a new <code>GameMedia</code>.
     * @alias module:model/GameMedia
     */
    constructor() { 
        
        GameMedia.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GameMedia</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GameMedia} obj Optional instance to populate.
     * @return {module:model/GameMedia} The populated <code>GameMedia</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GameMedia();

            if (data.hasOwnProperty('awayConference')) {
                obj['awayConference'] = ApiClient.convertToType(data['awayConference'], 'String');
            }
            if (data.hasOwnProperty('awayTeam')) {
                obj['awayTeam'] = ApiClient.convertToType(data['awayTeam'], 'String');
            }
            if (data.hasOwnProperty('homeConference')) {
                obj['homeConference'] = ApiClient.convertToType(data['homeConference'], 'String');
            }
            if (data.hasOwnProperty('homeTeam')) {
                obj['homeTeam'] = ApiClient.convertToType(data['homeTeam'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('isStartTimeTBD')) {
                obj['isStartTimeTBD'] = ApiClient.convertToType(data['isStartTimeTBD'], 'Boolean');
            }
            if (data.hasOwnProperty('mediaType')) {
                obj['mediaType'] = ApiClient.convertToType(data['mediaType'], 'String');
            }
            if (data.hasOwnProperty('outlet')) {
                obj['outlet'] = ApiClient.convertToType(data['outlet'], 'String');
            }
            if (data.hasOwnProperty('season')) {
                obj['season'] = ApiClient.convertToType(data['season'], 'Number');
            }
            if (data.hasOwnProperty('seasonType')) {
                obj['seasonType'] = ApiClient.convertToType(data['seasonType'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('week')) {
                obj['week'] = ApiClient.convertToType(data['week'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GameMedia</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GameMedia</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['awayConference'] && !(typeof data['awayConference'] === 'string' || data['awayConference'] instanceof String)) {
            throw new Error("Expected the field `awayConference` to be a primitive type in the JSON string but got " + data['awayConference']);
        }
        // ensure the json data is a string
        if (data['awayTeam'] && !(typeof data['awayTeam'] === 'string' || data['awayTeam'] instanceof String)) {
            throw new Error("Expected the field `awayTeam` to be a primitive type in the JSON string but got " + data['awayTeam']);
        }
        // ensure the json data is a string
        if (data['homeConference'] && !(typeof data['homeConference'] === 'string' || data['homeConference'] instanceof String)) {
            throw new Error("Expected the field `homeConference` to be a primitive type in the JSON string but got " + data['homeConference']);
        }
        // ensure the json data is a string
        if (data['homeTeam'] && !(typeof data['homeTeam'] === 'string' || data['homeTeam'] instanceof String)) {
            throw new Error("Expected the field `homeTeam` to be a primitive type in the JSON string but got " + data['homeTeam']);
        }
        // ensure the json data is a string
        if (data['mediaType'] && !(typeof data['mediaType'] === 'string' || data['mediaType'] instanceof String)) {
            throw new Error("Expected the field `mediaType` to be a primitive type in the JSON string but got " + data['mediaType']);
        }
        // ensure the json data is a string
        if (data['outlet'] && !(typeof data['outlet'] === 'string' || data['outlet'] instanceof String)) {
            throw new Error("Expected the field `outlet` to be a primitive type in the JSON string but got " + data['outlet']);
        }
        // ensure the json data is a string
        if (data['seasonType'] && !(typeof data['seasonType'] === 'string' || data['seasonType'] instanceof String)) {
            throw new Error("Expected the field `seasonType` to be a primitive type in the JSON string but got " + data['seasonType']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }

        return true;
    }


}



/**
 * @member {String} awayConference
 */
GameMedia.prototype['awayConference'] = undefined;

/**
 * @member {String} awayTeam
 */
GameMedia.prototype['awayTeam'] = undefined;

/**
 * @member {String} homeConference
 */
GameMedia.prototype['homeConference'] = undefined;

/**
 * @member {String} homeTeam
 */
GameMedia.prototype['homeTeam'] = undefined;

/**
 * @member {Number} id
 */
GameMedia.prototype['id'] = undefined;

/**
 * @member {Boolean} isStartTimeTBD
 */
GameMedia.prototype['isStartTimeTBD'] = undefined;

/**
 * @member {String} mediaType
 */
GameMedia.prototype['mediaType'] = undefined;

/**
 * @member {String} outlet
 */
GameMedia.prototype['outlet'] = undefined;

/**
 * @member {Number} season
 */
GameMedia.prototype['season'] = undefined;

/**
 * @member {String} seasonType
 */
GameMedia.prototype['seasonType'] = undefined;

/**
 * @member {String} startTime
 */
GameMedia.prototype['startTime'] = undefined;

/**
 * @member {Number} week
 */
GameMedia.prototype['week'] = undefined;






export default GameMedia;

