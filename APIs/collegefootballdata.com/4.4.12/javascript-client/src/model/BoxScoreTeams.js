/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BoxScoreTeamsCumulativePpaInner from './BoxScoreTeamsCumulativePpaInner';
import BoxScoreTeamsExplosivenessInner from './BoxScoreTeamsExplosivenessInner';
import BoxScoreTeamsFieldPositionInner from './BoxScoreTeamsFieldPositionInner';
import BoxScoreTeamsHavocInner from './BoxScoreTeamsHavocInner';
import BoxScoreTeamsRushingInner from './BoxScoreTeamsRushingInner';
import BoxScoreTeamsScoringOpportunitiesInner from './BoxScoreTeamsScoringOpportunitiesInner';
import BoxScoreTeamsSuccessRatesInner from './BoxScoreTeamsSuccessRatesInner';

/**
 * The BoxScoreTeams model module.
 * @module model/BoxScoreTeams
 * @version 4.4.12
 */
class BoxScoreTeams {
    /**
     * Constructs a new <code>BoxScoreTeams</code>.
     * @alias module:model/BoxScoreTeams
     */
    constructor() { 
        
        BoxScoreTeams.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BoxScoreTeams</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BoxScoreTeams} obj Optional instance to populate.
     * @return {module:model/BoxScoreTeams} The populated <code>BoxScoreTeams</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BoxScoreTeams();

            if (data.hasOwnProperty('cumulativePpa')) {
                obj['cumulativePpa'] = ApiClient.convertToType(data['cumulativePpa'], [BoxScoreTeamsCumulativePpaInner]);
            }
            if (data.hasOwnProperty('explosiveness')) {
                obj['explosiveness'] = ApiClient.convertToType(data['explosiveness'], [BoxScoreTeamsExplosivenessInner]);
            }
            if (data.hasOwnProperty('fieldPosition')) {
                obj['fieldPosition'] = ApiClient.convertToType(data['fieldPosition'], [BoxScoreTeamsFieldPositionInner]);
            }
            if (data.hasOwnProperty('havoc')) {
                obj['havoc'] = ApiClient.convertToType(data['havoc'], [BoxScoreTeamsHavocInner]);
            }
            if (data.hasOwnProperty('ppa')) {
                obj['ppa'] = ApiClient.convertToType(data['ppa'], [BoxScoreTeamsCumulativePpaInner]);
            }
            if (data.hasOwnProperty('rushing')) {
                obj['rushing'] = ApiClient.convertToType(data['rushing'], [BoxScoreTeamsRushingInner]);
            }
            if (data.hasOwnProperty('scoringOpportunities')) {
                obj['scoringOpportunities'] = ApiClient.convertToType(data['scoringOpportunities'], [BoxScoreTeamsScoringOpportunitiesInner]);
            }
            if (data.hasOwnProperty('successRates')) {
                obj['successRates'] = ApiClient.convertToType(data['successRates'], [BoxScoreTeamsSuccessRatesInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BoxScoreTeams</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BoxScoreTeams</code>.
     */
    static validateJSON(data) {
        if (data['cumulativePpa']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cumulativePpa'])) {
                throw new Error("Expected the field `cumulativePpa` to be an array in the JSON data but got " + data['cumulativePpa']);
            }
            // validate the optional field `cumulativePpa` (array)
            for (const item of data['cumulativePpa']) {
                BoxScoreTeamsCumulativePpaInner.validateJSON(item);
            };
        }
        if (data['explosiveness']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['explosiveness'])) {
                throw new Error("Expected the field `explosiveness` to be an array in the JSON data but got " + data['explosiveness']);
            }
            // validate the optional field `explosiveness` (array)
            for (const item of data['explosiveness']) {
                BoxScoreTeamsExplosivenessInner.validateJSON(item);
            };
        }
        if (data['fieldPosition']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fieldPosition'])) {
                throw new Error("Expected the field `fieldPosition` to be an array in the JSON data but got " + data['fieldPosition']);
            }
            // validate the optional field `fieldPosition` (array)
            for (const item of data['fieldPosition']) {
                BoxScoreTeamsFieldPositionInner.validateJSON(item);
            };
        }
        if (data['havoc']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['havoc'])) {
                throw new Error("Expected the field `havoc` to be an array in the JSON data but got " + data['havoc']);
            }
            // validate the optional field `havoc` (array)
            for (const item of data['havoc']) {
                BoxScoreTeamsHavocInner.validateJSON(item);
            };
        }
        if (data['ppa']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ppa'])) {
                throw new Error("Expected the field `ppa` to be an array in the JSON data but got " + data['ppa']);
            }
            // validate the optional field `ppa` (array)
            for (const item of data['ppa']) {
                BoxScoreTeamsCumulativePpaInner.validateJSON(item);
            };
        }
        if (data['rushing']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rushing'])) {
                throw new Error("Expected the field `rushing` to be an array in the JSON data but got " + data['rushing']);
            }
            // validate the optional field `rushing` (array)
            for (const item of data['rushing']) {
                BoxScoreTeamsRushingInner.validateJSON(item);
            };
        }
        if (data['scoringOpportunities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['scoringOpportunities'])) {
                throw new Error("Expected the field `scoringOpportunities` to be an array in the JSON data but got " + data['scoringOpportunities']);
            }
            // validate the optional field `scoringOpportunities` (array)
            for (const item of data['scoringOpportunities']) {
                BoxScoreTeamsScoringOpportunitiesInner.validateJSON(item);
            };
        }
        if (data['successRates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['successRates'])) {
                throw new Error("Expected the field `successRates` to be an array in the JSON data but got " + data['successRates']);
            }
            // validate the optional field `successRates` (array)
            for (const item of data['successRates']) {
                BoxScoreTeamsSuccessRatesInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/BoxScoreTeamsCumulativePpaInner>} cumulativePpa
 */
BoxScoreTeams.prototype['cumulativePpa'] = undefined;

/**
 * @member {Array.<module:model/BoxScoreTeamsExplosivenessInner>} explosiveness
 */
BoxScoreTeams.prototype['explosiveness'] = undefined;

/**
 * @member {Array.<module:model/BoxScoreTeamsFieldPositionInner>} fieldPosition
 */
BoxScoreTeams.prototype['fieldPosition'] = undefined;

/**
 * @member {Array.<module:model/BoxScoreTeamsHavocInner>} havoc
 */
BoxScoreTeams.prototype['havoc'] = undefined;

/**
 * @member {Array.<module:model/BoxScoreTeamsCumulativePpaInner>} ppa
 */
BoxScoreTeams.prototype['ppa'] = undefined;

/**
 * @member {Array.<module:model/BoxScoreTeamsRushingInner>} rushing
 */
BoxScoreTeams.prototype['rushing'] = undefined;

/**
 * @member {Array.<module:model/BoxScoreTeamsScoringOpportunitiesInner>} scoringOpportunities
 */
BoxScoreTeams.prototype['scoringOpportunities'] = undefined;

/**
 * @member {Array.<module:model/BoxScoreTeamsSuccessRatesInner>} successRates
 */
BoxScoreTeams.prototype['successRates'] = undefined;






export default BoxScoreTeams;

