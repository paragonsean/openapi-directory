/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PlayerSearchResult model module.
 * @module model/PlayerSearchResult
 * @version 4.4.12
 */
class PlayerSearchResult {
    /**
     * Constructs a new <code>PlayerSearchResult</code>.
     * @alias module:model/PlayerSearchResult
     */
    constructor() { 
        
        PlayerSearchResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlayerSearchResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlayerSearchResult} obj Optional instance to populate.
     * @return {module:model/PlayerSearchResult} The populated <code>PlayerSearchResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlayerSearchResult();

            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('hometown')) {
                obj['hometown'] = ApiClient.convertToType(data['hometown'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('jersey')) {
                obj['jersey'] = ApiClient.convertToType(data['jersey'], 'Number');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'String');
            }
            if (data.hasOwnProperty('team')) {
                obj['team'] = ApiClient.convertToType(data['team'], 'String');
            }
            if (data.hasOwnProperty('teamColor')) {
                obj['teamColor'] = ApiClient.convertToType(data['teamColor'], 'String');
            }
            if (data.hasOwnProperty('teamColorSecondary')) {
                obj['teamColorSecondary'] = ApiClient.convertToType(data['teamColorSecondary'], 'String');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlayerSearchResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlayerSearchResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['hometown'] && !(typeof data['hometown'] === 'string' || data['hometown'] instanceof String)) {
            throw new Error("Expected the field `hometown` to be a primitive type in the JSON string but got " + data['hometown']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['position'] && !(typeof data['position'] === 'string' || data['position'] instanceof String)) {
            throw new Error("Expected the field `position` to be a primitive type in the JSON string but got " + data['position']);
        }
        // ensure the json data is a string
        if (data['team'] && !(typeof data['team'] === 'string' || data['team'] instanceof String)) {
            throw new Error("Expected the field `team` to be a primitive type in the JSON string but got " + data['team']);
        }
        // ensure the json data is a string
        if (data['teamColor'] && !(typeof data['teamColor'] === 'string' || data['teamColor'] instanceof String)) {
            throw new Error("Expected the field `teamColor` to be a primitive type in the JSON string but got " + data['teamColor']);
        }
        // ensure the json data is a string
        if (data['teamColorSecondary'] && !(typeof data['teamColorSecondary'] === 'string' || data['teamColorSecondary'] instanceof String)) {
            throw new Error("Expected the field `teamColorSecondary` to be a primitive type in the JSON string but got " + data['teamColorSecondary']);
        }

        return true;
    }


}



/**
 * @member {String} firstName
 */
PlayerSearchResult.prototype['firstName'] = undefined;

/**
 * @member {Number} height
 */
PlayerSearchResult.prototype['height'] = undefined;

/**
 * @member {String} hometown
 */
PlayerSearchResult.prototype['hometown'] = undefined;

/**
 * @member {Number} id
 */
PlayerSearchResult.prototype['id'] = undefined;

/**
 * @member {Number} jersey
 */
PlayerSearchResult.prototype['jersey'] = undefined;

/**
 * @member {String} lastName
 */
PlayerSearchResult.prototype['lastName'] = undefined;

/**
 * @member {String} name
 */
PlayerSearchResult.prototype['name'] = undefined;

/**
 * @member {String} position
 */
PlayerSearchResult.prototype['position'] = undefined;

/**
 * @member {String} team
 */
PlayerSearchResult.prototype['team'] = undefined;

/**
 * @member {String} teamColor
 */
PlayerSearchResult.prototype['teamColor'] = undefined;

/**
 * @member {String} teamColorSecondary
 */
PlayerSearchResult.prototype['teamColorSecondary'] = undefined;

/**
 * @member {Number} weight
 */
PlayerSearchResult.prototype['weight'] = undefined;






export default PlayerSearchResult;

