/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BoxScore from '../model/BoxScore';
import Game from '../model/Game';
import GameMedia from '../model/GameMedia';
import GameWeather from '../model/GameWeather';
import PlayerGame from '../model/PlayerGame';
import ScoreboardGame from '../model/ScoreboardGame';
import TeamGame from '../model/TeamGame';
import TeamRecord from '../model/TeamRecord';
import Week from '../model/Week';

/**
* Games service.
* @module api/GamesApi
* @version 4.4.12
*/
export default class GamesApi {

    /**
    * Constructs a new GamesApi. 
    * @alias module:api/GamesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAdvancedBoxScore operation.
     * @callback module:api/GamesApi~getAdvancedBoxScoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BoxScore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Advanced box scores
     * Get advanced box score data
     * @param {Number} gameId Game id parameters
     * @param {module:api/GamesApi~getAdvancedBoxScoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BoxScore}
     */
    getAdvancedBoxScore(gameId, callback) {
      let postBody = null;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling getAdvancedBoxScore");
      }

      let pathParams = {
      };
      let queryParams = {
        'gameId': gameId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BoxScore;
      return this.apiClient.callApi(
        '/game/box/advanced', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCalendar operation.
     * @callback module:api/GamesApi~getCalendarCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Week>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Season calendar
     * Get calendar of weeks by season
     * @param {Number} year Year filter
     * @param {module:api/GamesApi~getCalendarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Week>}
     */
    getCalendar(year, callback) {
      let postBody = null;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getCalendar");
      }

      let pathParams = {
      };
      let queryParams = {
        'year': year
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Week];
      return this.apiClient.callApi(
        '/calendar', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGameMedia operation.
     * @callback module:api/GamesApi~getGameMediaCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GameMedia>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Game media information and schedules
     * Game media information (TV, radio, etc)
     * @param {Number} year Year filter
     * @param {Object} opts Optional parameters
     * @param {Number} [week] Week filter
     * @param {String} [seasonType] Season type filter (regular, postseason, or both)
     * @param {String} [team] Team filter
     * @param {String} [conference] Conference filter
     * @param {String} [mediaType] Media type filter (tv, radio, web, ppv, or mobile)
     * @param {String} [classification] Division classification filter (fbs/fcs/ii/iii)
     * @param {module:api/GamesApi~getGameMediaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GameMedia>}
     */
    getGameMedia(year, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getGameMedia");
      }

      let pathParams = {
      };
      let queryParams = {
        'year': year,
        'week': opts['week'],
        'seasonType': opts['seasonType'],
        'team': opts['team'],
        'conference': opts['conference'],
        'mediaType': opts['mediaType'],
        'classification': opts['classification']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GameMedia];
      return this.apiClient.callApi(
        '/games/media', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGameWeather operation.
     * @callback module:api/GamesApi~getGameWeatherCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GameWeather>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Game weather information (Patreon only)
     * Weather information for the hour of kickoff
     * @param {Object} opts Optional parameters
     * @param {Number} [gameId] Game id filter (required if no year)
     * @param {Number} [year] Year filter (required if no game id)
     * @param {Number} [week] Week filter
     * @param {String} [seasonType] Season type filter (regular, postseason, or both)
     * @param {String} [team] Team filter
     * @param {String} [conference] Conference filter
     * @param {String} [classification] Division classification filter (fbs/fcs/ii/iii)
     * @param {module:api/GamesApi~getGameWeatherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GameWeather>}
     */
    getGameWeather(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'gameId': opts['gameId'],
        'year': opts['year'],
        'week': opts['week'],
        'seasonType': opts['seasonType'],
        'team': opts['team'],
        'conference': opts['conference'],
        'classification': opts['classification']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GameWeather];
      return this.apiClient.callApi(
        '/games/weather', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGames operation.
     * @callback module:api/GamesApi~getGamesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Game>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Games and results
     * Get game results
     * @param {Number} year Year/season filter for games
     * @param {Object} opts Optional parameters
     * @param {Number} [week] Week filter
     * @param {String} [seasonType = 'regular')] Season type filter (regular or postseason)
     * @param {String} [team] Team
     * @param {String} [home] Home team filter
     * @param {String} [away] Away team filter
     * @param {String} [conference] Conference abbreviation filter
     * @param {String} [division] Division classification filter (fbs/fcs/ii/iii)
     * @param {Number} [id] id filter for querying a single game
     * @param {module:api/GamesApi~getGamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Game>}
     */
    getGames(year, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getGames");
      }

      let pathParams = {
      };
      let queryParams = {
        'year': year,
        'week': opts['week'],
        'seasonType': opts['seasonType'],
        'team': opts['team'],
        'home': opts['home'],
        'away': opts['away'],
        'conference': opts['conference'],
        'division': opts['division'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Game];
      return this.apiClient.callApi(
        '/games', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlayerGameStats operation.
     * @callback module:api/GamesApi~getPlayerGameStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerGame>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player game stats
     * Player stats broken down by game
     * @param {Number} year Year/season filter for games
     * @param {Object} opts Optional parameters
     * @param {Number} [week] Week filter
     * @param {String} [seasonType = 'regular')] Season type filter (regular or postseason)
     * @param {String} [team] Team filter
     * @param {String} [conference] Conference abbreviation filter
     * @param {String} [category] Category filter (e.g defensive)
     * @param {Number} [gameId] Game id filter
     * @param {module:api/GamesApi~getPlayerGameStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerGame>}
     */
    getPlayerGameStats(year, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getPlayerGameStats");
      }

      let pathParams = {
      };
      let queryParams = {
        'year': year,
        'week': opts['week'],
        'seasonType': opts['seasonType'],
        'team': opts['team'],
        'conference': opts['conference'],
        'category': opts['category'],
        'gameId': opts['gameId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerGame];
      return this.apiClient.callApi(
        '/games/players', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScoreboard operation.
     * @callback module:api/GamesApi~getScoreboardCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScoreboardGame>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Live game results (Patreon only)
     * Get live game results
     * @param {Object} opts Optional parameters
     * @param {String} [classification] Classification filter (fbs, fcs, ii, or iii). Defaults to fbs.
     * @param {String} [conference] Conference abbreviation filter.
     * @param {module:api/GamesApi~getScoreboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScoreboardGame>}
     */
    getScoreboard(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'classification': opts['classification'],
        'conference': opts['conference']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScoreboardGame];
      return this.apiClient.callApi(
        '/scoreboard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamGameStats operation.
     * @callback module:api/GamesApi~getTeamGameStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamGame>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Team game stats
     * Team stats broken down by game
     * @param {Number} year Year/season filter for games
     * @param {Object} opts Optional parameters
     * @param {Number} [week] Week filter
     * @param {String} [seasonType = 'regular')] Season type filter (regular or postseason)
     * @param {String} [team] Team filter
     * @param {String} [conference] Conference abbreviation filter
     * @param {Number} [gameId] Game id filter
     * @param {String} [classification] Division classification filter (fbs/fcs/ii/iii)
     * @param {module:api/GamesApi~getTeamGameStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamGame>}
     */
    getTeamGameStats(year, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getTeamGameStats");
      }

      let pathParams = {
      };
      let queryParams = {
        'year': year,
        'week': opts['week'],
        'seasonType': opts['seasonType'],
        'team': opts['team'],
        'conference': opts['conference'],
        'gameId': opts['gameId'],
        'classification': opts['classification']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamGame];
      return this.apiClient.callApi(
        '/games/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamRecords operation.
     * @callback module:api/GamesApi~getTeamRecordsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamRecord>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Team records
     * Get team records by year
     * @param {Object} opts Optional parameters
     * @param {Number} [year] Year filter
     * @param {String} [team] Team filter
     * @param {String} [conference] Conference filter
     * @param {module:api/GamesApi~getTeamRecordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamRecord>}
     */
    getTeamRecords(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'year': opts['year'],
        'team': opts['team'],
        'conference': opts['conference']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamRecord];
      return this.apiClient.callApi(
        '/records', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
