/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdvancedGameStat from '../model/AdvancedGameStat';
import AdvancedSeasonStat from '../model/AdvancedSeasonStat';
import TeamSeasonStat from '../model/TeamSeasonStat';

/**
* Stats service.
* @module api/StatsApi
* @version 4.4.12
*/
export default class StatsApi {

    /**
    * Constructs a new StatsApi. 
    * @alias module:api/StatsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAdvancedTeamGameStats operation.
     * @callback module:api/StatsApi~getAdvancedTeamGameStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AdvancedGameStat>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Advanced team metrics by game
     * Advanced team game stats
     * @param {Object} opts Optional parameters
     * @param {Number} [year] Year filter (required if no team specified)
     * @param {Number} [week] Week filter
     * @param {String} [team] Team filter (required if no year specified)
     * @param {String} [opponent] Opponent filter
     * @param {Boolean} [excludeGarbageTime] Filter to remove garbage time plays from calculations
     * @param {String} [seasonType] Season type filter (regular, postseason, or both)
     * @param {module:api/StatsApi~getAdvancedTeamGameStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AdvancedGameStat>}
     */
    getAdvancedTeamGameStats(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'year': opts['year'],
        'week': opts['week'],
        'team': opts['team'],
        'opponent': opts['opponent'],
        'excludeGarbageTime': opts['excludeGarbageTime'],
        'seasonType': opts['seasonType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AdvancedGameStat];
      return this.apiClient.callApi(
        '/stats/game/advanced', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAdvancedTeamSeasonStats operation.
     * @callback module:api/StatsApi~getAdvancedTeamSeasonStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AdvancedSeasonStat>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Advanced team metrics by season
     * Advanced team season stats
     * @param {Object} opts Optional parameters
     * @param {Number} [year] Year filter (required if no team specified)
     * @param {String} [team] Team filter (required if no year specified)
     * @param {Boolean} [excludeGarbageTime] Filter to remove garbage time plays from calculations
     * @param {Number} [startWeek] Starting week filter
     * @param {Number} [endWeek] Starting week filter
     * @param {module:api/StatsApi~getAdvancedTeamSeasonStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AdvancedSeasonStat>}
     */
    getAdvancedTeamSeasonStats(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'year': opts['year'],
        'team': opts['team'],
        'excludeGarbageTime': opts['excludeGarbageTime'],
        'startWeek': opts['startWeek'],
        'endWeek': opts['endWeek']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AdvancedSeasonStat];
      return this.apiClient.callApi(
        '/stats/season/advanced', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStatCategories operation.
     * @callback module:api/StatsApi~getStatCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Team stat categories
     * Stat category list
     * @param {module:api/StatsApi~getStatCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getStatCategories(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/stats/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamSeasonStats operation.
     * @callback module:api/StatsApi~getTeamSeasonStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamSeasonStat>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Team statistics by season
     * Team season stats
     * @param {Object} opts Optional parameters
     * @param {Number} [year] Year filter (required if no team specified)
     * @param {String} [team] Team filter (required if no year specified)
     * @param {String} [conference] Conference abbreviation filter
     * @param {Number} [startWeek] Starting week filter
     * @param {Number} [endWeek] Starting week filter
     * @param {module:api/StatsApi~getTeamSeasonStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamSeasonStat>}
     */
    getTeamSeasonStats(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'year': opts['year'],
        'team': opts['team'],
        'conference': opts['conference'],
        'startWeek': opts['startWeek'],
        'endWeek': opts['endWeek']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamSeasonStat];
      return this.apiClient.callApi(
        '/stats/season', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
