/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Player from '../model/Player';
import Team from '../model/Team';
import TeamMatchup from '../model/TeamMatchup';
import TeamTalent from '../model/TeamTalent';

/**
* Teams service.
* @module api/TeamsApi
* @version 4.4.12
*/
export default class TeamsApi {

    /**
    * Constructs a new TeamsApi. 
    * @alias module:api/TeamsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getFbsTeams operation.
     * @callback module:api/TeamsApi~getFbsTeamsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * FBS team list
     * Information on major division teams
     * @param {Object} opts Optional parameters
     * @param {Number} [year] Year filter
     * @param {module:api/TeamsApi~getFbsTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    getFbsTeams(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'year': opts['year']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/teams/fbs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRoster operation.
     * @callback module:api/TeamsApi~getRosterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Player>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Team rosters
     * Roster data
     * @param {Object} opts Optional parameters
     * @param {String} [team] Team name
     * @param {Number} [year] Season year
     * @param {module:api/TeamsApi~getRosterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Player>}
     */
    getRoster(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'team': opts['team'],
        'year': opts['year']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Player];
      return this.apiClient.callApi(
        '/roster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTalent operation.
     * @callback module:api/TeamsApi~getTalentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamTalent>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Team talent composite rankings
     * Team talent composite
     * @param {Object} opts Optional parameters
     * @param {Number} [year] Year filter
     * @param {module:api/TeamsApi~getTalentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamTalent>}
     */
    getTalent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'year': opts['year']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamTalent];
      return this.apiClient.callApi(
        '/talent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamMatchup operation.
     * @callback module:api/TeamsApi~getTeamMatchupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamMatchup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Team matchup history
     * Matchup history
     * @param {String} team1 First team
     * @param {String} team2 Second team
     * @param {Object} opts Optional parameters
     * @param {Number} [minYear] Minimum year
     * @param {Number} [maxYear] Maximum year
     * @param {module:api/TeamsApi~getTeamMatchupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamMatchup}
     */
    getTeamMatchup(team1, team2, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'team1' is set
      if (team1 === undefined || team1 === null) {
        throw new Error("Missing the required parameter 'team1' when calling getTeamMatchup");
      }
      // verify the required parameter 'team2' is set
      if (team2 === undefined || team2 === null) {
        throw new Error("Missing the required parameter 'team2' when calling getTeamMatchup");
      }

      let pathParams = {
      };
      let queryParams = {
        'team1': team1,
        'team2': team2,
        'minYear': opts['minYear'],
        'maxYear': opts['maxYear']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamMatchup;
      return this.apiClient.callApi(
        '/teams/matchup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeams operation.
     * @callback module:api/TeamsApi~getTeamsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Team information
     * Get team information
     * @param {Object} opts Optional parameters
     * @param {String} [conference] Conference abbreviation filter
     * @param {module:api/TeamsApi~getTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    getTeams(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'conference': opts['conference']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
