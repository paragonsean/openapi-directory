/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PlayerSearchResult from '../model/PlayerSearchResult';
import PlayerSeasonStat from '../model/PlayerSeasonStat';
import PlayerUsage from '../model/PlayerUsage';
import PortalPlayer from '../model/PortalPlayer';
import ReturningProduction from '../model/ReturningProduction';

/**
* Players service.
* @module api/PlayersApi
* @version 4.4.12
*/
export default class PlayersApi {

    /**
    * Constructs a new PlayersApi. 
    * @alias module:api/PlayersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getPlayerSeasonStats operation.
     * @callback module:api/PlayersApi~getPlayerSeasonStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerSeasonStat>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player stats by season
     * Season player stats
     * @param {Number} year Year filter
     * @param {Object} opts Optional parameters
     * @param {String} [team] Team filter
     * @param {String} [conference] Conference abbreviation filter
     * @param {Number} [startWeek] Start week filter
     * @param {Number} [endWeek] Start week filter
     * @param {String} [seasonType] Season type filter (regular, postseason, or both)
     * @param {String} [category] Stat category filter (e.g. passing)
     * @param {module:api/PlayersApi~getPlayerSeasonStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerSeasonStat>}
     */
    getPlayerSeasonStats(year, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getPlayerSeasonStats");
      }

      let pathParams = {
      };
      let queryParams = {
        'year': year,
        'team': opts['team'],
        'conference': opts['conference'],
        'startWeek': opts['startWeek'],
        'endWeek': opts['endWeek'],
        'seasonType': opts['seasonType'],
        'category': opts['category']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerSeasonStat];
      return this.apiClient.callApi(
        '/stats/player/season', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlayerUsage operation.
     * @callback module:api/PlayersApi~getPlayerUsageCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerUsage>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player usage metrics broken down by season
     * Player usage metrics by season
     * @param {Number} year Year filter
     * @param {Object} opts Optional parameters
     * @param {String} [team] Team filter
     * @param {String} [conference] Conference abbreviation filter
     * @param {String} [position] Position abbreviation filter
     * @param {Number} [playerId] Player id filter
     * @param {Boolean} [excludeGarbageTime] Filter to remove garbage time plays from calculations
     * @param {module:api/PlayersApi~getPlayerUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerUsage>}
     */
    getPlayerUsage(year, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getPlayerUsage");
      }

      let pathParams = {
      };
      let queryParams = {
        'year': year,
        'team': opts['team'],
        'conference': opts['conference'],
        'position': opts['position'],
        'playerId': opts['playerId'],
        'excludeGarbageTime': opts['excludeGarbageTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerUsage];
      return this.apiClient.callApi(
        '/player/usage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReturningProduction operation.
     * @callback module:api/PlayersApi~getReturningProductionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReturningProduction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Team returning production metrics
     * Returning production metrics
     * @param {Object} opts Optional parameters
     * @param {Number} [year] Year filter
     * @param {String} [team] Team filter
     * @param {String} [conference] Conference abbreviation filter
     * @param {module:api/PlayersApi~getReturningProductionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReturningProduction>}
     */
    getReturningProduction(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'year': opts['year'],
        'team': opts['team'],
        'conference': opts['conference']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ReturningProduction];
      return this.apiClient.callApi(
        '/player/returning', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransferPortal operation.
     * @callback module:api/PlayersApi~getTransferPortalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PortalPlayer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer portal by season
     * Transfer portal by season
     * @param {Number} year Year filter
     * @param {module:api/PlayersApi~getTransferPortalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PortalPlayer>}
     */
    getTransferPortal(year, callback) {
      let postBody = null;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getTransferPortal");
      }

      let pathParams = {
      };
      let queryParams = {
        'year': year
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PortalPlayer];
      return this.apiClient.callApi(
        '/player/portal', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerSearch operation.
     * @callback module:api/PlayersApi~playerSearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerSearchResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for player information
     * Search for players
     * @param {String} searchTerm Term to search on
     * @param {Object} opts Optional parameters
     * @param {String} [position] Position abbreviation filter
     * @param {String} [team] Team filter
     * @param {Number} [year] Year filter
     * @param {module:api/PlayersApi~playerSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerSearchResult>}
     */
    playerSearch(searchTerm, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'searchTerm' is set
      if (searchTerm === undefined || searchTerm === null) {
        throw new Error("Missing the required parameter 'searchTerm' when calling playerSearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'searchTerm': searchTerm,
        'position': opts['position'],
        'team': opts['team'],
        'year': opts['year']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerSearchResult];
      return this.apiClient.callApi(
        '/player/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
