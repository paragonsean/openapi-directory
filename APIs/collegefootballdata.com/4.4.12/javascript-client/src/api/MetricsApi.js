/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GamePPA from '../model/GamePPA';
import PlayWP from '../model/PlayWP';
import PlayerGamePPA from '../model/PlayerGamePPA';
import PlayerSeasonPPA from '../model/PlayerSeasonPPA';
import PredictedPoints from '../model/PredictedPoints';
import PregameWP from '../model/PregameWP';
import TeamPPA from '../model/TeamPPA';

/**
* Metrics service.
* @module api/MetricsApi
* @version 4.4.12
*/
export default class MetricsApi {

    /**
    * Constructs a new MetricsApi. 
    * @alias module:api/MetricsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getGamePPA operation.
     * @callback module:api/MetricsApi~getGamePPACallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GamePPA>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Team Predicated Points Added (PPA/EPA) by game
     * Predicted Points Added (PPA) by game
     * @param {Number} year Year filter
     * @param {Object} opts Optional parameters
     * @param {Number} [week] Week filter
     * @param {String} [team] Team filter
     * @param {String} [conference] Conference filter
     * @param {Boolean} [excludeGarbageTime] Filter to remove garbage time plays from calculations
     * @param {String} [seasonType = 'regular')] Season type filter (regular or postseason)
     * @param {module:api/MetricsApi~getGamePPACallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GamePPA>}
     */
    getGamePPA(year, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getGamePPA");
      }

      let pathParams = {
      };
      let queryParams = {
        'year': year,
        'week': opts['week'],
        'team': opts['team'],
        'conference': opts['conference'],
        'excludeGarbageTime': opts['excludeGarbageTime'],
        'seasonType': opts['seasonType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GamePPA];
      return this.apiClient.callApi(
        '/ppa/games', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlayerGamePPA operation.
     * @callback module:api/MetricsApi~getPlayerGamePPACallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerGamePPA>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Predicated Points Added (PPA/EPA) broken down by game
     * Predicted Points Added (PPA) by player game
     * @param {Object} opts Optional parameters
     * @param {Number} [year] Year filter
     * @param {Number} [week] Week filter
     * @param {String} [team] Team filter
     * @param {String} [position] Position abbreviation filter
     * @param {Number} [playerId] Player id filter
     * @param {String} [threshold] Minimum play threshold filter
     * @param {Boolean} [excludeGarbageTime] Filter to remove garbage time plays from calculations
     * @param {String} [seasonType = 'regular')] Season type filter (regular or postseason)
     * @param {module:api/MetricsApi~getPlayerGamePPACallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerGamePPA>}
     */
    getPlayerGamePPA(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'year': opts['year'],
        'week': opts['week'],
        'team': opts['team'],
        'position': opts['position'],
        'playerId': opts['playerId'],
        'threshold': opts['threshold'],
        'excludeGarbageTime': opts['excludeGarbageTime'],
        'seasonType': opts['seasonType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerGamePPA];
      return this.apiClient.callApi(
        '/ppa/players/games', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlayerSeasonPPA operation.
     * @callback module:api/MetricsApi~getPlayerSeasonPPACallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayerSeasonPPA>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Player Predicated Points Added (PPA/EPA) broken down by season
     * Predicted Points Added (PPA) by player season
     * @param {Object} opts Optional parameters
     * @param {Number} [year] Year filter
     * @param {String} [team] Team filter
     * @param {String} [conference] Conference abbreviation filter
     * @param {String} [position] Position abbreviation filter
     * @param {Number} [playerId] Player id filter
     * @param {String} [threshold] Minimum play threshold filter
     * @param {Boolean} [excludeGarbageTime] Filter to remove garbage time plays from calculations
     * @param {module:api/MetricsApi~getPlayerSeasonPPACallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayerSeasonPPA>}
     */
    getPlayerSeasonPPA(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'year': opts['year'],
        'team': opts['team'],
        'conference': opts['conference'],
        'position': opts['position'],
        'playerId': opts['playerId'],
        'threshold': opts['threshold'],
        'excludeGarbageTime': opts['excludeGarbageTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayerSeasonPPA];
      return this.apiClient.callApi(
        '/ppa/players/season', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPredictedPoints operation.
     * @callback module:api/MetricsApi~getPredictedPointsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PredictedPoints>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Predicted Points (i.e. Expected Points or EP)
     * Predicted Points
     * @param {Number} down Down filter
     * @param {Number} distance Distance filter
     * @param {module:api/MetricsApi~getPredictedPointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PredictedPoints>}
     */
    getPredictedPoints(down, distance, callback) {
      let postBody = null;
      // verify the required parameter 'down' is set
      if (down === undefined || down === null) {
        throw new Error("Missing the required parameter 'down' when calling getPredictedPoints");
      }
      // verify the required parameter 'distance' is set
      if (distance === undefined || distance === null) {
        throw new Error("Missing the required parameter 'distance' when calling getPredictedPoints");
      }

      let pathParams = {
      };
      let queryParams = {
        'down': down,
        'distance': distance
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PredictedPoints];
      return this.apiClient.callApi(
        '/ppa/predicted', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPregameWinProbabilities operation.
     * @callback module:api/MetricsApi~getPregameWinProbabilitiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PregameWP>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pregame win probability data
     * Pregame win probabilities
     * @param {Object} opts Optional parameters
     * @param {Number} [year] Year filter
     * @param {Number} [week] Week filter
     * @param {String} [team] Team filter
     * @param {String} [seasonType] regular or postseason
     * @param {module:api/MetricsApi~getPregameWinProbabilitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PregameWP>}
     */
    getPregameWinProbabilities(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'year': opts['year'],
        'week': opts['week'],
        'team': opts['team'],
        'seasonType': opts['seasonType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PregameWP];
      return this.apiClient.callApi(
        '/metrics/wp/pregame', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamPPA operation.
     * @callback module:api/MetricsApi~getTeamPPACallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamPPA>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Predicted Points Added (PPA/EPA) data by team
     * Predicted Points Added (PPA)
     * @param {Object} opts Optional parameters
     * @param {Number} [year] Year filter (required if team not specified)
     * @param {String} [team] Team filter (required if year not specified)
     * @param {String} [conference] Conference filter
     * @param {Boolean} [excludeGarbageTime] Filter to remove garbage time plays from calculations
     * @param {module:api/MetricsApi~getTeamPPACallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamPPA>}
     */
    getTeamPPA(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'year': opts['year'],
        'team': opts['team'],
        'conference': opts['conference'],
        'excludeGarbageTime': opts['excludeGarbageTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamPPA];
      return this.apiClient.callApi(
        '/ppa/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWinProbabilityData operation.
     * @callback module:api/MetricsApi~getWinProbabilityDataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayWP>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Win probability chart data
     * Win probability data
     * @param {Number} gameId Game id filter
     * @param {module:api/MetricsApi~getWinProbabilityDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayWP>}
     */
    getWinProbabilityData(gameId, callback) {
      let postBody = null;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling getWinProbabilityData");
      }

      let pathParams = {
      };
      let queryParams = {
        'gameId': gameId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayWP];
      return this.apiClient.callApi(
        '/metrics/wp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
