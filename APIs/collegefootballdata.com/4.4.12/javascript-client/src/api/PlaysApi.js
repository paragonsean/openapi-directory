/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LivePlayByPlay from '../model/LivePlayByPlay';
import Play from '../model/Play';
import PlayStat from '../model/PlayStat';
import PlayStatType from '../model/PlayStatType';
import PlayType from '../model/PlayType';

/**
* Plays service.
* @module api/PlaysApi
* @version 4.4.12
*/
export default class PlaysApi {

    /**
    * Constructs a new PlaysApi. 
    * @alias module:api/PlaysApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getLivePlays operation.
     * @callback module:api/PlaysApi~getLivePlaysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LivePlayByPlay} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Live metrics and PBP (Patreon only)
     * Get live metrics and PBP
     * @param {Number} id Game id
     * @param {module:api/PlaysApi~getLivePlaysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LivePlayByPlay}
     */
    getLivePlays(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLivePlays");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LivePlayByPlay;
      return this.apiClient.callApi(
        '/live/plays', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlayStatTypes operation.
     * @callback module:api/PlaysApi~getPlayStatTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayStatType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Types of player play stats
     * Type of play stats
     * @param {module:api/PlaysApi~getPlayStatTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayStatType>}
     */
    getPlayStatTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayStatType];
      return this.apiClient.callApi(
        '/play/stat/types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlayStats operation.
     * @callback module:api/PlaysApi~getPlayStatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayStat>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Play stats by play
     * Gets player stats associated by play (limit 1000)
     * @param {Object} opts Optional parameters
     * @param {Number} [year] Year filter
     * @param {Number} [week] Week filter
     * @param {String} [team] Team filter
     * @param {Number} [gameId] gameId filter (from /games endpoint)
     * @param {Number} [athleteId] athleteId filter (from /roster endpoint)
     * @param {Number} [statTypeId] statTypeId filter (from /play/stat/types endpoint)
     * @param {String} [seasonType] regular, postseason, or both
     * @param {String} [conference] conference abbreviation filter
     * @param {module:api/PlaysApi~getPlayStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayStat>}
     */
    getPlayStats(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'year': opts['year'],
        'week': opts['week'],
        'team': opts['team'],
        'gameId': opts['gameId'],
        'athleteId': opts['athleteId'],
        'statTypeId': opts['statTypeId'],
        'seasonType': opts['seasonType'],
        'conference': opts['conference']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayStat];
      return this.apiClient.callApi(
        '/play/stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlayTypes operation.
     * @callback module:api/PlaysApi~getPlayTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlayType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Play types
     * Types of plays
     * @param {module:api/PlaysApi~getPlayTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlayType>}
     */
    getPlayTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlayType];
      return this.apiClient.callApi(
        '/play/types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlays operation.
     * @callback module:api/PlaysApi~getPlaysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Play>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Play by play data
     * Get play data and results
     * @param {Number} year Year filter
     * @param {Number} week Week filter (required if team, offense, or defense, not specified)
     * @param {Object} opts Optional parameters
     * @param {String} [seasonType = 'regular')] Season type filter
     * @param {String} [team] Team filter
     * @param {String} [offense] Offensive team filter
     * @param {String} [defense] Defensive team filter
     * @param {String} [conference] Conference filter
     * @param {String} [offenseConference] Offensive conference filter
     * @param {String} [defenseConference] Defensive conference filter
     * @param {Number} [playType] Play type filter
     * @param {String} [classification] Division classification filter (fbs/fcs/ii/iii)
     * @param {module:api/PlaysApi~getPlaysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Play>}
     */
    getPlays(year, week, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getPlays");
      }
      // verify the required parameter 'week' is set
      if (week === undefined || week === null) {
        throw new Error("Missing the required parameter 'week' when calling getPlays");
      }

      let pathParams = {
      };
      let queryParams = {
        'seasonType': opts['seasonType'],
        'year': year,
        'week': week,
        'team': opts['team'],
        'offense': opts['offense'],
        'defense': opts['defense'],
        'conference': opts['conference'],
        'offenseConference': opts['offenseConference'],
        'defenseConference': opts['defenseConference'],
        'playType': opts['playType'],
        'classification': opts['classification']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Play];
      return this.apiClient.callApi(
        '/plays', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
