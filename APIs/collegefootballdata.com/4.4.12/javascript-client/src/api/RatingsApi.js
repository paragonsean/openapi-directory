/**
 * College Football Data API
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * The version of the OpenAPI document: 4.4.12
 * Contact: admin@collegefootballdata.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConferenceSPRating from '../model/ConferenceSPRating';
import TeamEloRating from '../model/TeamEloRating';
import TeamSPRating from '../model/TeamSPRating';
import TeamSRSRating from '../model/TeamSRSRating';

/**
* Ratings service.
* @module api/RatingsApi
* @version 4.4.12
*/
export default class RatingsApi {

    /**
    * Constructs a new RatingsApi. 
    * @alias module:api/RatingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getConferenceSPRatings operation.
     * @callback module:api/RatingsApi~getConferenceSPRatingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ConferenceSPRating>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Historical SP+ ratings by conference
     * Get average SP+ historical rating data by conference
     * @param {Object} opts Optional parameters
     * @param {Number} [year] Season filter
     * @param {String} [conference] Conference abbreviation filter
     * @param {module:api/RatingsApi~getConferenceSPRatingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ConferenceSPRating>}
     */
    getConferenceSPRatings(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'year': opts['year'],
        'conference': opts['conference']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ConferenceSPRating];
      return this.apiClient.callApi(
        '/ratings/sp/conferences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEloRatings operation.
     * @callback module:api/RatingsApi~getEloRatingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamEloRating>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Historical Elo ratings
     * Elo rating data
     * @param {Object} opts Optional parameters
     * @param {Number} [year] Season filter
     * @param {Number} [week] Maximum week filter
     * @param {String} [team] Team filter
     * @param {String} [conference] Conference filter
     * @param {module:api/RatingsApi~getEloRatingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamEloRating>}
     */
    getEloRatings(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'year': opts['year'],
        'week': opts['week'],
        'team': opts['team'],
        'conference': opts['conference']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamEloRating];
      return this.apiClient.callApi(
        '/ratings/elo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSPRatings operation.
     * @callback module:api/RatingsApi~getSPRatingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamSPRating>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Historical SP+ ratings
     * SP+ rating data
     * @param {Object} opts Optional parameters
     * @param {Number} [year] Season filter (required if team not specified)
     * @param {String} [team] Team filter (required if year not specified)
     * @param {module:api/RatingsApi~getSPRatingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamSPRating>}
     */
    getSPRatings(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'year': opts['year'],
        'team': opts['team']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamSPRating];
      return this.apiClient.callApi(
        '/ratings/sp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSRSRatings operation.
     * @callback module:api/RatingsApi~getSRSRatingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamSRSRating>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Historical SRS ratings
     * SRS rating data (requires either a year or team specified)
     * @param {Object} opts Optional parameters
     * @param {Number} [year] Season filter (required if team not specified)
     * @param {String} [team] Team filter (required if year not specified)
     * @param {String} [conference] Conference filter
     * @param {module:api/RatingsApi~getSRSRatingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamSRSRating>}
     */
    getSRSRatings(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'year': opts['year'],
        'team': opts['team'],
        'conference': opts['conference']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamSRSRating];
      return this.apiClient.callApi(
        '/ratings/srs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
