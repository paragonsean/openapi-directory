# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.budget_analysis import BudgetAnalysis
from openapi_server.models.category import Category
from openapi_server import util


class BudgetAnalysisPackage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: Category=None, expense: BudgetAnalysis=None, income: BudgetAnalysis=None, is_transfer: bool=None):
        """BudgetAnalysisPackage - a model defined in OpenAPI

        :param category: The category of this BudgetAnalysisPackage.
        :param expense: The expense of this BudgetAnalysisPackage.
        :param income: The income of this BudgetAnalysisPackage.
        :param is_transfer: The is_transfer of this BudgetAnalysisPackage.
        """
        self.openapi_types = {
            'category': Category,
            'expense': BudgetAnalysis,
            'income': BudgetAnalysis,
            'is_transfer': bool
        }

        self.attribute_map = {
            'category': 'category',
            'expense': 'expense',
            'income': 'income',
            'is_transfer': 'is_transfer'
        }

        self._category = category
        self._expense = expense
        self._income = income
        self._is_transfer = is_transfer

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BudgetAnalysisPackage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BudgetAnalysisPackage of this BudgetAnalysisPackage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this BudgetAnalysisPackage.


        :return: The category of this BudgetAnalysisPackage.
        :rtype: Category
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this BudgetAnalysisPackage.


        :param category: The category of this BudgetAnalysisPackage.
        :type category: Category
        """

        self._category = category

    @property
    def expense(self):
        """Gets the expense of this BudgetAnalysisPackage.


        :return: The expense of this BudgetAnalysisPackage.
        :rtype: BudgetAnalysis
        """
        return self._expense

    @expense.setter
    def expense(self, expense):
        """Sets the expense of this BudgetAnalysisPackage.


        :param expense: The expense of this BudgetAnalysisPackage.
        :type expense: BudgetAnalysis
        """

        self._expense = expense

    @property
    def income(self):
        """Gets the income of this BudgetAnalysisPackage.


        :return: The income of this BudgetAnalysisPackage.
        :rtype: BudgetAnalysis
        """
        return self._income

    @income.setter
    def income(self, income):
        """Sets the income of this BudgetAnalysisPackage.


        :param income: The income of this BudgetAnalysisPackage.
        :type income: BudgetAnalysis
        """

        self._income = income

    @property
    def is_transfer(self):
        """Gets the is_transfer of this BudgetAnalysisPackage.

        Whether the expense budget analysis looks like a transfer to the income budget analysis, based on a number of heuristics.

        :return: The is_transfer of this BudgetAnalysisPackage.
        :rtype: bool
        """
        return self._is_transfer

    @is_transfer.setter
    def is_transfer(self, is_transfer):
        """Sets the is_transfer of this BudgetAnalysisPackage.

        Whether the expense budget analysis looks like a transfer to the income budget analysis, based on a number of heuristics.

        :param is_transfer: The is_transfer of this BudgetAnalysisPackage.
        :type is_transfer: bool
        """

        self._is_transfer = is_transfer
