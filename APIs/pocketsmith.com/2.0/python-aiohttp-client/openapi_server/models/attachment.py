# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment_content_type_meta import AttachmentContentTypeMeta
from openapi_server.models.attachment_variants import AttachmentVariants
from openapi_server import util


class Attachment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type: str=None, content_type_meta: AttachmentContentTypeMeta=None, created_at: str=None, file_name: str=None, id: int=None, original_url: str=None, title: str=None, type: str=None, updated_at: str=None, variants: AttachmentVariants=None):
        """Attachment - a model defined in OpenAPI

        :param content_type: The content_type of this Attachment.
        :param content_type_meta: The content_type_meta of this Attachment.
        :param created_at: The created_at of this Attachment.
        :param file_name: The file_name of this Attachment.
        :param id: The id of this Attachment.
        :param original_url: The original_url of this Attachment.
        :param title: The title of this Attachment.
        :param type: The type of this Attachment.
        :param updated_at: The updated_at of this Attachment.
        :param variants: The variants of this Attachment.
        """
        self.openapi_types = {
            'content_type': str,
            'content_type_meta': AttachmentContentTypeMeta,
            'created_at': str,
            'file_name': str,
            'id': int,
            'original_url': str,
            'title': str,
            'type': str,
            'updated_at': str,
            'variants': AttachmentVariants
        }

        self.attribute_map = {
            'content_type': 'content_type',
            'content_type_meta': 'content_type_meta',
            'created_at': 'created_at',
            'file_name': 'file_name',
            'id': 'id',
            'original_url': 'original_url',
            'title': 'title',
            'type': 'type',
            'updated_at': 'updated_at',
            'variants': 'variants'
        }

        self._content_type = content_type
        self._content_type_meta = content_type_meta
        self._created_at = created_at
        self._file_name = file_name
        self._id = id
        self._original_url = original_url
        self._title = title
        self._type = type
        self._updated_at = updated_at
        self._variants = variants

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attachment of this Attachment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self):
        """Gets the content_type of this Attachment.

        The content type of the attachment.

        :return: The content_type of this Attachment.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Attachment.

        The content type of the attachment.

        :param content_type: The content_type of this Attachment.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def content_type_meta(self):
        """Gets the content_type_meta of this Attachment.


        :return: The content_type_meta of this Attachment.
        :rtype: AttachmentContentTypeMeta
        """
        return self._content_type_meta

    @content_type_meta.setter
    def content_type_meta(self, content_type_meta):
        """Sets the content_type_meta of this Attachment.


        :param content_type_meta: The content_type_meta of this Attachment.
        :type content_type_meta: AttachmentContentTypeMeta
        """

        self._content_type_meta = content_type_meta

    @property
    def created_at(self):
        """Gets the created_at of this Attachment.

        When the attachment was created.

        :return: The created_at of this Attachment.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Attachment.

        When the attachment was created.

        :param created_at: The created_at of this Attachment.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def file_name(self):
        """Gets the file_name of this Attachment.

        The file name of the attachment.

        :return: The file_name of this Attachment.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this Attachment.

        The file name of the attachment.

        :param file_name: The file_name of this Attachment.
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def id(self):
        """Gets the id of this Attachment.

        The unique identifier of the attachment

        :return: The id of this Attachment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Attachment.

        The unique identifier of the attachment

        :param id: The id of this Attachment.
        :type id: int
        """

        self._id = id

    @property
    def original_url(self):
        """Gets the original_url of this Attachment.

        The url of the attachment.

        :return: The original_url of this Attachment.
        :rtype: str
        """
        return self._original_url

    @original_url.setter
    def original_url(self, original_url):
        """Sets the original_url of this Attachment.

        The url of the attachment.

        :param original_url: The original_url of this Attachment.
        :type original_url: str
        """

        self._original_url = original_url

    @property
    def title(self):
        """Gets the title of this Attachment.

        The title of the attachment. If blank or not provided, the title will be derived from the file name.

        :return: The title of this Attachment.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Attachment.

        The title of the attachment. If blank or not provided, the title will be derived from the file name.

        :param title: The title of this Attachment.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Attachment.

        The type of attachment.

        :return: The type of this Attachment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Attachment.

        The type of attachment.

        :param type: The type of this Attachment.
        :type type: str
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this Attachment.

        When the attachment was last updated.

        :return: The updated_at of this Attachment.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Attachment.

        When the attachment was last updated.

        :param updated_at: The updated_at of this Attachment.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def variants(self):
        """Gets the variants of this Attachment.


        :return: The variants of this Attachment.
        :rtype: AttachmentVariants
        """
        return self._variants

    @variants.setter
    def variants(self, variants):
        """Sets the variants of this Attachment.


        :param variants: The variants of this Attachment.
        :type variants: AttachmentVariants
        """

        self._variants = variants
