# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.period import Period
from openapi_server import util


class BudgetAnalysis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average_actual_amount: float=None, average_forecast_amount: float=None, currency_code: str=None, end_date: str=None, periods: List[Period]=None, start_date: str=None, total_actual_amount: float=None, total_forecast_amount: float=None, total_over_by: float=None, total_under_by: float=None):
        """BudgetAnalysis - a model defined in OpenAPI

        :param average_actual_amount: The average_actual_amount of this BudgetAnalysis.
        :param average_forecast_amount: The average_forecast_amount of this BudgetAnalysis.
        :param currency_code: The currency_code of this BudgetAnalysis.
        :param end_date: The end_date of this BudgetAnalysis.
        :param periods: The periods of this BudgetAnalysis.
        :param start_date: The start_date of this BudgetAnalysis.
        :param total_actual_amount: The total_actual_amount of this BudgetAnalysis.
        :param total_forecast_amount: The total_forecast_amount of this BudgetAnalysis.
        :param total_over_by: The total_over_by of this BudgetAnalysis.
        :param total_under_by: The total_under_by of this BudgetAnalysis.
        """
        self.openapi_types = {
            'average_actual_amount': float,
            'average_forecast_amount': float,
            'currency_code': str,
            'end_date': str,
            'periods': List[Period],
            'start_date': str,
            'total_actual_amount': float,
            'total_forecast_amount': float,
            'total_over_by': float,
            'total_under_by': float
        }

        self.attribute_map = {
            'average_actual_amount': 'average_actual_amount',
            'average_forecast_amount': 'average_forecast_amount',
            'currency_code': 'currency_code',
            'end_date': 'end_date',
            'periods': 'periods',
            'start_date': 'start_date',
            'total_actual_amount': 'total_actual_amount',
            'total_forecast_amount': 'total_forecast_amount',
            'total_over_by': 'total_over_by',
            'total_under_by': 'total_under_by'
        }

        self._average_actual_amount = average_actual_amount
        self._average_forecast_amount = average_forecast_amount
        self._currency_code = currency_code
        self._end_date = end_date
        self._periods = periods
        self._start_date = start_date
        self._total_actual_amount = total_actual_amount
        self._total_forecast_amount = total_forecast_amount
        self._total_over_by = total_over_by
        self._total_under_by = total_under_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BudgetAnalysis':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BudgetAnalysis of this BudgetAnalysis.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average_actual_amount(self):
        """Gets the average_actual_amount of this BudgetAnalysis.

        The average actual (transactions) amount across all periods.

        :return: The average_actual_amount of this BudgetAnalysis.
        :rtype: float
        """
        return self._average_actual_amount

    @average_actual_amount.setter
    def average_actual_amount(self, average_actual_amount):
        """Sets the average_actual_amount of this BudgetAnalysis.

        The average actual (transactions) amount across all periods.

        :param average_actual_amount: The average_actual_amount of this BudgetAnalysis.
        :type average_actual_amount: float
        """

        self._average_actual_amount = average_actual_amount

    @property
    def average_forecast_amount(self):
        """Gets the average_forecast_amount of this BudgetAnalysis.

        The average budgeted amount across all periods.

        :return: The average_forecast_amount of this BudgetAnalysis.
        :rtype: float
        """
        return self._average_forecast_amount

    @average_forecast_amount.setter
    def average_forecast_amount(self, average_forecast_amount):
        """Sets the average_forecast_amount of this BudgetAnalysis.

        The average budgeted amount across all periods.

        :param average_forecast_amount: The average_forecast_amount of this BudgetAnalysis.
        :type average_forecast_amount: float
        """

        self._average_forecast_amount = average_forecast_amount

    @property
    def currency_code(self):
        """Gets the currency_code of this BudgetAnalysis.

        The currency of the budget analysis.

        :return: The currency_code of this BudgetAnalysis.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this BudgetAnalysis.

        The currency of the budget analysis.

        :param currency_code: The currency_code of this BudgetAnalysis.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def end_date(self):
        """Gets the end_date of this BudgetAnalysis.

        The end date of the budget analysis.

        :return: The end_date of this BudgetAnalysis.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this BudgetAnalysis.

        The end date of the budget analysis.

        :param end_date: The end_date of this BudgetAnalysis.
        :type end_date: str
        """

        self._end_date = end_date

    @property
    def periods(self):
        """Gets the periods of this BudgetAnalysis.

        The period analyses that this budget analysis comprises.

        :return: The periods of this BudgetAnalysis.
        :rtype: List[Period]
        """
        return self._periods

    @periods.setter
    def periods(self, periods):
        """Sets the periods of this BudgetAnalysis.

        The period analyses that this budget analysis comprises.

        :param periods: The periods of this BudgetAnalysis.
        :type periods: List[Period]
        """

        self._periods = periods

    @property
    def start_date(self):
        """Gets the start_date of this BudgetAnalysis.

        The start date of the budget analysis.

        :return: The start_date of this BudgetAnalysis.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this BudgetAnalysis.

        The start date of the budget analysis.

        :param start_date: The start_date of this BudgetAnalysis.
        :type start_date: str
        """

        self._start_date = start_date

    @property
    def total_actual_amount(self):
        """Gets the total_actual_amount of this BudgetAnalysis.

        The total actual (transactions) amount across all periods.

        :return: The total_actual_amount of this BudgetAnalysis.
        :rtype: float
        """
        return self._total_actual_amount

    @total_actual_amount.setter
    def total_actual_amount(self, total_actual_amount):
        """Sets the total_actual_amount of this BudgetAnalysis.

        The total actual (transactions) amount across all periods.

        :param total_actual_amount: The total_actual_amount of this BudgetAnalysis.
        :type total_actual_amount: float
        """

        self._total_actual_amount = total_actual_amount

    @property
    def total_forecast_amount(self):
        """Gets the total_forecast_amount of this BudgetAnalysis.

        The total budgeted amount across all periods.

        :return: The total_forecast_amount of this BudgetAnalysis.
        :rtype: float
        """
        return self._total_forecast_amount

    @total_forecast_amount.setter
    def total_forecast_amount(self, total_forecast_amount):
        """Sets the total_forecast_amount of this BudgetAnalysis.

        The total budgeted amount across all periods.

        :param total_forecast_amount: The total_forecast_amount of this BudgetAnalysis.
        :type total_forecast_amount: float
        """

        self._total_forecast_amount = total_forecast_amount

    @property
    def total_over_by(self):
        """Gets the total_over_by of this BudgetAnalysis.

        The total amount the budget was exceeded across all periods.

        :return: The total_over_by of this BudgetAnalysis.
        :rtype: float
        """
        return self._total_over_by

    @total_over_by.setter
    def total_over_by(self, total_over_by):
        """Sets the total_over_by of this BudgetAnalysis.

        The total amount the budget was exceeded across all periods.

        :param total_over_by: The total_over_by of this BudgetAnalysis.
        :type total_over_by: float
        """

        self._total_over_by = total_over_by

    @property
    def total_under_by(self):
        """Gets the total_under_by of this BudgetAnalysis.

        The total amount the budget was under by across all periods.

        :return: The total_under_by of this BudgetAnalysis.
        :rtype: float
        """
        return self._total_under_by

    @total_under_by.setter
    def total_under_by(self, total_under_by):
        """Sets the total_under_by of this BudgetAnalysis.

        The total amount the budget was under by across all periods.

        :param total_under_by: The total_under_by of this BudgetAnalysis.
        :type total_under_by: float
        """

        self._total_under_by = total_under_by
