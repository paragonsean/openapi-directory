# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scenario import Scenario
from openapi_server.models.transaction_account import TransactionAccount
from openapi_server import util


class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, currency_code: str=None, current_balance: float=None, current_balance_date: str=None, current_balance_exchange_rate: float=None, current_balance_in_base_currency: float=None, id: int=None, is_net_worth: bool=None, primary_scenario: Scenario=None, primary_transaction_account: TransactionAccount=None, safe_balance: float=None, safe_balance_in_base_currency: float=None, scenarios: List[Scenario]=None, title: str=None, transaction_accounts: List[TransactionAccount]=None, type: str=None, updated_at: str=None):
        """Account - a model defined in OpenAPI

        :param created_at: The created_at of this Account.
        :param currency_code: The currency_code of this Account.
        :param current_balance: The current_balance of this Account.
        :param current_balance_date: The current_balance_date of this Account.
        :param current_balance_exchange_rate: The current_balance_exchange_rate of this Account.
        :param current_balance_in_base_currency: The current_balance_in_base_currency of this Account.
        :param id: The id of this Account.
        :param is_net_worth: The is_net_worth of this Account.
        :param primary_scenario: The primary_scenario of this Account.
        :param primary_transaction_account: The primary_transaction_account of this Account.
        :param safe_balance: The safe_balance of this Account.
        :param safe_balance_in_base_currency: The safe_balance_in_base_currency of this Account.
        :param scenarios: The scenarios of this Account.
        :param title: The title of this Account.
        :param transaction_accounts: The transaction_accounts of this Account.
        :param type: The type of this Account.
        :param updated_at: The updated_at of this Account.
        """
        self.openapi_types = {
            'created_at': str,
            'currency_code': str,
            'current_balance': float,
            'current_balance_date': str,
            'current_balance_exchange_rate': float,
            'current_balance_in_base_currency': float,
            'id': int,
            'is_net_worth': bool,
            'primary_scenario': Scenario,
            'primary_transaction_account': TransactionAccount,
            'safe_balance': float,
            'safe_balance_in_base_currency': float,
            'scenarios': List[Scenario],
            'title': str,
            'transaction_accounts': List[TransactionAccount],
            'type': str,
            'updated_at': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'currency_code': 'currency_code',
            'current_balance': 'current_balance',
            'current_balance_date': 'current_balance_date',
            'current_balance_exchange_rate': 'current_balance_exchange_rate',
            'current_balance_in_base_currency': 'current_balance_in_base_currency',
            'id': 'id',
            'is_net_worth': 'is_net_worth',
            'primary_scenario': 'primary_scenario',
            'primary_transaction_account': 'primary_transaction_account',
            'safe_balance': 'safe_balance',
            'safe_balance_in_base_currency': 'safe_balance_in_base_currency',
            'scenarios': 'scenarios',
            'title': 'title',
            'transaction_accounts': 'transaction_accounts',
            'type': 'type',
            'updated_at': 'updated_at'
        }

        self._created_at = created_at
        self._currency_code = currency_code
        self._current_balance = current_balance
        self._current_balance_date = current_balance_date
        self._current_balance_exchange_rate = current_balance_exchange_rate
        self._current_balance_in_base_currency = current_balance_in_base_currency
        self._id = id
        self._is_net_worth = is_net_worth
        self._primary_scenario = primary_scenario
        self._primary_transaction_account = primary_transaction_account
        self._safe_balance = safe_balance
        self._safe_balance_in_base_currency = safe_balance_in_base_currency
        self._scenarios = scenarios
        self._title = title
        self._transaction_accounts = transaction_accounts
        self._type = type
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Account of this Account.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this Account.

        When the account was created.

        :return: The created_at of this Account.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Account.

        When the account was created.

        :param created_at: The created_at of this Account.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def currency_code(self):
        """Gets the currency_code of this Account.

        The currency code for the account.

        :return: The currency_code of this Account.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Account.

        The currency code for the account.

        :param currency_code: The currency_code of this Account.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def current_balance(self):
        """Gets the current_balance of this Account.

        The current balance of the account.

        :return: The current_balance of this Account.
        :rtype: float
        """
        return self._current_balance

    @current_balance.setter
    def current_balance(self, current_balance):
        """Sets the current_balance of this Account.

        The current balance of the account.

        :param current_balance: The current_balance of this Account.
        :type current_balance: float
        """

        self._current_balance = current_balance

    @property
    def current_balance_date(self):
        """Gets the current_balance_date of this Account.

        The date of the current balance.

        :return: The current_balance_date of this Account.
        :rtype: str
        """
        return self._current_balance_date

    @current_balance_date.setter
    def current_balance_date(self, current_balance_date):
        """Sets the current_balance_date of this Account.

        The date of the current balance.

        :param current_balance_date: The current_balance_date of this Account.
        :type current_balance_date: str
        """

        self._current_balance_date = current_balance_date

    @property
    def current_balance_exchange_rate(self):
        """Gets the current_balance_exchange_rate of this Account.

        The exchange rate between the account's currency and the user's base currency, when different. If the currencies are the same, null is returned.

        :return: The current_balance_exchange_rate of this Account.
        :rtype: float
        """
        return self._current_balance_exchange_rate

    @current_balance_exchange_rate.setter
    def current_balance_exchange_rate(self, current_balance_exchange_rate):
        """Sets the current_balance_exchange_rate of this Account.

        The exchange rate between the account's currency and the user's base currency, when different. If the currencies are the same, null is returned.

        :param current_balance_exchange_rate: The current_balance_exchange_rate of this Account.
        :type current_balance_exchange_rate: float
        """

        self._current_balance_exchange_rate = current_balance_exchange_rate

    @property
    def current_balance_in_base_currency(self):
        """Gets the current_balance_in_base_currency of this Account.

        The current balance of the account in the user's base currency.

        :return: The current_balance_in_base_currency of this Account.
        :rtype: float
        """
        return self._current_balance_in_base_currency

    @current_balance_in_base_currency.setter
    def current_balance_in_base_currency(self, current_balance_in_base_currency):
        """Sets the current_balance_in_base_currency of this Account.

        The current balance of the account in the user's base currency.

        :param current_balance_in_base_currency: The current_balance_in_base_currency of this Account.
        :type current_balance_in_base_currency: float
        """

        self._current_balance_in_base_currency = current_balance_in_base_currency

    @property
    def id(self):
        """Gets the id of this Account.

        The unique identifier of the account.

        :return: The id of this Account.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.

        The unique identifier of the account.

        :param id: The id of this Account.
        :type id: int
        """

        self._id = id

    @property
    def is_net_worth(self):
        """Gets the is_net_worth of this Account.

        Whether the account is a net worth asset.

        :return: The is_net_worth of this Account.
        :rtype: bool
        """
        return self._is_net_worth

    @is_net_worth.setter
    def is_net_worth(self, is_net_worth):
        """Sets the is_net_worth of this Account.

        Whether the account is a net worth asset.

        :param is_net_worth: The is_net_worth of this Account.
        :type is_net_worth: bool
        """

        self._is_net_worth = is_net_worth

    @property
    def primary_scenario(self):
        """Gets the primary_scenario of this Account.


        :return: The primary_scenario of this Account.
        :rtype: Scenario
        """
        return self._primary_scenario

    @primary_scenario.setter
    def primary_scenario(self, primary_scenario):
        """Sets the primary_scenario of this Account.


        :param primary_scenario: The primary_scenario of this Account.
        :type primary_scenario: Scenario
        """

        self._primary_scenario = primary_scenario

    @property
    def primary_transaction_account(self):
        """Gets the primary_transaction_account of this Account.


        :return: The primary_transaction_account of this Account.
        :rtype: TransactionAccount
        """
        return self._primary_transaction_account

    @primary_transaction_account.setter
    def primary_transaction_account(self, primary_transaction_account):
        """Sets the primary_transaction_account of this Account.


        :param primary_transaction_account: The primary_transaction_account of this Account.
        :type primary_transaction_account: TransactionAccount
        """

        self._primary_transaction_account = primary_transaction_account

    @property
    def safe_balance(self):
        """Gets the safe_balance of this Account.

        The current safe balance, if safe balance is activated on the account. If safe balance is not activated, then null is returned.

        :return: The safe_balance of this Account.
        :rtype: float
        """
        return self._safe_balance

    @safe_balance.setter
    def safe_balance(self, safe_balance):
        """Sets the safe_balance of this Account.

        The current safe balance, if safe balance is activated on the account. If safe balance is not activated, then null is returned.

        :param safe_balance: The safe_balance of this Account.
        :type safe_balance: float
        """

        self._safe_balance = safe_balance

    @property
    def safe_balance_in_base_currency(self):
        """Gets the safe_balance_in_base_currency of this Account.

        The current safe balance in the user's base currency, if safe balance is activated on the account. If safe balance is not activated, then null is returned.

        :return: The safe_balance_in_base_currency of this Account.
        :rtype: float
        """
        return self._safe_balance_in_base_currency

    @safe_balance_in_base_currency.setter
    def safe_balance_in_base_currency(self, safe_balance_in_base_currency):
        """Sets the safe_balance_in_base_currency of this Account.

        The current safe balance in the user's base currency, if safe balance is activated on the account. If safe balance is not activated, then null is returned.

        :param safe_balance_in_base_currency: The safe_balance_in_base_currency of this Account.
        :type safe_balance_in_base_currency: float
        """

        self._safe_balance_in_base_currency = safe_balance_in_base_currency

    @property
    def scenarios(self):
        """Gets the scenarios of this Account.

        All scenarios that compose the account, including the primary.

        :return: The scenarios of this Account.
        :rtype: List[Scenario]
        """
        return self._scenarios

    @scenarios.setter
    def scenarios(self, scenarios):
        """Sets the scenarios of this Account.

        All scenarios that compose the account, including the primary.

        :param scenarios: The scenarios of this Account.
        :type scenarios: List[Scenario]
        """

        self._scenarios = scenarios

    @property
    def title(self):
        """Gets the title of this Account.

        The title of the account.

        :return: The title of this Account.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Account.

        The title of the account.

        :param title: The title of this Account.
        :type title: str
        """

        self._title = title

    @property
    def transaction_accounts(self):
        """Gets the transaction_accounts of this Account.

        All transaction accounts that compose the account, including the primary.

        :return: The transaction_accounts of this Account.
        :rtype: List[TransactionAccount]
        """
        return self._transaction_accounts

    @transaction_accounts.setter
    def transaction_accounts(self, transaction_accounts):
        """Sets the transaction_accounts of this Account.

        All transaction accounts that compose the account, including the primary.

        :param transaction_accounts: The transaction_accounts of this Account.
        :type transaction_accounts: List[TransactionAccount]
        """

        self._transaction_accounts = transaction_accounts

    @property
    def type(self):
        """Gets the type of this Account.

        The type of the account.

        :return: The type of this Account.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Account.

        The type of the account.

        :param type: The type of this Account.
        :type type: str
        """
        allowed_values = ["bank", "credits", "cash", "stocks", "mortgage", "loans", "vehicle", "property", "insurance", "other_asset", "other_liability"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this Account.

        When the account was last updated.

        :return: The updated_at of this Account.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Account.

        When the account was last updated.

        :param updated_at: The updated_at of this Account.
        :type updated_at: str
        """

        self._updated_at = updated_at
