# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountsIdPutRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_code: str=None, is_net_worth: bool=None, title: str=None, type: str=None):
        """AccountsIdPutRequest - a model defined in OpenAPI

        :param currency_code: The currency_code of this AccountsIdPutRequest.
        :param is_net_worth: The is_net_worth of this AccountsIdPutRequest.
        :param title: The title of this AccountsIdPutRequest.
        :param type: The type of this AccountsIdPutRequest.
        """
        self.openapi_types = {
            'currency_code': str,
            'is_net_worth': bool,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'currency_code': 'currency_code',
            'is_net_worth': 'is_net_worth',
            'title': 'title',
            'type': 'type'
        }

        self._currency_code = currency_code
        self._is_net_worth = is_net_worth
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountsIdPutRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _accounts__id__put_request of this AccountsIdPutRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_code(self):
        """Gets the currency_code of this AccountsIdPutRequest.

        A new currency code for the account.

        :return: The currency_code of this AccountsIdPutRequest.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this AccountsIdPutRequest.

        A new currency code for the account.

        :param currency_code: The currency_code of this AccountsIdPutRequest.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def is_net_worth(self):
        """Gets the is_net_worth of this AccountsIdPutRequest.

        Whether the account is a net worth account.

        :return: The is_net_worth of this AccountsIdPutRequest.
        :rtype: bool
        """
        return self._is_net_worth

    @is_net_worth.setter
    def is_net_worth(self, is_net_worth):
        """Sets the is_net_worth of this AccountsIdPutRequest.

        Whether the account is a net worth account.

        :param is_net_worth: The is_net_worth of this AccountsIdPutRequest.
        :type is_net_worth: bool
        """

        self._is_net_worth = is_net_worth

    @property
    def title(self):
        """Gets the title of this AccountsIdPutRequest.

        A new title for the account.

        :return: The title of this AccountsIdPutRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AccountsIdPutRequest.

        A new title for the account.

        :param title: The title of this AccountsIdPutRequest.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this AccountsIdPutRequest.

        The type of the account.

        :return: The type of this AccountsIdPutRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AccountsIdPutRequest.

        The type of the account.

        :param type: The type of this AccountsIdPutRequest.
        :type type: str
        """
        allowed_values = ["bank", "credits", "cash", "loans", "mortgage", "stocks", "vehicle", "property", "insurance", "other_asset", "other_liability"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
