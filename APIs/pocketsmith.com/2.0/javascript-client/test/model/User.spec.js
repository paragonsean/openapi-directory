/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PocketSmith);
  }
}(this, function(expect, PocketSmith) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PocketSmith.User();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('User', function() {
    it('should create an instance of User', function() {
      // uncomment below and update the code to test User
      //var instance = new PocketSmith.User();
      //expect(instance).to.be.a(PocketSmith.User);
    });

    it('should have the property alwaysShowBaseCurrency (base name: "always_show_base_currency")', function() {
      // uncomment below and update the code to test the property alwaysShowBaseCurrency
      //var instance = new PocketSmith.User();
      //expect(instance).to.be();
    });

    it('should have the property availableAccounts (base name: "available_accounts")', function() {
      // uncomment below and update the code to test the property availableAccounts
      //var instance = new PocketSmith.User();
      //expect(instance).to.be();
    });

    it('should have the property availableBudgets (base name: "available_budgets")', function() {
      // uncomment below and update the code to test the property availableBudgets
      //var instance = new PocketSmith.User();
      //expect(instance).to.be();
    });

    it('should have the property avatarUrl (base name: "avatar_url")', function() {
      // uncomment below and update the code to test the property avatarUrl
      //var instance = new PocketSmith.User();
      //expect(instance).to.be();
    });

    it('should have the property baseCurrencyCode (base name: "base_currency_code")', function() {
      // uncomment below and update the code to test the property baseCurrencyCode
      //var instance = new PocketSmith.User();
      //expect(instance).to.be();
    });

    it('should have the property betaUser (base name: "beta_user")', function() {
      // uncomment below and update the code to test the property betaUser
      //var instance = new PocketSmith.User();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new PocketSmith.User();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instance = new PocketSmith.User();
      //expect(instance).to.be();
    });

    it('should have the property forecastDeferRecalculate (base name: "forecast_defer_recalculate")', function() {
      // uncomment below and update the code to test the property forecastDeferRecalculate
      //var instance = new PocketSmith.User();
      //expect(instance).to.be();
    });

    it('should have the property forecastEndDate (base name: "forecast_end_date")', function() {
      // uncomment below and update the code to test the property forecastEndDate
      //var instance = new PocketSmith.User();
      //expect(instance).to.be();
    });

    it('should have the property forecastLastAccessedAt (base name: "forecast_last_accessed_at")', function() {
      // uncomment below and update the code to test the property forecastLastAccessedAt
      //var instance = new PocketSmith.User();
      //expect(instance).to.be();
    });

    it('should have the property forecastLastUpdatedAt (base name: "forecast_last_updated_at")', function() {
      // uncomment below and update the code to test the property forecastLastUpdatedAt
      //var instance = new PocketSmith.User();
      //expect(instance).to.be();
    });

    it('should have the property forecastNeedsRecalculate (base name: "forecast_needs_recalculate")', function() {
      // uncomment below and update the code to test the property forecastNeedsRecalculate
      //var instance = new PocketSmith.User();
      //expect(instance).to.be();
    });

    it('should have the property forecastStartDate (base name: "forecast_start_date")', function() {
      // uncomment below and update the code to test the property forecastStartDate
      //var instance = new PocketSmith.User();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new PocketSmith.User();
      //expect(instance).to.be();
    });

    it('should have the property isReviewingTransactions (base name: "is_reviewing_transactions")', function() {
      // uncomment below and update the code to test the property isReviewingTransactions
      //var instance = new PocketSmith.User();
      //expect(instance).to.be();
    });

    it('should have the property lastActivityAt (base name: "last_activity_at")', function() {
      // uncomment below and update the code to test the property lastActivityAt
      //var instance = new PocketSmith.User();
      //expect(instance).to.be();
    });

    it('should have the property lastLoggedInAt (base name: "last_logged_in_at")', function() {
      // uncomment below and update the code to test the property lastLoggedInAt
      //var instance = new PocketSmith.User();
      //expect(instance).to.be();
    });

    it('should have the property login (base name: "login")', function() {
      // uncomment below and update the code to test the property login
      //var instance = new PocketSmith.User();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new PocketSmith.User();
      //expect(instance).to.be();
    });

    it('should have the property timeZone (base name: "time_zone")', function() {
      // uncomment below and update the code to test the property timeZone
      //var instance = new PocketSmith.User();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new PocketSmith.User();
      //expect(instance).to.be();
    });

    it('should have the property usingMultipleCurrencies (base name: "using_multiple_currencies")', function() {
      // uncomment below and update the code to test the property usingMultipleCurrencies
      //var instance = new PocketSmith.User();
      //expect(instance).to.be();
    });

    it('should have the property weekStartDay (base name: "week_start_day")', function() {
      // uncomment below and update the code to test the property weekStartDay
      //var instance = new PocketSmith.User();
      //expect(instance).to.be();
    });

  });

}));
