/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PocketSmith);
  }
}(this, function(expect, PocketSmith) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PocketSmith.Account();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Account', function() {
    it('should create an instance of Account', function() {
      // uncomment below and update the code to test Account
      //var instance = new PocketSmith.Account();
      //expect(instance).to.be.a(PocketSmith.Account);
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new PocketSmith.Account();
      //expect(instance).to.be();
    });

    it('should have the property currencyCode (base name: "currency_code")', function() {
      // uncomment below and update the code to test the property currencyCode
      //var instance = new PocketSmith.Account();
      //expect(instance).to.be();
    });

    it('should have the property currentBalance (base name: "current_balance")', function() {
      // uncomment below and update the code to test the property currentBalance
      //var instance = new PocketSmith.Account();
      //expect(instance).to.be();
    });

    it('should have the property currentBalanceDate (base name: "current_balance_date")', function() {
      // uncomment below and update the code to test the property currentBalanceDate
      //var instance = new PocketSmith.Account();
      //expect(instance).to.be();
    });

    it('should have the property currentBalanceExchangeRate (base name: "current_balance_exchange_rate")', function() {
      // uncomment below and update the code to test the property currentBalanceExchangeRate
      //var instance = new PocketSmith.Account();
      //expect(instance).to.be();
    });

    it('should have the property currentBalanceInBaseCurrency (base name: "current_balance_in_base_currency")', function() {
      // uncomment below and update the code to test the property currentBalanceInBaseCurrency
      //var instance = new PocketSmith.Account();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new PocketSmith.Account();
      //expect(instance).to.be();
    });

    it('should have the property isNetWorth (base name: "is_net_worth")', function() {
      // uncomment below and update the code to test the property isNetWorth
      //var instance = new PocketSmith.Account();
      //expect(instance).to.be();
    });

    it('should have the property primaryScenario (base name: "primary_scenario")', function() {
      // uncomment below and update the code to test the property primaryScenario
      //var instance = new PocketSmith.Account();
      //expect(instance).to.be();
    });

    it('should have the property primaryTransactionAccount (base name: "primary_transaction_account")', function() {
      // uncomment below and update the code to test the property primaryTransactionAccount
      //var instance = new PocketSmith.Account();
      //expect(instance).to.be();
    });

    it('should have the property safeBalance (base name: "safe_balance")', function() {
      // uncomment below and update the code to test the property safeBalance
      //var instance = new PocketSmith.Account();
      //expect(instance).to.be();
    });

    it('should have the property safeBalanceInBaseCurrency (base name: "safe_balance_in_base_currency")', function() {
      // uncomment below and update the code to test the property safeBalanceInBaseCurrency
      //var instance = new PocketSmith.Account();
      //expect(instance).to.be();
    });

    it('should have the property scenarios (base name: "scenarios")', function() {
      // uncomment below and update the code to test the property scenarios
      //var instance = new PocketSmith.Account();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new PocketSmith.Account();
      //expect(instance).to.be();
    });

    it('should have the property transactionAccounts (base name: "transaction_accounts")', function() {
      // uncomment below and update the code to test the property transactionAccounts
      //var instance = new PocketSmith.Account();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new PocketSmith.Account();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new PocketSmith.Account();
      //expect(instance).to.be();
    });

  });

}));
