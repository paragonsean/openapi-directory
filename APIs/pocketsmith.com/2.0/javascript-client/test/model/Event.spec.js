/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PocketSmith);
  }
}(this, function(expect, PocketSmith) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PocketSmith.Event();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Event', function() {
    it('should create an instance of Event', function() {
      // uncomment below and update the code to test Event
      //var instance = new PocketSmith.Event();
      //expect(instance).to.be.a(PocketSmith.Event);
    });

    it('should have the property amount (base name: "amount")', function() {
      // uncomment below and update the code to test the property amount
      //var instance = new PocketSmith.Event();
      //expect(instance).to.be();
    });

    it('should have the property amountInBaseCurrency (base name: "amount_in_base_currency")', function() {
      // uncomment below and update the code to test the property amountInBaseCurrency
      //var instance = new PocketSmith.Event();
      //expect(instance).to.be();
    });

    it('should have the property category (base name: "category")', function() {
      // uncomment below and update the code to test the property category
      //var instance = new PocketSmith.Event();
      //expect(instance).to.be();
    });

    it('should have the property colour (base name: "colour")', function() {
      // uncomment below and update the code to test the property colour
      //var instance = new PocketSmith.Event();
      //expect(instance).to.be();
    });

    it('should have the property currencyCode (base name: "currency_code")', function() {
      // uncomment below and update the code to test the property currencyCode
      //var instance = new PocketSmith.Event();
      //expect(instance).to.be();
    });

    it('should have the property date (base name: "date")', function() {
      // uncomment below and update the code to test the property date
      //var instance = new PocketSmith.Event();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new PocketSmith.Event();
      //expect(instance).to.be();
    });

    it('should have the property infiniteSeries (base name: "infinite_series")', function() {
      // uncomment below and update the code to test the property infiniteSeries
      //var instance = new PocketSmith.Event();
      //expect(instance).to.be();
    });

    it('should have the property note (base name: "note")', function() {
      // uncomment below and update the code to test the property note
      //var instance = new PocketSmith.Event();
      //expect(instance).to.be();
    });

    it('should have the property repeatInterval (base name: "repeat_interval")', function() {
      // uncomment below and update the code to test the property repeatInterval
      //var instance = new PocketSmith.Event();
      //expect(instance).to.be();
    });

    it('should have the property repeatType (base name: "repeat_type")', function() {
      // uncomment below and update the code to test the property repeatType
      //var instance = new PocketSmith.Event();
      //expect(instance).to.be();
    });

    it('should have the property scenario (base name: "scenario")', function() {
      // uncomment below and update the code to test the property scenario
      //var instance = new PocketSmith.Event();
      //expect(instance).to.be();
    });

    it('should have the property seriesId (base name: "series_id")', function() {
      // uncomment below and update the code to test the property seriesId
      //var instance = new PocketSmith.Event();
      //expect(instance).to.be();
    });

    it('should have the property seriesStartId (base name: "series_start_id")', function() {
      // uncomment below and update the code to test the property seriesStartId
      //var instance = new PocketSmith.Event();
      //expect(instance).to.be();
    });

  });

}));
