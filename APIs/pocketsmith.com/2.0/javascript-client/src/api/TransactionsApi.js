/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Transaction from '../model/Transaction';
import TransactionAccountsIdTransactionsPostRequest from '../model/TransactionAccountsIdTransactionsPostRequest';
import TransactionsIdPutRequest from '../model/TransactionsIdPutRequest';

/**
* Transactions service.
* @module api/TransactionsApi
* @version 2.0
*/
export default class TransactionsApi {

    /**
    * Constructs a new TransactionsApi. 
    * @alias module:api/TransactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accountsIdTransactionsGet operation.
     * @callback module:api/TransactionsApi~accountsIdTransactionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Transaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List transactions in account
     * Lists transactions belonging to an account by its ID.
     * @param {Number} id The unique identifier of the account.
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user's subscription.
     * @param {String} [endDate] Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today's date.
     * @param {String} [updatedSince] Limit to transactions updated since an ISO 8601 timestamp.
     * @param {Number} [uncategorised] Limit to uncategorised transactions.
     * @param {module:model/String} [type] Limit to transactions of this type.
     * @param {Number} [needsReview] Limit to transactions that need to be reviewed.
     * @param {String} [search] Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format.
     * @param {Number} [page] Choose a particular page of the results.
     * @param {module:api/TransactionsApi~accountsIdTransactionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Transaction>}
     */
    accountsIdTransactionsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling accountsIdTransactionsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'updated_since': opts['updatedSince'],
        'uncategorised': opts['uncategorised'],
        'type': opts['type'],
        'needs_review': opts['needsReview'],
        'search': opts['search'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Transaction];
      return this.apiClient.callApi(
        '/accounts/{id}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the categoriesIdTransactionsGet operation.
     * @callback module:api/TransactionsApi~categoriesIdTransactionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Transaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List transactions in categories
     * Lists transactions belonging to one or more categories by their IDs.
     * @param {String} id A comma-separated list of category IDs.
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user's subscription.
     * @param {String} [endDate] Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today's date.
     * @param {String} [updatedSince] Limit to transactions updated since an ISO 8601 timestamp.
     * @param {Number} [uncategorised] Limit to uncategorised transactions.
     * @param {module:model/String} [type] Limit to transactions of this type.
     * @param {Number} [needsReview] Limit to transactions that need to be reviewed.
     * @param {String} [search] Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format.
     * @param {Number} [page] Choose a particular page of the results.
     * @param {module:api/TransactionsApi~categoriesIdTransactionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Transaction>}
     */
    categoriesIdTransactionsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling categoriesIdTransactionsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'updated_since': opts['updatedSince'],
        'uncategorised': opts['uncategorised'],
        'type': opts['type'],
        'needs_review': opts['needsReview'],
        'search': opts['search'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Transaction];
      return this.apiClient.callApi(
        '/categories/{id}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionAccountsIdTransactionsGet operation.
     * @callback module:api/TransactionsApi~transactionAccountsIdTransactionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Transaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List transactions in transaction account
     * Lists transactions belonging to a transaction account by its ID.
     * @param {Number} id The unique identifier of the transaction account.
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user's subscription.
     * @param {String} [endDate] Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today's date.
     * @param {String} [updatedSince] Limit to transactions updated since an ISO 8601 timestamp.
     * @param {Number} [uncategorised] Limit to uncategorised transactions.
     * @param {module:model/String} [type] Limit to transactions of this type.
     * @param {Number} [needsReview] Limit to transactions that need to be reviewed.
     * @param {String} [search] Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format.
     * @param {Number} [page] Choose a particular page of the results.
     * @param {module:api/TransactionsApi~transactionAccountsIdTransactionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Transaction>}
     */
    transactionAccountsIdTransactionsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling transactionAccountsIdTransactionsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'updated_since': opts['updatedSince'],
        'uncategorised': opts['uncategorised'],
        'type': opts['type'],
        'needs_review': opts['needsReview'],
        'search': opts['search'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Transaction];
      return this.apiClient.callApi(
        '/transaction_accounts/{id}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionAccountsIdTransactionsPost operation.
     * @callback module:api/TransactionsApi~transactionAccountsIdTransactionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a transaction in transaction account
     * Creates a transaction in a transaction account by its ID.
     * @param {Number} id The unique identifier of the transaction account.
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionAccountsIdTransactionsPostRequest} [transactionAccountsIdTransactionsPostRequest] 
     * @param {module:api/TransactionsApi~transactionAccountsIdTransactionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transaction}
     */
    transactionAccountsIdTransactionsPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['transactionAccountsIdTransactionsPostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling transactionAccountsIdTransactionsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Transaction;
      return this.apiClient.callApi(
        '/transaction_accounts/{id}/transactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsIdDelete operation.
     * @callback module:api/TransactionsApi~transactionsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete transaction
     * Deletes a transaction and all its data by ID.
     * @param {Number} id The unique identifier of the transaction.
     * @param {module:api/TransactionsApi~transactionsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    transactionsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling transactionsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/transactions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsIdGet operation.
     * @callback module:api/TransactionsApi~transactionsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a transaction
     * Gets a transaction by its ID.
     * @param {Number} id The unique identifier of the transaction.
     * @param {module:api/TransactionsApi~transactionsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transaction}
     */
    transactionsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling transactionsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Transaction;
      return this.apiClient.callApi(
        '/transactions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsIdPut operation.
     * @callback module:api/TransactionsApi~transactionsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a transaction
     * Updates a transaction by its ID.
     * @param {Number} id The unique identifier of the transaction.
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionsIdPutRequest} [transactionsIdPutRequest] 
     * @param {module:api/TransactionsApi~transactionsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transaction}
     */
    transactionsIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['transactionsIdPutRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling transactionsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Transaction;
      return this.apiClient.callApi(
        '/transactions/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdTransactionsGet operation.
     * @callback module:api/TransactionsApi~usersIdTransactionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Transaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List transactions in user
     * Lists transactions belonging to a user by their ID.
     * @param {Number} id The unique identifier of the account.
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user's subscription.
     * @param {String} [endDate] Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today's date.
     * @param {String} [updatedSince] Limit to transactions updated since an ISO 8601 timestamp.
     * @param {Number} [uncategorised] Limit to uncategorised transactions.
     * @param {module:model/String} [type] Limit to transactions of this type.
     * @param {Number} [needsReview] Limit to transactions that need to be reviewed.
     * @param {String} [search] Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format.
     * @param {Number} [page] Choose a particular page of the results.
     * @param {module:api/TransactionsApi~usersIdTransactionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Transaction>}
     */
    usersIdTransactionsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdTransactionsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'updated_since': opts['updatedSince'],
        'uncategorised': opts['uncategorised'],
        'type': opts['type'],
        'needs_review': opts['needsReview'],
        'search': opts['search'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Transaction];
      return this.apiClient.callApi(
        '/users/{id}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
