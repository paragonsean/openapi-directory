/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Event from '../model/Event';
import EventsIdPutRequest from '../model/EventsIdPutRequest';
import ScenariosIdEventsPostRequest from '../model/ScenariosIdEventsPostRequest';

/**
* Events service.
* @module api/EventsApi
* @version 2.0
*/
export default class EventsApi {

    /**
    * Constructs a new EventsApi. 
    * @alias module:api/EventsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the eventsIdDelete operation.
     * @callback module:api/EventsApi~eventsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete event
     * Deletes an event by its ID.
     * @param {String} id The unique identifier of the event.
     * @param {module:model/String} behaviour Whether the delete applies only to this event, to all events within the series from this event or to all events within the series.
     * @param {module:api/EventsApi~eventsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventsIdDelete(id, behaviour, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling eventsIdDelete");
      }
      // verify the required parameter 'behaviour' is set
      if (behaviour === undefined || behaviour === null) {
        throw new Error("Missing the required parameter 'behaviour' when calling eventsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'behaviour': behaviour
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/events/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsIdGet operation.
     * @callback module:api/EventsApi~eventsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get event
     * Gets a particular event by its ID.
     * @param {String} id The unique identifier of the event.
     * @param {module:api/EventsApi~eventsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    eventsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling eventsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Event;
      return this.apiClient.callApi(
        '/events/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsIdPut operation.
     * @callback module:api/EventsApi~eventsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update event
     * Updates an event by its ID.
     * @param {String} id The unique identifier of the event.
     * @param {Object} opts Optional parameters
     * @param {module:model/EventsIdPutRequest} [eventsIdPutRequest] 
     * @param {module:api/EventsApi~eventsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    eventsIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['eventsIdPutRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling eventsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Event;
      return this.apiClient.callApi(
        '/events/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scenariosIdEventsGet operation.
     * @callback module:api/EventsApi~scenariosIdEventsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List events in scenario.
     * Lists events belonging to a scenario by their ID.
     * @param {Number} id The unique identifier of the scenario.
     * @param {String} startDate Return the events from and including this date.
     * @param {String} endDate Return the events until and including this date.
     * @param {module:api/EventsApi~scenariosIdEventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    scenariosIdEventsGet(id, startDate, endDate, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling scenariosIdEventsGet");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling scenariosIdEventsGet");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling scenariosIdEventsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'start_date': startDate,
        'end_date': endDate
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];
      return this.apiClient.callApi(
        '/scenarios/{id}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scenariosIdEventsPost operation.
     * @callback module:api/EventsApi~scenariosIdEventsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create event in scenario
     * Creates an event in a scenario by its ID.
     * @param {Number} id The unique identifier of the scenario.
     * @param {Object} opts Optional parameters
     * @param {module:model/ScenariosIdEventsPostRequest} [scenariosIdEventsPostRequest] 
     * @param {module:api/EventsApi~scenariosIdEventsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    scenariosIdEventsPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['scenariosIdEventsPostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling scenariosIdEventsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Event;
      return this.apiClient.callApi(
        '/scenarios/{id}/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdEventsGet operation.
     * @callback module:api/EventsApi~usersIdEventsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List events in user.
     * Lists events belonging to a user by their ID.
     * @param {Number} id The unique identifier of the user.
     * @param {String} startDate Return the events from and including this date.
     * @param {String} endDate Return the events until and including this date.
     * @param {module:api/EventsApi~usersIdEventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    usersIdEventsGet(id, startDate, endDate, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdEventsGet");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling usersIdEventsGet");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling usersIdEventsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'start_date': startDate,
        'end_date': endDate
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Event];
      return this.apiClient.callApi(
        '/users/{id}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
