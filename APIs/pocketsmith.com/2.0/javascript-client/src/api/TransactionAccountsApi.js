/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import TransactionAccount from '../model/TransactionAccount';
import TransactionAccountsIdPutRequest from '../model/TransactionAccountsIdPutRequest';

/**
* TransactionAccounts service.
* @module api/TransactionAccountsApi
* @version 2.0
*/
export default class TransactionAccountsApi {

    /**
    * Constructs a new TransactionAccountsApi. 
    * @alias module:api/TransactionAccountsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the transactionAccountsIdGet operation.
     * @callback module:api/TransactionAccountsApi~transactionAccountsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get transaction account
     * Gets a transaction account by its ID.
     * @param {Number} id The unique identifier of the transaction account.
     * @param {module:api/TransactionAccountsApi~transactionAccountsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionAccount}
     */
    transactionAccountsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling transactionAccountsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionAccount;
      return this.apiClient.callApi(
        '/transaction_accounts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionAccountsIdPut operation.
     * @callback module:api/TransactionAccountsApi~transactionAccountsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update transaction account
     * Updates the transaction account by its ID.
     * @param {Number} id The unique identifier of the transaction account.
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionAccountsIdPutRequest} [transactionAccountsIdPutRequest] 
     * @param {module:api/TransactionAccountsApi~transactionAccountsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionAccount}
     */
    transactionAccountsIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['transactionAccountsIdPutRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling transactionAccountsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionAccount;
      return this.apiClient.callApi(
        '/transaction_accounts/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdTransactionAccountsGet operation.
     * @callback module:api/TransactionAccountsApi~usersIdTransactionAccountsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransactionAccount>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List transaction accounts in user
     * List all transaction accounts belonging to a user.
     * @param {Number} id The unique identifier of the user.
     * @param {module:api/TransactionAccountsApi~usersIdTransactionAccountsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransactionAccount>}
     */
    usersIdTransactionAccountsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdTransactionAccountsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TransactionAccount];
      return this.apiClient.callApi(
        '/users/{id}/transaction_accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
