/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Account from '../model/Account';
import AccountsIdPutRequest from '../model/AccountsIdPutRequest';
import Error from '../model/Error';
import UsersIdAccountsPostRequest from '../model/UsersIdAccountsPostRequest';
import UsersIdAccountsPutRequest from '../model/UsersIdAccountsPutRequest';

/**
* Accounts service.
* @module api/AccountsApi
* @version 2.0
*/
export default class AccountsApi {

    /**
    * Constructs a new AccountsApi. 
    * @alias module:api/AccountsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accountsIdDelete operation.
     * @callback module:api/AccountsApi~accountsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete account
     * Deletes an account and all its data by ID, optionally merge scenarios into another account.
     * @param {Number} id The unique identifier of the account.
     * @param {module:api/AccountsApi~accountsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    accountsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling accountsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/accounts/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountsIdGet operation.
     * @callback module:api/AccountsApi~accountsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get account
     * Gets an account by its ID.
     * @param {Number} id The unique identifier of the account.
     * @param {module:api/AccountsApi~accountsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    accountsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling accountsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/accounts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountsIdPut operation.
     * @callback module:api/AccountsApi~accountsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update account
     * Updates and returns an account by its ID.
     * @param {Number} id The unique identifier of the account.
     * @param {Object} opts Optional parameters
     * @param {module:model/AccountsIdPutRequest} [accountsIdPutRequest] 
     * @param {module:api/AccountsApi~accountsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    accountsIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['accountsIdPutRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling accountsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/accounts/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the institutionsIdAccountsGet operation.
     * @callback module:api/AccountsApi~institutionsIdAccountsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Account>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List accounts in institution
     * Lists accounts belonging to an institution by its ID.
     * @param {Number} id The unique identifier of the institution.
     * @param {module:api/AccountsApi~institutionsIdAccountsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Account>}
     */
    institutionsIdAccountsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling institutionsIdAccountsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Account];
      return this.apiClient.callApi(
        '/institutions/{id}/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdAccountsGet operation.
     * @callback module:api/AccountsApi~usersIdAccountsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Account>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List accounts in user
     * Lists all accounts belonging to the user by their ID.
     * @param {Number} id The unique identifier of the user.
     * @param {module:api/AccountsApi~usersIdAccountsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Account>}
     */
    usersIdAccountsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdAccountsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Account];
      return this.apiClient.callApi(
        '/users/{id}/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdAccountsPost operation.
     * @callback module:api/AccountsApi~usersIdAccountsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an account in user
     * Creates and returns an account belonging to the user by their ID.
     * @param {Number} id The unique identifier of the user.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersIdAccountsPostRequest} [usersIdAccountsPostRequest] 
     * @param {module:api/AccountsApi~usersIdAccountsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    usersIdAccountsPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['usersIdAccountsPostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdAccountsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/users/{id}/accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdAccountsPut operation.
     * @callback module:api/AccountsApi~usersIdAccountsPutCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Account>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the display order of accounts in user
     * Updates the display order of accounts belonging to the user, by accepting an array of accounts in their new display order.
     * @param {Number} id The unique identifier of the user.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersIdAccountsPutRequest} [usersIdAccountsPutRequest] 
     * @param {module:api/AccountsApi~usersIdAccountsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Account>}
     */
    usersIdAccountsPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['usersIdAccountsPutRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdAccountsPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Account];
      return this.apiClient.callApi(
        '/users/{id}/accounts', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
