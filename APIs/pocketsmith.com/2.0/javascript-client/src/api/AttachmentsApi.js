/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Attachment from '../model/Attachment';
import AttachmentsIdPutRequest from '../model/AttachmentsIdPutRequest';
import Error from '../model/Error';
import TransactionsIdAttachmentsPostRequest from '../model/TransactionsIdAttachmentsPostRequest';
import UsersIdAttachmentsPostRequest from '../model/UsersIdAttachmentsPostRequest';

/**
* Attachments service.
* @module api/AttachmentsApi
* @version 2.0
*/
export default class AttachmentsApi {

    /**
    * Constructs a new AttachmentsApi. 
    * @alias module:api/AttachmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the attachmentsIdDelete operation.
     * @callback module:api/AttachmentsApi~attachmentsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete attachment
     * Deletes a particular attachment by its ID.
     * @param {Number} id The unique identifier of the attachment.
     * @param {module:api/AttachmentsApi~attachmentsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attachmentsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attachmentsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/attachments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attachmentsIdGet operation.
     * @callback module:api/AttachmentsApi~attachmentsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attachment
     * Gets a particular attachment by its ID.
     * @param {Number} id The unique identifier of the attachment.
     * @param {module:api/AttachmentsApi~attachmentsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachment}
     */
    attachmentsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attachmentsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Attachment;
      return this.apiClient.callApi(
        '/attachments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attachmentsIdPut operation.
     * @callback module:api/AttachmentsApi~attachmentsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update attachment
     * Updates the title of the attachment.
     * @param {Number} id The unique identifier of the attachment.
     * @param {Object} opts Optional parameters
     * @param {module:model/AttachmentsIdPutRequest} [attachmentsIdPutRequest] 
     * @param {module:api/AttachmentsApi~attachmentsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachment}
     */
    attachmentsIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['attachmentsIdPutRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attachmentsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Attachment;
      return this.apiClient.callApi(
        '/attachments/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsIdAttachmentsGet operation.
     * @callback module:api/AttachmentsApi~transactionsIdAttachmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Attachment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List attachments in transaction
     * Lists attachments belonging to a transaction by their ID.
     * @param {Number} id The unique identifier of the transaction.
     * @param {module:api/AttachmentsApi~transactionsIdAttachmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Attachment>}
     */
    transactionsIdAttachmentsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling transactionsIdAttachmentsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Attachment];
      return this.apiClient.callApi(
        '/transactions/{id}/attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsIdAttachmentsPost operation.
     * @callback module:api/AttachmentsApi~transactionsIdAttachmentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assigns attachment to transaction
     * Assigns an attachment to the transaction by their ID.
     * @param {Number} id The unique identifier of the transaction.
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionsIdAttachmentsPostRequest} [transactionsIdAttachmentsPostRequest] 
     * @param {module:api/AttachmentsApi~transactionsIdAttachmentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachment}
     */
    transactionsIdAttachmentsPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['transactionsIdAttachmentsPostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling transactionsIdAttachmentsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Attachment;
      return this.apiClient.callApi(
        '/transactions/{id}/attachments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsTransactionIdAttachmentsAttachmentIdDelete operation.
     * @callback module:api/AttachmentsApi~transactionsTransactionIdAttachmentsAttachmentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unassigns attachment in transaction
     * Unassigns a particular attachment by its ID from the transaction ID. This does not delete the attachment, it only removes its association from the transaction.
     * @param {Number} transactionId The unique identifier of the transaction.
     * @param {Number} attachmentId The unique identifier of the attachment.
     * @param {module:api/AttachmentsApi~transactionsTransactionIdAttachmentsAttachmentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    transactionsTransactionIdAttachmentsAttachmentIdDelete(transactionId, attachmentId, callback) {
      let postBody = null;
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling transactionsTransactionIdAttachmentsAttachmentIdDelete");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling transactionsTransactionIdAttachmentsAttachmentIdDelete");
      }

      let pathParams = {
        'transaction_id': transactionId,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/transactions/{transaction_id}/attachments/{attachment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdAttachmentsGet operation.
     * @callback module:api/AttachmentsApi~usersIdAttachmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Attachment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists attachments in user
     * Lists attachments belonging to a user by their ID.
     * @param {Number} id The unique identifier of the user.
     * @param {Object} opts Optional parameters
     * @param {Number} [unassigned] If set, returns unassigned attachments, that are available for assigning to a transaction.
     * @param {module:api/AttachmentsApi~usersIdAttachmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Attachment>}
     */
    usersIdAttachmentsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdAttachmentsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'unassigned': opts['unassigned']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Attachment];
      return this.apiClient.callApi(
        '/users/{id}/attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdAttachmentsPost operation.
     * @callback module:api/AttachmentsApi~usersIdAttachmentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create attachment in user
     * Creates an attachment belonging to the user by their ID.
     * @param {Number} id The unique identifier of the user.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersIdAttachmentsPostRequest} [usersIdAttachmentsPostRequest] 
     * @param {module:api/AttachmentsApi~usersIdAttachmentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachment}
     */
    usersIdAttachmentsPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['usersIdAttachmentsPostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdAttachmentsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Attachment;
      return this.apiClient.callApi(
        '/users/{id}/attachments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
