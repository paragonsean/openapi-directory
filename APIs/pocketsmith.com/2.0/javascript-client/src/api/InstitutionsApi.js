/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Institution from '../model/Institution';
import InstitutionsIdPutRequest from '../model/InstitutionsIdPutRequest';
import UsersIdInstitutionsPostRequest from '../model/UsersIdInstitutionsPostRequest';

/**
* Institutions service.
* @module api/InstitutionsApi
* @version 2.0
*/
export default class InstitutionsApi {

    /**
    * Constructs a new InstitutionsApi. 
    * @alias module:api/InstitutionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the institutionsIdDelete operation.
     * @callback module:api/InstitutionsApi~institutionsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete institution
     * Deletes an institution and all data within. Alternatively, another institution can be provided to merge the data into to avoid losing it.
     * @param {Number} id The unique identifier of the institution.
     * @param {Object} opts Optional parameters
     * @param {Number} [mergeIntoInstitutionId] The unique identifier of the institution to merge into.
     * @param {module:api/InstitutionsApi~institutionsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    institutionsIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling institutionsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'merge_into_institution_id': opts['mergeIntoInstitutionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/institutions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the institutionsIdGet operation.
     * @callback module:api/InstitutionsApi~institutionsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Institution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get institution
     * Gets an institution by its ID.
     * @param {Number} id The unique identifier of the institution.
     * @param {module:api/InstitutionsApi~institutionsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Institution}
     */
    institutionsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling institutionsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Institution;
      return this.apiClient.callApi(
        '/institutions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the institutionsIdPut operation.
     * @callback module:api/InstitutionsApi~institutionsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Institution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update institution
     * Updates the title and currency code for an institution.
     * @param {Number} id The unique identifier of the institution.
     * @param {Object} opts Optional parameters
     * @param {module:model/InstitutionsIdPutRequest} [institutionsIdPutRequest] 
     * @param {module:api/InstitutionsApi~institutionsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Institution}
     */
    institutionsIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['institutionsIdPutRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling institutionsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Institution;
      return this.apiClient.callApi(
        '/institutions/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdInstitutionsGet operation.
     * @callback module:api/InstitutionsApi~usersIdInstitutionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Institution>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List institutions in user
     * Lists all the institutions belonging to the user.
     * @param {Number} id The unique identifier of the user
     * @param {module:api/InstitutionsApi~usersIdInstitutionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Institution>}
     */
    usersIdInstitutionsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdInstitutionsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Institution];
      return this.apiClient.callApi(
        '/users/{id}/institutions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdInstitutionsPost operation.
     * @callback module:api/InstitutionsApi~usersIdInstitutionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Institution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create institution in user
     * Creates an institution belonging to a user.
     * @param {Number} id The unique identifier of the user
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersIdInstitutionsPostRequest} [usersIdInstitutionsPostRequest] 
     * @param {module:api/InstitutionsApi~usersIdInstitutionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Institution}
     */
    usersIdInstitutionsPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['usersIdInstitutionsPostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdInstitutionsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['developerKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Institution;
      return this.apiClient.callApi(
        '/users/{id}/institutions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
