/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Period from './Period';

/**
 * The BudgetAnalysis model module.
 * @module model/BudgetAnalysis
 * @version 2.0
 */
class BudgetAnalysis {
    /**
     * Constructs a new <code>BudgetAnalysis</code>.
     * @alias module:model/BudgetAnalysis
     */
    constructor() { 
        
        BudgetAnalysis.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BudgetAnalysis</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BudgetAnalysis} obj Optional instance to populate.
     * @return {module:model/BudgetAnalysis} The populated <code>BudgetAnalysis</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BudgetAnalysis();

            if (data.hasOwnProperty('average_actual_amount')) {
                obj['average_actual_amount'] = ApiClient.convertToType(data['average_actual_amount'], 'Number');
            }
            if (data.hasOwnProperty('average_forecast_amount')) {
                obj['average_forecast_amount'] = ApiClient.convertToType(data['average_forecast_amount'], 'Number');
            }
            if (data.hasOwnProperty('currency_code')) {
                obj['currency_code'] = ApiClient.convertToType(data['currency_code'], 'String');
            }
            if (data.hasOwnProperty('end_date')) {
                obj['end_date'] = ApiClient.convertToType(data['end_date'], 'String');
            }
            if (data.hasOwnProperty('periods')) {
                obj['periods'] = ApiClient.convertToType(data['periods'], [Period]);
            }
            if (data.hasOwnProperty('start_date')) {
                obj['start_date'] = ApiClient.convertToType(data['start_date'], 'String');
            }
            if (data.hasOwnProperty('total_actual_amount')) {
                obj['total_actual_amount'] = ApiClient.convertToType(data['total_actual_amount'], 'Number');
            }
            if (data.hasOwnProperty('total_forecast_amount')) {
                obj['total_forecast_amount'] = ApiClient.convertToType(data['total_forecast_amount'], 'Number');
            }
            if (data.hasOwnProperty('total_over_by')) {
                obj['total_over_by'] = ApiClient.convertToType(data['total_over_by'], 'Number');
            }
            if (data.hasOwnProperty('total_under_by')) {
                obj['total_under_by'] = ApiClient.convertToType(data['total_under_by'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BudgetAnalysis</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BudgetAnalysis</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['currency_code'] && !(typeof data['currency_code'] === 'string' || data['currency_code'] instanceof String)) {
            throw new Error("Expected the field `currency_code` to be a primitive type in the JSON string but got " + data['currency_code']);
        }
        // ensure the json data is a string
        if (data['end_date'] && !(typeof data['end_date'] === 'string' || data['end_date'] instanceof String)) {
            throw new Error("Expected the field `end_date` to be a primitive type in the JSON string but got " + data['end_date']);
        }
        if (data['periods']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['periods'])) {
                throw new Error("Expected the field `periods` to be an array in the JSON data but got " + data['periods']);
            }
            // validate the optional field `periods` (array)
            for (const item of data['periods']) {
                Period.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['start_date'] && !(typeof data['start_date'] === 'string' || data['start_date'] instanceof String)) {
            throw new Error("Expected the field `start_date` to be a primitive type in the JSON string but got " + data['start_date']);
        }

        return true;
    }


}



/**
 * The average actual (transactions) amount across all periods.
 * @member {Number} average_actual_amount
 */
BudgetAnalysis.prototype['average_actual_amount'] = undefined;

/**
 * The average budgeted amount across all periods.
 * @member {Number} average_forecast_amount
 */
BudgetAnalysis.prototype['average_forecast_amount'] = undefined;

/**
 * The currency of the budget analysis.
 * @member {String} currency_code
 */
BudgetAnalysis.prototype['currency_code'] = undefined;

/**
 * The end date of the budget analysis.
 * @member {String} end_date
 */
BudgetAnalysis.prototype['end_date'] = undefined;

/**
 * The period analyses that this budget analysis comprises.
 * @member {Array.<module:model/Period>} periods
 */
BudgetAnalysis.prototype['periods'] = undefined;

/**
 * The start date of the budget analysis.
 * @member {String} start_date
 */
BudgetAnalysis.prototype['start_date'] = undefined;

/**
 * The total actual (transactions) amount across all periods.
 * @member {Number} total_actual_amount
 */
BudgetAnalysis.prototype['total_actual_amount'] = undefined;

/**
 * The total budgeted amount across all periods.
 * @member {Number} total_forecast_amount
 */
BudgetAnalysis.prototype['total_forecast_amount'] = undefined;

/**
 * The total amount the budget was exceeded across all periods.
 * @member {Number} total_over_by
 */
BudgetAnalysis.prototype['total_over_by'] = undefined;

/**
 * The total amount the budget was under by across all periods.
 * @member {Number} total_under_by
 */
BudgetAnalysis.prototype['total_under_by'] = undefined;






export default BudgetAnalysis;

