/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventsIdPutRequest model module.
 * @module model/EventsIdPutRequest
 * @version 2.0
 */
class EventsIdPutRequest {
    /**
     * Constructs a new <code>EventsIdPutRequest</code>.
     * @alias module:model/EventsIdPutRequest
     * @param behaviour {module:model/EventsIdPutRequest.BehaviourEnum} Whether the update applies only to this event, to all events within the series from this event or to all events within the series.
     */
    constructor(behaviour) { 
        
        EventsIdPutRequest.initialize(this, behaviour);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, behaviour) { 
        obj['behaviour'] = behaviour;
    }

    /**
     * Constructs a <code>EventsIdPutRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventsIdPutRequest} obj Optional instance to populate.
     * @return {module:model/EventsIdPutRequest} The populated <code>EventsIdPutRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventsIdPutRequest();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('behaviour')) {
                obj['behaviour'] = ApiClient.convertToType(data['behaviour'], 'String');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('repeat_interval')) {
                obj['repeat_interval'] = ApiClient.convertToType(data['repeat_interval'], 'Number');
            }
            if (data.hasOwnProperty('repeat_type')) {
                obj['repeat_type'] = ApiClient.convertToType(data['repeat_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventsIdPutRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventsIdPutRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventsIdPutRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['behaviour'] && !(typeof data['behaviour'] === 'string' || data['behaviour'] instanceof String)) {
            throw new Error("Expected the field `behaviour` to be a primitive type in the JSON string but got " + data['behaviour']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['repeat_type'] && !(typeof data['repeat_type'] === 'string' || data['repeat_type'] instanceof String)) {
            throw new Error("Expected the field `repeat_type` to be a primitive type in the JSON string but got " + data['repeat_type']);
        }

        return true;
    }


}

EventsIdPutRequest.RequiredProperties = ["behaviour"];

/**
 * The amount of the event. A positive amount is a credit, and a negative amount is a debit.
 * @member {Number} amount
 */
EventsIdPutRequest.prototype['amount'] = undefined;

/**
 * Whether the update applies only to this event, to all events within the series from this event or to all events within the series.
 * @member {module:model/EventsIdPutRequest.BehaviourEnum} behaviour
 */
EventsIdPutRequest.prototype['behaviour'] = undefined;

/**
 * A note for the event.
 * @member {String} note
 */
EventsIdPutRequest.prototype['note'] = undefined;

/**
 * The repeat interval of the event.
 * @member {Number} repeat_interval
 */
EventsIdPutRequest.prototype['repeat_interval'] = undefined;

/**
 * The repeat type of the event.
 * @member {module:model/EventsIdPutRequest.RepeatTypeEnum} repeat_type
 */
EventsIdPutRequest.prototype['repeat_type'] = undefined;





/**
 * Allowed values for the <code>behaviour</code> property.
 * @enum {String}
 * @readonly
 */
EventsIdPutRequest['BehaviourEnum'] = {

    /**
     * value: "one"
     * @const
     */
    "one": "one",

    /**
     * value: "forward"
     * @const
     */
    "forward": "forward",

    /**
     * value: "all"
     * @const
     */
    "all": "all"
};


/**
 * Allowed values for the <code>repeat_type</code> property.
 * @enum {String}
 * @readonly
 */
EventsIdPutRequest['RepeatTypeEnum'] = {

    /**
     * value: "once"
     * @const
     */
    "once": "once",

    /**
     * value: "daily"
     * @const
     */
    "daily": "daily",

    /**
     * value: "weekly"
     * @const
     */
    "weekly": "weekly",

    /**
     * value: "fortnightly"
     * @const
     */
    "fortnightly": "fortnightly",

    /**
     * value: "monthly"
     * @const
     */
    "monthly": "monthly",

    /**
     * value: "yearly"
     * @const
     */
    "yearly": "yearly",

    /**
     * value: "each weekday"
     * @const
     */
    "each weekday": "each weekday"
};



export default EventsIdPutRequest;

