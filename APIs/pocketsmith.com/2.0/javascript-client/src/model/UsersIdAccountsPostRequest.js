/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UsersIdAccountsPostRequest model module.
 * @module model/UsersIdAccountsPostRequest
 * @version 2.0
 */
class UsersIdAccountsPostRequest {
    /**
     * Constructs a new <code>UsersIdAccountsPostRequest</code>.
     * @alias module:model/UsersIdAccountsPostRequest
     * @param currencyCode {String} A currency code for the account.
     * @param institutionId {Number} The ID of the institution to create this account in.
     * @param title {String} A title for the account.
     * @param type {module:model/UsersIdAccountsPostRequest.TypeEnum} The type of the account.
     */
    constructor(currencyCode, institutionId, title, type) { 
        
        UsersIdAccountsPostRequest.initialize(this, currencyCode, institutionId, title, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currencyCode, institutionId, title, type) { 
        obj['currency_code'] = currencyCode;
        obj['institution_id'] = institutionId;
        obj['title'] = title;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>UsersIdAccountsPostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UsersIdAccountsPostRequest} obj Optional instance to populate.
     * @return {module:model/UsersIdAccountsPostRequest} The populated <code>UsersIdAccountsPostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UsersIdAccountsPostRequest();

            if (data.hasOwnProperty('currency_code')) {
                obj['currency_code'] = ApiClient.convertToType(data['currency_code'], 'String');
            }
            if (data.hasOwnProperty('institution_id')) {
                obj['institution_id'] = ApiClient.convertToType(data['institution_id'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UsersIdAccountsPostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UsersIdAccountsPostRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UsersIdAccountsPostRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['currency_code'] && !(typeof data['currency_code'] === 'string' || data['currency_code'] instanceof String)) {
            throw new Error("Expected the field `currency_code` to be a primitive type in the JSON string but got " + data['currency_code']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

UsersIdAccountsPostRequest.RequiredProperties = ["currency_code", "institution_id", "title", "type"];

/**
 * A currency code for the account.
 * @member {String} currency_code
 */
UsersIdAccountsPostRequest.prototype['currency_code'] = undefined;

/**
 * The ID of the institution to create this account in.
 * @member {Number} institution_id
 */
UsersIdAccountsPostRequest.prototype['institution_id'] = undefined;

/**
 * A title for the account.
 * @member {String} title
 */
UsersIdAccountsPostRequest.prototype['title'] = undefined;

/**
 * The type of the account.
 * @member {module:model/UsersIdAccountsPostRequest.TypeEnum} type
 */
UsersIdAccountsPostRequest.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
UsersIdAccountsPostRequest['TypeEnum'] = {

    /**
     * value: "bank"
     * @const
     */
    "bank": "bank",

    /**
     * value: "credits"
     * @const
     */
    "credits": "credits",

    /**
     * value: "cash"
     * @const
     */
    "cash": "cash",

    /**
     * value: "loans"
     * @const
     */
    "loans": "loans",

    /**
     * value: "mortgage"
     * @const
     */
    "mortgage": "mortgage",

    /**
     * value: "stocks"
     * @const
     */
    "stocks": "stocks",

    /**
     * value: "vehicle"
     * @const
     */
    "vehicle": "vehicle",

    /**
     * value: "property"
     * @const
     */
    "property": "property",

    /**
     * value: "insurance"
     * @const
     */
    "insurance": "insurance",

    /**
     * value: "other_asset"
     * @const
     */
    "other_asset": "other_asset",

    /**
     * value: "other_liability"
     * @const
     */
    "other_liability": "other_liability"
};



export default UsersIdAccountsPostRequest;

