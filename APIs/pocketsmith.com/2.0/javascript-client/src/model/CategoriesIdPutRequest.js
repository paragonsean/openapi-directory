/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CategoriesIdPutRequest model module.
 * @module model/CategoriesIdPutRequest
 * @version 2.0
 */
class CategoriesIdPutRequest {
    /**
     * Constructs a new <code>CategoriesIdPutRequest</code>.
     * @alias module:model/CategoriesIdPutRequest
     */
    constructor() { 
        
        CategoriesIdPutRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CategoriesIdPutRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CategoriesIdPutRequest} obj Optional instance to populate.
     * @return {module:model/CategoriesIdPutRequest} The populated <code>CategoriesIdPutRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CategoriesIdPutRequest();

            if (data.hasOwnProperty('colour')) {
                obj['colour'] = ApiClient.convertToType(data['colour'], 'String');
            }
            if (data.hasOwnProperty('is_bill')) {
                obj['is_bill'] = ApiClient.convertToType(data['is_bill'], 'Boolean');
            }
            if (data.hasOwnProperty('is_transfer')) {
                obj['is_transfer'] = ApiClient.convertToType(data['is_transfer'], 'Boolean');
            }
            if (data.hasOwnProperty('parent_id')) {
                obj['parent_id'] = ApiClient.convertToType(data['parent_id'], 'Number');
            }
            if (data.hasOwnProperty('refund_behaviour')) {
                obj['refund_behaviour'] = ApiClient.convertToType(data['refund_behaviour'], 'String');
            }
            if (data.hasOwnProperty('roll_up')) {
                obj['roll_up'] = ApiClient.convertToType(data['roll_up'], 'Boolean');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CategoriesIdPutRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CategoriesIdPutRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['colour'] && !(typeof data['colour'] === 'string' || data['colour'] instanceof String)) {
            throw new Error("Expected the field `colour` to be a primitive type in the JSON string but got " + data['colour']);
        }
        // ensure the json data is a string
        if (data['refund_behaviour'] && !(typeof data['refund_behaviour'] === 'string' || data['refund_behaviour'] instanceof String)) {
            throw new Error("Expected the field `refund_behaviour` to be a primitive type in the JSON string but got " + data['refund_behaviour']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * A new CSS-style hex colour for the category.
 * @member {String} colour
 */
CategoriesIdPutRequest.prototype['colour'] = undefined;

/**
 * Set the category as a bill category.
 * @member {Boolean} is_bill
 */
CategoriesIdPutRequest.prototype['is_bill'] = undefined;

/**
 * Set the category as a transfer category.
 * @member {Boolean} is_transfer
 */
CategoriesIdPutRequest.prototype['is_transfer'] = undefined;

/**
 * The unique identifier of a parent category for the category, making this category a child of that category.
 * @member {Number} parent_id
 */
CategoriesIdPutRequest.prototype['parent_id'] = undefined;

/**
 * Set the refund behaviour of the category.
 * @member {module:model/CategoriesIdPutRequest.RefundBehaviourEnum} refund_behaviour
 */
CategoriesIdPutRequest.prototype['refund_behaviour'] = undefined;

/**
 * Set the category to be rolled up into its parent category.
 * @member {Boolean} roll_up
 */
CategoriesIdPutRequest.prototype['roll_up'] = undefined;

/**
 * A new title for the category.
 * @member {String} title
 */
CategoriesIdPutRequest.prototype['title'] = undefined;





/**
 * Allowed values for the <code>refund_behaviour</code> property.
 * @enum {String}
 * @readonly
 */
CategoriesIdPutRequest['RefundBehaviourEnum'] = {

    /**
     * value: "debits_are_deductions"
     * @const
     */
    "debits_are_deductions": "debits_are_deductions",

    /**
     * value: "credits_are_refunds"
     * @const
     */
    "credits_are_refunds": "credits_are_refunds"
};



export default CategoriesIdPutRequest;

