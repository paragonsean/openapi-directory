/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TimeZone model module.
 * @module model/TimeZone
 * @version 2.0
 */
class TimeZone {
    /**
     * Constructs a new <code>TimeZone</code>.
     * @alias module:model/TimeZone
     */
    constructor() { 
        
        TimeZone.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TimeZone</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimeZone} obj Optional instance to populate.
     * @return {module:model/TimeZone} The populated <code>TimeZone</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimeZone();

            if (data.hasOwnProperty('abbreviation')) {
                obj['abbreviation'] = ApiClient.convertToType(data['abbreviation'], 'String');
            }
            if (data.hasOwnProperty('formatted_name')) {
                obj['formatted_name'] = ApiClient.convertToType(data['formatted_name'], 'String');
            }
            if (data.hasOwnProperty('formatted_offset')) {
                obj['formatted_offset'] = ApiClient.convertToType(data['formatted_offset'], 'String');
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('utc_offset')) {
                obj['utc_offset'] = ApiClient.convertToType(data['utc_offset'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TimeZone</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TimeZone</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['abbreviation'] && !(typeof data['abbreviation'] === 'string' || data['abbreviation'] instanceof String)) {
            throw new Error("Expected the field `abbreviation` to be a primitive type in the JSON string but got " + data['abbreviation']);
        }
        // ensure the json data is a string
        if (data['formatted_name'] && !(typeof data['formatted_name'] === 'string' || data['formatted_name'] instanceof String)) {
            throw new Error("Expected the field `formatted_name` to be a primitive type in the JSON string but got " + data['formatted_name']);
        }
        // ensure the json data is a string
        if (data['formatted_offset'] && !(typeof data['formatted_offset'] === 'string' || data['formatted_offset'] instanceof String)) {
            throw new Error("Expected the field `formatted_offset` to be a primitive type in the JSON string but got " + data['formatted_offset']);
        }
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * The abbreviation of the time zone.
 * @member {String} abbreviation
 */
TimeZone.prototype['abbreviation'] = undefined;

/**
 * The formatted name of the time zone.
 * @member {String} formatted_name
 */
TimeZone.prototype['formatted_name'] = undefined;

/**
 * The formatted offset of the time zone.
 * @member {String} formatted_offset
 */
TimeZone.prototype['formatted_offset'] = undefined;

/**
 * The tz database name of the time zone.
 * @member {String} identifier
 */
TimeZone.prototype['identifier'] = undefined;

/**
 * The name of the time zone.
 * @member {String} name
 */
TimeZone.prototype['name'] = undefined;

/**
 * The time zone's UTC offset in seconds.
 * @member {Number} utc_offset
 */
TimeZone.prototype['utc_offset'] = undefined;






export default TimeZone;

