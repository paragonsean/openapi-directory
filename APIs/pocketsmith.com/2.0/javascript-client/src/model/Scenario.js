/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Scenario model module.
 * @module model/Scenario
 * @version 2.0
 */
class Scenario {
    /**
     * Constructs a new <code>Scenario</code>.
     * @alias module:model/Scenario
     */
    constructor() { 
        
        Scenario.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Scenario</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Scenario} obj Optional instance to populate.
     * @return {module:model/Scenario} The populated <code>Scenario</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Scenario();

            if (data.hasOwnProperty('achieve_date')) {
                obj['achieve_date'] = ApiClient.convertToType(data['achieve_date'], 'String');
            }
            if (data.hasOwnProperty('closing_balance')) {
                obj['closing_balance'] = ApiClient.convertToType(data['closing_balance'], 'Number');
            }
            if (data.hasOwnProperty('closing_balance_date')) {
                obj['closing_balance_date'] = ApiClient.convertToType(data['closing_balance_date'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('current_balance')) {
                obj['current_balance'] = ApiClient.convertToType(data['current_balance'], 'Number');
            }
            if (data.hasOwnProperty('current_balance_date')) {
                obj['current_balance_date'] = ApiClient.convertToType(data['current_balance_date'], 'String');
            }
            if (data.hasOwnProperty('current_balance_exchange_rate')) {
                obj['current_balance_exchange_rate'] = ApiClient.convertToType(data['current_balance_exchange_rate'], 'Number');
            }
            if (data.hasOwnProperty('current_balance_in_base_currency')) {
                obj['current_balance_in_base_currency'] = ApiClient.convertToType(data['current_balance_in_base_currency'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('interest_rate')) {
                obj['interest_rate'] = ApiClient.convertToType(data['interest_rate'], 'Number');
            }
            if (data.hasOwnProperty('interest_rate_repeat_id')) {
                obj['interest_rate_repeat_id'] = ApiClient.convertToType(data['interest_rate_repeat_id'], 'Number');
            }
            if (data.hasOwnProperty('maximum-value')) {
                obj['maximum-value'] = ApiClient.convertToType(data['maximum-value'], 'Number');
            }
            if (data.hasOwnProperty('minimum-value')) {
                obj['minimum-value'] = ApiClient.convertToType(data['minimum-value'], 'Number');
            }
            if (data.hasOwnProperty('safe_balance')) {
                obj['safe_balance'] = ApiClient.convertToType(data['safe_balance'], 'Number');
            }
            if (data.hasOwnProperty('safe_balance_in_base_currency')) {
                obj['safe_balance_in_base_currency'] = ApiClient.convertToType(data['safe_balance_in_base_currency'], 'Number');
            }
            if (data.hasOwnProperty('starting_balance')) {
                obj['starting_balance'] = ApiClient.convertToType(data['starting_balance'], 'Number');
            }
            if (data.hasOwnProperty('starting_balance_date')) {
                obj['starting_balance_date'] = ApiClient.convertToType(data['starting_balance_date'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Scenario</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Scenario</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['achieve_date'] && !(typeof data['achieve_date'] === 'string' || data['achieve_date'] instanceof String)) {
            throw new Error("Expected the field `achieve_date` to be a primitive type in the JSON string but got " + data['achieve_date']);
        }
        // ensure the json data is a string
        if (data['closing_balance_date'] && !(typeof data['closing_balance_date'] === 'string' || data['closing_balance_date'] instanceof String)) {
            throw new Error("Expected the field `closing_balance_date` to be a primitive type in the JSON string but got " + data['closing_balance_date']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['current_balance_date'] && !(typeof data['current_balance_date'] === 'string' || data['current_balance_date'] instanceof String)) {
            throw new Error("Expected the field `current_balance_date` to be a primitive type in the JSON string but got " + data['current_balance_date']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['starting_balance_date'] && !(typeof data['starting_balance_date'] === 'string' || data['starting_balance_date'] instanceof String)) {
            throw new Error("Expected the field `starting_balance_date` to be a primitive type in the JSON string but got " + data['starting_balance_date']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}



/**
 * For goals, the date that they should be achieved by.
 * @member {String} achieve_date
 */
Scenario.prototype['achieve_date'] = undefined;

/**
 * The closing balance of the scenario.
 * @member {Number} closing_balance
 */
Scenario.prototype['closing_balance'] = undefined;

/**
 * The date of the closing balance.
 * @member {String} closing_balance_date
 */
Scenario.prototype['closing_balance_date'] = undefined;

/**
 * When the scenario was created.
 * @member {String} created_at
 */
Scenario.prototype['created_at'] = undefined;

/**
 * The current balance of the scenario.
 * @member {Number} current_balance
 */
Scenario.prototype['current_balance'] = undefined;

/**
 * The date of the current balance.
 * @member {String} current_balance_date
 */
Scenario.prototype['current_balance_date'] = undefined;

/**
 * The exchange rate between the scenario's currency and the user's base currency, when different. If the currencies are the same, null is returned.
 * @member {Number} current_balance_exchange_rate
 */
Scenario.prototype['current_balance_exchange_rate'] = undefined;

/**
 * The current balance of the scenario in the user's base currency.
 * @member {Number} current_balance_in_base_currency
 */
Scenario.prototype['current_balance_in_base_currency'] = undefined;

/**
 * A short description of what the scenario is modelling.
 * @member {String} description
 */
Scenario.prototype['description'] = undefined;

/**
 * The unique identifier of the scenario.
 * @member {Number} id
 */
Scenario.prototype['id'] = undefined;

/**
 * The amount of interest to apply to the balance. Will apply periodically depending on what `interest_rate_repeat_id` is set to.
 * @member {Number} interest_rate
 */
Scenario.prototype['interest_rate'] = undefined;

/**
 * A number representing how often the interest should be applied. 0 is used for no interest, 2 is weekly, 3 is fortnightly, 4 is monthly, 5 is yearly and 7 for quarterly.
 * @member {Number} interest_rate_repeat_id
 */
Scenario.prototype['interest_rate_repeat_id'] = undefined;

/**
 * @member {Number} maximum-value
 */
Scenario.prototype['maximum-value'] = undefined;

/**
 * @member {Number} minimum-value
 */
Scenario.prototype['minimum-value'] = undefined;

/**
 * The current safe balance in the user's base currency, if safe balance is activated on the account associated with the scenario. If safe balance is not activated, then null is returned.
 * @member {Number} safe_balance
 */
Scenario.prototype['safe_balance'] = undefined;

/**
 * The current safe balance in the user's base currency, if safe balance is activated on the account associated with the scenario. If safe balance is not available, then null is returned.
 * @member {Number} safe_balance_in_base_currency
 */
Scenario.prototype['safe_balance_in_base_currency'] = undefined;

/**
 * The starting balance of the scenario.
 * @member {Number} starting_balance
 */
Scenario.prototype['starting_balance'] = undefined;

/**
 * The date of the starting balance.
 * @member {String} starting_balance_date
 */
Scenario.prototype['starting_balance_date'] = undefined;

/**
 * The title of the scenario.
 * @member {String} title
 */
Scenario.prototype['title'] = undefined;

/**
 * The type of the scenario.
 * @member {module:model/Scenario.TypeEnum} type
 */
Scenario.prototype['type'] = undefined;

/**
 * When the scenario was last updated.
 * @member {String} updated_at
 */
Scenario.prototype['updated_at'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Scenario['TypeEnum'] = {

    /**
     * value: "no-interest"
     * @const
     */
    "no-interest": "no-interest",

    /**
     * value: "savings"
     * @const
     */
    "savings": "savings",

    /**
     * value: "debt"
     * @const
     */
    "debt": "debt"
};



export default Scenario;

