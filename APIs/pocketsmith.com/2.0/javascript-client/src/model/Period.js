/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Period model module.
 * @module model/Period
 * @version 2.0
 */
class Period {
    /**
     * Constructs a new <code>Period</code>.
     * @alias module:model/Period
     */
    constructor() { 
        
        Period.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Period</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Period} obj Optional instance to populate.
     * @return {module:model/Period} The populated <code>Period</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Period();

            if (data.hasOwnProperty('actual_amount')) {
                obj['actual_amount'] = ApiClient.convertToType(data['actual_amount'], 'Number');
            }
            if (data.hasOwnProperty('currency_code')) {
                obj['currency_code'] = ApiClient.convertToType(data['currency_code'], 'String');
            }
            if (data.hasOwnProperty('current')) {
                obj['current'] = ApiClient.convertToType(data['current'], 'Boolean');
            }
            if (data.hasOwnProperty('end_date')) {
                obj['end_date'] = ApiClient.convertToType(data['end_date'], 'String');
            }
            if (data.hasOwnProperty('forecast_amount')) {
                obj['forecast_amount'] = ApiClient.convertToType(data['forecast_amount'], 'Number');
            }
            if (data.hasOwnProperty('over_budget')) {
                obj['over_budget'] = ApiClient.convertToType(data['over_budget'], 'Boolean');
            }
            if (data.hasOwnProperty('over_by')) {
                obj['over_by'] = ApiClient.convertToType(data['over_by'], 'Number');
            }
            if (data.hasOwnProperty('percentage_used')) {
                obj['percentage_used'] = ApiClient.convertToType(data['percentage_used'], 'Number');
            }
            if (data.hasOwnProperty('refund_amount')) {
                obj['refund_amount'] = ApiClient.convertToType(data['refund_amount'], 'Number');
            }
            if (data.hasOwnProperty('start_date')) {
                obj['start_date'] = ApiClient.convertToType(data['start_date'], 'String');
            }
            if (data.hasOwnProperty('under_budget')) {
                obj['under_budget'] = ApiClient.convertToType(data['under_budget'], 'Boolean');
            }
            if (data.hasOwnProperty('under_by')) {
                obj['under_by'] = ApiClient.convertToType(data['under_by'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Period</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Period</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['currency_code'] && !(typeof data['currency_code'] === 'string' || data['currency_code'] instanceof String)) {
            throw new Error("Expected the field `currency_code` to be a primitive type in the JSON string but got " + data['currency_code']);
        }
        // ensure the json data is a string
        if (data['end_date'] && !(typeof data['end_date'] === 'string' || data['end_date'] instanceof String)) {
            throw new Error("Expected the field `end_date` to be a primitive type in the JSON string but got " + data['end_date']);
        }
        // ensure the json data is a string
        if (data['start_date'] && !(typeof data['start_date'] === 'string' || data['start_date'] instanceof String)) {
            throw new Error("Expected the field `start_date` to be a primitive type in the JSON string but got " + data['start_date']);
        }

        return true;
    }


}



/**
 * The sum of all actuals (transactions) in the period.
 * @member {Number} actual_amount
 */
Period.prototype['actual_amount'] = undefined;

/**
 * The currency of the period.
 * @member {String} currency_code
 */
Period.prototype['currency_code'] = undefined;

/**
 * Whether this period is current, such that the current date (in the user's time zone) falls within the date range.
 * @member {Boolean} current
 */
Period.prototype['current'] = undefined;

/**
 * The end date of the period.
 * @member {String} end_date
 */
Period.prototype['end_date'] = undefined;

/**
 * The sum of all forecast sources (budget events) in the period, for comparison against the actual amount.
 * @member {Number} forecast_amount
 */
Period.prototype['forecast_amount'] = undefined;

/**
 * Whether the budget has been exceeded in the period.
 * @member {Boolean} over_budget
 */
Period.prototype['over_budget'] = undefined;

/**
 * How much the budget has been exceeded by in the period.
 * @member {Number} over_by
 */
Period.prototype['over_by'] = undefined;

/**
 * The percentage of the budget that has been used in the period.
 * @member {Number} percentage_used
 */
Period.prototype['percentage_used'] = undefined;

/**
 * This attribute tracks the amount that has been refunded or deducted to the actual amount. When a category is set to \"always expense\", any credit transactions are treated as refunds and when set to \"always income\", any debit transactions are treated as deductions.
 * @member {Number} refund_amount
 */
Period.prototype['refund_amount'] = undefined;

/**
 * The start date of the period.
 * @member {String} start_date
 */
Period.prototype['start_date'] = undefined;

/**
 * Whether the budget has not been exceeded in the period.
 * @member {Boolean} under_budget
 */
Period.prototype['under_budget'] = undefined;

/**
 * How much there is left in the budget for the period.
 * @member {Number} under_by
 */
Period.prototype['under_by'] = undefined;






export default Period;

