/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TransactionAccountsIdTransactionsPostRequest model module.
 * @module model/TransactionAccountsIdTransactionsPostRequest
 * @version 2.0
 */
class TransactionAccountsIdTransactionsPostRequest {
    /**
     * Constructs a new <code>TransactionAccountsIdTransactionsPostRequest</code>.
     * @alias module:model/TransactionAccountsIdTransactionsPostRequest
     * @param amount {Number} The amount of the transaction. A positive amount is a credit, and a negative amount is a debit.
     * @param date {String} The date when the transaction occurred.
     * @param payee {String} The payee/merchant of the transaction.
     */
    constructor(amount, date, payee) { 
        
        TransactionAccountsIdTransactionsPostRequest.initialize(this, amount, date, payee);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, date, payee) { 
        obj['amount'] = amount;
        obj['date'] = date;
        obj['payee'] = payee;
    }

    /**
     * Constructs a <code>TransactionAccountsIdTransactionsPostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionAccountsIdTransactionsPostRequest} obj Optional instance to populate.
     * @return {module:model/TransactionAccountsIdTransactionsPostRequest} The populated <code>TransactionAccountsIdTransactionsPostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionAccountsIdTransactionsPostRequest();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('category_id')) {
                obj['category_id'] = ApiClient.convertToType(data['category_id'], 'Number');
            }
            if (data.hasOwnProperty('cheque_number')) {
                obj['cheque_number'] = ApiClient.convertToType(data['cheque_number'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'String');
            }
            if (data.hasOwnProperty('is_transfer')) {
                obj['is_transfer'] = ApiClient.convertToType(data['is_transfer'], 'Boolean');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], 'String');
            }
            if (data.hasOwnProperty('memo')) {
                obj['memo'] = ApiClient.convertToType(data['memo'], 'String');
            }
            if (data.hasOwnProperty('needs_review')) {
                obj['needs_review'] = ApiClient.convertToType(data['needs_review'], 'Boolean');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('payee')) {
                obj['payee'] = ApiClient.convertToType(data['payee'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionAccountsIdTransactionsPostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionAccountsIdTransactionsPostRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransactionAccountsIdTransactionsPostRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['cheque_number'] && !(typeof data['cheque_number'] === 'string' || data['cheque_number'] instanceof String)) {
            throw new Error("Expected the field `cheque_number` to be a primitive type in the JSON string but got " + data['cheque_number']);
        }
        // ensure the json data is a string
        if (data['date'] && !(typeof data['date'] === 'string' || data['date'] instanceof String)) {
            throw new Error("Expected the field `date` to be a primitive type in the JSON string but got " + data['date']);
        }
        // ensure the json data is a string
        if (data['labels'] && !(typeof data['labels'] === 'string' || data['labels'] instanceof String)) {
            throw new Error("Expected the field `labels` to be a primitive type in the JSON string but got " + data['labels']);
        }
        // ensure the json data is a string
        if (data['memo'] && !(typeof data['memo'] === 'string' || data['memo'] instanceof String)) {
            throw new Error("Expected the field `memo` to be a primitive type in the JSON string but got " + data['memo']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['payee'] && !(typeof data['payee'] === 'string' || data['payee'] instanceof String)) {
            throw new Error("Expected the field `payee` to be a primitive type in the JSON string but got " + data['payee']);
        }

        return true;
    }


}

TransactionAccountsIdTransactionsPostRequest.RequiredProperties = ["amount", "date", "payee"];

/**
 * The amount of the transaction. A positive amount is a credit, and a negative amount is a debit.
 * @member {Number} amount
 */
TransactionAccountsIdTransactionsPostRequest.prototype['amount'] = undefined;

/**
 * The unique identifier of a category for the transaction.
 * @member {Number} category_id
 */
TransactionAccountsIdTransactionsPostRequest.prototype['category_id'] = undefined;

/**
 * A cheque number for the transaction.
 * @member {String} cheque_number
 */
TransactionAccountsIdTransactionsPostRequest.prototype['cheque_number'] = undefined;

/**
 * The date when the transaction occurred.
 * @member {String} date
 */
TransactionAccountsIdTransactionsPostRequest.prototype['date'] = undefined;

/**
 * Whether the transaction should be indicated as a transfer.
 * @member {Boolean} is_transfer
 */
TransactionAccountsIdTransactionsPostRequest.prototype['is_transfer'] = undefined;

/**
 * A set of comma-separated labels for the transaction.
 * @member {String} labels
 */
TransactionAccountsIdTransactionsPostRequest.prototype['labels'] = undefined;

/**
 * A memo for the transaction.
 * @member {String} memo
 */
TransactionAccountsIdTransactionsPostRequest.prototype['memo'] = undefined;

/**
 * Whether the transaction needs to be reviewed or not.
 * @member {Boolean} needs_review
 */
TransactionAccountsIdTransactionsPostRequest.prototype['needs_review'] = undefined;

/**
 * A note for the transaction.
 * @member {String} note
 */
TransactionAccountsIdTransactionsPostRequest.prototype['note'] = undefined;

/**
 * The payee/merchant of the transaction.
 * @member {String} payee
 */
TransactionAccountsIdTransactionsPostRequest.prototype['payee'] = undefined;






export default TransactionAccountsIdTransactionsPostRequest;

