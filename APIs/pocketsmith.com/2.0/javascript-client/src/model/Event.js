/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Category from './Category';
import Scenario from './Scenario';

/**
 * The Event model module.
 * @module model/Event
 * @version 2.0
 */
class Event {
    /**
     * Constructs a new <code>Event</code>.
     * @alias module:model/Event
     */
    constructor() { 
        
        Event.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Event</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Event} obj Optional instance to populate.
     * @return {module:model/Event} The populated <code>Event</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Event();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('amount_in_base_currency')) {
                obj['amount_in_base_currency'] = ApiClient.convertToType(data['amount_in_base_currency'], 'Number');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = Category.constructFromObject(data['category']);
            }
            if (data.hasOwnProperty('colour')) {
                obj['colour'] = ApiClient.convertToType(data['colour'], 'String');
            }
            if (data.hasOwnProperty('currency_code')) {
                obj['currency_code'] = ApiClient.convertToType(data['currency_code'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('infinite_series')) {
                obj['infinite_series'] = ApiClient.convertToType(data['infinite_series'], 'Boolean');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('repeat_interval')) {
                obj['repeat_interval'] = ApiClient.convertToType(data['repeat_interval'], 'Number');
            }
            if (data.hasOwnProperty('repeat_type')) {
                obj['repeat_type'] = ApiClient.convertToType(data['repeat_type'], 'String');
            }
            if (data.hasOwnProperty('scenario')) {
                obj['scenario'] = Scenario.constructFromObject(data['scenario']);
            }
            if (data.hasOwnProperty('series_id')) {
                obj['series_id'] = ApiClient.convertToType(data['series_id'], 'Number');
            }
            if (data.hasOwnProperty('series_start_id')) {
                obj['series_start_id'] = ApiClient.convertToType(data['series_start_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Event</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Event</code>.
     */
    static validateJSON(data) {
        // validate the optional field `category`
        if (data['category']) { // data not null
          Category.validateJSON(data['category']);
        }
        // ensure the json data is a string
        if (data['colour'] && !(typeof data['colour'] === 'string' || data['colour'] instanceof String)) {
            throw new Error("Expected the field `colour` to be a primitive type in the JSON string but got " + data['colour']);
        }
        // ensure the json data is a string
        if (data['currency_code'] && !(typeof data['currency_code'] === 'string' || data['currency_code'] instanceof String)) {
            throw new Error("Expected the field `currency_code` to be a primitive type in the JSON string but got " + data['currency_code']);
        }
        // ensure the json data is a string
        if (data['date'] && !(typeof data['date'] === 'string' || data['date'] instanceof String)) {
            throw new Error("Expected the field `date` to be a primitive type in the JSON string but got " + data['date']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['repeat_type'] && !(typeof data['repeat_type'] === 'string' || data['repeat_type'] instanceof String)) {
            throw new Error("Expected the field `repeat_type` to be a primitive type in the JSON string but got " + data['repeat_type']);
        }
        // validate the optional field `scenario`
        if (data['scenario']) { // data not null
          Scenario.validateJSON(data['scenario']);
        }
        // ensure the json data is a string
        if (data['series_start_id'] && !(typeof data['series_start_id'] === 'string' || data['series_start_id'] instanceof String)) {
            throw new Error("Expected the field `series_start_id` to be a primitive type in the JSON string but got " + data['series_start_id']);
        }

        return true;
    }


}



/**
 * The amount of the event.
 * @member {Number} amount
 */
Event.prototype['amount'] = undefined;

/**
 * The amount of the event in the user's base currency.
 * @member {Number} amount_in_base_currency
 */
Event.prototype['amount_in_base_currency'] = undefined;

/**
 * @member {module:model/Category} category
 */
Event.prototype['category'] = undefined;

/**
 * The CSS hex-style colour of the event.
 * @member {String} colour
 */
Event.prototype['colour'] = undefined;

/**
 * The currency code of the event.
 * @member {String} currency_code
 */
Event.prototype['currency_code'] = undefined;

/**
 * The date of the event.
 * @member {String} date
 */
Event.prototype['date'] = undefined;

/**
 * The unique identifier of the event.
 * @member {String} id
 */
Event.prototype['id'] = undefined;

/**
 * Whether the event repeats and does not have an end date.
 * @member {Boolean} infinite_series
 */
Event.prototype['infinite_series'] = undefined;

/**
 * The note of the event.
 * @member {String} note
 */
Event.prototype['note'] = undefined;

/**
 * The repeat interval of how often the event takes place.
 * @member {Number} repeat_interval
 */
Event.prototype['repeat_interval'] = undefined;

/**
 * The repeat type of the event.
 * @member {module:model/Event.RepeatTypeEnum} repeat_type
 */
Event.prototype['repeat_type'] = undefined;

/**
 * @member {module:model/Scenario} scenario
 */
Event.prototype['scenario'] = undefined;

/**
 * The unique identifier of the series that the event belongs to.
 * @member {Number} series_id
 */
Event.prototype['series_id'] = undefined;

/**
 * The unique identifier of the series followed by the series's start date.
 * @member {String} series_start_id
 */
Event.prototype['series_start_id'] = undefined;





/**
 * Allowed values for the <code>repeat_type</code> property.
 * @enum {String}
 * @readonly
 */
Event['RepeatTypeEnum'] = {

    /**
     * value: "once"
     * @const
     */
    "once": "once",

    /**
     * value: "daily"
     * @const
     */
    "daily": "daily",

    /**
     * value: "weekly"
     * @const
     */
    "weekly": "weekly",

    /**
     * value: "fortnightly"
     * @const
     */
    "fortnightly": "fortnightly",

    /**
     * value: "monthly"
     * @const
     */
    "monthly": "monthly",

    /**
     * value: "yearly"
     * @const
     */
    "yearly": "yearly",

    /**
     * value: "each weekday"
     * @const
     */
    "each weekday": "each weekday"
};



export default Event;

