/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Category from './Category';
import TransactionAccount from './TransactionAccount';

/**
 * The Transaction model module.
 * @module model/Transaction
 * @version 2.0
 */
class Transaction {
    /**
     * Constructs a new <code>Transaction</code>.
     * @alias module:model/Transaction
     */
    constructor() { 
        
        Transaction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transaction} obj Optional instance to populate.
     * @return {module:model/Transaction} The populated <code>Transaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transaction();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('amount_in_base_currency')) {
                obj['amount_in_base_currency'] = ApiClient.convertToType(data['amount_in_base_currency'], 'Number');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = Category.constructFromObject(data['category']);
            }
            if (data.hasOwnProperty('cheque_number')) {
                obj['cheque_number'] = ApiClient.convertToType(data['cheque_number'], 'String');
            }
            if (data.hasOwnProperty('closing_balance')) {
                obj['closing_balance'] = ApiClient.convertToType(data['closing_balance'], 'Number');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_transfer')) {
                obj['is_transfer'] = ApiClient.convertToType(data['is_transfer'], 'Boolean');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
            if (data.hasOwnProperty('memo')) {
                obj['memo'] = ApiClient.convertToType(data['memo'], 'String');
            }
            if (data.hasOwnProperty('needs_review')) {
                obj['needs_review'] = ApiClient.convertToType(data['needs_review'], 'Boolean');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('original_payee')) {
                obj['original_payee'] = ApiClient.convertToType(data['original_payee'], 'String');
            }
            if (data.hasOwnProperty('payee')) {
                obj['payee'] = ApiClient.convertToType(data['payee'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('transaction_account')) {
                obj['transaction_account'] = TransactionAccount.constructFromObject(data['transaction_account']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('upload_source')) {
                obj['upload_source'] = ApiClient.convertToType(data['upload_source'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Transaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Transaction</code>.
     */
    static validateJSON(data) {
        // validate the optional field `category`
        if (data['category']) { // data not null
          Category.validateJSON(data['category']);
        }
        // ensure the json data is a string
        if (data['cheque_number'] && !(typeof data['cheque_number'] === 'string' || data['cheque_number'] instanceof String)) {
            throw new Error("Expected the field `cheque_number` to be a primitive type in the JSON string but got " + data['cheque_number']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['date'] && !(typeof data['date'] === 'string' || data['date'] instanceof String)) {
            throw new Error("Expected the field `date` to be a primitive type in the JSON string but got " + data['date']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['labels'])) {
            throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
        }
        // ensure the json data is a string
        if (data['memo'] && !(typeof data['memo'] === 'string' || data['memo'] instanceof String)) {
            throw new Error("Expected the field `memo` to be a primitive type in the JSON string but got " + data['memo']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['original_payee'] && !(typeof data['original_payee'] === 'string' || data['original_payee'] instanceof String)) {
            throw new Error("Expected the field `original_payee` to be a primitive type in the JSON string but got " + data['original_payee']);
        }
        // ensure the json data is a string
        if (data['payee'] && !(typeof data['payee'] === 'string' || data['payee'] instanceof String)) {
            throw new Error("Expected the field `payee` to be a primitive type in the JSON string but got " + data['payee']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `transaction_account`
        if (data['transaction_account']) { // data not null
          TransactionAccount.validateJSON(data['transaction_account']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }
        // ensure the json data is a string
        if (data['upload_source'] && !(typeof data['upload_source'] === 'string' || data['upload_source'] instanceof String)) {
            throw new Error("Expected the field `upload_source` to be a primitive type in the JSON string but got " + data['upload_source']);
        }

        return true;
    }


}



/**
 * @member {Number} amount
 */
Transaction.prototype['amount'] = undefined;

/**
 * The amount of the transaction in the user's base currency.
 * @member {Number} amount_in_base_currency
 */
Transaction.prototype['amount_in_base_currency'] = undefined;

/**
 * @member {module:model/Category} category
 */
Transaction.prototype['category'] = undefined;

/**
 * @member {String} cheque_number
 */
Transaction.prototype['cheque_number'] = undefined;

/**
 * The closing balance of the account at the transaction.
 * @member {Number} closing_balance
 */
Transaction.prototype['closing_balance'] = undefined;

/**
 * When the transaction was created.
 * @member {String} created_at
 */
Transaction.prototype['created_at'] = undefined;

/**
 * The date the transaction took place.
 * @member {String} date
 */
Transaction.prototype['date'] = undefined;

/**
 * The unique identifier of the transaction.
 * @member {Number} id
 */
Transaction.prototype['id'] = undefined;

/**
 * Whether the transaction is a transfer.
 * @member {Boolean} is_transfer
 */
Transaction.prototype['is_transfer'] = undefined;

/**
 * @member {Array.<String>} labels
 */
Transaction.prototype['labels'] = undefined;

/**
 * @member {String} memo
 */
Transaction.prototype['memo'] = undefined;

/**
 * Whether the transaction needs to be reviewed.
 * @member {Boolean} needs_review
 */
Transaction.prototype['needs_review'] = undefined;

/**
 * @member {String} note
 */
Transaction.prototype['note'] = undefined;

/**
 * The payee the transaction was created with.
 * @member {String} original_payee
 */
Transaction.prototype['original_payee'] = undefined;

/**
 * The payee/merchant of the transaction.
 * @member {String} payee
 */
Transaction.prototype['payee'] = undefined;

/**
 * The status of the transaction. Pending transactions are temporary and may be superseded later by their posted counterparts, which are permanent.
 * @member {module:model/Transaction.StatusEnum} status
 */
Transaction.prototype['status'] = undefined;

/**
 * @member {module:model/TransactionAccount} transaction_account
 */
Transaction.prototype['transaction_account'] = undefined;

/**
 * Whether the transaction is a debit or a credit
 * @member {module:model/Transaction.TypeEnum} type
 */
Transaction.prototype['type'] = undefined;

/**
 * When the transaction was last updated.
 * @member {String} updated_at
 */
Transaction.prototype['updated_at'] = undefined;

/**
 * Where the transaction came from.
 * @member {String} upload_source
 */
Transaction.prototype['upload_source'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Transaction['StatusEnum'] = {

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "posted"
     * @const
     */
    "posted": "posted"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Transaction['TypeEnum'] = {

    /**
     * value: "debit"
     * @const
     */
    "debit": "debit",

    /**
     * value: "credit"
     * @const
     */
    "credit": "credit"
};



export default Transaction;

