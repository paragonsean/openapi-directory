/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttachmentContentTypeMeta from './AttachmentContentTypeMeta';
import AttachmentVariants from './AttachmentVariants';

/**
 * The Attachment model module.
 * @module model/Attachment
 * @version 2.0
 */
class Attachment {
    /**
     * Constructs a new <code>Attachment</code>.
     * @alias module:model/Attachment
     */
    constructor() { 
        
        Attachment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Attachment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Attachment} obj Optional instance to populate.
     * @return {module:model/Attachment} The populated <code>Attachment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Attachment();

            if (data.hasOwnProperty('content_type')) {
                obj['content_type'] = ApiClient.convertToType(data['content_type'], 'String');
            }
            if (data.hasOwnProperty('content_type_meta')) {
                obj['content_type_meta'] = AttachmentContentTypeMeta.constructFromObject(data['content_type_meta']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('file_name')) {
                obj['file_name'] = ApiClient.convertToType(data['file_name'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('original_url')) {
                obj['original_url'] = ApiClient.convertToType(data['original_url'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('variants')) {
                obj['variants'] = AttachmentVariants.constructFromObject(data['variants']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Attachment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Attachment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['content_type'] && !(typeof data['content_type'] === 'string' || data['content_type'] instanceof String)) {
            throw new Error("Expected the field `content_type` to be a primitive type in the JSON string but got " + data['content_type']);
        }
        // validate the optional field `content_type_meta`
        if (data['content_type_meta']) { // data not null
          AttachmentContentTypeMeta.validateJSON(data['content_type_meta']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['file_name'] && !(typeof data['file_name'] === 'string' || data['file_name'] instanceof String)) {
            throw new Error("Expected the field `file_name` to be a primitive type in the JSON string but got " + data['file_name']);
        }
        // ensure the json data is a string
        if (data['original_url'] && !(typeof data['original_url'] === 'string' || data['original_url'] instanceof String)) {
            throw new Error("Expected the field `original_url` to be a primitive type in the JSON string but got " + data['original_url']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }
        // validate the optional field `variants`
        if (data['variants']) { // data not null
          AttachmentVariants.validateJSON(data['variants']);
        }

        return true;
    }


}



/**
 * The content type of the attachment.
 * @member {String} content_type
 */
Attachment.prototype['content_type'] = undefined;

/**
 * @member {module:model/AttachmentContentTypeMeta} content_type_meta
 */
Attachment.prototype['content_type_meta'] = undefined;

/**
 * When the attachment was created.
 * @member {String} created_at
 */
Attachment.prototype['created_at'] = undefined;

/**
 * The file name of the attachment.
 * @member {String} file_name
 */
Attachment.prototype['file_name'] = undefined;

/**
 * The unique identifier of the attachment
 * @member {Number} id
 */
Attachment.prototype['id'] = undefined;

/**
 * The url of the attachment.
 * @member {String} original_url
 */
Attachment.prototype['original_url'] = undefined;

/**
 * The title of the attachment. If blank or not provided, the title will be derived from the file name.
 * @member {String} title
 */
Attachment.prototype['title'] = undefined;

/**
 * The type of attachment.
 * @member {String} type
 */
Attachment.prototype['type'] = undefined;

/**
 * When the attachment was last updated.
 * @member {String} updated_at
 */
Attachment.prototype['updated_at'] = undefined;

/**
 * @member {module:model/AttachmentVariants} variants
 */
Attachment.prototype['variants'] = undefined;






export default Attachment;

