/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UsersIdPutRequest model module.
 * @module model/UsersIdPutRequest
 * @version 2.0
 */
class UsersIdPutRequest {
    /**
     * Constructs a new <code>UsersIdPutRequest</code>.
     * @alias module:model/UsersIdPutRequest
     */
    constructor() { 
        
        UsersIdPutRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UsersIdPutRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UsersIdPutRequest} obj Optional instance to populate.
     * @return {module:model/UsersIdPutRequest} The populated <code>UsersIdPutRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UsersIdPutRequest();

            if (data.hasOwnProperty('always_show_base_currency')) {
                obj['always_show_base_currency'] = ApiClient.convertToType(data['always_show_base_currency'], 'Boolean');
            }
            if (data.hasOwnProperty('base_currency_code')) {
                obj['base_currency_code'] = ApiClient.convertToType(data['base_currency_code'], 'String');
            }
            if (data.hasOwnProperty('beta_user')) {
                obj['beta_user'] = ApiClient.convertToType(data['beta_user'], 'Boolean');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('time_zone')) {
                obj['time_zone'] = ApiClient.convertToType(data['time_zone'], 'String');
            }
            if (data.hasOwnProperty('week_start_day')) {
                obj['week_start_day'] = ApiClient.convertToType(data['week_start_day'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UsersIdPutRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UsersIdPutRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['base_currency_code'] && !(typeof data['base_currency_code'] === 'string' || data['base_currency_code'] instanceof String)) {
            throw new Error("Expected the field `base_currency_code` to be a primitive type in the JSON string but got " + data['base_currency_code']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['time_zone'] && !(typeof data['time_zone'] === 'string' || data['time_zone'] instanceof String)) {
            throw new Error("Expected the field `time_zone` to be a primitive type in the JSON string but got " + data['time_zone']);
        }

        return true;
    }


}



/**
 * Whether the user wishes to have all monetary values converted to their base currency.
 * @member {Boolean} always_show_base_currency
 */
UsersIdPutRequest.prototype['always_show_base_currency'] = undefined;

/**
 * A new base currency code for the user.
 * @member {String} base_currency_code
 */
UsersIdPutRequest.prototype['base_currency_code'] = undefined;

/**
 * Whether the user is a beta user, and wishes to try out new features.
 * @member {Boolean} beta_user
 */
UsersIdPutRequest.prototype['beta_user'] = undefined;

/**
 * A new email address for the user.
 * @member {String} email
 */
UsersIdPutRequest.prototype['email'] = undefined;

/**
 * A new name for the user.
 * @member {String} name
 */
UsersIdPutRequest.prototype['name'] = undefined;

/**
 * A new time zone for the user.
 * @member {String} time_zone
 */
UsersIdPutRequest.prototype['time_zone'] = undefined;

/**
 * The day of the week the user wishes their calendars to start on. A number between 0 and 6, where 0 is Sunday and 6 is Saturday.
 * @member {Number} week_start_day
 */
UsersIdPutRequest.prototype['week_start_day'] = undefined;






export default UsersIdPutRequest;

