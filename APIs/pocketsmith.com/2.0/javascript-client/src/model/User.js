/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The User model module.
 * @module model/User
 * @version 2.0
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * @alias module:model/User
     */
    constructor() { 
        
        User.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('always_show_base_currency')) {
                obj['always_show_base_currency'] = ApiClient.convertToType(data['always_show_base_currency'], 'Boolean');
            }
            if (data.hasOwnProperty('available_accounts')) {
                obj['available_accounts'] = ApiClient.convertToType(data['available_accounts'], 'Number');
            }
            if (data.hasOwnProperty('available_budgets')) {
                obj['available_budgets'] = ApiClient.convertToType(data['available_budgets'], 'Number');
            }
            if (data.hasOwnProperty('avatar_url')) {
                obj['avatar_url'] = ApiClient.convertToType(data['avatar_url'], 'String');
            }
            if (data.hasOwnProperty('base_currency_code')) {
                obj['base_currency_code'] = ApiClient.convertToType(data['base_currency_code'], 'String');
            }
            if (data.hasOwnProperty('beta_user')) {
                obj['beta_user'] = ApiClient.convertToType(data['beta_user'], 'Boolean');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('forecast_defer_recalculate')) {
                obj['forecast_defer_recalculate'] = ApiClient.convertToType(data['forecast_defer_recalculate'], 'Boolean');
            }
            if (data.hasOwnProperty('forecast_end_date')) {
                obj['forecast_end_date'] = ApiClient.convertToType(data['forecast_end_date'], 'String');
            }
            if (data.hasOwnProperty('forecast_last_accessed_at')) {
                obj['forecast_last_accessed_at'] = ApiClient.convertToType(data['forecast_last_accessed_at'], 'String');
            }
            if (data.hasOwnProperty('forecast_last_updated_at')) {
                obj['forecast_last_updated_at'] = ApiClient.convertToType(data['forecast_last_updated_at'], 'String');
            }
            if (data.hasOwnProperty('forecast_needs_recalculate')) {
                obj['forecast_needs_recalculate'] = ApiClient.convertToType(data['forecast_needs_recalculate'], 'Boolean');
            }
            if (data.hasOwnProperty('forecast_start_date')) {
                obj['forecast_start_date'] = ApiClient.convertToType(data['forecast_start_date'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_reviewing_transactions')) {
                obj['is_reviewing_transactions'] = ApiClient.convertToType(data['is_reviewing_transactions'], 'Boolean');
            }
            if (data.hasOwnProperty('last_activity_at')) {
                obj['last_activity_at'] = ApiClient.convertToType(data['last_activity_at'], 'String');
            }
            if (data.hasOwnProperty('last_logged_in_at')) {
                obj['last_logged_in_at'] = ApiClient.convertToType(data['last_logged_in_at'], 'String');
            }
            if (data.hasOwnProperty('login')) {
                obj['login'] = ApiClient.convertToType(data['login'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('time_zone')) {
                obj['time_zone'] = ApiClient.convertToType(data['time_zone'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('using_multiple_currencies')) {
                obj['using_multiple_currencies'] = ApiClient.convertToType(data['using_multiple_currencies'], 'Boolean');
            }
            if (data.hasOwnProperty('week_start_day')) {
                obj['week_start_day'] = ApiClient.convertToType(data['week_start_day'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['avatar_url'] && !(typeof data['avatar_url'] === 'string' || data['avatar_url'] instanceof String)) {
            throw new Error("Expected the field `avatar_url` to be a primitive type in the JSON string but got " + data['avatar_url']);
        }
        // ensure the json data is a string
        if (data['base_currency_code'] && !(typeof data['base_currency_code'] === 'string' || data['base_currency_code'] instanceof String)) {
            throw new Error("Expected the field `base_currency_code` to be a primitive type in the JSON string but got " + data['base_currency_code']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['forecast_end_date'] && !(typeof data['forecast_end_date'] === 'string' || data['forecast_end_date'] instanceof String)) {
            throw new Error("Expected the field `forecast_end_date` to be a primitive type in the JSON string but got " + data['forecast_end_date']);
        }
        // ensure the json data is a string
        if (data['forecast_last_accessed_at'] && !(typeof data['forecast_last_accessed_at'] === 'string' || data['forecast_last_accessed_at'] instanceof String)) {
            throw new Error("Expected the field `forecast_last_accessed_at` to be a primitive type in the JSON string but got " + data['forecast_last_accessed_at']);
        }
        // ensure the json data is a string
        if (data['forecast_last_updated_at'] && !(typeof data['forecast_last_updated_at'] === 'string' || data['forecast_last_updated_at'] instanceof String)) {
            throw new Error("Expected the field `forecast_last_updated_at` to be a primitive type in the JSON string but got " + data['forecast_last_updated_at']);
        }
        // ensure the json data is a string
        if (data['forecast_start_date'] && !(typeof data['forecast_start_date'] === 'string' || data['forecast_start_date'] instanceof String)) {
            throw new Error("Expected the field `forecast_start_date` to be a primitive type in the JSON string but got " + data['forecast_start_date']);
        }
        // ensure the json data is a string
        if (data['last_activity_at'] && !(typeof data['last_activity_at'] === 'string' || data['last_activity_at'] instanceof String)) {
            throw new Error("Expected the field `last_activity_at` to be a primitive type in the JSON string but got " + data['last_activity_at']);
        }
        // ensure the json data is a string
        if (data['last_logged_in_at'] && !(typeof data['last_logged_in_at'] === 'string' || data['last_logged_in_at'] instanceof String)) {
            throw new Error("Expected the field `last_logged_in_at` to be a primitive type in the JSON string but got " + data['last_logged_in_at']);
        }
        // ensure the json data is a string
        if (data['login'] && !(typeof data['login'] === 'string' || data['login'] instanceof String)) {
            throw new Error("Expected the field `login` to be a primitive type in the JSON string but got " + data['login']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['time_zone'] && !(typeof data['time_zone'] === 'string' || data['time_zone'] instanceof String)) {
            throw new Error("Expected the field `time_zone` to be a primitive type in the JSON string but got " + data['time_zone']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}



/**
 * Whether the user wants to see all accounts in their base currency instead of the native account currency.
 * @member {Boolean} always_show_base_currency
 */
User.prototype['always_show_base_currency'] = undefined;

/**
 * The user's total number of available accounts.
 * @member {Number} available_accounts
 */
User.prototype['available_accounts'] = undefined;

/**
 * The user's total number of available budgets.
 * @member {Number} available_budgets
 */
User.prototype['available_budgets'] = undefined;

/**
 * The URL to the user's avatar.
 * @member {String} avatar_url
 */
User.prototype['avatar_url'] = undefined;

/**
 * The user's base currency.
 * @member {String} base_currency_code
 */
User.prototype['base_currency_code'] = undefined;

/**
 * Whether the user has opted in to beta features.
 * @member {Boolean} beta_user
 */
User.prototype['beta_user'] = undefined;

/**
 * When the user signed up.
 * @member {String} created_at
 */
User.prototype['created_at'] = undefined;

/**
 * The user's email address.
 * @member {String} email
 */
User.prototype['email'] = undefined;

/**
 * Whether the user's forecast recalculation should be deferred.
 * @member {Boolean} forecast_defer_recalculate
 */
User.prototype['forecast_defer_recalculate'] = undefined;

/**
 * The date that the user's forecast ends.
 * @member {String} forecast_end_date
 */
User.prototype['forecast_end_date'] = undefined;

/**
 * When the user's forecast was last accessed.
 * @member {String} forecast_last_accessed_at
 */
User.prototype['forecast_last_accessed_at'] = undefined;

/**
 * When the user's forecast was last updated.
 * @member {String} forecast_last_updated_at
 */
User.prototype['forecast_last_updated_at'] = undefined;

/**
 * Whether the user's forecast needs to be recalculated.
 * @member {Boolean} forecast_needs_recalculate
 */
User.prototype['forecast_needs_recalculate'] = undefined;

/**
 * The date that the user's forecast starts.
 * @member {String} forecast_start_date
 */
User.prototype['forecast_start_date'] = undefined;

/**
 * The unique identifier of the user.
 * @member {Number} id
 */
User.prototype['id'] = undefined;

/**
 * Whether the user wants to review new transactions, transfer transactions or categorisation.
 * @member {Boolean} is_reviewing_transactions
 */
User.prototype['is_reviewing_transactions'] = undefined;

/**
 * When the user last interacted with PocketSmith, via any application or the API.
 * @member {String} last_activity_at
 */
User.prototype['last_activity_at'] = undefined;

/**
 * When the user last logged into PocketSmith.
 * @member {String} last_logged_in_at
 */
User.prototype['last_logged_in_at'] = undefined;

/**
 * The user's username.
 * @member {String} login
 */
User.prototype['login'] = undefined;

/**
 * The full name of the user, although not all users will have a name set.
 * @member {String} name
 */
User.prototype['name'] = undefined;

/**
 * The user's time zone.
 * @member {String} time_zone
 */
User.prototype['time_zone'] = undefined;

/**
 * When the user was last updated.
 * @member {String} updated_at
 */
User.prototype['updated_at'] = undefined;

/**
 * Whether the user has multiple currencies in use across their account.
 * @member {Boolean} using_multiple_currencies
 */
User.prototype['using_multiple_currencies'] = undefined;

/**
 * The day of the week the user wishes their calendars to start on. A number between 0 and 6, where 0 is Sunday and 6 is Saturday.
 * @member {Number} week_start_day
 */
User.prototype['week_start_day'] = undefined;






export default User;

