/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Scenario from './Scenario';
import TransactionAccount from './TransactionAccount';

/**
 * The Account model module.
 * @module model/Account
 * @version 2.0
 */
class Account {
    /**
     * Constructs a new <code>Account</code>.
     * @alias module:model/Account
     */
    constructor() { 
        
        Account.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Account</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Account} obj Optional instance to populate.
     * @return {module:model/Account} The populated <code>Account</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Account();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('currency_code')) {
                obj['currency_code'] = ApiClient.convertToType(data['currency_code'], 'String');
            }
            if (data.hasOwnProperty('current_balance')) {
                obj['current_balance'] = ApiClient.convertToType(data['current_balance'], 'Number');
            }
            if (data.hasOwnProperty('current_balance_date')) {
                obj['current_balance_date'] = ApiClient.convertToType(data['current_balance_date'], 'String');
            }
            if (data.hasOwnProperty('current_balance_exchange_rate')) {
                obj['current_balance_exchange_rate'] = ApiClient.convertToType(data['current_balance_exchange_rate'], 'Number');
            }
            if (data.hasOwnProperty('current_balance_in_base_currency')) {
                obj['current_balance_in_base_currency'] = ApiClient.convertToType(data['current_balance_in_base_currency'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_net_worth')) {
                obj['is_net_worth'] = ApiClient.convertToType(data['is_net_worth'], 'Boolean');
            }
            if (data.hasOwnProperty('primary_scenario')) {
                obj['primary_scenario'] = Scenario.constructFromObject(data['primary_scenario']);
            }
            if (data.hasOwnProperty('primary_transaction_account')) {
                obj['primary_transaction_account'] = TransactionAccount.constructFromObject(data['primary_transaction_account']);
            }
            if (data.hasOwnProperty('safe_balance')) {
                obj['safe_balance'] = ApiClient.convertToType(data['safe_balance'], 'Number');
            }
            if (data.hasOwnProperty('safe_balance_in_base_currency')) {
                obj['safe_balance_in_base_currency'] = ApiClient.convertToType(data['safe_balance_in_base_currency'], 'Number');
            }
            if (data.hasOwnProperty('scenarios')) {
                obj['scenarios'] = ApiClient.convertToType(data['scenarios'], [Scenario]);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('transaction_accounts')) {
                obj['transaction_accounts'] = ApiClient.convertToType(data['transaction_accounts'], [TransactionAccount]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Account</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Account</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['currency_code'] && !(typeof data['currency_code'] === 'string' || data['currency_code'] instanceof String)) {
            throw new Error("Expected the field `currency_code` to be a primitive type in the JSON string but got " + data['currency_code']);
        }
        // ensure the json data is a string
        if (data['current_balance_date'] && !(typeof data['current_balance_date'] === 'string' || data['current_balance_date'] instanceof String)) {
            throw new Error("Expected the field `current_balance_date` to be a primitive type in the JSON string but got " + data['current_balance_date']);
        }
        // validate the optional field `primary_scenario`
        if (data['primary_scenario']) { // data not null
          Scenario.validateJSON(data['primary_scenario']);
        }
        // validate the optional field `primary_transaction_account`
        if (data['primary_transaction_account']) { // data not null
          TransactionAccount.validateJSON(data['primary_transaction_account']);
        }
        if (data['scenarios']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['scenarios'])) {
                throw new Error("Expected the field `scenarios` to be an array in the JSON data but got " + data['scenarios']);
            }
            // validate the optional field `scenarios` (array)
            for (const item of data['scenarios']) {
                Scenario.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        if (data['transaction_accounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transaction_accounts'])) {
                throw new Error("Expected the field `transaction_accounts` to be an array in the JSON data but got " + data['transaction_accounts']);
            }
            // validate the optional field `transaction_accounts` (array)
            for (const item of data['transaction_accounts']) {
                TransactionAccount.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}



/**
 * When the account was created.
 * @member {String} created_at
 */
Account.prototype['created_at'] = undefined;

/**
 * The currency code for the account.
 * @member {String} currency_code
 */
Account.prototype['currency_code'] = undefined;

/**
 * The current balance of the account.
 * @member {Number} current_balance
 */
Account.prototype['current_balance'] = undefined;

/**
 * The date of the current balance.
 * @member {String} current_balance_date
 */
Account.prototype['current_balance_date'] = undefined;

/**
 * The exchange rate between the account's currency and the user's base currency, when different. If the currencies are the same, null is returned.
 * @member {Number} current_balance_exchange_rate
 */
Account.prototype['current_balance_exchange_rate'] = undefined;

/**
 * The current balance of the account in the user's base currency.
 * @member {Number} current_balance_in_base_currency
 */
Account.prototype['current_balance_in_base_currency'] = undefined;

/**
 * The unique identifier of the account.
 * @member {Number} id
 */
Account.prototype['id'] = undefined;

/**
 * Whether the account is a net worth asset.
 * @member {Boolean} is_net_worth
 */
Account.prototype['is_net_worth'] = undefined;

/**
 * @member {module:model/Scenario} primary_scenario
 */
Account.prototype['primary_scenario'] = undefined;

/**
 * @member {module:model/TransactionAccount} primary_transaction_account
 */
Account.prototype['primary_transaction_account'] = undefined;

/**
 * The current safe balance, if safe balance is activated on the account. If safe balance is not activated, then null is returned.
 * @member {Number} safe_balance
 */
Account.prototype['safe_balance'] = undefined;

/**
 * The current safe balance in the user's base currency, if safe balance is activated on the account. If safe balance is not activated, then null is returned.
 * @member {Number} safe_balance_in_base_currency
 */
Account.prototype['safe_balance_in_base_currency'] = undefined;

/**
 * All scenarios that compose the account, including the primary.
 * @member {Array.<module:model/Scenario>} scenarios
 */
Account.prototype['scenarios'] = undefined;

/**
 * The title of the account.
 * @member {String} title
 */
Account.prototype['title'] = undefined;

/**
 * All transaction accounts that compose the account, including the primary.
 * @member {Array.<module:model/TransactionAccount>} transaction_accounts
 */
Account.prototype['transaction_accounts'] = undefined;

/**
 * The type of the account.
 * @member {module:model/Account.TypeEnum} type
 */
Account.prototype['type'] = undefined;

/**
 * When the account was last updated.
 * @member {String} updated_at
 */
Account.prototype['updated_at'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Account['TypeEnum'] = {

    /**
     * value: "bank"
     * @const
     */
    "bank": "bank",

    /**
     * value: "credits"
     * @const
     */
    "credits": "credits",

    /**
     * value: "cash"
     * @const
     */
    "cash": "cash",

    /**
     * value: "stocks"
     * @const
     */
    "stocks": "stocks",

    /**
     * value: "mortgage"
     * @const
     */
    "mortgage": "mortgage",

    /**
     * value: "loans"
     * @const
     */
    "loans": "loans",

    /**
     * value: "vehicle"
     * @const
     */
    "vehicle": "vehicle",

    /**
     * value: "property"
     * @const
     */
    "property": "property",

    /**
     * value: "insurance"
     * @const
     */
    "insurance": "insurance",

    /**
     * value: "other_asset"
     * @const
     */
    "other_asset": "other_asset",

    /**
     * value: "other_liability"
     * @const
     */
    "other_liability": "other_liability"
};



export default Account;

