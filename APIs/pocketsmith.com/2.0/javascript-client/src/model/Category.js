/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Category model module.
 * @module model/Category
 * @version 2.0
 */
class Category {
    /**
     * Constructs a new <code>Category</code>.
     * @alias module:model/Category
     */
    constructor() { 
        
        Category.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Category</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Category} obj Optional instance to populate.
     * @return {module:model/Category} The populated <code>Category</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Category();

            if (data.hasOwnProperty('children')) {
                obj['children'] = ApiClient.convertToType(data['children'], [Category]);
            }
            if (data.hasOwnProperty('colour')) {
                obj['colour'] = ApiClient.convertToType(data['colour'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_bill')) {
                obj['is_bill'] = ApiClient.convertToType(data['is_bill'], 'Boolean');
            }
            if (data.hasOwnProperty('is_transfer')) {
                obj['is_transfer'] = ApiClient.convertToType(data['is_transfer'], 'Boolean');
            }
            if (data.hasOwnProperty('parent_id')) {
                obj['parent_id'] = ApiClient.convertToType(data['parent_id'], 'Number');
            }
            if (data.hasOwnProperty('refund_behaviour')) {
                obj['refund_behaviour'] = ApiClient.convertToType(data['refund_behaviour'], 'String');
            }
            if (data.hasOwnProperty('roll_up')) {
                obj['roll_up'] = ApiClient.convertToType(data['roll_up'], 'Boolean');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Category</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Category</code>.
     */
    static validateJSON(data) {
        if (data['children']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['children'])) {
                throw new Error("Expected the field `children` to be an array in the JSON data but got " + data['children']);
            }
            // validate the optional field `children` (array)
            for (const item of data['children']) {
                Category.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['colour'] && !(typeof data['colour'] === 'string' || data['colour'] instanceof String)) {
            throw new Error("Expected the field `colour` to be a primitive type in the JSON string but got " + data['colour']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['refund_behaviour'] && !(typeof data['refund_behaviour'] === 'string' || data['refund_behaviour'] instanceof String)) {
            throw new Error("Expected the field `refund_behaviour` to be a primitive type in the JSON string but got " + data['refund_behaviour']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}



/**
 * The category's child categories.
 * @member {Array.<module:model/Category>} children
 */
Category.prototype['children'] = undefined;

/**
 * The colour for the category.
 * @member {String} colour
 */
Category.prototype['colour'] = undefined;

/**
 * When the category was created.
 * @member {String} created_at
 */
Category.prototype['created_at'] = undefined;

/**
 * The unique identifier of the category.
 * @member {Number} id
 */
Category.prototype['id'] = undefined;

/**
 * Whether the category is a bill category. A bill category is when budgeted amounts are normally spent at once, instead of spread across a budgeting period. This category will be included in the bill reminder email when set to true.
 * @member {Boolean} is_bill
 */
Category.prototype['is_bill'] = undefined;

/**
 * Whether this category has been marked as a transfer category.
 * @member {Boolean} is_transfer
 */
Category.prototype['is_transfer'] = undefined;

/**
 * The unique identifier of the parent category of this category, or null if this category has no parent (i.e. is a top-level category)
 * @member {Number} parent_id
 */
Category.prototype['parent_id'] = undefined;

/**
 * How the category's refunds or deductions should be reported on.
 * @member {module:model/Category.RefundBehaviourEnum} refund_behaviour
 */
Category.prototype['refund_behaviour'] = undefined;

/**
 * Whether the category's budget is rolled up into its parent category, if a parent category is present.
 * @member {Boolean} roll_up
 */
Category.prototype['roll_up'] = undefined;

/**
 * The title of the category.
 * @member {String} title
 */
Category.prototype['title'] = undefined;

/**
 * When the category was last updated.
 * @member {String} updated_at
 */
Category.prototype['updated_at'] = undefined;





/**
 * Allowed values for the <code>refund_behaviour</code> property.
 * @enum {String}
 * @readonly
 */
Category['RefundBehaviourEnum'] = {

    /**
     * value: "debits_are_deductions"
     * @const
     */
    "debits_are_deductions": "debits_are_deductions",

    /**
     * value: "credits_are_refunds"
     * @const
     */
    "credits_are_refunds": "credits_are_refunds"
};



export default Category;

