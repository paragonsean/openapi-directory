/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBudgetAnalysis.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBudgetAnalysis::OAIBudgetAnalysis(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBudgetAnalysis::OAIBudgetAnalysis() {
    this->initializeModel();
}

OAIBudgetAnalysis::~OAIBudgetAnalysis() {}

void OAIBudgetAnalysis::initializeModel() {

    m_average_actual_amount_isSet = false;
    m_average_actual_amount_isValid = false;

    m_average_forecast_amount_isSet = false;
    m_average_forecast_amount_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_periods_isSet = false;
    m_periods_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_total_actual_amount_isSet = false;
    m_total_actual_amount_isValid = false;

    m_total_forecast_amount_isSet = false;
    m_total_forecast_amount_isValid = false;

    m_total_over_by_isSet = false;
    m_total_over_by_isValid = false;

    m_total_under_by_isSet = false;
    m_total_under_by_isValid = false;
}

void OAIBudgetAnalysis::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBudgetAnalysis::fromJsonObject(QJsonObject json) {

    m_average_actual_amount_isValid = ::OpenAPI::fromJsonValue(m_average_actual_amount, json[QString("average_actual_amount")]);
    m_average_actual_amount_isSet = !json[QString("average_actual_amount")].isNull() && m_average_actual_amount_isValid;

    m_average_forecast_amount_isValid = ::OpenAPI::fromJsonValue(m_average_forecast_amount, json[QString("average_forecast_amount")]);
    m_average_forecast_amount_isSet = !json[QString("average_forecast_amount")].isNull() && m_average_forecast_amount_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currency_code")]);
    m_currency_code_isSet = !json[QString("currency_code")].isNull() && m_currency_code_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("end_date")]);
    m_end_date_isSet = !json[QString("end_date")].isNull() && m_end_date_isValid;

    m_periods_isValid = ::OpenAPI::fromJsonValue(m_periods, json[QString("periods")]);
    m_periods_isSet = !json[QString("periods")].isNull() && m_periods_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("start_date")]);
    m_start_date_isSet = !json[QString("start_date")].isNull() && m_start_date_isValid;

    m_total_actual_amount_isValid = ::OpenAPI::fromJsonValue(m_total_actual_amount, json[QString("total_actual_amount")]);
    m_total_actual_amount_isSet = !json[QString("total_actual_amount")].isNull() && m_total_actual_amount_isValid;

    m_total_forecast_amount_isValid = ::OpenAPI::fromJsonValue(m_total_forecast_amount, json[QString("total_forecast_amount")]);
    m_total_forecast_amount_isSet = !json[QString("total_forecast_amount")].isNull() && m_total_forecast_amount_isValid;

    m_total_over_by_isValid = ::OpenAPI::fromJsonValue(m_total_over_by, json[QString("total_over_by")]);
    m_total_over_by_isSet = !json[QString("total_over_by")].isNull() && m_total_over_by_isValid;

    m_total_under_by_isValid = ::OpenAPI::fromJsonValue(m_total_under_by, json[QString("total_under_by")]);
    m_total_under_by_isSet = !json[QString("total_under_by")].isNull() && m_total_under_by_isValid;
}

QString OAIBudgetAnalysis::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBudgetAnalysis::asJsonObject() const {
    QJsonObject obj;
    if (m_average_actual_amount_isSet) {
        obj.insert(QString("average_actual_amount"), ::OpenAPI::toJsonValue(m_average_actual_amount));
    }
    if (m_average_forecast_amount_isSet) {
        obj.insert(QString("average_forecast_amount"), ::OpenAPI::toJsonValue(m_average_forecast_amount));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currency_code"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("end_date"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_periods.size() > 0) {
        obj.insert(QString("periods"), ::OpenAPI::toJsonValue(m_periods));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("start_date"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_total_actual_amount_isSet) {
        obj.insert(QString("total_actual_amount"), ::OpenAPI::toJsonValue(m_total_actual_amount));
    }
    if (m_total_forecast_amount_isSet) {
        obj.insert(QString("total_forecast_amount"), ::OpenAPI::toJsonValue(m_total_forecast_amount));
    }
    if (m_total_over_by_isSet) {
        obj.insert(QString("total_over_by"), ::OpenAPI::toJsonValue(m_total_over_by));
    }
    if (m_total_under_by_isSet) {
        obj.insert(QString("total_under_by"), ::OpenAPI::toJsonValue(m_total_under_by));
    }
    return obj;
}

double OAIBudgetAnalysis::getAverageActualAmount() const {
    return m_average_actual_amount;
}
void OAIBudgetAnalysis::setAverageActualAmount(const double &average_actual_amount) {
    m_average_actual_amount = average_actual_amount;
    m_average_actual_amount_isSet = true;
}

bool OAIBudgetAnalysis::is_average_actual_amount_Set() const{
    return m_average_actual_amount_isSet;
}

bool OAIBudgetAnalysis::is_average_actual_amount_Valid() const{
    return m_average_actual_amount_isValid;
}

double OAIBudgetAnalysis::getAverageForecastAmount() const {
    return m_average_forecast_amount;
}
void OAIBudgetAnalysis::setAverageForecastAmount(const double &average_forecast_amount) {
    m_average_forecast_amount = average_forecast_amount;
    m_average_forecast_amount_isSet = true;
}

bool OAIBudgetAnalysis::is_average_forecast_amount_Set() const{
    return m_average_forecast_amount_isSet;
}

bool OAIBudgetAnalysis::is_average_forecast_amount_Valid() const{
    return m_average_forecast_amount_isValid;
}

QString OAIBudgetAnalysis::getCurrencyCode() const {
    return m_currency_code;
}
void OAIBudgetAnalysis::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIBudgetAnalysis::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIBudgetAnalysis::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAIBudgetAnalysis::getEndDate() const {
    return m_end_date;
}
void OAIBudgetAnalysis::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIBudgetAnalysis::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIBudgetAnalysis::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QList<OAIPeriod> OAIBudgetAnalysis::getPeriods() const {
    return m_periods;
}
void OAIBudgetAnalysis::setPeriods(const QList<OAIPeriod> &periods) {
    m_periods = periods;
    m_periods_isSet = true;
}

bool OAIBudgetAnalysis::is_periods_Set() const{
    return m_periods_isSet;
}

bool OAIBudgetAnalysis::is_periods_Valid() const{
    return m_periods_isValid;
}

QString OAIBudgetAnalysis::getStartDate() const {
    return m_start_date;
}
void OAIBudgetAnalysis::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIBudgetAnalysis::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIBudgetAnalysis::is_start_date_Valid() const{
    return m_start_date_isValid;
}

double OAIBudgetAnalysis::getTotalActualAmount() const {
    return m_total_actual_amount;
}
void OAIBudgetAnalysis::setTotalActualAmount(const double &total_actual_amount) {
    m_total_actual_amount = total_actual_amount;
    m_total_actual_amount_isSet = true;
}

bool OAIBudgetAnalysis::is_total_actual_amount_Set() const{
    return m_total_actual_amount_isSet;
}

bool OAIBudgetAnalysis::is_total_actual_amount_Valid() const{
    return m_total_actual_amount_isValid;
}

double OAIBudgetAnalysis::getTotalForecastAmount() const {
    return m_total_forecast_amount;
}
void OAIBudgetAnalysis::setTotalForecastAmount(const double &total_forecast_amount) {
    m_total_forecast_amount = total_forecast_amount;
    m_total_forecast_amount_isSet = true;
}

bool OAIBudgetAnalysis::is_total_forecast_amount_Set() const{
    return m_total_forecast_amount_isSet;
}

bool OAIBudgetAnalysis::is_total_forecast_amount_Valid() const{
    return m_total_forecast_amount_isValid;
}

double OAIBudgetAnalysis::getTotalOverBy() const {
    return m_total_over_by;
}
void OAIBudgetAnalysis::setTotalOverBy(const double &total_over_by) {
    m_total_over_by = total_over_by;
    m_total_over_by_isSet = true;
}

bool OAIBudgetAnalysis::is_total_over_by_Set() const{
    return m_total_over_by_isSet;
}

bool OAIBudgetAnalysis::is_total_over_by_Valid() const{
    return m_total_over_by_isValid;
}

double OAIBudgetAnalysis::getTotalUnderBy() const {
    return m_total_under_by;
}
void OAIBudgetAnalysis::setTotalUnderBy(const double &total_under_by) {
    m_total_under_by = total_under_by;
    m_total_under_by_isSet = true;
}

bool OAIBudgetAnalysis::is_total_under_by_Set() const{
    return m_total_under_by_isSet;
}

bool OAIBudgetAnalysis::is_total_under_by_Valid() const{
    return m_total_under_by_isValid;
}

bool OAIBudgetAnalysis::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_actual_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_forecast_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_periods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_actual_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_forecast_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_over_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_under_by_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBudgetAnalysis::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
