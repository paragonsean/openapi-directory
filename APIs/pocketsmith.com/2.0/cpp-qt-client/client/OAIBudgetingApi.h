/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBudgetingApi_H
#define OAI_OAIBudgetingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBudgetAnalysisPackage.h"
#include "OAIError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBudgetingApi : public QObject {
    Q_OBJECT

public:
    OAIBudgetingApi(const int timeOut = 0);
    ~OAIBudgetingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  roll_up bool [optional]
    */
    virtual void usersIdBudgetGet(const qint32 &id, const ::OpenAPI::OptionalParam<bool> &roll_up = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  period QString [required]
    * @param[in]  interval qint32 [required]
    * @param[in]  start_date QString [required]
    * @param[in]  end_date QString [required]
    */
    virtual void usersIdBudgetSummaryGet(const qint32 &id, const QString &period, const qint32 &interval, const QString &start_date, const QString &end_date);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void usersIdForecastCacheDelete(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  period QString [required]
    * @param[in]  interval qint32 [required]
    * @param[in]  start_date QString [required]
    * @param[in]  end_date QString [required]
    * @param[in]  categories QString [required]
    * @param[in]  scenarios QString [required]
    */
    virtual void usersIdTrendAnalysisGet(const qint32 &id, const QString &period, const qint32 &interval, const QString &start_date, const QString &end_date, const QString &categories, const QString &scenarios);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void usersIdBudgetGetCallback(OAIHttpRequestWorker *worker);
    void usersIdBudgetSummaryGetCallback(OAIHttpRequestWorker *worker);
    void usersIdForecastCacheDeleteCallback(OAIHttpRequestWorker *worker);
    void usersIdTrendAnalysisGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void usersIdBudgetGetSignal(QList<OAIBudgetAnalysisPackage> summary);
    void usersIdBudgetSummaryGetSignal(QList<OAIBudgetAnalysisPackage> summary);
    void usersIdForecastCacheDeleteSignal();
    void usersIdTrendAnalysisGetSignal(QList<OAIBudgetAnalysisPackage> summary);


    void usersIdBudgetGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIBudgetAnalysisPackage> summary);
    void usersIdBudgetSummaryGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIBudgetAnalysisPackage> summary);
    void usersIdForecastCacheDeleteSignalFull(OAIHttpRequestWorker *worker);
    void usersIdTrendAnalysisGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIBudgetAnalysisPackage> summary);

    Q_DECL_DEPRECATED_X("Use usersIdBudgetGetSignalError() instead")
    void usersIdBudgetGetSignalE(QList<OAIBudgetAnalysisPackage> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdBudgetGetSignalError(QList<OAIBudgetAnalysisPackage> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdBudgetSummaryGetSignalError() instead")
    void usersIdBudgetSummaryGetSignalE(QList<OAIBudgetAnalysisPackage> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdBudgetSummaryGetSignalError(QList<OAIBudgetAnalysisPackage> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdForecastCacheDeleteSignalError() instead")
    void usersIdForecastCacheDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdForecastCacheDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdTrendAnalysisGetSignalError() instead")
    void usersIdTrendAnalysisGetSignalE(QList<OAIBudgetAnalysisPackage> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdTrendAnalysisGetSignalError(QList<OAIBudgetAnalysisPackage> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use usersIdBudgetGetSignalErrorFull() instead")
    void usersIdBudgetGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdBudgetGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdBudgetSummaryGetSignalErrorFull() instead")
    void usersIdBudgetSummaryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdBudgetSummaryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdForecastCacheDeleteSignalErrorFull() instead")
    void usersIdForecastCacheDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdForecastCacheDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdTrendAnalysisGetSignalErrorFull() instead")
    void usersIdTrendAnalysisGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdTrendAnalysisGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
