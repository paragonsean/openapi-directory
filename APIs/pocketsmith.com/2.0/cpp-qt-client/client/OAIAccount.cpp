/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccount::OAIAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccount::OAIAccount() {
    this->initializeModel();
}

OAIAccount::~OAIAccount() {}

void OAIAccount::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_current_balance_isSet = false;
    m_current_balance_isValid = false;

    m_current_balance_date_isSet = false;
    m_current_balance_date_isValid = false;

    m_current_balance_exchange_rate_isSet = false;
    m_current_balance_exchange_rate_isValid = false;

    m_current_balance_in_base_currency_isSet = false;
    m_current_balance_in_base_currency_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_net_worth_isSet = false;
    m_is_net_worth_isValid = false;

    m_primary_scenario_isSet = false;
    m_primary_scenario_isValid = false;

    m_primary_transaction_account_isSet = false;
    m_primary_transaction_account_isValid = false;

    m_safe_balance_isSet = false;
    m_safe_balance_isValid = false;

    m_safe_balance_in_base_currency_isSet = false;
    m_safe_balance_in_base_currency_isValid = false;

    m_scenarios_isSet = false;
    m_scenarios_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_transaction_accounts_isSet = false;
    m_transaction_accounts_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccount::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currency_code")]);
    m_currency_code_isSet = !json[QString("currency_code")].isNull() && m_currency_code_isValid;

    m_current_balance_isValid = ::OpenAPI::fromJsonValue(m_current_balance, json[QString("current_balance")]);
    m_current_balance_isSet = !json[QString("current_balance")].isNull() && m_current_balance_isValid;

    m_current_balance_date_isValid = ::OpenAPI::fromJsonValue(m_current_balance_date, json[QString("current_balance_date")]);
    m_current_balance_date_isSet = !json[QString("current_balance_date")].isNull() && m_current_balance_date_isValid;

    m_current_balance_exchange_rate_isValid = ::OpenAPI::fromJsonValue(m_current_balance_exchange_rate, json[QString("current_balance_exchange_rate")]);
    m_current_balance_exchange_rate_isSet = !json[QString("current_balance_exchange_rate")].isNull() && m_current_balance_exchange_rate_isValid;

    m_current_balance_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_current_balance_in_base_currency, json[QString("current_balance_in_base_currency")]);
    m_current_balance_in_base_currency_isSet = !json[QString("current_balance_in_base_currency")].isNull() && m_current_balance_in_base_currency_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_net_worth_isValid = ::OpenAPI::fromJsonValue(m_is_net_worth, json[QString("is_net_worth")]);
    m_is_net_worth_isSet = !json[QString("is_net_worth")].isNull() && m_is_net_worth_isValid;

    m_primary_scenario_isValid = ::OpenAPI::fromJsonValue(m_primary_scenario, json[QString("primary_scenario")]);
    m_primary_scenario_isSet = !json[QString("primary_scenario")].isNull() && m_primary_scenario_isValid;

    m_primary_transaction_account_isValid = ::OpenAPI::fromJsonValue(m_primary_transaction_account, json[QString("primary_transaction_account")]);
    m_primary_transaction_account_isSet = !json[QString("primary_transaction_account")].isNull() && m_primary_transaction_account_isValid;

    m_safe_balance_isValid = ::OpenAPI::fromJsonValue(m_safe_balance, json[QString("safe_balance")]);
    m_safe_balance_isSet = !json[QString("safe_balance")].isNull() && m_safe_balance_isValid;

    m_safe_balance_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_safe_balance_in_base_currency, json[QString("safe_balance_in_base_currency")]);
    m_safe_balance_in_base_currency_isSet = !json[QString("safe_balance_in_base_currency")].isNull() && m_safe_balance_in_base_currency_isValid;

    m_scenarios_isValid = ::OpenAPI::fromJsonValue(m_scenarios, json[QString("scenarios")]);
    m_scenarios_isSet = !json[QString("scenarios")].isNull() && m_scenarios_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_transaction_accounts_isValid = ::OpenAPI::fromJsonValue(m_transaction_accounts, json[QString("transaction_accounts")]);
    m_transaction_accounts_isSet = !json[QString("transaction_accounts")].isNull() && m_transaction_accounts_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currency_code"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_current_balance_isSet) {
        obj.insert(QString("current_balance"), ::OpenAPI::toJsonValue(m_current_balance));
    }
    if (m_current_balance_date_isSet) {
        obj.insert(QString("current_balance_date"), ::OpenAPI::toJsonValue(m_current_balance_date));
    }
    if (m_current_balance_exchange_rate_isSet) {
        obj.insert(QString("current_balance_exchange_rate"), ::OpenAPI::toJsonValue(m_current_balance_exchange_rate));
    }
    if (m_current_balance_in_base_currency_isSet) {
        obj.insert(QString("current_balance_in_base_currency"), ::OpenAPI::toJsonValue(m_current_balance_in_base_currency));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_net_worth_isSet) {
        obj.insert(QString("is_net_worth"), ::OpenAPI::toJsonValue(m_is_net_worth));
    }
    if (m_primary_scenario.isSet()) {
        obj.insert(QString("primary_scenario"), ::OpenAPI::toJsonValue(m_primary_scenario));
    }
    if (m_primary_transaction_account.isSet()) {
        obj.insert(QString("primary_transaction_account"), ::OpenAPI::toJsonValue(m_primary_transaction_account));
    }
    if (m_safe_balance_isSet) {
        obj.insert(QString("safe_balance"), ::OpenAPI::toJsonValue(m_safe_balance));
    }
    if (m_safe_balance_in_base_currency_isSet) {
        obj.insert(QString("safe_balance_in_base_currency"), ::OpenAPI::toJsonValue(m_safe_balance_in_base_currency));
    }
    if (m_scenarios.size() > 0) {
        obj.insert(QString("scenarios"), ::OpenAPI::toJsonValue(m_scenarios));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_transaction_accounts.size() > 0) {
        obj.insert(QString("transaction_accounts"), ::OpenAPI::toJsonValue(m_transaction_accounts));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIAccount::getCreatedAt() const {
    return m_created_at;
}
void OAIAccount::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAccount::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAccount::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIAccount::getCurrencyCode() const {
    return m_currency_code;
}
void OAIAccount::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIAccount::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIAccount::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

double OAIAccount::getCurrentBalance() const {
    return m_current_balance;
}
void OAIAccount::setCurrentBalance(const double &current_balance) {
    m_current_balance = current_balance;
    m_current_balance_isSet = true;
}

bool OAIAccount::is_current_balance_Set() const{
    return m_current_balance_isSet;
}

bool OAIAccount::is_current_balance_Valid() const{
    return m_current_balance_isValid;
}

QString OAIAccount::getCurrentBalanceDate() const {
    return m_current_balance_date;
}
void OAIAccount::setCurrentBalanceDate(const QString &current_balance_date) {
    m_current_balance_date = current_balance_date;
    m_current_balance_date_isSet = true;
}

bool OAIAccount::is_current_balance_date_Set() const{
    return m_current_balance_date_isSet;
}

bool OAIAccount::is_current_balance_date_Valid() const{
    return m_current_balance_date_isValid;
}

double OAIAccount::getCurrentBalanceExchangeRate() const {
    return m_current_balance_exchange_rate;
}
void OAIAccount::setCurrentBalanceExchangeRate(const double &current_balance_exchange_rate) {
    m_current_balance_exchange_rate = current_balance_exchange_rate;
    m_current_balance_exchange_rate_isSet = true;
}

bool OAIAccount::is_current_balance_exchange_rate_Set() const{
    return m_current_balance_exchange_rate_isSet;
}

bool OAIAccount::is_current_balance_exchange_rate_Valid() const{
    return m_current_balance_exchange_rate_isValid;
}

double OAIAccount::getCurrentBalanceInBaseCurrency() const {
    return m_current_balance_in_base_currency;
}
void OAIAccount::setCurrentBalanceInBaseCurrency(const double &current_balance_in_base_currency) {
    m_current_balance_in_base_currency = current_balance_in_base_currency;
    m_current_balance_in_base_currency_isSet = true;
}

bool OAIAccount::is_current_balance_in_base_currency_Set() const{
    return m_current_balance_in_base_currency_isSet;
}

bool OAIAccount::is_current_balance_in_base_currency_Valid() const{
    return m_current_balance_in_base_currency_isValid;
}

qint32 OAIAccount::getId() const {
    return m_id;
}
void OAIAccount::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccount::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccount::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIAccount::isIsNetWorth() const {
    return m_is_net_worth;
}
void OAIAccount::setIsNetWorth(const bool &is_net_worth) {
    m_is_net_worth = is_net_worth;
    m_is_net_worth_isSet = true;
}

bool OAIAccount::is_is_net_worth_Set() const{
    return m_is_net_worth_isSet;
}

bool OAIAccount::is_is_net_worth_Valid() const{
    return m_is_net_worth_isValid;
}

OAIScenario OAIAccount::getPrimaryScenario() const {
    return m_primary_scenario;
}
void OAIAccount::setPrimaryScenario(const OAIScenario &primary_scenario) {
    m_primary_scenario = primary_scenario;
    m_primary_scenario_isSet = true;
}

bool OAIAccount::is_primary_scenario_Set() const{
    return m_primary_scenario_isSet;
}

bool OAIAccount::is_primary_scenario_Valid() const{
    return m_primary_scenario_isValid;
}

OAITransactionAccount OAIAccount::getPrimaryTransactionAccount() const {
    return m_primary_transaction_account;
}
void OAIAccount::setPrimaryTransactionAccount(const OAITransactionAccount &primary_transaction_account) {
    m_primary_transaction_account = primary_transaction_account;
    m_primary_transaction_account_isSet = true;
}

bool OAIAccount::is_primary_transaction_account_Set() const{
    return m_primary_transaction_account_isSet;
}

bool OAIAccount::is_primary_transaction_account_Valid() const{
    return m_primary_transaction_account_isValid;
}

double OAIAccount::getSafeBalance() const {
    return m_safe_balance;
}
void OAIAccount::setSafeBalance(const double &safe_balance) {
    m_safe_balance = safe_balance;
    m_safe_balance_isSet = true;
}

bool OAIAccount::is_safe_balance_Set() const{
    return m_safe_balance_isSet;
}

bool OAIAccount::is_safe_balance_Valid() const{
    return m_safe_balance_isValid;
}

double OAIAccount::getSafeBalanceInBaseCurrency() const {
    return m_safe_balance_in_base_currency;
}
void OAIAccount::setSafeBalanceInBaseCurrency(const double &safe_balance_in_base_currency) {
    m_safe_balance_in_base_currency = safe_balance_in_base_currency;
    m_safe_balance_in_base_currency_isSet = true;
}

bool OAIAccount::is_safe_balance_in_base_currency_Set() const{
    return m_safe_balance_in_base_currency_isSet;
}

bool OAIAccount::is_safe_balance_in_base_currency_Valid() const{
    return m_safe_balance_in_base_currency_isValid;
}

QList<OAIScenario> OAIAccount::getScenarios() const {
    return m_scenarios;
}
void OAIAccount::setScenarios(const QList<OAIScenario> &scenarios) {
    m_scenarios = scenarios;
    m_scenarios_isSet = true;
}

bool OAIAccount::is_scenarios_Set() const{
    return m_scenarios_isSet;
}

bool OAIAccount::is_scenarios_Valid() const{
    return m_scenarios_isValid;
}

QString OAIAccount::getTitle() const {
    return m_title;
}
void OAIAccount::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAccount::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAccount::is_title_Valid() const{
    return m_title_isValid;
}

QList<OAITransactionAccount> OAIAccount::getTransactionAccounts() const {
    return m_transaction_accounts;
}
void OAIAccount::setTransactionAccounts(const QList<OAITransactionAccount> &transaction_accounts) {
    m_transaction_accounts = transaction_accounts;
    m_transaction_accounts_isSet = true;
}

bool OAIAccount::is_transaction_accounts_Set() const{
    return m_transaction_accounts_isSet;
}

bool OAIAccount::is_transaction_accounts_Valid() const{
    return m_transaction_accounts_isValid;
}

QString OAIAccount::getType() const {
    return m_type;
}
void OAIAccount::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAccount::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAccount::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAccount::getUpdatedAt() const {
    return m_updated_at;
}
void OAIAccount::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIAccount::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIAccount::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_balance_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_balance_exchange_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_balance_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_net_worth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_scenario.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_transaction_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_safe_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safe_balance_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scenarios.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_accounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
