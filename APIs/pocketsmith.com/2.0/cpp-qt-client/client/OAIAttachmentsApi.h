/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAttachmentsApi_H
#define OAI_OAIAttachmentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAttachment.h"
#include "OAIError.h"
#include "OAI_attachments__id__put_request.h"
#include "OAI_transactions__id__attachments_post_request.h"
#include "OAI_users__id__attachments_post_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAttachmentsApi : public QObject {
    Q_OBJECT

public:
    OAIAttachmentsApi(const int timeOut = 0);
    ~OAIAttachmentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void attachmentsIdDelete(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void attachmentsIdGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_attachments__id__put_request OAI_attachments__id__put_request [optional]
    */
    virtual void attachmentsIdPut(const qint32 &id, const ::OpenAPI::OptionalParam<OAI_attachments__id__put_request> &oai_attachments__id__put_request = ::OpenAPI::OptionalParam<OAI_attachments__id__put_request>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void transactionsIdAttachmentsGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_transactions__id__attachments_post_request OAI_transactions__id__attachments_post_request [optional]
    */
    virtual void transactionsIdAttachmentsPost(const qint32 &id, const ::OpenAPI::OptionalParam<OAI_transactions__id__attachments_post_request> &oai_transactions__id__attachments_post_request = ::OpenAPI::OptionalParam<OAI_transactions__id__attachments_post_request>());

    /**
    * @param[in]  transaction_id qint32 [required]
    * @param[in]  attachment_id qint32 [required]
    */
    virtual void transactionsTransactionIdAttachmentsAttachmentIdDelete(const qint32 &transaction_id, const qint32 &attachment_id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  unassigned qint32 [optional]
    */
    virtual void usersIdAttachmentsGet(const qint32 &id, const ::OpenAPI::OptionalParam<qint32> &unassigned = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_users__id__attachments_post_request OAI_users__id__attachments_post_request [optional]
    */
    virtual void usersIdAttachmentsPost(const qint32 &id, const ::OpenAPI::OptionalParam<OAI_users__id__attachments_post_request> &oai_users__id__attachments_post_request = ::OpenAPI::OptionalParam<OAI_users__id__attachments_post_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void attachmentsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void attachmentsIdGetCallback(OAIHttpRequestWorker *worker);
    void attachmentsIdPutCallback(OAIHttpRequestWorker *worker);
    void transactionsIdAttachmentsGetCallback(OAIHttpRequestWorker *worker);
    void transactionsIdAttachmentsPostCallback(OAIHttpRequestWorker *worker);
    void transactionsTransactionIdAttachmentsAttachmentIdDeleteCallback(OAIHttpRequestWorker *worker);
    void usersIdAttachmentsGetCallback(OAIHttpRequestWorker *worker);
    void usersIdAttachmentsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void attachmentsIdDeleteSignal();
    void attachmentsIdGetSignal(OAIAttachment summary);
    void attachmentsIdPutSignal(OAIAttachment summary);
    void transactionsIdAttachmentsGetSignal(QList<OAIAttachment> summary);
    void transactionsIdAttachmentsPostSignal(OAIAttachment summary);
    void transactionsTransactionIdAttachmentsAttachmentIdDeleteSignal();
    void usersIdAttachmentsGetSignal(QList<OAIAttachment> summary);
    void usersIdAttachmentsPostSignal(OAIAttachment summary);


    void attachmentsIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void attachmentsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIAttachment summary);
    void attachmentsIdPutSignalFull(OAIHttpRequestWorker *worker, OAIAttachment summary);
    void transactionsIdAttachmentsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAttachment> summary);
    void transactionsIdAttachmentsPostSignalFull(OAIHttpRequestWorker *worker, OAIAttachment summary);
    void transactionsTransactionIdAttachmentsAttachmentIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void usersIdAttachmentsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAttachment> summary);
    void usersIdAttachmentsPostSignalFull(OAIHttpRequestWorker *worker, OAIAttachment summary);

    Q_DECL_DEPRECATED_X("Use attachmentsIdDeleteSignalError() instead")
    void attachmentsIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void attachmentsIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attachmentsIdGetSignalError() instead")
    void attachmentsIdGetSignalE(OAIAttachment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attachmentsIdGetSignalError(OAIAttachment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attachmentsIdPutSignalError() instead")
    void attachmentsIdPutSignalE(OAIAttachment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attachmentsIdPutSignalError(OAIAttachment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsIdAttachmentsGetSignalError() instead")
    void transactionsIdAttachmentsGetSignalE(QList<OAIAttachment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsIdAttachmentsGetSignalError(QList<OAIAttachment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsIdAttachmentsPostSignalError() instead")
    void transactionsIdAttachmentsPostSignalE(OAIAttachment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsIdAttachmentsPostSignalError(OAIAttachment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsTransactionIdAttachmentsAttachmentIdDeleteSignalError() instead")
    void transactionsTransactionIdAttachmentsAttachmentIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsTransactionIdAttachmentsAttachmentIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdAttachmentsGetSignalError() instead")
    void usersIdAttachmentsGetSignalE(QList<OAIAttachment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdAttachmentsGetSignalError(QList<OAIAttachment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdAttachmentsPostSignalError() instead")
    void usersIdAttachmentsPostSignalE(OAIAttachment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdAttachmentsPostSignalError(OAIAttachment summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use attachmentsIdDeleteSignalErrorFull() instead")
    void attachmentsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attachmentsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attachmentsIdGetSignalErrorFull() instead")
    void attachmentsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attachmentsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attachmentsIdPutSignalErrorFull() instead")
    void attachmentsIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attachmentsIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsIdAttachmentsGetSignalErrorFull() instead")
    void transactionsIdAttachmentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsIdAttachmentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsIdAttachmentsPostSignalErrorFull() instead")
    void transactionsIdAttachmentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsIdAttachmentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsTransactionIdAttachmentsAttachmentIdDeleteSignalErrorFull() instead")
    void transactionsTransactionIdAttachmentsAttachmentIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsTransactionIdAttachmentsAttachmentIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdAttachmentsGetSignalErrorFull() instead")
    void usersIdAttachmentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdAttachmentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdAttachmentsPostSignalErrorFull() instead")
    void usersIdAttachmentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdAttachmentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
