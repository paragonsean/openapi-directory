/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEventsApi_H
#define OAI_OAIEventsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIEvent.h"
#include "OAI_events__id__put_request.h"
#include "OAI_scenarios__id__events_post_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEventsApi : public QObject {
    Q_OBJECT

public:
    OAIEventsApi(const int timeOut = 0);
    ~OAIEventsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  behaviour QString [required]
    */
    virtual void eventsIdDelete(const QString &id, const QString &behaviour);

    /**
    * @param[in]  id QString [required]
    */
    virtual void eventsIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_events__id__put_request OAI_events__id__put_request [optional]
    */
    virtual void eventsIdPut(const QString &id, const ::OpenAPI::OptionalParam<OAI_events__id__put_request> &oai_events__id__put_request = ::OpenAPI::OptionalParam<OAI_events__id__put_request>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  start_date QString [required]
    * @param[in]  end_date QString [required]
    */
    virtual void scenariosIdEventsGet(const qint32 &id, const QString &start_date, const QString &end_date);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_scenarios__id__events_post_request OAI_scenarios__id__events_post_request [optional]
    */
    virtual void scenariosIdEventsPost(const qint32 &id, const ::OpenAPI::OptionalParam<OAI_scenarios__id__events_post_request> &oai_scenarios__id__events_post_request = ::OpenAPI::OptionalParam<OAI_scenarios__id__events_post_request>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  start_date QString [required]
    * @param[in]  end_date QString [required]
    */
    virtual void usersIdEventsGet(const qint32 &id, const QString &start_date, const QString &end_date);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void eventsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void eventsIdGetCallback(OAIHttpRequestWorker *worker);
    void eventsIdPutCallback(OAIHttpRequestWorker *worker);
    void scenariosIdEventsGetCallback(OAIHttpRequestWorker *worker);
    void scenariosIdEventsPostCallback(OAIHttpRequestWorker *worker);
    void usersIdEventsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void eventsIdDeleteSignal();
    void eventsIdGetSignal(OAIEvent summary);
    void eventsIdPutSignal(OAIEvent summary);
    void scenariosIdEventsGetSignal(QList<OAIEvent> summary);
    void scenariosIdEventsPostSignal(OAIEvent summary);
    void usersIdEventsGetSignal(QList<OAIEvent> summary);


    void eventsIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void eventsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIEvent summary);
    void eventsIdPutSignalFull(OAIHttpRequestWorker *worker, OAIEvent summary);
    void scenariosIdEventsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent> summary);
    void scenariosIdEventsPostSignalFull(OAIHttpRequestWorker *worker, OAIEvent summary);
    void usersIdEventsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent> summary);

    Q_DECL_DEPRECATED_X("Use eventsIdDeleteSignalError() instead")
    void eventsIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void eventsIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventsIdGetSignalError() instead")
    void eventsIdGetSignalE(OAIEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsIdGetSignalError(OAIEvent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventsIdPutSignalError() instead")
    void eventsIdPutSignalE(OAIEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsIdPutSignalError(OAIEvent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scenariosIdEventsGetSignalError() instead")
    void scenariosIdEventsGetSignalE(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scenariosIdEventsGetSignalError(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scenariosIdEventsPostSignalError() instead")
    void scenariosIdEventsPostSignalE(OAIEvent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scenariosIdEventsPostSignalError(OAIEvent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdEventsGetSignalError() instead")
    void usersIdEventsGetSignalE(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdEventsGetSignalError(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use eventsIdDeleteSignalErrorFull() instead")
    void eventsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventsIdGetSignalErrorFull() instead")
    void eventsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventsIdPutSignalErrorFull() instead")
    void eventsIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scenariosIdEventsGetSignalErrorFull() instead")
    void scenariosIdEventsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scenariosIdEventsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scenariosIdEventsPostSignalErrorFull() instead")
    void scenariosIdEventsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scenariosIdEventsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdEventsGetSignalErrorFull() instead")
    void usersIdEventsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdEventsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
