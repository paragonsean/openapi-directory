/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent::OAIEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent::OAIEvent() {
    this->initializeModel();
}

OAIEvent::~OAIEvent() {}

void OAIEvent::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_amount_in_base_currency_isSet = false;
    m_amount_in_base_currency_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_colour_isSet = false;
    m_colour_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_infinite_series_isSet = false;
    m_infinite_series_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_repeat_interval_isSet = false;
    m_repeat_interval_isValid = false;

    m_repeat_type_isSet = false;
    m_repeat_type_isValid = false;

    m_scenario_isSet = false;
    m_scenario_isValid = false;

    m_series_id_isSet = false;
    m_series_id_isValid = false;

    m_series_start_id_isSet = false;
    m_series_start_id_isValid = false;
}

void OAIEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_amount_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_amount_in_base_currency, json[QString("amount_in_base_currency")]);
    m_amount_in_base_currency_isSet = !json[QString("amount_in_base_currency")].isNull() && m_amount_in_base_currency_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_colour_isValid = ::OpenAPI::fromJsonValue(m_colour, json[QString("colour")]);
    m_colour_isSet = !json[QString("colour")].isNull() && m_colour_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currency_code")]);
    m_currency_code_isSet = !json[QString("currency_code")].isNull() && m_currency_code_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_infinite_series_isValid = ::OpenAPI::fromJsonValue(m_infinite_series, json[QString("infinite_series")]);
    m_infinite_series_isSet = !json[QString("infinite_series")].isNull() && m_infinite_series_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_repeat_interval_isValid = ::OpenAPI::fromJsonValue(m_repeat_interval, json[QString("repeat_interval")]);
    m_repeat_interval_isSet = !json[QString("repeat_interval")].isNull() && m_repeat_interval_isValid;

    m_repeat_type_isValid = ::OpenAPI::fromJsonValue(m_repeat_type, json[QString("repeat_type")]);
    m_repeat_type_isSet = !json[QString("repeat_type")].isNull() && m_repeat_type_isValid;

    m_scenario_isValid = ::OpenAPI::fromJsonValue(m_scenario, json[QString("scenario")]);
    m_scenario_isSet = !json[QString("scenario")].isNull() && m_scenario_isValid;

    m_series_id_isValid = ::OpenAPI::fromJsonValue(m_series_id, json[QString("series_id")]);
    m_series_id_isSet = !json[QString("series_id")].isNull() && m_series_id_isValid;

    m_series_start_id_isValid = ::OpenAPI::fromJsonValue(m_series_start_id, json[QString("series_start_id")]);
    m_series_start_id_isSet = !json[QString("series_start_id")].isNull() && m_series_start_id_isValid;
}

QString OAIEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_amount_in_base_currency_isSet) {
        obj.insert(QString("amount_in_base_currency"), ::OpenAPI::toJsonValue(m_amount_in_base_currency));
    }
    if (m_category.isSet()) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_colour_isSet) {
        obj.insert(QString("colour"), ::OpenAPI::toJsonValue(m_colour));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currency_code"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_infinite_series_isSet) {
        obj.insert(QString("infinite_series"), ::OpenAPI::toJsonValue(m_infinite_series));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_repeat_interval_isSet) {
        obj.insert(QString("repeat_interval"), ::OpenAPI::toJsonValue(m_repeat_interval));
    }
    if (m_repeat_type_isSet) {
        obj.insert(QString("repeat_type"), ::OpenAPI::toJsonValue(m_repeat_type));
    }
    if (m_scenario.isSet()) {
        obj.insert(QString("scenario"), ::OpenAPI::toJsonValue(m_scenario));
    }
    if (m_series_id_isSet) {
        obj.insert(QString("series_id"), ::OpenAPI::toJsonValue(m_series_id));
    }
    if (m_series_start_id_isSet) {
        obj.insert(QString("series_start_id"), ::OpenAPI::toJsonValue(m_series_start_id));
    }
    return obj;
}

double OAIEvent::getAmount() const {
    return m_amount;
}
void OAIEvent::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIEvent::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIEvent::is_amount_Valid() const{
    return m_amount_isValid;
}

double OAIEvent::getAmountInBaseCurrency() const {
    return m_amount_in_base_currency;
}
void OAIEvent::setAmountInBaseCurrency(const double &amount_in_base_currency) {
    m_amount_in_base_currency = amount_in_base_currency;
    m_amount_in_base_currency_isSet = true;
}

bool OAIEvent::is_amount_in_base_currency_Set() const{
    return m_amount_in_base_currency_isSet;
}

bool OAIEvent::is_amount_in_base_currency_Valid() const{
    return m_amount_in_base_currency_isValid;
}

OAICategory OAIEvent::getCategory() const {
    return m_category;
}
void OAIEvent::setCategory(const OAICategory &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIEvent::is_category_Set() const{
    return m_category_isSet;
}

bool OAIEvent::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIEvent::getColour() const {
    return m_colour;
}
void OAIEvent::setColour(const QString &colour) {
    m_colour = colour;
    m_colour_isSet = true;
}

bool OAIEvent::is_colour_Set() const{
    return m_colour_isSet;
}

bool OAIEvent::is_colour_Valid() const{
    return m_colour_isValid;
}

QString OAIEvent::getCurrencyCode() const {
    return m_currency_code;
}
void OAIEvent::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIEvent::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIEvent::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAIEvent::getDate() const {
    return m_date;
}
void OAIEvent::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIEvent::is_date_Set() const{
    return m_date_isSet;
}

bool OAIEvent::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIEvent::getId() const {
    return m_id;
}
void OAIEvent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEvent::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIEvent::isInfiniteSeries() const {
    return m_infinite_series;
}
void OAIEvent::setInfiniteSeries(const bool &infinite_series) {
    m_infinite_series = infinite_series;
    m_infinite_series_isSet = true;
}

bool OAIEvent::is_infinite_series_Set() const{
    return m_infinite_series_isSet;
}

bool OAIEvent::is_infinite_series_Valid() const{
    return m_infinite_series_isValid;
}

QString OAIEvent::getNote() const {
    return m_note;
}
void OAIEvent::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIEvent::is_note_Set() const{
    return m_note_isSet;
}

bool OAIEvent::is_note_Valid() const{
    return m_note_isValid;
}

qint32 OAIEvent::getRepeatInterval() const {
    return m_repeat_interval;
}
void OAIEvent::setRepeatInterval(const qint32 &repeat_interval) {
    m_repeat_interval = repeat_interval;
    m_repeat_interval_isSet = true;
}

bool OAIEvent::is_repeat_interval_Set() const{
    return m_repeat_interval_isSet;
}

bool OAIEvent::is_repeat_interval_Valid() const{
    return m_repeat_interval_isValid;
}

QString OAIEvent::getRepeatType() const {
    return m_repeat_type;
}
void OAIEvent::setRepeatType(const QString &repeat_type) {
    m_repeat_type = repeat_type;
    m_repeat_type_isSet = true;
}

bool OAIEvent::is_repeat_type_Set() const{
    return m_repeat_type_isSet;
}

bool OAIEvent::is_repeat_type_Valid() const{
    return m_repeat_type_isValid;
}

OAIScenario OAIEvent::getScenario() const {
    return m_scenario;
}
void OAIEvent::setScenario(const OAIScenario &scenario) {
    m_scenario = scenario;
    m_scenario_isSet = true;
}

bool OAIEvent::is_scenario_Set() const{
    return m_scenario_isSet;
}

bool OAIEvent::is_scenario_Valid() const{
    return m_scenario_isValid;
}

qint32 OAIEvent::getSeriesId() const {
    return m_series_id;
}
void OAIEvent::setSeriesId(const qint32 &series_id) {
    m_series_id = series_id;
    m_series_id_isSet = true;
}

bool OAIEvent::is_series_id_Set() const{
    return m_series_id_isSet;
}

bool OAIEvent::is_series_id_Valid() const{
    return m_series_id_isValid;
}

QString OAIEvent::getSeriesStartId() const {
    return m_series_start_id;
}
void OAIEvent::setSeriesStartId(const QString &series_start_id) {
    m_series_start_id = series_start_id;
    m_series_start_id_isSet = true;
}

bool OAIEvent::is_series_start_id_Set() const{
    return m_series_start_id_isSet;
}

bool OAIEvent::is_series_start_id_Valid() const{
    return m_series_start_id_isValid;
}

bool OAIEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_colour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_infinite_series_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeat_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeat_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scenario.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_start_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
