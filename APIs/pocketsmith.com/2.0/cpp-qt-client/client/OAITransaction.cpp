/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransaction::OAITransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransaction::OAITransaction() {
    this->initializeModel();
}

OAITransaction::~OAITransaction() {}

void OAITransaction::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_amount_in_base_currency_isSet = false;
    m_amount_in_base_currency_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_cheque_number_isSet = false;
    m_cheque_number_isValid = false;

    m_closing_balance_isSet = false;
    m_closing_balance_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_transfer_isSet = false;
    m_is_transfer_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_memo_isSet = false;
    m_memo_isValid = false;

    m_needs_review_isSet = false;
    m_needs_review_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_original_payee_isSet = false;
    m_original_payee_isValid = false;

    m_payee_isSet = false;
    m_payee_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_transaction_account_isSet = false;
    m_transaction_account_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_upload_source_isSet = false;
    m_upload_source_isValid = false;
}

void OAITransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransaction::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_amount_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_amount_in_base_currency, json[QString("amount_in_base_currency")]);
    m_amount_in_base_currency_isSet = !json[QString("amount_in_base_currency")].isNull() && m_amount_in_base_currency_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_cheque_number_isValid = ::OpenAPI::fromJsonValue(m_cheque_number, json[QString("cheque_number")]);
    m_cheque_number_isSet = !json[QString("cheque_number")].isNull() && m_cheque_number_isValid;

    m_closing_balance_isValid = ::OpenAPI::fromJsonValue(m_closing_balance, json[QString("closing_balance")]);
    m_closing_balance_isSet = !json[QString("closing_balance")].isNull() && m_closing_balance_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_transfer_isValid = ::OpenAPI::fromJsonValue(m_is_transfer, json[QString("is_transfer")]);
    m_is_transfer_isSet = !json[QString("is_transfer")].isNull() && m_is_transfer_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_memo_isValid = ::OpenAPI::fromJsonValue(m_memo, json[QString("memo")]);
    m_memo_isSet = !json[QString("memo")].isNull() && m_memo_isValid;

    m_needs_review_isValid = ::OpenAPI::fromJsonValue(m_needs_review, json[QString("needs_review")]);
    m_needs_review_isSet = !json[QString("needs_review")].isNull() && m_needs_review_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_original_payee_isValid = ::OpenAPI::fromJsonValue(m_original_payee, json[QString("original_payee")]);
    m_original_payee_isSet = !json[QString("original_payee")].isNull() && m_original_payee_isValid;

    m_payee_isValid = ::OpenAPI::fromJsonValue(m_payee, json[QString("payee")]);
    m_payee_isSet = !json[QString("payee")].isNull() && m_payee_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_transaction_account_isValid = ::OpenAPI::fromJsonValue(m_transaction_account, json[QString("transaction_account")]);
    m_transaction_account_isSet = !json[QString("transaction_account")].isNull() && m_transaction_account_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_upload_source_isValid = ::OpenAPI::fromJsonValue(m_upload_source, json[QString("upload_source")]);
    m_upload_source_isSet = !json[QString("upload_source")].isNull() && m_upload_source_isValid;
}

QString OAITransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_amount_in_base_currency_isSet) {
        obj.insert(QString("amount_in_base_currency"), ::OpenAPI::toJsonValue(m_amount_in_base_currency));
    }
    if (m_category.isSet()) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_cheque_number_isSet) {
        obj.insert(QString("cheque_number"), ::OpenAPI::toJsonValue(m_cheque_number));
    }
    if (m_closing_balance_isSet) {
        obj.insert(QString("closing_balance"), ::OpenAPI::toJsonValue(m_closing_balance));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_transfer_isSet) {
        obj.insert(QString("is_transfer"), ::OpenAPI::toJsonValue(m_is_transfer));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_memo_isSet) {
        obj.insert(QString("memo"), ::OpenAPI::toJsonValue(m_memo));
    }
    if (m_needs_review_isSet) {
        obj.insert(QString("needs_review"), ::OpenAPI::toJsonValue(m_needs_review));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_original_payee_isSet) {
        obj.insert(QString("original_payee"), ::OpenAPI::toJsonValue(m_original_payee));
    }
    if (m_payee_isSet) {
        obj.insert(QString("payee"), ::OpenAPI::toJsonValue(m_payee));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_transaction_account.isSet()) {
        obj.insert(QString("transaction_account"), ::OpenAPI::toJsonValue(m_transaction_account));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_upload_source_isSet) {
        obj.insert(QString("upload_source"), ::OpenAPI::toJsonValue(m_upload_source));
    }
    return obj;
}

double OAITransaction::getAmount() const {
    return m_amount;
}
void OAITransaction::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAITransaction::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAITransaction::is_amount_Valid() const{
    return m_amount_isValid;
}

double OAITransaction::getAmountInBaseCurrency() const {
    return m_amount_in_base_currency;
}
void OAITransaction::setAmountInBaseCurrency(const double &amount_in_base_currency) {
    m_amount_in_base_currency = amount_in_base_currency;
    m_amount_in_base_currency_isSet = true;
}

bool OAITransaction::is_amount_in_base_currency_Set() const{
    return m_amount_in_base_currency_isSet;
}

bool OAITransaction::is_amount_in_base_currency_Valid() const{
    return m_amount_in_base_currency_isValid;
}

OAICategory OAITransaction::getCategory() const {
    return m_category;
}
void OAITransaction::setCategory(const OAICategory &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAITransaction::is_category_Set() const{
    return m_category_isSet;
}

bool OAITransaction::is_category_Valid() const{
    return m_category_isValid;
}

QString OAITransaction::getChequeNumber() const {
    return m_cheque_number;
}
void OAITransaction::setChequeNumber(const QString &cheque_number) {
    m_cheque_number = cheque_number;
    m_cheque_number_isSet = true;
}

bool OAITransaction::is_cheque_number_Set() const{
    return m_cheque_number_isSet;
}

bool OAITransaction::is_cheque_number_Valid() const{
    return m_cheque_number_isValid;
}

double OAITransaction::getClosingBalance() const {
    return m_closing_balance;
}
void OAITransaction::setClosingBalance(const double &closing_balance) {
    m_closing_balance = closing_balance;
    m_closing_balance_isSet = true;
}

bool OAITransaction::is_closing_balance_Set() const{
    return m_closing_balance_isSet;
}

bool OAITransaction::is_closing_balance_Valid() const{
    return m_closing_balance_isValid;
}

QString OAITransaction::getCreatedAt() const {
    return m_created_at;
}
void OAITransaction::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITransaction::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITransaction::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAITransaction::getDate() const {
    return m_date;
}
void OAITransaction::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAITransaction::is_date_Set() const{
    return m_date_isSet;
}

bool OAITransaction::is_date_Valid() const{
    return m_date_isValid;
}

qint32 OAITransaction::getId() const {
    return m_id;
}
void OAITransaction::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITransaction::is_id_Set() const{
    return m_id_isSet;
}

bool OAITransaction::is_id_Valid() const{
    return m_id_isValid;
}

bool OAITransaction::isIsTransfer() const {
    return m_is_transfer;
}
void OAITransaction::setIsTransfer(const bool &is_transfer) {
    m_is_transfer = is_transfer;
    m_is_transfer_isSet = true;
}

bool OAITransaction::is_is_transfer_Set() const{
    return m_is_transfer_isSet;
}

bool OAITransaction::is_is_transfer_Valid() const{
    return m_is_transfer_isValid;
}

QList<QString> OAITransaction::getLabels() const {
    return m_labels;
}
void OAITransaction::setLabels(const QList<QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAITransaction::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAITransaction::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAITransaction::getMemo() const {
    return m_memo;
}
void OAITransaction::setMemo(const QString &memo) {
    m_memo = memo;
    m_memo_isSet = true;
}

bool OAITransaction::is_memo_Set() const{
    return m_memo_isSet;
}

bool OAITransaction::is_memo_Valid() const{
    return m_memo_isValid;
}

bool OAITransaction::isNeedsReview() const {
    return m_needs_review;
}
void OAITransaction::setNeedsReview(const bool &needs_review) {
    m_needs_review = needs_review;
    m_needs_review_isSet = true;
}

bool OAITransaction::is_needs_review_Set() const{
    return m_needs_review_isSet;
}

bool OAITransaction::is_needs_review_Valid() const{
    return m_needs_review_isValid;
}

QString OAITransaction::getNote() const {
    return m_note;
}
void OAITransaction::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAITransaction::is_note_Set() const{
    return m_note_isSet;
}

bool OAITransaction::is_note_Valid() const{
    return m_note_isValid;
}

QString OAITransaction::getOriginalPayee() const {
    return m_original_payee;
}
void OAITransaction::setOriginalPayee(const QString &original_payee) {
    m_original_payee = original_payee;
    m_original_payee_isSet = true;
}

bool OAITransaction::is_original_payee_Set() const{
    return m_original_payee_isSet;
}

bool OAITransaction::is_original_payee_Valid() const{
    return m_original_payee_isValid;
}

QString OAITransaction::getPayee() const {
    return m_payee;
}
void OAITransaction::setPayee(const QString &payee) {
    m_payee = payee;
    m_payee_isSet = true;
}

bool OAITransaction::is_payee_Set() const{
    return m_payee_isSet;
}

bool OAITransaction::is_payee_Valid() const{
    return m_payee_isValid;
}

QString OAITransaction::getStatus() const {
    return m_status;
}
void OAITransaction::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITransaction::is_status_Set() const{
    return m_status_isSet;
}

bool OAITransaction::is_status_Valid() const{
    return m_status_isValid;
}

OAITransactionAccount OAITransaction::getTransactionAccount() const {
    return m_transaction_account;
}
void OAITransaction::setTransactionAccount(const OAITransactionAccount &transaction_account) {
    m_transaction_account = transaction_account;
    m_transaction_account_isSet = true;
}

bool OAITransaction::is_transaction_account_Set() const{
    return m_transaction_account_isSet;
}

bool OAITransaction::is_transaction_account_Valid() const{
    return m_transaction_account_isValid;
}

QString OAITransaction::getType() const {
    return m_type;
}
void OAITransaction::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITransaction::is_type_Set() const{
    return m_type_isSet;
}

bool OAITransaction::is_type_Valid() const{
    return m_type_isValid;
}

QString OAITransaction::getUpdatedAt() const {
    return m_updated_at;
}
void OAITransaction::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAITransaction::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAITransaction::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAITransaction::getUploadSource() const {
    return m_upload_source;
}
void OAITransaction::setUploadSource(const QString &upload_source) {
    m_upload_source = upload_source;
    m_upload_source_isSet = true;
}

bool OAITransaction::is_upload_source_Set() const{
    return m_upload_source_isSet;
}

bool OAITransaction::is_upload_source_Valid() const{
    return m_upload_source_isValid;
}

bool OAITransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cheque_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closing_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_transfer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_memo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_needs_review_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_payee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
