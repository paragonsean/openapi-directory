/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttachment_variants.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttachment_variants::OAIAttachment_variants(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttachment_variants::OAIAttachment_variants() {
    this->initializeModel();
}

OAIAttachment_variants::~OAIAttachment_variants() {}

void OAIAttachment_variants::initializeModel() {

    m_large_url_isSet = false;
    m_large_url_isValid = false;

    m_thumb_url_isSet = false;
    m_thumb_url_isValid = false;
}

void OAIAttachment_variants::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttachment_variants::fromJsonObject(QJsonObject json) {

    m_large_url_isValid = ::OpenAPI::fromJsonValue(m_large_url, json[QString("large_url")]);
    m_large_url_isSet = !json[QString("large_url")].isNull() && m_large_url_isValid;

    m_thumb_url_isValid = ::OpenAPI::fromJsonValue(m_thumb_url, json[QString("thumb_url")]);
    m_thumb_url_isSet = !json[QString("thumb_url")].isNull() && m_thumb_url_isValid;
}

QString OAIAttachment_variants::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttachment_variants::asJsonObject() const {
    QJsonObject obj;
    if (m_large_url_isSet) {
        obj.insert(QString("large_url"), ::OpenAPI::toJsonValue(m_large_url));
    }
    if (m_thumb_url_isSet) {
        obj.insert(QString("thumb_url"), ::OpenAPI::toJsonValue(m_thumb_url));
    }
    return obj;
}

QString OAIAttachment_variants::getLargeUrl() const {
    return m_large_url;
}
void OAIAttachment_variants::setLargeUrl(const QString &large_url) {
    m_large_url = large_url;
    m_large_url_isSet = true;
}

bool OAIAttachment_variants::is_large_url_Set() const{
    return m_large_url_isSet;
}

bool OAIAttachment_variants::is_large_url_Valid() const{
    return m_large_url_isValid;
}

QString OAIAttachment_variants::getThumbUrl() const {
    return m_thumb_url;
}
void OAIAttachment_variants::setThumbUrl(const QString &thumb_url) {
    m_thumb_url = thumb_url;
    m_thumb_url_isSet = true;
}

bool OAIAttachment_variants::is_thumb_url_Set() const{
    return m_thumb_url_isSet;
}

bool OAIAttachment_variants::is_thumb_url_Valid() const{
    return m_thumb_url_isValid;
}

bool OAIAttachment_variants::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_large_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttachment_variants::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
