/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionAccount::OAITransactionAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionAccount::OAITransactionAccount() {
    this->initializeModel();
}

OAITransactionAccount::~OAITransactionAccount() {}

void OAITransactionAccount::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_current_balance_isSet = false;
    m_current_balance_isValid = false;

    m_current_balance_date_isSet = false;
    m_current_balance_date_isValid = false;

    m_current_balance_exchange_rate_isSet = false;
    m_current_balance_exchange_rate_isValid = false;

    m_current_balance_in_base_currency_isSet = false;
    m_current_balance_in_base_currency_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_institution_isSet = false;
    m_institution_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_safe_balance_isSet = false;
    m_safe_balance_isValid = false;

    m_safe_balance_in_base_currency_isSet = false;
    m_safe_balance_in_base_currency_isValid = false;

    m_starting_balance_isSet = false;
    m_starting_balance_isValid = false;

    m_starting_balance_date_isSet = false;
    m_starting_balance_date_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAITransactionAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactionAccount::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currency_code")]);
    m_currency_code_isSet = !json[QString("currency_code")].isNull() && m_currency_code_isValid;

    m_current_balance_isValid = ::OpenAPI::fromJsonValue(m_current_balance, json[QString("current_balance")]);
    m_current_balance_isSet = !json[QString("current_balance")].isNull() && m_current_balance_isValid;

    m_current_balance_date_isValid = ::OpenAPI::fromJsonValue(m_current_balance_date, json[QString("current_balance_date")]);
    m_current_balance_date_isSet = !json[QString("current_balance_date")].isNull() && m_current_balance_date_isValid;

    m_current_balance_exchange_rate_isValid = ::OpenAPI::fromJsonValue(m_current_balance_exchange_rate, json[QString("current_balance_exchange_rate")]);
    m_current_balance_exchange_rate_isSet = !json[QString("current_balance_exchange_rate")].isNull() && m_current_balance_exchange_rate_isValid;

    m_current_balance_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_current_balance_in_base_currency, json[QString("current_balance_in_base_currency")]);
    m_current_balance_in_base_currency_isSet = !json[QString("current_balance_in_base_currency")].isNull() && m_current_balance_in_base_currency_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_institution_isValid = ::OpenAPI::fromJsonValue(m_institution, json[QString("institution")]);
    m_institution_isSet = !json[QString("institution")].isNull() && m_institution_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_safe_balance_isValid = ::OpenAPI::fromJsonValue(m_safe_balance, json[QString("safe_balance")]);
    m_safe_balance_isSet = !json[QString("safe_balance")].isNull() && m_safe_balance_isValid;

    m_safe_balance_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_safe_balance_in_base_currency, json[QString("safe_balance_in_base_currency")]);
    m_safe_balance_in_base_currency_isSet = !json[QString("safe_balance_in_base_currency")].isNull() && m_safe_balance_in_base_currency_isValid;

    m_starting_balance_isValid = ::OpenAPI::fromJsonValue(m_starting_balance, json[QString("starting_balance")]);
    m_starting_balance_isSet = !json[QString("starting_balance")].isNull() && m_starting_balance_isValid;

    m_starting_balance_date_isValid = ::OpenAPI::fromJsonValue(m_starting_balance_date, json[QString("starting_balance_date")]);
    m_starting_balance_date_isSet = !json[QString("starting_balance_date")].isNull() && m_starting_balance_date_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAITransactionAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactionAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currency_code"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_current_balance_isSet) {
        obj.insert(QString("current_balance"), ::OpenAPI::toJsonValue(m_current_balance));
    }
    if (m_current_balance_date_isSet) {
        obj.insert(QString("current_balance_date"), ::OpenAPI::toJsonValue(m_current_balance_date));
    }
    if (m_current_balance_exchange_rate_isSet) {
        obj.insert(QString("current_balance_exchange_rate"), ::OpenAPI::toJsonValue(m_current_balance_exchange_rate));
    }
    if (m_current_balance_in_base_currency_isSet) {
        obj.insert(QString("current_balance_in_base_currency"), ::OpenAPI::toJsonValue(m_current_balance_in_base_currency));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_institution.isSet()) {
        obj.insert(QString("institution"), ::OpenAPI::toJsonValue(m_institution));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_safe_balance_isSet) {
        obj.insert(QString("safe_balance"), ::OpenAPI::toJsonValue(m_safe_balance));
    }
    if (m_safe_balance_in_base_currency_isSet) {
        obj.insert(QString("safe_balance_in_base_currency"), ::OpenAPI::toJsonValue(m_safe_balance_in_base_currency));
    }
    if (m_starting_balance_isSet) {
        obj.insert(QString("starting_balance"), ::OpenAPI::toJsonValue(m_starting_balance));
    }
    if (m_starting_balance_date_isSet) {
        obj.insert(QString("starting_balance_date"), ::OpenAPI::toJsonValue(m_starting_balance_date));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAITransactionAccount::getCreatedAt() const {
    return m_created_at;
}
void OAITransactionAccount::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITransactionAccount::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITransactionAccount::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAITransactionAccount::getCurrencyCode() const {
    return m_currency_code;
}
void OAITransactionAccount::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAITransactionAccount::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAITransactionAccount::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

double OAITransactionAccount::getCurrentBalance() const {
    return m_current_balance;
}
void OAITransactionAccount::setCurrentBalance(const double &current_balance) {
    m_current_balance = current_balance;
    m_current_balance_isSet = true;
}

bool OAITransactionAccount::is_current_balance_Set() const{
    return m_current_balance_isSet;
}

bool OAITransactionAccount::is_current_balance_Valid() const{
    return m_current_balance_isValid;
}

QString OAITransactionAccount::getCurrentBalanceDate() const {
    return m_current_balance_date;
}
void OAITransactionAccount::setCurrentBalanceDate(const QString &current_balance_date) {
    m_current_balance_date = current_balance_date;
    m_current_balance_date_isSet = true;
}

bool OAITransactionAccount::is_current_balance_date_Set() const{
    return m_current_balance_date_isSet;
}

bool OAITransactionAccount::is_current_balance_date_Valid() const{
    return m_current_balance_date_isValid;
}

double OAITransactionAccount::getCurrentBalanceExchangeRate() const {
    return m_current_balance_exchange_rate;
}
void OAITransactionAccount::setCurrentBalanceExchangeRate(const double &current_balance_exchange_rate) {
    m_current_balance_exchange_rate = current_balance_exchange_rate;
    m_current_balance_exchange_rate_isSet = true;
}

bool OAITransactionAccount::is_current_balance_exchange_rate_Set() const{
    return m_current_balance_exchange_rate_isSet;
}

bool OAITransactionAccount::is_current_balance_exchange_rate_Valid() const{
    return m_current_balance_exchange_rate_isValid;
}

double OAITransactionAccount::getCurrentBalanceInBaseCurrency() const {
    return m_current_balance_in_base_currency;
}
void OAITransactionAccount::setCurrentBalanceInBaseCurrency(const double &current_balance_in_base_currency) {
    m_current_balance_in_base_currency = current_balance_in_base_currency;
    m_current_balance_in_base_currency_isSet = true;
}

bool OAITransactionAccount::is_current_balance_in_base_currency_Set() const{
    return m_current_balance_in_base_currency_isSet;
}

bool OAITransactionAccount::is_current_balance_in_base_currency_Valid() const{
    return m_current_balance_in_base_currency_isValid;
}

qint32 OAITransactionAccount::getId() const {
    return m_id;
}
void OAITransactionAccount::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITransactionAccount::is_id_Set() const{
    return m_id_isSet;
}

bool OAITransactionAccount::is_id_Valid() const{
    return m_id_isValid;
}

OAIInstitution OAITransactionAccount::getInstitution() const {
    return m_institution;
}
void OAITransactionAccount::setInstitution(const OAIInstitution &institution) {
    m_institution = institution;
    m_institution_isSet = true;
}

bool OAITransactionAccount::is_institution_Set() const{
    return m_institution_isSet;
}

bool OAITransactionAccount::is_institution_Valid() const{
    return m_institution_isValid;
}

QString OAITransactionAccount::getName() const {
    return m_name;
}
void OAITransactionAccount::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITransactionAccount::is_name_Set() const{
    return m_name_isSet;
}

bool OAITransactionAccount::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITransactionAccount::getNumber() const {
    return m_number;
}
void OAITransactionAccount::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAITransactionAccount::is_number_Set() const{
    return m_number_isSet;
}

bool OAITransactionAccount::is_number_Valid() const{
    return m_number_isValid;
}

double OAITransactionAccount::getSafeBalance() const {
    return m_safe_balance;
}
void OAITransactionAccount::setSafeBalance(const double &safe_balance) {
    m_safe_balance = safe_balance;
    m_safe_balance_isSet = true;
}

bool OAITransactionAccount::is_safe_balance_Set() const{
    return m_safe_balance_isSet;
}

bool OAITransactionAccount::is_safe_balance_Valid() const{
    return m_safe_balance_isValid;
}

double OAITransactionAccount::getSafeBalanceInBaseCurrency() const {
    return m_safe_balance_in_base_currency;
}
void OAITransactionAccount::setSafeBalanceInBaseCurrency(const double &safe_balance_in_base_currency) {
    m_safe_balance_in_base_currency = safe_balance_in_base_currency;
    m_safe_balance_in_base_currency_isSet = true;
}

bool OAITransactionAccount::is_safe_balance_in_base_currency_Set() const{
    return m_safe_balance_in_base_currency_isSet;
}

bool OAITransactionAccount::is_safe_balance_in_base_currency_Valid() const{
    return m_safe_balance_in_base_currency_isValid;
}

double OAITransactionAccount::getStartingBalance() const {
    return m_starting_balance;
}
void OAITransactionAccount::setStartingBalance(const double &starting_balance) {
    m_starting_balance = starting_balance;
    m_starting_balance_isSet = true;
}

bool OAITransactionAccount::is_starting_balance_Set() const{
    return m_starting_balance_isSet;
}

bool OAITransactionAccount::is_starting_balance_Valid() const{
    return m_starting_balance_isValid;
}

QString OAITransactionAccount::getStartingBalanceDate() const {
    return m_starting_balance_date;
}
void OAITransactionAccount::setStartingBalanceDate(const QString &starting_balance_date) {
    m_starting_balance_date = starting_balance_date;
    m_starting_balance_date_isSet = true;
}

bool OAITransactionAccount::is_starting_balance_date_Set() const{
    return m_starting_balance_date_isSet;
}

bool OAITransactionAccount::is_starting_balance_date_Valid() const{
    return m_starting_balance_date_isValid;
}

QString OAITransactionAccount::getType() const {
    return m_type;
}
void OAITransactionAccount::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITransactionAccount::is_type_Set() const{
    return m_type_isSet;
}

bool OAITransactionAccount::is_type_Valid() const{
    return m_type_isValid;
}

QString OAITransactionAccount::getUpdatedAt() const {
    return m_updated_at;
}
void OAITransactionAccount::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAITransactionAccount::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAITransactionAccount::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAITransactionAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_balance_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_balance_exchange_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_balance_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_institution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safe_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safe_balance_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starting_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starting_balance_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactionAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
