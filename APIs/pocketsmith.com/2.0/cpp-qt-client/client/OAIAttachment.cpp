/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttachment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttachment::OAIAttachment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttachment::OAIAttachment() {
    this->initializeModel();
}

OAIAttachment::~OAIAttachment() {}

void OAIAttachment::initializeModel() {

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_content_type_meta_isSet = false;
    m_content_type_meta_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_original_url_isSet = false;
    m_original_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_variants_isSet = false;
    m_variants_isValid = false;
}

void OAIAttachment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttachment::fromJsonObject(QJsonObject json) {

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("content_type")]);
    m_content_type_isSet = !json[QString("content_type")].isNull() && m_content_type_isValid;

    m_content_type_meta_isValid = ::OpenAPI::fromJsonValue(m_content_type_meta, json[QString("content_type_meta")]);
    m_content_type_meta_isSet = !json[QString("content_type_meta")].isNull() && m_content_type_meta_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("file_name")]);
    m_file_name_isSet = !json[QString("file_name")].isNull() && m_file_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_original_url_isValid = ::OpenAPI::fromJsonValue(m_original_url, json[QString("original_url")]);
    m_original_url_isSet = !json[QString("original_url")].isNull() && m_original_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_variants_isValid = ::OpenAPI::fromJsonValue(m_variants, json[QString("variants")]);
    m_variants_isSet = !json[QString("variants")].isNull() && m_variants_isValid;
}

QString OAIAttachment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttachment::asJsonObject() const {
    QJsonObject obj;
    if (m_content_type_isSet) {
        obj.insert(QString("content_type"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_content_type_meta.isSet()) {
        obj.insert(QString("content_type_meta"), ::OpenAPI::toJsonValue(m_content_type_meta));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("file_name"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_original_url_isSet) {
        obj.insert(QString("original_url"), ::OpenAPI::toJsonValue(m_original_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_variants.isSet()) {
        obj.insert(QString("variants"), ::OpenAPI::toJsonValue(m_variants));
    }
    return obj;
}

QString OAIAttachment::getContentType() const {
    return m_content_type;
}
void OAIAttachment::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIAttachment::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIAttachment::is_content_type_Valid() const{
    return m_content_type_isValid;
}

OAIAttachment_content_type_meta OAIAttachment::getContentTypeMeta() const {
    return m_content_type_meta;
}
void OAIAttachment::setContentTypeMeta(const OAIAttachment_content_type_meta &content_type_meta) {
    m_content_type_meta = content_type_meta;
    m_content_type_meta_isSet = true;
}

bool OAIAttachment::is_content_type_meta_Set() const{
    return m_content_type_meta_isSet;
}

bool OAIAttachment::is_content_type_meta_Valid() const{
    return m_content_type_meta_isValid;
}

QString OAIAttachment::getCreatedAt() const {
    return m_created_at;
}
void OAIAttachment::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAttachment::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAttachment::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIAttachment::getFileName() const {
    return m_file_name;
}
void OAIAttachment::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIAttachment::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIAttachment::is_file_name_Valid() const{
    return m_file_name_isValid;
}

qint32 OAIAttachment::getId() const {
    return m_id;
}
void OAIAttachment::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAttachment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAttachment::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAttachment::getOriginalUrl() const {
    return m_original_url;
}
void OAIAttachment::setOriginalUrl(const QString &original_url) {
    m_original_url = original_url;
    m_original_url_isSet = true;
}

bool OAIAttachment::is_original_url_Set() const{
    return m_original_url_isSet;
}

bool OAIAttachment::is_original_url_Valid() const{
    return m_original_url_isValid;
}

QString OAIAttachment::getTitle() const {
    return m_title;
}
void OAIAttachment::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAttachment::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAttachment::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIAttachment::getType() const {
    return m_type;
}
void OAIAttachment::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAttachment::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAttachment::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAttachment::getUpdatedAt() const {
    return m_updated_at;
}
void OAIAttachment::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIAttachment::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIAttachment::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIAttachment_variants OAIAttachment::getVariants() const {
    return m_variants;
}
void OAIAttachment::setVariants(const OAIAttachment_variants &variants) {
    m_variants = variants;
    m_variants_isSet = true;
}

bool OAIAttachment::is_variants_Set() const{
    return m_variants_isSet;
}

bool OAIAttachment::is_variants_Valid() const{
    return m_variants_isValid;
}

bool OAIAttachment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_meta.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variants.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttachment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
