/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_always_show_base_currency_isSet = false;
    m_always_show_base_currency_isValid = false;

    m_available_accounts_isSet = false;
    m_available_accounts_isValid = false;

    m_available_budgets_isSet = false;
    m_available_budgets_isValid = false;

    m_avatar_url_isSet = false;
    m_avatar_url_isValid = false;

    m_base_currency_code_isSet = false;
    m_base_currency_code_isValid = false;

    m_beta_user_isSet = false;
    m_beta_user_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_forecast_defer_recalculate_isSet = false;
    m_forecast_defer_recalculate_isValid = false;

    m_forecast_end_date_isSet = false;
    m_forecast_end_date_isValid = false;

    m_forecast_last_accessed_at_isSet = false;
    m_forecast_last_accessed_at_isValid = false;

    m_forecast_last_updated_at_isSet = false;
    m_forecast_last_updated_at_isValid = false;

    m_forecast_needs_recalculate_isSet = false;
    m_forecast_needs_recalculate_isValid = false;

    m_forecast_start_date_isSet = false;
    m_forecast_start_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_reviewing_transactions_isSet = false;
    m_is_reviewing_transactions_isValid = false;

    m_last_activity_at_isSet = false;
    m_last_activity_at_isValid = false;

    m_last_logged_in_at_isSet = false;
    m_last_logged_in_at_isValid = false;

    m_login_isSet = false;
    m_login_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_using_multiple_currencies_isSet = false;
    m_using_multiple_currencies_isValid = false;

    m_week_start_day_isSet = false;
    m_week_start_day_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_always_show_base_currency_isValid = ::OpenAPI::fromJsonValue(m_always_show_base_currency, json[QString("always_show_base_currency")]);
    m_always_show_base_currency_isSet = !json[QString("always_show_base_currency")].isNull() && m_always_show_base_currency_isValid;

    m_available_accounts_isValid = ::OpenAPI::fromJsonValue(m_available_accounts, json[QString("available_accounts")]);
    m_available_accounts_isSet = !json[QString("available_accounts")].isNull() && m_available_accounts_isValid;

    m_available_budgets_isValid = ::OpenAPI::fromJsonValue(m_available_budgets, json[QString("available_budgets")]);
    m_available_budgets_isSet = !json[QString("available_budgets")].isNull() && m_available_budgets_isValid;

    m_avatar_url_isValid = ::OpenAPI::fromJsonValue(m_avatar_url, json[QString("avatar_url")]);
    m_avatar_url_isSet = !json[QString("avatar_url")].isNull() && m_avatar_url_isValid;

    m_base_currency_code_isValid = ::OpenAPI::fromJsonValue(m_base_currency_code, json[QString("base_currency_code")]);
    m_base_currency_code_isSet = !json[QString("base_currency_code")].isNull() && m_base_currency_code_isValid;

    m_beta_user_isValid = ::OpenAPI::fromJsonValue(m_beta_user, json[QString("beta_user")]);
    m_beta_user_isSet = !json[QString("beta_user")].isNull() && m_beta_user_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_forecast_defer_recalculate_isValid = ::OpenAPI::fromJsonValue(m_forecast_defer_recalculate, json[QString("forecast_defer_recalculate")]);
    m_forecast_defer_recalculate_isSet = !json[QString("forecast_defer_recalculate")].isNull() && m_forecast_defer_recalculate_isValid;

    m_forecast_end_date_isValid = ::OpenAPI::fromJsonValue(m_forecast_end_date, json[QString("forecast_end_date")]);
    m_forecast_end_date_isSet = !json[QString("forecast_end_date")].isNull() && m_forecast_end_date_isValid;

    m_forecast_last_accessed_at_isValid = ::OpenAPI::fromJsonValue(m_forecast_last_accessed_at, json[QString("forecast_last_accessed_at")]);
    m_forecast_last_accessed_at_isSet = !json[QString("forecast_last_accessed_at")].isNull() && m_forecast_last_accessed_at_isValid;

    m_forecast_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_forecast_last_updated_at, json[QString("forecast_last_updated_at")]);
    m_forecast_last_updated_at_isSet = !json[QString("forecast_last_updated_at")].isNull() && m_forecast_last_updated_at_isValid;

    m_forecast_needs_recalculate_isValid = ::OpenAPI::fromJsonValue(m_forecast_needs_recalculate, json[QString("forecast_needs_recalculate")]);
    m_forecast_needs_recalculate_isSet = !json[QString("forecast_needs_recalculate")].isNull() && m_forecast_needs_recalculate_isValid;

    m_forecast_start_date_isValid = ::OpenAPI::fromJsonValue(m_forecast_start_date, json[QString("forecast_start_date")]);
    m_forecast_start_date_isSet = !json[QString("forecast_start_date")].isNull() && m_forecast_start_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_reviewing_transactions_isValid = ::OpenAPI::fromJsonValue(m_is_reviewing_transactions, json[QString("is_reviewing_transactions")]);
    m_is_reviewing_transactions_isSet = !json[QString("is_reviewing_transactions")].isNull() && m_is_reviewing_transactions_isValid;

    m_last_activity_at_isValid = ::OpenAPI::fromJsonValue(m_last_activity_at, json[QString("last_activity_at")]);
    m_last_activity_at_isSet = !json[QString("last_activity_at")].isNull() && m_last_activity_at_isValid;

    m_last_logged_in_at_isValid = ::OpenAPI::fromJsonValue(m_last_logged_in_at, json[QString("last_logged_in_at")]);
    m_last_logged_in_at_isSet = !json[QString("last_logged_in_at")].isNull() && m_last_logged_in_at_isValid;

    m_login_isValid = ::OpenAPI::fromJsonValue(m_login, json[QString("login")]);
    m_login_isSet = !json[QString("login")].isNull() && m_login_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("time_zone")]);
    m_time_zone_isSet = !json[QString("time_zone")].isNull() && m_time_zone_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_using_multiple_currencies_isValid = ::OpenAPI::fromJsonValue(m_using_multiple_currencies, json[QString("using_multiple_currencies")]);
    m_using_multiple_currencies_isSet = !json[QString("using_multiple_currencies")].isNull() && m_using_multiple_currencies_isValid;

    m_week_start_day_isValid = ::OpenAPI::fromJsonValue(m_week_start_day, json[QString("week_start_day")]);
    m_week_start_day_isSet = !json[QString("week_start_day")].isNull() && m_week_start_day_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_always_show_base_currency_isSet) {
        obj.insert(QString("always_show_base_currency"), ::OpenAPI::toJsonValue(m_always_show_base_currency));
    }
    if (m_available_accounts_isSet) {
        obj.insert(QString("available_accounts"), ::OpenAPI::toJsonValue(m_available_accounts));
    }
    if (m_available_budgets_isSet) {
        obj.insert(QString("available_budgets"), ::OpenAPI::toJsonValue(m_available_budgets));
    }
    if (m_avatar_url_isSet) {
        obj.insert(QString("avatar_url"), ::OpenAPI::toJsonValue(m_avatar_url));
    }
    if (m_base_currency_code_isSet) {
        obj.insert(QString("base_currency_code"), ::OpenAPI::toJsonValue(m_base_currency_code));
    }
    if (m_beta_user_isSet) {
        obj.insert(QString("beta_user"), ::OpenAPI::toJsonValue(m_beta_user));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_forecast_defer_recalculate_isSet) {
        obj.insert(QString("forecast_defer_recalculate"), ::OpenAPI::toJsonValue(m_forecast_defer_recalculate));
    }
    if (m_forecast_end_date_isSet) {
        obj.insert(QString("forecast_end_date"), ::OpenAPI::toJsonValue(m_forecast_end_date));
    }
    if (m_forecast_last_accessed_at_isSet) {
        obj.insert(QString("forecast_last_accessed_at"), ::OpenAPI::toJsonValue(m_forecast_last_accessed_at));
    }
    if (m_forecast_last_updated_at_isSet) {
        obj.insert(QString("forecast_last_updated_at"), ::OpenAPI::toJsonValue(m_forecast_last_updated_at));
    }
    if (m_forecast_needs_recalculate_isSet) {
        obj.insert(QString("forecast_needs_recalculate"), ::OpenAPI::toJsonValue(m_forecast_needs_recalculate));
    }
    if (m_forecast_start_date_isSet) {
        obj.insert(QString("forecast_start_date"), ::OpenAPI::toJsonValue(m_forecast_start_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_reviewing_transactions_isSet) {
        obj.insert(QString("is_reviewing_transactions"), ::OpenAPI::toJsonValue(m_is_reviewing_transactions));
    }
    if (m_last_activity_at_isSet) {
        obj.insert(QString("last_activity_at"), ::OpenAPI::toJsonValue(m_last_activity_at));
    }
    if (m_last_logged_in_at_isSet) {
        obj.insert(QString("last_logged_in_at"), ::OpenAPI::toJsonValue(m_last_logged_in_at));
    }
    if (m_login_isSet) {
        obj.insert(QString("login"), ::OpenAPI::toJsonValue(m_login));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("time_zone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_using_multiple_currencies_isSet) {
        obj.insert(QString("using_multiple_currencies"), ::OpenAPI::toJsonValue(m_using_multiple_currencies));
    }
    if (m_week_start_day_isSet) {
        obj.insert(QString("week_start_day"), ::OpenAPI::toJsonValue(m_week_start_day));
    }
    return obj;
}

bool OAIUser::isAlwaysShowBaseCurrency() const {
    return m_always_show_base_currency;
}
void OAIUser::setAlwaysShowBaseCurrency(const bool &always_show_base_currency) {
    m_always_show_base_currency = always_show_base_currency;
    m_always_show_base_currency_isSet = true;
}

bool OAIUser::is_always_show_base_currency_Set() const{
    return m_always_show_base_currency_isSet;
}

bool OAIUser::is_always_show_base_currency_Valid() const{
    return m_always_show_base_currency_isValid;
}

qint32 OAIUser::getAvailableAccounts() const {
    return m_available_accounts;
}
void OAIUser::setAvailableAccounts(const qint32 &available_accounts) {
    m_available_accounts = available_accounts;
    m_available_accounts_isSet = true;
}

bool OAIUser::is_available_accounts_Set() const{
    return m_available_accounts_isSet;
}

bool OAIUser::is_available_accounts_Valid() const{
    return m_available_accounts_isValid;
}

qint32 OAIUser::getAvailableBudgets() const {
    return m_available_budgets;
}
void OAIUser::setAvailableBudgets(const qint32 &available_budgets) {
    m_available_budgets = available_budgets;
    m_available_budgets_isSet = true;
}

bool OAIUser::is_available_budgets_Set() const{
    return m_available_budgets_isSet;
}

bool OAIUser::is_available_budgets_Valid() const{
    return m_available_budgets_isValid;
}

QString OAIUser::getAvatarUrl() const {
    return m_avatar_url;
}
void OAIUser::setAvatarUrl(const QString &avatar_url) {
    m_avatar_url = avatar_url;
    m_avatar_url_isSet = true;
}

bool OAIUser::is_avatar_url_Set() const{
    return m_avatar_url_isSet;
}

bool OAIUser::is_avatar_url_Valid() const{
    return m_avatar_url_isValid;
}

QString OAIUser::getBaseCurrencyCode() const {
    return m_base_currency_code;
}
void OAIUser::setBaseCurrencyCode(const QString &base_currency_code) {
    m_base_currency_code = base_currency_code;
    m_base_currency_code_isSet = true;
}

bool OAIUser::is_base_currency_code_Set() const{
    return m_base_currency_code_isSet;
}

bool OAIUser::is_base_currency_code_Valid() const{
    return m_base_currency_code_isValid;
}

bool OAIUser::isBetaUser() const {
    return m_beta_user;
}
void OAIUser::setBetaUser(const bool &beta_user) {
    m_beta_user = beta_user;
    m_beta_user_isSet = true;
}

bool OAIUser::is_beta_user_Set() const{
    return m_beta_user_isSet;
}

bool OAIUser::is_beta_user_Valid() const{
    return m_beta_user_isValid;
}

QString OAIUser::getCreatedAt() const {
    return m_created_at;
}
void OAIUser::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIUser::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUser::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIUser::getEmail() const {
    return m_email;
}
void OAIUser::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUser::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUser::is_email_Valid() const{
    return m_email_isValid;
}

bool OAIUser::isForecastDeferRecalculate() const {
    return m_forecast_defer_recalculate;
}
void OAIUser::setForecastDeferRecalculate(const bool &forecast_defer_recalculate) {
    m_forecast_defer_recalculate = forecast_defer_recalculate;
    m_forecast_defer_recalculate_isSet = true;
}

bool OAIUser::is_forecast_defer_recalculate_Set() const{
    return m_forecast_defer_recalculate_isSet;
}

bool OAIUser::is_forecast_defer_recalculate_Valid() const{
    return m_forecast_defer_recalculate_isValid;
}

QString OAIUser::getForecastEndDate() const {
    return m_forecast_end_date;
}
void OAIUser::setForecastEndDate(const QString &forecast_end_date) {
    m_forecast_end_date = forecast_end_date;
    m_forecast_end_date_isSet = true;
}

bool OAIUser::is_forecast_end_date_Set() const{
    return m_forecast_end_date_isSet;
}

bool OAIUser::is_forecast_end_date_Valid() const{
    return m_forecast_end_date_isValid;
}

QString OAIUser::getForecastLastAccessedAt() const {
    return m_forecast_last_accessed_at;
}
void OAIUser::setForecastLastAccessedAt(const QString &forecast_last_accessed_at) {
    m_forecast_last_accessed_at = forecast_last_accessed_at;
    m_forecast_last_accessed_at_isSet = true;
}

bool OAIUser::is_forecast_last_accessed_at_Set() const{
    return m_forecast_last_accessed_at_isSet;
}

bool OAIUser::is_forecast_last_accessed_at_Valid() const{
    return m_forecast_last_accessed_at_isValid;
}

QString OAIUser::getForecastLastUpdatedAt() const {
    return m_forecast_last_updated_at;
}
void OAIUser::setForecastLastUpdatedAt(const QString &forecast_last_updated_at) {
    m_forecast_last_updated_at = forecast_last_updated_at;
    m_forecast_last_updated_at_isSet = true;
}

bool OAIUser::is_forecast_last_updated_at_Set() const{
    return m_forecast_last_updated_at_isSet;
}

bool OAIUser::is_forecast_last_updated_at_Valid() const{
    return m_forecast_last_updated_at_isValid;
}

bool OAIUser::isForecastNeedsRecalculate() const {
    return m_forecast_needs_recalculate;
}
void OAIUser::setForecastNeedsRecalculate(const bool &forecast_needs_recalculate) {
    m_forecast_needs_recalculate = forecast_needs_recalculate;
    m_forecast_needs_recalculate_isSet = true;
}

bool OAIUser::is_forecast_needs_recalculate_Set() const{
    return m_forecast_needs_recalculate_isSet;
}

bool OAIUser::is_forecast_needs_recalculate_Valid() const{
    return m_forecast_needs_recalculate_isValid;
}

QString OAIUser::getForecastStartDate() const {
    return m_forecast_start_date;
}
void OAIUser::setForecastStartDate(const QString &forecast_start_date) {
    m_forecast_start_date = forecast_start_date;
    m_forecast_start_date_isSet = true;
}

bool OAIUser::is_forecast_start_date_Set() const{
    return m_forecast_start_date_isSet;
}

bool OAIUser::is_forecast_start_date_Valid() const{
    return m_forecast_start_date_isValid;
}

qint32 OAIUser::getId() const {
    return m_id;
}
void OAIUser::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUser::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIUser::isIsReviewingTransactions() const {
    return m_is_reviewing_transactions;
}
void OAIUser::setIsReviewingTransactions(const bool &is_reviewing_transactions) {
    m_is_reviewing_transactions = is_reviewing_transactions;
    m_is_reviewing_transactions_isSet = true;
}

bool OAIUser::is_is_reviewing_transactions_Set() const{
    return m_is_reviewing_transactions_isSet;
}

bool OAIUser::is_is_reviewing_transactions_Valid() const{
    return m_is_reviewing_transactions_isValid;
}

QString OAIUser::getLastActivityAt() const {
    return m_last_activity_at;
}
void OAIUser::setLastActivityAt(const QString &last_activity_at) {
    m_last_activity_at = last_activity_at;
    m_last_activity_at_isSet = true;
}

bool OAIUser::is_last_activity_at_Set() const{
    return m_last_activity_at_isSet;
}

bool OAIUser::is_last_activity_at_Valid() const{
    return m_last_activity_at_isValid;
}

QString OAIUser::getLastLoggedInAt() const {
    return m_last_logged_in_at;
}
void OAIUser::setLastLoggedInAt(const QString &last_logged_in_at) {
    m_last_logged_in_at = last_logged_in_at;
    m_last_logged_in_at_isSet = true;
}

bool OAIUser::is_last_logged_in_at_Set() const{
    return m_last_logged_in_at_isSet;
}

bool OAIUser::is_last_logged_in_at_Valid() const{
    return m_last_logged_in_at_isValid;
}

QString OAIUser::getLogin() const {
    return m_login;
}
void OAIUser::setLogin(const QString &login) {
    m_login = login;
    m_login_isSet = true;
}

bool OAIUser::is_login_Set() const{
    return m_login_isSet;
}

bool OAIUser::is_login_Valid() const{
    return m_login_isValid;
}

QString OAIUser::getName() const {
    return m_name;
}
void OAIUser::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUser::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUser::getTimeZone() const {
    return m_time_zone;
}
void OAIUser::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIUser::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIUser::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QString OAIUser::getUpdatedAt() const {
    return m_updated_at;
}
void OAIUser::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIUser::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIUser::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIUser::isUsingMultipleCurrencies() const {
    return m_using_multiple_currencies;
}
void OAIUser::setUsingMultipleCurrencies(const bool &using_multiple_currencies) {
    m_using_multiple_currencies = using_multiple_currencies;
    m_using_multiple_currencies_isSet = true;
}

bool OAIUser::is_using_multiple_currencies_Set() const{
    return m_using_multiple_currencies_isSet;
}

bool OAIUser::is_using_multiple_currencies_Valid() const{
    return m_using_multiple_currencies_isValid;
}

qint32 OAIUser::getWeekStartDay() const {
    return m_week_start_day;
}
void OAIUser::setWeekStartDay(const qint32 &week_start_day) {
    m_week_start_day = week_start_day;
    m_week_start_day_isSet = true;
}

bool OAIUser::is_week_start_day_Set() const{
    return m_week_start_day_isSet;
}

bool OAIUser::is_week_start_day_Valid() const{
    return m_week_start_day_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_always_show_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_accounts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_budgets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beta_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_defer_recalculate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_last_accessed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_needs_recalculate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_reviewing_transactions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_activity_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_logged_in_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_using_multiple_currencies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_start_day_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
