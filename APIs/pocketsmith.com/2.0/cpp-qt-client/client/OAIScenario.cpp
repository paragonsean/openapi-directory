/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScenario.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScenario::OAIScenario(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScenario::OAIScenario() {
    this->initializeModel();
}

OAIScenario::~OAIScenario() {}

void OAIScenario::initializeModel() {

    m_achieve_date_isSet = false;
    m_achieve_date_isValid = false;

    m_closing_balance_isSet = false;
    m_closing_balance_isValid = false;

    m_closing_balance_date_isSet = false;
    m_closing_balance_date_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_current_balance_isSet = false;
    m_current_balance_isValid = false;

    m_current_balance_date_isSet = false;
    m_current_balance_date_isValid = false;

    m_current_balance_exchange_rate_isSet = false;
    m_current_balance_exchange_rate_isValid = false;

    m_current_balance_in_base_currency_isSet = false;
    m_current_balance_in_base_currency_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_interest_rate_isSet = false;
    m_interest_rate_isValid = false;

    m_interest_rate_repeat_id_isSet = false;
    m_interest_rate_repeat_id_isValid = false;

    m_maximum_value_isSet = false;
    m_maximum_value_isValid = false;

    m_minimum_value_isSet = false;
    m_minimum_value_isValid = false;

    m_safe_balance_isSet = false;
    m_safe_balance_isValid = false;

    m_safe_balance_in_base_currency_isSet = false;
    m_safe_balance_in_base_currency_isValid = false;

    m_starting_balance_isSet = false;
    m_starting_balance_isValid = false;

    m_starting_balance_date_isSet = false;
    m_starting_balance_date_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIScenario::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScenario::fromJsonObject(QJsonObject json) {

    m_achieve_date_isValid = ::OpenAPI::fromJsonValue(m_achieve_date, json[QString("achieve_date")]);
    m_achieve_date_isSet = !json[QString("achieve_date")].isNull() && m_achieve_date_isValid;

    m_closing_balance_isValid = ::OpenAPI::fromJsonValue(m_closing_balance, json[QString("closing_balance")]);
    m_closing_balance_isSet = !json[QString("closing_balance")].isNull() && m_closing_balance_isValid;

    m_closing_balance_date_isValid = ::OpenAPI::fromJsonValue(m_closing_balance_date, json[QString("closing_balance_date")]);
    m_closing_balance_date_isSet = !json[QString("closing_balance_date")].isNull() && m_closing_balance_date_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_current_balance_isValid = ::OpenAPI::fromJsonValue(m_current_balance, json[QString("current_balance")]);
    m_current_balance_isSet = !json[QString("current_balance")].isNull() && m_current_balance_isValid;

    m_current_balance_date_isValid = ::OpenAPI::fromJsonValue(m_current_balance_date, json[QString("current_balance_date")]);
    m_current_balance_date_isSet = !json[QString("current_balance_date")].isNull() && m_current_balance_date_isValid;

    m_current_balance_exchange_rate_isValid = ::OpenAPI::fromJsonValue(m_current_balance_exchange_rate, json[QString("current_balance_exchange_rate")]);
    m_current_balance_exchange_rate_isSet = !json[QString("current_balance_exchange_rate")].isNull() && m_current_balance_exchange_rate_isValid;

    m_current_balance_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_current_balance_in_base_currency, json[QString("current_balance_in_base_currency")]);
    m_current_balance_in_base_currency_isSet = !json[QString("current_balance_in_base_currency")].isNull() && m_current_balance_in_base_currency_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interest_rate_isValid = ::OpenAPI::fromJsonValue(m_interest_rate, json[QString("interest_rate")]);
    m_interest_rate_isSet = !json[QString("interest_rate")].isNull() && m_interest_rate_isValid;

    m_interest_rate_repeat_id_isValid = ::OpenAPI::fromJsonValue(m_interest_rate_repeat_id, json[QString("interest_rate_repeat_id")]);
    m_interest_rate_repeat_id_isSet = !json[QString("interest_rate_repeat_id")].isNull() && m_interest_rate_repeat_id_isValid;

    m_maximum_value_isValid = ::OpenAPI::fromJsonValue(m_maximum_value, json[QString("maximum-value")]);
    m_maximum_value_isSet = !json[QString("maximum-value")].isNull() && m_maximum_value_isValid;

    m_minimum_value_isValid = ::OpenAPI::fromJsonValue(m_minimum_value, json[QString("minimum-value")]);
    m_minimum_value_isSet = !json[QString("minimum-value")].isNull() && m_minimum_value_isValid;

    m_safe_balance_isValid = ::OpenAPI::fromJsonValue(m_safe_balance, json[QString("safe_balance")]);
    m_safe_balance_isSet = !json[QString("safe_balance")].isNull() && m_safe_balance_isValid;

    m_safe_balance_in_base_currency_isValid = ::OpenAPI::fromJsonValue(m_safe_balance_in_base_currency, json[QString("safe_balance_in_base_currency")]);
    m_safe_balance_in_base_currency_isSet = !json[QString("safe_balance_in_base_currency")].isNull() && m_safe_balance_in_base_currency_isValid;

    m_starting_balance_isValid = ::OpenAPI::fromJsonValue(m_starting_balance, json[QString("starting_balance")]);
    m_starting_balance_isSet = !json[QString("starting_balance")].isNull() && m_starting_balance_isValid;

    m_starting_balance_date_isValid = ::OpenAPI::fromJsonValue(m_starting_balance_date, json[QString("starting_balance_date")]);
    m_starting_balance_date_isSet = !json[QString("starting_balance_date")].isNull() && m_starting_balance_date_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIScenario::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScenario::asJsonObject() const {
    QJsonObject obj;
    if (m_achieve_date_isSet) {
        obj.insert(QString("achieve_date"), ::OpenAPI::toJsonValue(m_achieve_date));
    }
    if (m_closing_balance_isSet) {
        obj.insert(QString("closing_balance"), ::OpenAPI::toJsonValue(m_closing_balance));
    }
    if (m_closing_balance_date_isSet) {
        obj.insert(QString("closing_balance_date"), ::OpenAPI::toJsonValue(m_closing_balance_date));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_current_balance_isSet) {
        obj.insert(QString("current_balance"), ::OpenAPI::toJsonValue(m_current_balance));
    }
    if (m_current_balance_date_isSet) {
        obj.insert(QString("current_balance_date"), ::OpenAPI::toJsonValue(m_current_balance_date));
    }
    if (m_current_balance_exchange_rate_isSet) {
        obj.insert(QString("current_balance_exchange_rate"), ::OpenAPI::toJsonValue(m_current_balance_exchange_rate));
    }
    if (m_current_balance_in_base_currency_isSet) {
        obj.insert(QString("current_balance_in_base_currency"), ::OpenAPI::toJsonValue(m_current_balance_in_base_currency));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interest_rate_isSet) {
        obj.insert(QString("interest_rate"), ::OpenAPI::toJsonValue(m_interest_rate));
    }
    if (m_interest_rate_repeat_id_isSet) {
        obj.insert(QString("interest_rate_repeat_id"), ::OpenAPI::toJsonValue(m_interest_rate_repeat_id));
    }
    if (m_maximum_value_isSet) {
        obj.insert(QString("maximum-value"), ::OpenAPI::toJsonValue(m_maximum_value));
    }
    if (m_minimum_value_isSet) {
        obj.insert(QString("minimum-value"), ::OpenAPI::toJsonValue(m_minimum_value));
    }
    if (m_safe_balance_isSet) {
        obj.insert(QString("safe_balance"), ::OpenAPI::toJsonValue(m_safe_balance));
    }
    if (m_safe_balance_in_base_currency_isSet) {
        obj.insert(QString("safe_balance_in_base_currency"), ::OpenAPI::toJsonValue(m_safe_balance_in_base_currency));
    }
    if (m_starting_balance_isSet) {
        obj.insert(QString("starting_balance"), ::OpenAPI::toJsonValue(m_starting_balance));
    }
    if (m_starting_balance_date_isSet) {
        obj.insert(QString("starting_balance_date"), ::OpenAPI::toJsonValue(m_starting_balance_date));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIScenario::getAchieveDate() const {
    return m_achieve_date;
}
void OAIScenario::setAchieveDate(const QString &achieve_date) {
    m_achieve_date = achieve_date;
    m_achieve_date_isSet = true;
}

bool OAIScenario::is_achieve_date_Set() const{
    return m_achieve_date_isSet;
}

bool OAIScenario::is_achieve_date_Valid() const{
    return m_achieve_date_isValid;
}

double OAIScenario::getClosingBalance() const {
    return m_closing_balance;
}
void OAIScenario::setClosingBalance(const double &closing_balance) {
    m_closing_balance = closing_balance;
    m_closing_balance_isSet = true;
}

bool OAIScenario::is_closing_balance_Set() const{
    return m_closing_balance_isSet;
}

bool OAIScenario::is_closing_balance_Valid() const{
    return m_closing_balance_isValid;
}

QString OAIScenario::getClosingBalanceDate() const {
    return m_closing_balance_date;
}
void OAIScenario::setClosingBalanceDate(const QString &closing_balance_date) {
    m_closing_balance_date = closing_balance_date;
    m_closing_balance_date_isSet = true;
}

bool OAIScenario::is_closing_balance_date_Set() const{
    return m_closing_balance_date_isSet;
}

bool OAIScenario::is_closing_balance_date_Valid() const{
    return m_closing_balance_date_isValid;
}

QString OAIScenario::getCreatedAt() const {
    return m_created_at;
}
void OAIScenario::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIScenario::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIScenario::is_created_at_Valid() const{
    return m_created_at_isValid;
}

double OAIScenario::getCurrentBalance() const {
    return m_current_balance;
}
void OAIScenario::setCurrentBalance(const double &current_balance) {
    m_current_balance = current_balance;
    m_current_balance_isSet = true;
}

bool OAIScenario::is_current_balance_Set() const{
    return m_current_balance_isSet;
}

bool OAIScenario::is_current_balance_Valid() const{
    return m_current_balance_isValid;
}

QString OAIScenario::getCurrentBalanceDate() const {
    return m_current_balance_date;
}
void OAIScenario::setCurrentBalanceDate(const QString &current_balance_date) {
    m_current_balance_date = current_balance_date;
    m_current_balance_date_isSet = true;
}

bool OAIScenario::is_current_balance_date_Set() const{
    return m_current_balance_date_isSet;
}

bool OAIScenario::is_current_balance_date_Valid() const{
    return m_current_balance_date_isValid;
}

double OAIScenario::getCurrentBalanceExchangeRate() const {
    return m_current_balance_exchange_rate;
}
void OAIScenario::setCurrentBalanceExchangeRate(const double &current_balance_exchange_rate) {
    m_current_balance_exchange_rate = current_balance_exchange_rate;
    m_current_balance_exchange_rate_isSet = true;
}

bool OAIScenario::is_current_balance_exchange_rate_Set() const{
    return m_current_balance_exchange_rate_isSet;
}

bool OAIScenario::is_current_balance_exchange_rate_Valid() const{
    return m_current_balance_exchange_rate_isValid;
}

double OAIScenario::getCurrentBalanceInBaseCurrency() const {
    return m_current_balance_in_base_currency;
}
void OAIScenario::setCurrentBalanceInBaseCurrency(const double &current_balance_in_base_currency) {
    m_current_balance_in_base_currency = current_balance_in_base_currency;
    m_current_balance_in_base_currency_isSet = true;
}

bool OAIScenario::is_current_balance_in_base_currency_Set() const{
    return m_current_balance_in_base_currency_isSet;
}

bool OAIScenario::is_current_balance_in_base_currency_Valid() const{
    return m_current_balance_in_base_currency_isValid;
}

QString OAIScenario::getDescription() const {
    return m_description;
}
void OAIScenario::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIScenario::is_description_Set() const{
    return m_description_isSet;
}

bool OAIScenario::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIScenario::getId() const {
    return m_id;
}
void OAIScenario::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIScenario::is_id_Set() const{
    return m_id_isSet;
}

bool OAIScenario::is_id_Valid() const{
    return m_id_isValid;
}

double OAIScenario::getInterestRate() const {
    return m_interest_rate;
}
void OAIScenario::setInterestRate(const double &interest_rate) {
    m_interest_rate = interest_rate;
    m_interest_rate_isSet = true;
}

bool OAIScenario::is_interest_rate_Set() const{
    return m_interest_rate_isSet;
}

bool OAIScenario::is_interest_rate_Valid() const{
    return m_interest_rate_isValid;
}

qint32 OAIScenario::getInterestRateRepeatId() const {
    return m_interest_rate_repeat_id;
}
void OAIScenario::setInterestRateRepeatId(const qint32 &interest_rate_repeat_id) {
    m_interest_rate_repeat_id = interest_rate_repeat_id;
    m_interest_rate_repeat_id_isSet = true;
}

bool OAIScenario::is_interest_rate_repeat_id_Set() const{
    return m_interest_rate_repeat_id_isSet;
}

bool OAIScenario::is_interest_rate_repeat_id_Valid() const{
    return m_interest_rate_repeat_id_isValid;
}

double OAIScenario::getMaximumValue() const {
    return m_maximum_value;
}
void OAIScenario::setMaximumValue(const double &maximum_value) {
    m_maximum_value = maximum_value;
    m_maximum_value_isSet = true;
}

bool OAIScenario::is_maximum_value_Set() const{
    return m_maximum_value_isSet;
}

bool OAIScenario::is_maximum_value_Valid() const{
    return m_maximum_value_isValid;
}

double OAIScenario::getMinimumValue() const {
    return m_minimum_value;
}
void OAIScenario::setMinimumValue(const double &minimum_value) {
    m_minimum_value = minimum_value;
    m_minimum_value_isSet = true;
}

bool OAIScenario::is_minimum_value_Set() const{
    return m_minimum_value_isSet;
}

bool OAIScenario::is_minimum_value_Valid() const{
    return m_minimum_value_isValid;
}

double OAIScenario::getSafeBalance() const {
    return m_safe_balance;
}
void OAIScenario::setSafeBalance(const double &safe_balance) {
    m_safe_balance = safe_balance;
    m_safe_balance_isSet = true;
}

bool OAIScenario::is_safe_balance_Set() const{
    return m_safe_balance_isSet;
}

bool OAIScenario::is_safe_balance_Valid() const{
    return m_safe_balance_isValid;
}

double OAIScenario::getSafeBalanceInBaseCurrency() const {
    return m_safe_balance_in_base_currency;
}
void OAIScenario::setSafeBalanceInBaseCurrency(const double &safe_balance_in_base_currency) {
    m_safe_balance_in_base_currency = safe_balance_in_base_currency;
    m_safe_balance_in_base_currency_isSet = true;
}

bool OAIScenario::is_safe_balance_in_base_currency_Set() const{
    return m_safe_balance_in_base_currency_isSet;
}

bool OAIScenario::is_safe_balance_in_base_currency_Valid() const{
    return m_safe_balance_in_base_currency_isValid;
}

double OAIScenario::getStartingBalance() const {
    return m_starting_balance;
}
void OAIScenario::setStartingBalance(const double &starting_balance) {
    m_starting_balance = starting_balance;
    m_starting_balance_isSet = true;
}

bool OAIScenario::is_starting_balance_Set() const{
    return m_starting_balance_isSet;
}

bool OAIScenario::is_starting_balance_Valid() const{
    return m_starting_balance_isValid;
}

QString OAIScenario::getStartingBalanceDate() const {
    return m_starting_balance_date;
}
void OAIScenario::setStartingBalanceDate(const QString &starting_balance_date) {
    m_starting_balance_date = starting_balance_date;
    m_starting_balance_date_isSet = true;
}

bool OAIScenario::is_starting_balance_date_Set() const{
    return m_starting_balance_date_isSet;
}

bool OAIScenario::is_starting_balance_date_Valid() const{
    return m_starting_balance_date_isValid;
}

QString OAIScenario::getTitle() const {
    return m_title;
}
void OAIScenario::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIScenario::is_title_Set() const{
    return m_title_isSet;
}

bool OAIScenario::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIScenario::getType() const {
    return m_type;
}
void OAIScenario::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIScenario::is_type_Set() const{
    return m_type_isSet;
}

bool OAIScenario::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIScenario::getUpdatedAt() const {
    return m_updated_at;
}
void OAIScenario::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIScenario::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIScenario::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIScenario::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_achieve_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closing_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closing_balance_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_balance_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_balance_exchange_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_balance_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interest_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interest_rate_repeat_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safe_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safe_balance_in_base_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starting_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starting_balance_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScenario::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
