/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransactionsApi_H
#define OAI_OAITransactionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAITransaction.h"
#include "OAI_transaction_accounts__id__transactions_post_request.h"
#include "OAI_transactions__id__put_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransactionsApi : public QObject {
    Q_OBJECT

public:
    OAITransactionsApi(const int timeOut = 0);
    ~OAITransactionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    * @param[in]  updated_since QString [optional]
    * @param[in]  uncategorised qint32 [optional]
    * @param[in]  type QString [optional]
    * @param[in]  needs_review qint32 [optional]
    * @param[in]  search QString [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void accountsIdTransactionsGet(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &updated_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &uncategorised = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &needs_review = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    * @param[in]  updated_since QString [optional]
    * @param[in]  uncategorised qint32 [optional]
    * @param[in]  type QString [optional]
    * @param[in]  needs_review qint32 [optional]
    * @param[in]  search QString [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void categoriesIdTransactionsGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &updated_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &uncategorised = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &needs_review = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    * @param[in]  updated_since QString [optional]
    * @param[in]  uncategorised qint32 [optional]
    * @param[in]  type QString [optional]
    * @param[in]  needs_review qint32 [optional]
    * @param[in]  search QString [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void transactionAccountsIdTransactionsGet(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &updated_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &uncategorised = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &needs_review = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_transaction_accounts__id__transactions_post_request OAI_transaction_accounts__id__transactions_post_request [optional]
    */
    virtual void transactionAccountsIdTransactionsPost(const qint32 &id, const ::OpenAPI::OptionalParam<OAI_transaction_accounts__id__transactions_post_request> &oai_transaction_accounts__id__transactions_post_request = ::OpenAPI::OptionalParam<OAI_transaction_accounts__id__transactions_post_request>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void transactionsIdDelete(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void transactionsIdGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_transactions__id__put_request OAI_transactions__id__put_request [optional]
    */
    virtual void transactionsIdPut(const qint32 &id, const ::OpenAPI::OptionalParam<OAI_transactions__id__put_request> &oai_transactions__id__put_request = ::OpenAPI::OptionalParam<OAI_transactions__id__put_request>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    * @param[in]  updated_since QString [optional]
    * @param[in]  uncategorised qint32 [optional]
    * @param[in]  type QString [optional]
    * @param[in]  needs_review qint32 [optional]
    * @param[in]  search QString [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void usersIdTransactionsGet(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &updated_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &uncategorised = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &needs_review = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void accountsIdTransactionsGetCallback(OAIHttpRequestWorker *worker);
    void categoriesIdTransactionsGetCallback(OAIHttpRequestWorker *worker);
    void transactionAccountsIdTransactionsGetCallback(OAIHttpRequestWorker *worker);
    void transactionAccountsIdTransactionsPostCallback(OAIHttpRequestWorker *worker);
    void transactionsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void transactionsIdGetCallback(OAIHttpRequestWorker *worker);
    void transactionsIdPutCallback(OAIHttpRequestWorker *worker);
    void usersIdTransactionsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void accountsIdTransactionsGetSignal(QList<OAITransaction> summary);
    void categoriesIdTransactionsGetSignal(QList<OAITransaction> summary);
    void transactionAccountsIdTransactionsGetSignal(QList<OAITransaction> summary);
    void transactionAccountsIdTransactionsPostSignal(OAITransaction summary);
    void transactionsIdDeleteSignal();
    void transactionsIdGetSignal(OAITransaction summary);
    void transactionsIdPutSignal(OAITransaction summary);
    void usersIdTransactionsGetSignal(QList<OAITransaction> summary);


    void accountsIdTransactionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITransaction> summary);
    void categoriesIdTransactionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITransaction> summary);
    void transactionAccountsIdTransactionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITransaction> summary);
    void transactionAccountsIdTransactionsPostSignalFull(OAIHttpRequestWorker *worker, OAITransaction summary);
    void transactionsIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void transactionsIdGetSignalFull(OAIHttpRequestWorker *worker, OAITransaction summary);
    void transactionsIdPutSignalFull(OAIHttpRequestWorker *worker, OAITransaction summary);
    void usersIdTransactionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITransaction> summary);

    Q_DECL_DEPRECATED_X("Use accountsIdTransactionsGetSignalError() instead")
    void accountsIdTransactionsGetSignalE(QList<OAITransaction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsIdTransactionsGetSignalError(QList<OAITransaction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesIdTransactionsGetSignalError() instead")
    void categoriesIdTransactionsGetSignalE(QList<OAITransaction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesIdTransactionsGetSignalError(QList<OAITransaction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionAccountsIdTransactionsGetSignalError() instead")
    void transactionAccountsIdTransactionsGetSignalE(QList<OAITransaction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionAccountsIdTransactionsGetSignalError(QList<OAITransaction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionAccountsIdTransactionsPostSignalError() instead")
    void transactionAccountsIdTransactionsPostSignalE(OAITransaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionAccountsIdTransactionsPostSignalError(OAITransaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsIdDeleteSignalError() instead")
    void transactionsIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsIdGetSignalError() instead")
    void transactionsIdGetSignalE(OAITransaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsIdGetSignalError(OAITransaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsIdPutSignalError() instead")
    void transactionsIdPutSignalE(OAITransaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsIdPutSignalError(OAITransaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdTransactionsGetSignalError() instead")
    void usersIdTransactionsGetSignalE(QList<OAITransaction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdTransactionsGetSignalError(QList<OAITransaction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use accountsIdTransactionsGetSignalErrorFull() instead")
    void accountsIdTransactionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsIdTransactionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesIdTransactionsGetSignalErrorFull() instead")
    void categoriesIdTransactionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesIdTransactionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionAccountsIdTransactionsGetSignalErrorFull() instead")
    void transactionAccountsIdTransactionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionAccountsIdTransactionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionAccountsIdTransactionsPostSignalErrorFull() instead")
    void transactionAccountsIdTransactionsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionAccountsIdTransactionsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsIdDeleteSignalErrorFull() instead")
    void transactionsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsIdGetSignalErrorFull() instead")
    void transactionsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsIdPutSignalErrorFull() instead")
    void transactionsIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdTransactionsGetSignalErrorFull() instead")
    void usersIdTransactionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdTransactionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
