/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEvent.h
 *
 * 
 */

#ifndef OAIEvent_H
#define OAIEvent_H

#include <QJsonObject>

#include "OAICategory.h"
#include "OAIScenario.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICategory;
class OAIScenario;

class OAIEvent : public OAIObject {
public:
    OAIEvent();
    OAIEvent(QString json);
    ~OAIEvent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAmount() const;
    void setAmount(const double &amount);
    bool is_amount_Set() const;
    bool is_amount_Valid() const;

    double getAmountInBaseCurrency() const;
    void setAmountInBaseCurrency(const double &amount_in_base_currency);
    bool is_amount_in_base_currency_Set() const;
    bool is_amount_in_base_currency_Valid() const;

    OAICategory getCategory() const;
    void setCategory(const OAICategory &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    QString getColour() const;
    void setColour(const QString &colour);
    bool is_colour_Set() const;
    bool is_colour_Valid() const;

    QString getCurrencyCode() const;
    void setCurrencyCode(const QString &currency_code);
    bool is_currency_code_Set() const;
    bool is_currency_code_Valid() const;

    QString getDate() const;
    void setDate(const QString &date);
    bool is_date_Set() const;
    bool is_date_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isInfiniteSeries() const;
    void setInfiniteSeries(const bool &infinite_series);
    bool is_infinite_series_Set() const;
    bool is_infinite_series_Valid() const;

    QString getNote() const;
    void setNote(const QString &note);
    bool is_note_Set() const;
    bool is_note_Valid() const;

    qint32 getRepeatInterval() const;
    void setRepeatInterval(const qint32 &repeat_interval);
    bool is_repeat_interval_Set() const;
    bool is_repeat_interval_Valid() const;

    QString getRepeatType() const;
    void setRepeatType(const QString &repeat_type);
    bool is_repeat_type_Set() const;
    bool is_repeat_type_Valid() const;

    OAIScenario getScenario() const;
    void setScenario(const OAIScenario &scenario);
    bool is_scenario_Set() const;
    bool is_scenario_Valid() const;

    qint32 getSeriesId() const;
    void setSeriesId(const qint32 &series_id);
    bool is_series_id_Set() const;
    bool is_series_id_Valid() const;

    QString getSeriesStartId() const;
    void setSeriesStartId(const QString &series_start_id);
    bool is_series_start_id_Set() const;
    bool is_series_start_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_amount;
    bool m_amount_isSet;
    bool m_amount_isValid;

    double m_amount_in_base_currency;
    bool m_amount_in_base_currency_isSet;
    bool m_amount_in_base_currency_isValid;

    OAICategory m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    QString m_colour;
    bool m_colour_isSet;
    bool m_colour_isValid;

    QString m_currency_code;
    bool m_currency_code_isSet;
    bool m_currency_code_isValid;

    QString m_date;
    bool m_date_isSet;
    bool m_date_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_infinite_series;
    bool m_infinite_series_isSet;
    bool m_infinite_series_isValid;

    QString m_note;
    bool m_note_isSet;
    bool m_note_isValid;

    qint32 m_repeat_interval;
    bool m_repeat_interval_isSet;
    bool m_repeat_interval_isValid;

    QString m_repeat_type;
    bool m_repeat_type_isSet;
    bool m_repeat_type_isValid;

    OAIScenario m_scenario;
    bool m_scenario_isSet;
    bool m_scenario_isValid;

    qint32 m_series_id;
    bool m_series_id_isSet;
    bool m_series_id_isValid;

    QString m_series_start_id;
    bool m_series_start_id_isSet;
    bool m_series_start_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEvent)

#endif // OAIEvent_H
