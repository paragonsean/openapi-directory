/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountsApi_H
#define OAI_OAIAccountsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccount.h"
#include "OAIError.h"
#include "OAI_accounts__id__put_request.h"
#include "OAI_users__id__accounts_post_request.h"
#include "OAI_users__id__accounts_put_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountsApi : public QObject {
    Q_OBJECT

public:
    OAIAccountsApi(const int timeOut = 0);
    ~OAIAccountsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void accountsIdDelete(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void accountsIdGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_accounts__id__put_request OAI_accounts__id__put_request [optional]
    */
    virtual void accountsIdPut(const qint32 &id, const ::OpenAPI::OptionalParam<OAI_accounts__id__put_request> &oai_accounts__id__put_request = ::OpenAPI::OptionalParam<OAI_accounts__id__put_request>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void institutionsIdAccountsGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void usersIdAccountsGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_users__id__accounts_post_request OAI_users__id__accounts_post_request [optional]
    */
    virtual void usersIdAccountsPost(const qint32 &id, const ::OpenAPI::OptionalParam<OAI_users__id__accounts_post_request> &oai_users__id__accounts_post_request = ::OpenAPI::OptionalParam<OAI_users__id__accounts_post_request>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_users__id__accounts_put_request OAI_users__id__accounts_put_request [optional]
    */
    virtual void usersIdAccountsPut(const qint32 &id, const ::OpenAPI::OptionalParam<OAI_users__id__accounts_put_request> &oai_users__id__accounts_put_request = ::OpenAPI::OptionalParam<OAI_users__id__accounts_put_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void accountsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void accountsIdGetCallback(OAIHttpRequestWorker *worker);
    void accountsIdPutCallback(OAIHttpRequestWorker *worker);
    void institutionsIdAccountsGetCallback(OAIHttpRequestWorker *worker);
    void usersIdAccountsGetCallback(OAIHttpRequestWorker *worker);
    void usersIdAccountsPostCallback(OAIHttpRequestWorker *worker);
    void usersIdAccountsPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void accountsIdDeleteSignal();
    void accountsIdGetSignal(OAIAccount summary);
    void accountsIdPutSignal(OAIAccount summary);
    void institutionsIdAccountsGetSignal(QList<OAIAccount> summary);
    void usersIdAccountsGetSignal(QList<OAIAccount> summary);
    void usersIdAccountsPostSignal(OAIAccount summary);
    void usersIdAccountsPutSignal(QList<OAIAccount> summary);


    void accountsIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void accountsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void accountsIdPutSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void institutionsIdAccountsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccount> summary);
    void usersIdAccountsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccount> summary);
    void usersIdAccountsPostSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void usersIdAccountsPutSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccount> summary);

    Q_DECL_DEPRECATED_X("Use accountsIdDeleteSignalError() instead")
    void accountsIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void accountsIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsIdGetSignalError() instead")
    void accountsIdGetSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsIdGetSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsIdPutSignalError() instead")
    void accountsIdPutSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsIdPutSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use institutionsIdAccountsGetSignalError() instead")
    void institutionsIdAccountsGetSignalE(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void institutionsIdAccountsGetSignalError(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdAccountsGetSignalError() instead")
    void usersIdAccountsGetSignalE(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdAccountsGetSignalError(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdAccountsPostSignalError() instead")
    void usersIdAccountsPostSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdAccountsPostSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdAccountsPutSignalError() instead")
    void usersIdAccountsPutSignalE(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdAccountsPutSignalError(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use accountsIdDeleteSignalErrorFull() instead")
    void accountsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsIdGetSignalErrorFull() instead")
    void accountsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsIdPutSignalErrorFull() instead")
    void accountsIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use institutionsIdAccountsGetSignalErrorFull() instead")
    void institutionsIdAccountsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void institutionsIdAccountsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdAccountsGetSignalErrorFull() instead")
    void usersIdAccountsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdAccountsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdAccountsPostSignalErrorFull() instead")
    void usersIdAccountsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdAccountsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdAccountsPutSignalErrorFull() instead")
    void usersIdAccountsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdAccountsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
