/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICategoriesApi_H
#define OAI_OAICategoriesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICategory.h"
#include "OAIError.h"
#include "OAI_categories__id__put_request.h"
#include "OAI_users__id__categories_post_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICategoriesApi : public QObject {
    Q_OBJECT

public:
    OAICategoriesApi(const int timeOut = 0);
    ~OAICategoriesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void categoriesIdDelete(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void categoriesIdGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_categories__id__put_request OAI_categories__id__put_request [optional]
    */
    virtual void categoriesIdPut(const qint32 &id, const ::OpenAPI::OptionalParam<OAI_categories__id__put_request> &oai_categories__id__put_request = ::OpenAPI::OptionalParam<OAI_categories__id__put_request>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void usersIdCategoriesGet(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_users__id__categories_post_request OAI_users__id__categories_post_request [optional]
    */
    virtual void usersIdCategoriesPost(const qint32 &id, const ::OpenAPI::OptionalParam<OAI_users__id__categories_post_request> &oai_users__id__categories_post_request = ::OpenAPI::OptionalParam<OAI_users__id__categories_post_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void categoriesIdDeleteCallback(OAIHttpRequestWorker *worker);
    void categoriesIdGetCallback(OAIHttpRequestWorker *worker);
    void categoriesIdPutCallback(OAIHttpRequestWorker *worker);
    void usersIdCategoriesGetCallback(OAIHttpRequestWorker *worker);
    void usersIdCategoriesPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void categoriesIdDeleteSignal();
    void categoriesIdGetSignal(OAICategory summary);
    void categoriesIdPutSignal(OAICategory summary);
    void usersIdCategoriesGetSignal(QList<OAICategory> summary);
    void usersIdCategoriesPostSignal(OAICategory summary);


    void categoriesIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void categoriesIdGetSignalFull(OAIHttpRequestWorker *worker, OAICategory summary);
    void categoriesIdPutSignalFull(OAIHttpRequestWorker *worker, OAICategory summary);
    void usersIdCategoriesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICategory> summary);
    void usersIdCategoriesPostSignalFull(OAIHttpRequestWorker *worker, OAICategory summary);

    Q_DECL_DEPRECATED_X("Use categoriesIdDeleteSignalError() instead")
    void categoriesIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesIdGetSignalError() instead")
    void categoriesIdGetSignalE(OAICategory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesIdGetSignalError(OAICategory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesIdPutSignalError() instead")
    void categoriesIdPutSignalE(OAICategory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesIdPutSignalError(OAICategory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdCategoriesGetSignalError() instead")
    void usersIdCategoriesGetSignalE(QList<OAICategory> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdCategoriesGetSignalError(QList<OAICategory> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdCategoriesPostSignalError() instead")
    void usersIdCategoriesPostSignalE(OAICategory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdCategoriesPostSignalError(OAICategory summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use categoriesIdDeleteSignalErrorFull() instead")
    void categoriesIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesIdGetSignalErrorFull() instead")
    void categoriesIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesIdPutSignalErrorFull() instead")
    void categoriesIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdCategoriesGetSignalErrorFull() instead")
    void usersIdCategoriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdCategoriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdCategoriesPostSignalErrorFull() instead")
    void usersIdCategoriesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdCategoriesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
