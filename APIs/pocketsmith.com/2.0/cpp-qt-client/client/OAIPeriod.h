/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPeriod.h
 *
 * 
 */

#ifndef OAIPeriod_H
#define OAIPeriod_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPeriod : public OAIObject {
public:
    OAIPeriod();
    OAIPeriod(QString json);
    ~OAIPeriod() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getActualAmount() const;
    void setActualAmount(const double &actual_amount);
    bool is_actual_amount_Set() const;
    bool is_actual_amount_Valid() const;

    QString getCurrencyCode() const;
    void setCurrencyCode(const QString &currency_code);
    bool is_currency_code_Set() const;
    bool is_currency_code_Valid() const;

    bool isCurrent() const;
    void setCurrent(const bool &current);
    bool is_current_Set() const;
    bool is_current_Valid() const;

    QString getEndDate() const;
    void setEndDate(const QString &end_date);
    bool is_end_date_Set() const;
    bool is_end_date_Valid() const;

    double getForecastAmount() const;
    void setForecastAmount(const double &forecast_amount);
    bool is_forecast_amount_Set() const;
    bool is_forecast_amount_Valid() const;

    bool isOverBudget() const;
    void setOverBudget(const bool &over_budget);
    bool is_over_budget_Set() const;
    bool is_over_budget_Valid() const;

    double getOverBy() const;
    void setOverBy(const double &over_by);
    bool is_over_by_Set() const;
    bool is_over_by_Valid() const;

    double getPercentageUsed() const;
    void setPercentageUsed(const double &percentage_used);
    bool is_percentage_used_Set() const;
    bool is_percentage_used_Valid() const;

    double getRefundAmount() const;
    void setRefundAmount(const double &refund_amount);
    bool is_refund_amount_Set() const;
    bool is_refund_amount_Valid() const;

    QString getStartDate() const;
    void setStartDate(const QString &start_date);
    bool is_start_date_Set() const;
    bool is_start_date_Valid() const;

    bool isUnderBudget() const;
    void setUnderBudget(const bool &under_budget);
    bool is_under_budget_Set() const;
    bool is_under_budget_Valid() const;

    double getUnderBy() const;
    void setUnderBy(const double &under_by);
    bool is_under_by_Set() const;
    bool is_under_by_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_actual_amount;
    bool m_actual_amount_isSet;
    bool m_actual_amount_isValid;

    QString m_currency_code;
    bool m_currency_code_isSet;
    bool m_currency_code_isValid;

    bool m_current;
    bool m_current_isSet;
    bool m_current_isValid;

    QString m_end_date;
    bool m_end_date_isSet;
    bool m_end_date_isValid;

    double m_forecast_amount;
    bool m_forecast_amount_isSet;
    bool m_forecast_amount_isValid;

    bool m_over_budget;
    bool m_over_budget_isSet;
    bool m_over_budget_isValid;

    double m_over_by;
    bool m_over_by_isSet;
    bool m_over_by_isValid;

    double m_percentage_used;
    bool m_percentage_used_isSet;
    bool m_percentage_used_isValid;

    double m_refund_amount;
    bool m_refund_amount_isSet;
    bool m_refund_amount_isValid;

    QString m_start_date;
    bool m_start_date_isSet;
    bool m_start_date_isValid;

    bool m_under_budget;
    bool m_under_budget_isSet;
    bool m_under_budget_isValid;

    double m_under_by;
    bool m_under_by_isSet;
    bool m_under_by_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPeriod)

#endif // OAIPeriod_H
