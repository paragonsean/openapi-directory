/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_categories__id__put_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_categories__id__put_request::OAI_categories__id__put_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_categories__id__put_request::OAI_categories__id__put_request() {
    this->initializeModel();
}

OAI_categories__id__put_request::~OAI_categories__id__put_request() {}

void OAI_categories__id__put_request::initializeModel() {

    m_colour_isSet = false;
    m_colour_isValid = false;

    m_is_bill_isSet = false;
    m_is_bill_isValid = false;

    m_is_transfer_isSet = false;
    m_is_transfer_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_refund_behaviour_isSet = false;
    m_refund_behaviour_isValid = false;

    m_roll_up_isSet = false;
    m_roll_up_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAI_categories__id__put_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_categories__id__put_request::fromJsonObject(QJsonObject json) {

    m_colour_isValid = ::OpenAPI::fromJsonValue(m_colour, json[QString("colour")]);
    m_colour_isSet = !json[QString("colour")].isNull() && m_colour_isValid;

    m_is_bill_isValid = ::OpenAPI::fromJsonValue(m_is_bill, json[QString("is_bill")]);
    m_is_bill_isSet = !json[QString("is_bill")].isNull() && m_is_bill_isValid;

    m_is_transfer_isValid = ::OpenAPI::fromJsonValue(m_is_transfer, json[QString("is_transfer")]);
    m_is_transfer_isSet = !json[QString("is_transfer")].isNull() && m_is_transfer_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parent_id")]);
    m_parent_id_isSet = !json[QString("parent_id")].isNull() && m_parent_id_isValid;

    m_refund_behaviour_isValid = ::OpenAPI::fromJsonValue(m_refund_behaviour, json[QString("refund_behaviour")]);
    m_refund_behaviour_isSet = !json[QString("refund_behaviour")].isNull() && m_refund_behaviour_isValid;

    m_roll_up_isValid = ::OpenAPI::fromJsonValue(m_roll_up, json[QString("roll_up")]);
    m_roll_up_isSet = !json[QString("roll_up")].isNull() && m_roll_up_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAI_categories__id__put_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_categories__id__put_request::asJsonObject() const {
    QJsonObject obj;
    if (m_colour_isSet) {
        obj.insert(QString("colour"), ::OpenAPI::toJsonValue(m_colour));
    }
    if (m_is_bill_isSet) {
        obj.insert(QString("is_bill"), ::OpenAPI::toJsonValue(m_is_bill));
    }
    if (m_is_transfer_isSet) {
        obj.insert(QString("is_transfer"), ::OpenAPI::toJsonValue(m_is_transfer));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parent_id"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_refund_behaviour_isSet) {
        obj.insert(QString("refund_behaviour"), ::OpenAPI::toJsonValue(m_refund_behaviour));
    }
    if (m_roll_up_isSet) {
        obj.insert(QString("roll_up"), ::OpenAPI::toJsonValue(m_roll_up));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAI_categories__id__put_request::getColour() const {
    return m_colour;
}
void OAI_categories__id__put_request::setColour(const QString &colour) {
    m_colour = colour;
    m_colour_isSet = true;
}

bool OAI_categories__id__put_request::is_colour_Set() const{
    return m_colour_isSet;
}

bool OAI_categories__id__put_request::is_colour_Valid() const{
    return m_colour_isValid;
}

bool OAI_categories__id__put_request::isIsBill() const {
    return m_is_bill;
}
void OAI_categories__id__put_request::setIsBill(const bool &is_bill) {
    m_is_bill = is_bill;
    m_is_bill_isSet = true;
}

bool OAI_categories__id__put_request::is_is_bill_Set() const{
    return m_is_bill_isSet;
}

bool OAI_categories__id__put_request::is_is_bill_Valid() const{
    return m_is_bill_isValid;
}

bool OAI_categories__id__put_request::isIsTransfer() const {
    return m_is_transfer;
}
void OAI_categories__id__put_request::setIsTransfer(const bool &is_transfer) {
    m_is_transfer = is_transfer;
    m_is_transfer_isSet = true;
}

bool OAI_categories__id__put_request::is_is_transfer_Set() const{
    return m_is_transfer_isSet;
}

bool OAI_categories__id__put_request::is_is_transfer_Valid() const{
    return m_is_transfer_isValid;
}

qint32 OAI_categories__id__put_request::getParentId() const {
    return m_parent_id;
}
void OAI_categories__id__put_request::setParentId(const qint32 &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAI_categories__id__put_request::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAI_categories__id__put_request::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

QString OAI_categories__id__put_request::getRefundBehaviour() const {
    return m_refund_behaviour;
}
void OAI_categories__id__put_request::setRefundBehaviour(const QString &refund_behaviour) {
    m_refund_behaviour = refund_behaviour;
    m_refund_behaviour_isSet = true;
}

bool OAI_categories__id__put_request::is_refund_behaviour_Set() const{
    return m_refund_behaviour_isSet;
}

bool OAI_categories__id__put_request::is_refund_behaviour_Valid() const{
    return m_refund_behaviour_isValid;
}

bool OAI_categories__id__put_request::isRollUp() const {
    return m_roll_up;
}
void OAI_categories__id__put_request::setRollUp(const bool &roll_up) {
    m_roll_up = roll_up;
    m_roll_up_isSet = true;
}

bool OAI_categories__id__put_request::is_roll_up_Set() const{
    return m_roll_up_isSet;
}

bool OAI_categories__id__put_request::is_roll_up_Valid() const{
    return m_roll_up_isValid;
}

QString OAI_categories__id__put_request::getTitle() const {
    return m_title;
}
void OAI_categories__id__put_request::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAI_categories__id__put_request::is_title_Set() const{
    return m_title_isSet;
}

bool OAI_categories__id__put_request::is_title_Valid() const{
    return m_title_isValid;
}

bool OAI_categories__id__put_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_colour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_bill_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_transfer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refund_behaviour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roll_up_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_categories__id__put_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
