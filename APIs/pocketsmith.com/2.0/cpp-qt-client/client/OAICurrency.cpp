/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICurrency.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICurrency::OAICurrency(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICurrency::OAICurrency() {
    this->initializeModel();
}

OAICurrency::~OAICurrency() {}

void OAICurrency::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_minor_unit_isSet = false;
    m_minor_unit_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_separators_isSet = false;
    m_separators_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;
}

void OAICurrency::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICurrency::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_minor_unit_isValid = ::OpenAPI::fromJsonValue(m_minor_unit, json[QString("minor_unit")]);
    m_minor_unit_isSet = !json[QString("minor_unit")].isNull() && m_minor_unit_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_separators_isValid = ::OpenAPI::fromJsonValue(m_separators, json[QString("separators")]);
    m_separators_isSet = !json[QString("separators")].isNull() && m_separators_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;
}

QString OAICurrency::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICurrency::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_minor_unit_isSet) {
        obj.insert(QString("minor_unit"), ::OpenAPI::toJsonValue(m_minor_unit));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_separators.isSet()) {
        obj.insert(QString("separators"), ::OpenAPI::toJsonValue(m_separators));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    return obj;
}

QString OAICurrency::getId() const {
    return m_id;
}
void OAICurrency::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICurrency::is_id_Set() const{
    return m_id_isSet;
}

bool OAICurrency::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAICurrency::getMinorUnit() const {
    return m_minor_unit;
}
void OAICurrency::setMinorUnit(const qint32 &minor_unit) {
    m_minor_unit = minor_unit;
    m_minor_unit_isSet = true;
}

bool OAICurrency::is_minor_unit_Set() const{
    return m_minor_unit_isSet;
}

bool OAICurrency::is_minor_unit_Valid() const{
    return m_minor_unit_isValid;
}

QString OAICurrency::getName() const {
    return m_name;
}
void OAICurrency::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICurrency::is_name_Set() const{
    return m_name_isSet;
}

bool OAICurrency::is_name_Valid() const{
    return m_name_isValid;
}

OAICurrencySeparators OAICurrency::getSeparators() const {
    return m_separators;
}
void OAICurrency::setSeparators(const OAICurrencySeparators &separators) {
    m_separators = separators;
    m_separators_isSet = true;
}

bool OAICurrency::is_separators_Set() const{
    return m_separators_isSet;
}

bool OAICurrency::is_separators_Valid() const{
    return m_separators_isValid;
}

QString OAICurrency::getSymbol() const {
    return m_symbol;
}
void OAICurrency::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAICurrency::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAICurrency::is_symbol_Valid() const{
    return m_symbol_isValid;
}

bool OAICurrency::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minor_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_separators.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICurrency::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
