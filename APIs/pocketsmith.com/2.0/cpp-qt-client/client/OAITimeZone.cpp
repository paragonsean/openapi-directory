/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeZone.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeZone::OAITimeZone(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeZone::OAITimeZone() {
    this->initializeModel();
}

OAITimeZone::~OAITimeZone() {}

void OAITimeZone::initializeModel() {

    m_abbreviation_isSet = false;
    m_abbreviation_isValid = false;

    m_formatted_name_isSet = false;
    m_formatted_name_isValid = false;

    m_formatted_offset_isSet = false;
    m_formatted_offset_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_utc_offset_isSet = false;
    m_utc_offset_isValid = false;
}

void OAITimeZone::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeZone::fromJsonObject(QJsonObject json) {

    m_abbreviation_isValid = ::OpenAPI::fromJsonValue(m_abbreviation, json[QString("abbreviation")]);
    m_abbreviation_isSet = !json[QString("abbreviation")].isNull() && m_abbreviation_isValid;

    m_formatted_name_isValid = ::OpenAPI::fromJsonValue(m_formatted_name, json[QString("formatted_name")]);
    m_formatted_name_isSet = !json[QString("formatted_name")].isNull() && m_formatted_name_isValid;

    m_formatted_offset_isValid = ::OpenAPI::fromJsonValue(m_formatted_offset, json[QString("formatted_offset")]);
    m_formatted_offset_isSet = !json[QString("formatted_offset")].isNull() && m_formatted_offset_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_utc_offset_isValid = ::OpenAPI::fromJsonValue(m_utc_offset, json[QString("utc_offset")]);
    m_utc_offset_isSet = !json[QString("utc_offset")].isNull() && m_utc_offset_isValid;
}

QString OAITimeZone::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeZone::asJsonObject() const {
    QJsonObject obj;
    if (m_abbreviation_isSet) {
        obj.insert(QString("abbreviation"), ::OpenAPI::toJsonValue(m_abbreviation));
    }
    if (m_formatted_name_isSet) {
        obj.insert(QString("formatted_name"), ::OpenAPI::toJsonValue(m_formatted_name));
    }
    if (m_formatted_offset_isSet) {
        obj.insert(QString("formatted_offset"), ::OpenAPI::toJsonValue(m_formatted_offset));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_utc_offset_isSet) {
        obj.insert(QString("utc_offset"), ::OpenAPI::toJsonValue(m_utc_offset));
    }
    return obj;
}

QString OAITimeZone::getAbbreviation() const {
    return m_abbreviation;
}
void OAITimeZone::setAbbreviation(const QString &abbreviation) {
    m_abbreviation = abbreviation;
    m_abbreviation_isSet = true;
}

bool OAITimeZone::is_abbreviation_Set() const{
    return m_abbreviation_isSet;
}

bool OAITimeZone::is_abbreviation_Valid() const{
    return m_abbreviation_isValid;
}

QString OAITimeZone::getFormattedName() const {
    return m_formatted_name;
}
void OAITimeZone::setFormattedName(const QString &formatted_name) {
    m_formatted_name = formatted_name;
    m_formatted_name_isSet = true;
}

bool OAITimeZone::is_formatted_name_Set() const{
    return m_formatted_name_isSet;
}

bool OAITimeZone::is_formatted_name_Valid() const{
    return m_formatted_name_isValid;
}

QString OAITimeZone::getFormattedOffset() const {
    return m_formatted_offset;
}
void OAITimeZone::setFormattedOffset(const QString &formatted_offset) {
    m_formatted_offset = formatted_offset;
    m_formatted_offset_isSet = true;
}

bool OAITimeZone::is_formatted_offset_Set() const{
    return m_formatted_offset_isSet;
}

bool OAITimeZone::is_formatted_offset_Valid() const{
    return m_formatted_offset_isValid;
}

QString OAITimeZone::getIdentifier() const {
    return m_identifier;
}
void OAITimeZone::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAITimeZone::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAITimeZone::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAITimeZone::getName() const {
    return m_name;
}
void OAITimeZone::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITimeZone::is_name_Set() const{
    return m_name_isSet;
}

bool OAITimeZone::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAITimeZone::getUtcOffset() const {
    return m_utc_offset;
}
void OAITimeZone::setUtcOffset(const qint32 &utc_offset) {
    m_utc_offset = utc_offset;
    m_utc_offset_isSet = true;
}

bool OAITimeZone::is_utc_offset_Set() const{
    return m_utc_offset_isSet;
}

bool OAITimeZone::is_utc_offset_Valid() const{
    return m_utc_offset_isValid;
}

bool OAITimeZone::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abbreviation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utc_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeZone::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
