/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPeriod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPeriod::OAIPeriod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPeriod::OAIPeriod() {
    this->initializeModel();
}

OAIPeriod::~OAIPeriod() {}

void OAIPeriod::initializeModel() {

    m_actual_amount_isSet = false;
    m_actual_amount_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_current_isSet = false;
    m_current_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_forecast_amount_isSet = false;
    m_forecast_amount_isValid = false;

    m_over_budget_isSet = false;
    m_over_budget_isValid = false;

    m_over_by_isSet = false;
    m_over_by_isValid = false;

    m_percentage_used_isSet = false;
    m_percentage_used_isValid = false;

    m_refund_amount_isSet = false;
    m_refund_amount_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_under_budget_isSet = false;
    m_under_budget_isValid = false;

    m_under_by_isSet = false;
    m_under_by_isValid = false;
}

void OAIPeriod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPeriod::fromJsonObject(QJsonObject json) {

    m_actual_amount_isValid = ::OpenAPI::fromJsonValue(m_actual_amount, json[QString("actual_amount")]);
    m_actual_amount_isSet = !json[QString("actual_amount")].isNull() && m_actual_amount_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currency_code")]);
    m_currency_code_isSet = !json[QString("currency_code")].isNull() && m_currency_code_isValid;

    m_current_isValid = ::OpenAPI::fromJsonValue(m_current, json[QString("current")]);
    m_current_isSet = !json[QString("current")].isNull() && m_current_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("end_date")]);
    m_end_date_isSet = !json[QString("end_date")].isNull() && m_end_date_isValid;

    m_forecast_amount_isValid = ::OpenAPI::fromJsonValue(m_forecast_amount, json[QString("forecast_amount")]);
    m_forecast_amount_isSet = !json[QString("forecast_amount")].isNull() && m_forecast_amount_isValid;

    m_over_budget_isValid = ::OpenAPI::fromJsonValue(m_over_budget, json[QString("over_budget")]);
    m_over_budget_isSet = !json[QString("over_budget")].isNull() && m_over_budget_isValid;

    m_over_by_isValid = ::OpenAPI::fromJsonValue(m_over_by, json[QString("over_by")]);
    m_over_by_isSet = !json[QString("over_by")].isNull() && m_over_by_isValid;

    m_percentage_used_isValid = ::OpenAPI::fromJsonValue(m_percentage_used, json[QString("percentage_used")]);
    m_percentage_used_isSet = !json[QString("percentage_used")].isNull() && m_percentage_used_isValid;

    m_refund_amount_isValid = ::OpenAPI::fromJsonValue(m_refund_amount, json[QString("refund_amount")]);
    m_refund_amount_isSet = !json[QString("refund_amount")].isNull() && m_refund_amount_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("start_date")]);
    m_start_date_isSet = !json[QString("start_date")].isNull() && m_start_date_isValid;

    m_under_budget_isValid = ::OpenAPI::fromJsonValue(m_under_budget, json[QString("under_budget")]);
    m_under_budget_isSet = !json[QString("under_budget")].isNull() && m_under_budget_isValid;

    m_under_by_isValid = ::OpenAPI::fromJsonValue(m_under_by, json[QString("under_by")]);
    m_under_by_isSet = !json[QString("under_by")].isNull() && m_under_by_isValid;
}

QString OAIPeriod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPeriod::asJsonObject() const {
    QJsonObject obj;
    if (m_actual_amount_isSet) {
        obj.insert(QString("actual_amount"), ::OpenAPI::toJsonValue(m_actual_amount));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currency_code"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_current_isSet) {
        obj.insert(QString("current"), ::OpenAPI::toJsonValue(m_current));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("end_date"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_forecast_amount_isSet) {
        obj.insert(QString("forecast_amount"), ::OpenAPI::toJsonValue(m_forecast_amount));
    }
    if (m_over_budget_isSet) {
        obj.insert(QString("over_budget"), ::OpenAPI::toJsonValue(m_over_budget));
    }
    if (m_over_by_isSet) {
        obj.insert(QString("over_by"), ::OpenAPI::toJsonValue(m_over_by));
    }
    if (m_percentage_used_isSet) {
        obj.insert(QString("percentage_used"), ::OpenAPI::toJsonValue(m_percentage_used));
    }
    if (m_refund_amount_isSet) {
        obj.insert(QString("refund_amount"), ::OpenAPI::toJsonValue(m_refund_amount));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("start_date"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_under_budget_isSet) {
        obj.insert(QString("under_budget"), ::OpenAPI::toJsonValue(m_under_budget));
    }
    if (m_under_by_isSet) {
        obj.insert(QString("under_by"), ::OpenAPI::toJsonValue(m_under_by));
    }
    return obj;
}

double OAIPeriod::getActualAmount() const {
    return m_actual_amount;
}
void OAIPeriod::setActualAmount(const double &actual_amount) {
    m_actual_amount = actual_amount;
    m_actual_amount_isSet = true;
}

bool OAIPeriod::is_actual_amount_Set() const{
    return m_actual_amount_isSet;
}

bool OAIPeriod::is_actual_amount_Valid() const{
    return m_actual_amount_isValid;
}

QString OAIPeriod::getCurrencyCode() const {
    return m_currency_code;
}
void OAIPeriod::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIPeriod::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIPeriod::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

bool OAIPeriod::isCurrent() const {
    return m_current;
}
void OAIPeriod::setCurrent(const bool &current) {
    m_current = current;
    m_current_isSet = true;
}

bool OAIPeriod::is_current_Set() const{
    return m_current_isSet;
}

bool OAIPeriod::is_current_Valid() const{
    return m_current_isValid;
}

QString OAIPeriod::getEndDate() const {
    return m_end_date;
}
void OAIPeriod::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIPeriod::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIPeriod::is_end_date_Valid() const{
    return m_end_date_isValid;
}

double OAIPeriod::getForecastAmount() const {
    return m_forecast_amount;
}
void OAIPeriod::setForecastAmount(const double &forecast_amount) {
    m_forecast_amount = forecast_amount;
    m_forecast_amount_isSet = true;
}

bool OAIPeriod::is_forecast_amount_Set() const{
    return m_forecast_amount_isSet;
}

bool OAIPeriod::is_forecast_amount_Valid() const{
    return m_forecast_amount_isValid;
}

bool OAIPeriod::isOverBudget() const {
    return m_over_budget;
}
void OAIPeriod::setOverBudget(const bool &over_budget) {
    m_over_budget = over_budget;
    m_over_budget_isSet = true;
}

bool OAIPeriod::is_over_budget_Set() const{
    return m_over_budget_isSet;
}

bool OAIPeriod::is_over_budget_Valid() const{
    return m_over_budget_isValid;
}

double OAIPeriod::getOverBy() const {
    return m_over_by;
}
void OAIPeriod::setOverBy(const double &over_by) {
    m_over_by = over_by;
    m_over_by_isSet = true;
}

bool OAIPeriod::is_over_by_Set() const{
    return m_over_by_isSet;
}

bool OAIPeriod::is_over_by_Valid() const{
    return m_over_by_isValid;
}

double OAIPeriod::getPercentageUsed() const {
    return m_percentage_used;
}
void OAIPeriod::setPercentageUsed(const double &percentage_used) {
    m_percentage_used = percentage_used;
    m_percentage_used_isSet = true;
}

bool OAIPeriod::is_percentage_used_Set() const{
    return m_percentage_used_isSet;
}

bool OAIPeriod::is_percentage_used_Valid() const{
    return m_percentage_used_isValid;
}

double OAIPeriod::getRefundAmount() const {
    return m_refund_amount;
}
void OAIPeriod::setRefundAmount(const double &refund_amount) {
    m_refund_amount = refund_amount;
    m_refund_amount_isSet = true;
}

bool OAIPeriod::is_refund_amount_Set() const{
    return m_refund_amount_isSet;
}

bool OAIPeriod::is_refund_amount_Valid() const{
    return m_refund_amount_isValid;
}

QString OAIPeriod::getStartDate() const {
    return m_start_date;
}
void OAIPeriod::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIPeriod::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIPeriod::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIPeriod::isUnderBudget() const {
    return m_under_budget;
}
void OAIPeriod::setUnderBudget(const bool &under_budget) {
    m_under_budget = under_budget;
    m_under_budget_isSet = true;
}

bool OAIPeriod::is_under_budget_Set() const{
    return m_under_budget_isSet;
}

bool OAIPeriod::is_under_budget_Valid() const{
    return m_under_budget_isValid;
}

double OAIPeriod::getUnderBy() const {
    return m_under_by;
}
void OAIPeriod::setUnderBy(const double &under_by) {
    m_under_by = under_by;
    m_under_by_isSet = true;
}

bool OAIPeriod::is_under_by_Set() const{
    return m_under_by_isSet;
}

bool OAIPeriod::is_under_by_Valid() const{
    return m_under_by_isValid;
}

bool OAIPeriod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actual_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_over_budget_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_over_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refund_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_under_budget_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_under_by_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPeriod::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
