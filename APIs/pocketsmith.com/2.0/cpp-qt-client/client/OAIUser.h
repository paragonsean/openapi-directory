/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUser.h
 *
 * 
 */

#ifndef OAIUser_H
#define OAIUser_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUser : public OAIObject {
public:
    OAIUser();
    OAIUser(QString json);
    ~OAIUser() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAlwaysShowBaseCurrency() const;
    void setAlwaysShowBaseCurrency(const bool &always_show_base_currency);
    bool is_always_show_base_currency_Set() const;
    bool is_always_show_base_currency_Valid() const;

    qint32 getAvailableAccounts() const;
    void setAvailableAccounts(const qint32 &available_accounts);
    bool is_available_accounts_Set() const;
    bool is_available_accounts_Valid() const;

    qint32 getAvailableBudgets() const;
    void setAvailableBudgets(const qint32 &available_budgets);
    bool is_available_budgets_Set() const;
    bool is_available_budgets_Valid() const;

    QString getAvatarUrl() const;
    void setAvatarUrl(const QString &avatar_url);
    bool is_avatar_url_Set() const;
    bool is_avatar_url_Valid() const;

    QString getBaseCurrencyCode() const;
    void setBaseCurrencyCode(const QString &base_currency_code);
    bool is_base_currency_code_Set() const;
    bool is_base_currency_code_Valid() const;

    bool isBetaUser() const;
    void setBetaUser(const bool &beta_user);
    bool is_beta_user_Set() const;
    bool is_beta_user_Valid() const;

    QString getCreatedAt() const;
    void setCreatedAt(const QString &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getEmail() const;
    void setEmail(const QString &email);
    bool is_email_Set() const;
    bool is_email_Valid() const;

    bool isForecastDeferRecalculate() const;
    void setForecastDeferRecalculate(const bool &forecast_defer_recalculate);
    bool is_forecast_defer_recalculate_Set() const;
    bool is_forecast_defer_recalculate_Valid() const;

    QString getForecastEndDate() const;
    void setForecastEndDate(const QString &forecast_end_date);
    bool is_forecast_end_date_Set() const;
    bool is_forecast_end_date_Valid() const;

    QString getForecastLastAccessedAt() const;
    void setForecastLastAccessedAt(const QString &forecast_last_accessed_at);
    bool is_forecast_last_accessed_at_Set() const;
    bool is_forecast_last_accessed_at_Valid() const;

    QString getForecastLastUpdatedAt() const;
    void setForecastLastUpdatedAt(const QString &forecast_last_updated_at);
    bool is_forecast_last_updated_at_Set() const;
    bool is_forecast_last_updated_at_Valid() const;

    bool isForecastNeedsRecalculate() const;
    void setForecastNeedsRecalculate(const bool &forecast_needs_recalculate);
    bool is_forecast_needs_recalculate_Set() const;
    bool is_forecast_needs_recalculate_Valid() const;

    QString getForecastStartDate() const;
    void setForecastStartDate(const QString &forecast_start_date);
    bool is_forecast_start_date_Set() const;
    bool is_forecast_start_date_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsReviewingTransactions() const;
    void setIsReviewingTransactions(const bool &is_reviewing_transactions);
    bool is_is_reviewing_transactions_Set() const;
    bool is_is_reviewing_transactions_Valid() const;

    QString getLastActivityAt() const;
    void setLastActivityAt(const QString &last_activity_at);
    bool is_last_activity_at_Set() const;
    bool is_last_activity_at_Valid() const;

    QString getLastLoggedInAt() const;
    void setLastLoggedInAt(const QString &last_logged_in_at);
    bool is_last_logged_in_at_Set() const;
    bool is_last_logged_in_at_Valid() const;

    QString getLogin() const;
    void setLogin(const QString &login);
    bool is_login_Set() const;
    bool is_login_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getTimeZone() const;
    void setTimeZone(const QString &time_zone);
    bool is_time_zone_Set() const;
    bool is_time_zone_Valid() const;

    QString getUpdatedAt() const;
    void setUpdatedAt(const QString &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    bool isUsingMultipleCurrencies() const;
    void setUsingMultipleCurrencies(const bool &using_multiple_currencies);
    bool is_using_multiple_currencies_Set() const;
    bool is_using_multiple_currencies_Valid() const;

    qint32 getWeekStartDay() const;
    void setWeekStartDay(const qint32 &week_start_day);
    bool is_week_start_day_Set() const;
    bool is_week_start_day_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_always_show_base_currency;
    bool m_always_show_base_currency_isSet;
    bool m_always_show_base_currency_isValid;

    qint32 m_available_accounts;
    bool m_available_accounts_isSet;
    bool m_available_accounts_isValid;

    qint32 m_available_budgets;
    bool m_available_budgets_isSet;
    bool m_available_budgets_isValid;

    QString m_avatar_url;
    bool m_avatar_url_isSet;
    bool m_avatar_url_isValid;

    QString m_base_currency_code;
    bool m_base_currency_code_isSet;
    bool m_base_currency_code_isValid;

    bool m_beta_user;
    bool m_beta_user_isSet;
    bool m_beta_user_isValid;

    QString m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_email;
    bool m_email_isSet;
    bool m_email_isValid;

    bool m_forecast_defer_recalculate;
    bool m_forecast_defer_recalculate_isSet;
    bool m_forecast_defer_recalculate_isValid;

    QString m_forecast_end_date;
    bool m_forecast_end_date_isSet;
    bool m_forecast_end_date_isValid;

    QString m_forecast_last_accessed_at;
    bool m_forecast_last_accessed_at_isSet;
    bool m_forecast_last_accessed_at_isValid;

    QString m_forecast_last_updated_at;
    bool m_forecast_last_updated_at_isSet;
    bool m_forecast_last_updated_at_isValid;

    bool m_forecast_needs_recalculate;
    bool m_forecast_needs_recalculate_isSet;
    bool m_forecast_needs_recalculate_isValid;

    QString m_forecast_start_date;
    bool m_forecast_start_date_isSet;
    bool m_forecast_start_date_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_reviewing_transactions;
    bool m_is_reviewing_transactions_isSet;
    bool m_is_reviewing_transactions_isValid;

    QString m_last_activity_at;
    bool m_last_activity_at_isSet;
    bool m_last_activity_at_isValid;

    QString m_last_logged_in_at;
    bool m_last_logged_in_at_isSet;
    bool m_last_logged_in_at_isValid;

    QString m_login;
    bool m_login_isSet;
    bool m_login_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_time_zone;
    bool m_time_zone_isSet;
    bool m_time_zone_isValid;

    QString m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    bool m_using_multiple_currencies;
    bool m_using_multiple_currencies_isSet;
    bool m_using_multiple_currencies_isValid;

    qint32 m_week_start_day;
    bool m_week_start_day_isSet;
    bool m_week_start_day_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUser)

#endif // OAIUser_H
