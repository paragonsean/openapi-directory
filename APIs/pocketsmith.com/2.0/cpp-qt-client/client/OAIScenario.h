/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIScenario.h
 *
 * 
 */

#ifndef OAIScenario_H
#define OAIScenario_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIScenario : public OAIObject {
public:
    OAIScenario();
    OAIScenario(QString json);
    ~OAIScenario() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAchieveDate() const;
    void setAchieveDate(const QString &achieve_date);
    bool is_achieve_date_Set() const;
    bool is_achieve_date_Valid() const;

    double getClosingBalance() const;
    void setClosingBalance(const double &closing_balance);
    bool is_closing_balance_Set() const;
    bool is_closing_balance_Valid() const;

    QString getClosingBalanceDate() const;
    void setClosingBalanceDate(const QString &closing_balance_date);
    bool is_closing_balance_date_Set() const;
    bool is_closing_balance_date_Valid() const;

    QString getCreatedAt() const;
    void setCreatedAt(const QString &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    double getCurrentBalance() const;
    void setCurrentBalance(const double &current_balance);
    bool is_current_balance_Set() const;
    bool is_current_balance_Valid() const;

    QString getCurrentBalanceDate() const;
    void setCurrentBalanceDate(const QString &current_balance_date);
    bool is_current_balance_date_Set() const;
    bool is_current_balance_date_Valid() const;

    double getCurrentBalanceExchangeRate() const;
    void setCurrentBalanceExchangeRate(const double &current_balance_exchange_rate);
    bool is_current_balance_exchange_rate_Set() const;
    bool is_current_balance_exchange_rate_Valid() const;

    double getCurrentBalanceInBaseCurrency() const;
    void setCurrentBalanceInBaseCurrency(const double &current_balance_in_base_currency);
    bool is_current_balance_in_base_currency_Set() const;
    bool is_current_balance_in_base_currency_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    double getInterestRate() const;
    void setInterestRate(const double &interest_rate);
    bool is_interest_rate_Set() const;
    bool is_interest_rate_Valid() const;

    qint32 getInterestRateRepeatId() const;
    void setInterestRateRepeatId(const qint32 &interest_rate_repeat_id);
    bool is_interest_rate_repeat_id_Set() const;
    bool is_interest_rate_repeat_id_Valid() const;

    double getMaximumValue() const;
    void setMaximumValue(const double &maximum_value);
    bool is_maximum_value_Set() const;
    bool is_maximum_value_Valid() const;

    double getMinimumValue() const;
    void setMinimumValue(const double &minimum_value);
    bool is_minimum_value_Set() const;
    bool is_minimum_value_Valid() const;

    double getSafeBalance() const;
    void setSafeBalance(const double &safe_balance);
    bool is_safe_balance_Set() const;
    bool is_safe_balance_Valid() const;

    double getSafeBalanceInBaseCurrency() const;
    void setSafeBalanceInBaseCurrency(const double &safe_balance_in_base_currency);
    bool is_safe_balance_in_base_currency_Set() const;
    bool is_safe_balance_in_base_currency_Valid() const;

    double getStartingBalance() const;
    void setStartingBalance(const double &starting_balance);
    bool is_starting_balance_Set() const;
    bool is_starting_balance_Valid() const;

    QString getStartingBalanceDate() const;
    void setStartingBalanceDate(const QString &starting_balance_date);
    bool is_starting_balance_date_Set() const;
    bool is_starting_balance_date_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUpdatedAt() const;
    void setUpdatedAt(const QString &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_achieve_date;
    bool m_achieve_date_isSet;
    bool m_achieve_date_isValid;

    double m_closing_balance;
    bool m_closing_balance_isSet;
    bool m_closing_balance_isValid;

    QString m_closing_balance_date;
    bool m_closing_balance_date_isSet;
    bool m_closing_balance_date_isValid;

    QString m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    double m_current_balance;
    bool m_current_balance_isSet;
    bool m_current_balance_isValid;

    QString m_current_balance_date;
    bool m_current_balance_date_isSet;
    bool m_current_balance_date_isValid;

    double m_current_balance_exchange_rate;
    bool m_current_balance_exchange_rate_isSet;
    bool m_current_balance_exchange_rate_isValid;

    double m_current_balance_in_base_currency;
    bool m_current_balance_in_base_currency_isSet;
    bool m_current_balance_in_base_currency_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    double m_interest_rate;
    bool m_interest_rate_isSet;
    bool m_interest_rate_isValid;

    qint32 m_interest_rate_repeat_id;
    bool m_interest_rate_repeat_id_isSet;
    bool m_interest_rate_repeat_id_isValid;

    double m_maximum_value;
    bool m_maximum_value_isSet;
    bool m_maximum_value_isValid;

    double m_minimum_value;
    bool m_minimum_value_isSet;
    bool m_minimum_value_isValid;

    double m_safe_balance;
    bool m_safe_balance_isSet;
    bool m_safe_balance_isValid;

    double m_safe_balance_in_base_currency;
    bool m_safe_balance_in_base_currency_isSet;
    bool m_safe_balance_in_base_currency_isValid;

    double m_starting_balance;
    bool m_starting_balance_isSet;
    bool m_starting_balance_isValid;

    QString m_starting_balance_date;
    bool m_starting_balance_date_isSet;
    bool m_starting_balance_date_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIScenario)

#endif // OAIScenario_H
