/**
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_events__id__put_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_events__id__put_request::OAI_events__id__put_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_events__id__put_request::OAI_events__id__put_request() {
    this->initializeModel();
}

OAI_events__id__put_request::~OAI_events__id__put_request() {}

void OAI_events__id__put_request::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_behaviour_isSet = false;
    m_behaviour_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_repeat_interval_isSet = false;
    m_repeat_interval_isValid = false;

    m_repeat_type_isSet = false;
    m_repeat_type_isValid = false;
}

void OAI_events__id__put_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_events__id__put_request::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_behaviour_isValid = ::OpenAPI::fromJsonValue(m_behaviour, json[QString("behaviour")]);
    m_behaviour_isSet = !json[QString("behaviour")].isNull() && m_behaviour_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_repeat_interval_isValid = ::OpenAPI::fromJsonValue(m_repeat_interval, json[QString("repeat_interval")]);
    m_repeat_interval_isSet = !json[QString("repeat_interval")].isNull() && m_repeat_interval_isValid;

    m_repeat_type_isValid = ::OpenAPI::fromJsonValue(m_repeat_type, json[QString("repeat_type")]);
    m_repeat_type_isSet = !json[QString("repeat_type")].isNull() && m_repeat_type_isValid;
}

QString OAI_events__id__put_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_events__id__put_request::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_behaviour_isSet) {
        obj.insert(QString("behaviour"), ::OpenAPI::toJsonValue(m_behaviour));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_repeat_interval_isSet) {
        obj.insert(QString("repeat_interval"), ::OpenAPI::toJsonValue(m_repeat_interval));
    }
    if (m_repeat_type_isSet) {
        obj.insert(QString("repeat_type"), ::OpenAPI::toJsonValue(m_repeat_type));
    }
    return obj;
}

double OAI_events__id__put_request::getAmount() const {
    return m_amount;
}
void OAI_events__id__put_request::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAI_events__id__put_request::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAI_events__id__put_request::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAI_events__id__put_request::getBehaviour() const {
    return m_behaviour;
}
void OAI_events__id__put_request::setBehaviour(const QString &behaviour) {
    m_behaviour = behaviour;
    m_behaviour_isSet = true;
}

bool OAI_events__id__put_request::is_behaviour_Set() const{
    return m_behaviour_isSet;
}

bool OAI_events__id__put_request::is_behaviour_Valid() const{
    return m_behaviour_isValid;
}

QString OAI_events__id__put_request::getNote() const {
    return m_note;
}
void OAI_events__id__put_request::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAI_events__id__put_request::is_note_Set() const{
    return m_note_isSet;
}

bool OAI_events__id__put_request::is_note_Valid() const{
    return m_note_isValid;
}

qint32 OAI_events__id__put_request::getRepeatInterval() const {
    return m_repeat_interval;
}
void OAI_events__id__put_request::setRepeatInterval(const qint32 &repeat_interval) {
    m_repeat_interval = repeat_interval;
    m_repeat_interval_isSet = true;
}

bool OAI_events__id__put_request::is_repeat_interval_Set() const{
    return m_repeat_interval_isSet;
}

bool OAI_events__id__put_request::is_repeat_interval_Valid() const{
    return m_repeat_interval_isValid;
}

QString OAI_events__id__put_request::getRepeatType() const {
    return m_repeat_type;
}
void OAI_events__id__put_request::setRepeatType(const QString &repeat_type) {
    m_repeat_type = repeat_type;
    m_repeat_type_isSet = true;
}

bool OAI_events__id__put_request::is_repeat_type_Set() const{
    return m_repeat_type_isSet;
}

bool OAI_events__id__put_request::is_repeat_type_Valid() const{
    return m_repeat_type_isValid;
}

bool OAI_events__id__put_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_behaviour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeat_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeat_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_events__id__put_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_behaviour_isValid && true;
}

} // namespace OpenAPI
