/*
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BudgetAnalysis;
import org.openapitools.client.model.Category;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BudgetAnalysisPackage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:36.319532-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BudgetAnalysisPackage {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private Category category;

  public static final String SERIALIZED_NAME_EXPENSE = "expense";
  @SerializedName(SERIALIZED_NAME_EXPENSE)
  private BudgetAnalysis expense;

  public static final String SERIALIZED_NAME_INCOME = "income";
  @SerializedName(SERIALIZED_NAME_INCOME)
  private BudgetAnalysis income;

  public static final String SERIALIZED_NAME_IS_TRANSFER = "is_transfer";
  @SerializedName(SERIALIZED_NAME_IS_TRANSFER)
  private Boolean isTransfer;

  public BudgetAnalysisPackage() {
  }

  public BudgetAnalysisPackage category(Category category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public Category getCategory() {
    return category;
  }

  public void setCategory(Category category) {
    this.category = category;
  }


  public BudgetAnalysisPackage expense(BudgetAnalysis expense) {
    this.expense = expense;
    return this;
  }

  /**
   * Get expense
   * @return expense
   */
  @javax.annotation.Nullable
  public BudgetAnalysis getExpense() {
    return expense;
  }

  public void setExpense(BudgetAnalysis expense) {
    this.expense = expense;
  }


  public BudgetAnalysisPackage income(BudgetAnalysis income) {
    this.income = income;
    return this;
  }

  /**
   * Get income
   * @return income
   */
  @javax.annotation.Nullable
  public BudgetAnalysis getIncome() {
    return income;
  }

  public void setIncome(BudgetAnalysis income) {
    this.income = income;
  }


  public BudgetAnalysisPackage isTransfer(Boolean isTransfer) {
    this.isTransfer = isTransfer;
    return this;
  }

  /**
   * Whether the expense budget analysis looks like a transfer to the income budget analysis, based on a number of heuristics.
   * @return isTransfer
   */
  @javax.annotation.Nullable
  public Boolean getIsTransfer() {
    return isTransfer;
  }

  public void setIsTransfer(Boolean isTransfer) {
    this.isTransfer = isTransfer;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BudgetAnalysisPackage budgetAnalysisPackage = (BudgetAnalysisPackage) o;
    return Objects.equals(this.category, budgetAnalysisPackage.category) &&
        Objects.equals(this.expense, budgetAnalysisPackage.expense) &&
        Objects.equals(this.income, budgetAnalysisPackage.income) &&
        Objects.equals(this.isTransfer, budgetAnalysisPackage.isTransfer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, expense, income, isTransfer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BudgetAnalysisPackage {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    expense: ").append(toIndentedString(expense)).append("\n");
    sb.append("    income: ").append(toIndentedString(income)).append("\n");
    sb.append("    isTransfer: ").append(toIndentedString(isTransfer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("expense");
    openapiFields.add("income");
    openapiFields.add("is_transfer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BudgetAnalysisPackage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BudgetAnalysisPackage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BudgetAnalysisPackage is not found in the empty JSON string", BudgetAnalysisPackage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BudgetAnalysisPackage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BudgetAnalysisPackage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        Category.validateJsonElement(jsonObj.get("category"));
      }
      // validate the optional field `expense`
      if (jsonObj.get("expense") != null && !jsonObj.get("expense").isJsonNull()) {
        BudgetAnalysis.validateJsonElement(jsonObj.get("expense"));
      }
      // validate the optional field `income`
      if (jsonObj.get("income") != null && !jsonObj.get("income").isJsonNull()) {
        BudgetAnalysis.validateJsonElement(jsonObj.get("income"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BudgetAnalysisPackage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BudgetAnalysisPackage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BudgetAnalysisPackage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BudgetAnalysisPackage.class));

       return (TypeAdapter<T>) new TypeAdapter<BudgetAnalysisPackage>() {
           @Override
           public void write(JsonWriter out, BudgetAnalysisPackage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BudgetAnalysisPackage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BudgetAnalysisPackage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BudgetAnalysisPackage
   * @throws IOException if the JSON string is invalid with respect to BudgetAnalysisPackage
   */
  public static BudgetAnalysisPackage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BudgetAnalysisPackage.class);
  }

  /**
   * Convert an instance of BudgetAnalysisPackage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

