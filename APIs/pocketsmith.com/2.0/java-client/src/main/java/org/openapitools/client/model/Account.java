/*
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Scenario;
import org.openapitools.client.model.TransactionAccount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Account
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:36.319532-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Account {
  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency_code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_CURRENT_BALANCE = "current_balance";
  @SerializedName(SERIALIZED_NAME_CURRENT_BALANCE)
  private BigDecimal currentBalance;

  public static final String SERIALIZED_NAME_CURRENT_BALANCE_DATE = "current_balance_date";
  @SerializedName(SERIALIZED_NAME_CURRENT_BALANCE_DATE)
  private String currentBalanceDate;

  public static final String SERIALIZED_NAME_CURRENT_BALANCE_EXCHANGE_RATE = "current_balance_exchange_rate";
  @SerializedName(SERIALIZED_NAME_CURRENT_BALANCE_EXCHANGE_RATE)
  private BigDecimal currentBalanceExchangeRate;

  public static final String SERIALIZED_NAME_CURRENT_BALANCE_IN_BASE_CURRENCY = "current_balance_in_base_currency";
  @SerializedName(SERIALIZED_NAME_CURRENT_BALANCE_IN_BASE_CURRENCY)
  private BigDecimal currentBalanceInBaseCurrency;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_NET_WORTH = "is_net_worth";
  @SerializedName(SERIALIZED_NAME_IS_NET_WORTH)
  private Boolean isNetWorth;

  public static final String SERIALIZED_NAME_PRIMARY_SCENARIO = "primary_scenario";
  @SerializedName(SERIALIZED_NAME_PRIMARY_SCENARIO)
  private Scenario primaryScenario;

  public static final String SERIALIZED_NAME_PRIMARY_TRANSACTION_ACCOUNT = "primary_transaction_account";
  @SerializedName(SERIALIZED_NAME_PRIMARY_TRANSACTION_ACCOUNT)
  private TransactionAccount primaryTransactionAccount;

  public static final String SERIALIZED_NAME_SAFE_BALANCE = "safe_balance";
  @SerializedName(SERIALIZED_NAME_SAFE_BALANCE)
  private BigDecimal safeBalance;

  public static final String SERIALIZED_NAME_SAFE_BALANCE_IN_BASE_CURRENCY = "safe_balance_in_base_currency";
  @SerializedName(SERIALIZED_NAME_SAFE_BALANCE_IN_BASE_CURRENCY)
  private BigDecimal safeBalanceInBaseCurrency;

  public static final String SERIALIZED_NAME_SCENARIOS = "scenarios";
  @SerializedName(SERIALIZED_NAME_SCENARIOS)
  private List<Scenario> scenarios = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TRANSACTION_ACCOUNTS = "transaction_accounts";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ACCOUNTS)
  private List<TransactionAccount> transactionAccounts = new ArrayList<>();

  /**
   * The type of the account.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    BANK("bank"),
    
    CREDITS("credits"),
    
    CASH("cash"),
    
    STOCKS("stocks"),
    
    MORTGAGE("mortgage"),
    
    LOANS("loans"),
    
    VEHICLE("vehicle"),
    
    PROPERTY("property"),
    
    INSURANCE("insurance"),
    
    OTHER_ASSET("other_asset"),
    
    OTHER_LIABILITY("other_liability");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public Account() {
  }

  public Account createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * When the account was created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Account currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * The currency code for the account.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public Account currentBalance(BigDecimal currentBalance) {
    this.currentBalance = currentBalance;
    return this;
  }

  /**
   * The current balance of the account.
   * @return currentBalance
   */
  @javax.annotation.Nullable
  public BigDecimal getCurrentBalance() {
    return currentBalance;
  }

  public void setCurrentBalance(BigDecimal currentBalance) {
    this.currentBalance = currentBalance;
  }


  public Account currentBalanceDate(String currentBalanceDate) {
    this.currentBalanceDate = currentBalanceDate;
    return this;
  }

  /**
   * The date of the current balance.
   * @return currentBalanceDate
   */
  @javax.annotation.Nullable
  public String getCurrentBalanceDate() {
    return currentBalanceDate;
  }

  public void setCurrentBalanceDate(String currentBalanceDate) {
    this.currentBalanceDate = currentBalanceDate;
  }


  public Account currentBalanceExchangeRate(BigDecimal currentBalanceExchangeRate) {
    this.currentBalanceExchangeRate = currentBalanceExchangeRate;
    return this;
  }

  /**
   * The exchange rate between the account&#39;s currency and the user&#39;s base currency, when different. If the currencies are the same, null is returned.
   * @return currentBalanceExchangeRate
   */
  @javax.annotation.Nullable
  public BigDecimal getCurrentBalanceExchangeRate() {
    return currentBalanceExchangeRate;
  }

  public void setCurrentBalanceExchangeRate(BigDecimal currentBalanceExchangeRate) {
    this.currentBalanceExchangeRate = currentBalanceExchangeRate;
  }


  public Account currentBalanceInBaseCurrency(BigDecimal currentBalanceInBaseCurrency) {
    this.currentBalanceInBaseCurrency = currentBalanceInBaseCurrency;
    return this;
  }

  /**
   * The current balance of the account in the user&#39;s base currency.
   * @return currentBalanceInBaseCurrency
   */
  @javax.annotation.Nullable
  public BigDecimal getCurrentBalanceInBaseCurrency() {
    return currentBalanceInBaseCurrency;
  }

  public void setCurrentBalanceInBaseCurrency(BigDecimal currentBalanceInBaseCurrency) {
    this.currentBalanceInBaseCurrency = currentBalanceInBaseCurrency;
  }


  public Account id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * The unique identifier of the account.
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Account isNetWorth(Boolean isNetWorth) {
    this.isNetWorth = isNetWorth;
    return this;
  }

  /**
   * Whether the account is a net worth asset.
   * @return isNetWorth
   */
  @javax.annotation.Nullable
  public Boolean getIsNetWorth() {
    return isNetWorth;
  }

  public void setIsNetWorth(Boolean isNetWorth) {
    this.isNetWorth = isNetWorth;
  }


  public Account primaryScenario(Scenario primaryScenario) {
    this.primaryScenario = primaryScenario;
    return this;
  }

  /**
   * Get primaryScenario
   * @return primaryScenario
   */
  @javax.annotation.Nullable
  public Scenario getPrimaryScenario() {
    return primaryScenario;
  }

  public void setPrimaryScenario(Scenario primaryScenario) {
    this.primaryScenario = primaryScenario;
  }


  public Account primaryTransactionAccount(TransactionAccount primaryTransactionAccount) {
    this.primaryTransactionAccount = primaryTransactionAccount;
    return this;
  }

  /**
   * Get primaryTransactionAccount
   * @return primaryTransactionAccount
   */
  @javax.annotation.Nullable
  public TransactionAccount getPrimaryTransactionAccount() {
    return primaryTransactionAccount;
  }

  public void setPrimaryTransactionAccount(TransactionAccount primaryTransactionAccount) {
    this.primaryTransactionAccount = primaryTransactionAccount;
  }


  public Account safeBalance(BigDecimal safeBalance) {
    this.safeBalance = safeBalance;
    return this;
  }

  /**
   * The current safe balance, if safe balance is activated on the account. If safe balance is not activated, then null is returned.
   * @return safeBalance
   */
  @javax.annotation.Nullable
  public BigDecimal getSafeBalance() {
    return safeBalance;
  }

  public void setSafeBalance(BigDecimal safeBalance) {
    this.safeBalance = safeBalance;
  }


  public Account safeBalanceInBaseCurrency(BigDecimal safeBalanceInBaseCurrency) {
    this.safeBalanceInBaseCurrency = safeBalanceInBaseCurrency;
    return this;
  }

  /**
   * The current safe balance in the user&#39;s base currency, if safe balance is activated on the account. If safe balance is not activated, then null is returned.
   * @return safeBalanceInBaseCurrency
   */
  @javax.annotation.Nullable
  public BigDecimal getSafeBalanceInBaseCurrency() {
    return safeBalanceInBaseCurrency;
  }

  public void setSafeBalanceInBaseCurrency(BigDecimal safeBalanceInBaseCurrency) {
    this.safeBalanceInBaseCurrency = safeBalanceInBaseCurrency;
  }


  public Account scenarios(List<Scenario> scenarios) {
    this.scenarios = scenarios;
    return this;
  }

  public Account addScenariosItem(Scenario scenariosItem) {
    if (this.scenarios == null) {
      this.scenarios = new ArrayList<>();
    }
    this.scenarios.add(scenariosItem);
    return this;
  }

  /**
   * All scenarios that compose the account, including the primary.
   * @return scenarios
   */
  @javax.annotation.Nullable
  public List<Scenario> getScenarios() {
    return scenarios;
  }

  public void setScenarios(List<Scenario> scenarios) {
    this.scenarios = scenarios;
  }


  public Account title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the account.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Account transactionAccounts(List<TransactionAccount> transactionAccounts) {
    this.transactionAccounts = transactionAccounts;
    return this;
  }

  public Account addTransactionAccountsItem(TransactionAccount transactionAccountsItem) {
    if (this.transactionAccounts == null) {
      this.transactionAccounts = new ArrayList<>();
    }
    this.transactionAccounts.add(transactionAccountsItem);
    return this;
  }

  /**
   * All transaction accounts that compose the account, including the primary.
   * @return transactionAccounts
   */
  @javax.annotation.Nullable
  public List<TransactionAccount> getTransactionAccounts() {
    return transactionAccounts;
  }

  public void setTransactionAccounts(List<TransactionAccount> transactionAccounts) {
    this.transactionAccounts = transactionAccounts;
  }


  public Account type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the account.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Account updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * When the account was last updated.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.createdAt, account.createdAt) &&
        Objects.equals(this.currencyCode, account.currencyCode) &&
        Objects.equals(this.currentBalance, account.currentBalance) &&
        Objects.equals(this.currentBalanceDate, account.currentBalanceDate) &&
        Objects.equals(this.currentBalanceExchangeRate, account.currentBalanceExchangeRate) &&
        Objects.equals(this.currentBalanceInBaseCurrency, account.currentBalanceInBaseCurrency) &&
        Objects.equals(this.id, account.id) &&
        Objects.equals(this.isNetWorth, account.isNetWorth) &&
        Objects.equals(this.primaryScenario, account.primaryScenario) &&
        Objects.equals(this.primaryTransactionAccount, account.primaryTransactionAccount) &&
        Objects.equals(this.safeBalance, account.safeBalance) &&
        Objects.equals(this.safeBalanceInBaseCurrency, account.safeBalanceInBaseCurrency) &&
        Objects.equals(this.scenarios, account.scenarios) &&
        Objects.equals(this.title, account.title) &&
        Objects.equals(this.transactionAccounts, account.transactionAccounts) &&
        Objects.equals(this.type, account.type) &&
        Objects.equals(this.updatedAt, account.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, currencyCode, currentBalance, currentBalanceDate, currentBalanceExchangeRate, currentBalanceInBaseCurrency, id, isNetWorth, primaryScenario, primaryTransactionAccount, safeBalance, safeBalanceInBaseCurrency, scenarios, title, transactionAccounts, type, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    currentBalance: ").append(toIndentedString(currentBalance)).append("\n");
    sb.append("    currentBalanceDate: ").append(toIndentedString(currentBalanceDate)).append("\n");
    sb.append("    currentBalanceExchangeRate: ").append(toIndentedString(currentBalanceExchangeRate)).append("\n");
    sb.append("    currentBalanceInBaseCurrency: ").append(toIndentedString(currentBalanceInBaseCurrency)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isNetWorth: ").append(toIndentedString(isNetWorth)).append("\n");
    sb.append("    primaryScenario: ").append(toIndentedString(primaryScenario)).append("\n");
    sb.append("    primaryTransactionAccount: ").append(toIndentedString(primaryTransactionAccount)).append("\n");
    sb.append("    safeBalance: ").append(toIndentedString(safeBalance)).append("\n");
    sb.append("    safeBalanceInBaseCurrency: ").append(toIndentedString(safeBalanceInBaseCurrency)).append("\n");
    sb.append("    scenarios: ").append(toIndentedString(scenarios)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    transactionAccounts: ").append(toIndentedString(transactionAccounts)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("currency_code");
    openapiFields.add("current_balance");
    openapiFields.add("current_balance_date");
    openapiFields.add("current_balance_exchange_rate");
    openapiFields.add("current_balance_in_base_currency");
    openapiFields.add("id");
    openapiFields.add("is_net_worth");
    openapiFields.add("primary_scenario");
    openapiFields.add("primary_transaction_account");
    openapiFields.add("safe_balance");
    openapiFields.add("safe_balance_in_base_currency");
    openapiFields.add("scenarios");
    openapiFields.add("title");
    openapiFields.add("transaction_accounts");
    openapiFields.add("type");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Account
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Account.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Account is not found in the empty JSON string", Account.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Account.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Account` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("currency_code") != null && !jsonObj.get("currency_code").isJsonNull()) && !jsonObj.get("currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_code").toString()));
      }
      if ((jsonObj.get("current_balance_date") != null && !jsonObj.get("current_balance_date").isJsonNull()) && !jsonObj.get("current_balance_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_balance_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_balance_date").toString()));
      }
      // validate the optional field `primary_scenario`
      if (jsonObj.get("primary_scenario") != null && !jsonObj.get("primary_scenario").isJsonNull()) {
        Scenario.validateJsonElement(jsonObj.get("primary_scenario"));
      }
      // validate the optional field `primary_transaction_account`
      if (jsonObj.get("primary_transaction_account") != null && !jsonObj.get("primary_transaction_account").isJsonNull()) {
        TransactionAccount.validateJsonElement(jsonObj.get("primary_transaction_account"));
      }
      if (jsonObj.get("scenarios") != null && !jsonObj.get("scenarios").isJsonNull()) {
        JsonArray jsonArrayscenarios = jsonObj.getAsJsonArray("scenarios");
        if (jsonArrayscenarios != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scenarios").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scenarios` to be an array in the JSON string but got `%s`", jsonObj.get("scenarios").toString()));
          }

          // validate the optional field `scenarios` (array)
          for (int i = 0; i < jsonArrayscenarios.size(); i++) {
            Scenario.validateJsonElement(jsonArrayscenarios.get(i));
          };
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (jsonObj.get("transaction_accounts") != null && !jsonObj.get("transaction_accounts").isJsonNull()) {
        JsonArray jsonArraytransactionAccounts = jsonObj.getAsJsonArray("transaction_accounts");
        if (jsonArraytransactionAccounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transaction_accounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transaction_accounts` to be an array in the JSON string but got `%s`", jsonObj.get("transaction_accounts").toString()));
          }

          // validate the optional field `transaction_accounts` (array)
          for (int i = 0; i < jsonArraytransactionAccounts.size(); i++) {
            TransactionAccount.validateJsonElement(jsonArraytransactionAccounts.get(i));
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Account.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Account' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Account> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Account.class));

       return (TypeAdapter<T>) new TypeAdapter<Account>() {
           @Override
           public void write(JsonWriter out, Account value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Account read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Account given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Account
   * @throws IOException if the JSON string is invalid with respect to Account
   */
  public static Account fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Account.class);
  }

  /**
   * Convert an instance of Account to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

