/*
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Scenario
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:36.319532-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Scenario {
  public static final String SERIALIZED_NAME_ACHIEVE_DATE = "achieve_date";
  @SerializedName(SERIALIZED_NAME_ACHIEVE_DATE)
  private String achieveDate;

  public static final String SERIALIZED_NAME_CLOSING_BALANCE = "closing_balance";
  @SerializedName(SERIALIZED_NAME_CLOSING_BALANCE)
  private BigDecimal closingBalance;

  public static final String SERIALIZED_NAME_CLOSING_BALANCE_DATE = "closing_balance_date";
  @SerializedName(SERIALIZED_NAME_CLOSING_BALANCE_DATE)
  private String closingBalanceDate;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CURRENT_BALANCE = "current_balance";
  @SerializedName(SERIALIZED_NAME_CURRENT_BALANCE)
  private BigDecimal currentBalance;

  public static final String SERIALIZED_NAME_CURRENT_BALANCE_DATE = "current_balance_date";
  @SerializedName(SERIALIZED_NAME_CURRENT_BALANCE_DATE)
  private String currentBalanceDate;

  public static final String SERIALIZED_NAME_CURRENT_BALANCE_EXCHANGE_RATE = "current_balance_exchange_rate";
  @SerializedName(SERIALIZED_NAME_CURRENT_BALANCE_EXCHANGE_RATE)
  private BigDecimal currentBalanceExchangeRate;

  public static final String SERIALIZED_NAME_CURRENT_BALANCE_IN_BASE_CURRENCY = "current_balance_in_base_currency";
  @SerializedName(SERIALIZED_NAME_CURRENT_BALANCE_IN_BASE_CURRENCY)
  private BigDecimal currentBalanceInBaseCurrency;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INTEREST_RATE = "interest_rate";
  @SerializedName(SERIALIZED_NAME_INTEREST_RATE)
  private BigDecimal interestRate;

  public static final String SERIALIZED_NAME_INTEREST_RATE_REPEAT_ID = "interest_rate_repeat_id";
  @SerializedName(SERIALIZED_NAME_INTEREST_RATE_REPEAT_ID)
  private Integer interestRateRepeatId;

  public static final String SERIALIZED_NAME_MAXIMUM_VALUE = "maximum-value";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_VALUE)
  private BigDecimal maximumValue;

  public static final String SERIALIZED_NAME_MINIMUM_VALUE = "minimum-value";
  @SerializedName(SERIALIZED_NAME_MINIMUM_VALUE)
  private BigDecimal minimumValue;

  public static final String SERIALIZED_NAME_SAFE_BALANCE = "safe_balance";
  @SerializedName(SERIALIZED_NAME_SAFE_BALANCE)
  private BigDecimal safeBalance;

  public static final String SERIALIZED_NAME_SAFE_BALANCE_IN_BASE_CURRENCY = "safe_balance_in_base_currency";
  @SerializedName(SERIALIZED_NAME_SAFE_BALANCE_IN_BASE_CURRENCY)
  private BigDecimal safeBalanceInBaseCurrency;

  public static final String SERIALIZED_NAME_STARTING_BALANCE = "starting_balance";
  @SerializedName(SERIALIZED_NAME_STARTING_BALANCE)
  private BigDecimal startingBalance;

  public static final String SERIALIZED_NAME_STARTING_BALANCE_DATE = "starting_balance_date";
  @SerializedName(SERIALIZED_NAME_STARTING_BALANCE_DATE)
  private String startingBalanceDate;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  /**
   * The type of the scenario.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    NO_INTEREST("no-interest"),
    
    SAVINGS("savings"),
    
    DEBT("debt");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public Scenario() {
  }

  public Scenario achieveDate(String achieveDate) {
    this.achieveDate = achieveDate;
    return this;
  }

  /**
   * For goals, the date that they should be achieved by.
   * @return achieveDate
   */
  @javax.annotation.Nullable
  public String getAchieveDate() {
    return achieveDate;
  }

  public void setAchieveDate(String achieveDate) {
    this.achieveDate = achieveDate;
  }


  public Scenario closingBalance(BigDecimal closingBalance) {
    this.closingBalance = closingBalance;
    return this;
  }

  /**
   * The closing balance of the scenario.
   * @return closingBalance
   */
  @javax.annotation.Nullable
  public BigDecimal getClosingBalance() {
    return closingBalance;
  }

  public void setClosingBalance(BigDecimal closingBalance) {
    this.closingBalance = closingBalance;
  }


  public Scenario closingBalanceDate(String closingBalanceDate) {
    this.closingBalanceDate = closingBalanceDate;
    return this;
  }

  /**
   * The date of the closing balance.
   * @return closingBalanceDate
   */
  @javax.annotation.Nullable
  public String getClosingBalanceDate() {
    return closingBalanceDate;
  }

  public void setClosingBalanceDate(String closingBalanceDate) {
    this.closingBalanceDate = closingBalanceDate;
  }


  public Scenario createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * When the scenario was created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Scenario currentBalance(BigDecimal currentBalance) {
    this.currentBalance = currentBalance;
    return this;
  }

  /**
   * The current balance of the scenario.
   * @return currentBalance
   */
  @javax.annotation.Nullable
  public BigDecimal getCurrentBalance() {
    return currentBalance;
  }

  public void setCurrentBalance(BigDecimal currentBalance) {
    this.currentBalance = currentBalance;
  }


  public Scenario currentBalanceDate(String currentBalanceDate) {
    this.currentBalanceDate = currentBalanceDate;
    return this;
  }

  /**
   * The date of the current balance.
   * @return currentBalanceDate
   */
  @javax.annotation.Nullable
  public String getCurrentBalanceDate() {
    return currentBalanceDate;
  }

  public void setCurrentBalanceDate(String currentBalanceDate) {
    this.currentBalanceDate = currentBalanceDate;
  }


  public Scenario currentBalanceExchangeRate(BigDecimal currentBalanceExchangeRate) {
    this.currentBalanceExchangeRate = currentBalanceExchangeRate;
    return this;
  }

  /**
   * The exchange rate between the scenario&#39;s currency and the user&#39;s base currency, when different. If the currencies are the same, null is returned.
   * @return currentBalanceExchangeRate
   */
  @javax.annotation.Nullable
  public BigDecimal getCurrentBalanceExchangeRate() {
    return currentBalanceExchangeRate;
  }

  public void setCurrentBalanceExchangeRate(BigDecimal currentBalanceExchangeRate) {
    this.currentBalanceExchangeRate = currentBalanceExchangeRate;
  }


  public Scenario currentBalanceInBaseCurrency(BigDecimal currentBalanceInBaseCurrency) {
    this.currentBalanceInBaseCurrency = currentBalanceInBaseCurrency;
    return this;
  }

  /**
   * The current balance of the scenario in the user&#39;s base currency.
   * @return currentBalanceInBaseCurrency
   */
  @javax.annotation.Nullable
  public BigDecimal getCurrentBalanceInBaseCurrency() {
    return currentBalanceInBaseCurrency;
  }

  public void setCurrentBalanceInBaseCurrency(BigDecimal currentBalanceInBaseCurrency) {
    this.currentBalanceInBaseCurrency = currentBalanceInBaseCurrency;
  }


  public Scenario description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A short description of what the scenario is modelling.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Scenario id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * The unique identifier of the scenario.
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Scenario interestRate(BigDecimal interestRate) {
    this.interestRate = interestRate;
    return this;
  }

  /**
   * The amount of interest to apply to the balance. Will apply periodically depending on what &#x60;interest_rate_repeat_id&#x60; is set to.
   * @return interestRate
   */
  @javax.annotation.Nullable
  public BigDecimal getInterestRate() {
    return interestRate;
  }

  public void setInterestRate(BigDecimal interestRate) {
    this.interestRate = interestRate;
  }


  public Scenario interestRateRepeatId(Integer interestRateRepeatId) {
    this.interestRateRepeatId = interestRateRepeatId;
    return this;
  }

  /**
   * A number representing how often the interest should be applied. 0 is used for no interest, 2 is weekly, 3 is fortnightly, 4 is monthly, 5 is yearly and 7 for quarterly.
   * @return interestRateRepeatId
   */
  @javax.annotation.Nullable
  public Integer getInterestRateRepeatId() {
    return interestRateRepeatId;
  }

  public void setInterestRateRepeatId(Integer interestRateRepeatId) {
    this.interestRateRepeatId = interestRateRepeatId;
  }


  public Scenario maximumValue(BigDecimal maximumValue) {
    this.maximumValue = maximumValue;
    return this;
  }

  /**
   * Get maximumValue
   * @return maximumValue
   */
  @javax.annotation.Nullable
  public BigDecimal getMaximumValue() {
    return maximumValue;
  }

  public void setMaximumValue(BigDecimal maximumValue) {
    this.maximumValue = maximumValue;
  }


  public Scenario minimumValue(BigDecimal minimumValue) {
    this.minimumValue = minimumValue;
    return this;
  }

  /**
   * Get minimumValue
   * @return minimumValue
   */
  @javax.annotation.Nullable
  public BigDecimal getMinimumValue() {
    return minimumValue;
  }

  public void setMinimumValue(BigDecimal minimumValue) {
    this.minimumValue = minimumValue;
  }


  public Scenario safeBalance(BigDecimal safeBalance) {
    this.safeBalance = safeBalance;
    return this;
  }

  /**
   * The current safe balance in the user&#39;s base currency, if safe balance is activated on the account associated with the scenario. If safe balance is not activated, then null is returned.
   * @return safeBalance
   */
  @javax.annotation.Nullable
  public BigDecimal getSafeBalance() {
    return safeBalance;
  }

  public void setSafeBalance(BigDecimal safeBalance) {
    this.safeBalance = safeBalance;
  }


  public Scenario safeBalanceInBaseCurrency(BigDecimal safeBalanceInBaseCurrency) {
    this.safeBalanceInBaseCurrency = safeBalanceInBaseCurrency;
    return this;
  }

  /**
   * The current safe balance in the user&#39;s base currency, if safe balance is activated on the account associated with the scenario. If safe balance is not available, then null is returned.
   * @return safeBalanceInBaseCurrency
   */
  @javax.annotation.Nullable
  public BigDecimal getSafeBalanceInBaseCurrency() {
    return safeBalanceInBaseCurrency;
  }

  public void setSafeBalanceInBaseCurrency(BigDecimal safeBalanceInBaseCurrency) {
    this.safeBalanceInBaseCurrency = safeBalanceInBaseCurrency;
  }


  public Scenario startingBalance(BigDecimal startingBalance) {
    this.startingBalance = startingBalance;
    return this;
  }

  /**
   * The starting balance of the scenario.
   * @return startingBalance
   */
  @javax.annotation.Nullable
  public BigDecimal getStartingBalance() {
    return startingBalance;
  }

  public void setStartingBalance(BigDecimal startingBalance) {
    this.startingBalance = startingBalance;
  }


  public Scenario startingBalanceDate(String startingBalanceDate) {
    this.startingBalanceDate = startingBalanceDate;
    return this;
  }

  /**
   * The date of the starting balance.
   * @return startingBalanceDate
   */
  @javax.annotation.Nullable
  public String getStartingBalanceDate() {
    return startingBalanceDate;
  }

  public void setStartingBalanceDate(String startingBalanceDate) {
    this.startingBalanceDate = startingBalanceDate;
  }


  public Scenario title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the scenario.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Scenario type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the scenario.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Scenario updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * When the scenario was last updated.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Scenario scenario = (Scenario) o;
    return Objects.equals(this.achieveDate, scenario.achieveDate) &&
        Objects.equals(this.closingBalance, scenario.closingBalance) &&
        Objects.equals(this.closingBalanceDate, scenario.closingBalanceDate) &&
        Objects.equals(this.createdAt, scenario.createdAt) &&
        Objects.equals(this.currentBalance, scenario.currentBalance) &&
        Objects.equals(this.currentBalanceDate, scenario.currentBalanceDate) &&
        Objects.equals(this.currentBalanceExchangeRate, scenario.currentBalanceExchangeRate) &&
        Objects.equals(this.currentBalanceInBaseCurrency, scenario.currentBalanceInBaseCurrency) &&
        Objects.equals(this.description, scenario.description) &&
        Objects.equals(this.id, scenario.id) &&
        Objects.equals(this.interestRate, scenario.interestRate) &&
        Objects.equals(this.interestRateRepeatId, scenario.interestRateRepeatId) &&
        Objects.equals(this.maximumValue, scenario.maximumValue) &&
        Objects.equals(this.minimumValue, scenario.minimumValue) &&
        Objects.equals(this.safeBalance, scenario.safeBalance) &&
        Objects.equals(this.safeBalanceInBaseCurrency, scenario.safeBalanceInBaseCurrency) &&
        Objects.equals(this.startingBalance, scenario.startingBalance) &&
        Objects.equals(this.startingBalanceDate, scenario.startingBalanceDate) &&
        Objects.equals(this.title, scenario.title) &&
        Objects.equals(this.type, scenario.type) &&
        Objects.equals(this.updatedAt, scenario.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(achieveDate, closingBalance, closingBalanceDate, createdAt, currentBalance, currentBalanceDate, currentBalanceExchangeRate, currentBalanceInBaseCurrency, description, id, interestRate, interestRateRepeatId, maximumValue, minimumValue, safeBalance, safeBalanceInBaseCurrency, startingBalance, startingBalanceDate, title, type, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Scenario {\n");
    sb.append("    achieveDate: ").append(toIndentedString(achieveDate)).append("\n");
    sb.append("    closingBalance: ").append(toIndentedString(closingBalance)).append("\n");
    sb.append("    closingBalanceDate: ").append(toIndentedString(closingBalanceDate)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    currentBalance: ").append(toIndentedString(currentBalance)).append("\n");
    sb.append("    currentBalanceDate: ").append(toIndentedString(currentBalanceDate)).append("\n");
    sb.append("    currentBalanceExchangeRate: ").append(toIndentedString(currentBalanceExchangeRate)).append("\n");
    sb.append("    currentBalanceInBaseCurrency: ").append(toIndentedString(currentBalanceInBaseCurrency)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    interestRate: ").append(toIndentedString(interestRate)).append("\n");
    sb.append("    interestRateRepeatId: ").append(toIndentedString(interestRateRepeatId)).append("\n");
    sb.append("    maximumValue: ").append(toIndentedString(maximumValue)).append("\n");
    sb.append("    minimumValue: ").append(toIndentedString(minimumValue)).append("\n");
    sb.append("    safeBalance: ").append(toIndentedString(safeBalance)).append("\n");
    sb.append("    safeBalanceInBaseCurrency: ").append(toIndentedString(safeBalanceInBaseCurrency)).append("\n");
    sb.append("    startingBalance: ").append(toIndentedString(startingBalance)).append("\n");
    sb.append("    startingBalanceDate: ").append(toIndentedString(startingBalanceDate)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("achieve_date");
    openapiFields.add("closing_balance");
    openapiFields.add("closing_balance_date");
    openapiFields.add("created_at");
    openapiFields.add("current_balance");
    openapiFields.add("current_balance_date");
    openapiFields.add("current_balance_exchange_rate");
    openapiFields.add("current_balance_in_base_currency");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("interest_rate");
    openapiFields.add("interest_rate_repeat_id");
    openapiFields.add("maximum-value");
    openapiFields.add("minimum-value");
    openapiFields.add("safe_balance");
    openapiFields.add("safe_balance_in_base_currency");
    openapiFields.add("starting_balance");
    openapiFields.add("starting_balance_date");
    openapiFields.add("title");
    openapiFields.add("type");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Scenario
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Scenario.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Scenario is not found in the empty JSON string", Scenario.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Scenario.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Scenario` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("achieve_date") != null && !jsonObj.get("achieve_date").isJsonNull()) && !jsonObj.get("achieve_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `achieve_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("achieve_date").toString()));
      }
      if ((jsonObj.get("closing_balance_date") != null && !jsonObj.get("closing_balance_date").isJsonNull()) && !jsonObj.get("closing_balance_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closing_balance_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closing_balance_date").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("current_balance_date") != null && !jsonObj.get("current_balance_date").isJsonNull()) && !jsonObj.get("current_balance_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_balance_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_balance_date").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("starting_balance_date") != null && !jsonObj.get("starting_balance_date").isJsonNull()) && !jsonObj.get("starting_balance_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `starting_balance_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("starting_balance_date").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Scenario.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Scenario' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Scenario> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Scenario.class));

       return (TypeAdapter<T>) new TypeAdapter<Scenario>() {
           @Override
           public void write(JsonWriter out, Scenario value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Scenario read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Scenario given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Scenario
   * @throws IOException if the JSON string is invalid with respect to Scenario
   */
  public static Scenario fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Scenario.class);
  }

  /**
   * Convert an instance of Scenario to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

