/*
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TransactionsIdPutRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:36.319532-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransactionsIdPutRequest {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "category_id";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private Integer categoryId;

  public static final String SERIALIZED_NAME_CHEQUE_NUMBER = "cheque_number";
  @SerializedName(SERIALIZED_NAME_CHEQUE_NUMBER)
  private String chequeNumber;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_IS_TRANSFER = "is_transfer";
  @SerializedName(SERIALIZED_NAME_IS_TRANSFER)
  private Boolean isTransfer;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private String labels;

  public static final String SERIALIZED_NAME_MEMO = "memo";
  @SerializedName(SERIALIZED_NAME_MEMO)
  private String memo;

  public static final String SERIALIZED_NAME_NEEDS_REVIEW = "needs_review";
  @SerializedName(SERIALIZED_NAME_NEEDS_REVIEW)
  private Boolean needsReview;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_PAYEE = "payee";
  @SerializedName(SERIALIZED_NAME_PAYEE)
  private String payee;

  public TransactionsIdPutRequest() {
  }

  public TransactionsIdPutRequest amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

  /**
   * A new amount for the transaction.
   * @return amount
   */
  @javax.annotation.Nullable
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public TransactionsIdPutRequest categoryId(Integer categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  /**
   * The unique identifier of a new category for the transaction.
   * @return categoryId
   */
  @javax.annotation.Nullable
  public Integer getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(Integer categoryId) {
    this.categoryId = categoryId;
  }


  public TransactionsIdPutRequest chequeNumber(String chequeNumber) {
    this.chequeNumber = chequeNumber;
    return this;
  }

  /**
   * A new cheque number for the transaction.
   * @return chequeNumber
   */
  @javax.annotation.Nullable
  public String getChequeNumber() {
    return chequeNumber;
  }

  public void setChequeNumber(String chequeNumber) {
    this.chequeNumber = chequeNumber;
  }


  public TransactionsIdPutRequest date(String date) {
    this.date = date;
    return this;
  }

  /**
   * A new date for the transaction.
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public TransactionsIdPutRequest isTransfer(Boolean isTransfer) {
    this.isTransfer = isTransfer;
    return this;
  }

  /**
   * Whether the transaction is a transfer or not.
   * @return isTransfer
   */
  @javax.annotation.Nullable
  public Boolean getIsTransfer() {
    return isTransfer;
  }

  public void setIsTransfer(Boolean isTransfer) {
    this.isTransfer = isTransfer;
  }


  public TransactionsIdPutRequest labels(String labels) {
    this.labels = labels;
    return this;
  }

  /**
   * A new comma-separated set of labels for the transaction.
   * @return labels
   */
  @javax.annotation.Nullable
  public String getLabels() {
    return labels;
  }

  public void setLabels(String labels) {
    this.labels = labels;
  }


  public TransactionsIdPutRequest memo(String memo) {
    this.memo = memo;
    return this;
  }

  /**
   * A new memo for the transaction.
   * @return memo
   */
  @javax.annotation.Nullable
  public String getMemo() {
    return memo;
  }

  public void setMemo(String memo) {
    this.memo = memo;
  }


  public TransactionsIdPutRequest needsReview(Boolean needsReview) {
    this.needsReview = needsReview;
    return this;
  }

  /**
   * Whether the transaction needs to be reviewed or not.
   * @return needsReview
   */
  @javax.annotation.Nullable
  public Boolean getNeedsReview() {
    return needsReview;
  }

  public void setNeedsReview(Boolean needsReview) {
    this.needsReview = needsReview;
  }


  public TransactionsIdPutRequest note(String note) {
    this.note = note;
    return this;
  }

  /**
   * A new note for the transaction.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public TransactionsIdPutRequest payee(String payee) {
    this.payee = payee;
    return this;
  }

  /**
   * A new payee for the transaction.
   * @return payee
   */
  @javax.annotation.Nullable
  public String getPayee() {
    return payee;
  }

  public void setPayee(String payee) {
    this.payee = payee;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionsIdPutRequest transactionsIdPutRequest = (TransactionsIdPutRequest) o;
    return Objects.equals(this.amount, transactionsIdPutRequest.amount) &&
        Objects.equals(this.categoryId, transactionsIdPutRequest.categoryId) &&
        Objects.equals(this.chequeNumber, transactionsIdPutRequest.chequeNumber) &&
        Objects.equals(this.date, transactionsIdPutRequest.date) &&
        Objects.equals(this.isTransfer, transactionsIdPutRequest.isTransfer) &&
        Objects.equals(this.labels, transactionsIdPutRequest.labels) &&
        Objects.equals(this.memo, transactionsIdPutRequest.memo) &&
        Objects.equals(this.needsReview, transactionsIdPutRequest.needsReview) &&
        Objects.equals(this.note, transactionsIdPutRequest.note) &&
        Objects.equals(this.payee, transactionsIdPutRequest.payee);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, categoryId, chequeNumber, date, isTransfer, labels, memo, needsReview, note, payee);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionsIdPutRequest {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    chequeNumber: ").append(toIndentedString(chequeNumber)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    isTransfer: ").append(toIndentedString(isTransfer)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    needsReview: ").append(toIndentedString(needsReview)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    payee: ").append(toIndentedString(payee)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("category_id");
    openapiFields.add("cheque_number");
    openapiFields.add("date");
    openapiFields.add("is_transfer");
    openapiFields.add("labels");
    openapiFields.add("memo");
    openapiFields.add("needs_review");
    openapiFields.add("note");
    openapiFields.add("payee");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransactionsIdPutRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionsIdPutRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionsIdPutRequest is not found in the empty JSON string", TransactionsIdPutRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransactionsIdPutRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionsIdPutRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cheque_number") != null && !jsonObj.get("cheque_number").isJsonNull()) && !jsonObj.get("cheque_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cheque_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cheque_number").toString()));
      }
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if ((jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) && !jsonObj.get("labels").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      if ((jsonObj.get("memo") != null && !jsonObj.get("memo").isJsonNull()) && !jsonObj.get("memo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memo").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("payee") != null && !jsonObj.get("payee").isJsonNull()) && !jsonObj.get("payee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payee").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionsIdPutRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionsIdPutRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionsIdPutRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionsIdPutRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionsIdPutRequest>() {
           @Override
           public void write(JsonWriter out, TransactionsIdPutRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionsIdPutRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransactionsIdPutRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransactionsIdPutRequest
   * @throws IOException if the JSON string is invalid with respect to TransactionsIdPutRequest
   */
  public static TransactionsIdPutRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionsIdPutRequest.class);
  }

  /**
   * Convert an instance of TransactionsIdPutRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

