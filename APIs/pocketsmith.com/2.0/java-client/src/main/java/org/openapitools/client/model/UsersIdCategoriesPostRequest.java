/*
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UsersIdCategoriesPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:36.319532-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UsersIdCategoriesPostRequest {
  public static final String SERIALIZED_NAME_COLOUR = "colour";
  @SerializedName(SERIALIZED_NAME_COLOUR)
  private String colour;

  public static final String SERIALIZED_NAME_IS_BILL = "is_bill";
  @SerializedName(SERIALIZED_NAME_IS_BILL)
  private Boolean isBill;

  public static final String SERIALIZED_NAME_IS_TRANSFER = "is_transfer";
  @SerializedName(SERIALIZED_NAME_IS_TRANSFER)
  private Boolean isTransfer;

  public static final String SERIALIZED_NAME_PARENT_ID = "parent_id";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private Integer parentId;

  /**
   * Set the refund behaviour of the category.
   */
  @JsonAdapter(RefundBehaviourEnum.Adapter.class)
  public enum RefundBehaviourEnum {
    DEBITS_ARE_DEDUCTIONS("debits_are_deductions"),
    
    CREDITS_ARE_REFUNDS("credits_are_refunds");

    private String value;

    RefundBehaviourEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RefundBehaviourEnum fromValue(String value) {
      for (RefundBehaviourEnum b : RefundBehaviourEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RefundBehaviourEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RefundBehaviourEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RefundBehaviourEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RefundBehaviourEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RefundBehaviourEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REFUND_BEHAVIOUR = "refund_behaviour";
  @SerializedName(SERIALIZED_NAME_REFUND_BEHAVIOUR)
  private RefundBehaviourEnum refundBehaviour;

  public static final String SERIALIZED_NAME_ROLL_UP = "roll_up";
  @SerializedName(SERIALIZED_NAME_ROLL_UP)
  private Boolean rollUp;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public UsersIdCategoriesPostRequest() {
  }

  public UsersIdCategoriesPostRequest colour(String colour) {
    this.colour = colour;
    return this;
  }

  /**
   * A CSS-style hex colour for the category.
   * @return colour
   */
  @javax.annotation.Nullable
  public String getColour() {
    return colour;
  }

  public void setColour(String colour) {
    this.colour = colour;
  }


  public UsersIdCategoriesPostRequest isBill(Boolean isBill) {
    this.isBill = isBill;
    return this;
  }

  /**
   * Set the category as a bill category.
   * @return isBill
   */
  @javax.annotation.Nullable
  public Boolean getIsBill() {
    return isBill;
  }

  public void setIsBill(Boolean isBill) {
    this.isBill = isBill;
  }


  public UsersIdCategoriesPostRequest isTransfer(Boolean isTransfer) {
    this.isTransfer = isTransfer;
    return this;
  }

  /**
   * Set the category as a transfer category.
   * @return isTransfer
   */
  @javax.annotation.Nullable
  public Boolean getIsTransfer() {
    return isTransfer;
  }

  public void setIsTransfer(Boolean isTransfer) {
    this.isTransfer = isTransfer;
  }


  public UsersIdCategoriesPostRequest parentId(Integer parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * The unique identifier of a category to be the parent of this category.
   * @return parentId
   */
  @javax.annotation.Nullable
  public Integer getParentId() {
    return parentId;
  }

  public void setParentId(Integer parentId) {
    this.parentId = parentId;
  }


  public UsersIdCategoriesPostRequest refundBehaviour(RefundBehaviourEnum refundBehaviour) {
    this.refundBehaviour = refundBehaviour;
    return this;
  }

  /**
   * Set the refund behaviour of the category.
   * @return refundBehaviour
   */
  @javax.annotation.Nullable
  public RefundBehaviourEnum getRefundBehaviour() {
    return refundBehaviour;
  }

  public void setRefundBehaviour(RefundBehaviourEnum refundBehaviour) {
    this.refundBehaviour = refundBehaviour;
  }


  public UsersIdCategoriesPostRequest rollUp(Boolean rollUp) {
    this.rollUp = rollUp;
    return this;
  }

  /**
   * Set the category to be rolled up into its parent category.
   * @return rollUp
   */
  @javax.annotation.Nullable
  public Boolean getRollUp() {
    return rollUp;
  }

  public void setRollUp(Boolean rollUp) {
    this.rollUp = rollUp;
  }


  public UsersIdCategoriesPostRequest title(String title) {
    this.title = title;
    return this;
  }

  /**
   * A title for the category.
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsersIdCategoriesPostRequest usersIdCategoriesPostRequest = (UsersIdCategoriesPostRequest) o;
    return Objects.equals(this.colour, usersIdCategoriesPostRequest.colour) &&
        Objects.equals(this.isBill, usersIdCategoriesPostRequest.isBill) &&
        Objects.equals(this.isTransfer, usersIdCategoriesPostRequest.isTransfer) &&
        Objects.equals(this.parentId, usersIdCategoriesPostRequest.parentId) &&
        Objects.equals(this.refundBehaviour, usersIdCategoriesPostRequest.refundBehaviour) &&
        Objects.equals(this.rollUp, usersIdCategoriesPostRequest.rollUp) &&
        Objects.equals(this.title, usersIdCategoriesPostRequest.title);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(colour, isBill, isTransfer, parentId, refundBehaviour, rollUp, title);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsersIdCategoriesPostRequest {\n");
    sb.append("    colour: ").append(toIndentedString(colour)).append("\n");
    sb.append("    isBill: ").append(toIndentedString(isBill)).append("\n");
    sb.append("    isTransfer: ").append(toIndentedString(isTransfer)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    refundBehaviour: ").append(toIndentedString(refundBehaviour)).append("\n");
    sb.append("    rollUp: ").append(toIndentedString(rollUp)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("colour");
    openapiFields.add("is_bill");
    openapiFields.add("is_transfer");
    openapiFields.add("parent_id");
    openapiFields.add("refund_behaviour");
    openapiFields.add("roll_up");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("title");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UsersIdCategoriesPostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UsersIdCategoriesPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsersIdCategoriesPostRequest is not found in the empty JSON string", UsersIdCategoriesPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UsersIdCategoriesPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UsersIdCategoriesPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UsersIdCategoriesPostRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("colour") != null && !jsonObj.get("colour").isJsonNull()) && !jsonObj.get("colour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colour").toString()));
      }
      if ((jsonObj.get("refund_behaviour") != null && !jsonObj.get("refund_behaviour").isJsonNull()) && !jsonObj.get("refund_behaviour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refund_behaviour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refund_behaviour").toString()));
      }
      // validate the optional field `refund_behaviour`
      if (jsonObj.get("refund_behaviour") != null && !jsonObj.get("refund_behaviour").isJsonNull()) {
        RefundBehaviourEnum.validateJsonElement(jsonObj.get("refund_behaviour"));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsersIdCategoriesPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsersIdCategoriesPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsersIdCategoriesPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsersIdCategoriesPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UsersIdCategoriesPostRequest>() {
           @Override
           public void write(JsonWriter out, UsersIdCategoriesPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UsersIdCategoriesPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UsersIdCategoriesPostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UsersIdCategoriesPostRequest
   * @throws IOException if the JSON string is invalid with respect to UsersIdCategoriesPostRequest
   */
  public static UsersIdCategoriesPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsersIdCategoriesPostRequest.class);
  }

  /**
   * Convert an instance of UsersIdCategoriesPostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

