/*
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Period;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BudgetAnalysis
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:36.319532-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BudgetAnalysis {
  public static final String SERIALIZED_NAME_AVERAGE_ACTUAL_AMOUNT = "average_actual_amount";
  @SerializedName(SERIALIZED_NAME_AVERAGE_ACTUAL_AMOUNT)
  private BigDecimal averageActualAmount;

  public static final String SERIALIZED_NAME_AVERAGE_FORECAST_AMOUNT = "average_forecast_amount";
  @SerializedName(SERIALIZED_NAME_AVERAGE_FORECAST_AMOUNT)
  private BigDecimal averageForecastAmount;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency_code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_END_DATE = "end_date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_PERIODS = "periods";
  @SerializedName(SERIALIZED_NAME_PERIODS)
  private List<Period> periods = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_TOTAL_ACTUAL_AMOUNT = "total_actual_amount";
  @SerializedName(SERIALIZED_NAME_TOTAL_ACTUAL_AMOUNT)
  private BigDecimal totalActualAmount;

  public static final String SERIALIZED_NAME_TOTAL_FORECAST_AMOUNT = "total_forecast_amount";
  @SerializedName(SERIALIZED_NAME_TOTAL_FORECAST_AMOUNT)
  private BigDecimal totalForecastAmount;

  public static final String SERIALIZED_NAME_TOTAL_OVER_BY = "total_over_by";
  @SerializedName(SERIALIZED_NAME_TOTAL_OVER_BY)
  private BigDecimal totalOverBy;

  public static final String SERIALIZED_NAME_TOTAL_UNDER_BY = "total_under_by";
  @SerializedName(SERIALIZED_NAME_TOTAL_UNDER_BY)
  private BigDecimal totalUnderBy;

  public BudgetAnalysis() {
  }

  public BudgetAnalysis averageActualAmount(BigDecimal averageActualAmount) {
    this.averageActualAmount = averageActualAmount;
    return this;
  }

  /**
   * The average actual (transactions) amount across all periods.
   * @return averageActualAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getAverageActualAmount() {
    return averageActualAmount;
  }

  public void setAverageActualAmount(BigDecimal averageActualAmount) {
    this.averageActualAmount = averageActualAmount;
  }


  public BudgetAnalysis averageForecastAmount(BigDecimal averageForecastAmount) {
    this.averageForecastAmount = averageForecastAmount;
    return this;
  }

  /**
   * The average budgeted amount across all periods.
   * @return averageForecastAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getAverageForecastAmount() {
    return averageForecastAmount;
  }

  public void setAverageForecastAmount(BigDecimal averageForecastAmount) {
    this.averageForecastAmount = averageForecastAmount;
  }


  public BudgetAnalysis currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * The currency of the budget analysis.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public BudgetAnalysis endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * The end date of the budget analysis.
   * @return endDate
   */
  @javax.annotation.Nullable
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public BudgetAnalysis periods(List<Period> periods) {
    this.periods = periods;
    return this;
  }

  public BudgetAnalysis addPeriodsItem(Period periodsItem) {
    if (this.periods == null) {
      this.periods = new ArrayList<>();
    }
    this.periods.add(periodsItem);
    return this;
  }

  /**
   * The period analyses that this budget analysis comprises.
   * @return periods
   */
  @javax.annotation.Nullable
  public List<Period> getPeriods() {
    return periods;
  }

  public void setPeriods(List<Period> periods) {
    this.periods = periods;
  }


  public BudgetAnalysis startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * The start date of the budget analysis.
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public BudgetAnalysis totalActualAmount(BigDecimal totalActualAmount) {
    this.totalActualAmount = totalActualAmount;
    return this;
  }

  /**
   * The total actual (transactions) amount across all periods.
   * @return totalActualAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalActualAmount() {
    return totalActualAmount;
  }

  public void setTotalActualAmount(BigDecimal totalActualAmount) {
    this.totalActualAmount = totalActualAmount;
  }


  public BudgetAnalysis totalForecastAmount(BigDecimal totalForecastAmount) {
    this.totalForecastAmount = totalForecastAmount;
    return this;
  }

  /**
   * The total budgeted amount across all periods.
   * @return totalForecastAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalForecastAmount() {
    return totalForecastAmount;
  }

  public void setTotalForecastAmount(BigDecimal totalForecastAmount) {
    this.totalForecastAmount = totalForecastAmount;
  }


  public BudgetAnalysis totalOverBy(BigDecimal totalOverBy) {
    this.totalOverBy = totalOverBy;
    return this;
  }

  /**
   * The total amount the budget was exceeded across all periods.
   * @return totalOverBy
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalOverBy() {
    return totalOverBy;
  }

  public void setTotalOverBy(BigDecimal totalOverBy) {
    this.totalOverBy = totalOverBy;
  }


  public BudgetAnalysis totalUnderBy(BigDecimal totalUnderBy) {
    this.totalUnderBy = totalUnderBy;
    return this;
  }

  /**
   * The total amount the budget was under by across all periods.
   * @return totalUnderBy
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalUnderBy() {
    return totalUnderBy;
  }

  public void setTotalUnderBy(BigDecimal totalUnderBy) {
    this.totalUnderBy = totalUnderBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BudgetAnalysis budgetAnalysis = (BudgetAnalysis) o;
    return Objects.equals(this.averageActualAmount, budgetAnalysis.averageActualAmount) &&
        Objects.equals(this.averageForecastAmount, budgetAnalysis.averageForecastAmount) &&
        Objects.equals(this.currencyCode, budgetAnalysis.currencyCode) &&
        Objects.equals(this.endDate, budgetAnalysis.endDate) &&
        Objects.equals(this.periods, budgetAnalysis.periods) &&
        Objects.equals(this.startDate, budgetAnalysis.startDate) &&
        Objects.equals(this.totalActualAmount, budgetAnalysis.totalActualAmount) &&
        Objects.equals(this.totalForecastAmount, budgetAnalysis.totalForecastAmount) &&
        Objects.equals(this.totalOverBy, budgetAnalysis.totalOverBy) &&
        Objects.equals(this.totalUnderBy, budgetAnalysis.totalUnderBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(averageActualAmount, averageForecastAmount, currencyCode, endDate, periods, startDate, totalActualAmount, totalForecastAmount, totalOverBy, totalUnderBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BudgetAnalysis {\n");
    sb.append("    averageActualAmount: ").append(toIndentedString(averageActualAmount)).append("\n");
    sb.append("    averageForecastAmount: ").append(toIndentedString(averageForecastAmount)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    periods: ").append(toIndentedString(periods)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    totalActualAmount: ").append(toIndentedString(totalActualAmount)).append("\n");
    sb.append("    totalForecastAmount: ").append(toIndentedString(totalForecastAmount)).append("\n");
    sb.append("    totalOverBy: ").append(toIndentedString(totalOverBy)).append("\n");
    sb.append("    totalUnderBy: ").append(toIndentedString(totalUnderBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("average_actual_amount");
    openapiFields.add("average_forecast_amount");
    openapiFields.add("currency_code");
    openapiFields.add("end_date");
    openapiFields.add("periods");
    openapiFields.add("start_date");
    openapiFields.add("total_actual_amount");
    openapiFields.add("total_forecast_amount");
    openapiFields.add("total_over_by");
    openapiFields.add("total_under_by");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BudgetAnalysis
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BudgetAnalysis.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BudgetAnalysis is not found in the empty JSON string", BudgetAnalysis.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BudgetAnalysis.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BudgetAnalysis` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currency_code") != null && !jsonObj.get("currency_code").isJsonNull()) && !jsonObj.get("currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_code").toString()));
      }
      if ((jsonObj.get("end_date") != null && !jsonObj.get("end_date").isJsonNull()) && !jsonObj.get("end_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end_date").toString()));
      }
      if (jsonObj.get("periods") != null && !jsonObj.get("periods").isJsonNull()) {
        JsonArray jsonArrayperiods = jsonObj.getAsJsonArray("periods");
        if (jsonArrayperiods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("periods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `periods` to be an array in the JSON string but got `%s`", jsonObj.get("periods").toString()));
          }

          // validate the optional field `periods` (array)
          for (int i = 0; i < jsonArrayperiods.size(); i++) {
            Period.validateJsonElement(jsonArrayperiods.get(i));
          };
        }
      }
      if ((jsonObj.get("start_date") != null && !jsonObj.get("start_date").isJsonNull()) && !jsonObj.get("start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_date").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BudgetAnalysis.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BudgetAnalysis' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BudgetAnalysis> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BudgetAnalysis.class));

       return (TypeAdapter<T>) new TypeAdapter<BudgetAnalysis>() {
           @Override
           public void write(JsonWriter out, BudgetAnalysis value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BudgetAnalysis read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BudgetAnalysis given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BudgetAnalysis
   * @throws IOException if the JSON string is invalid with respect to BudgetAnalysis
   */
  public static BudgetAnalysis fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BudgetAnalysis.class);
  }

  /**
   * Convert an instance of BudgetAnalysis to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

