/*
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ScenariosIdEventsPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:36.319532-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScenariosIdEventsPostRequest {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "category_id";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private Integer categoryId;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_REPEAT_INTERVAL = "repeat_interval";
  @SerializedName(SERIALIZED_NAME_REPEAT_INTERVAL)
  private Integer repeatInterval = 1;

  /**
   * The repeat type of the event.
   */
  @JsonAdapter(RepeatTypeEnum.Adapter.class)
  public enum RepeatTypeEnum {
    ONCE("once"),
    
    DAILY("daily"),
    
    WEEKLY("weekly"),
    
    FORTNIGHTLY("fortnightly"),
    
    MONTHLY("monthly"),
    
    YEARLY("yearly"),
    
    EACH_WEEKDAY("each weekday");

    private String value;

    RepeatTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RepeatTypeEnum fromValue(String value) {
      for (RepeatTypeEnum b : RepeatTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RepeatTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RepeatTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RepeatTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RepeatTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RepeatTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPEAT_TYPE = "repeat_type";
  @SerializedName(SERIALIZED_NAME_REPEAT_TYPE)
  private RepeatTypeEnum repeatType;

  public ScenariosIdEventsPostRequest() {
  }

  public ScenariosIdEventsPostRequest amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The amount of the event. A positive amount is a credit, and a negative amount is a debit.
   * @return amount
   */
  @javax.annotation.Nonnull
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public ScenariosIdEventsPostRequest categoryId(Integer categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  /**
   * The unique identifier of the category for the event.
   * @return categoryId
   */
  @javax.annotation.Nonnull
  public Integer getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(Integer categoryId) {
    this.categoryId = categoryId;
  }


  public ScenariosIdEventsPostRequest date(String date) {
    this.date = date;
    return this;
  }

  /**
   * The starting date of the event.
   * @return date
   */
  @javax.annotation.Nonnull
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public ScenariosIdEventsPostRequest note(String note) {
    this.note = note;
    return this;
  }

  /**
   * A note for the event.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public ScenariosIdEventsPostRequest repeatInterval(Integer repeatInterval) {
    this.repeatInterval = repeatInterval;
    return this;
  }

  /**
   * The repeat interval of the event.
   * @return repeatInterval
   */
  @javax.annotation.Nullable
  public Integer getRepeatInterval() {
    return repeatInterval;
  }

  public void setRepeatInterval(Integer repeatInterval) {
    this.repeatInterval = repeatInterval;
  }


  public ScenariosIdEventsPostRequest repeatType(RepeatTypeEnum repeatType) {
    this.repeatType = repeatType;
    return this;
  }

  /**
   * The repeat type of the event.
   * @return repeatType
   */
  @javax.annotation.Nonnull
  public RepeatTypeEnum getRepeatType() {
    return repeatType;
  }

  public void setRepeatType(RepeatTypeEnum repeatType) {
    this.repeatType = repeatType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScenariosIdEventsPostRequest scenariosIdEventsPostRequest = (ScenariosIdEventsPostRequest) o;
    return Objects.equals(this.amount, scenariosIdEventsPostRequest.amount) &&
        Objects.equals(this.categoryId, scenariosIdEventsPostRequest.categoryId) &&
        Objects.equals(this.date, scenariosIdEventsPostRequest.date) &&
        Objects.equals(this.note, scenariosIdEventsPostRequest.note) &&
        Objects.equals(this.repeatInterval, scenariosIdEventsPostRequest.repeatInterval) &&
        Objects.equals(this.repeatType, scenariosIdEventsPostRequest.repeatType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, categoryId, date, note, repeatInterval, repeatType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScenariosIdEventsPostRequest {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    repeatInterval: ").append(toIndentedString(repeatInterval)).append("\n");
    sb.append("    repeatType: ").append(toIndentedString(repeatType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("category_id");
    openapiFields.add("date");
    openapiFields.add("note");
    openapiFields.add("repeat_interval");
    openapiFields.add("repeat_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("category_id");
    openapiRequiredFields.add("date");
    openapiRequiredFields.add("repeat_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScenariosIdEventsPostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScenariosIdEventsPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScenariosIdEventsPostRequest is not found in the empty JSON string", ScenariosIdEventsPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScenariosIdEventsPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScenariosIdEventsPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ScenariosIdEventsPostRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if (!jsonObj.get("repeat_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repeat_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repeat_type").toString()));
      }
      // validate the required field `repeat_type`
      RepeatTypeEnum.validateJsonElement(jsonObj.get("repeat_type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScenariosIdEventsPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScenariosIdEventsPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScenariosIdEventsPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScenariosIdEventsPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ScenariosIdEventsPostRequest>() {
           @Override
           public void write(JsonWriter out, ScenariosIdEventsPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScenariosIdEventsPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScenariosIdEventsPostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScenariosIdEventsPostRequest
   * @throws IOException if the JSON string is invalid with respect to ScenariosIdEventsPostRequest
   */
  public static ScenariosIdEventsPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScenariosIdEventsPostRequest.class);
  }

  /**
   * Convert an instance of ScenariosIdEventsPostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

