/*
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UsersIdPutRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:36.319532-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UsersIdPutRequest {
  public static final String SERIALIZED_NAME_ALWAYS_SHOW_BASE_CURRENCY = "always_show_base_currency";
  @SerializedName(SERIALIZED_NAME_ALWAYS_SHOW_BASE_CURRENCY)
  private Boolean alwaysShowBaseCurrency;

  public static final String SERIALIZED_NAME_BASE_CURRENCY_CODE = "base_currency_code";
  @SerializedName(SERIALIZED_NAME_BASE_CURRENCY_CODE)
  private String baseCurrencyCode;

  public static final String SERIALIZED_NAME_BETA_USER = "beta_user";
  @SerializedName(SERIALIZED_NAME_BETA_USER)
  private Boolean betaUser;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TIME_ZONE = "time_zone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_WEEK_START_DAY = "week_start_day";
  @SerializedName(SERIALIZED_NAME_WEEK_START_DAY)
  private Integer weekStartDay;

  public UsersIdPutRequest() {
  }

  public UsersIdPutRequest alwaysShowBaseCurrency(Boolean alwaysShowBaseCurrency) {
    this.alwaysShowBaseCurrency = alwaysShowBaseCurrency;
    return this;
  }

  /**
   * Whether the user wishes to have all monetary values converted to their base currency.
   * @return alwaysShowBaseCurrency
   */
  @javax.annotation.Nullable
  public Boolean getAlwaysShowBaseCurrency() {
    return alwaysShowBaseCurrency;
  }

  public void setAlwaysShowBaseCurrency(Boolean alwaysShowBaseCurrency) {
    this.alwaysShowBaseCurrency = alwaysShowBaseCurrency;
  }


  public UsersIdPutRequest baseCurrencyCode(String baseCurrencyCode) {
    this.baseCurrencyCode = baseCurrencyCode;
    return this;
  }

  /**
   * A new base currency code for the user.
   * @return baseCurrencyCode
   */
  @javax.annotation.Nullable
  public String getBaseCurrencyCode() {
    return baseCurrencyCode;
  }

  public void setBaseCurrencyCode(String baseCurrencyCode) {
    this.baseCurrencyCode = baseCurrencyCode;
  }


  public UsersIdPutRequest betaUser(Boolean betaUser) {
    this.betaUser = betaUser;
    return this;
  }

  /**
   * Whether the user is a beta user, and wishes to try out new features.
   * @return betaUser
   */
  @javax.annotation.Nullable
  public Boolean getBetaUser() {
    return betaUser;
  }

  public void setBetaUser(Boolean betaUser) {
    this.betaUser = betaUser;
  }


  public UsersIdPutRequest email(String email) {
    this.email = email;
    return this;
  }

  /**
   * A new email address for the user.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public UsersIdPutRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A new name for the user.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UsersIdPutRequest timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * A new time zone for the user.
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public UsersIdPutRequest weekStartDay(Integer weekStartDay) {
    this.weekStartDay = weekStartDay;
    return this;
  }

  /**
   * The day of the week the user wishes their calendars to start on. A number between 0 and 6, where 0 is Sunday and 6 is Saturday.
   * @return weekStartDay
   */
  @javax.annotation.Nullable
  public Integer getWeekStartDay() {
    return weekStartDay;
  }

  public void setWeekStartDay(Integer weekStartDay) {
    this.weekStartDay = weekStartDay;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsersIdPutRequest usersIdPutRequest = (UsersIdPutRequest) o;
    return Objects.equals(this.alwaysShowBaseCurrency, usersIdPutRequest.alwaysShowBaseCurrency) &&
        Objects.equals(this.baseCurrencyCode, usersIdPutRequest.baseCurrencyCode) &&
        Objects.equals(this.betaUser, usersIdPutRequest.betaUser) &&
        Objects.equals(this.email, usersIdPutRequest.email) &&
        Objects.equals(this.name, usersIdPutRequest.name) &&
        Objects.equals(this.timeZone, usersIdPutRequest.timeZone) &&
        Objects.equals(this.weekStartDay, usersIdPutRequest.weekStartDay);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alwaysShowBaseCurrency, baseCurrencyCode, betaUser, email, name, timeZone, weekStartDay);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsersIdPutRequest {\n");
    sb.append("    alwaysShowBaseCurrency: ").append(toIndentedString(alwaysShowBaseCurrency)).append("\n");
    sb.append("    baseCurrencyCode: ").append(toIndentedString(baseCurrencyCode)).append("\n");
    sb.append("    betaUser: ").append(toIndentedString(betaUser)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    weekStartDay: ").append(toIndentedString(weekStartDay)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("always_show_base_currency");
    openapiFields.add("base_currency_code");
    openapiFields.add("beta_user");
    openapiFields.add("email");
    openapiFields.add("name");
    openapiFields.add("time_zone");
    openapiFields.add("week_start_day");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UsersIdPutRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UsersIdPutRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsersIdPutRequest is not found in the empty JSON string", UsersIdPutRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UsersIdPutRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UsersIdPutRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("base_currency_code") != null && !jsonObj.get("base_currency_code").isJsonNull()) && !jsonObj.get("base_currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base_currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base_currency_code").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("time_zone") != null && !jsonObj.get("time_zone").isJsonNull()) && !jsonObj.get("time_zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_zone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsersIdPutRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsersIdPutRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsersIdPutRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsersIdPutRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UsersIdPutRequest>() {
           @Override
           public void write(JsonWriter out, UsersIdPutRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UsersIdPutRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UsersIdPutRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UsersIdPutRequest
   * @throws IOException if the JSON string is invalid with respect to UsersIdPutRequest
   */
  public static UsersIdPutRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsersIdPutRequest.class);
  }

  /**
   * Convert an instance of UsersIdPutRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

