/*
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.TransactionAccount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Transaction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:36.319532-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Transaction {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_AMOUNT_IN_BASE_CURRENCY = "amount_in_base_currency";
  @SerializedName(SERIALIZED_NAME_AMOUNT_IN_BASE_CURRENCY)
  private BigDecimal amountInBaseCurrency;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private Category category;

  public static final String SERIALIZED_NAME_CHEQUE_NUMBER = "cheque_number";
  @SerializedName(SERIALIZED_NAME_CHEQUE_NUMBER)
  private String chequeNumber;

  public static final String SERIALIZED_NAME_CLOSING_BALANCE = "closing_balance";
  @SerializedName(SERIALIZED_NAME_CLOSING_BALANCE)
  private BigDecimal closingBalance;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_TRANSFER = "is_transfer";
  @SerializedName(SERIALIZED_NAME_IS_TRANSFER)
  private Boolean isTransfer;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEMO = "memo";
  @SerializedName(SERIALIZED_NAME_MEMO)
  private String memo;

  public static final String SERIALIZED_NAME_NEEDS_REVIEW = "needs_review";
  @SerializedName(SERIALIZED_NAME_NEEDS_REVIEW)
  private Boolean needsReview;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_ORIGINAL_PAYEE = "original_payee";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_PAYEE)
  private String originalPayee;

  public static final String SERIALIZED_NAME_PAYEE = "payee";
  @SerializedName(SERIALIZED_NAME_PAYEE)
  private String payee;

  /**
   * The status of the transaction. Pending transactions are temporary and may be superseded later by their posted counterparts, which are permanent.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PENDING("pending"),
    
    POSTED("posted");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TRANSACTION_ACCOUNT = "transaction_account";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ACCOUNT)
  private TransactionAccount transactionAccount;

  /**
   * Whether the transaction is a debit or a credit
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DEBIT("debit"),
    
    CREDIT("credit");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_UPLOAD_SOURCE = "upload_source";
  @SerializedName(SERIALIZED_NAME_UPLOAD_SOURCE)
  private String uploadSource;

  public Transaction() {
  }

  public Transaction amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nullable
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public Transaction amountInBaseCurrency(BigDecimal amountInBaseCurrency) {
    this.amountInBaseCurrency = amountInBaseCurrency;
    return this;
  }

  /**
   * The amount of the transaction in the user&#39;s base currency.
   * @return amountInBaseCurrency
   */
  @javax.annotation.Nullable
  public BigDecimal getAmountInBaseCurrency() {
    return amountInBaseCurrency;
  }

  public void setAmountInBaseCurrency(BigDecimal amountInBaseCurrency) {
    this.amountInBaseCurrency = amountInBaseCurrency;
  }


  public Transaction category(Category category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public Category getCategory() {
    return category;
  }

  public void setCategory(Category category) {
    this.category = category;
  }


  public Transaction chequeNumber(String chequeNumber) {
    this.chequeNumber = chequeNumber;
    return this;
  }

  /**
   * Get chequeNumber
   * @return chequeNumber
   */
  @javax.annotation.Nullable
  public String getChequeNumber() {
    return chequeNumber;
  }

  public void setChequeNumber(String chequeNumber) {
    this.chequeNumber = chequeNumber;
  }


  public Transaction closingBalance(BigDecimal closingBalance) {
    this.closingBalance = closingBalance;
    return this;
  }

  /**
   * The closing balance of the account at the transaction.
   * @return closingBalance
   */
  @javax.annotation.Nullable
  public BigDecimal getClosingBalance() {
    return closingBalance;
  }

  public void setClosingBalance(BigDecimal closingBalance) {
    this.closingBalance = closingBalance;
  }


  public Transaction createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * When the transaction was created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Transaction date(String date) {
    this.date = date;
    return this;
  }

  /**
   * The date the transaction took place.
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public Transaction id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * The unique identifier of the transaction.
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Transaction isTransfer(Boolean isTransfer) {
    this.isTransfer = isTransfer;
    return this;
  }

  /**
   * Whether the transaction is a transfer.
   * @return isTransfer
   */
  @javax.annotation.Nullable
  public Boolean getIsTransfer() {
    return isTransfer;
  }

  public void setIsTransfer(Boolean isTransfer) {
    this.isTransfer = isTransfer;
  }


  public Transaction labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public Transaction addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public Transaction memo(String memo) {
    this.memo = memo;
    return this;
  }

  /**
   * Get memo
   * @return memo
   */
  @javax.annotation.Nullable
  public String getMemo() {
    return memo;
  }

  public void setMemo(String memo) {
    this.memo = memo;
  }


  public Transaction needsReview(Boolean needsReview) {
    this.needsReview = needsReview;
    return this;
  }

  /**
   * Whether the transaction needs to be reviewed.
   * @return needsReview
   */
  @javax.annotation.Nullable
  public Boolean getNeedsReview() {
    return needsReview;
  }

  public void setNeedsReview(Boolean needsReview) {
    this.needsReview = needsReview;
  }


  public Transaction note(String note) {
    this.note = note;
    return this;
  }

  /**
   * Get note
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public Transaction originalPayee(String originalPayee) {
    this.originalPayee = originalPayee;
    return this;
  }

  /**
   * The payee the transaction was created with.
   * @return originalPayee
   */
  @javax.annotation.Nullable
  public String getOriginalPayee() {
    return originalPayee;
  }

  public void setOriginalPayee(String originalPayee) {
    this.originalPayee = originalPayee;
  }


  public Transaction payee(String payee) {
    this.payee = payee;
    return this;
  }

  /**
   * The payee/merchant of the transaction.
   * @return payee
   */
  @javax.annotation.Nullable
  public String getPayee() {
    return payee;
  }

  public void setPayee(String payee) {
    this.payee = payee;
  }


  public Transaction status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the transaction. Pending transactions are temporary and may be superseded later by their posted counterparts, which are permanent.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Transaction transactionAccount(TransactionAccount transactionAccount) {
    this.transactionAccount = transactionAccount;
    return this;
  }

  /**
   * Get transactionAccount
   * @return transactionAccount
   */
  @javax.annotation.Nullable
  public TransactionAccount getTransactionAccount() {
    return transactionAccount;
  }

  public void setTransactionAccount(TransactionAccount transactionAccount) {
    this.transactionAccount = transactionAccount;
  }


  public Transaction type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Whether the transaction is a debit or a credit
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Transaction updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * When the transaction was last updated.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Transaction uploadSource(String uploadSource) {
    this.uploadSource = uploadSource;
    return this;
  }

  /**
   * Where the transaction came from.
   * @return uploadSource
   */
  @javax.annotation.Nullable
  public String getUploadSource() {
    return uploadSource;
  }

  public void setUploadSource(String uploadSource) {
    this.uploadSource = uploadSource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transaction transaction = (Transaction) o;
    return Objects.equals(this.amount, transaction.amount) &&
        Objects.equals(this.amountInBaseCurrency, transaction.amountInBaseCurrency) &&
        Objects.equals(this.category, transaction.category) &&
        Objects.equals(this.chequeNumber, transaction.chequeNumber) &&
        Objects.equals(this.closingBalance, transaction.closingBalance) &&
        Objects.equals(this.createdAt, transaction.createdAt) &&
        Objects.equals(this.date, transaction.date) &&
        Objects.equals(this.id, transaction.id) &&
        Objects.equals(this.isTransfer, transaction.isTransfer) &&
        Objects.equals(this.labels, transaction.labels) &&
        Objects.equals(this.memo, transaction.memo) &&
        Objects.equals(this.needsReview, transaction.needsReview) &&
        Objects.equals(this.note, transaction.note) &&
        Objects.equals(this.originalPayee, transaction.originalPayee) &&
        Objects.equals(this.payee, transaction.payee) &&
        Objects.equals(this.status, transaction.status) &&
        Objects.equals(this.transactionAccount, transaction.transactionAccount) &&
        Objects.equals(this.type, transaction.type) &&
        Objects.equals(this.updatedAt, transaction.updatedAt) &&
        Objects.equals(this.uploadSource, transaction.uploadSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, amountInBaseCurrency, category, chequeNumber, closingBalance, createdAt, date, id, isTransfer, labels, memo, needsReview, note, originalPayee, payee, status, transactionAccount, type, updatedAt, uploadSource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transaction {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    amountInBaseCurrency: ").append(toIndentedString(amountInBaseCurrency)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    chequeNumber: ").append(toIndentedString(chequeNumber)).append("\n");
    sb.append("    closingBalance: ").append(toIndentedString(closingBalance)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isTransfer: ").append(toIndentedString(isTransfer)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    needsReview: ").append(toIndentedString(needsReview)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    originalPayee: ").append(toIndentedString(originalPayee)).append("\n");
    sb.append("    payee: ").append(toIndentedString(payee)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    transactionAccount: ").append(toIndentedString(transactionAccount)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    uploadSource: ").append(toIndentedString(uploadSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("amount_in_base_currency");
    openapiFields.add("category");
    openapiFields.add("cheque_number");
    openapiFields.add("closing_balance");
    openapiFields.add("created_at");
    openapiFields.add("date");
    openapiFields.add("id");
    openapiFields.add("is_transfer");
    openapiFields.add("labels");
    openapiFields.add("memo");
    openapiFields.add("needs_review");
    openapiFields.add("note");
    openapiFields.add("original_payee");
    openapiFields.add("payee");
    openapiFields.add("status");
    openapiFields.add("transaction_account");
    openapiFields.add("type");
    openapiFields.add("updated_at");
    openapiFields.add("upload_source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Transaction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Transaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Transaction is not found in the empty JSON string", Transaction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Transaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Transaction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        Category.validateJsonElement(jsonObj.get("category"));
      }
      if ((jsonObj.get("cheque_number") != null && !jsonObj.get("cheque_number").isJsonNull()) && !jsonObj.get("cheque_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cheque_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cheque_number").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull() && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      if ((jsonObj.get("memo") != null && !jsonObj.get("memo").isJsonNull()) && !jsonObj.get("memo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memo").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("original_payee") != null && !jsonObj.get("original_payee").isJsonNull()) && !jsonObj.get("original_payee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_payee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_payee").toString()));
      }
      if ((jsonObj.get("payee") != null && !jsonObj.get("payee").isJsonNull()) && !jsonObj.get("payee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payee").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `transaction_account`
      if (jsonObj.get("transaction_account") != null && !jsonObj.get("transaction_account").isJsonNull()) {
        TransactionAccount.validateJsonElement(jsonObj.get("transaction_account"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
      if ((jsonObj.get("upload_source") != null && !jsonObj.get("upload_source").isJsonNull()) && !jsonObj.get("upload_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upload_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upload_source").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Transaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Transaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Transaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Transaction.class));

       return (TypeAdapter<T>) new TypeAdapter<Transaction>() {
           @Override
           public void write(JsonWriter out, Transaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Transaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Transaction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Transaction
   * @throws IOException if the JSON string is invalid with respect to Transaction
   */
  public static Transaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Transaction.class);
  }

  /**
   * Convert an instance of Transaction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

