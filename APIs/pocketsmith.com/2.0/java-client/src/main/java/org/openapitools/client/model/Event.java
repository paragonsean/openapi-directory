/*
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.Scenario;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Event
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:36.319532-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Event {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_AMOUNT_IN_BASE_CURRENCY = "amount_in_base_currency";
  @SerializedName(SERIALIZED_NAME_AMOUNT_IN_BASE_CURRENCY)
  private BigDecimal amountInBaseCurrency;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private Category category;

  public static final String SERIALIZED_NAME_COLOUR = "colour";
  @SerializedName(SERIALIZED_NAME_COLOUR)
  private String colour;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency_code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INFINITE_SERIES = "infinite_series";
  @SerializedName(SERIALIZED_NAME_INFINITE_SERIES)
  private Boolean infiniteSeries;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_REPEAT_INTERVAL = "repeat_interval";
  @SerializedName(SERIALIZED_NAME_REPEAT_INTERVAL)
  private Integer repeatInterval;

  /**
   * The repeat type of the event.
   */
  @JsonAdapter(RepeatTypeEnum.Adapter.class)
  public enum RepeatTypeEnum {
    ONCE("once"),
    
    DAILY("daily"),
    
    WEEKLY("weekly"),
    
    FORTNIGHTLY("fortnightly"),
    
    MONTHLY("monthly"),
    
    YEARLY("yearly"),
    
    EACH_WEEKDAY("each weekday");

    private String value;

    RepeatTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RepeatTypeEnum fromValue(String value) {
      for (RepeatTypeEnum b : RepeatTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RepeatTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RepeatTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RepeatTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RepeatTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RepeatTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPEAT_TYPE = "repeat_type";
  @SerializedName(SERIALIZED_NAME_REPEAT_TYPE)
  private RepeatTypeEnum repeatType;

  public static final String SERIALIZED_NAME_SCENARIO = "scenario";
  @SerializedName(SERIALIZED_NAME_SCENARIO)
  private Scenario scenario;

  public static final String SERIALIZED_NAME_SERIES_ID = "series_id";
  @SerializedName(SERIALIZED_NAME_SERIES_ID)
  private Integer seriesId;

  public static final String SERIALIZED_NAME_SERIES_START_ID = "series_start_id";
  @SerializedName(SERIALIZED_NAME_SERIES_START_ID)
  private String seriesStartId;

  public Event() {
  }

  public Event amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The amount of the event.
   * @return amount
   */
  @javax.annotation.Nullable
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public Event amountInBaseCurrency(BigDecimal amountInBaseCurrency) {
    this.amountInBaseCurrency = amountInBaseCurrency;
    return this;
  }

  /**
   * The amount of the event in the user&#39;s base currency.
   * @return amountInBaseCurrency
   */
  @javax.annotation.Nullable
  public BigDecimal getAmountInBaseCurrency() {
    return amountInBaseCurrency;
  }

  public void setAmountInBaseCurrency(BigDecimal amountInBaseCurrency) {
    this.amountInBaseCurrency = amountInBaseCurrency;
  }


  public Event category(Category category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public Category getCategory() {
    return category;
  }

  public void setCategory(Category category) {
    this.category = category;
  }


  public Event colour(String colour) {
    this.colour = colour;
    return this;
  }

  /**
   * The CSS hex-style colour of the event.
   * @return colour
   */
  @javax.annotation.Nullable
  public String getColour() {
    return colour;
  }

  public void setColour(String colour) {
    this.colour = colour;
  }


  public Event currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * The currency code of the event.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public Event date(String date) {
    this.date = date;
    return this;
  }

  /**
   * The date of the event.
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public Event id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique identifier of the event.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Event infiniteSeries(Boolean infiniteSeries) {
    this.infiniteSeries = infiniteSeries;
    return this;
  }

  /**
   * Whether the event repeats and does not have an end date.
   * @return infiniteSeries
   */
  @javax.annotation.Nullable
  public Boolean getInfiniteSeries() {
    return infiniteSeries;
  }

  public void setInfiniteSeries(Boolean infiniteSeries) {
    this.infiniteSeries = infiniteSeries;
  }


  public Event note(String note) {
    this.note = note;
    return this;
  }

  /**
   * The note of the event.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public Event repeatInterval(Integer repeatInterval) {
    this.repeatInterval = repeatInterval;
    return this;
  }

  /**
   * The repeat interval of how often the event takes place.
   * @return repeatInterval
   */
  @javax.annotation.Nullable
  public Integer getRepeatInterval() {
    return repeatInterval;
  }

  public void setRepeatInterval(Integer repeatInterval) {
    this.repeatInterval = repeatInterval;
  }


  public Event repeatType(RepeatTypeEnum repeatType) {
    this.repeatType = repeatType;
    return this;
  }

  /**
   * The repeat type of the event.
   * @return repeatType
   */
  @javax.annotation.Nullable
  public RepeatTypeEnum getRepeatType() {
    return repeatType;
  }

  public void setRepeatType(RepeatTypeEnum repeatType) {
    this.repeatType = repeatType;
  }


  public Event scenario(Scenario scenario) {
    this.scenario = scenario;
    return this;
  }

  /**
   * Get scenario
   * @return scenario
   */
  @javax.annotation.Nullable
  public Scenario getScenario() {
    return scenario;
  }

  public void setScenario(Scenario scenario) {
    this.scenario = scenario;
  }


  public Event seriesId(Integer seriesId) {
    this.seriesId = seriesId;
    return this;
  }

  /**
   * The unique identifier of the series that the event belongs to.
   * @return seriesId
   */
  @javax.annotation.Nullable
  public Integer getSeriesId() {
    return seriesId;
  }

  public void setSeriesId(Integer seriesId) {
    this.seriesId = seriesId;
  }


  public Event seriesStartId(String seriesStartId) {
    this.seriesStartId = seriesStartId;
    return this;
  }

  /**
   * The unique identifier of the series followed by the series&#39;s start date.
   * @return seriesStartId
   */
  @javax.annotation.Nullable
  public String getSeriesStartId() {
    return seriesStartId;
  }

  public void setSeriesStartId(String seriesStartId) {
    this.seriesStartId = seriesStartId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Event event = (Event) o;
    return Objects.equals(this.amount, event.amount) &&
        Objects.equals(this.amountInBaseCurrency, event.amountInBaseCurrency) &&
        Objects.equals(this.category, event.category) &&
        Objects.equals(this.colour, event.colour) &&
        Objects.equals(this.currencyCode, event.currencyCode) &&
        Objects.equals(this.date, event.date) &&
        Objects.equals(this.id, event.id) &&
        Objects.equals(this.infiniteSeries, event.infiniteSeries) &&
        Objects.equals(this.note, event.note) &&
        Objects.equals(this.repeatInterval, event.repeatInterval) &&
        Objects.equals(this.repeatType, event.repeatType) &&
        Objects.equals(this.scenario, event.scenario) &&
        Objects.equals(this.seriesId, event.seriesId) &&
        Objects.equals(this.seriesStartId, event.seriesStartId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, amountInBaseCurrency, category, colour, currencyCode, date, id, infiniteSeries, note, repeatInterval, repeatType, scenario, seriesId, seriesStartId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Event {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    amountInBaseCurrency: ").append(toIndentedString(amountInBaseCurrency)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    colour: ").append(toIndentedString(colour)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    infiniteSeries: ").append(toIndentedString(infiniteSeries)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    repeatInterval: ").append(toIndentedString(repeatInterval)).append("\n");
    sb.append("    repeatType: ").append(toIndentedString(repeatType)).append("\n");
    sb.append("    scenario: ").append(toIndentedString(scenario)).append("\n");
    sb.append("    seriesId: ").append(toIndentedString(seriesId)).append("\n");
    sb.append("    seriesStartId: ").append(toIndentedString(seriesStartId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("amount_in_base_currency");
    openapiFields.add("category");
    openapiFields.add("colour");
    openapiFields.add("currency_code");
    openapiFields.add("date");
    openapiFields.add("id");
    openapiFields.add("infinite_series");
    openapiFields.add("note");
    openapiFields.add("repeat_interval");
    openapiFields.add("repeat_type");
    openapiFields.add("scenario");
    openapiFields.add("series_id");
    openapiFields.add("series_start_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Event
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Event.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Event is not found in the empty JSON string", Event.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Event.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Event` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        Category.validateJsonElement(jsonObj.get("category"));
      }
      if ((jsonObj.get("colour") != null && !jsonObj.get("colour").isJsonNull()) && !jsonObj.get("colour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colour").toString()));
      }
      if ((jsonObj.get("currency_code") != null && !jsonObj.get("currency_code").isJsonNull()) && !jsonObj.get("currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_code").toString()));
      }
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("repeat_type") != null && !jsonObj.get("repeat_type").isJsonNull()) && !jsonObj.get("repeat_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repeat_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repeat_type").toString()));
      }
      // validate the optional field `repeat_type`
      if (jsonObj.get("repeat_type") != null && !jsonObj.get("repeat_type").isJsonNull()) {
        RepeatTypeEnum.validateJsonElement(jsonObj.get("repeat_type"));
      }
      // validate the optional field `scenario`
      if (jsonObj.get("scenario") != null && !jsonObj.get("scenario").isJsonNull()) {
        Scenario.validateJsonElement(jsonObj.get("scenario"));
      }
      if ((jsonObj.get("series_start_id") != null && !jsonObj.get("series_start_id").isJsonNull()) && !jsonObj.get("series_start_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `series_start_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("series_start_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Event.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Event' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Event> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Event.class));

       return (TypeAdapter<T>) new TypeAdapter<Event>() {
           @Override
           public void write(JsonWriter out, Event value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Event read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Event given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Event
   * @throws IOException if the JSON string is invalid with respect to Event
   */
  public static Event fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Event.class);
  }

  /**
   * Convert an instance of Event to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

