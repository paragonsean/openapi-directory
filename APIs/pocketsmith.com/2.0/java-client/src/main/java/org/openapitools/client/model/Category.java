/*
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Category
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:36.319532-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Category {
  public static final String SERIALIZED_NAME_CHILDREN = "children";
  @SerializedName(SERIALIZED_NAME_CHILDREN)
  private List<Category> children = new ArrayList<>();

  public static final String SERIALIZED_NAME_COLOUR = "colour";
  @SerializedName(SERIALIZED_NAME_COLOUR)
  private String colour;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_BILL = "is_bill";
  @SerializedName(SERIALIZED_NAME_IS_BILL)
  private Boolean isBill;

  public static final String SERIALIZED_NAME_IS_TRANSFER = "is_transfer";
  @SerializedName(SERIALIZED_NAME_IS_TRANSFER)
  private Boolean isTransfer;

  public static final String SERIALIZED_NAME_PARENT_ID = "parent_id";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private Integer parentId;

  /**
   * How the category&#39;s refunds or deductions should be reported on.
   */
  @JsonAdapter(RefundBehaviourEnum.Adapter.class)
  public enum RefundBehaviourEnum {
    DEBITS_ARE_DEDUCTIONS("debits_are_deductions"),
    
    CREDITS_ARE_REFUNDS("credits_are_refunds");

    private String value;

    RefundBehaviourEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RefundBehaviourEnum fromValue(String value) {
      for (RefundBehaviourEnum b : RefundBehaviourEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RefundBehaviourEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RefundBehaviourEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RefundBehaviourEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RefundBehaviourEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RefundBehaviourEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REFUND_BEHAVIOUR = "refund_behaviour";
  @SerializedName(SERIALIZED_NAME_REFUND_BEHAVIOUR)
  private RefundBehaviourEnum refundBehaviour;

  public static final String SERIALIZED_NAME_ROLL_UP = "roll_up";
  @SerializedName(SERIALIZED_NAME_ROLL_UP)
  private Boolean rollUp;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public Category() {
  }

  public Category children(List<Category> children) {
    this.children = children;
    return this;
  }

  public Category addChildrenItem(Category childrenItem) {
    if (this.children == null) {
      this.children = new ArrayList<>();
    }
    this.children.add(childrenItem);
    return this;
  }

  /**
   * The category&#39;s child categories.
   * @return children
   */
  @javax.annotation.Nullable
  public List<Category> getChildren() {
    return children;
  }

  public void setChildren(List<Category> children) {
    this.children = children;
  }


  public Category colour(String colour) {
    this.colour = colour;
    return this;
  }

  /**
   * The colour for the category.
   * @return colour
   */
  @javax.annotation.Nullable
  public String getColour() {
    return colour;
  }

  public void setColour(String colour) {
    this.colour = colour;
  }


  public Category createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * When the category was created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Category id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * The unique identifier of the category.
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Category isBill(Boolean isBill) {
    this.isBill = isBill;
    return this;
  }

  /**
   * Whether the category is a bill category. A bill category is when budgeted amounts are normally spent at once, instead of spread across a budgeting period. This category will be included in the bill reminder email when set to true.
   * @return isBill
   */
  @javax.annotation.Nullable
  public Boolean getIsBill() {
    return isBill;
  }

  public void setIsBill(Boolean isBill) {
    this.isBill = isBill;
  }


  public Category isTransfer(Boolean isTransfer) {
    this.isTransfer = isTransfer;
    return this;
  }

  /**
   * Whether this category has been marked as a transfer category.
   * @return isTransfer
   */
  @javax.annotation.Nullable
  public Boolean getIsTransfer() {
    return isTransfer;
  }

  public void setIsTransfer(Boolean isTransfer) {
    this.isTransfer = isTransfer;
  }


  public Category parentId(Integer parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * The unique identifier of the parent category of this category, or null if this category has no parent (i.e. is a top-level category)
   * @return parentId
   */
  @javax.annotation.Nullable
  public Integer getParentId() {
    return parentId;
  }

  public void setParentId(Integer parentId) {
    this.parentId = parentId;
  }


  public Category refundBehaviour(RefundBehaviourEnum refundBehaviour) {
    this.refundBehaviour = refundBehaviour;
    return this;
  }

  /**
   * How the category&#39;s refunds or deductions should be reported on.
   * @return refundBehaviour
   */
  @javax.annotation.Nullable
  public RefundBehaviourEnum getRefundBehaviour() {
    return refundBehaviour;
  }

  public void setRefundBehaviour(RefundBehaviourEnum refundBehaviour) {
    this.refundBehaviour = refundBehaviour;
  }


  public Category rollUp(Boolean rollUp) {
    this.rollUp = rollUp;
    return this;
  }

  /**
   * Whether the category&#39;s budget is rolled up into its parent category, if a parent category is present.
   * @return rollUp
   */
  @javax.annotation.Nullable
  public Boolean getRollUp() {
    return rollUp;
  }

  public void setRollUp(Boolean rollUp) {
    this.rollUp = rollUp;
  }


  public Category title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the category.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Category updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * When the category was last updated.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Category category = (Category) o;
    return Objects.equals(this.children, category.children) &&
        Objects.equals(this.colour, category.colour) &&
        Objects.equals(this.createdAt, category.createdAt) &&
        Objects.equals(this.id, category.id) &&
        Objects.equals(this.isBill, category.isBill) &&
        Objects.equals(this.isTransfer, category.isTransfer) &&
        Objects.equals(this.parentId, category.parentId) &&
        Objects.equals(this.refundBehaviour, category.refundBehaviour) &&
        Objects.equals(this.rollUp, category.rollUp) &&
        Objects.equals(this.title, category.title) &&
        Objects.equals(this.updatedAt, category.updatedAt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(children, colour, createdAt, id, isBill, isTransfer, parentId, refundBehaviour, rollUp, title, updatedAt);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Category {\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    colour: ").append(toIndentedString(colour)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isBill: ").append(toIndentedString(isBill)).append("\n");
    sb.append("    isTransfer: ").append(toIndentedString(isTransfer)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    refundBehaviour: ").append(toIndentedString(refundBehaviour)).append("\n");
    sb.append("    rollUp: ").append(toIndentedString(rollUp)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("children");
    openapiFields.add("colour");
    openapiFields.add("created_at");
    openapiFields.add("id");
    openapiFields.add("is_bill");
    openapiFields.add("is_transfer");
    openapiFields.add("parent_id");
    openapiFields.add("refund_behaviour");
    openapiFields.add("roll_up");
    openapiFields.add("title");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Category
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Category.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Category is not found in the empty JSON string", Category.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Category.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Category` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("children") != null && !jsonObj.get("children").isJsonNull()) {
        JsonArray jsonArraychildren = jsonObj.getAsJsonArray("children");
        if (jsonArraychildren != null) {
          // ensure the json data is an array
          if (!jsonObj.get("children").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `children` to be an array in the JSON string but got `%s`", jsonObj.get("children").toString()));
          }

          // validate the optional field `children` (array)
          for (int i = 0; i < jsonArraychildren.size(); i++) {
            Category.validateJsonElement(jsonArraychildren.get(i));
          };
        }
      }
      if ((jsonObj.get("colour") != null && !jsonObj.get("colour").isJsonNull()) && !jsonObj.get("colour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colour").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("refund_behaviour") != null && !jsonObj.get("refund_behaviour").isJsonNull()) && !jsonObj.get("refund_behaviour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refund_behaviour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refund_behaviour").toString()));
      }
      // validate the optional field `refund_behaviour`
      if (jsonObj.get("refund_behaviour") != null && !jsonObj.get("refund_behaviour").isJsonNull()) {
        RefundBehaviourEnum.validateJsonElement(jsonObj.get("refund_behaviour"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Category.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Category' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Category> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Category.class));

       return (TypeAdapter<T>) new TypeAdapter<Category>() {
           @Override
           public void write(JsonWriter out, Category value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Category read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Category given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Category
   * @throws IOException if the JSON string is invalid with respect to Category
   */
  public static Category fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Category.class);
  }

  /**
   * Convert an instance of Category to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

