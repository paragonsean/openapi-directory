/*
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.Transaction;
import org.openapitools.client.model.TransactionAccountsIdTransactionsPostRequest;
import org.openapitools.client.model.TransactionsIdPutRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accountsIdTransactionsGet
     * @param id The unique identifier of the account. (required)
     * @param startDate Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user&#39;s subscription. (optional)
     * @param endDate Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today&#39;s date. (optional)
     * @param updatedSince Limit to transactions updated since an ISO 8601 timestamp. (optional)
     * @param uncategorised Limit to uncategorised transactions. (optional)
     * @param type Limit to transactions of this type. (optional)
     * @param needsReview Limit to transactions that need to be reviewed. (optional)
     * @param search Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format. (optional)
     * @param page Choose a particular page of the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsIdTransactionsGetCall(Integer id, String startDate, String endDate, String updatedSince, Integer uncategorised, String type, Integer needsReview, String search, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{id}/transactions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (updatedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_since", updatedSince));
        }

        if (uncategorised != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uncategorised", uncategorised));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (needsReview != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("needs_review", needsReview));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developerKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsIdTransactionsGetValidateBeforeCall(Integer id, String startDate, String endDate, String updatedSince, Integer uncategorised, String type, Integer needsReview, String search, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling accountsIdTransactionsGet(Async)");
        }

        return accountsIdTransactionsGetCall(id, startDate, endDate, updatedSince, uncategorised, type, needsReview, search, page, _callback);

    }

    /**
     * List transactions in account
     * Lists transactions belonging to an account by its ID.
     * @param id The unique identifier of the account. (required)
     * @param startDate Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user&#39;s subscription. (optional)
     * @param endDate Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today&#39;s date. (optional)
     * @param updatedSince Limit to transactions updated since an ISO 8601 timestamp. (optional)
     * @param uncategorised Limit to uncategorised transactions. (optional)
     * @param type Limit to transactions of this type. (optional)
     * @param needsReview Limit to transactions that need to be reviewed. (optional)
     * @param search Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format. (optional)
     * @param page Choose a particular page of the results. (optional)
     * @return List&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Transaction> accountsIdTransactionsGet(Integer id, String startDate, String endDate, String updatedSince, Integer uncategorised, String type, Integer needsReview, String search, Integer page) throws ApiException {
        ApiResponse<List<Transaction>> localVarResp = accountsIdTransactionsGetWithHttpInfo(id, startDate, endDate, updatedSince, uncategorised, type, needsReview, search, page);
        return localVarResp.getData();
    }

    /**
     * List transactions in account
     * Lists transactions belonging to an account by its ID.
     * @param id The unique identifier of the account. (required)
     * @param startDate Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user&#39;s subscription. (optional)
     * @param endDate Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today&#39;s date. (optional)
     * @param updatedSince Limit to transactions updated since an ISO 8601 timestamp. (optional)
     * @param uncategorised Limit to uncategorised transactions. (optional)
     * @param type Limit to transactions of this type. (optional)
     * @param needsReview Limit to transactions that need to be reviewed. (optional)
     * @param search Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format. (optional)
     * @param page Choose a particular page of the results. (optional)
     * @return ApiResponse&lt;List&lt;Transaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Transaction>> accountsIdTransactionsGetWithHttpInfo(Integer id, String startDate, String endDate, String updatedSince, Integer uncategorised, String type, Integer needsReview, String search, Integer page) throws ApiException {
        okhttp3.Call localVarCall = accountsIdTransactionsGetValidateBeforeCall(id, startDate, endDate, updatedSince, uncategorised, type, needsReview, search, page, null);
        Type localVarReturnType = new TypeToken<List<Transaction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List transactions in account (asynchronously)
     * Lists transactions belonging to an account by its ID.
     * @param id The unique identifier of the account. (required)
     * @param startDate Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user&#39;s subscription. (optional)
     * @param endDate Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today&#39;s date. (optional)
     * @param updatedSince Limit to transactions updated since an ISO 8601 timestamp. (optional)
     * @param uncategorised Limit to uncategorised transactions. (optional)
     * @param type Limit to transactions of this type. (optional)
     * @param needsReview Limit to transactions that need to be reviewed. (optional)
     * @param search Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format. (optional)
     * @param page Choose a particular page of the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsIdTransactionsGetAsync(Integer id, String startDate, String endDate, String updatedSince, Integer uncategorised, String type, Integer needsReview, String search, Integer page, final ApiCallback<List<Transaction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsIdTransactionsGetValidateBeforeCall(id, startDate, endDate, updatedSince, uncategorised, type, needsReview, search, page, _callback);
        Type localVarReturnType = new TypeToken<List<Transaction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesIdTransactionsGet
     * @param id A comma-separated list of category IDs. (required)
     * @param startDate Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user&#39;s subscription. (optional)
     * @param endDate Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today&#39;s date. (optional)
     * @param updatedSince Limit to transactions updated since an ISO 8601 timestamp. (optional)
     * @param uncategorised Limit to uncategorised transactions. (optional)
     * @param type Limit to transactions of this type. (optional)
     * @param needsReview Limit to transactions that need to be reviewed. (optional)
     * @param search Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format. (optional)
     * @param page Choose a particular page of the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesIdTransactionsGetCall(String id, String startDate, String endDate, String updatedSince, Integer uncategorised, String type, Integer needsReview, String search, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{id}/transactions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (updatedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_since", updatedSince));
        }

        if (uncategorised != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uncategorised", uncategorised));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (needsReview != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("needs_review", needsReview));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developerKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesIdTransactionsGetValidateBeforeCall(String id, String startDate, String endDate, String updatedSince, Integer uncategorised, String type, Integer needsReview, String search, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling categoriesIdTransactionsGet(Async)");
        }

        return categoriesIdTransactionsGetCall(id, startDate, endDate, updatedSince, uncategorised, type, needsReview, search, page, _callback);

    }

    /**
     * List transactions in categories
     * Lists transactions belonging to one or more categories by their IDs.
     * @param id A comma-separated list of category IDs. (required)
     * @param startDate Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user&#39;s subscription. (optional)
     * @param endDate Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today&#39;s date. (optional)
     * @param updatedSince Limit to transactions updated since an ISO 8601 timestamp. (optional)
     * @param uncategorised Limit to uncategorised transactions. (optional)
     * @param type Limit to transactions of this type. (optional)
     * @param needsReview Limit to transactions that need to be reviewed. (optional)
     * @param search Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format. (optional)
     * @param page Choose a particular page of the results. (optional)
     * @return List&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Transaction> categoriesIdTransactionsGet(String id, String startDate, String endDate, String updatedSince, Integer uncategorised, String type, Integer needsReview, String search, Integer page) throws ApiException {
        ApiResponse<List<Transaction>> localVarResp = categoriesIdTransactionsGetWithHttpInfo(id, startDate, endDate, updatedSince, uncategorised, type, needsReview, search, page);
        return localVarResp.getData();
    }

    /**
     * List transactions in categories
     * Lists transactions belonging to one or more categories by their IDs.
     * @param id A comma-separated list of category IDs. (required)
     * @param startDate Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user&#39;s subscription. (optional)
     * @param endDate Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today&#39;s date. (optional)
     * @param updatedSince Limit to transactions updated since an ISO 8601 timestamp. (optional)
     * @param uncategorised Limit to uncategorised transactions. (optional)
     * @param type Limit to transactions of this type. (optional)
     * @param needsReview Limit to transactions that need to be reviewed. (optional)
     * @param search Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format. (optional)
     * @param page Choose a particular page of the results. (optional)
     * @return ApiResponse&lt;List&lt;Transaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Transaction>> categoriesIdTransactionsGetWithHttpInfo(String id, String startDate, String endDate, String updatedSince, Integer uncategorised, String type, Integer needsReview, String search, Integer page) throws ApiException {
        okhttp3.Call localVarCall = categoriesIdTransactionsGetValidateBeforeCall(id, startDate, endDate, updatedSince, uncategorised, type, needsReview, search, page, null);
        Type localVarReturnType = new TypeToken<List<Transaction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List transactions in categories (asynchronously)
     * Lists transactions belonging to one or more categories by their IDs.
     * @param id A comma-separated list of category IDs. (required)
     * @param startDate Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user&#39;s subscription. (optional)
     * @param endDate Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today&#39;s date. (optional)
     * @param updatedSince Limit to transactions updated since an ISO 8601 timestamp. (optional)
     * @param uncategorised Limit to uncategorised transactions. (optional)
     * @param type Limit to transactions of this type. (optional)
     * @param needsReview Limit to transactions that need to be reviewed. (optional)
     * @param search Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format. (optional)
     * @param page Choose a particular page of the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesIdTransactionsGetAsync(String id, String startDate, String endDate, String updatedSince, Integer uncategorised, String type, Integer needsReview, String search, Integer page, final ApiCallback<List<Transaction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesIdTransactionsGetValidateBeforeCall(id, startDate, endDate, updatedSince, uncategorised, type, needsReview, search, page, _callback);
        Type localVarReturnType = new TypeToken<List<Transaction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionAccountsIdTransactionsGet
     * @param id The unique identifier of the transaction account. (required)
     * @param startDate Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user&#39;s subscription. (optional)
     * @param endDate Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today&#39;s date. (optional)
     * @param updatedSince Limit to transactions updated since an ISO 8601 timestamp. (optional)
     * @param uncategorised Limit to uncategorised transactions. (optional)
     * @param type Limit to transactions of this type. (optional)
     * @param needsReview Limit to transactions that need to be reviewed. (optional)
     * @param search Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format. (optional)
     * @param page Choose a particular page of the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionAccountsIdTransactionsGetCall(Integer id, String startDate, String endDate, String updatedSince, Integer uncategorised, String type, Integer needsReview, String search, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transaction_accounts/{id}/transactions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (updatedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_since", updatedSince));
        }

        if (uncategorised != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uncategorised", uncategorised));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (needsReview != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("needs_review", needsReview));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developerKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionAccountsIdTransactionsGetValidateBeforeCall(Integer id, String startDate, String endDate, String updatedSince, Integer uncategorised, String type, Integer needsReview, String search, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling transactionAccountsIdTransactionsGet(Async)");
        }

        return transactionAccountsIdTransactionsGetCall(id, startDate, endDate, updatedSince, uncategorised, type, needsReview, search, page, _callback);

    }

    /**
     * List transactions in transaction account
     * Lists transactions belonging to a transaction account by its ID.
     * @param id The unique identifier of the transaction account. (required)
     * @param startDate Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user&#39;s subscription. (optional)
     * @param endDate Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today&#39;s date. (optional)
     * @param updatedSince Limit to transactions updated since an ISO 8601 timestamp. (optional)
     * @param uncategorised Limit to uncategorised transactions. (optional)
     * @param type Limit to transactions of this type. (optional)
     * @param needsReview Limit to transactions that need to be reviewed. (optional)
     * @param search Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format. (optional)
     * @param page Choose a particular page of the results. (optional)
     * @return List&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Transaction> transactionAccountsIdTransactionsGet(Integer id, String startDate, String endDate, String updatedSince, Integer uncategorised, String type, Integer needsReview, String search, Integer page) throws ApiException {
        ApiResponse<List<Transaction>> localVarResp = transactionAccountsIdTransactionsGetWithHttpInfo(id, startDate, endDate, updatedSince, uncategorised, type, needsReview, search, page);
        return localVarResp.getData();
    }

    /**
     * List transactions in transaction account
     * Lists transactions belonging to a transaction account by its ID.
     * @param id The unique identifier of the transaction account. (required)
     * @param startDate Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user&#39;s subscription. (optional)
     * @param endDate Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today&#39;s date. (optional)
     * @param updatedSince Limit to transactions updated since an ISO 8601 timestamp. (optional)
     * @param uncategorised Limit to uncategorised transactions. (optional)
     * @param type Limit to transactions of this type. (optional)
     * @param needsReview Limit to transactions that need to be reviewed. (optional)
     * @param search Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format. (optional)
     * @param page Choose a particular page of the results. (optional)
     * @return ApiResponse&lt;List&lt;Transaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Transaction>> transactionAccountsIdTransactionsGetWithHttpInfo(Integer id, String startDate, String endDate, String updatedSince, Integer uncategorised, String type, Integer needsReview, String search, Integer page) throws ApiException {
        okhttp3.Call localVarCall = transactionAccountsIdTransactionsGetValidateBeforeCall(id, startDate, endDate, updatedSince, uncategorised, type, needsReview, search, page, null);
        Type localVarReturnType = new TypeToken<List<Transaction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List transactions in transaction account (asynchronously)
     * Lists transactions belonging to a transaction account by its ID.
     * @param id The unique identifier of the transaction account. (required)
     * @param startDate Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user&#39;s subscription. (optional)
     * @param endDate Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today&#39;s date. (optional)
     * @param updatedSince Limit to transactions updated since an ISO 8601 timestamp. (optional)
     * @param uncategorised Limit to uncategorised transactions. (optional)
     * @param type Limit to transactions of this type. (optional)
     * @param needsReview Limit to transactions that need to be reviewed. (optional)
     * @param search Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format. (optional)
     * @param page Choose a particular page of the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionAccountsIdTransactionsGetAsync(Integer id, String startDate, String endDate, String updatedSince, Integer uncategorised, String type, Integer needsReview, String search, Integer page, final ApiCallback<List<Transaction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionAccountsIdTransactionsGetValidateBeforeCall(id, startDate, endDate, updatedSince, uncategorised, type, needsReview, search, page, _callback);
        Type localVarReturnType = new TypeToken<List<Transaction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionAccountsIdTransactionsPost
     * @param id The unique identifier of the transaction account. (required)
     * @param transactionAccountsIdTransactionsPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionAccountsIdTransactionsPostCall(Integer id, TransactionAccountsIdTransactionsPostRequest transactionAccountsIdTransactionsPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionAccountsIdTransactionsPostRequest;

        // create path and map variables
        String localVarPath = "/transaction_accounts/{id}/transactions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developerKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionAccountsIdTransactionsPostValidateBeforeCall(Integer id, TransactionAccountsIdTransactionsPostRequest transactionAccountsIdTransactionsPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling transactionAccountsIdTransactionsPost(Async)");
        }

        return transactionAccountsIdTransactionsPostCall(id, transactionAccountsIdTransactionsPostRequest, _callback);

    }

    /**
     * Create a transaction in transaction account
     * Creates a transaction in a transaction account by its ID.
     * @param id The unique identifier of the transaction account. (required)
     * @param transactionAccountsIdTransactionsPostRequest  (optional)
     * @return Transaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Transaction transactionAccountsIdTransactionsPost(Integer id, TransactionAccountsIdTransactionsPostRequest transactionAccountsIdTransactionsPostRequest) throws ApiException {
        ApiResponse<Transaction> localVarResp = transactionAccountsIdTransactionsPostWithHttpInfo(id, transactionAccountsIdTransactionsPostRequest);
        return localVarResp.getData();
    }

    /**
     * Create a transaction in transaction account
     * Creates a transaction in a transaction account by its ID.
     * @param id The unique identifier of the transaction account. (required)
     * @param transactionAccountsIdTransactionsPostRequest  (optional)
     * @return ApiResponse&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Transaction> transactionAccountsIdTransactionsPostWithHttpInfo(Integer id, TransactionAccountsIdTransactionsPostRequest transactionAccountsIdTransactionsPostRequest) throws ApiException {
        okhttp3.Call localVarCall = transactionAccountsIdTransactionsPostValidateBeforeCall(id, transactionAccountsIdTransactionsPostRequest, null);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a transaction in transaction account (asynchronously)
     * Creates a transaction in a transaction account by its ID.
     * @param id The unique identifier of the transaction account. (required)
     * @param transactionAccountsIdTransactionsPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionAccountsIdTransactionsPostAsync(Integer id, TransactionAccountsIdTransactionsPostRequest transactionAccountsIdTransactionsPostRequest, final ApiCallback<Transaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionAccountsIdTransactionsPostValidateBeforeCall(id, transactionAccountsIdTransactionsPostRequest, _callback);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsIdDelete
     * @param id The unique identifier of the transaction. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsIdDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developerKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsIdDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling transactionsIdDelete(Async)");
        }

        return transactionsIdDeleteCall(id, _callback);

    }

    /**
     * Delete transaction
     * Deletes a transaction and all its data by ID.
     * @param id The unique identifier of the transaction. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void transactionsIdDelete(Integer id) throws ApiException {
        transactionsIdDeleteWithHttpInfo(id);
    }

    /**
     * Delete transaction
     * Deletes a transaction and all its data by ID.
     * @param id The unique identifier of the transaction. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> transactionsIdDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = transactionsIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete transaction (asynchronously)
     * Deletes a transaction and all its data by ID.
     * @param id The unique identifier of the transaction. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsIdDeleteAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsIdGet
     * @param id The unique identifier of the transaction. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developerKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling transactionsIdGet(Async)");
        }

        return transactionsIdGetCall(id, _callback);

    }

    /**
     * Get a transaction
     * Gets a transaction by its ID.
     * @param id The unique identifier of the transaction. (required)
     * @return Transaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Transaction transactionsIdGet(Integer id) throws ApiException {
        ApiResponse<Transaction> localVarResp = transactionsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a transaction
     * Gets a transaction by its ID.
     * @param id The unique identifier of the transaction. (required)
     * @return ApiResponse&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Transaction> transactionsIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = transactionsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a transaction (asynchronously)
     * Gets a transaction by its ID.
     * @param id The unique identifier of the transaction. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsIdGetAsync(Integer id, final ApiCallback<Transaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsIdPut
     * @param id The unique identifier of the transaction. (required)
     * @param transactionsIdPutRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsIdPutCall(Integer id, TransactionsIdPutRequest transactionsIdPutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionsIdPutRequest;

        // create path and map variables
        String localVarPath = "/transactions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developerKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsIdPutValidateBeforeCall(Integer id, TransactionsIdPutRequest transactionsIdPutRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling transactionsIdPut(Async)");
        }

        return transactionsIdPutCall(id, transactionsIdPutRequest, _callback);

    }

    /**
     * Update a transaction
     * Updates a transaction by its ID.
     * @param id The unique identifier of the transaction. (required)
     * @param transactionsIdPutRequest  (optional)
     * @return Transaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Transaction transactionsIdPut(Integer id, TransactionsIdPutRequest transactionsIdPutRequest) throws ApiException {
        ApiResponse<Transaction> localVarResp = transactionsIdPutWithHttpInfo(id, transactionsIdPutRequest);
        return localVarResp.getData();
    }

    /**
     * Update a transaction
     * Updates a transaction by its ID.
     * @param id The unique identifier of the transaction. (required)
     * @param transactionsIdPutRequest  (optional)
     * @return ApiResponse&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Transaction> transactionsIdPutWithHttpInfo(Integer id, TransactionsIdPutRequest transactionsIdPutRequest) throws ApiException {
        okhttp3.Call localVarCall = transactionsIdPutValidateBeforeCall(id, transactionsIdPutRequest, null);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a transaction (asynchronously)
     * Updates a transaction by its ID.
     * @param id The unique identifier of the transaction. (required)
     * @param transactionsIdPutRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsIdPutAsync(Integer id, TransactionsIdPutRequest transactionsIdPutRequest, final ApiCallback<Transaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsIdPutValidateBeforeCall(id, transactionsIdPutRequest, _callback);
        Type localVarReturnType = new TypeToken<Transaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersIdTransactionsGet
     * @param id The unique identifier of the account. (required)
     * @param startDate Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user&#39;s subscription. (optional)
     * @param endDate Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today&#39;s date. (optional)
     * @param updatedSince Limit to transactions updated since an ISO 8601 timestamp. (optional)
     * @param uncategorised Limit to uncategorised transactions. (optional)
     * @param type Limit to transactions of this type. (optional)
     * @param needsReview Limit to transactions that need to be reviewed. (optional)
     * @param search Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format. (optional)
     * @param page Choose a particular page of the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersIdTransactionsGetCall(Integer id, String startDate, String endDate, String updatedSince, Integer uncategorised, String type, Integer needsReview, String search, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{id}/transactions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (updatedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_since", updatedSince));
        }

        if (uncategorised != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uncategorised", uncategorised));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (needsReview != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("needs_review", needsReview));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "developerKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersIdTransactionsGetValidateBeforeCall(Integer id, String startDate, String endDate, String updatedSince, Integer uncategorised, String type, Integer needsReview, String search, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling usersIdTransactionsGet(Async)");
        }

        return usersIdTransactionsGetCall(id, startDate, endDate, updatedSince, uncategorised, type, needsReview, search, page, _callback);

    }

    /**
     * List transactions in user
     * Lists transactions belonging to a user by their ID.
     * @param id The unique identifier of the account. (required)
     * @param startDate Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user&#39;s subscription. (optional)
     * @param endDate Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today&#39;s date. (optional)
     * @param updatedSince Limit to transactions updated since an ISO 8601 timestamp. (optional)
     * @param uncategorised Limit to uncategorised transactions. (optional)
     * @param type Limit to transactions of this type. (optional)
     * @param needsReview Limit to transactions that need to be reviewed. (optional)
     * @param search Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format. (optional)
     * @param page Choose a particular page of the results. (optional)
     * @return List&lt;Transaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Transaction> usersIdTransactionsGet(Integer id, String startDate, String endDate, String updatedSince, Integer uncategorised, String type, Integer needsReview, String search, Integer page) throws ApiException {
        ApiResponse<List<Transaction>> localVarResp = usersIdTransactionsGetWithHttpInfo(id, startDate, endDate, updatedSince, uncategorised, type, needsReview, search, page);
        return localVarResp.getData();
    }

    /**
     * List transactions in user
     * Lists transactions belonging to a user by their ID.
     * @param id The unique identifier of the account. (required)
     * @param startDate Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user&#39;s subscription. (optional)
     * @param endDate Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today&#39;s date. (optional)
     * @param updatedSince Limit to transactions updated since an ISO 8601 timestamp. (optional)
     * @param uncategorised Limit to uncategorised transactions. (optional)
     * @param type Limit to transactions of this type. (optional)
     * @param needsReview Limit to transactions that need to be reviewed. (optional)
     * @param search Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format. (optional)
     * @param page Choose a particular page of the results. (optional)
     * @return ApiResponse&lt;List&lt;Transaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Transaction>> usersIdTransactionsGetWithHttpInfo(Integer id, String startDate, String endDate, String updatedSince, Integer uncategorised, String type, Integer needsReview, String search, Integer page) throws ApiException {
        okhttp3.Call localVarCall = usersIdTransactionsGetValidateBeforeCall(id, startDate, endDate, updatedSince, uncategorised, type, needsReview, search, page, null);
        Type localVarReturnType = new TypeToken<List<Transaction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List transactions in user (asynchronously)
     * Lists transactions belonging to a user by their ID.
     * @param id The unique identifier of the account. (required)
     * @param startDate Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user&#39;s subscription. (optional)
     * @param endDate Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today&#39;s date. (optional)
     * @param updatedSince Limit to transactions updated since an ISO 8601 timestamp. (optional)
     * @param uncategorised Limit to uncategorised transactions. (optional)
     * @param type Limit to transactions of this type. (optional)
     * @param needsReview Limit to transactions that need to be reviewed. (optional)
     * @param search Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format. (optional)
     * @param page Choose a particular page of the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not Allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersIdTransactionsGetAsync(Integer id, String startDate, String endDate, String updatedSince, Integer uncategorised, String type, Integer needsReview, String search, Integer page, final ApiCallback<List<Transaction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersIdTransactionsGetValidateBeforeCall(id, startDate, endDate, updatedSince, uncategorised, type, needsReview, search, page, _callback);
        Type localVarReturnType = new TypeToken<List<Transaction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
