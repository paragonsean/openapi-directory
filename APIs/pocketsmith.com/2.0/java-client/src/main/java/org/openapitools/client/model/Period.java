/*
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Period
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:36.319532-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Period {
  public static final String SERIALIZED_NAME_ACTUAL_AMOUNT = "actual_amount";
  @SerializedName(SERIALIZED_NAME_ACTUAL_AMOUNT)
  private BigDecimal actualAmount;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency_code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_CURRENT = "current";
  @SerializedName(SERIALIZED_NAME_CURRENT)
  private Boolean current;

  public static final String SERIALIZED_NAME_END_DATE = "end_date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_FORECAST_AMOUNT = "forecast_amount";
  @SerializedName(SERIALIZED_NAME_FORECAST_AMOUNT)
  private BigDecimal forecastAmount;

  public static final String SERIALIZED_NAME_OVER_BUDGET = "over_budget";
  @SerializedName(SERIALIZED_NAME_OVER_BUDGET)
  private Boolean overBudget;

  public static final String SERIALIZED_NAME_OVER_BY = "over_by";
  @SerializedName(SERIALIZED_NAME_OVER_BY)
  private BigDecimal overBy;

  public static final String SERIALIZED_NAME_PERCENTAGE_USED = "percentage_used";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE_USED)
  private BigDecimal percentageUsed;

  public static final String SERIALIZED_NAME_REFUND_AMOUNT = "refund_amount";
  @SerializedName(SERIALIZED_NAME_REFUND_AMOUNT)
  private BigDecimal refundAmount;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_UNDER_BUDGET = "under_budget";
  @SerializedName(SERIALIZED_NAME_UNDER_BUDGET)
  private Boolean underBudget;

  public static final String SERIALIZED_NAME_UNDER_BY = "under_by";
  @SerializedName(SERIALIZED_NAME_UNDER_BY)
  private BigDecimal underBy;

  public Period() {
  }

  public Period actualAmount(BigDecimal actualAmount) {
    this.actualAmount = actualAmount;
    return this;
  }

  /**
   * The sum of all actuals (transactions) in the period.
   * @return actualAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getActualAmount() {
    return actualAmount;
  }

  public void setActualAmount(BigDecimal actualAmount) {
    this.actualAmount = actualAmount;
  }


  public Period currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * The currency of the period.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public Period current(Boolean current) {
    this.current = current;
    return this;
  }

  /**
   * Whether this period is current, such that the current date (in the user&#39;s time zone) falls within the date range.
   * @return current
   */
  @javax.annotation.Nullable
  public Boolean getCurrent() {
    return current;
  }

  public void setCurrent(Boolean current) {
    this.current = current;
  }


  public Period endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * The end date of the period.
   * @return endDate
   */
  @javax.annotation.Nullable
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public Period forecastAmount(BigDecimal forecastAmount) {
    this.forecastAmount = forecastAmount;
    return this;
  }

  /**
   * The sum of all forecast sources (budget events) in the period, for comparison against the actual amount.
   * @return forecastAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getForecastAmount() {
    return forecastAmount;
  }

  public void setForecastAmount(BigDecimal forecastAmount) {
    this.forecastAmount = forecastAmount;
  }


  public Period overBudget(Boolean overBudget) {
    this.overBudget = overBudget;
    return this;
  }

  /**
   * Whether the budget has been exceeded in the period.
   * @return overBudget
   */
  @javax.annotation.Nullable
  public Boolean getOverBudget() {
    return overBudget;
  }

  public void setOverBudget(Boolean overBudget) {
    this.overBudget = overBudget;
  }


  public Period overBy(BigDecimal overBy) {
    this.overBy = overBy;
    return this;
  }

  /**
   * How much the budget has been exceeded by in the period.
   * @return overBy
   */
  @javax.annotation.Nullable
  public BigDecimal getOverBy() {
    return overBy;
  }

  public void setOverBy(BigDecimal overBy) {
    this.overBy = overBy;
  }


  public Period percentageUsed(BigDecimal percentageUsed) {
    this.percentageUsed = percentageUsed;
    return this;
  }

  /**
   * The percentage of the budget that has been used in the period.
   * @return percentageUsed
   */
  @javax.annotation.Nullable
  public BigDecimal getPercentageUsed() {
    return percentageUsed;
  }

  public void setPercentageUsed(BigDecimal percentageUsed) {
    this.percentageUsed = percentageUsed;
  }


  public Period refundAmount(BigDecimal refundAmount) {
    this.refundAmount = refundAmount;
    return this;
  }

  /**
   * This attribute tracks the amount that has been refunded or deducted to the actual amount. When a category is set to \&quot;always expense\&quot;, any credit transactions are treated as refunds and when set to \&quot;always income\&quot;, any debit transactions are treated as deductions.
   * @return refundAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getRefundAmount() {
    return refundAmount;
  }

  public void setRefundAmount(BigDecimal refundAmount) {
    this.refundAmount = refundAmount;
  }


  public Period startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * The start date of the period.
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public Period underBudget(Boolean underBudget) {
    this.underBudget = underBudget;
    return this;
  }

  /**
   * Whether the budget has not been exceeded in the period.
   * @return underBudget
   */
  @javax.annotation.Nullable
  public Boolean getUnderBudget() {
    return underBudget;
  }

  public void setUnderBudget(Boolean underBudget) {
    this.underBudget = underBudget;
  }


  public Period underBy(BigDecimal underBy) {
    this.underBy = underBy;
    return this;
  }

  /**
   * How much there is left in the budget for the period.
   * @return underBy
   */
  @javax.annotation.Nullable
  public BigDecimal getUnderBy() {
    return underBy;
  }

  public void setUnderBy(BigDecimal underBy) {
    this.underBy = underBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Period period = (Period) o;
    return Objects.equals(this.actualAmount, period.actualAmount) &&
        Objects.equals(this.currencyCode, period.currencyCode) &&
        Objects.equals(this.current, period.current) &&
        Objects.equals(this.endDate, period.endDate) &&
        Objects.equals(this.forecastAmount, period.forecastAmount) &&
        Objects.equals(this.overBudget, period.overBudget) &&
        Objects.equals(this.overBy, period.overBy) &&
        Objects.equals(this.percentageUsed, period.percentageUsed) &&
        Objects.equals(this.refundAmount, period.refundAmount) &&
        Objects.equals(this.startDate, period.startDate) &&
        Objects.equals(this.underBudget, period.underBudget) &&
        Objects.equals(this.underBy, period.underBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actualAmount, currencyCode, current, endDate, forecastAmount, overBudget, overBy, percentageUsed, refundAmount, startDate, underBudget, underBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Period {\n");
    sb.append("    actualAmount: ").append(toIndentedString(actualAmount)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    current: ").append(toIndentedString(current)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    forecastAmount: ").append(toIndentedString(forecastAmount)).append("\n");
    sb.append("    overBudget: ").append(toIndentedString(overBudget)).append("\n");
    sb.append("    overBy: ").append(toIndentedString(overBy)).append("\n");
    sb.append("    percentageUsed: ").append(toIndentedString(percentageUsed)).append("\n");
    sb.append("    refundAmount: ").append(toIndentedString(refundAmount)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    underBudget: ").append(toIndentedString(underBudget)).append("\n");
    sb.append("    underBy: ").append(toIndentedString(underBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actual_amount");
    openapiFields.add("currency_code");
    openapiFields.add("current");
    openapiFields.add("end_date");
    openapiFields.add("forecast_amount");
    openapiFields.add("over_budget");
    openapiFields.add("over_by");
    openapiFields.add("percentage_used");
    openapiFields.add("refund_amount");
    openapiFields.add("start_date");
    openapiFields.add("under_budget");
    openapiFields.add("under_by");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Period
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Period.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Period is not found in the empty JSON string", Period.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Period.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Period` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currency_code") != null && !jsonObj.get("currency_code").isJsonNull()) && !jsonObj.get("currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_code").toString()));
      }
      if ((jsonObj.get("end_date") != null && !jsonObj.get("end_date").isJsonNull()) && !jsonObj.get("end_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end_date").toString()));
      }
      if ((jsonObj.get("start_date") != null && !jsonObj.get("start_date").isJsonNull()) && !jsonObj.get("start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_date").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Period.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Period' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Period> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Period.class));

       return (TypeAdapter<T>) new TypeAdapter<Period>() {
           @Override
           public void write(JsonWriter out, Period value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Period read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Period given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Period
   * @throws IOException if the JSON string is invalid with respect to Period
   */
  public static Period fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Period.class);
  }

  /**
   * Convert an instance of Period to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

