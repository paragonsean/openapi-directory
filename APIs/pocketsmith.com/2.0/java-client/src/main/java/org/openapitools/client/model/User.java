/*
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * User
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:36.319532-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class User {
  public static final String SERIALIZED_NAME_ALWAYS_SHOW_BASE_CURRENCY = "always_show_base_currency";
  @SerializedName(SERIALIZED_NAME_ALWAYS_SHOW_BASE_CURRENCY)
  private Boolean alwaysShowBaseCurrency;

  public static final String SERIALIZED_NAME_AVAILABLE_ACCOUNTS = "available_accounts";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_ACCOUNTS)
  private Integer availableAccounts;

  public static final String SERIALIZED_NAME_AVAILABLE_BUDGETS = "available_budgets";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_BUDGETS)
  private Integer availableBudgets;

  public static final String SERIALIZED_NAME_AVATAR_URL = "avatar_url";
  @SerializedName(SERIALIZED_NAME_AVATAR_URL)
  private String avatarUrl;

  public static final String SERIALIZED_NAME_BASE_CURRENCY_CODE = "base_currency_code";
  @SerializedName(SERIALIZED_NAME_BASE_CURRENCY_CODE)
  private String baseCurrencyCode;

  public static final String SERIALIZED_NAME_BETA_USER = "beta_user";
  @SerializedName(SERIALIZED_NAME_BETA_USER)
  private Boolean betaUser;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FORECAST_DEFER_RECALCULATE = "forecast_defer_recalculate";
  @SerializedName(SERIALIZED_NAME_FORECAST_DEFER_RECALCULATE)
  private Boolean forecastDeferRecalculate;

  public static final String SERIALIZED_NAME_FORECAST_END_DATE = "forecast_end_date";
  @SerializedName(SERIALIZED_NAME_FORECAST_END_DATE)
  private String forecastEndDate;

  public static final String SERIALIZED_NAME_FORECAST_LAST_ACCESSED_AT = "forecast_last_accessed_at";
  @SerializedName(SERIALIZED_NAME_FORECAST_LAST_ACCESSED_AT)
  private String forecastLastAccessedAt;

  public static final String SERIALIZED_NAME_FORECAST_LAST_UPDATED_AT = "forecast_last_updated_at";
  @SerializedName(SERIALIZED_NAME_FORECAST_LAST_UPDATED_AT)
  private String forecastLastUpdatedAt;

  public static final String SERIALIZED_NAME_FORECAST_NEEDS_RECALCULATE = "forecast_needs_recalculate";
  @SerializedName(SERIALIZED_NAME_FORECAST_NEEDS_RECALCULATE)
  private Boolean forecastNeedsRecalculate;

  public static final String SERIALIZED_NAME_FORECAST_START_DATE = "forecast_start_date";
  @SerializedName(SERIALIZED_NAME_FORECAST_START_DATE)
  private String forecastStartDate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_REVIEWING_TRANSACTIONS = "is_reviewing_transactions";
  @SerializedName(SERIALIZED_NAME_IS_REVIEWING_TRANSACTIONS)
  private Boolean isReviewingTransactions;

  public static final String SERIALIZED_NAME_LAST_ACTIVITY_AT = "last_activity_at";
  @SerializedName(SERIALIZED_NAME_LAST_ACTIVITY_AT)
  private String lastActivityAt;

  public static final String SERIALIZED_NAME_LAST_LOGGED_IN_AT = "last_logged_in_at";
  @SerializedName(SERIALIZED_NAME_LAST_LOGGED_IN_AT)
  private String lastLoggedInAt;

  public static final String SERIALIZED_NAME_LOGIN = "login";
  @SerializedName(SERIALIZED_NAME_LOGIN)
  private String login;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TIME_ZONE = "time_zone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_USING_MULTIPLE_CURRENCIES = "using_multiple_currencies";
  @SerializedName(SERIALIZED_NAME_USING_MULTIPLE_CURRENCIES)
  private Boolean usingMultipleCurrencies;

  public static final String SERIALIZED_NAME_WEEK_START_DAY = "week_start_day";
  @SerializedName(SERIALIZED_NAME_WEEK_START_DAY)
  private Integer weekStartDay;

  public User() {
  }

  public User alwaysShowBaseCurrency(Boolean alwaysShowBaseCurrency) {
    this.alwaysShowBaseCurrency = alwaysShowBaseCurrency;
    return this;
  }

  /**
   * Whether the user wants to see all accounts in their base currency instead of the native account currency.
   * @return alwaysShowBaseCurrency
   */
  @javax.annotation.Nullable
  public Boolean getAlwaysShowBaseCurrency() {
    return alwaysShowBaseCurrency;
  }

  public void setAlwaysShowBaseCurrency(Boolean alwaysShowBaseCurrency) {
    this.alwaysShowBaseCurrency = alwaysShowBaseCurrency;
  }


  public User availableAccounts(Integer availableAccounts) {
    this.availableAccounts = availableAccounts;
    return this;
  }

  /**
   * The user&#39;s total number of available accounts.
   * @return availableAccounts
   */
  @javax.annotation.Nullable
  public Integer getAvailableAccounts() {
    return availableAccounts;
  }

  public void setAvailableAccounts(Integer availableAccounts) {
    this.availableAccounts = availableAccounts;
  }


  public User availableBudgets(Integer availableBudgets) {
    this.availableBudgets = availableBudgets;
    return this;
  }

  /**
   * The user&#39;s total number of available budgets.
   * @return availableBudgets
   */
  @javax.annotation.Nullable
  public Integer getAvailableBudgets() {
    return availableBudgets;
  }

  public void setAvailableBudgets(Integer availableBudgets) {
    this.availableBudgets = availableBudgets;
  }


  public User avatarUrl(String avatarUrl) {
    this.avatarUrl = avatarUrl;
    return this;
  }

  /**
   * The URL to the user&#39;s avatar.
   * @return avatarUrl
   */
  @javax.annotation.Nullable
  public String getAvatarUrl() {
    return avatarUrl;
  }

  public void setAvatarUrl(String avatarUrl) {
    this.avatarUrl = avatarUrl;
  }


  public User baseCurrencyCode(String baseCurrencyCode) {
    this.baseCurrencyCode = baseCurrencyCode;
    return this;
  }

  /**
   * The user&#39;s base currency.
   * @return baseCurrencyCode
   */
  @javax.annotation.Nullable
  public String getBaseCurrencyCode() {
    return baseCurrencyCode;
  }

  public void setBaseCurrencyCode(String baseCurrencyCode) {
    this.baseCurrencyCode = baseCurrencyCode;
  }


  public User betaUser(Boolean betaUser) {
    this.betaUser = betaUser;
    return this;
  }

  /**
   * Whether the user has opted in to beta features.
   * @return betaUser
   */
  @javax.annotation.Nullable
  public Boolean getBetaUser() {
    return betaUser;
  }

  public void setBetaUser(Boolean betaUser) {
    this.betaUser = betaUser;
  }


  public User createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * When the user signed up.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public User email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The user&#39;s email address.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public User forecastDeferRecalculate(Boolean forecastDeferRecalculate) {
    this.forecastDeferRecalculate = forecastDeferRecalculate;
    return this;
  }

  /**
   * Whether the user&#39;s forecast recalculation should be deferred.
   * @return forecastDeferRecalculate
   */
  @javax.annotation.Nullable
  public Boolean getForecastDeferRecalculate() {
    return forecastDeferRecalculate;
  }

  public void setForecastDeferRecalculate(Boolean forecastDeferRecalculate) {
    this.forecastDeferRecalculate = forecastDeferRecalculate;
  }


  public User forecastEndDate(String forecastEndDate) {
    this.forecastEndDate = forecastEndDate;
    return this;
  }

  /**
   * The date that the user&#39;s forecast ends.
   * @return forecastEndDate
   */
  @javax.annotation.Nullable
  public String getForecastEndDate() {
    return forecastEndDate;
  }

  public void setForecastEndDate(String forecastEndDate) {
    this.forecastEndDate = forecastEndDate;
  }


  public User forecastLastAccessedAt(String forecastLastAccessedAt) {
    this.forecastLastAccessedAt = forecastLastAccessedAt;
    return this;
  }

  /**
   * When the user&#39;s forecast was last accessed.
   * @return forecastLastAccessedAt
   */
  @javax.annotation.Nullable
  public String getForecastLastAccessedAt() {
    return forecastLastAccessedAt;
  }

  public void setForecastLastAccessedAt(String forecastLastAccessedAt) {
    this.forecastLastAccessedAt = forecastLastAccessedAt;
  }


  public User forecastLastUpdatedAt(String forecastLastUpdatedAt) {
    this.forecastLastUpdatedAt = forecastLastUpdatedAt;
    return this;
  }

  /**
   * When the user&#39;s forecast was last updated.
   * @return forecastLastUpdatedAt
   */
  @javax.annotation.Nullable
  public String getForecastLastUpdatedAt() {
    return forecastLastUpdatedAt;
  }

  public void setForecastLastUpdatedAt(String forecastLastUpdatedAt) {
    this.forecastLastUpdatedAt = forecastLastUpdatedAt;
  }


  public User forecastNeedsRecalculate(Boolean forecastNeedsRecalculate) {
    this.forecastNeedsRecalculate = forecastNeedsRecalculate;
    return this;
  }

  /**
   * Whether the user&#39;s forecast needs to be recalculated.
   * @return forecastNeedsRecalculate
   */
  @javax.annotation.Nullable
  public Boolean getForecastNeedsRecalculate() {
    return forecastNeedsRecalculate;
  }

  public void setForecastNeedsRecalculate(Boolean forecastNeedsRecalculate) {
    this.forecastNeedsRecalculate = forecastNeedsRecalculate;
  }


  public User forecastStartDate(String forecastStartDate) {
    this.forecastStartDate = forecastStartDate;
    return this;
  }

  /**
   * The date that the user&#39;s forecast starts.
   * @return forecastStartDate
   */
  @javax.annotation.Nullable
  public String getForecastStartDate() {
    return forecastStartDate;
  }

  public void setForecastStartDate(String forecastStartDate) {
    this.forecastStartDate = forecastStartDate;
  }


  public User id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * The unique identifier of the user.
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public User isReviewingTransactions(Boolean isReviewingTransactions) {
    this.isReviewingTransactions = isReviewingTransactions;
    return this;
  }

  /**
   * Whether the user wants to review new transactions, transfer transactions or categorisation.
   * @return isReviewingTransactions
   */
  @javax.annotation.Nullable
  public Boolean getIsReviewingTransactions() {
    return isReviewingTransactions;
  }

  public void setIsReviewingTransactions(Boolean isReviewingTransactions) {
    this.isReviewingTransactions = isReviewingTransactions;
  }


  public User lastActivityAt(String lastActivityAt) {
    this.lastActivityAt = lastActivityAt;
    return this;
  }

  /**
   * When the user last interacted with PocketSmith, via any application or the API.
   * @return lastActivityAt
   */
  @javax.annotation.Nullable
  public String getLastActivityAt() {
    return lastActivityAt;
  }

  public void setLastActivityAt(String lastActivityAt) {
    this.lastActivityAt = lastActivityAt;
  }


  public User lastLoggedInAt(String lastLoggedInAt) {
    this.lastLoggedInAt = lastLoggedInAt;
    return this;
  }

  /**
   * When the user last logged into PocketSmith.
   * @return lastLoggedInAt
   */
  @javax.annotation.Nullable
  public String getLastLoggedInAt() {
    return lastLoggedInAt;
  }

  public void setLastLoggedInAt(String lastLoggedInAt) {
    this.lastLoggedInAt = lastLoggedInAt;
  }


  public User login(String login) {
    this.login = login;
    return this;
  }

  /**
   * The user&#39;s username.
   * @return login
   */
  @javax.annotation.Nullable
  public String getLogin() {
    return login;
  }

  public void setLogin(String login) {
    this.login = login;
  }


  public User name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The full name of the user, although not all users will have a name set.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public User timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * The user&#39;s time zone.
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public User updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * When the user was last updated.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public User usingMultipleCurrencies(Boolean usingMultipleCurrencies) {
    this.usingMultipleCurrencies = usingMultipleCurrencies;
    return this;
  }

  /**
   * Whether the user has multiple currencies in use across their account.
   * @return usingMultipleCurrencies
   */
  @javax.annotation.Nullable
  public Boolean getUsingMultipleCurrencies() {
    return usingMultipleCurrencies;
  }

  public void setUsingMultipleCurrencies(Boolean usingMultipleCurrencies) {
    this.usingMultipleCurrencies = usingMultipleCurrencies;
  }


  public User weekStartDay(Integer weekStartDay) {
    this.weekStartDay = weekStartDay;
    return this;
  }

  /**
   * The day of the week the user wishes their calendars to start on. A number between 0 and 6, where 0 is Sunday and 6 is Saturday.
   * @return weekStartDay
   */
  @javax.annotation.Nullable
  public Integer getWeekStartDay() {
    return weekStartDay;
  }

  public void setWeekStartDay(Integer weekStartDay) {
    this.weekStartDay = weekStartDay;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.alwaysShowBaseCurrency, user.alwaysShowBaseCurrency) &&
        Objects.equals(this.availableAccounts, user.availableAccounts) &&
        Objects.equals(this.availableBudgets, user.availableBudgets) &&
        Objects.equals(this.avatarUrl, user.avatarUrl) &&
        Objects.equals(this.baseCurrencyCode, user.baseCurrencyCode) &&
        Objects.equals(this.betaUser, user.betaUser) &&
        Objects.equals(this.createdAt, user.createdAt) &&
        Objects.equals(this.email, user.email) &&
        Objects.equals(this.forecastDeferRecalculate, user.forecastDeferRecalculate) &&
        Objects.equals(this.forecastEndDate, user.forecastEndDate) &&
        Objects.equals(this.forecastLastAccessedAt, user.forecastLastAccessedAt) &&
        Objects.equals(this.forecastLastUpdatedAt, user.forecastLastUpdatedAt) &&
        Objects.equals(this.forecastNeedsRecalculate, user.forecastNeedsRecalculate) &&
        Objects.equals(this.forecastStartDate, user.forecastStartDate) &&
        Objects.equals(this.id, user.id) &&
        Objects.equals(this.isReviewingTransactions, user.isReviewingTransactions) &&
        Objects.equals(this.lastActivityAt, user.lastActivityAt) &&
        Objects.equals(this.lastLoggedInAt, user.lastLoggedInAt) &&
        Objects.equals(this.login, user.login) &&
        Objects.equals(this.name, user.name) &&
        Objects.equals(this.timeZone, user.timeZone) &&
        Objects.equals(this.updatedAt, user.updatedAt) &&
        Objects.equals(this.usingMultipleCurrencies, user.usingMultipleCurrencies) &&
        Objects.equals(this.weekStartDay, user.weekStartDay);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alwaysShowBaseCurrency, availableAccounts, availableBudgets, avatarUrl, baseCurrencyCode, betaUser, createdAt, email, forecastDeferRecalculate, forecastEndDate, forecastLastAccessedAt, forecastLastUpdatedAt, forecastNeedsRecalculate, forecastStartDate, id, isReviewingTransactions, lastActivityAt, lastLoggedInAt, login, name, timeZone, updatedAt, usingMultipleCurrencies, weekStartDay);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    alwaysShowBaseCurrency: ").append(toIndentedString(alwaysShowBaseCurrency)).append("\n");
    sb.append("    availableAccounts: ").append(toIndentedString(availableAccounts)).append("\n");
    sb.append("    availableBudgets: ").append(toIndentedString(availableBudgets)).append("\n");
    sb.append("    avatarUrl: ").append(toIndentedString(avatarUrl)).append("\n");
    sb.append("    baseCurrencyCode: ").append(toIndentedString(baseCurrencyCode)).append("\n");
    sb.append("    betaUser: ").append(toIndentedString(betaUser)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    forecastDeferRecalculate: ").append(toIndentedString(forecastDeferRecalculate)).append("\n");
    sb.append("    forecastEndDate: ").append(toIndentedString(forecastEndDate)).append("\n");
    sb.append("    forecastLastAccessedAt: ").append(toIndentedString(forecastLastAccessedAt)).append("\n");
    sb.append("    forecastLastUpdatedAt: ").append(toIndentedString(forecastLastUpdatedAt)).append("\n");
    sb.append("    forecastNeedsRecalculate: ").append(toIndentedString(forecastNeedsRecalculate)).append("\n");
    sb.append("    forecastStartDate: ").append(toIndentedString(forecastStartDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isReviewingTransactions: ").append(toIndentedString(isReviewingTransactions)).append("\n");
    sb.append("    lastActivityAt: ").append(toIndentedString(lastActivityAt)).append("\n");
    sb.append("    lastLoggedInAt: ").append(toIndentedString(lastLoggedInAt)).append("\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    usingMultipleCurrencies: ").append(toIndentedString(usingMultipleCurrencies)).append("\n");
    sb.append("    weekStartDay: ").append(toIndentedString(weekStartDay)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("always_show_base_currency");
    openapiFields.add("available_accounts");
    openapiFields.add("available_budgets");
    openapiFields.add("avatar_url");
    openapiFields.add("base_currency_code");
    openapiFields.add("beta_user");
    openapiFields.add("created_at");
    openapiFields.add("email");
    openapiFields.add("forecast_defer_recalculate");
    openapiFields.add("forecast_end_date");
    openapiFields.add("forecast_last_accessed_at");
    openapiFields.add("forecast_last_updated_at");
    openapiFields.add("forecast_needs_recalculate");
    openapiFields.add("forecast_start_date");
    openapiFields.add("id");
    openapiFields.add("is_reviewing_transactions");
    openapiFields.add("last_activity_at");
    openapiFields.add("last_logged_in_at");
    openapiFields.add("login");
    openapiFields.add("name");
    openapiFields.add("time_zone");
    openapiFields.add("updated_at");
    openapiFields.add("using_multiple_currencies");
    openapiFields.add("week_start_day");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to User
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!User.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in User is not found in the empty JSON string", User.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!User.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `User` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("avatar_url") != null && !jsonObj.get("avatar_url").isJsonNull()) && !jsonObj.get("avatar_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar_url").toString()));
      }
      if ((jsonObj.get("base_currency_code") != null && !jsonObj.get("base_currency_code").isJsonNull()) && !jsonObj.get("base_currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base_currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base_currency_code").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("forecast_end_date") != null && !jsonObj.get("forecast_end_date").isJsonNull()) && !jsonObj.get("forecast_end_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forecast_end_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forecast_end_date").toString()));
      }
      if ((jsonObj.get("forecast_last_accessed_at") != null && !jsonObj.get("forecast_last_accessed_at").isJsonNull()) && !jsonObj.get("forecast_last_accessed_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forecast_last_accessed_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forecast_last_accessed_at").toString()));
      }
      if ((jsonObj.get("forecast_last_updated_at") != null && !jsonObj.get("forecast_last_updated_at").isJsonNull()) && !jsonObj.get("forecast_last_updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forecast_last_updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forecast_last_updated_at").toString()));
      }
      if ((jsonObj.get("forecast_start_date") != null && !jsonObj.get("forecast_start_date").isJsonNull()) && !jsonObj.get("forecast_start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forecast_start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forecast_start_date").toString()));
      }
      if ((jsonObj.get("last_activity_at") != null && !jsonObj.get("last_activity_at").isJsonNull()) && !jsonObj.get("last_activity_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_activity_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_activity_at").toString()));
      }
      if ((jsonObj.get("last_logged_in_at") != null && !jsonObj.get("last_logged_in_at").isJsonNull()) && !jsonObj.get("last_logged_in_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_logged_in_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_logged_in_at").toString()));
      }
      if ((jsonObj.get("login") != null && !jsonObj.get("login").isJsonNull()) && !jsonObj.get("login").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `login` to be a primitive type in the JSON string but got `%s`", jsonObj.get("login").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("time_zone") != null && !jsonObj.get("time_zone").isJsonNull()) && !jsonObj.get("time_zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_zone").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!User.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'User' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<User> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(User.class));

       return (TypeAdapter<T>) new TypeAdapter<User>() {
           @Override
           public void write(JsonWriter out, User value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public User read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of User given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of User
   * @throws IOException if the JSON string is invalid with respect to User
   */
  public static User fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, User.class);
  }

  /**
   * Convert an instance of User to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

