/*
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Attachment;
import org.openapitools.client.model.AttachmentsIdPutRequest;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.TransactionsIdAttachmentsPostRequest;
import org.openapitools.client.model.UsersIdAttachmentsPostRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AttachmentsApi
 */
@Disabled
public class AttachmentsApiTest {

    private final AttachmentsApi api = new AttachmentsApi();

    /**
     * Delete attachment
     *
     * Deletes a particular attachment by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attachmentsIdDeleteTest() throws ApiException {
        Integer id = null;
        api.attachmentsIdDelete(id);
        // TODO: test validations
    }

    /**
     * Get attachment
     *
     * Gets a particular attachment by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attachmentsIdGetTest() throws ApiException {
        Integer id = null;
        Attachment response = api.attachmentsIdGet(id);
        // TODO: test validations
    }

    /**
     * Update attachment
     *
     * Updates the title of the attachment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attachmentsIdPutTest() throws ApiException {
        Integer id = null;
        AttachmentsIdPutRequest attachmentsIdPutRequest = null;
        Attachment response = api.attachmentsIdPut(id, attachmentsIdPutRequest);
        // TODO: test validations
    }

    /**
     * List attachments in transaction
     *
     * Lists attachments belonging to a transaction by their ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionsIdAttachmentsGetTest() throws ApiException {
        Integer id = null;
        List<Attachment> response = api.transactionsIdAttachmentsGet(id);
        // TODO: test validations
    }

    /**
     * Assigns attachment to transaction
     *
     * Assigns an attachment to the transaction by their ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionsIdAttachmentsPostTest() throws ApiException {
        Integer id = null;
        TransactionsIdAttachmentsPostRequest transactionsIdAttachmentsPostRequest = null;
        Attachment response = api.transactionsIdAttachmentsPost(id, transactionsIdAttachmentsPostRequest);
        // TODO: test validations
    }

    /**
     * Unassigns attachment in transaction
     *
     * Unassigns a particular attachment by its ID from the transaction ID. This does not delete the attachment, it only removes its association from the transaction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionsTransactionIdAttachmentsAttachmentIdDeleteTest() throws ApiException {
        Integer transactionId = null;
        Integer attachmentId = null;
        api.transactionsTransactionIdAttachmentsAttachmentIdDelete(transactionId, attachmentId);
        // TODO: test validations
    }

    /**
     * Lists attachments in user
     *
     * Lists attachments belonging to a user by their ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdAttachmentsGetTest() throws ApiException {
        Integer id = null;
        Integer unassigned = null;
        List<Attachment> response = api.usersIdAttachmentsGet(id, unassigned);
        // TODO: test validations
    }

    /**
     * Create attachment in user
     *
     * Creates an attachment belonging to the user by their ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdAttachmentsPostTest() throws ApiException {
        Integer id = null;
        UsersIdAttachmentsPostRequest usersIdAttachmentsPostRequest = null;
        Attachment response = api.usersIdAttachmentsPost(id, usersIdAttachmentsPostRequest);
        // TODO: test validations
    }

}
