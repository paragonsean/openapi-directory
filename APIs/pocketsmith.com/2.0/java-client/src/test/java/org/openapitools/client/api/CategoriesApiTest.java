/*
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CategoriesIdPutRequest;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.UsersIdCategoriesPostRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CategoriesApi
 */
@Disabled
public class CategoriesApiTest {

    private final CategoriesApi api = new CategoriesApi();

    /**
     * Delete category
     *
     * Deletes a particular category by its ID. This will delete all budgets within the category, and uncategorize all transactions assigned to the category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoriesIdDeleteTest() throws ApiException {
        Integer id = null;
        api.categoriesIdDelete(id);
        // TODO: test validations
    }

    /**
     * Get category
     *
     * Gets a particular category by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoriesIdGetTest() throws ApiException {
        Integer id = null;
        Category response = api.categoriesIdGet(id);
        // TODO: test validations
    }

    /**
     * Update category
     *
     * Updates a category by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoriesIdPutTest() throws ApiException {
        Integer id = null;
        CategoriesIdPutRequest categoriesIdPutRequest = null;
        Category response = api.categoriesIdPut(id, categoriesIdPutRequest);
        // TODO: test validations
    }

    /**
     * List categories in user
     *
     * Lists all categories belonging to a user by their ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdCategoriesGetTest() throws ApiException {
        Integer id = null;
        List<Category> response = api.usersIdCategoriesGet(id);
        // TODO: test validations
    }

    /**
     * Create category in user
     *
     * Creates a category belonging to the user by their ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdCategoriesPostTest() throws ApiException {
        Integer id = null;
        UsersIdCategoriesPostRequest usersIdCategoriesPostRequest = null;
        Category response = api.usersIdCategoriesPost(id, usersIdCategoriesPostRequest);
        // TODO: test validations
    }

}
