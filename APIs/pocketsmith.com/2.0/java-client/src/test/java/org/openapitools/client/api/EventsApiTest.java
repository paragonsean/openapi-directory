/*
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Event;
import org.openapitools.client.model.EventsIdPutRequest;
import org.openapitools.client.model.ScenariosIdEventsPostRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EventsApi
 */
@Disabled
public class EventsApiTest {

    private final EventsApi api = new EventsApi();

    /**
     * Delete event
     *
     * Deletes an event by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsIdDeleteTest() throws ApiException {
        String id = null;
        String behaviour = null;
        api.eventsIdDelete(id, behaviour);
        // TODO: test validations
    }

    /**
     * Get event
     *
     * Gets a particular event by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsIdGetTest() throws ApiException {
        String id = null;
        Event response = api.eventsIdGet(id);
        // TODO: test validations
    }

    /**
     * Update event
     *
     * Updates an event by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsIdPutTest() throws ApiException {
        String id = null;
        EventsIdPutRequest eventsIdPutRequest = null;
        Event response = api.eventsIdPut(id, eventsIdPutRequest);
        // TODO: test validations
    }

    /**
     * List events in scenario.
     *
     * Lists events belonging to a scenario by their ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scenariosIdEventsGetTest() throws ApiException {
        Integer id = null;
        String startDate = null;
        String endDate = null;
        List<Event> response = api.scenariosIdEventsGet(id, startDate, endDate);
        // TODO: test validations
    }

    /**
     * Create event in scenario
     *
     * Creates an event in a scenario by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scenariosIdEventsPostTest() throws ApiException {
        Integer id = null;
        ScenariosIdEventsPostRequest scenariosIdEventsPostRequest = null;
        Event response = api.scenariosIdEventsPost(id, scenariosIdEventsPostRequest);
        // TODO: test validations
    }

    /**
     * List events in user.
     *
     * Lists events belonging to a user by their ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdEventsGetTest() throws ApiException {
        Integer id = null;
        String startDate = null;
        String endDate = null;
        List<Event> response = api.usersIdEventsGet(id, startDate, endDate);
        // TODO: test validations
    }

}
