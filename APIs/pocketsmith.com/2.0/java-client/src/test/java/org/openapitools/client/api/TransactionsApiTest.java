/*
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Transaction;
import org.openapitools.client.model.TransactionAccountsIdTransactionsPostRequest;
import org.openapitools.client.model.TransactionsIdPutRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionsApi
 */
@Disabled
public class TransactionsApiTest {

    private final TransactionsApi api = new TransactionsApi();

    /**
     * List transactions in account
     *
     * Lists transactions belonging to an account by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsIdTransactionsGetTest() throws ApiException {
        Integer id = null;
        String startDate = null;
        String endDate = null;
        String updatedSince = null;
        Integer uncategorised = null;
        String type = null;
        Integer needsReview = null;
        String search = null;
        Integer page = null;
        List<Transaction> response = api.accountsIdTransactionsGet(id, startDate, endDate, updatedSince, uncategorised, type, needsReview, search, page);
        // TODO: test validations
    }

    /**
     * List transactions in categories
     *
     * Lists transactions belonging to one or more categories by their IDs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoriesIdTransactionsGetTest() throws ApiException {
        String id = null;
        String startDate = null;
        String endDate = null;
        String updatedSince = null;
        Integer uncategorised = null;
        String type = null;
        Integer needsReview = null;
        String search = null;
        Integer page = null;
        List<Transaction> response = api.categoriesIdTransactionsGet(id, startDate, endDate, updatedSince, uncategorised, type, needsReview, search, page);
        // TODO: test validations
    }

    /**
     * List transactions in transaction account
     *
     * Lists transactions belonging to a transaction account by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionAccountsIdTransactionsGetTest() throws ApiException {
        Integer id = null;
        String startDate = null;
        String endDate = null;
        String updatedSince = null;
        Integer uncategorised = null;
        String type = null;
        Integer needsReview = null;
        String search = null;
        Integer page = null;
        List<Transaction> response = api.transactionAccountsIdTransactionsGet(id, startDate, endDate, updatedSince, uncategorised, type, needsReview, search, page);
        // TODO: test validations
    }

    /**
     * Create a transaction in transaction account
     *
     * Creates a transaction in a transaction account by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionAccountsIdTransactionsPostTest() throws ApiException {
        Integer id = null;
        TransactionAccountsIdTransactionsPostRequest transactionAccountsIdTransactionsPostRequest = null;
        Transaction response = api.transactionAccountsIdTransactionsPost(id, transactionAccountsIdTransactionsPostRequest);
        // TODO: test validations
    }

    /**
     * Delete transaction
     *
     * Deletes a transaction and all its data by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionsIdDeleteTest() throws ApiException {
        Integer id = null;
        api.transactionsIdDelete(id);
        // TODO: test validations
    }

    /**
     * Get a transaction
     *
     * Gets a transaction by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionsIdGetTest() throws ApiException {
        Integer id = null;
        Transaction response = api.transactionsIdGet(id);
        // TODO: test validations
    }

    /**
     * Update a transaction
     *
     * Updates a transaction by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionsIdPutTest() throws ApiException {
        Integer id = null;
        TransactionsIdPutRequest transactionsIdPutRequest = null;
        Transaction response = api.transactionsIdPut(id, transactionsIdPutRequest);
        // TODO: test validations
    }

    /**
     * List transactions in user
     *
     * Lists transactions belonging to a user by their ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdTransactionsGetTest() throws ApiException {
        Integer id = null;
        String startDate = null;
        String endDate = null;
        String updatedSince = null;
        Integer uncategorised = null;
        String type = null;
        Integer needsReview = null;
        String search = null;
        Integer page = null;
        List<Transaction> response = api.usersIdTransactionsGet(id, startDate, endDate, updatedSince, uncategorised, type, needsReview, search, page);
        // TODO: test validations
    }

}
