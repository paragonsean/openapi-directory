/*
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Institution;
import org.openapitools.client.model.InstitutionsIdPutRequest;
import org.openapitools.client.model.UsersIdInstitutionsPostRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InstitutionsApi
 */
@Disabled
public class InstitutionsApiTest {

    private final InstitutionsApi api = new InstitutionsApi();

    /**
     * Delete institution
     *
     * Deletes an institution and all data within. Alternatively, another institution can be provided to merge the data into to avoid losing it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void institutionsIdDeleteTest() throws ApiException {
        Integer id = null;
        Integer mergeIntoInstitutionId = null;
        api.institutionsIdDelete(id, mergeIntoInstitutionId);
        // TODO: test validations
    }

    /**
     * Get institution
     *
     * Gets an institution by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void institutionsIdGetTest() throws ApiException {
        Integer id = null;
        Institution response = api.institutionsIdGet(id);
        // TODO: test validations
    }

    /**
     * Update institution
     *
     * Updates the title and currency code for an institution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void institutionsIdPutTest() throws ApiException {
        Integer id = null;
        InstitutionsIdPutRequest institutionsIdPutRequest = null;
        Institution response = api.institutionsIdPut(id, institutionsIdPutRequest);
        // TODO: test validations
    }

    /**
     * List institutions in user
     *
     * Lists all the institutions belonging to the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdInstitutionsGetTest() throws ApiException {
        Integer id = null;
        List<Institution> response = api.usersIdInstitutionsGet(id);
        // TODO: test validations
    }

    /**
     * Create institution in user
     *
     * Creates an institution belonging to a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdInstitutionsPostTest() throws ApiException {
        Integer id = null;
        UsersIdInstitutionsPostRequest usersIdInstitutionsPostRequest = null;
        Institution response = api.usersIdInstitutionsPost(id, usersIdInstitutionsPostRequest);
        // TODO: test validations
    }

}
