/*
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BudgetAnalysisPackage;
import org.openapitools.client.model.Error;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BudgetingApi
 */
@Disabled
public class BudgetingApiTest {

    private final BudgetingApi api = new BudgetingApi();

    /**
     * List budget for user
     *
     * Lists the user&#39;s budget, consisting of one or more budget analysis packages, one per category. Akin to the list on the Budget page in PocketSmith.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdBudgetGetTest() throws ApiException {
        Integer id = null;
        Boolean rollUp = null;
        List<BudgetAnalysisPackage> response = api.usersIdBudgetGet(id, rollUp);
        // TODO: test validations
    }

    /**
     * Get budget summary for user
     *
     * Get the user&#39;s budget summary, containing an expense and income analysis for all categories (excluding transfer categories) for the given period and date range. Akin to the overall budget shown on the Budget page in PocketSmith.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdBudgetSummaryGetTest() throws ApiException {
        Integer id = null;
        String period = null;
        Integer interval = null;
        String startDate = null;
        String endDate = null;
        List<BudgetAnalysisPackage> response = api.usersIdBudgetSummaryGet(id, period, interval, startDate, endDate);
        // TODO: test validations
    }

    /**
     * Delete forecast cache for user
     *
     * Delete the user&#39;s cached forecast by recalculating the forecast.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdForecastCacheDeleteTest() throws ApiException {
        Integer id = null;
        api.usersIdForecastCacheDelete(id);
        // TODO: test validations
    }

    /**
     * Get trend analysis for user
     *
     * Get an income and/or expense budget analysis for the given date range and period across any number of categories and scenarios. Akin to the Trends page in PocketSmith.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdTrendAnalysisGetTest() throws ApiException {
        Integer id = null;
        String period = null;
        Integer interval = null;
        String startDate = null;
        String endDate = null;
        String categories = null;
        String scenarios = null;
        List<BudgetAnalysisPackage> response = api.usersIdTrendAnalysisGet(id, period, interval, startDate, endDate, categories, scenarios);
        // TODO: test validations
    }

}
