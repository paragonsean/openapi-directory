/*
 * PocketSmith
 * The PocketSmith API
 *
 * The version of the OpenAPI document: 2.0
 * Contact: api@pocketsmith.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Account;
import org.openapitools.client.model.AccountsIdPutRequest;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.UsersIdAccountsPostRequest;
import org.openapitools.client.model.UsersIdAccountsPutRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Disabled
public class AccountsApiTest {

    private final AccountsApi api = new AccountsApi();

    /**
     * Delete account
     *
     * Deletes an account and all its data by ID, optionally merge scenarios into another account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsIdDeleteTest() throws ApiException {
        Integer id = null;
        api.accountsIdDelete(id);
        // TODO: test validations
    }

    /**
     * Get account
     *
     * Gets an account by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsIdGetTest() throws ApiException {
        Integer id = null;
        Account response = api.accountsIdGet(id);
        // TODO: test validations
    }

    /**
     * Update account
     *
     * Updates and returns an account by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsIdPutTest() throws ApiException {
        Integer id = null;
        AccountsIdPutRequest accountsIdPutRequest = null;
        Account response = api.accountsIdPut(id, accountsIdPutRequest);
        // TODO: test validations
    }

    /**
     * List accounts in institution
     *
     * Lists accounts belonging to an institution by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void institutionsIdAccountsGetTest() throws ApiException {
        Integer id = null;
        List<Account> response = api.institutionsIdAccountsGet(id);
        // TODO: test validations
    }

    /**
     * List accounts in user
     *
     * Lists all accounts belonging to the user by their ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdAccountsGetTest() throws ApiException {
        Integer id = null;
        List<Account> response = api.usersIdAccountsGet(id);
        // TODO: test validations
    }

    /**
     * Create an account in user
     *
     * Creates and returns an account belonging to the user by their ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdAccountsPostTest() throws ApiException {
        Integer id = null;
        UsersIdAccountsPostRequest usersIdAccountsPostRequest = null;
        Account response = api.usersIdAccountsPost(id, usersIdAccountsPostRequest);
        // TODO: test validations
    }

    /**
     * Update the display order of accounts in user
     *
     * Updates the display order of accounts belonging to the user, by accepting an array of accounts in their new display order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdAccountsPutTest() throws ApiException {
        Integer id = null;
        UsersIdAccountsPutRequest usersIdAccountsPutRequest = null;
        List<Account> response = api.usersIdAccountsPut(id, usersIdAccountsPutRequest);
        // TODO: test validations
    }

}
