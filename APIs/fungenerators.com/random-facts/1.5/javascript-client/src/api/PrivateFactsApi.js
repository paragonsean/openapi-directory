/**
 * Facts API
 * A full featured Facts API. REST access with json/xml/jsonp result support. On this day birth and death support, random fact, keyword search support etc. Below is the documentation for the Random Facts API calls. You can try them out right here. [Click here to subscribe](http://fungenerators.com/api/facts/) 
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* PrivateFacts service.
* @module api/PrivateFactsApi
* @version 1.5
*/
export default class PrivateFactsApi {

    /**
    * Constructs a new PrivateFactsApi. 
    * @alias module:api/PrivateFactsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the factDelete operation.
     * @callback module:api/PrivateFactsApi~factDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Fact entry identified by the id.
     * @param {String} id Fact ID
     * @param {module:api/PrivateFactsApi~factDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    factDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling factDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/fact', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the factGet_0 operation.
     * @callback module:api/PrivateFactsApi~factGet_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Fact belonging to the id.
     * @param {Object} opts Optional parameters
     * @param {String} [id] ID of the fact to fetch
     * @param {module:api/PrivateFactsApi~factGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    factGet_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/fact', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the factPut operation.
     * @callback module:api/PrivateFactsApi~factPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a Fact entry to the database (private collection).
     * @param {String} fact Fact Text
     * @param {String} category Category of the fact
     * @param {String} subcategory Sub Category of the fact
     * @param {String} tags Tags
     * @param {module:api/PrivateFactsApi~factPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    factPut(fact, category, subcategory, tags, callback) {
      let postBody = null;
      // verify the required parameter 'fact' is set
      if (fact === undefined || fact === null) {
        throw new Error("Missing the required parameter 'fact' when calling factPut");
      }
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling factPut");
      }
      // verify the required parameter 'subcategory' is set
      if (subcategory === undefined || subcategory === null) {
        throw new Error("Missing the required parameter 'subcategory' when calling factPut");
      }
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling factPut");
      }

      let pathParams = {
      };
      let queryParams = {
        'fact': fact,
        'category': category,
        'subcategory': subcategory,
        'tags': tags
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/fact', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
