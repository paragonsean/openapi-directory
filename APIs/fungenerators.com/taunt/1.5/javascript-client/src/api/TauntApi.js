/**
 * Taunt as a service
 * Fungenerators taunt generation API generates random taunts / insults,  relevant to the given category. Many categories are supported and new ones are added very frequently. [Click here to subscribe](http://fungenerators.com/api/taunt/) 
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Taunt service.
* @module api/TauntApi
* @version 1.5
*/
export default class TauntApi {

    /**
    * Constructs a new TauntApi. 
    * @alias module:api/TauntApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the tauntCategoriesGet operation.
     * @callback module:api/TauntApi~tauntCategoriesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available taunt generation categories.
     * @param {Object} opts Optional parameters
     * @param {Number} [start] start
     * @param {Number} [limit] limit
     * @param {module:api/TauntApi~tauntCategoriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tauntCategoriesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/taunt/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tauntGenerateGet operation.
     * @callback module:api/TauntApi~tauntGenerateGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generated taunts in the given category
     * @param {String} category Category to generator taunt from
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Limit. Controls number of taunts generated. Max of 5-10 based on the plan
     * @param {module:api/TauntApi~tauntGenerateGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tauntGenerateGet(category, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling tauntGenerateGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'category': category,
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/taunt/generate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
