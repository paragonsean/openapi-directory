/**
 * Fake identity generation API
 * Generate random fake identities (name, address, email, phone , credit card info etc). [Click here to subscribe](http://fungenerators.com/api/fakeidentity/) 
 *
 * The version of the OpenAPI document: 1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFakeIdentityApi_H
#define OAI_OAIFakeIdentityApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFakeIdentityApi : public QObject {
    Q_OBJECT

public:
    OAIFakeIdentityApi(const int timeOut = 0);
    ~OAIFakeIdentityApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  limit qint32 [optional]
    */
    virtual void identityCompanyAddressGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());


    virtual void identityCompanyGet();

    /**
    * @param[in]  limit qint32 [optional]
    */
    virtual void identityCompanyNameGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  limit qint32 [optional]
    */
    virtual void identityCompanyPhonenumberGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  limit qint32 [optional]
    */
    virtual void identityPersonAddressGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  limit qint32 [optional]
    */
    virtual void identityPersonCreditcardGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  limit qint32 [optional]
    */
    virtual void identityPersonEmailGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());


    virtual void identityPersonGet();

    /**
    * @param[in]  gender QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void identityPersonNameFirstGet(const ::OpenAPI::OptionalParam<QString> &gender = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  gender QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void identityPersonNameGet(const ::OpenAPI::OptionalParam<QString> &gender = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  limit qint32 [optional]
    */
    virtual void identityPersonNameLastGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  limit qint32 [optional]
    */
    virtual void identityPersonPhonenumberGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void identityCompanyAddressGetCallback(OAIHttpRequestWorker *worker);
    void identityCompanyGetCallback(OAIHttpRequestWorker *worker);
    void identityCompanyNameGetCallback(OAIHttpRequestWorker *worker);
    void identityCompanyPhonenumberGetCallback(OAIHttpRequestWorker *worker);
    void identityPersonAddressGetCallback(OAIHttpRequestWorker *worker);
    void identityPersonCreditcardGetCallback(OAIHttpRequestWorker *worker);
    void identityPersonEmailGetCallback(OAIHttpRequestWorker *worker);
    void identityPersonGetCallback(OAIHttpRequestWorker *worker);
    void identityPersonNameFirstGetCallback(OAIHttpRequestWorker *worker);
    void identityPersonNameGetCallback(OAIHttpRequestWorker *worker);
    void identityPersonNameLastGetCallback(OAIHttpRequestWorker *worker);
    void identityPersonPhonenumberGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void identityCompanyAddressGetSignal();
    void identityCompanyGetSignal();
    void identityCompanyNameGetSignal();
    void identityCompanyPhonenumberGetSignal();
    void identityPersonAddressGetSignal();
    void identityPersonCreditcardGetSignal();
    void identityPersonEmailGetSignal();
    void identityPersonGetSignal();
    void identityPersonNameFirstGetSignal();
    void identityPersonNameGetSignal();
    void identityPersonNameLastGetSignal();
    void identityPersonPhonenumberGetSignal();


    void identityCompanyAddressGetSignalFull(OAIHttpRequestWorker *worker);
    void identityCompanyGetSignalFull(OAIHttpRequestWorker *worker);
    void identityCompanyNameGetSignalFull(OAIHttpRequestWorker *worker);
    void identityCompanyPhonenumberGetSignalFull(OAIHttpRequestWorker *worker);
    void identityPersonAddressGetSignalFull(OAIHttpRequestWorker *worker);
    void identityPersonCreditcardGetSignalFull(OAIHttpRequestWorker *worker);
    void identityPersonEmailGetSignalFull(OAIHttpRequestWorker *worker);
    void identityPersonGetSignalFull(OAIHttpRequestWorker *worker);
    void identityPersonNameFirstGetSignalFull(OAIHttpRequestWorker *worker);
    void identityPersonNameGetSignalFull(OAIHttpRequestWorker *worker);
    void identityPersonNameLastGetSignalFull(OAIHttpRequestWorker *worker);
    void identityPersonPhonenumberGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use identityCompanyAddressGetSignalError() instead")
    void identityCompanyAddressGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void identityCompanyAddressGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityCompanyGetSignalError() instead")
    void identityCompanyGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void identityCompanyGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityCompanyNameGetSignalError() instead")
    void identityCompanyNameGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void identityCompanyNameGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityCompanyPhonenumberGetSignalError() instead")
    void identityCompanyPhonenumberGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void identityCompanyPhonenumberGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityPersonAddressGetSignalError() instead")
    void identityPersonAddressGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void identityPersonAddressGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityPersonCreditcardGetSignalError() instead")
    void identityPersonCreditcardGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void identityPersonCreditcardGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityPersonEmailGetSignalError() instead")
    void identityPersonEmailGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void identityPersonEmailGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityPersonGetSignalError() instead")
    void identityPersonGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void identityPersonGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityPersonNameFirstGetSignalError() instead")
    void identityPersonNameFirstGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void identityPersonNameFirstGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityPersonNameGetSignalError() instead")
    void identityPersonNameGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void identityPersonNameGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityPersonNameLastGetSignalError() instead")
    void identityPersonNameLastGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void identityPersonNameLastGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityPersonPhonenumberGetSignalError() instead")
    void identityPersonPhonenumberGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void identityPersonPhonenumberGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use identityCompanyAddressGetSignalErrorFull() instead")
    void identityCompanyAddressGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identityCompanyAddressGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityCompanyGetSignalErrorFull() instead")
    void identityCompanyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identityCompanyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityCompanyNameGetSignalErrorFull() instead")
    void identityCompanyNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identityCompanyNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityCompanyPhonenumberGetSignalErrorFull() instead")
    void identityCompanyPhonenumberGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identityCompanyPhonenumberGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityPersonAddressGetSignalErrorFull() instead")
    void identityPersonAddressGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identityPersonAddressGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityPersonCreditcardGetSignalErrorFull() instead")
    void identityPersonCreditcardGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identityPersonCreditcardGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityPersonEmailGetSignalErrorFull() instead")
    void identityPersonEmailGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identityPersonEmailGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityPersonGetSignalErrorFull() instead")
    void identityPersonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identityPersonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityPersonNameFirstGetSignalErrorFull() instead")
    void identityPersonNameFirstGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identityPersonNameFirstGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityPersonNameGetSignalErrorFull() instead")
    void identityPersonNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identityPersonNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityPersonNameLastGetSignalErrorFull() instead")
    void identityPersonNameLastGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identityPersonNameLastGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityPersonPhonenumberGetSignalErrorFull() instead")
    void identityPersonPhonenumberGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identityPersonPhonenumberGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
