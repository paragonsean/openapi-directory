/**
 * Barcode API
 * Generate Barcode images for a given barcode number. You can decode Barcode images and get the barcodes in a numberic form as well. Many industry standard barcode types are supported. The best and complete Barcode API on the cloud. [Click here to subscribe](http://fungenerators.com/api/barcode/)  
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Barcode service.
* @module api/BarcodeApi
* @version 1.5
*/
export default class BarcodeApi {

    /**
    * Constructs a new BarcodeApi. 
    * @alias module:api/BarcodeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the barcodeDecodePost operation.
     * @callback module:api/BarcodeApi~barcodeDecodePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Decode a Barcode image and return the cotents if successful
     * @param {File} barimage Barcode image to decode and get the content value
     * @param {module:api/BarcodeApi~barcodeDecodePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    barcodeDecodePost(barimage, callback) {
      let postBody = null;
      // verify the required parameter 'barimage' is set
      if (barimage === undefined || barimage === null) {
        throw new Error("Missing the required parameter 'barimage' when calling barcodeDecodePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'barimage': barimage
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/barcode/decode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the barcodeDecodeTypesGet operation.
     * @callback module:api/BarcodeApi~barcodeDecodeTypesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the supported barcode types for the decoding process.
     * @param {module:api/BarcodeApi~barcodeDecodeTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    barcodeDecodeTypesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/barcode/decode/types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the barcodeEncodeGet operation.
     * @callback module:api/BarcodeApi~barcodeEncodeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Bar Code image for the given barcode number
     * @param {String} number Barcode number
     * @param {Object} opts Optional parameters
     * @param {String} [barcodeformat] Barcode format default C39. Valid values are the keys to those returned from /barcode/encode/types.
     * @param {String} [outputformat] Output image format. Must be one of png/html/jpg/svg
     * @param {Number} [widthfactor] Width factor of the image
     * @param {Number} [totalheight] Total height of the image
     * @param {module:api/BarcodeApi~barcodeEncodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    barcodeEncodeGet(number, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling barcodeEncodeGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'number': number,
        'barcodeformat': opts['barcodeformat'],
        'outputformat': opts['outputformat'],
        'widthfactor': opts['widthfactor'],
        'totalheight': opts['totalheight']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/barcode/encode', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the barcodeEncodeTypesGet operation.
     * @callback module:api/BarcodeApi~barcodeEncodeTypesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the supported barcode types for encoding / image generation.
     * @param {module:api/BarcodeApi~barcodeEncodeTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    barcodeEncodeTypesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/barcode/encode/types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
