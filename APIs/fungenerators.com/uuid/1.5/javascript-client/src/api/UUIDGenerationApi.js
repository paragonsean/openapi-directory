/**
 * UUID Generation API
 * A full featured, REST based UUID generator with json/xml/jsonp result support. You can try them out right here. [Click here to subscribe](http://fungenerators.com/api/uuid/) 
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* UUIDGeneration service.
* @module api/UUIDGenerationApi
* @version 1.5
*/
export default class UUIDGenerationApi {

    /**
    * Constructs a new UUIDGenerationApi. 
    * @alias module:api/UUIDGenerationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the uuidGet operation.
     * @callback module:api/UUIDGenerationApi~uuidGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a random UUID (v4).
     * @param {Object} opts Optional parameters
     * @param {Number} [count] Number of UUID's to generate (defaults to 1)
     * @param {module:api/UUIDGenerationApi~uuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uuidGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/uuid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uuidVersionVersionGet operation.
     * @callback module:api/UUIDGenerationApi~uuidVersionVersionGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a random UUID (v4).
     * @param {Number} version Version of the UUID spec to use. (0-5), Use '0' for nil (00000000-0000-0000-0000-000000000000) UUID.
     * @param {Object} opts Optional parameters
     * @param {Number} [count] Number of UUID's to generate (defaults to 1)
     * @param {String} [type] For v3 and v5 of UUID Spec you can supply the type (dns/url/oid/x500/nil).
     * @param {String} [text] For v3 and v5 of UUID Spec supply the text value for the type specified dns/url/oid/x500/nil. For example specify a dns/domain string if the type is \"dns\"
     * @param {module:api/UUIDGenerationApi~uuidVersionVersionGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uuidVersionVersionGet(version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling uuidVersionVersionGet");
      }

      let pathParams = {
        'version': version
      };
      let queryParams = {
        'count': opts['count'],
        'type': opts['type'],
        'text': opts['text']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/uuid/version/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
