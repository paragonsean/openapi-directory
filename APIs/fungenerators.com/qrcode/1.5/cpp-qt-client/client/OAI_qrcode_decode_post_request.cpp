/**
 * Fun Generators API
 * Fungenerators API gives access to the full set of generators available at fungenerators.com so that you can integrate them in your workflow or an app. [Click here to get details and subscribe](http://fungenerators.com/api) . Here are the individual API links:    ## QR Code API ##   Generate QR Code images for text, url, email , business cards etc. You can decode QR Code images and get the contents as well. The best and complete QR Code API on the cloud. [Click here to subscribe](http://fungenerators.com/api/qrcode) 
 *
 * The version of the OpenAPI document: 1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_qrcode_decode_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_qrcode_decode_post_request::OAI_qrcode_decode_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_qrcode_decode_post_request::OAI_qrcode_decode_post_request() {
    this->initializeModel();
}

OAI_qrcode_decode_post_request::~OAI_qrcode_decode_post_request() {}

void OAI_qrcode_decode_post_request::initializeModel() {

    m_qrimage_isSet = false;
    m_qrimage_isValid = false;
}

void OAI_qrcode_decode_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_qrcode_decode_post_request::fromJsonObject(QJsonObject json) {

    m_qrimage_isValid = ::OpenAPI::fromJsonValue(m_qrimage, json[QString("qrimage")]);
    m_qrimage_isSet = !json[QString("qrimage")].isNull() && m_qrimage_isValid;
}

QString OAI_qrcode_decode_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_qrcode_decode_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_qrimage.isSet()) {
        obj.insert(QString("qrimage"), ::OpenAPI::toJsonValue(m_qrimage));
    }
    return obj;
}

OAIHttpFileElement OAI_qrcode_decode_post_request::getQrimage() const {
    return m_qrimage;
}
void OAI_qrcode_decode_post_request::setQrimage(const OAIHttpFileElement &qrimage) {
    m_qrimage = qrimage;
    m_qrimage_isSet = true;
}

bool OAI_qrcode_decode_post_request::is_qrimage_Set() const{
    return m_qrimage_isSet;
}

bool OAI_qrcode_decode_post_request::is_qrimage_Valid() const{
    return m_qrimage_isValid;
}

bool OAI_qrcode_decode_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_qrimage.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_qrcode_decode_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_qrimage_isValid && true;
}

} // namespace OpenAPI
