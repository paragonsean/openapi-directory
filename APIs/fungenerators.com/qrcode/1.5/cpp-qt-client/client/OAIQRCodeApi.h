/**
 * Fun Generators API
 * Fungenerators API gives access to the full set of generators available at fungenerators.com so that you can integrate them in your workflow or an app. [Click here to get details and subscribe](http://fungenerators.com/api) . Here are the individual API links:    ## QR Code API ##   Generate QR Code images for text, url, email , business cards etc. You can decode QR Code images and get the contents as well. The best and complete QR Code API on the cloud. [Click here to subscribe](http://fungenerators.com/api/qrcode) 
 *
 * The version of the OpenAPI document: 1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIQRCodeApi_H
#define OAI_OAIQRCodeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAI_qrcode_decode_post_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIQRCodeApi : public QObject {
    Q_OBJECT

public:
    OAIQRCodeApi(const int timeOut = 0);
    ~OAIQRCodeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  firstname QString [required]
    * @param[in]  lastname QString [required]
    * @param[in]  email QString [required]
    * @param[in]  middlename QString [optional]
    * @param[in]  company QString [optional]
    * @param[in]  phone_work QString [optional]
    * @param[in]  phone_home QString [optional]
    * @param[in]  phone_cell QString [optional]
    * @param[in]  street1 QString [optional]
    * @param[in]  street2 QString [optional]
    * @param[in]  city QString [optional]
    * @param[in]  zip QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  country QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void qrcodeBusinessCardGet(const QString &firstname, const QString &lastname, const QString &email, const ::OpenAPI::OptionalParam<QString> &middlename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &company = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phone_work = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phone_home = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phone_cell = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &street1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &street2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_qrcode_decode_post_request OAI_qrcode_decode_post_request [required]
    */
    virtual void qrcodeDecodePost(const OAI_qrcode_decode_post_request &oai_qrcode_decode_post_request);

    /**
    * @param[in]  email QString [required]
    * @param[in]  subject QString [optional]
    * @param[in]  body QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void qrcodeEmailGet(const QString &email, const ::OpenAPI::OptionalParam<QString> &subject = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  number QString [required]
    * @param[in]  format QString [optional]
    */
    virtual void qrcodePhoneGet(const QString &number, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  rawtext QString [required]
    * @param[in]  format QString [optional]
    */
    virtual void qrcodeRawGet(const QString &rawtext, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  format QString [optional]
    */
    virtual void qrcodeSkypeGet(const QString &username, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  number QString [required]
    * @param[in]  format QString [optional]
    */
    virtual void qrcodeSmsGet(const QString &number, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  text QString [required]
    * @param[in]  format QString [optional]
    */
    virtual void qrcodeTextGet(const QString &text, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  url QString [required]
    * @param[in]  format QString [optional]
    */
    virtual void qrcodeUrlGet(const QString &url, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void qrcodeBusinessCardGetCallback(OAIHttpRequestWorker *worker);
    void qrcodeDecodePostCallback(OAIHttpRequestWorker *worker);
    void qrcodeEmailGetCallback(OAIHttpRequestWorker *worker);
    void qrcodePhoneGetCallback(OAIHttpRequestWorker *worker);
    void qrcodeRawGetCallback(OAIHttpRequestWorker *worker);
    void qrcodeSkypeGetCallback(OAIHttpRequestWorker *worker);
    void qrcodeSmsGetCallback(OAIHttpRequestWorker *worker);
    void qrcodeTextGetCallback(OAIHttpRequestWorker *worker);
    void qrcodeUrlGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void qrcodeBusinessCardGetSignal();
    void qrcodeDecodePostSignal();
    void qrcodeEmailGetSignal();
    void qrcodePhoneGetSignal();
    void qrcodeRawGetSignal();
    void qrcodeSkypeGetSignal();
    void qrcodeSmsGetSignal();
    void qrcodeTextGetSignal();
    void qrcodeUrlGetSignal();


    void qrcodeBusinessCardGetSignalFull(OAIHttpRequestWorker *worker);
    void qrcodeDecodePostSignalFull(OAIHttpRequestWorker *worker);
    void qrcodeEmailGetSignalFull(OAIHttpRequestWorker *worker);
    void qrcodePhoneGetSignalFull(OAIHttpRequestWorker *worker);
    void qrcodeRawGetSignalFull(OAIHttpRequestWorker *worker);
    void qrcodeSkypeGetSignalFull(OAIHttpRequestWorker *worker);
    void qrcodeSmsGetSignalFull(OAIHttpRequestWorker *worker);
    void qrcodeTextGetSignalFull(OAIHttpRequestWorker *worker);
    void qrcodeUrlGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use qrcodeBusinessCardGetSignalError() instead")
    void qrcodeBusinessCardGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void qrcodeBusinessCardGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use qrcodeDecodePostSignalError() instead")
    void qrcodeDecodePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void qrcodeDecodePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use qrcodeEmailGetSignalError() instead")
    void qrcodeEmailGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void qrcodeEmailGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use qrcodePhoneGetSignalError() instead")
    void qrcodePhoneGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void qrcodePhoneGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use qrcodeRawGetSignalError() instead")
    void qrcodeRawGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void qrcodeRawGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use qrcodeSkypeGetSignalError() instead")
    void qrcodeSkypeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void qrcodeSkypeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use qrcodeSmsGetSignalError() instead")
    void qrcodeSmsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void qrcodeSmsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use qrcodeTextGetSignalError() instead")
    void qrcodeTextGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void qrcodeTextGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use qrcodeUrlGetSignalError() instead")
    void qrcodeUrlGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void qrcodeUrlGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use qrcodeBusinessCardGetSignalErrorFull() instead")
    void qrcodeBusinessCardGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void qrcodeBusinessCardGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use qrcodeDecodePostSignalErrorFull() instead")
    void qrcodeDecodePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void qrcodeDecodePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use qrcodeEmailGetSignalErrorFull() instead")
    void qrcodeEmailGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void qrcodeEmailGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use qrcodePhoneGetSignalErrorFull() instead")
    void qrcodePhoneGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void qrcodePhoneGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use qrcodeRawGetSignalErrorFull() instead")
    void qrcodeRawGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void qrcodeRawGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use qrcodeSkypeGetSignalErrorFull() instead")
    void qrcodeSkypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void qrcodeSkypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use qrcodeSmsGetSignalErrorFull() instead")
    void qrcodeSmsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void qrcodeSmsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use qrcodeTextGetSignalErrorFull() instead")
    void qrcodeTextGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void qrcodeTextGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use qrcodeUrlGetSignalErrorFull() instead")
    void qrcodeUrlGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void qrcodeUrlGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
