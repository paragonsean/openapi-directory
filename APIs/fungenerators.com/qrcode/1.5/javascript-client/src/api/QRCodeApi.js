/**
 * Fun Generators API
 * Fungenerators API gives access to the full set of generators available at fungenerators.com so that you can integrate them in your workflow or an app. [Click here to get details and subscribe](http://fungenerators.com/api) . Here are the individual API links:    ## QR Code API ##   Generate QR Code images for text, url, email , business cards etc. You can decode QR Code images and get the contents as well. The best and complete QR Code API on the cloud. [Click here to subscribe](http://fungenerators.com/api/qrcode) 
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import QrcodeDecodePostRequest from '../model/QrcodeDecodePostRequest';

/**
* QRCode service.
* @module api/QRCodeApi
* @version 1.5
*/
export default class QRCodeApi {

    /**
    * Constructs a new QRCodeApi. 
    * @alias module:api/QRCodeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the qrcodeBusinessCardGet operation.
     * @callback module:api/QRCodeApi~qrcodeBusinessCardGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a QR Code image for a business card aka VCARD
     * @param {String} firstname First Name
     * @param {String} lastname Last Name
     * @param {String} email Email id
     * @param {Object} opts Optional parameters
     * @param {String} [middlename] Middle Name
     * @param {String} [company] Company Name
     * @param {String} [phoneWork] Work Phone Number
     * @param {String} [phoneHome] Home Phone Number
     * @param {String} [phoneCell] Cell Phone Number
     * @param {String} [street1] Street Address
     * @param {String} [street2] Street Address 2
     * @param {String} [city] City
     * @param {String} [zip] Zip Code
     * @param {String} [state] State
     * @param {String} [country] Country
     * @param {String} [format] Output image format. Must be one of png/eps/raw/svg
     * @param {module:api/QRCodeApi~qrcodeBusinessCardGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    qrcodeBusinessCardGet(firstname, lastname, email, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'firstname' is set
      if (firstname === undefined || firstname === null) {
        throw new Error("Missing the required parameter 'firstname' when calling qrcodeBusinessCardGet");
      }
      // verify the required parameter 'lastname' is set
      if (lastname === undefined || lastname === null) {
        throw new Error("Missing the required parameter 'lastname' when calling qrcodeBusinessCardGet");
      }
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling qrcodeBusinessCardGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'firstname': firstname,
        'lastname': lastname,
        'middlename': opts['middlename'],
        'email': email,
        'company': opts['company'],
        'phone_work': opts['phoneWork'],
        'phone_home': opts['phoneHome'],
        'phone_cell': opts['phoneCell'],
        'street1': opts['street1'],
        'street2': opts['street2'],
        'city': opts['city'],
        'zip': opts['zip'],
        'state': opts['state'],
        'country': opts['country'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/qrcode/business_card', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qrcodeDecodePost operation.
     * @callback module:api/QRCodeApi~qrcodeDecodePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Decode a QR Code image and return the cotents if successful
     * @param {module:model/QrcodeDecodePostRequest} qrcodeDecodePostRequest 
     * @param {module:api/QRCodeApi~qrcodeDecodePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    qrcodeDecodePost(qrcodeDecodePostRequest, callback) {
      let postBody = qrcodeDecodePostRequest;
      // verify the required parameter 'qrcodeDecodePostRequest' is set
      if (qrcodeDecodePostRequest === undefined || qrcodeDecodePostRequest === null) {
        throw new Error("Missing the required parameter 'qrcodeDecodePostRequest' when calling qrcodeDecodePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = ['mulitpart/form-data', 'mulitpart/form-data-endcoded', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/qrcode/decode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qrcodeEmailGet operation.
     * @callback module:api/QRCodeApi~qrcodeEmailGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a QR Code image for an email
     * @param {String} email Email id to send the email to
     * @param {Object} opts Optional parameters
     * @param {String} [subject] Subject of the email(optional)
     * @param {String} [body] Body of the email(optional)
     * @param {String} [format] Output image format. Must be one of png/png/eps/raw/svg
     * @param {module:api/QRCodeApi~qrcodeEmailGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    qrcodeEmailGet(email, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling qrcodeEmailGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'email': email,
        'subject': opts['subject'],
        'body': opts['body'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/qrcode/email', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qrcodePhoneGet operation.
     * @callback module:api/QRCodeApi~qrcodePhoneGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a QR Code image for a phone number
     * @param {String} number Phone Number
     * @param {Object} opts Optional parameters
     * @param {String} [format] Output image format. Must be one of png/eps/raw/svg
     * @param {module:api/QRCodeApi~qrcodePhoneGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    qrcodePhoneGet(number, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling qrcodePhoneGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'number': number,
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/qrcode/phone', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qrcodeRawGet operation.
     * @callback module:api/QRCodeApi~qrcodeRawGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a QR Code image for a block of raw data
     * @param {String} rawtext Raw Text value
     * @param {Object} opts Optional parameters
     * @param {String} [format] Output image format. Must be one of png/eps/raw/svg
     * @param {module:api/QRCodeApi~qrcodeRawGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    qrcodeRawGet(rawtext, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'rawtext' is set
      if (rawtext === undefined || rawtext === null) {
        throw new Error("Missing the required parameter 'rawtext' when calling qrcodeRawGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'rawtext': rawtext,
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/qrcode/raw', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qrcodeSkypeGet operation.
     * @callback module:api/QRCodeApi~qrcodeSkypeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a QR Code image for a skype user
     * @param {String} username Skype User name
     * @param {Object} opts Optional parameters
     * @param {String} [format] Output image format. Must be one of png/eps/raw/svg
     * @param {module:api/QRCodeApi~qrcodeSkypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    qrcodeSkypeGet(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling qrcodeSkypeGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'username': username,
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/qrcode/skype', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qrcodeSmsGet operation.
     * @callback module:api/QRCodeApi~qrcodeSmsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a QR Code image for a Phone number for SMS messaging
     * @param {String} number Phone Number to SMS
     * @param {Object} opts Optional parameters
     * @param {String} [format] Output image format. Must be one of png/eps/raw/svg
     * @param {module:api/QRCodeApi~qrcodeSmsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    qrcodeSmsGet(number, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'number' is set
      if (number === undefined || number === null) {
        throw new Error("Missing the required parameter 'number' when calling qrcodeSmsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'number': number,
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/qrcode/sms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qrcodeTextGet operation.
     * @callback module:api/QRCodeApi~qrcodeTextGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a QR Code image for a block of text
     * @param {String} text Text value
     * @param {Object} opts Optional parameters
     * @param {String} [format] Output image format. Must be one of png/eps/raw/svg
     * @param {module:api/QRCodeApi~qrcodeTextGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    qrcodeTextGet(text, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling qrcodeTextGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'text': text,
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/qrcode/text', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qrcodeUrlGet operation.
     * @callback module:api/QRCodeApi~qrcodeUrlGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a QR Code image for a url
     * @param {String} url URL value
     * @param {Object} opts Optional parameters
     * @param {String} [format] Output image format. Must be one of png/raw/eps/svg
     * @param {module:api/QRCodeApi~qrcodeUrlGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    qrcodeUrlGet(url, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling qrcodeUrlGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url,
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/qrcode/url', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
