/*
 * Fun Generators API
 * Fungenerators API gives access to the full set of generators available at fungenerators.com so that you can integrate them in your workflow or an app. [Click here to get details and subscribe](http://fungenerators.com/api) . Here are the individual API links:    ## QR Code API ##   Generate QR Code images for text, url, email , business cards etc. You can decode QR Code images and get the contents as well. The best and complete QR Code API on the cloud. [Click here to subscribe](http://fungenerators.com/api/qrcode) 
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.QrcodeDecodePostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QrCodeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QrCodeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QrCodeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for qrcodeBusinessCardGet
     * @param firstname First Name (required)
     * @param lastname Last Name (required)
     * @param email Email id (required)
     * @param middlename Middle Name (optional)
     * @param company Company Name (optional)
     * @param phoneWork Work Phone Number (optional)
     * @param phoneHome Home Phone Number (optional)
     * @param phoneCell Cell Phone Number (optional)
     * @param street1 Street Address (optional)
     * @param street2 Street Address 2 (optional)
     * @param city City (optional)
     * @param zip Zip Code (optional)
     * @param state State (optional)
     * @param country Country (optional)
     * @param format Output image format. Must be one of png/eps/raw/svg (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qrcodeBusinessCardGetCall(String firstname, String lastname, String email, String middlename, String company, String phoneWork, String phoneHome, String phoneCell, String street1, String street2, String city, String zip, String state, String country, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qrcode/business_card";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (firstname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstname", firstname));
        }

        if (lastname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastname", lastname));
        }

        if (middlename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("middlename", middlename));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (company != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("company", company));
        }

        if (phoneWork != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phone_work", phoneWork));
        }

        if (phoneHome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phone_home", phoneHome));
        }

        if (phoneCell != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phone_cell", phoneCell));
        }

        if (street1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("street1", street1));
        }

        if (street2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("street2", street2));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (zip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip", zip));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Fungenerators-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qrcodeBusinessCardGetValidateBeforeCall(String firstname, String lastname, String email, String middlename, String company, String phoneWork, String phoneHome, String phoneCell, String street1, String street2, String city, String zip, String state, String country, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'firstname' is set
        if (firstname == null) {
            throw new ApiException("Missing the required parameter 'firstname' when calling qrcodeBusinessCardGet(Async)");
        }

        // verify the required parameter 'lastname' is set
        if (lastname == null) {
            throw new ApiException("Missing the required parameter 'lastname' when calling qrcodeBusinessCardGet(Async)");
        }

        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling qrcodeBusinessCardGet(Async)");
        }

        return qrcodeBusinessCardGetCall(firstname, lastname, email, middlename, company, phoneWork, phoneHome, phoneCell, street1, street2, city, zip, state, country, format, _callback);

    }

    /**
     * 
     * Get a QR Code image for a business card aka VCARD
     * @param firstname First Name (required)
     * @param lastname Last Name (required)
     * @param email Email id (required)
     * @param middlename Middle Name (optional)
     * @param company Company Name (optional)
     * @param phoneWork Work Phone Number (optional)
     * @param phoneHome Home Phone Number (optional)
     * @param phoneCell Cell Phone Number (optional)
     * @param street1 Street Address (optional)
     * @param street2 Street Address 2 (optional)
     * @param city City (optional)
     * @param zip Zip Code (optional)
     * @param state State (optional)
     * @param country Country (optional)
     * @param format Output image format. Must be one of png/eps/raw/svg (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public void qrcodeBusinessCardGet(String firstname, String lastname, String email, String middlename, String company, String phoneWork, String phoneHome, String phoneCell, String street1, String street2, String city, String zip, String state, String country, String format) throws ApiException {
        qrcodeBusinessCardGetWithHttpInfo(firstname, lastname, email, middlename, company, phoneWork, phoneHome, phoneCell, street1, street2, city, zip, state, country, format);
    }

    /**
     * 
     * Get a QR Code image for a business card aka VCARD
     * @param firstname First Name (required)
     * @param lastname Last Name (required)
     * @param email Email id (required)
     * @param middlename Middle Name (optional)
     * @param company Company Name (optional)
     * @param phoneWork Work Phone Number (optional)
     * @param phoneHome Home Phone Number (optional)
     * @param phoneCell Cell Phone Number (optional)
     * @param street1 Street Address (optional)
     * @param street2 Street Address 2 (optional)
     * @param city City (optional)
     * @param zip Zip Code (optional)
     * @param state State (optional)
     * @param country Country (optional)
     * @param format Output image format. Must be one of png/eps/raw/svg (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> qrcodeBusinessCardGetWithHttpInfo(String firstname, String lastname, String email, String middlename, String company, String phoneWork, String phoneHome, String phoneCell, String street1, String street2, String city, String zip, String state, String country, String format) throws ApiException {
        okhttp3.Call localVarCall = qrcodeBusinessCardGetValidateBeforeCall(firstname, lastname, email, middlename, company, phoneWork, phoneHome, phoneCell, street1, street2, city, zip, state, country, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get a QR Code image for a business card aka VCARD
     * @param firstname First Name (required)
     * @param lastname Last Name (required)
     * @param email Email id (required)
     * @param middlename Middle Name (optional)
     * @param company Company Name (optional)
     * @param phoneWork Work Phone Number (optional)
     * @param phoneHome Home Phone Number (optional)
     * @param phoneCell Cell Phone Number (optional)
     * @param street1 Street Address (optional)
     * @param street2 Street Address 2 (optional)
     * @param city City (optional)
     * @param zip Zip Code (optional)
     * @param state State (optional)
     * @param country Country (optional)
     * @param format Output image format. Must be one of png/eps/raw/svg (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qrcodeBusinessCardGetAsync(String firstname, String lastname, String email, String middlename, String company, String phoneWork, String phoneHome, String phoneCell, String street1, String street2, String city, String zip, String state, String country, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = qrcodeBusinessCardGetValidateBeforeCall(firstname, lastname, email, middlename, company, phoneWork, phoneHome, phoneCell, street1, street2, city, zip, state, country, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for qrcodeDecodePost
     * @param qrcodeDecodePostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qrcodeDecodePostCall(QrcodeDecodePostRequest qrcodeDecodePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = qrcodeDecodePostRequest;

        // create path and map variables
        String localVarPath = "/qrcode/decode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "mulitpart/form-data",
            "mulitpart/form-data-endcoded",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Fungenerators-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qrcodeDecodePostValidateBeforeCall(QrcodeDecodePostRequest qrcodeDecodePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qrcodeDecodePostRequest' is set
        if (qrcodeDecodePostRequest == null) {
            throw new ApiException("Missing the required parameter 'qrcodeDecodePostRequest' when calling qrcodeDecodePost(Async)");
        }

        return qrcodeDecodePostCall(qrcodeDecodePostRequest, _callback);

    }

    /**
     * 
     * Decode a QR Code image and return the cotents if successful
     * @param qrcodeDecodePostRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public void qrcodeDecodePost(QrcodeDecodePostRequest qrcodeDecodePostRequest) throws ApiException {
        qrcodeDecodePostWithHttpInfo(qrcodeDecodePostRequest);
    }

    /**
     * 
     * Decode a QR Code image and return the cotents if successful
     * @param qrcodeDecodePostRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> qrcodeDecodePostWithHttpInfo(QrcodeDecodePostRequest qrcodeDecodePostRequest) throws ApiException {
        okhttp3.Call localVarCall = qrcodeDecodePostValidateBeforeCall(qrcodeDecodePostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Decode a QR Code image and return the cotents if successful
     * @param qrcodeDecodePostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qrcodeDecodePostAsync(QrcodeDecodePostRequest qrcodeDecodePostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = qrcodeDecodePostValidateBeforeCall(qrcodeDecodePostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for qrcodeEmailGet
     * @param email Email id to send the email to (required)
     * @param subject Subject of the email(optional) (optional)
     * @param body Body of the email(optional) (optional)
     * @param format Output image format. Must be one of png/png/eps/raw/svg (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qrcodeEmailGetCall(String email, String subject, String body, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qrcode/email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (subject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subject", subject));
        }

        if (body != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body", body));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Fungenerators-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qrcodeEmailGetValidateBeforeCall(String email, String subject, String body, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling qrcodeEmailGet(Async)");
        }

        return qrcodeEmailGetCall(email, subject, body, format, _callback);

    }

    /**
     * 
     * Get a QR Code image for an email
     * @param email Email id to send the email to (required)
     * @param subject Subject of the email(optional) (optional)
     * @param body Body of the email(optional) (optional)
     * @param format Output image format. Must be one of png/png/eps/raw/svg (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public void qrcodeEmailGet(String email, String subject, String body, String format) throws ApiException {
        qrcodeEmailGetWithHttpInfo(email, subject, body, format);
    }

    /**
     * 
     * Get a QR Code image for an email
     * @param email Email id to send the email to (required)
     * @param subject Subject of the email(optional) (optional)
     * @param body Body of the email(optional) (optional)
     * @param format Output image format. Must be one of png/png/eps/raw/svg (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> qrcodeEmailGetWithHttpInfo(String email, String subject, String body, String format) throws ApiException {
        okhttp3.Call localVarCall = qrcodeEmailGetValidateBeforeCall(email, subject, body, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get a QR Code image for an email
     * @param email Email id to send the email to (required)
     * @param subject Subject of the email(optional) (optional)
     * @param body Body of the email(optional) (optional)
     * @param format Output image format. Must be one of png/png/eps/raw/svg (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qrcodeEmailGetAsync(String email, String subject, String body, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = qrcodeEmailGetValidateBeforeCall(email, subject, body, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for qrcodePhoneGet
     * @param number Phone Number (required)
     * @param format Output image format. Must be one of png/eps/raw/svg (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qrcodePhoneGetCall(String number, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qrcode/phone";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Fungenerators-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qrcodePhoneGetValidateBeforeCall(String number, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling qrcodePhoneGet(Async)");
        }

        return qrcodePhoneGetCall(number, format, _callback);

    }

    /**
     * 
     * Get a QR Code image for a phone number
     * @param number Phone Number (required)
     * @param format Output image format. Must be one of png/eps/raw/svg (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public void qrcodePhoneGet(String number, String format) throws ApiException {
        qrcodePhoneGetWithHttpInfo(number, format);
    }

    /**
     * 
     * Get a QR Code image for a phone number
     * @param number Phone Number (required)
     * @param format Output image format. Must be one of png/eps/raw/svg (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> qrcodePhoneGetWithHttpInfo(String number, String format) throws ApiException {
        okhttp3.Call localVarCall = qrcodePhoneGetValidateBeforeCall(number, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get a QR Code image for a phone number
     * @param number Phone Number (required)
     * @param format Output image format. Must be one of png/eps/raw/svg (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qrcodePhoneGetAsync(String number, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = qrcodePhoneGetValidateBeforeCall(number, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for qrcodeRawGet
     * @param rawtext Raw Text value (required)
     * @param format Output image format. Must be one of png/eps/raw/svg (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qrcodeRawGetCall(String rawtext, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qrcode/raw";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rawtext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rawtext", rawtext));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Fungenerators-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qrcodeRawGetValidateBeforeCall(String rawtext, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rawtext' is set
        if (rawtext == null) {
            throw new ApiException("Missing the required parameter 'rawtext' when calling qrcodeRawGet(Async)");
        }

        return qrcodeRawGetCall(rawtext, format, _callback);

    }

    /**
     * 
     * Get a QR Code image for a block of raw data
     * @param rawtext Raw Text value (required)
     * @param format Output image format. Must be one of png/eps/raw/svg (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public void qrcodeRawGet(String rawtext, String format) throws ApiException {
        qrcodeRawGetWithHttpInfo(rawtext, format);
    }

    /**
     * 
     * Get a QR Code image for a block of raw data
     * @param rawtext Raw Text value (required)
     * @param format Output image format. Must be one of png/eps/raw/svg (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> qrcodeRawGetWithHttpInfo(String rawtext, String format) throws ApiException {
        okhttp3.Call localVarCall = qrcodeRawGetValidateBeforeCall(rawtext, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get a QR Code image for a block of raw data
     * @param rawtext Raw Text value (required)
     * @param format Output image format. Must be one of png/eps/raw/svg (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qrcodeRawGetAsync(String rawtext, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = qrcodeRawGetValidateBeforeCall(rawtext, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for qrcodeSkypeGet
     * @param username Skype User name (required)
     * @param format Output image format. Must be one of png/eps/raw/svg (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qrcodeSkypeGetCall(String username, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qrcode/skype";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Fungenerators-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qrcodeSkypeGetValidateBeforeCall(String username, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling qrcodeSkypeGet(Async)");
        }

        return qrcodeSkypeGetCall(username, format, _callback);

    }

    /**
     * 
     * Get a QR Code image for a skype user
     * @param username Skype User name (required)
     * @param format Output image format. Must be one of png/eps/raw/svg (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public void qrcodeSkypeGet(String username, String format) throws ApiException {
        qrcodeSkypeGetWithHttpInfo(username, format);
    }

    /**
     * 
     * Get a QR Code image for a skype user
     * @param username Skype User name (required)
     * @param format Output image format. Must be one of png/eps/raw/svg (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> qrcodeSkypeGetWithHttpInfo(String username, String format) throws ApiException {
        okhttp3.Call localVarCall = qrcodeSkypeGetValidateBeforeCall(username, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get a QR Code image for a skype user
     * @param username Skype User name (required)
     * @param format Output image format. Must be one of png/eps/raw/svg (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qrcodeSkypeGetAsync(String username, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = qrcodeSkypeGetValidateBeforeCall(username, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for qrcodeSmsGet
     * @param number Phone Number to SMS (required)
     * @param format Output image format. Must be one of png/eps/raw/svg (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qrcodeSmsGetCall(String number, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qrcode/sms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Fungenerators-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qrcodeSmsGetValidateBeforeCall(String number, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling qrcodeSmsGet(Async)");
        }

        return qrcodeSmsGetCall(number, format, _callback);

    }

    /**
     * 
     * Get a QR Code image for a Phone number for SMS messaging
     * @param number Phone Number to SMS (required)
     * @param format Output image format. Must be one of png/eps/raw/svg (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public void qrcodeSmsGet(String number, String format) throws ApiException {
        qrcodeSmsGetWithHttpInfo(number, format);
    }

    /**
     * 
     * Get a QR Code image for a Phone number for SMS messaging
     * @param number Phone Number to SMS (required)
     * @param format Output image format. Must be one of png/eps/raw/svg (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> qrcodeSmsGetWithHttpInfo(String number, String format) throws ApiException {
        okhttp3.Call localVarCall = qrcodeSmsGetValidateBeforeCall(number, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get a QR Code image for a Phone number for SMS messaging
     * @param number Phone Number to SMS (required)
     * @param format Output image format. Must be one of png/eps/raw/svg (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qrcodeSmsGetAsync(String number, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = qrcodeSmsGetValidateBeforeCall(number, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for qrcodeTextGet
     * @param text Text value (required)
     * @param format Output image format. Must be one of png/eps/raw/svg (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qrcodeTextGetCall(String text, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qrcode/text";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Fungenerators-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qrcodeTextGetValidateBeforeCall(String text, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling qrcodeTextGet(Async)");
        }

        return qrcodeTextGetCall(text, format, _callback);

    }

    /**
     * 
     * Get a QR Code image for a block of text
     * @param text Text value (required)
     * @param format Output image format. Must be one of png/eps/raw/svg (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public void qrcodeTextGet(String text, String format) throws ApiException {
        qrcodeTextGetWithHttpInfo(text, format);
    }

    /**
     * 
     * Get a QR Code image for a block of text
     * @param text Text value (required)
     * @param format Output image format. Must be one of png/eps/raw/svg (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> qrcodeTextGetWithHttpInfo(String text, String format) throws ApiException {
        okhttp3.Call localVarCall = qrcodeTextGetValidateBeforeCall(text, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get a QR Code image for a block of text
     * @param text Text value (required)
     * @param format Output image format. Must be one of png/eps/raw/svg (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qrcodeTextGetAsync(String text, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = qrcodeTextGetValidateBeforeCall(text, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for qrcodeUrlGet
     * @param url URL value (required)
     * @param format Output image format. Must be one of png/raw/eps/svg (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qrcodeUrlGetCall(String url, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qrcode/url";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Fungenerators-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qrcodeUrlGetValidateBeforeCall(String url, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling qrcodeUrlGet(Async)");
        }

        return qrcodeUrlGetCall(url, format, _callback);

    }

    /**
     * 
     * Get a QR Code image for a url
     * @param url URL value (required)
     * @param format Output image format. Must be one of png/raw/eps/svg (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public void qrcodeUrlGet(String url, String format) throws ApiException {
        qrcodeUrlGetWithHttpInfo(url, format);
    }

    /**
     * 
     * Get a QR Code image for a url
     * @param url URL value (required)
     * @param format Output image format. Must be one of png/raw/eps/svg (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> qrcodeUrlGetWithHttpInfo(String url, String format) throws ApiException {
        okhttp3.Call localVarCall = qrcodeUrlGetValidateBeforeCall(url, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get a QR Code image for a url
     * @param url URL value (required)
     * @param format Output image format. Must be one of png/raw/eps/svg (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qrcodeUrlGetAsync(String url, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = qrcodeUrlGetValidateBeforeCall(url, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
