/**
 * Fun Generators API
 * Below is the documentation for the API calls. You can try them out right here.  
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Trivia service.
* @module api/TriviaApi
* @version 1.5
*/
export default class TriviaApi {

    /**
    * Constructs a new TriviaApi. 
    * @alias module:api/TriviaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the triviaCategoriesGet operation.
     * @callback module:api/TriviaApi~triviaCategoriesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a random Trivia.
     * @param {Object} opts Optional parameters
     * @param {Number} [start] start
     * @param {module:api/TriviaApi~triviaCategoriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    triviaCategoriesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/trivia/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the triviaDelete operation.
     * @callback module:api/TriviaApi~triviaDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a random Trivia entry.
     * @param {String} id Trivia ID
     * @param {module:api/TriviaApi~triviaDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    triviaDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling triviaDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/trivia', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the triviaGet operation.
     * @callback module:api/TriviaApi~triviaGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Trivia entry for a given id. Retrieves a trivia question and answer based on the id.
     * @param {Object} opts Optional parameters
     * @param {String} [id] ID of the trivia to fetch
     * @param {module:api/TriviaApi~triviaGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    triviaGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/trivia', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the triviaPut operation.
     * @callback module:api/TriviaApi~triviaPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a random Trivia entry.
     * @param {String} question Trivia Question
     * @param {String} category Category of the trivia
     * @param {String} answer Answer(s) to the trivia question
     * @param {module:api/TriviaApi~triviaPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    triviaPut(question, category, answer, callback) {
      let postBody = null;
      // verify the required parameter 'question' is set
      if (question === undefined || question === null) {
        throw new Error("Missing the required parameter 'question' when calling triviaPut");
      }
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling triviaPut");
      }
      // verify the required parameter 'answer' is set
      if (answer === undefined || answer === null) {
        throw new Error("Missing the required parameter 'answer' when calling triviaPut");
      }

      let pathParams = {
      };
      let queryParams = {
        'question': question,
        'category': category,
        'answer': answer
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/trivia', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the triviaRandomGet operation.
     * @callback module:api/TriviaApi~triviaRandomGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a random trivia for a given category(optional)
     * @param {Object} opts Optional parameters
     * @param {String} [category] Category to get the trivia from
     * @param {module:api/TriviaApi~triviaRandomGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    triviaRandomGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'category': opts['category']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/trivia/random', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the triviaSearchGet operation.
     * @callback module:api/TriviaApi~triviaSearchGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for random trivia which has the text in the query, for a given category(optional).
     * @param {Object} opts Optional parameters
     * @param {String} [query] Text to search for in the trivia
     * @param {String} [category] Category to get the trivia from
     * @param {module:api/TriviaApi~triviaSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    triviaSearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'category': opts['category']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/trivia/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
