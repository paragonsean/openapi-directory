/**
 * Fun Generators API
 * Below is the documentation for the API calls. You can try them out right here.  
 *
 * The version of the OpenAPI document: 1.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITriviaApi_H
#define OAI_OAITriviaApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITriviaApi : public QObject {
    Q_OBJECT

public:
    OAITriviaApi(const int timeOut = 0);
    ~OAITriviaApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  start qint32 [optional]
    */
    virtual void triviaCategoriesGet(const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void triviaDelete(const QString &id);

    /**
    * @param[in]  id QString [optional]
    */
    virtual void triviaGet(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  question QString [required]
    * @param[in]  category QString [required]
    * @param[in]  answer QString [required]
    */
    virtual void triviaPut(const QString &question, const QString &category, const QString &answer);

    /**
    * @param[in]  category QString [optional]
    */
    virtual void triviaRandomGet(const ::OpenAPI::OptionalParam<QString> &category = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  category QString [optional]
    */
    virtual void triviaSearchGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void triviaCategoriesGetCallback(OAIHttpRequestWorker *worker);
    void triviaDeleteCallback(OAIHttpRequestWorker *worker);
    void triviaGetCallback(OAIHttpRequestWorker *worker);
    void triviaPutCallback(OAIHttpRequestWorker *worker);
    void triviaRandomGetCallback(OAIHttpRequestWorker *worker);
    void triviaSearchGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void triviaCategoriesGetSignal();
    void triviaDeleteSignal();
    void triviaGetSignal();
    void triviaPutSignal();
    void triviaRandomGetSignal();
    void triviaSearchGetSignal();


    void triviaCategoriesGetSignalFull(OAIHttpRequestWorker *worker);
    void triviaDeleteSignalFull(OAIHttpRequestWorker *worker);
    void triviaGetSignalFull(OAIHttpRequestWorker *worker);
    void triviaPutSignalFull(OAIHttpRequestWorker *worker);
    void triviaRandomGetSignalFull(OAIHttpRequestWorker *worker);
    void triviaSearchGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use triviaCategoriesGetSignalError() instead")
    void triviaCategoriesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void triviaCategoriesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use triviaDeleteSignalError() instead")
    void triviaDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void triviaDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use triviaGetSignalError() instead")
    void triviaGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void triviaGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use triviaPutSignalError() instead")
    void triviaPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void triviaPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use triviaRandomGetSignalError() instead")
    void triviaRandomGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void triviaRandomGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use triviaSearchGetSignalError() instead")
    void triviaSearchGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void triviaSearchGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use triviaCategoriesGetSignalErrorFull() instead")
    void triviaCategoriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void triviaCategoriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use triviaDeleteSignalErrorFull() instead")
    void triviaDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void triviaDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use triviaGetSignalErrorFull() instead")
    void triviaGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void triviaGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use triviaPutSignalErrorFull() instead")
    void triviaPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void triviaPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use triviaRandomGetSignalErrorFull() instead")
    void triviaRandomGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void triviaRandomGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use triviaSearchGetSignalErrorFull() instead")
    void triviaSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void triviaSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
