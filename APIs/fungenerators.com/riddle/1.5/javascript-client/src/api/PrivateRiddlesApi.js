/**
 * Fun Generators API
 * Below is the documentation for the API calls. You can try them out right here.  
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* PrivateRiddles service.
* @module api/PrivateRiddlesApi
* @version 1.5
*/
export default class PrivateRiddlesApi {

    /**
    * Constructs a new PrivateRiddlesApi. 
    * @alias module:api/PrivateRiddlesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the riddleDelete operation.
     * @callback module:api/PrivateRiddlesApi~riddleDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a random Riddle entry.
     * @param {String} id Riddle ID
     * @param {module:api/PrivateRiddlesApi~riddleDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    riddleDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling riddleDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/riddle', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the riddleGet operation.
     * @callback module:api/PrivateRiddlesApi~riddleGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Riddle entry for a given id. Retrieves a riddle question and answer based on the id.
     * @param {Object} opts Optional parameters
     * @param {String} [id] ID of the riddle to fetch
     * @param {module:api/PrivateRiddlesApi~riddleGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    riddleGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/riddle', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the riddlePost operation.
     * @callback module:api/PrivateRiddlesApi~riddlePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a random Riddle entry. Same as 'PUT' but can be used when some of the client libraries don't support 'PUT'.
     * @param {String} question Riddle Question
     * @param {String} category Category of the riddle
     * @param {String} answer Answer(s) to the riddle question
     * @param {module:api/PrivateRiddlesApi~riddlePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    riddlePost(question, category, answer, callback) {
      let postBody = null;
      // verify the required parameter 'question' is set
      if (question === undefined || question === null) {
        throw new Error("Missing the required parameter 'question' when calling riddlePost");
      }
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling riddlePost");
      }
      // verify the required parameter 'answer' is set
      if (answer === undefined || answer === null) {
        throw new Error("Missing the required parameter 'answer' when calling riddlePost");
      }

      let pathParams = {
      };
      let queryParams = {
        'question': question,
        'category': category,
        'answer': answer
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/riddle', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the riddlePut operation.
     * @callback module:api/PrivateRiddlesApi~riddlePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a random Riddle entry.
     * @param {String} question Riddle Question
     * @param {String} category Category of the riddle
     * @param {String} answer Answer(s) to the riddle question
     * @param {module:api/PrivateRiddlesApi~riddlePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    riddlePut(question, category, answer, callback) {
      let postBody = null;
      // verify the required parameter 'question' is set
      if (question === undefined || question === null) {
        throw new Error("Missing the required parameter 'question' when calling riddlePut");
      }
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling riddlePut");
      }
      // verify the required parameter 'answer' is set
      if (answer === undefined || answer === null) {
        throw new Error("Missing the required parameter 'answer' when calling riddlePut");
      }

      let pathParams = {
      };
      let queryParams = {
        'question': question,
        'category': category,
        'answer': answer
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-Fungenerators-Api-Secret'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/riddle', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
