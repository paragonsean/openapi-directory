/*
 * Fun Generators API
 * Below is the documentation for the API calls. You can try them out right here.  
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PrivateRiddlesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PrivateRiddlesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PrivateRiddlesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for riddleDelete
     * @param id Riddle ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riddleDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/riddle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Fungenerators-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riddleDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling riddleDelete(Async)");
        }

        return riddleDeleteCall(id, _callback);

    }

    /**
     * 
     * Create a random Riddle entry.
     * @param id Riddle ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public void riddleDelete(String id) throws ApiException {
        riddleDeleteWithHttpInfo(id);
    }

    /**
     * 
     * Create a random Riddle entry.
     * @param id Riddle ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> riddleDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = riddleDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Create a random Riddle entry.
     * @param id Riddle ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riddleDeleteAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = riddleDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for riddleGet
     * @param id ID of the riddle to fetch (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riddleGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/riddle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Fungenerators-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riddleGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        return riddleGetCall(id, _callback);

    }

    /**
     * 
     * Get a Riddle entry for a given id. Retrieves a riddle question and answer based on the id.
     * @param id ID of the riddle to fetch (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public void riddleGet(String id) throws ApiException {
        riddleGetWithHttpInfo(id);
    }

    /**
     * 
     * Get a Riddle entry for a given id. Retrieves a riddle question and answer based on the id.
     * @param id ID of the riddle to fetch (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> riddleGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = riddleGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get a Riddle entry for a given id. Retrieves a riddle question and answer based on the id.
     * @param id ID of the riddle to fetch (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riddleGetAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = riddleGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for riddlePost
     * @param question Riddle Question (required)
     * @param category Category of the riddle (required)
     * @param answer Answer(s) to the riddle question (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riddlePostCall(String question, String category, String answer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/riddle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (question != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("question", question));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (answer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("answer", answer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Fungenerators-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riddlePostValidateBeforeCall(String question, String category, String answer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'question' is set
        if (question == null) {
            throw new ApiException("Missing the required parameter 'question' when calling riddlePost(Async)");
        }

        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling riddlePost(Async)");
        }

        // verify the required parameter 'answer' is set
        if (answer == null) {
            throw new ApiException("Missing the required parameter 'answer' when calling riddlePost(Async)");
        }

        return riddlePostCall(question, category, answer, _callback);

    }

    /**
     * 
     * Create a random Riddle entry. Same as &#39;PUT&#39; but can be used when some of the client libraries don&#39;t support &#39;PUT&#39;.
     * @param question Riddle Question (required)
     * @param category Category of the riddle (required)
     * @param answer Answer(s) to the riddle question (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public void riddlePost(String question, String category, String answer) throws ApiException {
        riddlePostWithHttpInfo(question, category, answer);
    }

    /**
     * 
     * Create a random Riddle entry. Same as &#39;PUT&#39; but can be used when some of the client libraries don&#39;t support &#39;PUT&#39;.
     * @param question Riddle Question (required)
     * @param category Category of the riddle (required)
     * @param answer Answer(s) to the riddle question (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> riddlePostWithHttpInfo(String question, String category, String answer) throws ApiException {
        okhttp3.Call localVarCall = riddlePostValidateBeforeCall(question, category, answer, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Create a random Riddle entry. Same as &#39;PUT&#39; but can be used when some of the client libraries don&#39;t support &#39;PUT&#39;.
     * @param question Riddle Question (required)
     * @param category Category of the riddle (required)
     * @param answer Answer(s) to the riddle question (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riddlePostAsync(String question, String category, String answer, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = riddlePostValidateBeforeCall(question, category, answer, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for riddlePut
     * @param question Riddle Question (required)
     * @param category Category of the riddle (required)
     * @param answer Answer(s) to the riddle question (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riddlePutCall(String question, String category, String answer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/riddle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (question != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("question", question));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (answer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("answer", answer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-Fungenerators-Api-Secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riddlePutValidateBeforeCall(String question, String category, String answer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'question' is set
        if (question == null) {
            throw new ApiException("Missing the required parameter 'question' when calling riddlePut(Async)");
        }

        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling riddlePut(Async)");
        }

        // verify the required parameter 'answer' is set
        if (answer == null) {
            throw new ApiException("Missing the required parameter 'answer' when calling riddlePut(Async)");
        }

        return riddlePutCall(question, category, answer, _callback);

    }

    /**
     * 
     * Create a random Riddle entry.
     * @param question Riddle Question (required)
     * @param category Category of the riddle (required)
     * @param answer Answer(s) to the riddle question (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public void riddlePut(String question, String category, String answer) throws ApiException {
        riddlePutWithHttpInfo(question, category, answer);
    }

    /**
     * 
     * Create a random Riddle entry.
     * @param question Riddle Question (required)
     * @param category Category of the riddle (required)
     * @param answer Answer(s) to the riddle question (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> riddlePutWithHttpInfo(String question, String category, String answer) throws ApiException {
        okhttp3.Call localVarCall = riddlePutValidateBeforeCall(question, category, answer, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Create a random Riddle entry.
     * @param question Riddle Question (required)
     * @param category Category of the riddle (required)
     * @param answer Answer(s) to the riddle question (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riddlePutAsync(String question, String category, String answer, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = riddlePutValidateBeforeCall(question, category, answer, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
