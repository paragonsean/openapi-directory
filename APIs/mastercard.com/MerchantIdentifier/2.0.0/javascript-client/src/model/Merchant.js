/**
 * Merchant Identifier API V2
 * API for Merchant Identifier
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: ADS_Data_Services@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';

/**
 * The Merchant model module.
 * @module model/Merchant
 * @version 2.0.0
 */
class Merchant {
    /**
     * Constructs a new <code>Merchant</code>.
     * @alias module:model/Merchant
     */
    constructor() { 
        
        Merchant.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Merchant</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Merchant} obj Optional instance to populate.
     * @return {module:model/Merchant} The populated <code>Merchant</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Merchant();

            if (data.hasOwnProperty('address')) {
                obj['address'] = Address.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('brandName')) {
                obj['brandName'] = ApiClient.convertToType(data['brandName'], 'String');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('descriptorText')) {
                obj['descriptorText'] = ApiClient.convertToType(data['descriptorText'], 'String');
            }
            if (data.hasOwnProperty('legalCorporateName')) {
                obj['legalCorporateName'] = ApiClient.convertToType(data['legalCorporateName'], 'String');
            }
            if (data.hasOwnProperty('locationId')) {
                obj['locationId'] = ApiClient.convertToType(data['locationId'], 'Number');
            }
            if (data.hasOwnProperty('matchConfidenceScore')) {
                obj['matchConfidenceScore'] = ApiClient.convertToType(data['matchConfidenceScore'], 'Number');
            }
            if (data.hasOwnProperty('merchantCategory')) {
                obj['merchantCategory'] = ApiClient.convertToType(data['merchantCategory'], 'String');
            }
            if (data.hasOwnProperty('merchantDbaName')) {
                obj['merchantDbaName'] = ApiClient.convertToType(data['merchantDbaName'], 'String');
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
            if (data.hasOwnProperty('soleProprietorName')) {
                obj['soleProprietorName'] = ApiClient.convertToType(data['soleProprietorName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Merchant</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Merchant</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          Address.validateJSON(data['address']);
        }
        // ensure the json data is a string
        if (data['brandName'] && !(typeof data['brandName'] === 'string' || data['brandName'] instanceof String)) {
            throw new Error("Expected the field `brandName` to be a primitive type in the JSON string but got " + data['brandName']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['descriptorText'] && !(typeof data['descriptorText'] === 'string' || data['descriptorText'] instanceof String)) {
            throw new Error("Expected the field `descriptorText` to be a primitive type in the JSON string but got " + data['descriptorText']);
        }
        // ensure the json data is a string
        if (data['legalCorporateName'] && !(typeof data['legalCorporateName'] === 'string' || data['legalCorporateName'] instanceof String)) {
            throw new Error("Expected the field `legalCorporateName` to be a primitive type in the JSON string but got " + data['legalCorporateName']);
        }
        // ensure the json data is a string
        if (data['merchantCategory'] && !(typeof data['merchantCategory'] === 'string' || data['merchantCategory'] instanceof String)) {
            throw new Error("Expected the field `merchantCategory` to be a primitive type in the JSON string but got " + data['merchantCategory']);
        }
        // ensure the json data is a string
        if (data['merchantDbaName'] && !(typeof data['merchantDbaName'] === 'string' || data['merchantDbaName'] instanceof String)) {
            throw new Error("Expected the field `merchantDbaName` to be a primitive type in the JSON string but got " + data['merchantDbaName']);
        }
        // ensure the json data is a string
        if (data['phoneNumber'] && !(typeof data['phoneNumber'] === 'string' || data['phoneNumber'] instanceof String)) {
            throw new Error("Expected the field `phoneNumber` to be a primitive type in the JSON string but got " + data['phoneNumber']);
        }
        // ensure the json data is a string
        if (data['soleProprietorName'] && !(typeof data['soleProprietorName'] === 'string' || data['soleProprietorName'] instanceof String)) {
            throw new Error("Expected the field `soleProprietorName` to be a primitive type in the JSON string but got " + data['soleProprietorName']);
        }

        return true;
    }


}



/**
 * @member {module:model/Address} address
 */
Merchant.prototype['address'] = undefined;

/**
 * The brand name of the merchant.
 * @member {String} brandName
 */
Merchant.prototype['brandName'] = undefined;

/**
 * Notes or comments returned about the merchant.
 * @member {String} comment
 */
Merchant.prototype['comment'] = undefined;

/**
 * Descriptor for the merchant provided by the Merchant Service Provider(MSP).
 * @member {String} descriptorText
 */
Merchant.prototype['descriptorText'] = undefined;

/**
 * Corporate legal name of the merchant.
 * @member {String} legalCorporateName
 */
Merchant.prototype['legalCorporateName'] = undefined;

/**
 * Merchant specific location identifier.
 * @member {Number} locationId
 */
Merchant.prototype['locationId'] = undefined;

/**
 * Confidence score (%) to help clients understand the quality of the search results.
 * @member {Number} matchConfidenceScore
 */
Merchant.prototype['matchConfidenceScore'] = undefined;

/**
 * Merchant category code and description associated with the merchant category code for the merchant.   5814 - FAST FOOD RESTAURANTS, 5541 - SERVICE STATIONS WITH OR WITHOUT ANCILLARY SERVICE,   5735 - RECORD SHOPS, 5971 - ART DEALERS AND GALLERIES
 * @member {String} merchantCategory
 */
Merchant.prototype['merchantCategory'] = undefined;

/**
 * Name under which the merchant is 'doing business as'.
 * @member {String} merchantDbaName
 */
Merchant.prototype['merchantDbaName'] = undefined;

/**
 * The phone number of the merchant.
 * @member {String} phoneNumber
 */
Merchant.prototype['phoneNumber'] = undefined;

/**
 * 
 * @member {String} soleProprietorName
 */
Merchant.prototype['soleProprietorName'] = undefined;






export default Merchant;

