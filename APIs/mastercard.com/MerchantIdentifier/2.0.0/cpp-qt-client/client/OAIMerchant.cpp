/**
 * Merchant Identifier API V2
 * API for Merchant Identifier
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: ADS_Data_Services@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMerchant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMerchant::OAIMerchant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMerchant::OAIMerchant() {
    this->initializeModel();
}

OAIMerchant::~OAIMerchant() {}

void OAIMerchant::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_brand_name_isSet = false;
    m_brand_name_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_descriptor_text_isSet = false;
    m_descriptor_text_isValid = false;

    m_legal_corporate_name_isSet = false;
    m_legal_corporate_name_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_match_confidence_score_isSet = false;
    m_match_confidence_score_isValid = false;

    m_merchant_category_isSet = false;
    m_merchant_category_isValid = false;

    m_merchant_dba_name_isSet = false;
    m_merchant_dba_name_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_sole_proprietor_name_isSet = false;
    m_sole_proprietor_name_isValid = false;
}

void OAIMerchant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMerchant::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_brand_name_isValid = ::OpenAPI::fromJsonValue(m_brand_name, json[QString("brandName")]);
    m_brand_name_isSet = !json[QString("brandName")].isNull() && m_brand_name_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_descriptor_text_isValid = ::OpenAPI::fromJsonValue(m_descriptor_text, json[QString("descriptorText")]);
    m_descriptor_text_isSet = !json[QString("descriptorText")].isNull() && m_descriptor_text_isValid;

    m_legal_corporate_name_isValid = ::OpenAPI::fromJsonValue(m_legal_corporate_name, json[QString("legalCorporateName")]);
    m_legal_corporate_name_isSet = !json[QString("legalCorporateName")].isNull() && m_legal_corporate_name_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_match_confidence_score_isValid = ::OpenAPI::fromJsonValue(m_match_confidence_score, json[QString("matchConfidenceScore")]);
    m_match_confidence_score_isSet = !json[QString("matchConfidenceScore")].isNull() && m_match_confidence_score_isValid;

    m_merchant_category_isValid = ::OpenAPI::fromJsonValue(m_merchant_category, json[QString("merchantCategory")]);
    m_merchant_category_isSet = !json[QString("merchantCategory")].isNull() && m_merchant_category_isValid;

    m_merchant_dba_name_isValid = ::OpenAPI::fromJsonValue(m_merchant_dba_name, json[QString("merchantDbaName")]);
    m_merchant_dba_name_isSet = !json[QString("merchantDbaName")].isNull() && m_merchant_dba_name_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_sole_proprietor_name_isValid = ::OpenAPI::fromJsonValue(m_sole_proprietor_name, json[QString("soleProprietorName")]);
    m_sole_proprietor_name_isSet = !json[QString("soleProprietorName")].isNull() && m_sole_proprietor_name_isValid;
}

QString OAIMerchant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMerchant::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_brand_name_isSet) {
        obj.insert(QString("brandName"), ::OpenAPI::toJsonValue(m_brand_name));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_descriptor_text_isSet) {
        obj.insert(QString("descriptorText"), ::OpenAPI::toJsonValue(m_descriptor_text));
    }
    if (m_legal_corporate_name_isSet) {
        obj.insert(QString("legalCorporateName"), ::OpenAPI::toJsonValue(m_legal_corporate_name));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_match_confidence_score_isSet) {
        obj.insert(QString("matchConfidenceScore"), ::OpenAPI::toJsonValue(m_match_confidence_score));
    }
    if (m_merchant_category_isSet) {
        obj.insert(QString("merchantCategory"), ::OpenAPI::toJsonValue(m_merchant_category));
    }
    if (m_merchant_dba_name_isSet) {
        obj.insert(QString("merchantDbaName"), ::OpenAPI::toJsonValue(m_merchant_dba_name));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_sole_proprietor_name_isSet) {
        obj.insert(QString("soleProprietorName"), ::OpenAPI::toJsonValue(m_sole_proprietor_name));
    }
    return obj;
}

OAIAddress OAIMerchant::getAddress() const {
    return m_address;
}
void OAIMerchant::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIMerchant::is_address_Set() const{
    return m_address_isSet;
}

bool OAIMerchant::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIMerchant::getBrandName() const {
    return m_brand_name;
}
void OAIMerchant::setBrandName(const QString &brand_name) {
    m_brand_name = brand_name;
    m_brand_name_isSet = true;
}

bool OAIMerchant::is_brand_name_Set() const{
    return m_brand_name_isSet;
}

bool OAIMerchant::is_brand_name_Valid() const{
    return m_brand_name_isValid;
}

QString OAIMerchant::getComment() const {
    return m_comment;
}
void OAIMerchant::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIMerchant::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIMerchant::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAIMerchant::getDescriptorText() const {
    return m_descriptor_text;
}
void OAIMerchant::setDescriptorText(const QString &descriptor_text) {
    m_descriptor_text = descriptor_text;
    m_descriptor_text_isSet = true;
}

bool OAIMerchant::is_descriptor_text_Set() const{
    return m_descriptor_text_isSet;
}

bool OAIMerchant::is_descriptor_text_Valid() const{
    return m_descriptor_text_isValid;
}

QString OAIMerchant::getLegalCorporateName() const {
    return m_legal_corporate_name;
}
void OAIMerchant::setLegalCorporateName(const QString &legal_corporate_name) {
    m_legal_corporate_name = legal_corporate_name;
    m_legal_corporate_name_isSet = true;
}

bool OAIMerchant::is_legal_corporate_name_Set() const{
    return m_legal_corporate_name_isSet;
}

bool OAIMerchant::is_legal_corporate_name_Valid() const{
    return m_legal_corporate_name_isValid;
}

qint32 OAIMerchant::getLocationId() const {
    return m_location_id;
}
void OAIMerchant::setLocationId(const qint32 &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIMerchant::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIMerchant::is_location_id_Valid() const{
    return m_location_id_isValid;
}

qint32 OAIMerchant::getMatchConfidenceScore() const {
    return m_match_confidence_score;
}
void OAIMerchant::setMatchConfidenceScore(const qint32 &match_confidence_score) {
    m_match_confidence_score = match_confidence_score;
    m_match_confidence_score_isSet = true;
}

bool OAIMerchant::is_match_confidence_score_Set() const{
    return m_match_confidence_score_isSet;
}

bool OAIMerchant::is_match_confidence_score_Valid() const{
    return m_match_confidence_score_isValid;
}

QString OAIMerchant::getMerchantCategory() const {
    return m_merchant_category;
}
void OAIMerchant::setMerchantCategory(const QString &merchant_category) {
    m_merchant_category = merchant_category;
    m_merchant_category_isSet = true;
}

bool OAIMerchant::is_merchant_category_Set() const{
    return m_merchant_category_isSet;
}

bool OAIMerchant::is_merchant_category_Valid() const{
    return m_merchant_category_isValid;
}

QString OAIMerchant::getMerchantDbaName() const {
    return m_merchant_dba_name;
}
void OAIMerchant::setMerchantDbaName(const QString &merchant_dba_name) {
    m_merchant_dba_name = merchant_dba_name;
    m_merchant_dba_name_isSet = true;
}

bool OAIMerchant::is_merchant_dba_name_Set() const{
    return m_merchant_dba_name_isSet;
}

bool OAIMerchant::is_merchant_dba_name_Valid() const{
    return m_merchant_dba_name_isValid;
}

QString OAIMerchant::getPhoneNumber() const {
    return m_phone_number;
}
void OAIMerchant::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIMerchant::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIMerchant::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIMerchant::getSoleProprietorName() const {
    return m_sole_proprietor_name;
}
void OAIMerchant::setSoleProprietorName(const QString &sole_proprietor_name) {
    m_sole_proprietor_name = sole_proprietor_name;
    m_sole_proprietor_name_isSet = true;
}

bool OAIMerchant::is_sole_proprietor_name_Set() const{
    return m_sole_proprietor_name_isSet;
}

bool OAIMerchant::is_sole_proprietor_name_Valid() const{
    return m_sole_proprietor_name_isValid;
}

bool OAIMerchant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_descriptor_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_corporate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_confidence_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_dba_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sole_proprietor_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMerchant::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
