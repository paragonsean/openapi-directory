/*
 * Merchant Identifier API V2
 * API for Merchant Identifier
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: ADS_Data_Services@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.MerchantIds;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MerchantIdsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MerchantIdsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MerchantIdsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getMerchantIdentifiers
     * @param merchantId Merchant&#39;s name as provided by the issuer found on a cardholder statement. __Important: Please remove all spaces before submitting a API request.__    (optional)
     * @param type Determines how the search is performed.              ExactMatch returns either the one merchant that best fits the description or no results at all.              FuzzyMatch returns 0-20 merchants that are similar to the transaction descriptor.               If Type is not provided, defaults to ExactMatch.              Example: FuzzyMatch (optional, default to ExactMatch)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantIdentifiersCall(String merchantId, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchant-ids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (merchantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("merchant_id", merchantId));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantIdentifiersValidateBeforeCall(String merchantId, String type, final ApiCallback _callback) throws ApiException {
        return getMerchantIdentifiersCall(merchantId, type, _callback);

    }

    /**
     * Returns merchant descriptor and locator information based on the criteria you provide.  Information returned includes merchant DBA name, merchant category code (MCC), street address, city, state, postal code, country, and sales channels.
     * 
     * @param merchantId Merchant&#39;s name as provided by the issuer found on a cardholder statement. __Important: Please remove all spaces before submitting a API request.__    (optional)
     * @param type Determines how the search is performed.              ExactMatch returns either the one merchant that best fits the description or no results at all.              FuzzyMatch returns 0-20 merchants that are similar to the transaction descriptor.               If Type is not provided, defaults to ExactMatch.              Example: FuzzyMatch (optional, default to ExactMatch)
     * @return MerchantIds
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MerchantIds getMerchantIdentifiers(String merchantId, String type) throws ApiException {
        ApiResponse<MerchantIds> localVarResp = getMerchantIdentifiersWithHttpInfo(merchantId, type);
        return localVarResp.getData();
    }

    /**
     * Returns merchant descriptor and locator information based on the criteria you provide.  Information returned includes merchant DBA name, merchant category code (MCC), street address, city, state, postal code, country, and sales channels.
     * 
     * @param merchantId Merchant&#39;s name as provided by the issuer found on a cardholder statement. __Important: Please remove all spaces before submitting a API request.__    (optional)
     * @param type Determines how the search is performed.              ExactMatch returns either the one merchant that best fits the description or no results at all.              FuzzyMatch returns 0-20 merchants that are similar to the transaction descriptor.               If Type is not provided, defaults to ExactMatch.              Example: FuzzyMatch (optional, default to ExactMatch)
     * @return ApiResponse&lt;MerchantIds&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantIds> getMerchantIdentifiersWithHttpInfo(String merchantId, String type) throws ApiException {
        okhttp3.Call localVarCall = getMerchantIdentifiersValidateBeforeCall(merchantId, type, null);
        Type localVarReturnType = new TypeToken<MerchantIds>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns merchant descriptor and locator information based on the criteria you provide.  Information returned includes merchant DBA name, merchant category code (MCC), street address, city, state, postal code, country, and sales channels. (asynchronously)
     * 
     * @param merchantId Merchant&#39;s name as provided by the issuer found on a cardholder statement. __Important: Please remove all spaces before submitting a API request.__    (optional)
     * @param type Determines how the search is performed.              ExactMatch returns either the one merchant that best fits the description or no results at all.              FuzzyMatch returns 0-20 merchants that are similar to the transaction descriptor.               If Type is not provided, defaults to ExactMatch.              Example: FuzzyMatch (optional, default to ExactMatch)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantIdentifiersAsync(String merchantId, String type, final ApiCallback<MerchantIds> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMerchantIdentifiersValidateBeforeCall(merchantId, type, _callback);
        Type localVarReturnType = new TypeToken<MerchantIds>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
