/*
 * Merchant Identifier API V2
 * API for Merchant Identifier
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: ADS_Data_Services@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Address;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Merchant
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:31.655571-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Merchant {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_BRAND_NAME = "brandName";
  @SerializedName(SERIALIZED_NAME_BRAND_NAME)
  private String brandName;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_DESCRIPTOR_TEXT = "descriptorText";
  @SerializedName(SERIALIZED_NAME_DESCRIPTOR_TEXT)
  private String descriptorText;

  public static final String SERIALIZED_NAME_LEGAL_CORPORATE_NAME = "legalCorporateName";
  @SerializedName(SERIALIZED_NAME_LEGAL_CORPORATE_NAME)
  private String legalCorporateName;

  public static final String SERIALIZED_NAME_LOCATION_ID = "locationId";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private Integer locationId;

  public static final String SERIALIZED_NAME_MATCH_CONFIDENCE_SCORE = "matchConfidenceScore";
  @SerializedName(SERIALIZED_NAME_MATCH_CONFIDENCE_SCORE)
  private Integer matchConfidenceScore;

  public static final String SERIALIZED_NAME_MERCHANT_CATEGORY = "merchantCategory";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CATEGORY)
  private String merchantCategory;

  public static final String SERIALIZED_NAME_MERCHANT_DBA_NAME = "merchantDbaName";
  @SerializedName(SERIALIZED_NAME_MERCHANT_DBA_NAME)
  private String merchantDbaName;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_SOLE_PROPRIETOR_NAME = "soleProprietorName";
  @SerializedName(SERIALIZED_NAME_SOLE_PROPRIETOR_NAME)
  private String soleProprietorName;

  public Merchant() {
  }

  public Merchant address(Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public Address getAddress() {
    return address;
  }

  public void setAddress(Address address) {
    this.address = address;
  }


  public Merchant brandName(String brandName) {
    this.brandName = brandName;
    return this;
  }

  /**
   * The brand name of the merchant.
   * @return brandName
   */
  @javax.annotation.Nullable
  public String getBrandName() {
    return brandName;
  }

  public void setBrandName(String brandName) {
    this.brandName = brandName;
  }


  public Merchant comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Notes or comments returned about the merchant.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public Merchant descriptorText(String descriptorText) {
    this.descriptorText = descriptorText;
    return this;
  }

  /**
   * Descriptor for the merchant provided by the Merchant Service Provider(MSP).
   * @return descriptorText
   */
  @javax.annotation.Nullable
  public String getDescriptorText() {
    return descriptorText;
  }

  public void setDescriptorText(String descriptorText) {
    this.descriptorText = descriptorText;
  }


  public Merchant legalCorporateName(String legalCorporateName) {
    this.legalCorporateName = legalCorporateName;
    return this;
  }

  /**
   * Corporate legal name of the merchant.
   * @return legalCorporateName
   */
  @javax.annotation.Nullable
  public String getLegalCorporateName() {
    return legalCorporateName;
  }

  public void setLegalCorporateName(String legalCorporateName) {
    this.legalCorporateName = legalCorporateName;
  }


  public Merchant locationId(Integer locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * Merchant specific location identifier.
   * @return locationId
   */
  @javax.annotation.Nullable
  public Integer getLocationId() {
    return locationId;
  }

  public void setLocationId(Integer locationId) {
    this.locationId = locationId;
  }


  public Merchant matchConfidenceScore(Integer matchConfidenceScore) {
    this.matchConfidenceScore = matchConfidenceScore;
    return this;
  }

  /**
   * Confidence score (%) to help clients understand the quality of the search results.
   * @return matchConfidenceScore
   */
  @javax.annotation.Nullable
  public Integer getMatchConfidenceScore() {
    return matchConfidenceScore;
  }

  public void setMatchConfidenceScore(Integer matchConfidenceScore) {
    this.matchConfidenceScore = matchConfidenceScore;
  }


  public Merchant merchantCategory(String merchantCategory) {
    this.merchantCategory = merchantCategory;
    return this;
  }

  /**
   * Merchant category code and description associated with the merchant category code for the merchant.   5814 - FAST FOOD RESTAURANTS, 5541 - SERVICE STATIONS WITH OR WITHOUT ANCILLARY SERVICE,   5735 - RECORD SHOPS, 5971 - ART DEALERS AND GALLERIES
   * @return merchantCategory
   */
  @javax.annotation.Nullable
  public String getMerchantCategory() {
    return merchantCategory;
  }

  public void setMerchantCategory(String merchantCategory) {
    this.merchantCategory = merchantCategory;
  }


  public Merchant merchantDbaName(String merchantDbaName) {
    this.merchantDbaName = merchantDbaName;
    return this;
  }

  /**
   * Name under which the merchant is &#39;doing business as&#39;.
   * @return merchantDbaName
   */
  @javax.annotation.Nullable
  public String getMerchantDbaName() {
    return merchantDbaName;
  }

  public void setMerchantDbaName(String merchantDbaName) {
    this.merchantDbaName = merchantDbaName;
  }


  public Merchant phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * The phone number of the merchant.
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public Merchant soleProprietorName(String soleProprietorName) {
    this.soleProprietorName = soleProprietorName;
    return this;
  }

  /**
   * 
   * @return soleProprietorName
   */
  @javax.annotation.Nullable
  public String getSoleProprietorName() {
    return soleProprietorName;
  }

  public void setSoleProprietorName(String soleProprietorName) {
    this.soleProprietorName = soleProprietorName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Merchant merchant = (Merchant) o;
    return Objects.equals(this.address, merchant.address) &&
        Objects.equals(this.brandName, merchant.brandName) &&
        Objects.equals(this.comment, merchant.comment) &&
        Objects.equals(this.descriptorText, merchant.descriptorText) &&
        Objects.equals(this.legalCorporateName, merchant.legalCorporateName) &&
        Objects.equals(this.locationId, merchant.locationId) &&
        Objects.equals(this.matchConfidenceScore, merchant.matchConfidenceScore) &&
        Objects.equals(this.merchantCategory, merchant.merchantCategory) &&
        Objects.equals(this.merchantDbaName, merchant.merchantDbaName) &&
        Objects.equals(this.phoneNumber, merchant.phoneNumber) &&
        Objects.equals(this.soleProprietorName, merchant.soleProprietorName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, brandName, comment, descriptorText, legalCorporateName, locationId, matchConfidenceScore, merchantCategory, merchantDbaName, phoneNumber, soleProprietorName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Merchant {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    brandName: ").append(toIndentedString(brandName)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    descriptorText: ").append(toIndentedString(descriptorText)).append("\n");
    sb.append("    legalCorporateName: ").append(toIndentedString(legalCorporateName)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    matchConfidenceScore: ").append(toIndentedString(matchConfidenceScore)).append("\n");
    sb.append("    merchantCategory: ").append(toIndentedString(merchantCategory)).append("\n");
    sb.append("    merchantDbaName: ").append(toIndentedString(merchantDbaName)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    soleProprietorName: ").append(toIndentedString(soleProprietorName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("brandName");
    openapiFields.add("comment");
    openapiFields.add("descriptorText");
    openapiFields.add("legalCorporateName");
    openapiFields.add("locationId");
    openapiFields.add("matchConfidenceScore");
    openapiFields.add("merchantCategory");
    openapiFields.add("merchantDbaName");
    openapiFields.add("phoneNumber");
    openapiFields.add("soleProprietorName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Merchant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Merchant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Merchant is not found in the empty JSON string", Merchant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Merchant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Merchant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("address"));
      }
      if ((jsonObj.get("brandName") != null && !jsonObj.get("brandName").isJsonNull()) && !jsonObj.get("brandName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brandName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brandName").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("descriptorText") != null && !jsonObj.get("descriptorText").isJsonNull()) && !jsonObj.get("descriptorText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descriptorText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descriptorText").toString()));
      }
      if ((jsonObj.get("legalCorporateName") != null && !jsonObj.get("legalCorporateName").isJsonNull()) && !jsonObj.get("legalCorporateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalCorporateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalCorporateName").toString()));
      }
      if ((jsonObj.get("merchantCategory") != null && !jsonObj.get("merchantCategory").isJsonNull()) && !jsonObj.get("merchantCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantCategory").toString()));
      }
      if ((jsonObj.get("merchantDbaName") != null && !jsonObj.get("merchantDbaName").isJsonNull()) && !jsonObj.get("merchantDbaName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantDbaName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantDbaName").toString()));
      }
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if ((jsonObj.get("soleProprietorName") != null && !jsonObj.get("soleProprietorName").isJsonNull()) && !jsonObj.get("soleProprietorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `soleProprietorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("soleProprietorName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Merchant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Merchant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Merchant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Merchant.class));

       return (TypeAdapter<T>) new TypeAdapter<Merchant>() {
           @Override
           public void write(JsonWriter out, Merchant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Merchant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Merchant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Merchant
   * @throws IOException if the JSON string is invalid with respect to Merchant
   */
  public static Merchant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Merchant.class);
  }

  /**
   * Convert an instance of Merchant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

