# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Error(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, reason_code: str=None, recoverable: bool=None, source: str=None):
        """Error - a model defined in OpenAPI

        :param description: The description of this Error.
        :param reason_code: The reason_code of this Error.
        :param recoverable: The recoverable of this Error.
        :param source: The source of this Error.
        """
        self.openapi_types = {
            'description': str,
            'reason_code': str,
            'recoverable': bool,
            'source': str
        }

        self.attribute_map = {
            'description': 'description',
            'reason_code': 'reasonCode',
            'recoverable': 'recoverable',
            'source': 'source'
        }

        self._description = description
        self._reason_code = reason_code
        self._recoverable = recoverable
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Error of this Error.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Error.

        Description

        :return: The description of this Error.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Error.

        Description

        :param description: The description of this Error.
        :type description: str
        """

        self._description = description

    @property
    def reason_code(self):
        """Gets the reason_code of this Error.

        Reason for the error

        :return: The reason_code of this Error.
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this Error.

        Reason for the error

        :param reason_code: The reason_code of this Error.
        :type reason_code: str
        """

        self._reason_code = reason_code

    @property
    def recoverable(self):
        """Gets the recoverable of this Error.

        Is the error recoverable

        :return: The recoverable of this Error.
        :rtype: bool
        """
        return self._recoverable

    @recoverable.setter
    def recoverable(self, recoverable):
        """Sets the recoverable of this Error.

        Is the error recoverable

        :param recoverable: The recoverable of this Error.
        :type recoverable: bool
        """

        self._recoverable = recoverable

    @property
    def source(self):
        """Gets the source of this Error.

        Error Source

        :return: The source of this Error.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Error.

        Error Source

        :param source: The source of this Error.
        :type source: str
        """

        self._source = source
