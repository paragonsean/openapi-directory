/**
 * Open Banking - Payments initiation service
 * Open Banking - Payments initiation service
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostAspspsOKBodyAspspsItems.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostAspspsOKBodyAspspsItems::OAIPostAspspsOKBodyAspspsItems(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostAspspsOKBodyAspspsItems::OAIPostAspspsOKBodyAspspsItems() {
    this->initializeModel();
}

OAIPostAspspsOKBodyAspspsItems::~OAIPostAspspsOKBodyAspspsItems() {}

void OAIPostAspspsOKBodyAspspsItems::initializeModel() {

    m_aspsp_services_isSet = false;
    m_aspsp_services_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_profile_isSet = false;
    m_profile_isValid = false;
}

void OAIPostAspspsOKBodyAspspsItems::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostAspspsOKBodyAspspsItems::fromJsonObject(QJsonObject json) {

    m_aspsp_services_isValid = ::OpenAPI::fromJsonValue(m_aspsp_services, json[QString("aspspServices")]);
    m_aspsp_services_isSet = !json[QString("aspspServices")].isNull() && m_aspsp_services_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_profile_isValid = ::OpenAPI::fromJsonValue(m_profile, json[QString("profile")]);
    m_profile_isSet = !json[QString("profile")].isNull() && m_profile_isValid;
}

QString OAIPostAspspsOKBodyAspspsItems::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostAspspsOKBodyAspspsItems::asJsonObject() const {
    QJsonObject obj;
    if (m_aspsp_services.size() > 0) {
        obj.insert(QString("aspspServices"), ::OpenAPI::toJsonValue(m_aspsp_services));
    }
    if (m_capabilities.size() > 0) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_logo.isSet()) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_profile_isSet) {
        obj.insert(QString("profile"), ::OpenAPI::toJsonValue(m_profile));
    }
    return obj;
}

QList<QString> OAIPostAspspsOKBodyAspspsItems::getAspspServices() const {
    return m_aspsp_services;
}
void OAIPostAspspsOKBodyAspspsItems::setAspspServices(const QList<QString> &aspsp_services) {
    m_aspsp_services = aspsp_services;
    m_aspsp_services_isSet = true;
}

bool OAIPostAspspsOKBodyAspspsItems::is_aspsp_services_Set() const{
    return m_aspsp_services_isSet;
}

bool OAIPostAspspsOKBodyAspspsItems::is_aspsp_services_Valid() const{
    return m_aspsp_services_isValid;
}

QMap<QString, bool> OAIPostAspspsOKBodyAspspsItems::getCapabilities() const {
    return m_capabilities;
}
void OAIPostAspspsOKBodyAspspsItems::setCapabilities(const QMap<QString, bool> &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIPostAspspsOKBodyAspspsItems::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIPostAspspsOKBodyAspspsItems::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QString OAIPostAspspsOKBodyAspspsItems::getCountry() const {
    return m_country;
}
void OAIPostAspspsOKBodyAspspsItems::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIPostAspspsOKBodyAspspsItems::is_country_Set() const{
    return m_country_isSet;
}

bool OAIPostAspspsOKBodyAspspsItems::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIPostAspspsOKBodyAspspsItems::getId() const {
    return m_id;
}
void OAIPostAspspsOKBodyAspspsItems::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPostAspspsOKBodyAspspsItems::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPostAspspsOKBodyAspspsItems::is_id_Valid() const{
    return m_id_isValid;
}

OAILogoObject OAIPostAspspsOKBodyAspspsItems::getLogo() const {
    return m_logo;
}
void OAIPostAspspsOKBodyAspspsItems::setLogo(const OAILogoObject &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAIPostAspspsOKBodyAspspsItems::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAIPostAspspsOKBodyAspspsItems::is_logo_Valid() const{
    return m_logo_isValid;
}

QString OAIPostAspspsOKBodyAspspsItems::getName() const {
    return m_name;
}
void OAIPostAspspsOKBodyAspspsItems::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPostAspspsOKBodyAspspsItems::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPostAspspsOKBodyAspspsItems::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPostAspspsOKBodyAspspsItems::getProfile() const {
    return m_profile;
}
void OAIPostAspspsOKBodyAspspsItems::setProfile(const QString &profile) {
    m_profile = profile;
    m_profile_isSet = true;
}

bool OAIPostAspspsOKBodyAspspsItems::is_profile_Set() const{
    return m_profile_isSet;
}

bool OAIPostAspspsOKBodyAspspsItems::is_profile_Valid() const{
    return m_profile_isValid;
}

bool OAIPostAspspsOKBodyAspspsItems::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aspsp_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostAspspsOKBodyAspspsItems::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
