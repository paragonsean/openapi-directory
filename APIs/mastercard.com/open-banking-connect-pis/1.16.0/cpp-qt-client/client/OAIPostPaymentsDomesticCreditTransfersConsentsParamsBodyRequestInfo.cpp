/**
 * Open Banking - Payments initiation service
 * Open Banking - Payments initiation service
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo() {
    this->initializeModel();
}

OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::~OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo() {}

void OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::initializeModel() {

    m_aspsp_id_isSet = false;
    m_aspsp_id_isValid = false;

    m_flags_isSet = false;
    m_flags_isValid = false;

    m_merchant_isSet = false;
    m_merchant_isValid = false;

    m_tpp_redirect_uri_isSet = false;
    m_tpp_redirect_uri_isValid = false;

    m_x_request_id_isSet = false;
    m_x_request_id_isValid = false;
}

void OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::fromJsonObject(QJsonObject json) {

    m_aspsp_id_isValid = ::OpenAPI::fromJsonValue(m_aspsp_id, json[QString("aspspId")]);
    m_aspsp_id_isSet = !json[QString("aspspId")].isNull() && m_aspsp_id_isValid;

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("flags")]);
    m_flags_isSet = !json[QString("flags")].isNull() && m_flags_isValid;

    m_merchant_isValid = ::OpenAPI::fromJsonValue(m_merchant, json[QString("merchant")]);
    m_merchant_isSet = !json[QString("merchant")].isNull() && m_merchant_isValid;

    m_tpp_redirect_uri_isValid = ::OpenAPI::fromJsonValue(m_tpp_redirect_uri, json[QString("tppRedirectURI")]);
    m_tpp_redirect_uri_isSet = !json[QString("tppRedirectURI")].isNull() && m_tpp_redirect_uri_isValid;

    m_x_request_id_isValid = ::OpenAPI::fromJsonValue(m_x_request_id, json[QString("xRequestId")]);
    m_x_request_id_isSet = !json[QString("xRequestId")].isNull() && m_x_request_id_isValid;
}

QString OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_aspsp_id_isSet) {
        obj.insert(QString("aspspId"), ::OpenAPI::toJsonValue(m_aspsp_id));
    }
    if (m_flags.size() > 0) {
        obj.insert(QString("flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    if (m_merchant.isSet()) {
        obj.insert(QString("merchant"), ::OpenAPI::toJsonValue(m_merchant));
    }
    if (m_tpp_redirect_uri_isSet) {
        obj.insert(QString("tppRedirectURI"), ::OpenAPI::toJsonValue(m_tpp_redirect_uri));
    }
    if (m_x_request_id_isSet) {
        obj.insert(QString("xRequestId"), ::OpenAPI::toJsonValue(m_x_request_id));
    }
    return obj;
}

QString OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::getAspspId() const {
    return m_aspsp_id;
}
void OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::setAspspId(const QString &aspsp_id) {
    m_aspsp_id = aspsp_id;
    m_aspsp_id_isSet = true;
}

bool OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::is_aspsp_id_Set() const{
    return m_aspsp_id_isSet;
}

bool OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::is_aspsp_id_Valid() const{
    return m_aspsp_id_isValid;
}

QList<QString> OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::getFlags() const {
    return m_flags;
}
void OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::setFlags(const QList<QString> &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::is_flags_Valid() const{
    return m_flags_isValid;
}

OAIMerchant OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::getMerchant() const {
    return m_merchant;
}
void OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::setMerchant(const OAIMerchant &merchant) {
    m_merchant = merchant;
    m_merchant_isSet = true;
}

bool OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::is_merchant_Set() const{
    return m_merchant_isSet;
}

bool OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::is_merchant_Valid() const{
    return m_merchant_isValid;
}

QString OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::getTppRedirectUri() const {
    return m_tpp_redirect_uri;
}
void OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::setTppRedirectUri(const QString &tpp_redirect_uri) {
    m_tpp_redirect_uri = tpp_redirect_uri;
    m_tpp_redirect_uri_isSet = true;
}

bool OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::is_tpp_redirect_uri_Set() const{
    return m_tpp_redirect_uri_isSet;
}

bool OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::is_tpp_redirect_uri_Valid() const{
    return m_tpp_redirect_uri_isValid;
}

QString OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::getXRequestId() const {
    return m_x_request_id;
}
void OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::setXRequestId(const QString &x_request_id) {
    m_x_request_id = x_request_id;
    m_x_request_id_isSet = true;
}

bool OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::is_x_request_id_Set() const{
    return m_x_request_id_isSet;
}

bool OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::is_x_request_id_Valid() const{
    return m_x_request_id_isValid;
}

bool OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aspsp_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tpp_redirect_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostPaymentsDomesticCreditTransfersConsentsParamsBodyRequestInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_aspsp_id_isValid && m_tpp_redirect_uri_isValid && m_x_request_id_isValid && true;
}

} // namespace OpenAPI
