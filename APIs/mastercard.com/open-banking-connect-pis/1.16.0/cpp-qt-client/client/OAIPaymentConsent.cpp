/**
 * Open Banking - Payments initiation service
 * Open Banking - Payments initiation service
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentConsent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentConsent::OAIPaymentConsent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentConsent::OAIPaymentConsent() {
    this->initializeModel();
}

OAIPaymentConsent::~OAIPaymentConsent() {}

void OAIPaymentConsent::initializeModel() {

    m_consent_id_isSet = false;
    m_consent_id_isValid = false;

    m_consent_request_id_isSet = false;
    m_consent_request_id_isValid = false;

    m_signature_status_isSet = false;
    m_signature_status_isValid = false;
}

void OAIPaymentConsent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentConsent::fromJsonObject(QJsonObject json) {

    m_consent_id_isValid = ::OpenAPI::fromJsonValue(m_consent_id, json[QString("consentId")]);
    m_consent_id_isSet = !json[QString("consentId")].isNull() && m_consent_id_isValid;

    m_consent_request_id_isValid = ::OpenAPI::fromJsonValue(m_consent_request_id, json[QString("consentRequestId")]);
    m_consent_request_id_isSet = !json[QString("consentRequestId")].isNull() && m_consent_request_id_isValid;

    m_signature_status_isValid = ::OpenAPI::fromJsonValue(m_signature_status, json[QString("signatureStatus")]);
    m_signature_status_isSet = !json[QString("signatureStatus")].isNull() && m_signature_status_isValid;
}

QString OAIPaymentConsent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentConsent::asJsonObject() const {
    QJsonObject obj;
    if (m_consent_id_isSet) {
        obj.insert(QString("consentId"), ::OpenAPI::toJsonValue(m_consent_id));
    }
    if (m_consent_request_id_isSet) {
        obj.insert(QString("consentRequestId"), ::OpenAPI::toJsonValue(m_consent_request_id));
    }
    if (m_signature_status.isSet()) {
        obj.insert(QString("signatureStatus"), ::OpenAPI::toJsonValue(m_signature_status));
    }
    return obj;
}

QString OAIPaymentConsent::getConsentId() const {
    return m_consent_id;
}
void OAIPaymentConsent::setConsentId(const QString &consent_id) {
    m_consent_id = consent_id;
    m_consent_id_isSet = true;
}

bool OAIPaymentConsent::is_consent_id_Set() const{
    return m_consent_id_isSet;
}

bool OAIPaymentConsent::is_consent_id_Valid() const{
    return m_consent_id_isValid;
}

QString OAIPaymentConsent::getConsentRequestId() const {
    return m_consent_request_id;
}
void OAIPaymentConsent::setConsentRequestId(const QString &consent_request_id) {
    m_consent_request_id = consent_request_id;
    m_consent_request_id_isSet = true;
}

bool OAIPaymentConsent::is_consent_request_id_Set() const{
    return m_consent_request_id_isSet;
}

bool OAIPaymentConsent::is_consent_request_id_Valid() const{
    return m_consent_request_id_isValid;
}

OAISignatureValidationStatus OAIPaymentConsent::getSignatureStatus() const {
    return m_signature_status;
}
void OAIPaymentConsent::setSignatureStatus(const OAISignatureValidationStatus &signature_status) {
    m_signature_status = signature_status;
    m_signature_status_isSet = true;
}

bool OAIPaymentConsent::is_signature_status_Set() const{
    return m_signature_status_isSet;
}

bool OAIPaymentConsent::is_signature_status_Valid() const{
    return m_signature_status_isValid;
}

bool OAIPaymentConsent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consent_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentConsent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_consent_id_isValid && m_consent_request_id_isValid && true;
}

} // namespace OpenAPI
