/**
 * Open Banking - Payments initiation service
 * Open Banking - Payments initiation service
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostPaymentsSepaCreditTransfersConsentsOKBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostPaymentsSepaCreditTransfersConsentsOKBody::OAIPostPaymentsSepaCreditTransfersConsentsOKBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostPaymentsSepaCreditTransfersConsentsOKBody::OAIPostPaymentsSepaCreditTransfersConsentsOKBody() {
    this->initializeModel();
}

OAIPostPaymentsSepaCreditTransfersConsentsOKBody::~OAIPostPaymentsSepaCreditTransfersConsentsOKBody() {}

void OAIPostPaymentsSepaCreditTransfersConsentsOKBody::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_additional_data_isSet = false;
    m_additional_data_isValid = false;

    m_aspsp_sca_approach_isSet = false;
    m_aspsp_sca_approach_isValid = false;

    m_consent_request_id_isSet = false;
    m_consent_request_id_isValid = false;

    m_original_request_info_isSet = false;
    m_original_request_info_isValid = false;
}

void OAIPostPaymentsSepaCreditTransfersConsentsOKBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostPaymentsSepaCreditTransfersConsentsOKBody::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_additional_data_isValid = ::OpenAPI::fromJsonValue(m_additional_data, json[QString("additionalData")]);
    m_additional_data_isSet = !json[QString("additionalData")].isNull() && m_additional_data_isValid;

    m_aspsp_sca_approach_isValid = ::OpenAPI::fromJsonValue(m_aspsp_sca_approach, json[QString("aspspSCAApproach")]);
    m_aspsp_sca_approach_isSet = !json[QString("aspspSCAApproach")].isNull() && m_aspsp_sca_approach_isValid;

    m_consent_request_id_isValid = ::OpenAPI::fromJsonValue(m_consent_request_id, json[QString("consentRequestId")]);
    m_consent_request_id_isSet = !json[QString("consentRequestId")].isNull() && m_consent_request_id_isValid;

    m_original_request_info_isValid = ::OpenAPI::fromJsonValue(m_original_request_info, json[QString("originalRequestInfo")]);
    m_original_request_info_isSet = !json[QString("originalRequestInfo")].isNull() && m_original_request_info_isValid;
}

QString OAIPostPaymentsSepaCreditTransfersConsentsOKBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostPaymentsSepaCreditTransfersConsentsOKBody::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_additional_data.isSet()) {
        obj.insert(QString("additionalData"), ::OpenAPI::toJsonValue(m_additional_data));
    }
    if (m_aspsp_sca_approach_isSet) {
        obj.insert(QString("aspspSCAApproach"), ::OpenAPI::toJsonValue(m_aspsp_sca_approach));
    }
    if (m_consent_request_id_isSet) {
        obj.insert(QString("consentRequestId"), ::OpenAPI::toJsonValue(m_consent_request_id));
    }
    if (m_original_request_info.isSet()) {
        obj.insert(QString("originalRequestInfo"), ::OpenAPI::toJsonValue(m_original_request_info));
    }
    return obj;
}

OAIPostPaymentsSepaCreditTransfersConsentsOKBodyLinks OAIPostPaymentsSepaCreditTransfersConsentsOKBody::getLinks() const {
    return m__links;
}
void OAIPostPaymentsSepaCreditTransfersConsentsOKBody::setLinks(const OAIPostPaymentsSepaCreditTransfersConsentsOKBodyLinks &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIPostPaymentsSepaCreditTransfersConsentsOKBody::is__links_Set() const{
    return m__links_isSet;
}

bool OAIPostPaymentsSepaCreditTransfersConsentsOKBody::is__links_Valid() const{
    return m__links_isValid;
}

OAIPostPaymentsCrossBorderCreditTransfersConsentsOKBody_additionalData OAIPostPaymentsSepaCreditTransfersConsentsOKBody::getAdditionalData() const {
    return m_additional_data;
}
void OAIPostPaymentsSepaCreditTransfersConsentsOKBody::setAdditionalData(const OAIPostPaymentsCrossBorderCreditTransfersConsentsOKBody_additionalData &additional_data) {
    m_additional_data = additional_data;
    m_additional_data_isSet = true;
}

bool OAIPostPaymentsSepaCreditTransfersConsentsOKBody::is_additional_data_Set() const{
    return m_additional_data_isSet;
}

bool OAIPostPaymentsSepaCreditTransfersConsentsOKBody::is_additional_data_Valid() const{
    return m_additional_data_isValid;
}

QString OAIPostPaymentsSepaCreditTransfersConsentsOKBody::getAspspScaApproach() const {
    return m_aspsp_sca_approach;
}
void OAIPostPaymentsSepaCreditTransfersConsentsOKBody::setAspspScaApproach(const QString &aspsp_sca_approach) {
    m_aspsp_sca_approach = aspsp_sca_approach;
    m_aspsp_sca_approach_isSet = true;
}

bool OAIPostPaymentsSepaCreditTransfersConsentsOKBody::is_aspsp_sca_approach_Set() const{
    return m_aspsp_sca_approach_isSet;
}

bool OAIPostPaymentsSepaCreditTransfersConsentsOKBody::is_aspsp_sca_approach_Valid() const{
    return m_aspsp_sca_approach_isValid;
}

QString OAIPostPaymentsSepaCreditTransfersConsentsOKBody::getConsentRequestId() const {
    return m_consent_request_id;
}
void OAIPostPaymentsSepaCreditTransfersConsentsOKBody::setConsentRequestId(const QString &consent_request_id) {
    m_consent_request_id = consent_request_id;
    m_consent_request_id_isSet = true;
}

bool OAIPostPaymentsSepaCreditTransfersConsentsOKBody::is_consent_request_id_Set() const{
    return m_consent_request_id_isSet;
}

bool OAIPostPaymentsSepaCreditTransfersConsentsOKBody::is_consent_request_id_Valid() const{
    return m_consent_request_id_isValid;
}

OAIPostPaymentsSepaCreditTransfersConsentsOKBodyOriginalRequestInfo OAIPostPaymentsSepaCreditTransfersConsentsOKBody::getOriginalRequestInfo() const {
    return m_original_request_info;
}
void OAIPostPaymentsSepaCreditTransfersConsentsOKBody::setOriginalRequestInfo(const OAIPostPaymentsSepaCreditTransfersConsentsOKBodyOriginalRequestInfo &original_request_info) {
    m_original_request_info = original_request_info;
    m_original_request_info_isSet = true;
}

bool OAIPostPaymentsSepaCreditTransfersConsentsOKBody::is_original_request_info_Set() const{
    return m_original_request_info_isSet;
}

bool OAIPostPaymentsSepaCreditTransfersConsentsOKBody::is_original_request_info_Valid() const{
    return m_original_request_info_isValid;
}

bool OAIPostPaymentsSepaCreditTransfersConsentsOKBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aspsp_sca_approach_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consent_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_request_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostPaymentsSepaCreditTransfersConsentsOKBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_original_request_info_isValid && true;
}

} // namespace OpenAPI
