/**
 * Open Banking - Payments initiation service
 * Open Banking - Payments initiation service
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments() {
    this->initializeModel();
}

OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::~OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments() {}

void OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::initializeModel() {

    m_creditor_account_isSet = false;
    m_creditor_account_isValid = false;

    m_creditor_address_isSet = false;
    m_creditor_address_isValid = false;

    m_creditor_agent_isSet = false;
    m_creditor_agent_isValid = false;

    m_creditor_name_isSet = false;
    m_creditor_name_isValid = false;

    m_debtor_account_isSet = false;
    m_debtor_account_isValid = false;

    m_debtor_address_isSet = false;
    m_debtor_address_isValid = false;

    m_debtor_name_isSet = false;
    m_debtor_name_isValid = false;

    m_end_to_end_identification_isSet = false;
    m_end_to_end_identification_isValid = false;

    m_instructed_amount_isSet = false;
    m_instructed_amount_isValid = false;

    m_instruction_identification_isSet = false;
    m_instruction_identification_isValid = false;

    m_instruction_priority_isSet = false;
    m_instruction_priority_isValid = false;

    m_local_instrument_isSet = false;
    m_local_instrument_isValid = false;

    m_remittance_information_reference_isSet = false;
    m_remittance_information_reference_isValid = false;

    m_remittance_information_unstructured_isSet = false;
    m_remittance_information_unstructured_isValid = false;

    m_requested_execution_date_isSet = false;
    m_requested_execution_date_isValid = false;

    m_transfer_charges_isSet = false;
    m_transfer_charges_isValid = false;
}

void OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::fromJsonObject(QJsonObject json) {

    m_creditor_account_isValid = ::OpenAPI::fromJsonValue(m_creditor_account, json[QString("creditorAccount")]);
    m_creditor_account_isSet = !json[QString("creditorAccount")].isNull() && m_creditor_account_isValid;

    m_creditor_address_isValid = ::OpenAPI::fromJsonValue(m_creditor_address, json[QString("creditorAddress")]);
    m_creditor_address_isSet = !json[QString("creditorAddress")].isNull() && m_creditor_address_isValid;

    m_creditor_agent_isValid = ::OpenAPI::fromJsonValue(m_creditor_agent, json[QString("creditorAgent")]);
    m_creditor_agent_isSet = !json[QString("creditorAgent")].isNull() && m_creditor_agent_isValid;

    m_creditor_name_isValid = ::OpenAPI::fromJsonValue(m_creditor_name, json[QString("creditorName")]);
    m_creditor_name_isSet = !json[QString("creditorName")].isNull() && m_creditor_name_isValid;

    m_debtor_account_isValid = ::OpenAPI::fromJsonValue(m_debtor_account, json[QString("debtorAccount")]);
    m_debtor_account_isSet = !json[QString("debtorAccount")].isNull() && m_debtor_account_isValid;

    m_debtor_address_isValid = ::OpenAPI::fromJsonValue(m_debtor_address, json[QString("debtorAddress")]);
    m_debtor_address_isSet = !json[QString("debtorAddress")].isNull() && m_debtor_address_isValid;

    m_debtor_name_isValid = ::OpenAPI::fromJsonValue(m_debtor_name, json[QString("debtorName")]);
    m_debtor_name_isSet = !json[QString("debtorName")].isNull() && m_debtor_name_isValid;

    m_end_to_end_identification_isValid = ::OpenAPI::fromJsonValue(m_end_to_end_identification, json[QString("endToEndIdentification")]);
    m_end_to_end_identification_isSet = !json[QString("endToEndIdentification")].isNull() && m_end_to_end_identification_isValid;

    m_instructed_amount_isValid = ::OpenAPI::fromJsonValue(m_instructed_amount, json[QString("instructedAmount")]);
    m_instructed_amount_isSet = !json[QString("instructedAmount")].isNull() && m_instructed_amount_isValid;

    m_instruction_identification_isValid = ::OpenAPI::fromJsonValue(m_instruction_identification, json[QString("instructionIdentification")]);
    m_instruction_identification_isSet = !json[QString("instructionIdentification")].isNull() && m_instruction_identification_isValid;

    m_instruction_priority_isValid = ::OpenAPI::fromJsonValue(m_instruction_priority, json[QString("instructionPriority")]);
    m_instruction_priority_isSet = !json[QString("instructionPriority")].isNull() && m_instruction_priority_isValid;

    m_local_instrument_isValid = ::OpenAPI::fromJsonValue(m_local_instrument, json[QString("localInstrument")]);
    m_local_instrument_isSet = !json[QString("localInstrument")].isNull() && m_local_instrument_isValid;

    m_remittance_information_reference_isValid = ::OpenAPI::fromJsonValue(m_remittance_information_reference, json[QString("remittanceInformationReference")]);
    m_remittance_information_reference_isSet = !json[QString("remittanceInformationReference")].isNull() && m_remittance_information_reference_isValid;

    m_remittance_information_unstructured_isValid = ::OpenAPI::fromJsonValue(m_remittance_information_unstructured, json[QString("remittanceInformationUnstructured")]);
    m_remittance_information_unstructured_isSet = !json[QString("remittanceInformationUnstructured")].isNull() && m_remittance_information_unstructured_isValid;

    m_requested_execution_date_isValid = ::OpenAPI::fromJsonValue(m_requested_execution_date, json[QString("requestedExecutionDate")]);
    m_requested_execution_date_isSet = !json[QString("requestedExecutionDate")].isNull() && m_requested_execution_date_isValid;

    m_transfer_charges_isValid = ::OpenAPI::fromJsonValue(m_transfer_charges, json[QString("transferCharges")]);
    m_transfer_charges_isSet = !json[QString("transferCharges")].isNull() && m_transfer_charges_isValid;
}

QString OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::asJsonObject() const {
    QJsonObject obj;
    if (m_creditor_account.isSet()) {
        obj.insert(QString("creditorAccount"), ::OpenAPI::toJsonValue(m_creditor_account));
    }
    if (m_creditor_address.isSet()) {
        obj.insert(QString("creditorAddress"), ::OpenAPI::toJsonValue(m_creditor_address));
    }
    if (m_creditor_agent.isSet()) {
        obj.insert(QString("creditorAgent"), ::OpenAPI::toJsonValue(m_creditor_agent));
    }
    if (m_creditor_name_isSet) {
        obj.insert(QString("creditorName"), ::OpenAPI::toJsonValue(m_creditor_name));
    }
    if (m_debtor_account.isSet()) {
        obj.insert(QString("debtorAccount"), ::OpenAPI::toJsonValue(m_debtor_account));
    }
    if (m_debtor_address.isSet()) {
        obj.insert(QString("debtorAddress"), ::OpenAPI::toJsonValue(m_debtor_address));
    }
    if (m_debtor_name_isSet) {
        obj.insert(QString("debtorName"), ::OpenAPI::toJsonValue(m_debtor_name));
    }
    if (m_end_to_end_identification_isSet) {
        obj.insert(QString("endToEndIdentification"), ::OpenAPI::toJsonValue(m_end_to_end_identification));
    }
    if (m_instructed_amount.isSet()) {
        obj.insert(QString("instructedAmount"), ::OpenAPI::toJsonValue(m_instructed_amount));
    }
    if (m_instruction_identification_isSet) {
        obj.insert(QString("instructionIdentification"), ::OpenAPI::toJsonValue(m_instruction_identification));
    }
    if (m_instruction_priority_isSet) {
        obj.insert(QString("instructionPriority"), ::OpenAPI::toJsonValue(m_instruction_priority));
    }
    if (m_local_instrument_isSet) {
        obj.insert(QString("localInstrument"), ::OpenAPI::toJsonValue(m_local_instrument));
    }
    if (m_remittance_information_reference_isSet) {
        obj.insert(QString("remittanceInformationReference"), ::OpenAPI::toJsonValue(m_remittance_information_reference));
    }
    if (m_remittance_information_unstructured_isSet) {
        obj.insert(QString("remittanceInformationUnstructured"), ::OpenAPI::toJsonValue(m_remittance_information_unstructured));
    }
    if (m_requested_execution_date_isSet) {
        obj.insert(QString("requestedExecutionDate"), ::OpenAPI::toJsonValue(m_requested_execution_date));
    }
    if (m_transfer_charges_isSet) {
        obj.insert(QString("transferCharges"), ::OpenAPI::toJsonValue(m_transfer_charges));
    }
    return obj;
}

OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAccount OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::getCreditorAccount() const {
    return m_creditor_account;
}
void OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::setCreditorAccount(const OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAccount &creditor_account) {
    m_creditor_account = creditor_account;
    m_creditor_account_isSet = true;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_creditor_account_Set() const{
    return m_creditor_account_isSet;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_creditor_account_Valid() const{
    return m_creditor_account_isValid;
}

OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAddress OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::getCreditorAddress() const {
    return m_creditor_address;
}
void OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::setCreditorAddress(const OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAddress &creditor_address) {
    m_creditor_address = creditor_address;
    m_creditor_address_isSet = true;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_creditor_address_Set() const{
    return m_creditor_address_isSet;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_creditor_address_Valid() const{
    return m_creditor_address_isValid;
}

OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::getCreditorAgent() const {
    return m_creditor_agent;
}
void OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::setCreditorAgent(const OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent &creditor_agent) {
    m_creditor_agent = creditor_agent;
    m_creditor_agent_isSet = true;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_creditor_agent_Set() const{
    return m_creditor_agent_isSet;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_creditor_agent_Valid() const{
    return m_creditor_agent_isValid;
}

QString OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::getCreditorName() const {
    return m_creditor_name;
}
void OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::setCreditorName(const QString &creditor_name) {
    m_creditor_name = creditor_name;
    m_creditor_name_isSet = true;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_creditor_name_Set() const{
    return m_creditor_name_isSet;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_creditor_name_Valid() const{
    return m_creditor_name_isValid;
}

OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAccount OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::getDebtorAccount() const {
    return m_debtor_account;
}
void OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::setDebtorAccount(const OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAccount &debtor_account) {
    m_debtor_account = debtor_account;
    m_debtor_account_isSet = true;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_debtor_account_Set() const{
    return m_debtor_account_isSet;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_debtor_account_Valid() const{
    return m_debtor_account_isValid;
}

OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments_debtorAddress OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::getDebtorAddress() const {
    return m_debtor_address;
}
void OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::setDebtorAddress(const OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments_debtorAddress &debtor_address) {
    m_debtor_address = debtor_address;
    m_debtor_address_isSet = true;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_debtor_address_Set() const{
    return m_debtor_address_isSet;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_debtor_address_Valid() const{
    return m_debtor_address_isValid;
}

QString OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::getDebtorName() const {
    return m_debtor_name;
}
void OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::setDebtorName(const QString &debtor_name) {
    m_debtor_name = debtor_name;
    m_debtor_name_isSet = true;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_debtor_name_Set() const{
    return m_debtor_name_isSet;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_debtor_name_Valid() const{
    return m_debtor_name_isValid;
}

QString OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::getEndToEndIdentification() const {
    return m_end_to_end_identification;
}
void OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::setEndToEndIdentification(const QString &end_to_end_identification) {
    m_end_to_end_identification = end_to_end_identification;
    m_end_to_end_identification_isSet = true;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_end_to_end_identification_Set() const{
    return m_end_to_end_identification_isSet;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_end_to_end_identification_Valid() const{
    return m_end_to_end_identification_isValid;
}

OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsInstructedAmount OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::getInstructedAmount() const {
    return m_instructed_amount;
}
void OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::setInstructedAmount(const OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsInstructedAmount &instructed_amount) {
    m_instructed_amount = instructed_amount;
    m_instructed_amount_isSet = true;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_instructed_amount_Set() const{
    return m_instructed_amount_isSet;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_instructed_amount_Valid() const{
    return m_instructed_amount_isValid;
}

QString OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::getInstructionIdentification() const {
    return m_instruction_identification;
}
void OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::setInstructionIdentification(const QString &instruction_identification) {
    m_instruction_identification = instruction_identification;
    m_instruction_identification_isSet = true;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_instruction_identification_Set() const{
    return m_instruction_identification_isSet;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_instruction_identification_Valid() const{
    return m_instruction_identification_isValid;
}

QString OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::getInstructionPriority() const {
    return m_instruction_priority;
}
void OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::setInstructionPriority(const QString &instruction_priority) {
    m_instruction_priority = instruction_priority;
    m_instruction_priority_isSet = true;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_instruction_priority_Set() const{
    return m_instruction_priority_isSet;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_instruction_priority_Valid() const{
    return m_instruction_priority_isValid;
}

QString OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::getLocalInstrument() const {
    return m_local_instrument;
}
void OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::setLocalInstrument(const QString &local_instrument) {
    m_local_instrument = local_instrument;
    m_local_instrument_isSet = true;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_local_instrument_Set() const{
    return m_local_instrument_isSet;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_local_instrument_Valid() const{
    return m_local_instrument_isValid;
}

QString OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::getRemittanceInformationReference() const {
    return m_remittance_information_reference;
}
void OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::setRemittanceInformationReference(const QString &remittance_information_reference) {
    m_remittance_information_reference = remittance_information_reference;
    m_remittance_information_reference_isSet = true;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_remittance_information_reference_Set() const{
    return m_remittance_information_reference_isSet;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_remittance_information_reference_Valid() const{
    return m_remittance_information_reference_isValid;
}

QString OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::getRemittanceInformationUnstructured() const {
    return m_remittance_information_unstructured;
}
void OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::setRemittanceInformationUnstructured(const QString &remittance_information_unstructured) {
    m_remittance_information_unstructured = remittance_information_unstructured;
    m_remittance_information_unstructured_isSet = true;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_remittance_information_unstructured_Set() const{
    return m_remittance_information_unstructured_isSet;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_remittance_information_unstructured_Valid() const{
    return m_remittance_information_unstructured_isValid;
}

QDate OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::getRequestedExecutionDate() const {
    return m_requested_execution_date;
}
void OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::setRequestedExecutionDate(const QDate &requested_execution_date) {
    m_requested_execution_date = requested_execution_date;
    m_requested_execution_date_isSet = true;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_requested_execution_date_Set() const{
    return m_requested_execution_date_isSet;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_requested_execution_date_Valid() const{
    return m_requested_execution_date_isValid;
}

QString OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::getTransferCharges() const {
    return m_transfer_charges;
}
void OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::setTransferCharges(const QString &transfer_charges) {
    m_transfer_charges = transfer_charges;
    m_transfer_charges_isSet = true;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_transfer_charges_Set() const{
    return m_transfer_charges_isSet;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::is_transfer_charges_Valid() const{
    return m_transfer_charges_isValid;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creditor_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creditor_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creditor_agent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creditor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debtor_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_debtor_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_debtor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_to_end_identification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instructed_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instruction_identification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instruction_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_instrument_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remittance_information_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remittance_information_unstructured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_execution_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_charges_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_creditor_account_isValid && m_creditor_agent_isValid && m_creditor_name_isValid && m_debtor_account_isValid && m_end_to_end_identification_isValid && m_instructed_amount_isValid && m_instruction_priority_isValid && m_local_instrument_isValid && true;
}

} // namespace OpenAPI
