/**
 * Open Banking - Payments initiation service
 * Open Banking - Payments initiation service
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISignatureValidationStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISignatureValidationStatus::OAISignatureValidationStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISignatureValidationStatus::OAISignatureValidationStatus() {
    this->initializeModel();
}

OAISignatureValidationStatus::~OAISignatureValidationStatus() {}

void OAISignatureValidationStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISignatureValidationStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISignatureValidationStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("VALID", Qt::CaseInsensitive) == 0) {
        m_value = eOAISignatureValidationStatus::VALID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNKNOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAISignatureValidationStatus::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNSIGNED", Qt::CaseInsensitive) == 0) {
        m_value = eOAISignatureValidationStatus::UNSIGNED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NONCOMPLIANT", Qt::CaseInsensitive) == 0) {
        m_value = eOAISignatureValidationStatus::NONCOMPLIANT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISignatureValidationStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISignatureValidationStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISignatureValidationStatus::VALID:
            val = "VALID";
            break;
        case eOAISignatureValidationStatus::UNKNOWN:
            val = "UNKNOWN";
            break;
        case eOAISignatureValidationStatus::UNSIGNED:
            val = "UNSIGNED";
            break;
        case eOAISignatureValidationStatus::NONCOMPLIANT:
            val = "NONCOMPLIANT";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISignatureValidationStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISignatureValidationStatus::eOAISignatureValidationStatus OAISignatureValidationStatus::getValue() const {
    return m_value;
}

void OAISignatureValidationStatus::setValue(const OAISignatureValidationStatus::eOAISignatureValidationStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISignatureValidationStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAISignatureValidationStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
