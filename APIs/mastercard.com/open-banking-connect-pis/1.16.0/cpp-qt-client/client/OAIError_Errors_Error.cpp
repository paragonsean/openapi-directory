/**
 * Open Banking - Payments initiation service
 * Open Banking - Payments initiation service
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIError_Errors_Error.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIError_Errors_Error::OAIError_Errors_Error(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIError_Errors_Error::OAIError_Errors_Error() {
    this->initializeModel();
}

OAIError_Errors_Error::~OAIError_Errors_Error() {}

void OAIError_Errors_Error::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_reason_code_isSet = false;
    m_reason_code_isValid = false;

    m_recoverable_isSet = false;
    m_recoverable_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIError_Errors_Error::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIError_Errors_Error::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("Details")]);
    m_details_isSet = !json[QString("Details")].isNull() && m_details_isValid;

    m_reason_code_isValid = ::OpenAPI::fromJsonValue(m_reason_code, json[QString("ReasonCode")]);
    m_reason_code_isSet = !json[QString("ReasonCode")].isNull() && m_reason_code_isValid;

    m_recoverable_isValid = ::OpenAPI::fromJsonValue(m_recoverable, json[QString("Recoverable")]);
    m_recoverable_isSet = !json[QString("Recoverable")].isNull() && m_recoverable_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;
}

QString OAIError_Errors_Error::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIError_Errors_Error::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_details_isSet) {
        obj.insert(QString("Details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_reason_code_isSet) {
        obj.insert(QString("ReasonCode"), ::OpenAPI::toJsonValue(m_reason_code));
    }
    if (m_recoverable_isSet) {
        obj.insert(QString("Recoverable"), ::OpenAPI::toJsonValue(m_recoverable));
    }
    if (m_source_isSet) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QString OAIError_Errors_Error::getDescription() const {
    return m_description;
}
void OAIError_Errors_Error::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIError_Errors_Error::is_description_Set() const{
    return m_description_isSet;
}

bool OAIError_Errors_Error::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIError_Errors_Error::getDetails() const {
    return m_details;
}
void OAIError_Errors_Error::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIError_Errors_Error::is_details_Set() const{
    return m_details_isSet;
}

bool OAIError_Errors_Error::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIError_Errors_Error::getReasonCode() const {
    return m_reason_code;
}
void OAIError_Errors_Error::setReasonCode(const QString &reason_code) {
    m_reason_code = reason_code;
    m_reason_code_isSet = true;
}

bool OAIError_Errors_Error::is_reason_code_Set() const{
    return m_reason_code_isSet;
}

bool OAIError_Errors_Error::is_reason_code_Valid() const{
    return m_reason_code_isValid;
}

bool OAIError_Errors_Error::isRecoverable() const {
    return m_recoverable;
}
void OAIError_Errors_Error::setRecoverable(const bool &recoverable) {
    m_recoverable = recoverable;
    m_recoverable_isSet = true;
}

bool OAIError_Errors_Error::is_recoverable_Set() const{
    return m_recoverable_isSet;
}

bool OAIError_Errors_Error::is_recoverable_Valid() const{
    return m_recoverable_isValid;
}

QString OAIError_Errors_Error::getSource() const {
    return m_source;
}
void OAIError_Errors_Error::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIError_Errors_Error::is_source_Set() const{
    return m_source_isSet;
}

bool OAIError_Errors_Error::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIError_Errors_Error::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recoverable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIError_Errors_Error::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
