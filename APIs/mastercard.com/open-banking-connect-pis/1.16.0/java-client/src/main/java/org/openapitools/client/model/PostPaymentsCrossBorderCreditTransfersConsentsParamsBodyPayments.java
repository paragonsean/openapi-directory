/*
 * Open Banking - Payments initiation service
 * Open Banking - Payments initiation service
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAccount;
import org.openapitools.client.model.PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAddress;
import org.openapitools.client.model.PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent;
import org.openapitools.client.model.PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAccount;
import org.openapitools.client.model.PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAddress;
import org.openapitools.client.model.PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsInstructedAmount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:39.148602-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments {
  public static final String SERIALIZED_NAME_CREDITOR_ACCOUNT = "creditorAccount";
  @SerializedName(SERIALIZED_NAME_CREDITOR_ACCOUNT)
  private PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAccount creditorAccount;

  public static final String SERIALIZED_NAME_CREDITOR_ADDRESS = "creditorAddress";
  @SerializedName(SERIALIZED_NAME_CREDITOR_ADDRESS)
  private PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAddress creditorAddress;

  public static final String SERIALIZED_NAME_CREDITOR_AGENT = "creditorAgent";
  @SerializedName(SERIALIZED_NAME_CREDITOR_AGENT)
  private PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent creditorAgent;

  public static final String SERIALIZED_NAME_CREDITOR_NAME = "creditorName";
  @SerializedName(SERIALIZED_NAME_CREDITOR_NAME)
  private String creditorName;

  public static final String SERIALIZED_NAME_DEBTOR_ACCOUNT = "debtorAccount";
  @SerializedName(SERIALIZED_NAME_DEBTOR_ACCOUNT)
  private PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAccount debtorAccount;

  public static final String SERIALIZED_NAME_DEBTOR_ADDRESS = "debtorAddress";
  @SerializedName(SERIALIZED_NAME_DEBTOR_ADDRESS)
  private PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAddress debtorAddress;

  public static final String SERIALIZED_NAME_DEBTOR_NAME = "debtorName";
  @SerializedName(SERIALIZED_NAME_DEBTOR_NAME)
  private String debtorName;

  public static final String SERIALIZED_NAME_END_TO_END_IDENTIFICATION = "endToEndIdentification";
  @SerializedName(SERIALIZED_NAME_END_TO_END_IDENTIFICATION)
  private String endToEndIdentification;

  public static final String SERIALIZED_NAME_INSTRUCTED_AMOUNT = "instructedAmount";
  @SerializedName(SERIALIZED_NAME_INSTRUCTED_AMOUNT)
  private PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsInstructedAmount instructedAmount;

  public static final String SERIALIZED_NAME_INSTRUCTION_IDENTIFICATION = "instructionIdentification";
  @SerializedName(SERIALIZED_NAME_INSTRUCTION_IDENTIFICATION)
  private String instructionIdentification;

  /**
   * Indicator of the urgency or order of importance
   */
  @JsonAdapter(InstructionPriorityEnum.Adapter.class)
  public enum InstructionPriorityEnum {
    NORMAL("Normal"),
    
    URGENT("Urgent");

    private String value;

    InstructionPriorityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InstructionPriorityEnum fromValue(String value) {
      for (InstructionPriorityEnum b : InstructionPriorityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InstructionPriorityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InstructionPriorityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InstructionPriorityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InstructionPriorityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InstructionPriorityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INSTRUCTION_PRIORITY = "instructionPriority";
  @SerializedName(SERIALIZED_NAME_INSTRUCTION_PRIORITY)
  private InstructionPriorityEnum instructionPriority;

  /**
   * User community specific instrument.
   */
  @JsonAdapter(LocalInstrumentEnum.Adapter.class)
  public enum LocalInstrumentEnum {
    SWIFT("Swift");

    private String value;

    LocalInstrumentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocalInstrumentEnum fromValue(String value) {
      for (LocalInstrumentEnum b : LocalInstrumentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LocalInstrumentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocalInstrumentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocalInstrumentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LocalInstrumentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LocalInstrumentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOCAL_INSTRUMENT = "localInstrument";
  @SerializedName(SERIALIZED_NAME_LOCAL_INSTRUMENT)
  private LocalInstrumentEnum localInstrument;

  public static final String SERIALIZED_NAME_REMITTANCE_INFORMATION_REFERENCE = "remittanceInformationReference";
  @SerializedName(SERIALIZED_NAME_REMITTANCE_INFORMATION_REFERENCE)
  private String remittanceInformationReference;

  public static final String SERIALIZED_NAME_REMITTANCE_INFORMATION_UNSTRUCTURED = "remittanceInformationUnstructured";
  @SerializedName(SERIALIZED_NAME_REMITTANCE_INFORMATION_UNSTRUCTURED)
  private String remittanceInformationUnstructured;

  public static final String SERIALIZED_NAME_REQUESTED_EXECUTION_DATE = "requestedExecutionDate";
  @SerializedName(SERIALIZED_NAME_REQUESTED_EXECUTION_DATE)
  private LocalDate requestedExecutionDate;

  /**
   * Charge bearer
   */
  @JsonAdapter(TransferChargesEnum.Adapter.class)
  public enum TransferChargesEnum {
    SEN("SEN"),
    
    SHA("SHA"),
    
    BEN("BEN");

    private String value;

    TransferChargesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransferChargesEnum fromValue(String value) {
      for (TransferChargesEnum b : TransferChargesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransferChargesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransferChargesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransferChargesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransferChargesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransferChargesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSFER_CHARGES = "transferCharges";
  @SerializedName(SERIALIZED_NAME_TRANSFER_CHARGES)
  private TransferChargesEnum transferCharges;

  public PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments() {
  }

  public PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments creditorAccount(PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAccount creditorAccount) {
    this.creditorAccount = creditorAccount;
    return this;
  }

  /**
   * Get creditorAccount
   * @return creditorAccount
   */
  @javax.annotation.Nonnull
  public PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAccount getCreditorAccount() {
    return creditorAccount;
  }

  public void setCreditorAccount(PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAccount creditorAccount) {
    this.creditorAccount = creditorAccount;
  }


  public PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments creditorAddress(PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAddress creditorAddress) {
    this.creditorAddress = creditorAddress;
    return this;
  }

  /**
   * Get creditorAddress
   * @return creditorAddress
   */
  @javax.annotation.Nullable
  public PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAddress getCreditorAddress() {
    return creditorAddress;
  }

  public void setCreditorAddress(PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAddress creditorAddress) {
    this.creditorAddress = creditorAddress;
  }


  public PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments creditorAgent(PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent creditorAgent) {
    this.creditorAgent = creditorAgent;
    return this;
  }

  /**
   * Get creditorAgent
   * @return creditorAgent
   */
  @javax.annotation.Nonnull
  public PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent getCreditorAgent() {
    return creditorAgent;
  }

  public void setCreditorAgent(PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent creditorAgent) {
    this.creditorAgent = creditorAgent;
  }


  public PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments creditorName(String creditorName) {
    this.creditorName = creditorName;
    return this;
  }

  /**
   * Bank name
   * @return creditorName
   */
  @javax.annotation.Nonnull
  public String getCreditorName() {
    return creditorName;
  }

  public void setCreditorName(String creditorName) {
    this.creditorName = creditorName;
  }


  public PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments debtorAccount(PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAccount debtorAccount) {
    this.debtorAccount = debtorAccount;
    return this;
  }

  /**
   * Get debtorAccount
   * @return debtorAccount
   */
  @javax.annotation.Nonnull
  public PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAccount getDebtorAccount() {
    return debtorAccount;
  }

  public void setDebtorAccount(PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAccount debtorAccount) {
    this.debtorAccount = debtorAccount;
  }


  public PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments debtorAddress(PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAddress debtorAddress) {
    this.debtorAddress = debtorAddress;
    return this;
  }

  /**
   * Get debtorAddress
   * @return debtorAddress
   */
  @javax.annotation.Nullable
  public PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAddress getDebtorAddress() {
    return debtorAddress;
  }

  public void setDebtorAddress(PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAddress debtorAddress) {
    this.debtorAddress = debtorAddress;
  }


  public PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments debtorName(String debtorName) {
    this.debtorName = debtorName;
    return this;
  }

  /**
   * Debtor legal name
   * @return debtorName
   */
  @javax.annotation.Nullable
  public String getDebtorName() {
    return debtorName;
  }

  public void setDebtorName(String debtorName) {
    this.debtorName = debtorName;
  }


  public PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments endToEndIdentification(String endToEndIdentification) {
    this.endToEndIdentification = endToEndIdentification;
    return this;
  }

  /**
   * Payment end to end identification
   * @return endToEndIdentification
   */
  @javax.annotation.Nonnull
  public String getEndToEndIdentification() {
    return endToEndIdentification;
  }

  public void setEndToEndIdentification(String endToEndIdentification) {
    this.endToEndIdentification = endToEndIdentification;
  }


  public PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments instructedAmount(PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsInstructedAmount instructedAmount) {
    this.instructedAmount = instructedAmount;
    return this;
  }

  /**
   * Get instructedAmount
   * @return instructedAmount
   */
  @javax.annotation.Nonnull
  public PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsInstructedAmount getInstructedAmount() {
    return instructedAmount;
  }

  public void setInstructedAmount(PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsInstructedAmount instructedAmount) {
    this.instructedAmount = instructedAmount;
  }


  public PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments instructionIdentification(String instructionIdentification) {
    this.instructionIdentification = instructionIdentification;
    return this;
  }

  /**
   * Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction. If API profile of ASPSP is CMA9, then field is mandatory.
   * @return instructionIdentification
   */
  @javax.annotation.Nullable
  public String getInstructionIdentification() {
    return instructionIdentification;
  }

  public void setInstructionIdentification(String instructionIdentification) {
    this.instructionIdentification = instructionIdentification;
  }


  public PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments instructionPriority(InstructionPriorityEnum instructionPriority) {
    this.instructionPriority = instructionPriority;
    return this;
  }

  /**
   * Indicator of the urgency or order of importance
   * @return instructionPriority
   */
  @javax.annotation.Nonnull
  public InstructionPriorityEnum getInstructionPriority() {
    return instructionPriority;
  }

  public void setInstructionPriority(InstructionPriorityEnum instructionPriority) {
    this.instructionPriority = instructionPriority;
  }


  public PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments localInstrument(LocalInstrumentEnum localInstrument) {
    this.localInstrument = localInstrument;
    return this;
  }

  /**
   * User community specific instrument.
   * @return localInstrument
   */
  @javax.annotation.Nonnull
  public LocalInstrumentEnum getLocalInstrument() {
    return localInstrument;
  }

  public void setLocalInstrument(LocalInstrumentEnum localInstrument) {
    this.localInstrument = localInstrument;
  }


  public PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments remittanceInformationReference(String remittanceInformationReference) {
    this.remittanceInformationReference = remittanceInformationReference;
    return this;
  }

  /**
   * Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction. (future use)
   * @return remittanceInformationReference
   */
  @javax.annotation.Nullable
  public String getRemittanceInformationReference() {
    return remittanceInformationReference;
  }

  public void setRemittanceInformationReference(String remittanceInformationReference) {
    this.remittanceInformationReference = remittanceInformationReference;
  }


  public PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments remittanceInformationUnstructured(String remittanceInformationUnstructured) {
    this.remittanceInformationUnstructured = remittanceInformationUnstructured;
    return this;
  }

  /**
   * Description of the payment
   * @return remittanceInformationUnstructured
   */
  @javax.annotation.Nullable
  public String getRemittanceInformationUnstructured() {
    return remittanceInformationUnstructured;
  }

  public void setRemittanceInformationUnstructured(String remittanceInformationUnstructured) {
    this.remittanceInformationUnstructured = remittanceInformationUnstructured;
  }


  public PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments requestedExecutionDate(LocalDate requestedExecutionDate) {
    this.requestedExecutionDate = requestedExecutionDate;
    return this;
  }

  /**
   * Scheduled Payment Date
   * @return requestedExecutionDate
   */
  @javax.annotation.Nullable
  public LocalDate getRequestedExecutionDate() {
    return requestedExecutionDate;
  }

  public void setRequestedExecutionDate(LocalDate requestedExecutionDate) {
    this.requestedExecutionDate = requestedExecutionDate;
  }


  public PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments transferCharges(TransferChargesEnum transferCharges) {
    this.transferCharges = transferCharges;
    return this;
  }

  /**
   * Charge bearer
   * @return transferCharges
   */
  @javax.annotation.Nullable
  public TransferChargesEnum getTransferCharges() {
    return transferCharges;
  }

  public void setTransferCharges(TransferChargesEnum transferCharges) {
    this.transferCharges = transferCharges;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments = (PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments) o;
    return Objects.equals(this.creditorAccount, postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.creditorAccount) &&
        Objects.equals(this.creditorAddress, postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.creditorAddress) &&
        Objects.equals(this.creditorAgent, postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.creditorAgent) &&
        Objects.equals(this.creditorName, postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.creditorName) &&
        Objects.equals(this.debtorAccount, postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.debtorAccount) &&
        Objects.equals(this.debtorAddress, postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.debtorAddress) &&
        Objects.equals(this.debtorName, postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.debtorName) &&
        Objects.equals(this.endToEndIdentification, postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.endToEndIdentification) &&
        Objects.equals(this.instructedAmount, postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.instructedAmount) &&
        Objects.equals(this.instructionIdentification, postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.instructionIdentification) &&
        Objects.equals(this.instructionPriority, postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.instructionPriority) &&
        Objects.equals(this.localInstrument, postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.localInstrument) &&
        Objects.equals(this.remittanceInformationReference, postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.remittanceInformationReference) &&
        Objects.equals(this.remittanceInformationUnstructured, postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.remittanceInformationUnstructured) &&
        Objects.equals(this.requestedExecutionDate, postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.requestedExecutionDate) &&
        Objects.equals(this.transferCharges, postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.transferCharges);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creditorAccount, creditorAddress, creditorAgent, creditorName, debtorAccount, debtorAddress, debtorName, endToEndIdentification, instructedAmount, instructionIdentification, instructionPriority, localInstrument, remittanceInformationReference, remittanceInformationUnstructured, requestedExecutionDate, transferCharges);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments {\n");
    sb.append("    creditorAccount: ").append(toIndentedString(creditorAccount)).append("\n");
    sb.append("    creditorAddress: ").append(toIndentedString(creditorAddress)).append("\n");
    sb.append("    creditorAgent: ").append(toIndentedString(creditorAgent)).append("\n");
    sb.append("    creditorName: ").append(toIndentedString(creditorName)).append("\n");
    sb.append("    debtorAccount: ").append(toIndentedString(debtorAccount)).append("\n");
    sb.append("    debtorAddress: ").append(toIndentedString(debtorAddress)).append("\n");
    sb.append("    debtorName: ").append(toIndentedString(debtorName)).append("\n");
    sb.append("    endToEndIdentification: ").append(toIndentedString(endToEndIdentification)).append("\n");
    sb.append("    instructedAmount: ").append(toIndentedString(instructedAmount)).append("\n");
    sb.append("    instructionIdentification: ").append(toIndentedString(instructionIdentification)).append("\n");
    sb.append("    instructionPriority: ").append(toIndentedString(instructionPriority)).append("\n");
    sb.append("    localInstrument: ").append(toIndentedString(localInstrument)).append("\n");
    sb.append("    remittanceInformationReference: ").append(toIndentedString(remittanceInformationReference)).append("\n");
    sb.append("    remittanceInformationUnstructured: ").append(toIndentedString(remittanceInformationUnstructured)).append("\n");
    sb.append("    requestedExecutionDate: ").append(toIndentedString(requestedExecutionDate)).append("\n");
    sb.append("    transferCharges: ").append(toIndentedString(transferCharges)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creditorAccount");
    openapiFields.add("creditorAddress");
    openapiFields.add("creditorAgent");
    openapiFields.add("creditorName");
    openapiFields.add("debtorAccount");
    openapiFields.add("debtorAddress");
    openapiFields.add("debtorName");
    openapiFields.add("endToEndIdentification");
    openapiFields.add("instructedAmount");
    openapiFields.add("instructionIdentification");
    openapiFields.add("instructionPriority");
    openapiFields.add("localInstrument");
    openapiFields.add("remittanceInformationReference");
    openapiFields.add("remittanceInformationUnstructured");
    openapiFields.add("requestedExecutionDate");
    openapiFields.add("transferCharges");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("creditorAccount");
    openapiRequiredFields.add("creditorAgent");
    openapiRequiredFields.add("creditorName");
    openapiRequiredFields.add("debtorAccount");
    openapiRequiredFields.add("endToEndIdentification");
    openapiRequiredFields.add("instructedAmount");
    openapiRequiredFields.add("instructionPriority");
    openapiRequiredFields.add("localInstrument");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments is not found in the empty JSON string", PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `creditorAccount`
      PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAccount.validateJsonElement(jsonObj.get("creditorAccount"));
      // validate the optional field `creditorAddress`
      if (jsonObj.get("creditorAddress") != null && !jsonObj.get("creditorAddress").isJsonNull()) {
        PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.validateJsonElement(jsonObj.get("creditorAddress"));
      }
      // validate the required field `creditorAgent`
      PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.validateJsonElement(jsonObj.get("creditorAgent"));
      if (!jsonObj.get("creditorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditorName").toString()));
      }
      // validate the required field `debtorAccount`
      PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAccount.validateJsonElement(jsonObj.get("debtorAccount"));
      // validate the optional field `debtorAddress`
      if (jsonObj.get("debtorAddress") != null && !jsonObj.get("debtorAddress").isJsonNull()) {
        PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAddress.validateJsonElement(jsonObj.get("debtorAddress"));
      }
      if ((jsonObj.get("debtorName") != null && !jsonObj.get("debtorName").isJsonNull()) && !jsonObj.get("debtorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorName").toString()));
      }
      if (!jsonObj.get("endToEndIdentification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endToEndIdentification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endToEndIdentification").toString()));
      }
      // validate the required field `instructedAmount`
      PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsInstructedAmount.validateJsonElement(jsonObj.get("instructedAmount"));
      if ((jsonObj.get("instructionIdentification") != null && !jsonObj.get("instructionIdentification").isJsonNull()) && !jsonObj.get("instructionIdentification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instructionIdentification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instructionIdentification").toString()));
      }
      if (!jsonObj.get("instructionPriority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instructionPriority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instructionPriority").toString()));
      }
      // validate the required field `instructionPriority`
      InstructionPriorityEnum.validateJsonElement(jsonObj.get("instructionPriority"));
      if (!jsonObj.get("localInstrument").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localInstrument` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localInstrument").toString()));
      }
      // validate the required field `localInstrument`
      LocalInstrumentEnum.validateJsonElement(jsonObj.get("localInstrument"));
      if ((jsonObj.get("remittanceInformationReference") != null && !jsonObj.get("remittanceInformationReference").isJsonNull()) && !jsonObj.get("remittanceInformationReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remittanceInformationReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remittanceInformationReference").toString()));
      }
      if ((jsonObj.get("remittanceInformationUnstructured") != null && !jsonObj.get("remittanceInformationUnstructured").isJsonNull()) && !jsonObj.get("remittanceInformationUnstructured").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remittanceInformationUnstructured` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remittanceInformationUnstructured").toString()));
      }
      if ((jsonObj.get("transferCharges") != null && !jsonObj.get("transferCharges").isJsonNull()) && !jsonObj.get("transferCharges").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transferCharges` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transferCharges").toString()));
      }
      // validate the optional field `transferCharges`
      if (jsonObj.get("transferCharges") != null && !jsonObj.get("transferCharges").isJsonNull()) {
        TransferChargesEnum.validateJsonElement(jsonObj.get("transferCharges"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.class));

       return (TypeAdapter<T>) new TypeAdapter<PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments>() {
           @Override
           public void write(JsonWriter out, PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments
   * @throws IOException if the JSON string is invalid with respect to PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments
   */
  public static PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.class);
  }

  /**
   * Convert an instance of PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

