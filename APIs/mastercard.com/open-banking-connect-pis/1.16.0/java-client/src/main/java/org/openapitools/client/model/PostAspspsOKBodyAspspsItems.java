/*
 * Open Banking - Payments initiation service
 * Open Banking - Payments initiation service
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.LogoObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostAspspsOKBodyAspspsItems
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:39.148602-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PostAspspsOKBodyAspspsItems {
  /**
   * Gets or Sets aspspServices
   */
  @JsonAdapter(AspspServicesEnum.Adapter.class)
  public enum AspspServicesEnum {
    AIS("AIS"),
    
    PIS("PIS"),
    
    COF("COF");

    private String value;

    AspspServicesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AspspServicesEnum fromValue(String value) {
      for (AspspServicesEnum b : AspspServicesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AspspServicesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AspspServicesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AspspServicesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AspspServicesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AspspServicesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ASPSP_SERVICES = "aspspServices";
  @SerializedName(SERIALIZED_NAME_ASPSP_SERVICES)
  private List<AspspServicesEnum> aspspServices = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private Map<String, Boolean> capabilities = new HashMap<>();

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private LogoObject logo;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROFILE = "profile";
  @SerializedName(SERIALIZED_NAME_PROFILE)
  private String profile;

  public PostAspspsOKBodyAspspsItems() {
  }

  public PostAspspsOKBodyAspspsItems aspspServices(List<AspspServicesEnum> aspspServices) {
    this.aspspServices = aspspServices;
    return this;
  }

  public PostAspspsOKBodyAspspsItems addAspspServicesItem(AspspServicesEnum aspspServicesItem) {
    if (this.aspspServices == null) {
      this.aspspServices = new ArrayList<>();
    }
    this.aspspServices.add(aspspServicesItem);
    return this;
  }

  /**
   * Provided services, AIS - account information, PIS - payment initiation
   * @return aspspServices
   */
  @javax.annotation.Nullable
  public List<AspspServicesEnum> getAspspServices() {
    return aspspServices;
  }

  public void setAspspServices(List<AspspServicesEnum> aspspServices) {
    this.aspspServices = aspspServices;
  }


  public PostAspspsOKBodyAspspsItems capabilities(Map<String, Boolean> capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  public PostAspspsOKBodyAspspsItems putCapabilitiesItem(String key, Boolean capabilitiesItem) {
    if (this.capabilities == null) {
      this.capabilities = new HashMap<>();
    }
    this.capabilities.put(key, capabilitiesItem);
    return this;
  }

  /**
   * Capabilities related to api profile assigned to ASPSP
   * @return capabilities
   */
  @javax.annotation.Nullable
  public Map<String, Boolean> getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(Map<String, Boolean> capabilities) {
    this.capabilities = capabilities;
  }


  public PostAspspsOKBodyAspspsItems country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Country code
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public PostAspspsOKBodyAspspsItems id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Identification of the ASPSP
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PostAspspsOKBodyAspspsItems logo(LogoObject logo) {
    this.logo = logo;
    return this;
  }

  /**
   * Get logo
   * @return logo
   */
  @javax.annotation.Nullable
  public LogoObject getLogo() {
    return logo;
  }

  public void setLogo(LogoObject logo) {
    this.logo = logo;
  }


  public PostAspspsOKBodyAspspsItems name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the ASPSP
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PostAspspsOKBodyAspspsItems profile(String profile) {
    this.profile = profile;
    return this;
  }

  /**
   * ASPSP profile
   * @return profile
   */
  @javax.annotation.Nullable
  public String getProfile() {
    return profile;
  }

  public void setProfile(String profile) {
    this.profile = profile;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostAspspsOKBodyAspspsItems postAspspsOKBodyAspspsItems = (PostAspspsOKBodyAspspsItems) o;
    return Objects.equals(this.aspspServices, postAspspsOKBodyAspspsItems.aspspServices) &&
        Objects.equals(this.capabilities, postAspspsOKBodyAspspsItems.capabilities) &&
        Objects.equals(this.country, postAspspsOKBodyAspspsItems.country) &&
        Objects.equals(this.id, postAspspsOKBodyAspspsItems.id) &&
        Objects.equals(this.logo, postAspspsOKBodyAspspsItems.logo) &&
        Objects.equals(this.name, postAspspsOKBodyAspspsItems.name) &&
        Objects.equals(this.profile, postAspspsOKBodyAspspsItems.profile);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aspspServices, capabilities, country, id, logo, name, profile);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostAspspsOKBodyAspspsItems {\n");
    sb.append("    aspspServices: ").append(toIndentedString(aspspServices)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aspspServices");
    openapiFields.add("capabilities");
    openapiFields.add("country");
    openapiFields.add("id");
    openapiFields.add("logo");
    openapiFields.add("name");
    openapiFields.add("profile");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostAspspsOKBodyAspspsItems
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostAspspsOKBodyAspspsItems.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostAspspsOKBodyAspspsItems is not found in the empty JSON string", PostAspspsOKBodyAspspsItems.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostAspspsOKBodyAspspsItems.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostAspspsOKBodyAspspsItems` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("aspspServices") != null && !jsonObj.get("aspspServices").isJsonNull() && !jsonObj.get("aspspServices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `aspspServices` to be an array in the JSON string but got `%s`", jsonObj.get("aspspServices").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `logo`
      if (jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) {
        LogoObject.validateJsonElement(jsonObj.get("logo"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("profile") != null && !jsonObj.get("profile").isJsonNull()) && !jsonObj.get("profile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostAspspsOKBodyAspspsItems.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostAspspsOKBodyAspspsItems' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostAspspsOKBodyAspspsItems> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostAspspsOKBodyAspspsItems.class));

       return (TypeAdapter<T>) new TypeAdapter<PostAspspsOKBodyAspspsItems>() {
           @Override
           public void write(JsonWriter out, PostAspspsOKBodyAspspsItems value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostAspspsOKBodyAspspsItems read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostAspspsOKBodyAspspsItems given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostAspspsOKBodyAspspsItems
   * @throws IOException if the JSON string is invalid with respect to PostAspspsOKBodyAspspsItems
   */
  public static PostAspspsOKBodyAspspsItems fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostAspspsOKBodyAspspsItems.class);
  }

  /**
   * Convert an instance of PostAspspsOKBodyAspspsItems to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

