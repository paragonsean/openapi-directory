/*
 * Open Banking - Payments initiation service
 * Open Banking - Payments initiation service
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PostPaymentsCrossBorderCreditTransfersConsentsOKBodyAdditionalData;
import org.openapitools.client.model.PostPaymentsDomesticCreditTransfersConsentsOKBodyLinks;
import org.openapitools.client.model.PostPaymentsDomesticCreditTransfersConsentsOKBodyOriginalRequestInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostPaymentsDomesticCreditTransfersConsentsOKBody
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:39.148602-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PostPaymentsDomesticCreditTransfersConsentsOKBody {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private PostPaymentsDomesticCreditTransfersConsentsOKBodyLinks links;

  public static final String SERIALIZED_NAME_ADDITIONAL_DATA = "additionalData";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_DATA)
  private PostPaymentsCrossBorderCreditTransfersConsentsOKBodyAdditionalData additionalData;

  /**
   * Gets or Sets aspspSCAApproach
   */
  @JsonAdapter(AspspSCAApproachEnum.Adapter.class)
  public enum AspspSCAApproachEnum {
    REDIRECT("REDIRECT");

    private String value;

    AspspSCAApproachEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AspspSCAApproachEnum fromValue(String value) {
      for (AspspSCAApproachEnum b : AspspSCAApproachEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AspspSCAApproachEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AspspSCAApproachEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AspspSCAApproachEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AspspSCAApproachEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AspspSCAApproachEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ASPSP_S_C_A_APPROACH = "aspspSCAApproach";
  @SerializedName(SERIALIZED_NAME_ASPSP_S_C_A_APPROACH)
  private AspspSCAApproachEnum aspspSCAApproach;

  public static final String SERIALIZED_NAME_CONSENT_REQUEST_ID = "consentRequestId";
  @SerializedName(SERIALIZED_NAME_CONSENT_REQUEST_ID)
  private String consentRequestId;

  public static final String SERIALIZED_NAME_ORIGINAL_REQUEST_INFO = "originalRequestInfo";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_REQUEST_INFO)
  private PostPaymentsDomesticCreditTransfersConsentsOKBodyOriginalRequestInfo originalRequestInfo;

  public PostPaymentsDomesticCreditTransfersConsentsOKBody() {
  }

  public PostPaymentsDomesticCreditTransfersConsentsOKBody links(PostPaymentsDomesticCreditTransfersConsentsOKBodyLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public PostPaymentsDomesticCreditTransfersConsentsOKBodyLinks getLinks() {
    return links;
  }

  public void setLinks(PostPaymentsDomesticCreditTransfersConsentsOKBodyLinks links) {
    this.links = links;
  }


  public PostPaymentsDomesticCreditTransfersConsentsOKBody additionalData(PostPaymentsCrossBorderCreditTransfersConsentsOKBodyAdditionalData additionalData) {
    this.additionalData = additionalData;
    return this;
  }

  /**
   * Get additionalData
   * @return additionalData
   */
  @javax.annotation.Nullable
  public PostPaymentsCrossBorderCreditTransfersConsentsOKBodyAdditionalData getAdditionalData() {
    return additionalData;
  }

  public void setAdditionalData(PostPaymentsCrossBorderCreditTransfersConsentsOKBodyAdditionalData additionalData) {
    this.additionalData = additionalData;
  }


  public PostPaymentsDomesticCreditTransfersConsentsOKBody aspspSCAApproach(AspspSCAApproachEnum aspspSCAApproach) {
    this.aspspSCAApproach = aspspSCAApproach;
    return this;
  }

  /**
   * Get aspspSCAApproach
   * @return aspspSCAApproach
   */
  @javax.annotation.Nullable
  public AspspSCAApproachEnum getAspspSCAApproach() {
    return aspspSCAApproach;
  }

  public void setAspspSCAApproach(AspspSCAApproachEnum aspspSCAApproach) {
    this.aspspSCAApproach = aspspSCAApproach;
  }


  public PostPaymentsDomesticCreditTransfersConsentsOKBody consentRequestId(String consentRequestId) {
    this.consentRequestId = consentRequestId;
    return this;
  }

  /**
   * Get consentRequestId
   * @return consentRequestId
   */
  @javax.annotation.Nullable
  public String getConsentRequestId() {
    return consentRequestId;
  }

  public void setConsentRequestId(String consentRequestId) {
    this.consentRequestId = consentRequestId;
  }


  public PostPaymentsDomesticCreditTransfersConsentsOKBody originalRequestInfo(PostPaymentsDomesticCreditTransfersConsentsOKBodyOriginalRequestInfo originalRequestInfo) {
    this.originalRequestInfo = originalRequestInfo;
    return this;
  }

  /**
   * Get originalRequestInfo
   * @return originalRequestInfo
   */
  @javax.annotation.Nonnull
  public PostPaymentsDomesticCreditTransfersConsentsOKBodyOriginalRequestInfo getOriginalRequestInfo() {
    return originalRequestInfo;
  }

  public void setOriginalRequestInfo(PostPaymentsDomesticCreditTransfersConsentsOKBodyOriginalRequestInfo originalRequestInfo) {
    this.originalRequestInfo = originalRequestInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostPaymentsDomesticCreditTransfersConsentsOKBody postPaymentsDomesticCreditTransfersConsentsOKBody = (PostPaymentsDomesticCreditTransfersConsentsOKBody) o;
    return Objects.equals(this.links, postPaymentsDomesticCreditTransfersConsentsOKBody.links) &&
        Objects.equals(this.additionalData, postPaymentsDomesticCreditTransfersConsentsOKBody.additionalData) &&
        Objects.equals(this.aspspSCAApproach, postPaymentsDomesticCreditTransfersConsentsOKBody.aspspSCAApproach) &&
        Objects.equals(this.consentRequestId, postPaymentsDomesticCreditTransfersConsentsOKBody.consentRequestId) &&
        Objects.equals(this.originalRequestInfo, postPaymentsDomesticCreditTransfersConsentsOKBody.originalRequestInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, additionalData, aspspSCAApproach, consentRequestId, originalRequestInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostPaymentsDomesticCreditTransfersConsentsOKBody {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    additionalData: ").append(toIndentedString(additionalData)).append("\n");
    sb.append("    aspspSCAApproach: ").append(toIndentedString(aspspSCAApproach)).append("\n");
    sb.append("    consentRequestId: ").append(toIndentedString(consentRequestId)).append("\n");
    sb.append("    originalRequestInfo: ").append(toIndentedString(originalRequestInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("additionalData");
    openapiFields.add("aspspSCAApproach");
    openapiFields.add("consentRequestId");
    openapiFields.add("originalRequestInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("originalRequestInfo");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostPaymentsDomesticCreditTransfersConsentsOKBody
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostPaymentsDomesticCreditTransfersConsentsOKBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostPaymentsDomesticCreditTransfersConsentsOKBody is not found in the empty JSON string", PostPaymentsDomesticCreditTransfersConsentsOKBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostPaymentsDomesticCreditTransfersConsentsOKBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostPaymentsDomesticCreditTransfersConsentsOKBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PostPaymentsDomesticCreditTransfersConsentsOKBody.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `_links`
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        PostPaymentsDomesticCreditTransfersConsentsOKBodyLinks.validateJsonElement(jsonObj.get("_links"));
      }
      // validate the optional field `additionalData`
      if (jsonObj.get("additionalData") != null && !jsonObj.get("additionalData").isJsonNull()) {
        PostPaymentsCrossBorderCreditTransfersConsentsOKBodyAdditionalData.validateJsonElement(jsonObj.get("additionalData"));
      }
      if ((jsonObj.get("aspspSCAApproach") != null && !jsonObj.get("aspspSCAApproach").isJsonNull()) && !jsonObj.get("aspspSCAApproach").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aspspSCAApproach` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aspspSCAApproach").toString()));
      }
      // validate the optional field `aspspSCAApproach`
      if (jsonObj.get("aspspSCAApproach") != null && !jsonObj.get("aspspSCAApproach").isJsonNull()) {
        AspspSCAApproachEnum.validateJsonElement(jsonObj.get("aspspSCAApproach"));
      }
      if ((jsonObj.get("consentRequestId") != null && !jsonObj.get("consentRequestId").isJsonNull()) && !jsonObj.get("consentRequestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consentRequestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consentRequestId").toString()));
      }
      // validate the required field `originalRequestInfo`
      PostPaymentsDomesticCreditTransfersConsentsOKBodyOriginalRequestInfo.validateJsonElement(jsonObj.get("originalRequestInfo"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostPaymentsDomesticCreditTransfersConsentsOKBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostPaymentsDomesticCreditTransfersConsentsOKBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostPaymentsDomesticCreditTransfersConsentsOKBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostPaymentsDomesticCreditTransfersConsentsOKBody.class));

       return (TypeAdapter<T>) new TypeAdapter<PostPaymentsDomesticCreditTransfersConsentsOKBody>() {
           @Override
           public void write(JsonWriter out, PostPaymentsDomesticCreditTransfersConsentsOKBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostPaymentsDomesticCreditTransfersConsentsOKBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostPaymentsDomesticCreditTransfersConsentsOKBody given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostPaymentsDomesticCreditTransfersConsentsOKBody
   * @throws IOException if the JSON string is invalid with respect to PostPaymentsDomesticCreditTransfersConsentsOKBody
   */
  public static PostPaymentsDomesticCreditTransfersConsentsOKBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostPaymentsDomesticCreditTransfersConsentsOKBody.class);
  }

  /**
   * Convert an instance of PostPaymentsDomesticCreditTransfersConsentsOKBody to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

