/*
 * Open Banking - Payments initiation service
 * Open Banking - Payments initiation service
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Merchant;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:39.148602-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo {
  public static final String SERIALIZED_NAME_ASPSP_ID = "aspspId";
  @SerializedName(SERIALIZED_NAME_ASPSP_ID)
  private String aspspId;

  /**
   * Gets or Sets flags
   */
  @JsonAdapter(FlagsEnum.Adapter.class)
  public enum FlagsEnum {
    RETURN_RAW_CONSENT("Return.Raw.Consent");

    private String value;

    FlagsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FlagsEnum fromValue(String value) {
      for (FlagsEnum b : FlagsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FlagsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FlagsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FlagsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FlagsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FlagsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private List<FlagsEnum> flags = new ArrayList<>();

  public static final String SERIALIZED_NAME_MERCHANT = "merchant";
  @SerializedName(SERIALIZED_NAME_MERCHANT)
  private Merchant merchant;

  public static final String SERIALIZED_NAME_TPP_REDIRECT_U_R_I = "tppRedirectURI";
  @SerializedName(SERIALIZED_NAME_TPP_REDIRECT_U_R_I)
  private String tppRedirectURI;

  public static final String SERIALIZED_NAME_X_REQUEST_ID = "xRequestId";
  @SerializedName(SERIALIZED_NAME_X_REQUEST_ID)
  private String xRequestId;

  public PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo() {
  }

  public PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo aspspId(String aspspId) {
    this.aspspId = aspspId;
    return this;
  }

  /**
   * Identification of ASPSP
   * @return aspspId
   */
  @javax.annotation.Nonnull
  public String getAspspId() {
    return aspspId;
  }

  public void setAspspId(String aspspId) {
    this.aspspId = aspspId;
  }


  public PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo flags(List<FlagsEnum> flags) {
    this.flags = flags;
    return this;
  }

  public PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo addFlagsItem(FlagsEnum flagsItem) {
    if (this.flags == null) {
      this.flags = new ArrayList<>();
    }
    this.flags.add(flagsItem);
    return this;
  }

  /**
   * Request information flags which can influence the behaviour or returned data
   * @return flags
   */
  @javax.annotation.Nullable
  public List<FlagsEnum> getFlags() {
    return flags;
  }

  public void setFlags(List<FlagsEnum> flags) {
    this.flags = flags;
  }


  public PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo merchant(Merchant merchant) {
    this.merchant = merchant;
    return this;
  }

  /**
   * Get merchant
   * @return merchant
   */
  @javax.annotation.Nullable
  public Merchant getMerchant() {
    return merchant;
  }

  public void setMerchant(Merchant merchant) {
    this.merchant = merchant;
  }


  public PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo tppRedirectURI(String tppRedirectURI) {
    this.tppRedirectURI = tppRedirectURI;
    return this;
  }

  /**
   * Call back uri
   * @return tppRedirectURI
   */
  @javax.annotation.Nonnull
  public String getTppRedirectURI() {
    return tppRedirectURI;
  }

  public void setTppRedirectURI(String tppRedirectURI) {
    this.tppRedirectURI = tppRedirectURI;
  }


  public PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo xRequestId(String xRequestId) {
    this.xRequestId = xRequestId;
    return this;
  }

  /**
   * Request id given by the client
   * @return xRequestId
   */
  @javax.annotation.Nonnull
  public String getxRequestId() {
    return xRequestId;
  }

  public void setxRequestId(String xRequestId) {
    this.xRequestId = xRequestId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo postPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo = (PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo) o;
    return Objects.equals(this.aspspId, postPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo.aspspId) &&
        Objects.equals(this.flags, postPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo.flags) &&
        Objects.equals(this.merchant, postPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo.merchant) &&
        Objects.equals(this.tppRedirectURI, postPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo.tppRedirectURI) &&
        Objects.equals(this.xRequestId, postPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo.xRequestId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aspspId, flags, merchant, tppRedirectURI, xRequestId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo {\n");
    sb.append("    aspspId: ").append(toIndentedString(aspspId)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    merchant: ").append(toIndentedString(merchant)).append("\n");
    sb.append("    tppRedirectURI: ").append(toIndentedString(tppRedirectURI)).append("\n");
    sb.append("    xRequestId: ").append(toIndentedString(xRequestId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aspspId");
    openapiFields.add("flags");
    openapiFields.add("merchant");
    openapiFields.add("tppRedirectURI");
    openapiFields.add("xRequestId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("aspspId");
    openapiRequiredFields.add("tppRedirectURI");
    openapiRequiredFields.add("xRequestId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo is not found in the empty JSON string", PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("aspspId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aspspId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aspspId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("flags") != null && !jsonObj.get("flags").isJsonNull() && !jsonObj.get("flags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `flags` to be an array in the JSON string but got `%s`", jsonObj.get("flags").toString()));
      }
      // validate the optional field `merchant`
      if (jsonObj.get("merchant") != null && !jsonObj.get("merchant").isJsonNull()) {
        Merchant.validateJsonElement(jsonObj.get("merchant"));
      }
      if (!jsonObj.get("tppRedirectURI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tppRedirectURI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tppRedirectURI").toString()));
      }
      if (!jsonObj.get("xRequestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xRequestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xRequestId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo>() {
           @Override
           public void write(JsonWriter out, PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo
   * @throws IOException if the JSON string is invalid with respect to PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo
   */
  public static PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo.class);
  }

  /**
   * Convert an instance of PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

