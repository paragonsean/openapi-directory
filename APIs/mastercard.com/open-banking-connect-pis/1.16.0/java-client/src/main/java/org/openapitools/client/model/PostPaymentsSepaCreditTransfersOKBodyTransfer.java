/*
 * Open Banking - Payments initiation service
 * Open Banking - Payments initiation service
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostPaymentsSepaCreditTransfersOKBodyTransfer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:39.148602-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PostPaymentsSepaCreditTransfersOKBodyTransfer {
  public static final String SERIALIZED_NAME_PAYMENT_ID = "paymentId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ID)
  private String paymentId;

  public static final String SERIALIZED_NAME_STATUS_REASON_CODE = "statusReasonCode";
  @SerializedName(SERIALIZED_NAME_STATUS_REASON_CODE)
  private String statusReasonCode;

  /**
   * Status of the payment
   */
  @JsonAdapter(TransactionStatusEnum.Adapter.class)
  public enum TransactionStatusEnum {
    ACCP("ACCP"),
    
    ACSC("ACSC"),
    
    ACSP("ACSP"),
    
    ACTC("ACTC"),
    
    ACWC("ACWC"),
    
    ACWP("ACWP"),
    
    PDNG("PDNG"),
    
    RCVD("RCVD"),
    
    RJCT("RJCT"),
    
    CANC("CANC");

    private String value;

    TransactionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransactionStatusEnum fromValue(String value) {
      for (TransactionStatusEnum b : TransactionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransactionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransactionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransactionStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransactionStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSACTION_STATUS = "transactionStatus";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_STATUS)
  private TransactionStatusEnum transactionStatus;

  public PostPaymentsSepaCreditTransfersOKBodyTransfer() {
  }

  public PostPaymentsSepaCreditTransfersOKBodyTransfer paymentId(String paymentId) {
    this.paymentId = paymentId;
    return this;
  }

  /**
   * PI / Transfer identification
   * @return paymentId
   */
  @javax.annotation.Nonnull
  public String getPaymentId() {
    return paymentId;
  }

  public void setPaymentId(String paymentId) {
    this.paymentId = paymentId;
  }


  public PostPaymentsSepaCreditTransfersOKBodyTransfer statusReasonCode(String statusReasonCode) {
    this.statusReasonCode = statusReasonCode;
    return this;
  }

  /**
   * Rejection reson code
   * @return statusReasonCode
   */
  @javax.annotation.Nullable
  public String getStatusReasonCode() {
    return statusReasonCode;
  }

  public void setStatusReasonCode(String statusReasonCode) {
    this.statusReasonCode = statusReasonCode;
  }


  public PostPaymentsSepaCreditTransfersOKBodyTransfer transactionStatus(TransactionStatusEnum transactionStatus) {
    this.transactionStatus = transactionStatus;
    return this;
  }

  /**
   * Status of the payment
   * @return transactionStatus
   */
  @javax.annotation.Nonnull
  public TransactionStatusEnum getTransactionStatus() {
    return transactionStatus;
  }

  public void setTransactionStatus(TransactionStatusEnum transactionStatus) {
    this.transactionStatus = transactionStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostPaymentsSepaCreditTransfersOKBodyTransfer postPaymentsSepaCreditTransfersOKBodyTransfer = (PostPaymentsSepaCreditTransfersOKBodyTransfer) o;
    return Objects.equals(this.paymentId, postPaymentsSepaCreditTransfersOKBodyTransfer.paymentId) &&
        Objects.equals(this.statusReasonCode, postPaymentsSepaCreditTransfersOKBodyTransfer.statusReasonCode) &&
        Objects.equals(this.transactionStatus, postPaymentsSepaCreditTransfersOKBodyTransfer.transactionStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentId, statusReasonCode, transactionStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostPaymentsSepaCreditTransfersOKBodyTransfer {\n");
    sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
    sb.append("    statusReasonCode: ").append(toIndentedString(statusReasonCode)).append("\n");
    sb.append("    transactionStatus: ").append(toIndentedString(transactionStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("paymentId");
    openapiFields.add("statusReasonCode");
    openapiFields.add("transactionStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("paymentId");
    openapiRequiredFields.add("transactionStatus");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostPaymentsSepaCreditTransfersOKBodyTransfer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostPaymentsSepaCreditTransfersOKBodyTransfer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostPaymentsSepaCreditTransfersOKBodyTransfer is not found in the empty JSON string", PostPaymentsSepaCreditTransfersOKBodyTransfer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostPaymentsSepaCreditTransfersOKBodyTransfer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostPaymentsSepaCreditTransfersOKBodyTransfer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PostPaymentsSepaCreditTransfersOKBodyTransfer.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("paymentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentId").toString()));
      }
      if ((jsonObj.get("statusReasonCode") != null && !jsonObj.get("statusReasonCode").isJsonNull()) && !jsonObj.get("statusReasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusReasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusReasonCode").toString()));
      }
      if (!jsonObj.get("transactionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionStatus").toString()));
      }
      // validate the required field `transactionStatus`
      TransactionStatusEnum.validateJsonElement(jsonObj.get("transactionStatus"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostPaymentsSepaCreditTransfersOKBodyTransfer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostPaymentsSepaCreditTransfersOKBodyTransfer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostPaymentsSepaCreditTransfersOKBodyTransfer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostPaymentsSepaCreditTransfersOKBodyTransfer.class));

       return (TypeAdapter<T>) new TypeAdapter<PostPaymentsSepaCreditTransfersOKBodyTransfer>() {
           @Override
           public void write(JsonWriter out, PostPaymentsSepaCreditTransfersOKBodyTransfer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostPaymentsSepaCreditTransfersOKBodyTransfer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostPaymentsSepaCreditTransfersOKBodyTransfer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostPaymentsSepaCreditTransfersOKBodyTransfer
   * @throws IOException if the JSON string is invalid with respect to PostPaymentsSepaCreditTransfersOKBodyTransfer
   */
  public static PostPaymentsSepaCreditTransfersOKBodyTransfer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostPaymentsSepaCreditTransfersOKBodyTransfer.class);
  }

  /**
   * Convert an instance of PostPaymentsSepaCreditTransfersOKBodyTransfer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

