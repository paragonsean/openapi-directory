/**
 * Open Banking - Payments initiation service
 * Open Banking - Payments initiation service
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdditionalDataField from './AdditionalDataField';
import PostAspspsParamsBodyRequestInfo from './PostAspspsParamsBodyRequestInfo';

/**
 * The PostAspspsParamsBody model module.
 * @module model/PostAspspsParamsBody
 * @version 1.16.0
 */
class PostAspspsParamsBody {
    /**
     * Constructs a new <code>PostAspspsParamsBody</code>.
     * @alias module:model/PostAspspsParamsBody
     * @param requestInfo {module:model/PostAspspsParamsBodyRequestInfo} 
     */
    constructor(requestInfo) { 
        
        PostAspspsParamsBody.initialize(this, requestInfo);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, requestInfo) { 
        obj['requestInfo'] = requestInfo;
    }

    /**
     * Constructs a <code>PostAspspsParamsBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostAspspsParamsBody} obj Optional instance to populate.
     * @return {module:model/PostAspspsParamsBody} The populated <code>PostAspspsParamsBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostAspspsParamsBody();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('requestInfo')) {
                obj['requestInfo'] = PostAspspsParamsBodyRequestInfo.constructFromObject(data['requestInfo']);
            }
            if (data.hasOwnProperty('returnAdditionalData')) {
                obj['returnAdditionalData'] = ApiClient.convertToType(data['returnAdditionalData'], [AdditionalDataField]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostAspspsParamsBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostAspspsParamsBody</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PostAspspsParamsBody.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `requestInfo`
        if (data['requestInfo']) { // data not null
          PostAspspsParamsBodyRequestInfo.validateJSON(data['requestInfo']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['returnAdditionalData'])) {
            throw new Error("Expected the field `returnAdditionalData` to be an array in the JSON data but got " + data['returnAdditionalData']);
        }

        return true;
    }


}

PostAspspsParamsBody.RequiredProperties = ["requestInfo"];

/**
 * Filter by country code (ISO 3166 Alpha 2), exact match pattern
 * @member {String} country
 */
PostAspspsParamsBody.prototype['country'] = undefined;

/**
 * Filter by internal id of ASPSP, exact match pattern
 * @member {String} id
 */
PostAspspsParamsBody.prototype['id'] = undefined;

/**
 * Filter by name of ASPSP, contains pattern
 * @member {String} name
 */
PostAspspsParamsBody.prototype['name'] = undefined;

/**
 * @member {module:model/PostAspspsParamsBodyRequestInfo} requestInfo
 */
PostAspspsParamsBody.prototype['requestInfo'] = undefined;

/**
 * Specifies what additional fields for ASPSP object should be included in response
 * @member {Array.<module:model/AdditionalDataField>} returnAdditionalData
 */
PostAspspsParamsBody.prototype['returnAdditionalData'] = undefined;






export default PostAspspsParamsBody;

