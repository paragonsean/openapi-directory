/**
 * Open Banking - Payments initiation service
 * Open Banking - Payments initiation service
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAccount from './PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAccount';
import PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAddress from './PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAddress';
import PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent from './PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent';
import PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAccount from './PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAccount';
import PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAddress from './PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAddress';
import PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsInstructedAmount from './PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsInstructedAmount';

/**
 * The PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments model module.
 * @module model/PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments
 * @version 1.16.0
 */
class PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments {
    /**
     * Constructs a new <code>PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments</code>.
     * @alias module:model/PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments
     * @param creditorAccount {module:model/PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAccount} 
     * @param creditorAgent {module:model/PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent} 
     * @param creditorName {String} Bank name
     * @param debtorAccount {module:model/PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAccount} 
     * @param endToEndIdentification {String} Payment end to end identification
     * @param instructedAmount {module:model/PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsInstructedAmount} 
     * @param instructionPriority {module:model/PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.InstructionPriorityEnum} Indicator of the urgency or order of importance
     * @param localInstrument {module:model/PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.LocalInstrumentEnum} User community specific instrument.
     */
    constructor(creditorAccount, creditorAgent, creditorName, debtorAccount, endToEndIdentification, instructedAmount, instructionPriority, localInstrument) { 
        
        PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.initialize(this, creditorAccount, creditorAgent, creditorName, debtorAccount, endToEndIdentification, instructedAmount, instructionPriority, localInstrument);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, creditorAccount, creditorAgent, creditorName, debtorAccount, endToEndIdentification, instructedAmount, instructionPriority, localInstrument) { 
        obj['creditorAccount'] = creditorAccount;
        obj['creditorAgent'] = creditorAgent;
        obj['creditorName'] = creditorName;
        obj['debtorAccount'] = debtorAccount;
        obj['endToEndIdentification'] = endToEndIdentification;
        obj['instructedAmount'] = instructedAmount;
        obj['instructionPriority'] = instructionPriority;
        obj['localInstrument'] = localInstrument;
    }

    /**
     * Constructs a <code>PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments} obj Optional instance to populate.
     * @return {module:model/PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments} The populated <code>PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments();

            if (data.hasOwnProperty('creditorAccount')) {
                obj['creditorAccount'] = PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAccount.constructFromObject(data['creditorAccount']);
            }
            if (data.hasOwnProperty('creditorAddress')) {
                obj['creditorAddress'] = PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.constructFromObject(data['creditorAddress']);
            }
            if (data.hasOwnProperty('creditorAgent')) {
                obj['creditorAgent'] = PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.constructFromObject(data['creditorAgent']);
            }
            if (data.hasOwnProperty('creditorName')) {
                obj['creditorName'] = ApiClient.convertToType(data['creditorName'], 'String');
            }
            if (data.hasOwnProperty('debtorAccount')) {
                obj['debtorAccount'] = PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAccount.constructFromObject(data['debtorAccount']);
            }
            if (data.hasOwnProperty('debtorAddress')) {
                obj['debtorAddress'] = PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAddress.constructFromObject(data['debtorAddress']);
            }
            if (data.hasOwnProperty('debtorName')) {
                obj['debtorName'] = ApiClient.convertToType(data['debtorName'], 'String');
            }
            if (data.hasOwnProperty('endToEndIdentification')) {
                obj['endToEndIdentification'] = ApiClient.convertToType(data['endToEndIdentification'], 'String');
            }
            if (data.hasOwnProperty('instructedAmount')) {
                obj['instructedAmount'] = PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsInstructedAmount.constructFromObject(data['instructedAmount']);
            }
            if (data.hasOwnProperty('instructionIdentification')) {
                obj['instructionIdentification'] = ApiClient.convertToType(data['instructionIdentification'], 'String');
            }
            if (data.hasOwnProperty('instructionPriority')) {
                obj['instructionPriority'] = ApiClient.convertToType(data['instructionPriority'], 'String');
            }
            if (data.hasOwnProperty('localInstrument')) {
                obj['localInstrument'] = ApiClient.convertToType(data['localInstrument'], 'String');
            }
            if (data.hasOwnProperty('remittanceInformationReference')) {
                obj['remittanceInformationReference'] = ApiClient.convertToType(data['remittanceInformationReference'], 'String');
            }
            if (data.hasOwnProperty('remittanceInformationUnstructured')) {
                obj['remittanceInformationUnstructured'] = ApiClient.convertToType(data['remittanceInformationUnstructured'], 'String');
            }
            if (data.hasOwnProperty('requestedExecutionDate')) {
                obj['requestedExecutionDate'] = ApiClient.convertToType(data['requestedExecutionDate'], 'Date');
            }
            if (data.hasOwnProperty('transferCharges')) {
                obj['transferCharges'] = ApiClient.convertToType(data['transferCharges'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `creditorAccount`
        if (data['creditorAccount']) { // data not null
          PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAccount.validateJSON(data['creditorAccount']);
        }
        // validate the optional field `creditorAddress`
        if (data['creditorAddress']) { // data not null
          PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.validateJSON(data['creditorAddress']);
        }
        // validate the optional field `creditorAgent`
        if (data['creditorAgent']) { // data not null
          PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.validateJSON(data['creditorAgent']);
        }
        // ensure the json data is a string
        if (data['creditorName'] && !(typeof data['creditorName'] === 'string' || data['creditorName'] instanceof String)) {
            throw new Error("Expected the field `creditorName` to be a primitive type in the JSON string but got " + data['creditorName']);
        }
        // validate the optional field `debtorAccount`
        if (data['debtorAccount']) { // data not null
          PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAccount.validateJSON(data['debtorAccount']);
        }
        // validate the optional field `debtorAddress`
        if (data['debtorAddress']) { // data not null
          PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAddress.validateJSON(data['debtorAddress']);
        }
        // ensure the json data is a string
        if (data['debtorName'] && !(typeof data['debtorName'] === 'string' || data['debtorName'] instanceof String)) {
            throw new Error("Expected the field `debtorName` to be a primitive type in the JSON string but got " + data['debtorName']);
        }
        // ensure the json data is a string
        if (data['endToEndIdentification'] && !(typeof data['endToEndIdentification'] === 'string' || data['endToEndIdentification'] instanceof String)) {
            throw new Error("Expected the field `endToEndIdentification` to be a primitive type in the JSON string but got " + data['endToEndIdentification']);
        }
        // validate the optional field `instructedAmount`
        if (data['instructedAmount']) { // data not null
          PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsInstructedAmount.validateJSON(data['instructedAmount']);
        }
        // ensure the json data is a string
        if (data['instructionIdentification'] && !(typeof data['instructionIdentification'] === 'string' || data['instructionIdentification'] instanceof String)) {
            throw new Error("Expected the field `instructionIdentification` to be a primitive type in the JSON string but got " + data['instructionIdentification']);
        }
        // ensure the json data is a string
        if (data['instructionPriority'] && !(typeof data['instructionPriority'] === 'string' || data['instructionPriority'] instanceof String)) {
            throw new Error("Expected the field `instructionPriority` to be a primitive type in the JSON string but got " + data['instructionPriority']);
        }
        // ensure the json data is a string
        if (data['localInstrument'] && !(typeof data['localInstrument'] === 'string' || data['localInstrument'] instanceof String)) {
            throw new Error("Expected the field `localInstrument` to be a primitive type in the JSON string but got " + data['localInstrument']);
        }
        // ensure the json data is a string
        if (data['remittanceInformationReference'] && !(typeof data['remittanceInformationReference'] === 'string' || data['remittanceInformationReference'] instanceof String)) {
            throw new Error("Expected the field `remittanceInformationReference` to be a primitive type in the JSON string but got " + data['remittanceInformationReference']);
        }
        // ensure the json data is a string
        if (data['remittanceInformationUnstructured'] && !(typeof data['remittanceInformationUnstructured'] === 'string' || data['remittanceInformationUnstructured'] instanceof String)) {
            throw new Error("Expected the field `remittanceInformationUnstructured` to be a primitive type in the JSON string but got " + data['remittanceInformationUnstructured']);
        }
        // ensure the json data is a string
        if (data['transferCharges'] && !(typeof data['transferCharges'] === 'string' || data['transferCharges'] instanceof String)) {
            throw new Error("Expected the field `transferCharges` to be a primitive type in the JSON string but got " + data['transferCharges']);
        }

        return true;
    }


}

PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.RequiredProperties = ["creditorAccount", "creditorAgent", "creditorName", "debtorAccount", "endToEndIdentification", "instructedAmount", "instructionPriority", "localInstrument"];

/**
 * @member {module:model/PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAccount} creditorAccount
 */
PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.prototype['creditorAccount'] = undefined;

/**
 * @member {module:model/PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAddress} creditorAddress
 */
PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.prototype['creditorAddress'] = undefined;

/**
 * @member {module:model/PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent} creditorAgent
 */
PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.prototype['creditorAgent'] = undefined;

/**
 * Bank name
 * @member {String} creditorName
 */
PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.prototype['creditorName'] = undefined;

/**
 * @member {module:model/PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAccount} debtorAccount
 */
PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.prototype['debtorAccount'] = undefined;

/**
 * @member {module:model/PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAddress} debtorAddress
 */
PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.prototype['debtorAddress'] = undefined;

/**
 * Debtor legal name
 * @member {String} debtorName
 */
PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.prototype['debtorName'] = undefined;

/**
 * Payment end to end identification
 * @member {String} endToEndIdentification
 */
PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.prototype['endToEndIdentification'] = undefined;

/**
 * @member {module:model/PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsInstructedAmount} instructedAmount
 */
PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.prototype['instructedAmount'] = undefined;

/**
 * Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction. If API profile of ASPSP is CMA9, then field is mandatory.
 * @member {String} instructionIdentification
 */
PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.prototype['instructionIdentification'] = undefined;

/**
 * Indicator of the urgency or order of importance
 * @member {module:model/PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.InstructionPriorityEnum} instructionPriority
 */
PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.prototype['instructionPriority'] = undefined;

/**
 * User community specific instrument.
 * @member {module:model/PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.LocalInstrumentEnum} localInstrument
 */
PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.prototype['localInstrument'] = undefined;

/**
 * Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction. (future use)
 * @member {String} remittanceInformationReference
 */
PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.prototype['remittanceInformationReference'] = undefined;

/**
 * Description of the payment
 * @member {String} remittanceInformationUnstructured
 */
PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.prototype['remittanceInformationUnstructured'] = undefined;

/**
 * Scheduled Payment Date
 * @member {Date} requestedExecutionDate
 */
PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.prototype['requestedExecutionDate'] = undefined;

/**
 * Charge bearer
 * @member {module:model/PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.TransferChargesEnum} transferCharges
 */
PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments.prototype['transferCharges'] = undefined;





/**
 * Allowed values for the <code>instructionPriority</code> property.
 * @enum {String}
 * @readonly
 */
PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments['InstructionPriorityEnum'] = {

    /**
     * value: "Normal"
     * @const
     */
    "Normal": "Normal",

    /**
     * value: "Urgent"
     * @const
     */
    "Urgent": "Urgent"
};


/**
 * Allowed values for the <code>localInstrument</code> property.
 * @enum {String}
 * @readonly
 */
PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments['LocalInstrumentEnum'] = {

    /**
     * value: "Swift"
     * @const
     */
    "Swift": "Swift"
};


/**
 * Allowed values for the <code>transferCharges</code> property.
 * @enum {String}
 * @readonly
 */
PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments['TransferChargesEnum'] = {

    /**
     * value: "SEN"
     * @const
     */
    "SEN": "SEN",

    /**
     * value: "SHA"
     * @const
     */
    "SHA": "SHA",

    /**
     * value: "BEN"
     * @const
     */
    "BEN": "BEN"
};



export default PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments;

