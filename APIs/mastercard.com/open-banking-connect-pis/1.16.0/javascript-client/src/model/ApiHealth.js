/**
 * Open Banking - Payments initiation service
 * Open Banking - Payments initiation service
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiHealthConnectors from './ApiHealthConnectors';

/**
 * The ApiHealth model module.
 * @module model/ApiHealth
 * @version 1.16.0
 */
class ApiHealth {
    /**
     * Constructs a new <code>ApiHealth</code>.
     * API Healt response object
     * @alias module:model/ApiHealth
     * @param status {module:model/ApiHealth.StatusEnum} Overall connect platform availability status
     */
    constructor(status) { 
        
        ApiHealth.initialize(this, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, status) { 
        obj['status'] = status;
    }

    /**
     * Constructs a <code>ApiHealth</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiHealth} obj Optional instance to populate.
     * @return {module:model/ApiHealth} The populated <code>ApiHealth</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiHealth();

            if (data.hasOwnProperty('connectors')) {
                obj['connectors'] = ApiClient.convertToType(data['connectors'], [ApiHealthConnectors]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('statusMessage')) {
                obj['statusMessage'] = ApiClient.convertToType(data['statusMessage'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiHealth</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiHealth</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ApiHealth.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['connectors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['connectors'])) {
                throw new Error("Expected the field `connectors` to be an array in the JSON data but got " + data['connectors']);
            }
            // validate the optional field `connectors` (array)
            for (const item of data['connectors']) {
                ApiHealthConnectors.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['statusMessage'] && !(typeof data['statusMessage'] === 'string' || data['statusMessage'] instanceof String)) {
            throw new Error("Expected the field `statusMessage` to be a primitive type in the JSON string but got " + data['statusMessage']);
        }

        return true;
    }


}

ApiHealth.RequiredProperties = ["status"];

/**
 * Connector availability
 * @member {Array.<module:model/ApiHealthConnectors>} connectors
 */
ApiHealth.prototype['connectors'] = undefined;

/**
 * Overall connect platform availability status
 * @member {module:model/ApiHealth.StatusEnum} status
 */
ApiHealth.prototype['status'] = undefined;

/**
 * Additional informational message
 * @member {String} statusMessage
 */
ApiHealth.prototype['statusMessage'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ApiHealth['StatusEnum'] = {

    /**
     * value: "UP"
     * @const
     */
    "UP": "UP",

    /**
     * value: "DOWN"
     * @const
     */
    "DOWN": "DOWN",

    /**
     * value: "DEGRADED"
     * @const
     */
    "DEGRADED": "DEGRADED"
};



export default ApiHealth;

