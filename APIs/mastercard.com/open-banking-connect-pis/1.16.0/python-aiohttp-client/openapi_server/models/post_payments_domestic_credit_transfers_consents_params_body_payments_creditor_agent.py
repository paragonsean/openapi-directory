# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAgent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clearing_system_identification: str=None, member_identification: str=None):
        """PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAgent - a model defined in OpenAPI

        :param clearing_system_identification: The clearing_system_identification of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.
        :param member_identification: The member_identification of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.
        """
        self.openapi_types = {
            'clearing_system_identification': str,
            'member_identification': str
        }

        self.attribute_map = {
            'clearing_system_identification': 'clearingSystemIdentification',
            'member_identification': 'memberIdentification'
        }

        self._clearing_system_identification = clearing_system_identification
        self._member_identification = member_identification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAgent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The postPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAgent of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clearing_system_identification(self):
        """Gets the clearing_system_identification of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.

        System identification:   * 'UK.SortCode' - UK FPS 

        :return: The clearing_system_identification of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.
        :rtype: str
        """
        return self._clearing_system_identification

    @clearing_system_identification.setter
    def clearing_system_identification(self, clearing_system_identification):
        """Sets the clearing_system_identification of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.

        System identification:   * 'UK.SortCode' - UK FPS 

        :param clearing_system_identification: The clearing_system_identification of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.
        :type clearing_system_identification: str
        """
        allowed_values = ["UK.SortCode"]  # noqa: E501
        if clearing_system_identification not in allowed_values:
            raise ValueError(
                "Invalid value for `clearing_system_identification` ({0}), must be one of {1}"
                .format(clearing_system_identification, allowed_values)
            )

        self._clearing_system_identification = clearing_system_identification

    @property
    def member_identification(self):
        """Gets the member_identification of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.

        Sort code

        :return: The member_identification of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.
        :rtype: str
        """
        return self._member_identification

    @member_identification.setter
    def member_identification(self, member_identification):
        """Sets the member_identification of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.

        Sort code

        :param member_identification: The member_identification of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.
        :type member_identification: str
        """
        if member_identification is None:
            raise ValueError("Invalid value for `member_identification`, must not be `None`")
        if member_identification is not None and len(member_identification) > 256:
            raise ValueError("Invalid value for `member_identification`, length must be less than or equal to `256`")
        if member_identification is not None and len(member_identification) < 1:
            raise ValueError("Invalid value for `member_identification`, length must be greater than or equal to `1`")

        self._member_identification = member_identification
