# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, iban: str=None):
        """PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAccount - a model defined in OpenAPI

        :param iban: The iban of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAccount.
        """
        self.openapi_types = {
            'iban': str
        }

        self.attribute_map = {
            'iban': 'iban'
        }

        self._iban = iban

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The postPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAccount of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def iban(self):
        """Gets the iban of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAccount.

        Account IBAN

        :return: The iban of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAccount.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAccount.

        Account IBAN

        :param iban: The iban of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAccount.
        :type iban: str
        """
        if iban is None:
            raise ValueError("Invalid value for `iban`, must not be `None`")
        if iban is not None and not re.search(r'^[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}$', iban):
            raise ValueError("Invalid value for `iban`, must be a follow pattern or equal to `/^[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}$/`")

        self._iban = iban
