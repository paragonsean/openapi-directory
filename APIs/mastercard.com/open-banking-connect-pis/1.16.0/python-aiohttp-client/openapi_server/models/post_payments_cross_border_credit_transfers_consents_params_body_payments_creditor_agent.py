# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identification: str=None, scheme_name: str=None):
        """PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent - a model defined in OpenAPI

        :param identification: The identification of this PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.
        :param scheme_name: The scheme_name of this PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.
        """
        self.openapi_types = {
            'identification': str,
            'scheme_name': str
        }

        self.attribute_map = {
            'identification': 'identification',
            'scheme_name': 'schemeName'
        }

        self._identification = identification
        self._scheme_name = scheme_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The postPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent of this PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identification(self):
        """Gets the identification of this PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.

        Agent identification

        :return: The identification of this PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.
        :rtype: str
        """
        return self._identification

    @identification.setter
    def identification(self, identification):
        """Sets the identification of this PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.

        Agent identification

        :param identification: The identification of this PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.
        :type identification: str
        """
        if identification is None:
            raise ValueError("Invalid value for `identification`, must not be `None`")
        if identification is not None and len(identification) > 256:
            raise ValueError("Invalid value for `identification`, length must be less than or equal to `256`")
        if identification is not None and len(identification) < 1:
            raise ValueError("Invalid value for `identification`, length must be greater than or equal to `1`")

        self._identification = identification

    @property
    def scheme_name(self):
        """Gets the scheme_name of this PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.

        Scheme for the agent/bank identification

        :return: The scheme_name of this PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.
        :rtype: str
        """
        return self._scheme_name

    @scheme_name.setter
    def scheme_name(self, scheme_name):
        """Sets the scheme_name of this PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.

        Scheme for the agent/bank identification

        :param scheme_name: The scheme_name of this PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.
        :type scheme_name: str
        """
        allowed_values = ["BIC"]  # noqa: E501
        if scheme_name not in allowed_values:
            raise ValueError(
                "Invalid value for `scheme_name` ({0}), must be one of {1}"
                .format(scheme_name, allowed_values)
            )

        self._scheme_name = scheme_name
