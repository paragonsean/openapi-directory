# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.logo_object import LogoObject
from openapi_server import util


class PostAspspsOKBodyAspspsItems(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aspsp_services: List[str]=None, capabilities: Dict[str, bool]=None, country: str=None, id: str=None, logo: LogoObject=None, name: str=None, profile: str=None):
        """PostAspspsOKBodyAspspsItems - a model defined in OpenAPI

        :param aspsp_services: The aspsp_services of this PostAspspsOKBodyAspspsItems.
        :param capabilities: The capabilities of this PostAspspsOKBodyAspspsItems.
        :param country: The country of this PostAspspsOKBodyAspspsItems.
        :param id: The id of this PostAspspsOKBodyAspspsItems.
        :param logo: The logo of this PostAspspsOKBodyAspspsItems.
        :param name: The name of this PostAspspsOKBodyAspspsItems.
        :param profile: The profile of this PostAspspsOKBodyAspspsItems.
        """
        self.openapi_types = {
            'aspsp_services': List[str],
            'capabilities': Dict[str, bool],
            'country': str,
            'id': str,
            'logo': LogoObject,
            'name': str,
            'profile': str
        }

        self.attribute_map = {
            'aspsp_services': 'aspspServices',
            'capabilities': 'capabilities',
            'country': 'country',
            'id': 'id',
            'logo': 'logo',
            'name': 'name',
            'profile': 'profile'
        }

        self._aspsp_services = aspsp_services
        self._capabilities = capabilities
        self._country = country
        self._id = id
        self._logo = logo
        self._name = name
        self._profile = profile

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostAspspsOKBodyAspspsItems':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The postAspspsOKBodyAspspsItems of this PostAspspsOKBodyAspspsItems.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aspsp_services(self):
        """Gets the aspsp_services of this PostAspspsOKBodyAspspsItems.

        Provided services, AIS - account information, PIS - payment initiation

        :return: The aspsp_services of this PostAspspsOKBodyAspspsItems.
        :rtype: List[str]
        """
        return self._aspsp_services

    @aspsp_services.setter
    def aspsp_services(self, aspsp_services):
        """Sets the aspsp_services of this PostAspspsOKBodyAspspsItems.

        Provided services, AIS - account information, PIS - payment initiation

        :param aspsp_services: The aspsp_services of this PostAspspsOKBodyAspspsItems.
        :type aspsp_services: List[str]
        """
        allowed_values = ["AIS", "PIS", "COF"]  # noqa: E501
        if not set(aspsp_services).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `aspsp_services` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(aspsp_services) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._aspsp_services = aspsp_services

    @property
    def capabilities(self):
        """Gets the capabilities of this PostAspspsOKBodyAspspsItems.

        Capabilities related to api profile assigned to ASPSP

        :return: The capabilities of this PostAspspsOKBodyAspspsItems.
        :rtype: Dict[str, bool]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this PostAspspsOKBodyAspspsItems.

        Capabilities related to api profile assigned to ASPSP

        :param capabilities: The capabilities of this PostAspspsOKBodyAspspsItems.
        :type capabilities: Dict[str, bool]
        """

        self._capabilities = capabilities

    @property
    def country(self):
        """Gets the country of this PostAspspsOKBodyAspspsItems.

        Country code

        :return: The country of this PostAspspsOKBodyAspspsItems.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PostAspspsOKBodyAspspsItems.

        Country code

        :param country: The country of this PostAspspsOKBodyAspspsItems.
        :type country: str
        """

        self._country = country

    @property
    def id(self):
        """Gets the id of this PostAspspsOKBodyAspspsItems.

        Identification of the ASPSP

        :return: The id of this PostAspspsOKBodyAspspsItems.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PostAspspsOKBodyAspspsItems.

        Identification of the ASPSP

        :param id: The id of this PostAspspsOKBodyAspspsItems.
        :type id: str
        """

        self._id = id

    @property
    def logo(self):
        """Gets the logo of this PostAspspsOKBodyAspspsItems.


        :return: The logo of this PostAspspsOKBodyAspspsItems.
        :rtype: LogoObject
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this PostAspspsOKBodyAspspsItems.


        :param logo: The logo of this PostAspspsOKBodyAspspsItems.
        :type logo: LogoObject
        """

        self._logo = logo

    @property
    def name(self):
        """Gets the name of this PostAspspsOKBodyAspspsItems.

        Name of the ASPSP

        :return: The name of this PostAspspsOKBodyAspspsItems.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostAspspsOKBodyAspspsItems.

        Name of the ASPSP

        :param name: The name of this PostAspspsOKBodyAspspsItems.
        :type name: str
        """

        self._name = name

    @property
    def profile(self):
        """Gets the profile of this PostAspspsOKBodyAspspsItems.

        ASPSP profile

        :return: The profile of this PostAspspsOKBodyAspspsItems.
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this PostAspspsOKBodyAspspsItems.

        ASPSP profile

        :param profile: The profile of this PostAspspsOKBodyAspspsItems.
        :type profile: str
        """

        self._profile = profile
