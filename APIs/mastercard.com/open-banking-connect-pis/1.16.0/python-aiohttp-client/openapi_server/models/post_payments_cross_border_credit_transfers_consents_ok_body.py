# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.post_payments_cross_border_credit_transfers_consents_ok_body_additional_data import PostPaymentsCrossBorderCreditTransfersConsentsOKBodyAdditionalData
from openapi_server.models.post_payments_cross_border_credit_transfers_consents_ok_body_links import PostPaymentsCrossBorderCreditTransfersConsentsOKBodyLinks
from openapi_server.models.post_payments_cross_border_credit_transfers_consents_ok_body_original_request_info import PostPaymentsCrossBorderCreditTransfersConsentsOKBodyOriginalRequestInfo
from openapi_server import util


class PostPaymentsCrossBorderCreditTransfersConsentsOKBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: PostPaymentsCrossBorderCreditTransfersConsentsOKBodyLinks=None, additional_data: PostPaymentsCrossBorderCreditTransfersConsentsOKBodyAdditionalData=None, aspsp_sca_approach: str=None, consent_request_id: str=None, original_request_info: PostPaymentsCrossBorderCreditTransfersConsentsOKBodyOriginalRequestInfo=None):
        """PostPaymentsCrossBorderCreditTransfersConsentsOKBody - a model defined in OpenAPI

        :param links: The links of this PostPaymentsCrossBorderCreditTransfersConsentsOKBody.
        :param additional_data: The additional_data of this PostPaymentsCrossBorderCreditTransfersConsentsOKBody.
        :param aspsp_sca_approach: The aspsp_sca_approach of this PostPaymentsCrossBorderCreditTransfersConsentsOKBody.
        :param consent_request_id: The consent_request_id of this PostPaymentsCrossBorderCreditTransfersConsentsOKBody.
        :param original_request_info: The original_request_info of this PostPaymentsCrossBorderCreditTransfersConsentsOKBody.
        """
        self.openapi_types = {
            'links': PostPaymentsCrossBorderCreditTransfersConsentsOKBodyLinks,
            'additional_data': PostPaymentsCrossBorderCreditTransfersConsentsOKBodyAdditionalData,
            'aspsp_sca_approach': str,
            'consent_request_id': str,
            'original_request_info': PostPaymentsCrossBorderCreditTransfersConsentsOKBodyOriginalRequestInfo
        }

        self.attribute_map = {
            'links': '_links',
            'additional_data': 'additionalData',
            'aspsp_sca_approach': 'aspspSCAApproach',
            'consent_request_id': 'consentRequestId',
            'original_request_info': 'originalRequestInfo'
        }

        self._links = links
        self._additional_data = additional_data
        self._aspsp_sca_approach = aspsp_sca_approach
        self._consent_request_id = consent_request_id
        self._original_request_info = original_request_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostPaymentsCrossBorderCreditTransfersConsentsOKBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The postPaymentsCrossBorderCreditTransfersConsentsOKBody of this PostPaymentsCrossBorderCreditTransfersConsentsOKBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this PostPaymentsCrossBorderCreditTransfersConsentsOKBody.


        :return: The links of this PostPaymentsCrossBorderCreditTransfersConsentsOKBody.
        :rtype: PostPaymentsCrossBorderCreditTransfersConsentsOKBodyLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PostPaymentsCrossBorderCreditTransfersConsentsOKBody.


        :param links: The links of this PostPaymentsCrossBorderCreditTransfersConsentsOKBody.
        :type links: PostPaymentsCrossBorderCreditTransfersConsentsOKBodyLinks
        """

        self._links = links

    @property
    def additional_data(self):
        """Gets the additional_data of this PostPaymentsCrossBorderCreditTransfersConsentsOKBody.


        :return: The additional_data of this PostPaymentsCrossBorderCreditTransfersConsentsOKBody.
        :rtype: PostPaymentsCrossBorderCreditTransfersConsentsOKBodyAdditionalData
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this PostPaymentsCrossBorderCreditTransfersConsentsOKBody.


        :param additional_data: The additional_data of this PostPaymentsCrossBorderCreditTransfersConsentsOKBody.
        :type additional_data: PostPaymentsCrossBorderCreditTransfersConsentsOKBodyAdditionalData
        """

        self._additional_data = additional_data

    @property
    def aspsp_sca_approach(self):
        """Gets the aspsp_sca_approach of this PostPaymentsCrossBorderCreditTransfersConsentsOKBody.


        :return: The aspsp_sca_approach of this PostPaymentsCrossBorderCreditTransfersConsentsOKBody.
        :rtype: str
        """
        return self._aspsp_sca_approach

    @aspsp_sca_approach.setter
    def aspsp_sca_approach(self, aspsp_sca_approach):
        """Sets the aspsp_sca_approach of this PostPaymentsCrossBorderCreditTransfersConsentsOKBody.


        :param aspsp_sca_approach: The aspsp_sca_approach of this PostPaymentsCrossBorderCreditTransfersConsentsOKBody.
        :type aspsp_sca_approach: str
        """
        allowed_values = ["REDIRECT"]  # noqa: E501
        if aspsp_sca_approach not in allowed_values:
            raise ValueError(
                "Invalid value for `aspsp_sca_approach` ({0}), must be one of {1}"
                .format(aspsp_sca_approach, allowed_values)
            )

        self._aspsp_sca_approach = aspsp_sca_approach

    @property
    def consent_request_id(self):
        """Gets the consent_request_id of this PostPaymentsCrossBorderCreditTransfersConsentsOKBody.


        :return: The consent_request_id of this PostPaymentsCrossBorderCreditTransfersConsentsOKBody.
        :rtype: str
        """
        return self._consent_request_id

    @consent_request_id.setter
    def consent_request_id(self, consent_request_id):
        """Sets the consent_request_id of this PostPaymentsCrossBorderCreditTransfersConsentsOKBody.


        :param consent_request_id: The consent_request_id of this PostPaymentsCrossBorderCreditTransfersConsentsOKBody.
        :type consent_request_id: str
        """

        self._consent_request_id = consent_request_id

    @property
    def original_request_info(self):
        """Gets the original_request_info of this PostPaymentsCrossBorderCreditTransfersConsentsOKBody.


        :return: The original_request_info of this PostPaymentsCrossBorderCreditTransfersConsentsOKBody.
        :rtype: PostPaymentsCrossBorderCreditTransfersConsentsOKBodyOriginalRequestInfo
        """
        return self._original_request_info

    @original_request_info.setter
    def original_request_info(self, original_request_info):
        """Sets the original_request_info of this PostPaymentsCrossBorderCreditTransfersConsentsOKBody.


        :param original_request_info: The original_request_info of this PostPaymentsCrossBorderCreditTransfersConsentsOKBody.
        :type original_request_info: PostPaymentsCrossBorderCreditTransfersConsentsOKBodyOriginalRequestInfo
        """
        if original_request_info is None:
            raise ValueError("Invalid value for `original_request_info`, must not be `None`")

        self._original_request_info = original_request_info
