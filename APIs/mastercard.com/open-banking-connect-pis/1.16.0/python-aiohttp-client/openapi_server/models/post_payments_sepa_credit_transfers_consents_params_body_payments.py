# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.post_payments_sepa_credit_transfers_consents_params_body_payments_creditor_account import PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAccount
from openapi_server.models.post_payments_sepa_credit_transfers_consents_params_body_payments_creditor_address import PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress
from openapi_server.models.post_payments_sepa_credit_transfers_consents_params_body_payments_creditor_agent import PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAgent
from openapi_server.models.post_payments_sepa_credit_transfers_consents_params_body_payments_debtor_account import PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAccount
from openapi_server.models.post_payments_sepa_credit_transfers_consents_params_body_payments_debtor_address import PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAddress
from openapi_server.models.post_payments_sepa_credit_transfers_consents_params_body_payments_debtor_agent import PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAgent
from openapi_server.models.post_payments_sepa_credit_transfers_consents_params_body_payments_instructed_amount import PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsInstructedAmount
from openapi_server.models.request_pis_sepa_schedule import RequestPisSepaSchedule
from openapi_server import util


class PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_purpose: str=None, creditor_account: PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAccount=None, creditor_address: PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress=None, creditor_agent: PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAgent=None, creditor_name: str=None, debtor_account: PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAccount=None, debtor_address: PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAddress=None, debtor_agent: PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAgent=None, debtor_name: str=None, end_to_end_identification: str=None, instructed_amount: PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsInstructedAmount=None, instruction_priority: str=None, local_instrument: str=None, remittance_information_reference: str=None, remittance_information_structured: str=None, remittance_information_unstructured: str=None, requested_execution_date: date=None, schedule: RequestPisSepaSchedule=None):
        """PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments - a model defined in OpenAPI

        :param category_purpose: The category_purpose of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :param creditor_account: The creditor_account of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :param creditor_address: The creditor_address of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :param creditor_agent: The creditor_agent of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :param creditor_name: The creditor_name of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :param debtor_account: The debtor_account of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :param debtor_address: The debtor_address of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :param debtor_agent: The debtor_agent of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :param debtor_name: The debtor_name of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :param end_to_end_identification: The end_to_end_identification of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :param instructed_amount: The instructed_amount of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :param instruction_priority: The instruction_priority of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :param local_instrument: The local_instrument of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :param remittance_information_reference: The remittance_information_reference of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :param remittance_information_structured: The remittance_information_structured of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :param remittance_information_unstructured: The remittance_information_unstructured of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :param requested_execution_date: The requested_execution_date of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :param schedule: The schedule of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        """
        self.openapi_types = {
            'category_purpose': str,
            'creditor_account': PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAccount,
            'creditor_address': PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress,
            'creditor_agent': PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAgent,
            'creditor_name': str,
            'debtor_account': PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAccount,
            'debtor_address': PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAddress,
            'debtor_agent': PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAgent,
            'debtor_name': str,
            'end_to_end_identification': str,
            'instructed_amount': PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsInstructedAmount,
            'instruction_priority': str,
            'local_instrument': str,
            'remittance_information_reference': str,
            'remittance_information_structured': str,
            'remittance_information_unstructured': str,
            'requested_execution_date': date,
            'schedule': RequestPisSepaSchedule
        }

        self.attribute_map = {
            'category_purpose': 'categoryPurpose',
            'creditor_account': 'creditorAccount',
            'creditor_address': 'creditorAddress',
            'creditor_agent': 'creditorAgent',
            'creditor_name': 'creditorName',
            'debtor_account': 'debtorAccount',
            'debtor_address': 'debtorAddress',
            'debtor_agent': 'debtorAgent',
            'debtor_name': 'debtorName',
            'end_to_end_identification': 'endToEndIdentification',
            'instructed_amount': 'instructedAmount',
            'instruction_priority': 'instructionPriority',
            'local_instrument': 'localInstrument',
            'remittance_information_reference': 'remittanceInformationReference',
            'remittance_information_structured': 'remittanceInformationStructured',
            'remittance_information_unstructured': 'remittanceInformationUnstructured',
            'requested_execution_date': 'requestedExecutionDate',
            'schedule': 'schedule'
        }

        self._category_purpose = category_purpose
        self._creditor_account = creditor_account
        self._creditor_address = creditor_address
        self._creditor_agent = creditor_agent
        self._creditor_name = creditor_name
        self._debtor_account = debtor_account
        self._debtor_address = debtor_address
        self._debtor_agent = debtor_agent
        self._debtor_name = debtor_name
        self._end_to_end_identification = end_to_end_identification
        self._instructed_amount = instructed_amount
        self._instruction_priority = instruction_priority
        self._local_instrument = local_instrument
        self._remittance_information_reference = remittance_information_reference
        self._remittance_information_structured = remittance_information_structured
        self._remittance_information_unstructured = remittance_information_unstructured
        self._requested_execution_date = requested_execution_date
        self._schedule = schedule

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The postPaymentsSepaCreditTransfersConsentsParamsBodyPayments of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_purpose(self):
        """Gets the category_purpose of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.

        Purpose of the payment

        :return: The category_purpose of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :rtype: str
        """
        return self._category_purpose

    @category_purpose.setter
    def category_purpose(self, category_purpose):
        """Sets the category_purpose of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.

        Purpose of the payment

        :param category_purpose: The category_purpose of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :type category_purpose: str
        """
        allowed_values = ["CASH", "CORT", "DVPM", "INTC", "TREA"]  # noqa: E501
        if category_purpose not in allowed_values:
            raise ValueError(
                "Invalid value for `category_purpose` ({0}), must be one of {1}"
                .format(category_purpose, allowed_values)
            )

        self._category_purpose = category_purpose

    @property
    def creditor_account(self):
        """Gets the creditor_account of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.


        :return: The creditor_account of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :rtype: PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAccount
        """
        return self._creditor_account

    @creditor_account.setter
    def creditor_account(self, creditor_account):
        """Sets the creditor_account of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.


        :param creditor_account: The creditor_account of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :type creditor_account: PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAccount
        """
        if creditor_account is None:
            raise ValueError("Invalid value for `creditor_account`, must not be `None`")

        self._creditor_account = creditor_account

    @property
    def creditor_address(self):
        """Gets the creditor_address of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.


        :return: The creditor_address of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :rtype: PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress
        """
        return self._creditor_address

    @creditor_address.setter
    def creditor_address(self, creditor_address):
        """Sets the creditor_address of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.


        :param creditor_address: The creditor_address of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :type creditor_address: PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress
        """
        if creditor_address is None:
            raise ValueError("Invalid value for `creditor_address`, must not be `None`")

        self._creditor_address = creditor_address

    @property
    def creditor_agent(self):
        """Gets the creditor_agent of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.


        :return: The creditor_agent of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :rtype: PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAgent
        """
        return self._creditor_agent

    @creditor_agent.setter
    def creditor_agent(self, creditor_agent):
        """Sets the creditor_agent of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.


        :param creditor_agent: The creditor_agent of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :type creditor_agent: PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAgent
        """
        if creditor_agent is None:
            raise ValueError("Invalid value for `creditor_agent`, must not be `None`")

        self._creditor_agent = creditor_agent

    @property
    def creditor_name(self):
        """Gets the creditor_name of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.

        Bank name

        :return: The creditor_name of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :rtype: str
        """
        return self._creditor_name

    @creditor_name.setter
    def creditor_name(self, creditor_name):
        """Sets the creditor_name of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.

        Bank name

        :param creditor_name: The creditor_name of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :type creditor_name: str
        """
        if creditor_name is None:
            raise ValueError("Invalid value for `creditor_name`, must not be `None`")
        if creditor_name is not None and len(creditor_name) > 70:
            raise ValueError("Invalid value for `creditor_name`, length must be less than or equal to `70`")
        if creditor_name is not None and len(creditor_name) < 1:
            raise ValueError("Invalid value for `creditor_name`, length must be greater than or equal to `1`")

        self._creditor_name = creditor_name

    @property
    def debtor_account(self):
        """Gets the debtor_account of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.


        :return: The debtor_account of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :rtype: PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAccount
        """
        return self._debtor_account

    @debtor_account.setter
    def debtor_account(self, debtor_account):
        """Sets the debtor_account of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.


        :param debtor_account: The debtor_account of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :type debtor_account: PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAccount
        """

        self._debtor_account = debtor_account

    @property
    def debtor_address(self):
        """Gets the debtor_address of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.


        :return: The debtor_address of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :rtype: PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAddress
        """
        return self._debtor_address

    @debtor_address.setter
    def debtor_address(self, debtor_address):
        """Sets the debtor_address of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.


        :param debtor_address: The debtor_address of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :type debtor_address: PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAddress
        """

        self._debtor_address = debtor_address

    @property
    def debtor_agent(self):
        """Gets the debtor_agent of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.


        :return: The debtor_agent of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :rtype: PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAgent
        """
        return self._debtor_agent

    @debtor_agent.setter
    def debtor_agent(self, debtor_agent):
        """Sets the debtor_agent of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.


        :param debtor_agent: The debtor_agent of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :type debtor_agent: PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAgent
        """

        self._debtor_agent = debtor_agent

    @property
    def debtor_name(self):
        """Gets the debtor_name of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.

        Debtor legal name

        :return: The debtor_name of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :rtype: str
        """
        return self._debtor_name

    @debtor_name.setter
    def debtor_name(self, debtor_name):
        """Sets the debtor_name of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.

        Debtor legal name

        :param debtor_name: The debtor_name of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :type debtor_name: str
        """
        if debtor_name is None:
            raise ValueError("Invalid value for `debtor_name`, must not be `None`")
        if debtor_name is not None and len(debtor_name) > 256:
            raise ValueError("Invalid value for `debtor_name`, length must be less than or equal to `256`")
        if debtor_name is not None and len(debtor_name) < 1:
            raise ValueError("Invalid value for `debtor_name`, length must be greater than or equal to `1`")

        self._debtor_name = debtor_name

    @property
    def end_to_end_identification(self):
        """Gets the end_to_end_identification of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.

        Payment end to end identification

        :return: The end_to_end_identification of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :rtype: str
        """
        return self._end_to_end_identification

    @end_to_end_identification.setter
    def end_to_end_identification(self, end_to_end_identification):
        """Sets the end_to_end_identification of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.

        Payment end to end identification

        :param end_to_end_identification: The end_to_end_identification of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :type end_to_end_identification: str
        """
        if end_to_end_identification is None:
            raise ValueError("Invalid value for `end_to_end_identification`, must not be `None`")
        if end_to_end_identification is not None and len(end_to_end_identification) > 18:
            raise ValueError("Invalid value for `end_to_end_identification`, length must be less than or equal to `18`")
        if end_to_end_identification is not None and len(end_to_end_identification) < 1:
            raise ValueError("Invalid value for `end_to_end_identification`, length must be greater than or equal to `1`")

        self._end_to_end_identification = end_to_end_identification

    @property
    def instructed_amount(self):
        """Gets the instructed_amount of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.


        :return: The instructed_amount of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :rtype: PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsInstructedAmount
        """
        return self._instructed_amount

    @instructed_amount.setter
    def instructed_amount(self, instructed_amount):
        """Sets the instructed_amount of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.


        :param instructed_amount: The instructed_amount of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :type instructed_amount: PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsInstructedAmount
        """
        if instructed_amount is None:
            raise ValueError("Invalid value for `instructed_amount`, must not be `None`")

        self._instructed_amount = instructed_amount

    @property
    def instruction_priority(self):
        """Gets the instruction_priority of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.

        Indicator of the urgency or order of importance

        :return: The instruction_priority of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :rtype: str
        """
        return self._instruction_priority

    @instruction_priority.setter
    def instruction_priority(self, instruction_priority):
        """Sets the instruction_priority of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.

        Indicator of the urgency or order of importance

        :param instruction_priority: The instruction_priority of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :type instruction_priority: str
        """
        allowed_values = ["Normal", "Urgent"]  # noqa: E501
        if instruction_priority not in allowed_values:
            raise ValueError(
                "Invalid value for `instruction_priority` ({0}), must be one of {1}"
                .format(instruction_priority, allowed_values)
            )

        self._instruction_priority = instruction_priority

    @property
    def local_instrument(self):
        """Gets the local_instrument of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.

        User community specific instrument.

        :return: The local_instrument of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :rtype: str
        """
        return self._local_instrument

    @local_instrument.setter
    def local_instrument(self, local_instrument):
        """Sets the local_instrument of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.

        User community specific instrument.

        :param local_instrument: The local_instrument of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :type local_instrument: str
        """
        allowed_values = ["SEPA"]  # noqa: E501
        if local_instrument not in allowed_values:
            raise ValueError(
                "Invalid value for `local_instrument` ({0}), must be one of {1}"
                .format(local_instrument, allowed_values)
            )

        self._local_instrument = local_instrument

    @property
    def remittance_information_reference(self):
        """Gets the remittance_information_reference of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.

        Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction. (future use)

        :return: The remittance_information_reference of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :rtype: str
        """
        return self._remittance_information_reference

    @remittance_information_reference.setter
    def remittance_information_reference(self, remittance_information_reference):
        """Sets the remittance_information_reference of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.

        Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction. (future use)

        :param remittance_information_reference: The remittance_information_reference of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :type remittance_information_reference: str
        """
        if remittance_information_reference is not None and len(remittance_information_reference) > 256:
            raise ValueError("Invalid value for `remittance_information_reference`, length must be less than or equal to `256`")
        if remittance_information_reference is not None and len(remittance_information_reference) < 1:
            raise ValueError("Invalid value for `remittance_information_reference`, length must be greater than or equal to `1`")

        self._remittance_information_reference = remittance_information_reference

    @property
    def remittance_information_structured(self):
        """Gets the remittance_information_structured of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.

        Description of the payment

        :return: The remittance_information_structured of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :rtype: str
        """
        return self._remittance_information_structured

    @remittance_information_structured.setter
    def remittance_information_structured(self, remittance_information_structured):
        """Sets the remittance_information_structured of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.

        Description of the payment

        :param remittance_information_structured: The remittance_information_structured of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :type remittance_information_structured: str
        """
        if remittance_information_structured is not None and len(remittance_information_structured) > 256:
            raise ValueError("Invalid value for `remittance_information_structured`, length must be less than or equal to `256`")
        if remittance_information_structured is not None and len(remittance_information_structured) < 1:
            raise ValueError("Invalid value for `remittance_information_structured`, length must be greater than or equal to `1`")

        self._remittance_information_structured = remittance_information_structured

    @property
    def remittance_information_unstructured(self):
        """Gets the remittance_information_unstructured of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.

        Description of the payment

        :return: The remittance_information_unstructured of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :rtype: str
        """
        return self._remittance_information_unstructured

    @remittance_information_unstructured.setter
    def remittance_information_unstructured(self, remittance_information_unstructured):
        """Sets the remittance_information_unstructured of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.

        Description of the payment

        :param remittance_information_unstructured: The remittance_information_unstructured of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :type remittance_information_unstructured: str
        """
        if remittance_information_unstructured is not None and len(remittance_information_unstructured) > 140:
            raise ValueError("Invalid value for `remittance_information_unstructured`, length must be less than or equal to `140`")
        if remittance_information_unstructured is not None and len(remittance_information_unstructured) < 1:
            raise ValueError("Invalid value for `remittance_information_unstructured`, length must be greater than or equal to `1`")

        self._remittance_information_unstructured = remittance_information_unstructured

    @property
    def requested_execution_date(self):
        """Gets the requested_execution_date of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.

        Scheduled Payment Date

        :return: The requested_execution_date of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :rtype: date
        """
        return self._requested_execution_date

    @requested_execution_date.setter
    def requested_execution_date(self, requested_execution_date):
        """Sets the requested_execution_date of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.

        Scheduled Payment Date

        :param requested_execution_date: The requested_execution_date of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :type requested_execution_date: date
        """

        self._requested_execution_date = requested_execution_date

    @property
    def schedule(self):
        """Gets the schedule of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.


        :return: The schedule of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :rtype: RequestPisSepaSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.


        :param schedule: The schedule of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments.
        :type schedule: RequestPisSepaSchedule
        """

        self._schedule = schedule
