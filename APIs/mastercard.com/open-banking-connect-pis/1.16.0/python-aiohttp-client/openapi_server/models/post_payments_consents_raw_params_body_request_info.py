# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.merchant import Merchant
import re
from openapi_server import util


class PostPaymentsConsentsRawParamsBodyRequestInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aspsp_id: str=None, consent_id: str=None, merchant: Merchant=None, x_request_id: str=None):
        """PostPaymentsConsentsRawParamsBodyRequestInfo - a model defined in OpenAPI

        :param aspsp_id: The aspsp_id of this PostPaymentsConsentsRawParamsBodyRequestInfo.
        :param consent_id: The consent_id of this PostPaymentsConsentsRawParamsBodyRequestInfo.
        :param merchant: The merchant of this PostPaymentsConsentsRawParamsBodyRequestInfo.
        :param x_request_id: The x_request_id of this PostPaymentsConsentsRawParamsBodyRequestInfo.
        """
        self.openapi_types = {
            'aspsp_id': str,
            'consent_id': str,
            'merchant': Merchant,
            'x_request_id': str
        }

        self.attribute_map = {
            'aspsp_id': 'aspspId',
            'consent_id': 'consentId',
            'merchant': 'merchant',
            'x_request_id': 'xRequestId'
        }

        self._aspsp_id = aspsp_id
        self._consent_id = consent_id
        self._merchant = merchant
        self._x_request_id = x_request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostPaymentsConsentsRawParamsBodyRequestInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The postPaymentsConsentsRawParamsBody_requestInfo of this PostPaymentsConsentsRawParamsBodyRequestInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aspsp_id(self):
        """Gets the aspsp_id of this PostPaymentsConsentsRawParamsBodyRequestInfo.

        Identification of ASPSP

        :return: The aspsp_id of this PostPaymentsConsentsRawParamsBodyRequestInfo.
        :rtype: str
        """
        return self._aspsp_id

    @aspsp_id.setter
    def aspsp_id(self, aspsp_id):
        """Sets the aspsp_id of this PostPaymentsConsentsRawParamsBodyRequestInfo.

        Identification of ASPSP

        :param aspsp_id: The aspsp_id of this PostPaymentsConsentsRawParamsBodyRequestInfo.
        :type aspsp_id: str
        """
        if aspsp_id is None:
            raise ValueError("Invalid value for `aspsp_id`, must not be `None`")
        if aspsp_id is not None and not re.search(r'^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$', aspsp_id):
            raise ValueError("Invalid value for `aspsp_id`, must be a follow pattern or equal to `/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/`")

        self._aspsp_id = aspsp_id

    @property
    def consent_id(self):
        """Gets the consent_id of this PostPaymentsConsentsRawParamsBodyRequestInfo.

        Consent identification

        :return: The consent_id of this PostPaymentsConsentsRawParamsBodyRequestInfo.
        :rtype: str
        """
        return self._consent_id

    @consent_id.setter
    def consent_id(self, consent_id):
        """Sets the consent_id of this PostPaymentsConsentsRawParamsBodyRequestInfo.

        Consent identification

        :param consent_id: The consent_id of this PostPaymentsConsentsRawParamsBodyRequestInfo.
        :type consent_id: str
        """
        if consent_id is None:
            raise ValueError("Invalid value for `consent_id`, must not be `None`")
        if consent_id is not None and len(consent_id) > 256:
            raise ValueError("Invalid value for `consent_id`, length must be less than or equal to `256`")
        if consent_id is not None and len(consent_id) < 1:
            raise ValueError("Invalid value for `consent_id`, length must be greater than or equal to `1`")

        self._consent_id = consent_id

    @property
    def merchant(self):
        """Gets the merchant of this PostPaymentsConsentsRawParamsBodyRequestInfo.


        :return: The merchant of this PostPaymentsConsentsRawParamsBodyRequestInfo.
        :rtype: Merchant
        """
        return self._merchant

    @merchant.setter
    def merchant(self, merchant):
        """Sets the merchant of this PostPaymentsConsentsRawParamsBodyRequestInfo.


        :param merchant: The merchant of this PostPaymentsConsentsRawParamsBodyRequestInfo.
        :type merchant: Merchant
        """

        self._merchant = merchant

    @property
    def x_request_id(self):
        """Gets the x_request_id of this PostPaymentsConsentsRawParamsBodyRequestInfo.

        Request id given by the client

        :return: The x_request_id of this PostPaymentsConsentsRawParamsBodyRequestInfo.
        :rtype: str
        """
        return self._x_request_id

    @x_request_id.setter
    def x_request_id(self, x_request_id):
        """Sets the x_request_id of this PostPaymentsConsentsRawParamsBodyRequestInfo.

        Request id given by the client

        :param x_request_id: The x_request_id of this PostPaymentsConsentsRawParamsBodyRequestInfo.
        :type x_request_id: str
        """
        if x_request_id is None:
            raise ValueError("Invalid value for `x_request_id`, must not be `None`")
        if x_request_id is not None and not re.search(r'^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$', x_request_id):
            raise ValueError("Invalid value for `x_request_id`, must be a follow pattern or equal to `/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/`")

        self._x_request_id = x_request_id
