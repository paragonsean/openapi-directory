# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.post_payments_sepa_credit_transfers_ok_body_original_request_info import PostPaymentsSepaCreditTransfersOKBodyOriginalRequestInfo
from openapi_server.models.post_payments_sepa_credit_transfers_ok_body_transfer import PostPaymentsSepaCreditTransfersOKBodyTransfer
from openapi_server.models.sepa_payment_consent import SepaPaymentConsent
from openapi_server import util


class PostPaymentsSepaCreditTransfersOKBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consent: SepaPaymentConsent=None, original_request_info: PostPaymentsSepaCreditTransfersOKBodyOriginalRequestInfo=None, transfer: PostPaymentsSepaCreditTransfersOKBodyTransfer=None):
        """PostPaymentsSepaCreditTransfersOKBody - a model defined in OpenAPI

        :param consent: The consent of this PostPaymentsSepaCreditTransfersOKBody.
        :param original_request_info: The original_request_info of this PostPaymentsSepaCreditTransfersOKBody.
        :param transfer: The transfer of this PostPaymentsSepaCreditTransfersOKBody.
        """
        self.openapi_types = {
            'consent': SepaPaymentConsent,
            'original_request_info': PostPaymentsSepaCreditTransfersOKBodyOriginalRequestInfo,
            'transfer': PostPaymentsSepaCreditTransfersOKBodyTransfer
        }

        self.attribute_map = {
            'consent': 'consent',
            'original_request_info': 'originalRequestInfo',
            'transfer': 'transfer'
        }

        self._consent = consent
        self._original_request_info = original_request_info
        self._transfer = transfer

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostPaymentsSepaCreditTransfersOKBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The postPaymentsSepaCreditTransfersOKBody of this PostPaymentsSepaCreditTransfersOKBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consent(self):
        """Gets the consent of this PostPaymentsSepaCreditTransfersOKBody.


        :return: The consent of this PostPaymentsSepaCreditTransfersOKBody.
        :rtype: SepaPaymentConsent
        """
        return self._consent

    @consent.setter
    def consent(self, consent):
        """Sets the consent of this PostPaymentsSepaCreditTransfersOKBody.


        :param consent: The consent of this PostPaymentsSepaCreditTransfersOKBody.
        :type consent: SepaPaymentConsent
        """
        if consent is None:
            raise ValueError("Invalid value for `consent`, must not be `None`")

        self._consent = consent

    @property
    def original_request_info(self):
        """Gets the original_request_info of this PostPaymentsSepaCreditTransfersOKBody.


        :return: The original_request_info of this PostPaymentsSepaCreditTransfersOKBody.
        :rtype: PostPaymentsSepaCreditTransfersOKBodyOriginalRequestInfo
        """
        return self._original_request_info

    @original_request_info.setter
    def original_request_info(self, original_request_info):
        """Sets the original_request_info of this PostPaymentsSepaCreditTransfersOKBody.


        :param original_request_info: The original_request_info of this PostPaymentsSepaCreditTransfersOKBody.
        :type original_request_info: PostPaymentsSepaCreditTransfersOKBodyOriginalRequestInfo
        """
        if original_request_info is None:
            raise ValueError("Invalid value for `original_request_info`, must not be `None`")

        self._original_request_info = original_request_info

    @property
    def transfer(self):
        """Gets the transfer of this PostPaymentsSepaCreditTransfersOKBody.


        :return: The transfer of this PostPaymentsSepaCreditTransfersOKBody.
        :rtype: PostPaymentsSepaCreditTransfersOKBodyTransfer
        """
        return self._transfer

    @transfer.setter
    def transfer(self, transfer):
        """Sets the transfer of this PostPaymentsSepaCreditTransfersOKBody.


        :param transfer: The transfer of this PostPaymentsSepaCreditTransfersOKBody.
        :type transfer: PostPaymentsSepaCreditTransfersOKBodyTransfer
        """
        if transfer is None:
            raise ValueError("Invalid value for `transfer`, must not be `None`")

        self._transfer = transfer
