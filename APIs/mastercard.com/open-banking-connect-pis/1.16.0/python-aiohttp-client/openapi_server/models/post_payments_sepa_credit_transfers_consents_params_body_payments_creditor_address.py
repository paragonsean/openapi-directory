# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, building_number: str=None, city: str=None, country: str=None, country_sub_division: str=None, postal_code: str=None, street: str=None):
        """PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress - a model defined in OpenAPI

        :param building_number: The building_number of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.
        :param city: The city of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.
        :param country: The country of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.
        :param country_sub_division: The country_sub_division of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.
        :param postal_code: The postal_code of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.
        :param street: The street of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.
        """
        self.openapi_types = {
            'building_number': str,
            'city': str,
            'country': str,
            'country_sub_division': str,
            'postal_code': str,
            'street': str
        }

        self.attribute_map = {
            'building_number': 'buildingNumber',
            'city': 'city',
            'country': 'country',
            'country_sub_division': 'countrySubDivision',
            'postal_code': 'postalCode',
            'street': 'street'
        }

        self._building_number = building_number
        self._city = city
        self._country = country
        self._country_sub_division = country_sub_division
        self._postal_code = postal_code
        self._street = street

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The postPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def building_number(self):
        """Gets the building_number of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.


        :return: The building_number of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.
        :rtype: str
        """
        return self._building_number

    @building_number.setter
    def building_number(self, building_number):
        """Sets the building_number of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.


        :param building_number: The building_number of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.
        :type building_number: str
        """
        if building_number is not None and len(building_number) > 256:
            raise ValueError("Invalid value for `building_number`, length must be less than or equal to `256`")
        if building_number is not None and len(building_number) < 1:
            raise ValueError("Invalid value for `building_number`, length must be greater than or equal to `1`")

        self._building_number = building_number

    @property
    def city(self):
        """Gets the city of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.


        :return: The city of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.


        :param city: The city of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.
        :type city: str
        """
        if city is not None and len(city) > 256:
            raise ValueError("Invalid value for `city`, length must be less than or equal to `256`")
        if city is not None and len(city) < 1:
            raise ValueError("Invalid value for `city`, length must be greater than or equal to `1`")

        self._city = city

    @property
    def country(self):
        """Gets the country of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.

        ISO 3166 ALPHA2 country code

        :return: The country of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.

        ISO 3166 ALPHA2 country code

        :param country: The country of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")
        if country is not None and not re.search(r'^[A-Z]{2}$', country):
            raise ValueError("Invalid value for `country`, must be a follow pattern or equal to `/^[A-Z]{2}$/`")

        self._country = country

    @property
    def country_sub_division(self):
        """Gets the country_sub_division of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.


        :return: The country_sub_division of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.
        :rtype: str
        """
        return self._country_sub_division

    @country_sub_division.setter
    def country_sub_division(self, country_sub_division):
        """Sets the country_sub_division of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.


        :param country_sub_division: The country_sub_division of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.
        :type country_sub_division: str
        """
        if country_sub_division is not None and len(country_sub_division) > 256:
            raise ValueError("Invalid value for `country_sub_division`, length must be less than or equal to `256`")
        if country_sub_division is not None and len(country_sub_division) < 1:
            raise ValueError("Invalid value for `country_sub_division`, length must be greater than or equal to `1`")

        self._country_sub_division = country_sub_division

    @property
    def postal_code(self):
        """Gets the postal_code of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.


        :return: The postal_code of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.


        :param postal_code: The postal_code of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.
        :type postal_code: str
        """
        if postal_code is not None and len(postal_code) > 256:
            raise ValueError("Invalid value for `postal_code`, length must be less than or equal to `256`")
        if postal_code is not None and len(postal_code) < 1:
            raise ValueError("Invalid value for `postal_code`, length must be greater than or equal to `1`")

        self._postal_code = postal_code

    @property
    def street(self):
        """Gets the street of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.


        :return: The street of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.


        :param street: The street of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress.
        :type street: str
        """
        if street is not None and len(street) > 70:
            raise ValueError("Invalid value for `street`, length must be less than or equal to `70`")
        if street is not None and len(street) < 1:
            raise ValueError("Invalid value for `street`, length must be greater than or equal to `1`")

        self._street = street
