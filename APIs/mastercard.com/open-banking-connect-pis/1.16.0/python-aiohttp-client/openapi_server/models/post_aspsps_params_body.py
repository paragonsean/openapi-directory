# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.additional_data_field import AdditionalDataField
from openapi_server.models.post_aspsps_params_body_request_info import PostAspspsParamsBodyRequestInfo
import re
from openapi_server import util


class PostAspspsParamsBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, id: str=None, name: str=None, request_info: PostAspspsParamsBodyRequestInfo=None, return_additional_data: List[AdditionalDataField]=None):
        """PostAspspsParamsBody - a model defined in OpenAPI

        :param country: The country of this PostAspspsParamsBody.
        :param id: The id of this PostAspspsParamsBody.
        :param name: The name of this PostAspspsParamsBody.
        :param request_info: The request_info of this PostAspspsParamsBody.
        :param return_additional_data: The return_additional_data of this PostAspspsParamsBody.
        """
        self.openapi_types = {
            'country': str,
            'id': str,
            'name': str,
            'request_info': PostAspspsParamsBodyRequestInfo,
            'return_additional_data': List[AdditionalDataField]
        }

        self.attribute_map = {
            'country': 'country',
            'id': 'id',
            'name': 'name',
            'request_info': 'requestInfo',
            'return_additional_data': 'returnAdditionalData'
        }

        self._country = country
        self._id = id
        self._name = name
        self._request_info = request_info
        self._return_additional_data = return_additional_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostAspspsParamsBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The postAspspsParamsBody of this PostAspspsParamsBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this PostAspspsParamsBody.

        Filter by country code (ISO 3166 Alpha 2), exact match pattern

        :return: The country of this PostAspspsParamsBody.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PostAspspsParamsBody.

        Filter by country code (ISO 3166 Alpha 2), exact match pattern

        :param country: The country of this PostAspspsParamsBody.
        :type country: str
        """
        if country is not None and not re.search(r'^[A-Z]{2}$', country):
            raise ValueError("Invalid value for `country`, must be a follow pattern or equal to `/^[A-Z]{2}$/`")

        self._country = country

    @property
    def id(self):
        """Gets the id of this PostAspspsParamsBody.

        Filter by internal id of ASPSP, exact match pattern

        :return: The id of this PostAspspsParamsBody.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PostAspspsParamsBody.

        Filter by internal id of ASPSP, exact match pattern

        :param id: The id of this PostAspspsParamsBody.
        :type id: str
        """
        if id is not None and not re.search(r'^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this PostAspspsParamsBody.

        Filter by name of ASPSP, contains pattern

        :return: The name of this PostAspspsParamsBody.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostAspspsParamsBody.

        Filter by name of ASPSP, contains pattern

        :param name: The name of this PostAspspsParamsBody.
        :type name: str
        """
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def request_info(self):
        """Gets the request_info of this PostAspspsParamsBody.


        :return: The request_info of this PostAspspsParamsBody.
        :rtype: PostAspspsParamsBodyRequestInfo
        """
        return self._request_info

    @request_info.setter
    def request_info(self, request_info):
        """Sets the request_info of this PostAspspsParamsBody.


        :param request_info: The request_info of this PostAspspsParamsBody.
        :type request_info: PostAspspsParamsBodyRequestInfo
        """
        if request_info is None:
            raise ValueError("Invalid value for `request_info`, must not be `None`")

        self._request_info = request_info

    @property
    def return_additional_data(self):
        """Gets the return_additional_data of this PostAspspsParamsBody.

        Specifies what additional fields for ASPSP object should be included in response

        :return: The return_additional_data of this PostAspspsParamsBody.
        :rtype: List[AdditionalDataField]
        """
        return self._return_additional_data

    @return_additional_data.setter
    def return_additional_data(self, return_additional_data):
        """Sets the return_additional_data of this PostAspspsParamsBody.

        Specifies what additional fields for ASPSP object should be included in response

        :param return_additional_data: The return_additional_data of this PostAspspsParamsBody.
        :type return_additional_data: List[AdditionalDataField]
        """

        self._return_additional_data = return_additional_data
