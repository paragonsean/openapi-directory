# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.post_payments_sepa_credit_transfers_payment_status_params_body_request_info import PostPaymentsSepaCreditTransfersPaymentStatusParamsBodyRequestInfo
from openapi_server import util


class PostPaymentsSepaCreditTransfersPaymentStatusParamsBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, payment_id: str=None, request_info: PostPaymentsSepaCreditTransfersPaymentStatusParamsBodyRequestInfo=None):
        """PostPaymentsSepaCreditTransfersPaymentStatusParamsBody - a model defined in OpenAPI

        :param payment_id: The payment_id of this PostPaymentsSepaCreditTransfersPaymentStatusParamsBody.
        :param request_info: The request_info of this PostPaymentsSepaCreditTransfersPaymentStatusParamsBody.
        """
        self.openapi_types = {
            'payment_id': str,
            'request_info': PostPaymentsSepaCreditTransfersPaymentStatusParamsBodyRequestInfo
        }

        self.attribute_map = {
            'payment_id': 'paymentId',
            'request_info': 'requestInfo'
        }

        self._payment_id = payment_id
        self._request_info = request_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostPaymentsSepaCreditTransfersPaymentStatusParamsBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The postPaymentsSepaCreditTransfersPaymentStatusParamsBody of this PostPaymentsSepaCreditTransfersPaymentStatusParamsBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def payment_id(self):
        """Gets the payment_id of this PostPaymentsSepaCreditTransfersPaymentStatusParamsBody.

        Payment identification

        :return: The payment_id of this PostPaymentsSepaCreditTransfersPaymentStatusParamsBody.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this PostPaymentsSepaCreditTransfersPaymentStatusParamsBody.

        Payment identification

        :param payment_id: The payment_id of this PostPaymentsSepaCreditTransfersPaymentStatusParamsBody.
        :type payment_id: str
        """
        if payment_id is None:
            raise ValueError("Invalid value for `payment_id`, must not be `None`")
        if payment_id is not None and len(payment_id) > 256:
            raise ValueError("Invalid value for `payment_id`, length must be less than or equal to `256`")
        if payment_id is not None and len(payment_id) < 1:
            raise ValueError("Invalid value for `payment_id`, length must be greater than or equal to `1`")

        self._payment_id = payment_id

    @property
    def request_info(self):
        """Gets the request_info of this PostPaymentsSepaCreditTransfersPaymentStatusParamsBody.


        :return: The request_info of this PostPaymentsSepaCreditTransfersPaymentStatusParamsBody.
        :rtype: PostPaymentsSepaCreditTransfersPaymentStatusParamsBodyRequestInfo
        """
        return self._request_info

    @request_info.setter
    def request_info(self, request_info):
        """Sets the request_info of this PostPaymentsSepaCreditTransfersPaymentStatusParamsBody.


        :param request_info: The request_info of this PostPaymentsSepaCreditTransfersPaymentStatusParamsBody.
        :type request_info: PostPaymentsSepaCreditTransfersPaymentStatusParamsBodyRequestInfo
        """
        if request_info is None:
            raise ValueError("Invalid value for `request_info`, must not be `None`")

        self._request_info = request_info
