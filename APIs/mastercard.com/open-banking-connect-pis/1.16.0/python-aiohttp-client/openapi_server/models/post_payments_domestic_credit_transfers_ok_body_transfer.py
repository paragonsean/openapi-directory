# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostPaymentsDomesticCreditTransfersOKBodyTransfer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, payment_id: str=None, status_reason_code: str=None, transaction_status: str=None):
        """PostPaymentsDomesticCreditTransfersOKBodyTransfer - a model defined in OpenAPI

        :param payment_id: The payment_id of this PostPaymentsDomesticCreditTransfersOKBodyTransfer.
        :param status_reason_code: The status_reason_code of this PostPaymentsDomesticCreditTransfersOKBodyTransfer.
        :param transaction_status: The transaction_status of this PostPaymentsDomesticCreditTransfersOKBodyTransfer.
        """
        self.openapi_types = {
            'payment_id': str,
            'status_reason_code': str,
            'transaction_status': str
        }

        self.attribute_map = {
            'payment_id': 'paymentId',
            'status_reason_code': 'statusReasonCode',
            'transaction_status': 'transactionStatus'
        }

        self._payment_id = payment_id
        self._status_reason_code = status_reason_code
        self._transaction_status = transaction_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostPaymentsDomesticCreditTransfersOKBodyTransfer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The postPaymentsDomesticCreditTransfersOKBodyTransfer of this PostPaymentsDomesticCreditTransfersOKBodyTransfer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def payment_id(self):
        """Gets the payment_id of this PostPaymentsDomesticCreditTransfersOKBodyTransfer.

        PI / Transfer identification

        :return: The payment_id of this PostPaymentsDomesticCreditTransfersOKBodyTransfer.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this PostPaymentsDomesticCreditTransfersOKBodyTransfer.

        PI / Transfer identification

        :param payment_id: The payment_id of this PostPaymentsDomesticCreditTransfersOKBodyTransfer.
        :type payment_id: str
        """
        if payment_id is None:
            raise ValueError("Invalid value for `payment_id`, must not be `None`")

        self._payment_id = payment_id

    @property
    def status_reason_code(self):
        """Gets the status_reason_code of this PostPaymentsDomesticCreditTransfersOKBodyTransfer.

        Rejection reson code

        :return: The status_reason_code of this PostPaymentsDomesticCreditTransfersOKBodyTransfer.
        :rtype: str
        """
        return self._status_reason_code

    @status_reason_code.setter
    def status_reason_code(self, status_reason_code):
        """Sets the status_reason_code of this PostPaymentsDomesticCreditTransfersOKBodyTransfer.

        Rejection reson code

        :param status_reason_code: The status_reason_code of this PostPaymentsDomesticCreditTransfersOKBodyTransfer.
        :type status_reason_code: str
        """

        self._status_reason_code = status_reason_code

    @property
    def transaction_status(self):
        """Gets the transaction_status of this PostPaymentsDomesticCreditTransfersOKBodyTransfer.

        Status of the payment

        :return: The transaction_status of this PostPaymentsDomesticCreditTransfersOKBodyTransfer.
        :rtype: str
        """
        return self._transaction_status

    @transaction_status.setter
    def transaction_status(self, transaction_status):
        """Sets the transaction_status of this PostPaymentsDomesticCreditTransfersOKBodyTransfer.

        Status of the payment

        :param transaction_status: The transaction_status of this PostPaymentsDomesticCreditTransfersOKBodyTransfer.
        :type transaction_status: str
        """
        allowed_values = ["ACCP", "ACSC", "ACSP", "ACTC", "ACWC", "ACWP", "PDNG", "RCVD", "RJCT", "CANC"]  # noqa: E501
        if transaction_status not in allowed_values:
            raise ValueError(
                "Invalid value for `transaction_status` ({0}), must be one of {1}"
                .format(transaction_status, allowed_values)
            )

        self._transaction_status = transaction_status
