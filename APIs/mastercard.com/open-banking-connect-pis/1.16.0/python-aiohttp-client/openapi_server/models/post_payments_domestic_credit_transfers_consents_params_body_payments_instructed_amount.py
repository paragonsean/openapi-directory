# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsInstructedAmount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, currency: str=None):
        """PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsInstructedAmount - a model defined in OpenAPI

        :param amount: The amount of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsInstructedAmount.
        :param currency: The currency of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsInstructedAmount.
        """
        self.openapi_types = {
            'amount': float,
            'currency': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'currency': 'currency'
        }

        self._amount = amount
        self._currency = currency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsInstructedAmount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The postPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsInstructedAmount of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsInstructedAmount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsInstructedAmount.

        amount value

        :return: The amount of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsInstructedAmount.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsInstructedAmount.

        amount value

        :param amount: The amount of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsInstructedAmount.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")
        if amount is not None and amount <= 0:
            raise ValueError("Invalid value for `amount`, must be a value greater than `0`")

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsInstructedAmount.

        Currency code

        :return: The currency of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsInstructedAmount.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsInstructedAmount.

        Currency code

        :param currency: The currency of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsInstructedAmount.
        :type currency: str
        """
        allowed_values = ["GBP", "PLN"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency
