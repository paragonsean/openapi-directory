# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAgent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bicfi: str=None):
        """PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAgent - a model defined in OpenAPI

        :param bicfi: The bicfi of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.
        """
        self.openapi_types = {
            'bicfi': str
        }

        self.attribute_map = {
            'bicfi': 'bicfi'
        }

        self._bicfi = bicfi

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAgent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The postPaymentsSepaCreditTransfersConsentsParamsBodyPayments_creditorAgent of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bicfi(self):
        """Gets the bicfi of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.

        Creditor FI

        :return: The bicfi of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.
        :rtype: str
        """
        return self._bicfi

    @bicfi.setter
    def bicfi(self, bicfi):
        """Sets the bicfi of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.

        Creditor FI

        :param bicfi: The bicfi of this PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAgent.
        :type bicfi: str
        """
        if bicfi is None:
            raise ValueError("Invalid value for `bicfi`, must not be `None`")
        if bicfi is not None and len(bicfi) > 256:
            raise ValueError("Invalid value for `bicfi`, length must be less than or equal to `256`")
        if bicfi is not None and len(bicfi) < 1:
            raise ValueError("Invalid value for `bicfi`, length must be greater than or equal to `1`")

        self._bicfi = bicfi
