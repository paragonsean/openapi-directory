/**
 * rePower
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepowerreversal_11.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepowerreversal_11::OAIRepowerreversal_11(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepowerreversal_11::OAIRepowerreversal_11() {
    this->initializeModel();
}

OAIRepowerreversal_11::~OAIRepowerreversal_11() {}

void OAIRepowerreversal_11::initializeModel() {

    m_original_request_id_isSet = false;
    m_original_request_id_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_transaction_history_isSet = false;
    m_transaction_history_isValid = false;

    m_transaction_reference_isSet = false;
    m_transaction_reference_isValid = false;
}

void OAIRepowerreversal_11::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepowerreversal_11::fromJsonObject(QJsonObject json) {

    m_original_request_id_isValid = ::OpenAPI::fromJsonValue(m_original_request_id, json[QString("OriginalRequestId")]);
    m_original_request_id_isSet = !json[QString("OriginalRequestId")].isNull() && m_original_request_id_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_transaction_history_isValid = ::OpenAPI::fromJsonValue(m_transaction_history, json[QString("TransactionHistory")]);
    m_transaction_history_isSet = !json[QString("TransactionHistory")].isNull() && m_transaction_history_isValid;

    m_transaction_reference_isValid = ::OpenAPI::fromJsonValue(m_transaction_reference, json[QString("TransactionReference")]);
    m_transaction_reference_isSet = !json[QString("TransactionReference")].isNull() && m_transaction_reference_isValid;
}

QString OAIRepowerreversal_11::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepowerreversal_11::asJsonObject() const {
    QJsonObject obj;
    if (m_original_request_id_isSet) {
        obj.insert(QString("OriginalRequestId"), ::OpenAPI::toJsonValue(m_original_request_id));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_transaction_history.isSet()) {
        obj.insert(QString("TransactionHistory"), ::OpenAPI::toJsonValue(m_transaction_history));
    }
    if (m_transaction_reference_isSet) {
        obj.insert(QString("TransactionReference"), ::OpenAPI::toJsonValue(m_transaction_reference));
    }
    return obj;
}

QString OAIRepowerreversal_11::getOriginalRequestId() const {
    return m_original_request_id;
}
void OAIRepowerreversal_11::setOriginalRequestId(const QString &original_request_id) {
    m_original_request_id = original_request_id;
    m_original_request_id_isSet = true;
}

bool OAIRepowerreversal_11::is_original_request_id_Set() const{
    return m_original_request_id_isSet;
}

bool OAIRepowerreversal_11::is_original_request_id_Valid() const{
    return m_original_request_id_isValid;
}

QString OAIRepowerreversal_11::getRequestId() const {
    return m_request_id;
}
void OAIRepowerreversal_11::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIRepowerreversal_11::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIRepowerreversal_11::is_request_id_Valid() const{
    return m_request_id_isValid;
}

OAITransactionhistory_12 OAIRepowerreversal_11::getTransactionHistory() const {
    return m_transaction_history;
}
void OAIRepowerreversal_11::setTransactionHistory(const OAITransactionhistory_12 &transaction_history) {
    m_transaction_history = transaction_history;
    m_transaction_history_isSet = true;
}

bool OAIRepowerreversal_11::is_transaction_history_Set() const{
    return m_transaction_history_isSet;
}

bool OAIRepowerreversal_11::is_transaction_history_Valid() const{
    return m_transaction_history_isValid;
}

QString OAIRepowerreversal_11::getTransactionReference() const {
    return m_transaction_reference;
}
void OAIRepowerreversal_11::setTransactionReference(const QString &transaction_reference) {
    m_transaction_reference = transaction_reference;
    m_transaction_reference_isSet = true;
}

bool OAIRepowerreversal_11::is_transaction_reference_Set() const{
    return m_transaction_reference_isSet;
}

bool OAIRepowerreversal_11::is_transaction_reference_Valid() const{
    return m_transaction_reference_isValid;
}

bool OAIRepowerreversal_11::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_original_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_history.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_reference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepowerreversal_11::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
