/**
 * rePower
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepower_5.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepower_5::OAIRepower_5(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepower_5::OAIRepower_5() {
    this->initializeModel();
}

OAIRepower_5::~OAIRepower_5() {}

void OAIRepower_5::initializeModel() {

    m_account_balance_isSet = false;
    m_account_balance_isValid = false;

    m_iccemv_data_isSet = false;
    m_iccemv_data_isValid = false;

    m_pan_mapping_file_information_isSet = false;
    m_pan_mapping_file_information_isValid = false;

    m_person_present_indicator_isSet = false;
    m_person_present_indicator_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_transaction_history_isSet = false;
    m_transaction_history_isValid = false;

    m_transaction_reference_isSet = false;
    m_transaction_reference_isValid = false;
}

void OAIRepower_5::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepower_5::fromJsonObject(QJsonObject json) {

    m_account_balance_isValid = ::OpenAPI::fromJsonValue(m_account_balance, json[QString("AccountBalance")]);
    m_account_balance_isSet = !json[QString("AccountBalance")].isNull() && m_account_balance_isValid;

    m_iccemv_data_isValid = ::OpenAPI::fromJsonValue(m_iccemv_data, json[QString("ICCEMVData")]);
    m_iccemv_data_isSet = !json[QString("ICCEMVData")].isNull() && m_iccemv_data_isValid;

    m_pan_mapping_file_information_isValid = ::OpenAPI::fromJsonValue(m_pan_mapping_file_information, json[QString("PANMappingFileInformation")]);
    m_pan_mapping_file_information_isSet = !json[QString("PANMappingFileInformation")].isNull() && m_pan_mapping_file_information_isValid;

    m_person_present_indicator_isValid = ::OpenAPI::fromJsonValue(m_person_present_indicator, json[QString("PersonPresentIndicator")]);
    m_person_present_indicator_isSet = !json[QString("PersonPresentIndicator")].isNull() && m_person_present_indicator_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_transaction_history_isValid = ::OpenAPI::fromJsonValue(m_transaction_history, json[QString("TransactionHistory")]);
    m_transaction_history_isSet = !json[QString("TransactionHistory")].isNull() && m_transaction_history_isValid;

    m_transaction_reference_isValid = ::OpenAPI::fromJsonValue(m_transaction_reference, json[QString("TransactionReference")]);
    m_transaction_reference_isSet = !json[QString("TransactionReference")].isNull() && m_transaction_reference_isValid;
}

QString OAIRepower_5::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepower_5::asJsonObject() const {
    QJsonObject obj;
    if (m_account_balance.isSet()) {
        obj.insert(QString("AccountBalance"), ::OpenAPI::toJsonValue(m_account_balance));
    }
    if (m_iccemv_data_isSet) {
        obj.insert(QString("ICCEMVData"), ::OpenAPI::toJsonValue(m_iccemv_data));
    }
    if (m_pan_mapping_file_information_isSet) {
        obj.insert(QString("PANMappingFileInformation"), ::OpenAPI::toJsonValue(m_pan_mapping_file_information));
    }
    if (m_person_present_indicator_isSet) {
        obj.insert(QString("PersonPresentIndicator"), ::OpenAPI::toJsonValue(m_person_present_indicator));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_transaction_history.isSet()) {
        obj.insert(QString("TransactionHistory"), ::OpenAPI::toJsonValue(m_transaction_history));
    }
    if (m_transaction_reference_isSet) {
        obj.insert(QString("TransactionReference"), ::OpenAPI::toJsonValue(m_transaction_reference));
    }
    return obj;
}

OAIAccountbalance_9 OAIRepower_5::getAccountBalance() const {
    return m_account_balance;
}
void OAIRepower_5::setAccountBalance(const OAIAccountbalance_9 &account_balance) {
    m_account_balance = account_balance;
    m_account_balance_isSet = true;
}

bool OAIRepower_5::is_account_balance_Set() const{
    return m_account_balance_isSet;
}

bool OAIRepower_5::is_account_balance_Valid() const{
    return m_account_balance_isValid;
}

QString OAIRepower_5::getIccemvData() const {
    return m_iccemv_data;
}
void OAIRepower_5::setIccemvData(const QString &iccemv_data) {
    m_iccemv_data = iccemv_data;
    m_iccemv_data_isSet = true;
}

bool OAIRepower_5::is_iccemv_data_Set() const{
    return m_iccemv_data_isSet;
}

bool OAIRepower_5::is_iccemv_data_Valid() const{
    return m_iccemv_data_isValid;
}

QString OAIRepower_5::getPanMappingFileInformation() const {
    return m_pan_mapping_file_information;
}
void OAIRepower_5::setPanMappingFileInformation(const QString &pan_mapping_file_information) {
    m_pan_mapping_file_information = pan_mapping_file_information;
    m_pan_mapping_file_information_isSet = true;
}

bool OAIRepower_5::is_pan_mapping_file_information_Set() const{
    return m_pan_mapping_file_information_isSet;
}

bool OAIRepower_5::is_pan_mapping_file_information_Valid() const{
    return m_pan_mapping_file_information_isValid;
}

QString OAIRepower_5::getPersonPresentIndicator() const {
    return m_person_present_indicator;
}
void OAIRepower_5::setPersonPresentIndicator(const QString &person_present_indicator) {
    m_person_present_indicator = person_present_indicator;
    m_person_present_indicator_isSet = true;
}

bool OAIRepower_5::is_person_present_indicator_Set() const{
    return m_person_present_indicator_isSet;
}

bool OAIRepower_5::is_person_present_indicator_Valid() const{
    return m_person_present_indicator_isValid;
}

QString OAIRepower_5::getRequestId() const {
    return m_request_id;
}
void OAIRepower_5::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIRepower_5::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIRepower_5::is_request_id_Valid() const{
    return m_request_id_isValid;
}

OAITransactionhistory_6 OAIRepower_5::getTransactionHistory() const {
    return m_transaction_history;
}
void OAIRepower_5::setTransactionHistory(const OAITransactionhistory_6 &transaction_history) {
    m_transaction_history = transaction_history;
    m_transaction_history_isSet = true;
}

bool OAIRepower_5::is_transaction_history_Set() const{
    return m_transaction_history_isSet;
}

bool OAIRepower_5::is_transaction_history_Valid() const{
    return m_transaction_history_isValid;
}

QString OAIRepower_5::getTransactionReference() const {
    return m_transaction_reference;
}
void OAIRepower_5::setTransactionReference(const QString &transaction_reference) {
    m_transaction_reference = transaction_reference;
    m_transaction_reference_isSet = true;
}

bool OAIRepower_5::is_transaction_reference_Set() const{
    return m_transaction_reference_isSet;
}

bool OAIRepower_5::is_transaction_reference_Valid() const{
    return m_transaction_reference_isValid;
}

bool OAIRepower_5::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iccemv_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pan_mapping_file_information_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_present_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_history.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_reference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepower_5::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
