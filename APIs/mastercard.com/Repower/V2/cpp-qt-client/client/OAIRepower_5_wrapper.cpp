/**
 * rePower
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepower_5_wrapper.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepower_5_wrapper::OAIRepower_5_wrapper(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepower_5_wrapper::OAIRepower_5_wrapper() {
    this->initializeModel();
}

OAIRepower_5_wrapper::~OAIRepower_5_wrapper() {}

void OAIRepower_5_wrapper::initializeModel() {

    m_repower_isSet = false;
    m_repower_isValid = false;
}

void OAIRepower_5_wrapper::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepower_5_wrapper::fromJsonObject(QJsonObject json) {

    m_repower_isValid = ::OpenAPI::fromJsonValue(m_repower, json[QString("Repower")]);
    m_repower_isSet = !json[QString("Repower")].isNull() && m_repower_isValid;
}

QString OAIRepower_5_wrapper::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepower_5_wrapper::asJsonObject() const {
    QJsonObject obj;
    if (m_repower.isSet()) {
        obj.insert(QString("Repower"), ::OpenAPI::toJsonValue(m_repower));
    }
    return obj;
}

OAIRepower_5 OAIRepower_5_wrapper::getRepower() const {
    return m_repower;
}
void OAIRepower_5_wrapper::setRepower(const OAIRepower_5 &repower) {
    m_repower = repower;
    m_repower_isSet = true;
}

bool OAIRepower_5_wrapper::is_repower_Set() const{
    return m_repower_isSet;
}

bool OAIRepower_5_wrapper::is_repower_Valid() const{
    return m_repower_isValid;
}

bool OAIRepower_5_wrapper::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_repower.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepower_5_wrapper::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
