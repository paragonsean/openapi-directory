/**
 * rePower
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICardacceptor_2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICardacceptor_2::OAICardacceptor_2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICardacceptor_2::OAICardacceptor_2() {
    this->initializeModel();
}

OAICardacceptor_2::~OAICardacceptor_2() {}

void OAICardacceptor_2::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAICardacceptor_2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICardacceptor_2::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("City")]);
    m_city_isSet = !json[QString("City")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("Country")]);
    m_country_isSet = !json[QString("Country")].isNull() && m_country_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("PostalCode")]);
    m_postal_code_isSet = !json[QString("PostalCode")].isNull() && m_postal_code_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;
}

QString OAICardacceptor_2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICardacceptor_2::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("City"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("Country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("PostalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_state_isSet) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAICardacceptor_2::getCity() const {
    return m_city;
}
void OAICardacceptor_2::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAICardacceptor_2::is_city_Set() const{
    return m_city_isSet;
}

bool OAICardacceptor_2::is_city_Valid() const{
    return m_city_isValid;
}

QString OAICardacceptor_2::getCountry() const {
    return m_country;
}
void OAICardacceptor_2::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAICardacceptor_2::is_country_Set() const{
    return m_country_isSet;
}

bool OAICardacceptor_2::is_country_Valid() const{
    return m_country_isValid;
}

QString OAICardacceptor_2::getName() const {
    return m_name;
}
void OAICardacceptor_2::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICardacceptor_2::is_name_Set() const{
    return m_name_isSet;
}

bool OAICardacceptor_2::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICardacceptor_2::getPostalCode() const {
    return m_postal_code;
}
void OAICardacceptor_2::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAICardacceptor_2::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAICardacceptor_2::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAICardacceptor_2::getState() const {
    return m_state;
}
void OAICardacceptor_2::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICardacceptor_2::is_state_Set() const{
    return m_state_isSet;
}

bool OAICardacceptor_2::is_state_Valid() const{
    return m_state_isValid;
}

bool OAICardacceptor_2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICardacceptor_2::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_city_isValid && m_country_isValid && m_name_isValid && m_state_isValid && true;
}

} // namespace OpenAPI
