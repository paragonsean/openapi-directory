/**
 * rePower
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepowerrequest_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepowerrequest_1::OAIRepowerrequest_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepowerrequest_1::OAIRepowerrequest_1() {
    this->initializeModel();
}

OAIRepowerrequest_1::~OAIRepowerrequest_1() {}

void OAIRepowerrequest_1::initializeModel() {

    m_additional_sender_information_isSet = false;
    m_additional_sender_information_isValid = false;

    m_card_acceptor_isSet = false;
    m_card_acceptor_isValid = false;

    m_card_number_isSet = false;
    m_card_number_isValid = false;

    m_card_sequence_number_isSet = false;
    m_card_sequence_number_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_ica_isSet = false;
    m_ica_isValid = false;

    m_iccemv_data_isSet = false;
    m_iccemv_data_isValid = false;

    m_local_date_isSet = false;
    m_local_date_isValid = false;

    m_local_time_isSet = false;
    m_local_time_isValid = false;

    m_merchant_type_isSet = false;
    m_merchant_type_isValid = false;

    m_pos_card_data_terminal_input_capability_indicator_isSet = false;
    m_pos_card_data_terminal_input_capability_indicator_isValid = false;

    m_payment_initiation_channel_isSet = false;
    m_payment_initiation_channel_isValid = false;

    m_payment_pos_entry_mode_isSet = false;
    m_payment_pos_entry_mode_isValid = false;

    m_processor_id_isSet = false;
    m_processor_id_isValid = false;

    m_receiver_track2_data_isSet = false;
    m_receiver_track2_data_isValid = false;

    m_routing_and_transit_number_isSet = false;
    m_routing_and_transit_number_isValid = false;

    m_transaction_amount_isSet = false;
    m_transaction_amount_isValid = false;

    m_transaction_fee_isSet = false;
    m_transaction_fee_isValid = false;

    m_transaction_reference_isSet = false;
    m_transaction_reference_isValid = false;
}

void OAIRepowerrequest_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepowerrequest_1::fromJsonObject(QJsonObject json) {

    m_additional_sender_information_isValid = ::OpenAPI::fromJsonValue(m_additional_sender_information, json[QString("AdditionalSenderInformation")]);
    m_additional_sender_information_isSet = !json[QString("AdditionalSenderInformation")].isNull() && m_additional_sender_information_isValid;

    m_card_acceptor_isValid = ::OpenAPI::fromJsonValue(m_card_acceptor, json[QString("CardAcceptor")]);
    m_card_acceptor_isSet = !json[QString("CardAcceptor")].isNull() && m_card_acceptor_isValid;

    m_card_number_isValid = ::OpenAPI::fromJsonValue(m_card_number, json[QString("CardNumber")]);
    m_card_number_isSet = !json[QString("CardNumber")].isNull() && m_card_number_isValid;

    m_card_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_card_sequence_number, json[QString("CardSequenceNumber")]);
    m_card_sequence_number_isSet = !json[QString("CardSequenceNumber")].isNull() && m_card_sequence_number_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("Channel")]);
    m_channel_isSet = !json[QString("Channel")].isNull() && m_channel_isValid;

    m_ica_isValid = ::OpenAPI::fromJsonValue(m_ica, json[QString("ICA")]);
    m_ica_isSet = !json[QString("ICA")].isNull() && m_ica_isValid;

    m_iccemv_data_isValid = ::OpenAPI::fromJsonValue(m_iccemv_data, json[QString("ICCEMVData")]);
    m_iccemv_data_isSet = !json[QString("ICCEMVData")].isNull() && m_iccemv_data_isValid;

    m_local_date_isValid = ::OpenAPI::fromJsonValue(m_local_date, json[QString("LocalDate")]);
    m_local_date_isSet = !json[QString("LocalDate")].isNull() && m_local_date_isValid;

    m_local_time_isValid = ::OpenAPI::fromJsonValue(m_local_time, json[QString("LocalTime")]);
    m_local_time_isSet = !json[QString("LocalTime")].isNull() && m_local_time_isValid;

    m_merchant_type_isValid = ::OpenAPI::fromJsonValue(m_merchant_type, json[QString("MerchantType")]);
    m_merchant_type_isSet = !json[QString("MerchantType")].isNull() && m_merchant_type_isValid;

    m_pos_card_data_terminal_input_capability_indicator_isValid = ::OpenAPI::fromJsonValue(m_pos_card_data_terminal_input_capability_indicator, json[QString("POSCardDataTerminalInputCapabilityIndicator")]);
    m_pos_card_data_terminal_input_capability_indicator_isSet = !json[QString("POSCardDataTerminalInputCapabilityIndicator")].isNull() && m_pos_card_data_terminal_input_capability_indicator_isValid;

    m_payment_initiation_channel_isValid = ::OpenAPI::fromJsonValue(m_payment_initiation_channel, json[QString("PaymentInitiationChannel")]);
    m_payment_initiation_channel_isSet = !json[QString("PaymentInitiationChannel")].isNull() && m_payment_initiation_channel_isValid;

    m_payment_pos_entry_mode_isValid = ::OpenAPI::fromJsonValue(m_payment_pos_entry_mode, json[QString("PaymentPosEntryMode")]);
    m_payment_pos_entry_mode_isSet = !json[QString("PaymentPosEntryMode")].isNull() && m_payment_pos_entry_mode_isValid;

    m_processor_id_isValid = ::OpenAPI::fromJsonValue(m_processor_id, json[QString("ProcessorId")]);
    m_processor_id_isSet = !json[QString("ProcessorId")].isNull() && m_processor_id_isValid;

    m_receiver_track2_data_isValid = ::OpenAPI::fromJsonValue(m_receiver_track2_data, json[QString("ReceiverTrack2Data")]);
    m_receiver_track2_data_isSet = !json[QString("ReceiverTrack2Data")].isNull() && m_receiver_track2_data_isValid;

    m_routing_and_transit_number_isValid = ::OpenAPI::fromJsonValue(m_routing_and_transit_number, json[QString("RoutingAndTransitNumber")]);
    m_routing_and_transit_number_isSet = !json[QString("RoutingAndTransitNumber")].isNull() && m_routing_and_transit_number_isValid;

    m_transaction_amount_isValid = ::OpenAPI::fromJsonValue(m_transaction_amount, json[QString("TransactionAmount")]);
    m_transaction_amount_isSet = !json[QString("TransactionAmount")].isNull() && m_transaction_amount_isValid;

    m_transaction_fee_isValid = ::OpenAPI::fromJsonValue(m_transaction_fee, json[QString("TransactionFee")]);
    m_transaction_fee_isSet = !json[QString("TransactionFee")].isNull() && m_transaction_fee_isValid;

    m_transaction_reference_isValid = ::OpenAPI::fromJsonValue(m_transaction_reference, json[QString("TransactionReference")]);
    m_transaction_reference_isSet = !json[QString("TransactionReference")].isNull() && m_transaction_reference_isValid;
}

QString OAIRepowerrequest_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepowerrequest_1::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_sender_information_isSet) {
        obj.insert(QString("AdditionalSenderInformation"), ::OpenAPI::toJsonValue(m_additional_sender_information));
    }
    if (m_card_acceptor.isSet()) {
        obj.insert(QString("CardAcceptor"), ::OpenAPI::toJsonValue(m_card_acceptor));
    }
    if (m_card_number_isSet) {
        obj.insert(QString("CardNumber"), ::OpenAPI::toJsonValue(m_card_number));
    }
    if (m_card_sequence_number_isSet) {
        obj.insert(QString("CardSequenceNumber"), ::OpenAPI::toJsonValue(m_card_sequence_number));
    }
    if (m_channel_isSet) {
        obj.insert(QString("Channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_ica_isSet) {
        obj.insert(QString("ICA"), ::OpenAPI::toJsonValue(m_ica));
    }
    if (m_iccemv_data_isSet) {
        obj.insert(QString("ICCEMVData"), ::OpenAPI::toJsonValue(m_iccemv_data));
    }
    if (m_local_date_isSet) {
        obj.insert(QString("LocalDate"), ::OpenAPI::toJsonValue(m_local_date));
    }
    if (m_local_time_isSet) {
        obj.insert(QString("LocalTime"), ::OpenAPI::toJsonValue(m_local_time));
    }
    if (m_merchant_type_isSet) {
        obj.insert(QString("MerchantType"), ::OpenAPI::toJsonValue(m_merchant_type));
    }
    if (m_pos_card_data_terminal_input_capability_indicator_isSet) {
        obj.insert(QString("POSCardDataTerminalInputCapabilityIndicator"), ::OpenAPI::toJsonValue(m_pos_card_data_terminal_input_capability_indicator));
    }
    if (m_payment_initiation_channel_isSet) {
        obj.insert(QString("PaymentInitiationChannel"), ::OpenAPI::toJsonValue(m_payment_initiation_channel));
    }
    if (m_payment_pos_entry_mode_isSet) {
        obj.insert(QString("PaymentPosEntryMode"), ::OpenAPI::toJsonValue(m_payment_pos_entry_mode));
    }
    if (m_processor_id_isSet) {
        obj.insert(QString("ProcessorId"), ::OpenAPI::toJsonValue(m_processor_id));
    }
    if (m_receiver_track2_data_isSet) {
        obj.insert(QString("ReceiverTrack2Data"), ::OpenAPI::toJsonValue(m_receiver_track2_data));
    }
    if (m_routing_and_transit_number_isSet) {
        obj.insert(QString("RoutingAndTransitNumber"), ::OpenAPI::toJsonValue(m_routing_and_transit_number));
    }
    if (m_transaction_amount.isSet()) {
        obj.insert(QString("TransactionAmount"), ::OpenAPI::toJsonValue(m_transaction_amount));
    }
    if (m_transaction_fee.isSet()) {
        obj.insert(QString("TransactionFee"), ::OpenAPI::toJsonValue(m_transaction_fee));
    }
    if (m_transaction_reference_isSet) {
        obj.insert(QString("TransactionReference"), ::OpenAPI::toJsonValue(m_transaction_reference));
    }
    return obj;
}

QString OAIRepowerrequest_1::getAdditionalSenderInformation() const {
    return m_additional_sender_information;
}
void OAIRepowerrequest_1::setAdditionalSenderInformation(const QString &additional_sender_information) {
    m_additional_sender_information = additional_sender_information;
    m_additional_sender_information_isSet = true;
}

bool OAIRepowerrequest_1::is_additional_sender_information_Set() const{
    return m_additional_sender_information_isSet;
}

bool OAIRepowerrequest_1::is_additional_sender_information_Valid() const{
    return m_additional_sender_information_isValid;
}

OAICardacceptor_2 OAIRepowerrequest_1::getCardAcceptor() const {
    return m_card_acceptor;
}
void OAIRepowerrequest_1::setCardAcceptor(const OAICardacceptor_2 &card_acceptor) {
    m_card_acceptor = card_acceptor;
    m_card_acceptor_isSet = true;
}

bool OAIRepowerrequest_1::is_card_acceptor_Set() const{
    return m_card_acceptor_isSet;
}

bool OAIRepowerrequest_1::is_card_acceptor_Valid() const{
    return m_card_acceptor_isValid;
}

QString OAIRepowerrequest_1::getCardNumber() const {
    return m_card_number;
}
void OAIRepowerrequest_1::setCardNumber(const QString &card_number) {
    m_card_number = card_number;
    m_card_number_isSet = true;
}

bool OAIRepowerrequest_1::is_card_number_Set() const{
    return m_card_number_isSet;
}

bool OAIRepowerrequest_1::is_card_number_Valid() const{
    return m_card_number_isValid;
}

QString OAIRepowerrequest_1::getCardSequenceNumber() const {
    return m_card_sequence_number;
}
void OAIRepowerrequest_1::setCardSequenceNumber(const QString &card_sequence_number) {
    m_card_sequence_number = card_sequence_number;
    m_card_sequence_number_isSet = true;
}

bool OAIRepowerrequest_1::is_card_sequence_number_Set() const{
    return m_card_sequence_number_isSet;
}

bool OAIRepowerrequest_1::is_card_sequence_number_Valid() const{
    return m_card_sequence_number_isValid;
}

QString OAIRepowerrequest_1::getChannel() const {
    return m_channel;
}
void OAIRepowerrequest_1::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIRepowerrequest_1::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIRepowerrequest_1::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIRepowerrequest_1::getIca() const {
    return m_ica;
}
void OAIRepowerrequest_1::setIca(const QString &ica) {
    m_ica = ica;
    m_ica_isSet = true;
}

bool OAIRepowerrequest_1::is_ica_Set() const{
    return m_ica_isSet;
}

bool OAIRepowerrequest_1::is_ica_Valid() const{
    return m_ica_isValid;
}

QString OAIRepowerrequest_1::getIccemvData() const {
    return m_iccemv_data;
}
void OAIRepowerrequest_1::setIccemvData(const QString &iccemv_data) {
    m_iccemv_data = iccemv_data;
    m_iccemv_data_isSet = true;
}

bool OAIRepowerrequest_1::is_iccemv_data_Set() const{
    return m_iccemv_data_isSet;
}

bool OAIRepowerrequest_1::is_iccemv_data_Valid() const{
    return m_iccemv_data_isValid;
}

QString OAIRepowerrequest_1::getLocalDate() const {
    return m_local_date;
}
void OAIRepowerrequest_1::setLocalDate(const QString &local_date) {
    m_local_date = local_date;
    m_local_date_isSet = true;
}

bool OAIRepowerrequest_1::is_local_date_Set() const{
    return m_local_date_isSet;
}

bool OAIRepowerrequest_1::is_local_date_Valid() const{
    return m_local_date_isValid;
}

QString OAIRepowerrequest_1::getLocalTime() const {
    return m_local_time;
}
void OAIRepowerrequest_1::setLocalTime(const QString &local_time) {
    m_local_time = local_time;
    m_local_time_isSet = true;
}

bool OAIRepowerrequest_1::is_local_time_Set() const{
    return m_local_time_isSet;
}

bool OAIRepowerrequest_1::is_local_time_Valid() const{
    return m_local_time_isValid;
}

QString OAIRepowerrequest_1::getMerchantType() const {
    return m_merchant_type;
}
void OAIRepowerrequest_1::setMerchantType(const QString &merchant_type) {
    m_merchant_type = merchant_type;
    m_merchant_type_isSet = true;
}

bool OAIRepowerrequest_1::is_merchant_type_Set() const{
    return m_merchant_type_isSet;
}

bool OAIRepowerrequest_1::is_merchant_type_Valid() const{
    return m_merchant_type_isValid;
}

QString OAIRepowerrequest_1::getPosCardDataTerminalInputCapabilityIndicator() const {
    return m_pos_card_data_terminal_input_capability_indicator;
}
void OAIRepowerrequest_1::setPosCardDataTerminalInputCapabilityIndicator(const QString &pos_card_data_terminal_input_capability_indicator) {
    m_pos_card_data_terminal_input_capability_indicator = pos_card_data_terminal_input_capability_indicator;
    m_pos_card_data_terminal_input_capability_indicator_isSet = true;
}

bool OAIRepowerrequest_1::is_pos_card_data_terminal_input_capability_indicator_Set() const{
    return m_pos_card_data_terminal_input_capability_indicator_isSet;
}

bool OAIRepowerrequest_1::is_pos_card_data_terminal_input_capability_indicator_Valid() const{
    return m_pos_card_data_terminal_input_capability_indicator_isValid;
}

QString OAIRepowerrequest_1::getPaymentInitiationChannel() const {
    return m_payment_initiation_channel;
}
void OAIRepowerrequest_1::setPaymentInitiationChannel(const QString &payment_initiation_channel) {
    m_payment_initiation_channel = payment_initiation_channel;
    m_payment_initiation_channel_isSet = true;
}

bool OAIRepowerrequest_1::is_payment_initiation_channel_Set() const{
    return m_payment_initiation_channel_isSet;
}

bool OAIRepowerrequest_1::is_payment_initiation_channel_Valid() const{
    return m_payment_initiation_channel_isValid;
}

QString OAIRepowerrequest_1::getPaymentPosEntryMode() const {
    return m_payment_pos_entry_mode;
}
void OAIRepowerrequest_1::setPaymentPosEntryMode(const QString &payment_pos_entry_mode) {
    m_payment_pos_entry_mode = payment_pos_entry_mode;
    m_payment_pos_entry_mode_isSet = true;
}

bool OAIRepowerrequest_1::is_payment_pos_entry_mode_Set() const{
    return m_payment_pos_entry_mode_isSet;
}

bool OAIRepowerrequest_1::is_payment_pos_entry_mode_Valid() const{
    return m_payment_pos_entry_mode_isValid;
}

QString OAIRepowerrequest_1::getProcessorId() const {
    return m_processor_id;
}
void OAIRepowerrequest_1::setProcessorId(const QString &processor_id) {
    m_processor_id = processor_id;
    m_processor_id_isSet = true;
}

bool OAIRepowerrequest_1::is_processor_id_Set() const{
    return m_processor_id_isSet;
}

bool OAIRepowerrequest_1::is_processor_id_Valid() const{
    return m_processor_id_isValid;
}

QString OAIRepowerrequest_1::getReceiverTrack2Data() const {
    return m_receiver_track2_data;
}
void OAIRepowerrequest_1::setReceiverTrack2Data(const QString &receiver_track2_data) {
    m_receiver_track2_data = receiver_track2_data;
    m_receiver_track2_data_isSet = true;
}

bool OAIRepowerrequest_1::is_receiver_track2_data_Set() const{
    return m_receiver_track2_data_isSet;
}

bool OAIRepowerrequest_1::is_receiver_track2_data_Valid() const{
    return m_receiver_track2_data_isValid;
}

QString OAIRepowerrequest_1::getRoutingAndTransitNumber() const {
    return m_routing_and_transit_number;
}
void OAIRepowerrequest_1::setRoutingAndTransitNumber(const QString &routing_and_transit_number) {
    m_routing_and_transit_number = routing_and_transit_number;
    m_routing_and_transit_number_isSet = true;
}

bool OAIRepowerrequest_1::is_routing_and_transit_number_Set() const{
    return m_routing_and_transit_number_isSet;
}

bool OAIRepowerrequest_1::is_routing_and_transit_number_Valid() const{
    return m_routing_and_transit_number_isValid;
}

OAITransactionamount_3 OAIRepowerrequest_1::getTransactionAmount() const {
    return m_transaction_amount;
}
void OAIRepowerrequest_1::setTransactionAmount(const OAITransactionamount_3 &transaction_amount) {
    m_transaction_amount = transaction_amount;
    m_transaction_amount_isSet = true;
}

bool OAIRepowerrequest_1::is_transaction_amount_Set() const{
    return m_transaction_amount_isSet;
}

bool OAIRepowerrequest_1::is_transaction_amount_Valid() const{
    return m_transaction_amount_isValid;
}

OAITransactionfee_4 OAIRepowerrequest_1::getTransactionFee() const {
    return m_transaction_fee;
}
void OAIRepowerrequest_1::setTransactionFee(const OAITransactionfee_4 &transaction_fee) {
    m_transaction_fee = transaction_fee;
    m_transaction_fee_isSet = true;
}

bool OAIRepowerrequest_1::is_transaction_fee_Set() const{
    return m_transaction_fee_isSet;
}

bool OAIRepowerrequest_1::is_transaction_fee_Valid() const{
    return m_transaction_fee_isValid;
}

QString OAIRepowerrequest_1::getTransactionReference() const {
    return m_transaction_reference;
}
void OAIRepowerrequest_1::setTransactionReference(const QString &transaction_reference) {
    m_transaction_reference = transaction_reference;
    m_transaction_reference_isSet = true;
}

bool OAIRepowerrequest_1::is_transaction_reference_Set() const{
    return m_transaction_reference_isSet;
}

bool OAIRepowerrequest_1::is_transaction_reference_Valid() const{
    return m_transaction_reference_isValid;
}

bool OAIRepowerrequest_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_sender_information_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_acceptor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ica_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iccemv_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pos_card_data_terminal_input_capability_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_initiation_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_pos_entry_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_track2_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_and_transit_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_fee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_reference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepowerrequest_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_card_number_isValid && m_channel_isValid && m_ica_isValid && m_local_date_isValid && m_local_time_isValid && m_merchant_type_isValid && m_processor_id_isValid && m_routing_and_transit_number_isValid && m_transaction_reference_isValid && true;
}

} // namespace OpenAPI
