/*
 * rePower
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Accountbalance9;
import org.openapitools.client.model.Transactionhistory6;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:33.060481-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Repower5 {
  public static final String SERIALIZED_NAME_ACCOUNT_BALANCE = "AccountBalance";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_BALANCE)
  private Accountbalance9 accountBalance;

  public static final String SERIALIZED_NAME_IC_C_E_M_V_DATA = "ICCEMVData";
  @SerializedName(SERIALIZED_NAME_IC_C_E_M_V_DATA)
  private String icCEMVData;

  public static final String SERIALIZED_NAME_PA_N_MAPPING_FILE_INFORMATION = "PANMappingFileInformation";
  @SerializedName(SERIALIZED_NAME_PA_N_MAPPING_FILE_INFORMATION)
  private String paNMappingFileInformation;

  public static final String SERIALIZED_NAME_PERSON_PRESENT_INDICATOR = "PersonPresentIndicator";
  @SerializedName(SERIALIZED_NAME_PERSON_PRESENT_INDICATOR)
  private String personPresentIndicator;

  public static final String SERIALIZED_NAME_REQUEST_ID = "RequestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_TRANSACTION_HISTORY = "TransactionHistory";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_HISTORY)
  private Transactionhistory6 transactionHistory;

  public static final String SERIALIZED_NAME_TRANSACTION_REFERENCE = "TransactionReference";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_REFERENCE)
  private String transactionReference;

  public Repower5() {
  }

  public Repower5 accountBalance(Accountbalance9 accountBalance) {
    this.accountBalance = accountBalance;
    return this;
  }

  /**
   * Get accountBalance
   * @return accountBalance
   */
  @javax.annotation.Nullable
  public Accountbalance9 getAccountBalance() {
    return accountBalance;
  }

  public void setAccountBalance(Accountbalance9 accountBalance) {
    this.accountBalance = accountBalance;
  }


  public Repower5 icCEMVData(String icCEMVData) {
    this.icCEMVData = icCEMVData;
    return this;
  }

  /**
   *  Integrated Circuit Card (ICC) System related data. It must be present for EMV transactions. Required DE 55 Subelements in /0200 and /0220 Messages. Details- Conditional, String, 255
   * @return icCEMVData
   */
  @javax.annotation.Nullable
  public String getIcCEMVData() {
    return icCEMVData;
  }

  public void setIcCEMVData(String icCEMVData) {
    this.icCEMVData = icCEMVData;
  }


  public Repower5 paNMappingFileInformation(String paNMappingFileInformation) {
    this.paNMappingFileInformation = paNMappingFileInformation;
    return this;
  }

  /**
   * PAN Mapping File Information will be avalable when the PAN is MDES token. Details- Conditional, String, 33
   * @return paNMappingFileInformation
   */
  @javax.annotation.Nullable
  public String getPaNMappingFileInformation() {
    return paNMappingFileInformation;
  }

  public void setPaNMappingFileInformation(String paNMappingFileInformation) {
    this.paNMappingFileInformation = paNMappingFileInformation;
  }


  public Repower5 personPresentIndicator(String personPresentIndicator) {
    this.personPresentIndicator = personPresentIndicator;
    return this;
  }

  /**
   * Person Present Indicator values is populated in repower response. Where the repower requests are  a. PaymentPosEntryMode (07*_/09*)  b. CardSequenceNumber &gt; 0  c. Transaction Amount &gt; 0 It is a number value and size 2 digit
   * @return personPresentIndicator
   */
  @javax.annotation.Nullable
  public String getPersonPresentIndicator() {
    return personPresentIndicator;
  }

  public void setPersonPresentIndicator(String personPresentIndicator) {
    this.personPresentIndicator = personPresentIndicator;
  }


  public Repower5 requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * This is the unique identifier for API Web service request. Details- Numeric value, variable length between 1 and 19 digits, without zero padding
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public Repower5 transactionHistory(Transactionhistory6 transactionHistory) {
    this.transactionHistory = transactionHistory;
    return this;
  }

  /**
   * Get transactionHistory
   * @return transactionHistory
   */
  @javax.annotation.Nullable
  public Transactionhistory6 getTransactionHistory() {
    return transactionHistory;
  }

  public void setTransactionHistory(Transactionhistory6 transactionHistory) {
    this.transactionHistory = transactionHistory;
  }


  public Repower5 transactionReference(String transactionReference) {
    this.transactionReference = transactionReference;
    return this;
  }

  /**
   * This value represents the unique reference number for the rePower transaction provided by the merchant or acquiring institution. Details- Alphanumeric value, 19
   * @return transactionReference
   */
  @javax.annotation.Nullable
  public String getTransactionReference() {
    return transactionReference;
  }

  public void setTransactionReference(String transactionReference) {
    this.transactionReference = transactionReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Repower5 repower5 = (Repower5) o;
    return Objects.equals(this.accountBalance, repower5.accountBalance) &&
        Objects.equals(this.icCEMVData, repower5.icCEMVData) &&
        Objects.equals(this.paNMappingFileInformation, repower5.paNMappingFileInformation) &&
        Objects.equals(this.personPresentIndicator, repower5.personPresentIndicator) &&
        Objects.equals(this.requestId, repower5.requestId) &&
        Objects.equals(this.transactionHistory, repower5.transactionHistory) &&
        Objects.equals(this.transactionReference, repower5.transactionReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountBalance, icCEMVData, paNMappingFileInformation, personPresentIndicator, requestId, transactionHistory, transactionReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Repower5 {\n");
    sb.append("    accountBalance: ").append(toIndentedString(accountBalance)).append("\n");
    sb.append("    icCEMVData: ").append(toIndentedString(icCEMVData)).append("\n");
    sb.append("    paNMappingFileInformation: ").append(toIndentedString(paNMappingFileInformation)).append("\n");
    sb.append("    personPresentIndicator: ").append(toIndentedString(personPresentIndicator)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    transactionHistory: ").append(toIndentedString(transactionHistory)).append("\n");
    sb.append("    transactionReference: ").append(toIndentedString(transactionReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountBalance");
    openapiFields.add("ICCEMVData");
    openapiFields.add("PANMappingFileInformation");
    openapiFields.add("PersonPresentIndicator");
    openapiFields.add("RequestId");
    openapiFields.add("TransactionHistory");
    openapiFields.add("TransactionReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Repower5
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Repower5.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Repower5 is not found in the empty JSON string", Repower5.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Repower5.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Repower5` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AccountBalance`
      if (jsonObj.get("AccountBalance") != null && !jsonObj.get("AccountBalance").isJsonNull()) {
        Accountbalance9.validateJsonElement(jsonObj.get("AccountBalance"));
      }
      if ((jsonObj.get("ICCEMVData") != null && !jsonObj.get("ICCEMVData").isJsonNull()) && !jsonObj.get("ICCEMVData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ICCEMVData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ICCEMVData").toString()));
      }
      if ((jsonObj.get("PANMappingFileInformation") != null && !jsonObj.get("PANMappingFileInformation").isJsonNull()) && !jsonObj.get("PANMappingFileInformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PANMappingFileInformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PANMappingFileInformation").toString()));
      }
      if ((jsonObj.get("PersonPresentIndicator") != null && !jsonObj.get("PersonPresentIndicator").isJsonNull()) && !jsonObj.get("PersonPresentIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PersonPresentIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PersonPresentIndicator").toString()));
      }
      if ((jsonObj.get("RequestId") != null && !jsonObj.get("RequestId").isJsonNull()) && !jsonObj.get("RequestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RequestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RequestId").toString()));
      }
      // validate the optional field `TransactionHistory`
      if (jsonObj.get("TransactionHistory") != null && !jsonObj.get("TransactionHistory").isJsonNull()) {
        Transactionhistory6.validateJsonElement(jsonObj.get("TransactionHistory"));
      }
      if ((jsonObj.get("TransactionReference") != null && !jsonObj.get("TransactionReference").isJsonNull()) && !jsonObj.get("TransactionReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransactionReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TransactionReference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Repower5.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Repower5' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Repower5> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Repower5.class));

       return (TypeAdapter<T>) new TypeAdapter<Repower5>() {
           @Override
           public void write(JsonWriter out, Repower5 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Repower5 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Repower5 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Repower5
   * @throws IOException if the JSON string is invalid with respect to Repower5
   */
  public static Repower5 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Repower5.class);
  }

  /**
   * Convert an instance of Repower5 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

