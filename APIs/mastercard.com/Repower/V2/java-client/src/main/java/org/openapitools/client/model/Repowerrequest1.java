/*
 * rePower
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Cardacceptor2;
import org.openapitools.client.model.Transactionamount3;
import org.openapitools.client.model.Transactionfee4;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the details of the repower request message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:33.060481-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Repowerrequest1 {
  public static final String SERIALIZED_NAME_ADDITIONAL_SENDER_INFORMATION = "AdditionalSenderInformation";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_SENDER_INFORMATION)
  private String additionalSenderInformation;

  public static final String SERIALIZED_NAME_CARD_ACCEPTOR = "CardAcceptor";
  @SerializedName(SERIALIZED_NAME_CARD_ACCEPTOR)
  private Cardacceptor2 cardAcceptor;

  public static final String SERIALIZED_NAME_CARD_NUMBER = "CardNumber";
  @SerializedName(SERIALIZED_NAME_CARD_NUMBER)
  private String cardNumber;

  public static final String SERIALIZED_NAME_CARD_SEQUENCE_NUMBER = "CardSequenceNumber";
  @SerializedName(SERIALIZED_NAME_CARD_SEQUENCE_NUMBER)
  private String cardSequenceNumber;

  public static final String SERIALIZED_NAME_CHANNEL = "Channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private String channel;

  public static final String SERIALIZED_NAME_I_C_A = "ICA";
  @SerializedName(SERIALIZED_NAME_I_C_A)
  private String ICA;

  public static final String SERIALIZED_NAME_IC_C_E_M_V_DATA = "ICCEMVData";
  @SerializedName(SERIALIZED_NAME_IC_C_E_M_V_DATA)
  private String icCEMVData;

  public static final String SERIALIZED_NAME_LOCAL_DATE = "LocalDate";
  @SerializedName(SERIALIZED_NAME_LOCAL_DATE)
  private String _localDate;

  public static final String SERIALIZED_NAME_LOCAL_TIME = "LocalTime";
  @SerializedName(SERIALIZED_NAME_LOCAL_TIME)
  private String _localTime;

  public static final String SERIALIZED_NAME_MERCHANT_TYPE = "MerchantType";
  @SerializedName(SERIALIZED_NAME_MERCHANT_TYPE)
  private String merchantType;

  public static final String SERIALIZED_NAME_PO_S_CARD_DATA_TERMINAL_INPUT_CAPABILITY_INDICATOR = "POSCardDataTerminalInputCapabilityIndicator";
  @SerializedName(SERIALIZED_NAME_PO_S_CARD_DATA_TERMINAL_INPUT_CAPABILITY_INDICATOR)
  private String poSCardDataTerminalInputCapabilityIndicator;

  public static final String SERIALIZED_NAME_PAYMENT_INITIATION_CHANNEL = "PaymentInitiationChannel";
  @SerializedName(SERIALIZED_NAME_PAYMENT_INITIATION_CHANNEL)
  private String paymentInitiationChannel;

  public static final String SERIALIZED_NAME_PAYMENT_POS_ENTRY_MODE = "PaymentPosEntryMode";
  @SerializedName(SERIALIZED_NAME_PAYMENT_POS_ENTRY_MODE)
  private String paymentPosEntryMode;

  public static final String SERIALIZED_NAME_PROCESSOR_ID = "ProcessorId";
  @SerializedName(SERIALIZED_NAME_PROCESSOR_ID)
  private String processorId;

  public static final String SERIALIZED_NAME_RECEIVER_TRACK2_DATA = "ReceiverTrack2Data";
  @SerializedName(SERIALIZED_NAME_RECEIVER_TRACK2_DATA)
  private String receiverTrack2Data;

  public static final String SERIALIZED_NAME_ROUTING_AND_TRANSIT_NUMBER = "RoutingAndTransitNumber";
  @SerializedName(SERIALIZED_NAME_ROUTING_AND_TRANSIT_NUMBER)
  private String routingAndTransitNumber;

  public static final String SERIALIZED_NAME_TRANSACTION_AMOUNT = "TransactionAmount";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_AMOUNT)
  private Transactionamount3 transactionAmount;

  public static final String SERIALIZED_NAME_TRANSACTION_FEE = "TransactionFee";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_FEE)
  private Transactionfee4 transactionFee;

  public static final String SERIALIZED_NAME_TRANSACTION_REFERENCE = "TransactionReference";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_REFERENCE)
  private String transactionReference;

  public Repowerrequest1() {
  }

  public Repowerrequest1 additionalSenderInformation(String additionalSenderInformation) {
    this.additionalSenderInformation = additionalSenderInformation;
    return this;
  }

  /**
   *  Contains additional sender information in the Financial Transaction.The first 20 digits will be telephone number(n-20), the next 8 digits will be Date of Birth(n-8)(MMDDYYYY)and &#39;Check&#39; or &#39;Cash&#39; needs to be populated next based on check load or cash load.  Details- String, Min 32 characters, Max 65 characters in Length
   * @return additionalSenderInformation
   */
  @javax.annotation.Nullable
  public String getAdditionalSenderInformation() {
    return additionalSenderInformation;
  }

  public void setAdditionalSenderInformation(String additionalSenderInformation) {
    this.additionalSenderInformation = additionalSenderInformation;
  }


  public Repowerrequest1 cardAcceptor(Cardacceptor2 cardAcceptor) {
    this.cardAcceptor = cardAcceptor;
    return this;
  }

  /**
   * Get cardAcceptor
   * @return cardAcceptor
   */
  @javax.annotation.Nullable
  public Cardacceptor2 getCardAcceptor() {
    return cardAcceptor;
  }

  public void setCardAcceptor(Cardacceptor2 cardAcceptor) {
    this.cardAcceptor = cardAcceptor;
  }


  public Repowerrequest1 cardNumber(String cardNumber) {
    this.cardNumber = cardNumber;
    return this;
  }

  /**
   * Cardholder personal account number. Details- Numeric, 16 or 19, must pass LUHN MOD10 validation
   * @return cardNumber
   */
  @javax.annotation.Nonnull
  public String getCardNumber() {
    return cardNumber;
  }

  public void setCardNumber(String cardNumber) {
    this.cardNumber = cardNumber;
  }


  public Repowerrequest1 cardSequenceNumber(String cardSequenceNumber) {
    this.cardSequenceNumber = cardSequenceNumber;
    return this;
  }

  /**
   * Card Sequence Number as part of PaymentPOS Entry mode Integrated Circuit and contactless M/Chip. It must be present for EMV,MDES or PayPass transactions (where POS Entry Mode &#x3D; \&quot;05x\&quot; or \&quot;07x\&quot;). Details- Numeric, 3, The Possible values for Card Sequence Number are in the range 000â€“099
   * @return cardSequenceNumber
   */
  @javax.annotation.Nullable
  public String getCardSequenceNumber() {
    return cardSequenceNumber;
  }

  public void setCardSequenceNumber(String cardSequenceNumber) {
    this.cardSequenceNumber = cardSequenceNumber;
  }


  public Repowerrequest1 channel(String channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Origination channel for the rePower transaction as &#39;Attended POS&#39; (P) or &#39;Web&#39; (W).  Details- Alpha, 1, Constant P or W
   * @return channel
   */
  @javax.annotation.Nonnull
  public String getChannel() {
    return channel;
  }

  public void setChannel(String channel) {
    this.channel = channel;
  }


  public Repowerrequest1 ICA(String ICA) {
    this.ICA = ICA;
    return this;
  }

  /**
   * ICA of acquiring institution. Details- Numeric, 4-6
   * @return ICA
   */
  @javax.annotation.Nonnull
  public String getICA() {
    return ICA;
  }

  public void setICA(String ICA) {
    this.ICA = ICA;
  }


  public Repowerrequest1 icCEMVData(String icCEMVData) {
    this.icCEMVData = icCEMVData;
    return this;
  }

  /**
   * Integrated Circuit Card (ICC) System related data. It must be present for EMV(Including paypass/MDES EMV) transactions. Details- String, 255. Please refer section &#39;ICCEMVData&#39; for more details.
   * @return icCEMVData
   */
  @javax.annotation.Nullable
  public String getIcCEMVData() {
    return icCEMVData;
  }

  public void setIcCEMVData(String icCEMVData) {
    this.icCEMVData = icCEMVData;
  }


  public Repowerrequest1 _localDate(String _localDate) {
    this._localDate = _localDate;
    return this;
  }

  /**
   * This is the local date for the location where the request is originating. Details- Numeric, 4, MMDD
   * @return _localDate
   */
  @javax.annotation.Nonnull
  public String getLocalDate() {
    return _localDate;
  }

  public void setLocalDate(String _localDate) {
    this._localDate = _localDate;
  }


  public Repowerrequest1 _localTime(String _localTime) {
    this._localTime = _localTime;
    return this;
  }

  /**
   *  This is the local time for the location where the request is originating. The format is military or twenty-four hour clock time. Details- Numeric, HHMMSS
   * @return _localTime
   */
  @javax.annotation.Nonnull
  public String getLocalTime() {
    return _localTime;
  }

  public void setLocalTime(String _localTime) {
    this._localTime = _localTime;
  }


  public Repowerrequest1 merchantType(String merchantType) {
    this.merchantType = merchantType;
    return this;
  }

  /**
   * Merchant&#39;s type of business or Service will be represented as a member financial institution initiated rePower transaction (6532), or merchant initiated rePower transaction (6533). Details- Numeric, 4, constant 6532 or 6533
   * @return merchantType
   */
  @javax.annotation.Nonnull
  public String getMerchantType() {
    return merchantType;
  }

  public void setMerchantType(String merchantType) {
    this.merchantType = merchantType;
  }


  public Repowerrequest1 poSCardDataTerminalInputCapabilityIndicator(String poSCardDataTerminalInputCapabilityIndicator) {
    this.poSCardDataTerminalInputCapabilityIndicator = poSCardDataTerminalInputCapabilityIndicator;
    return this;
  }

  /**
   * Point of Service (POS) card data terminal input capability indicator. It must be present for EMV,MDES or PayPass transactions (where POS Entry Mode &#x3D; \&quot;05x\&quot; or \&quot;07x\&quot; or \&quot;91x\&quot;). Details- Conditional, numeric, 1, The Possible values for POS card data terminal input capability indicator is 3 or 4.
   * @return poSCardDataTerminalInputCapabilityIndicator
   */
  @javax.annotation.Nullable
  public String getPoSCardDataTerminalInputCapabilityIndicator() {
    return poSCardDataTerminalInputCapabilityIndicator;
  }

  public void setPoSCardDataTerminalInputCapabilityIndicator(String poSCardDataTerminalInputCapabilityIndicator) {
    this.poSCardDataTerminalInputCapabilityIndicator = poSCardDataTerminalInputCapabilityIndicator;
  }


  public Repowerrequest1 paymentInitiationChannel(String paymentInitiationChannel) {
    this.paymentInitiationChannel = paymentInitiationChannel;
    return this;
  }

  /**
   * Payment Initiation Channel is the device type used to identify mobile-initiated (m-commerce) or other non-card device initiated transactions. It&#39;s an option field for paypass transactions. Details-  Numeric, 2 digits. The possible values for Payment Initiation Channel is detailed out in section &#39;PaymentInitiationChannel&#39;
   * @return paymentInitiationChannel
   */
  @javax.annotation.Nullable
  public String getPaymentInitiationChannel() {
    return paymentInitiationChannel;
  }

  public void setPaymentInitiationChannel(String paymentInitiationChannel) {
    this.paymentInitiationChannel = paymentInitiationChannel;
  }


  public Repowerrequest1 paymentPosEntryMode(String paymentPosEntryMode) {
    this.paymentPosEntryMode = paymentPosEntryMode;
    return this;
  }

  /**
   * PaymentPos Entry Mode to represent the POS Terminal PAN Entry Mode &amp; Terminal PIN Entry Mode. This is required for EMV transactions and Paypass/MDES magstripe transactions. The first two digits indicate PAN entry mode and the last digit indicate PIN entry mode. Details- Numeric, 3. For PAN/PIN Entry mode details refer section &#39;PaymentPosEntryMode&#39;
   * @return paymentPosEntryMode
   */
  @javax.annotation.Nullable
  public String getPaymentPosEntryMode() {
    return paymentPosEntryMode;
  }

  public void setPaymentPosEntryMode(String paymentPosEntryMode) {
    this.paymentPosEntryMode = paymentPosEntryMode;
  }


  public Repowerrequest1 processorId(String processorId) {
    this.processorId = processorId;
    return this;
  }

  /**
   * Processor Id. Details- Numeric, 10
   * @return processorId
   */
  @javax.annotation.Nonnull
  public String getProcessorId() {
    return processorId;
  }

  public void setProcessorId(String processorId) {
    this.processorId = processorId;
  }


  public Repowerrequest1 receiverTrack2Data(String receiverTrack2Data) {
    this.receiverTrack2Data = receiverTrack2Data;
    return this;
  }

  /**
   * Contains 8 sub fields to enhance the repower API to support EMV scripting data fields.It must be present for EMV, MDES or PayPass transactions(where POS Entry Mode is other than 010 or 011 or 012). Details- Conditional, String, Max 37 characters in Length. Refer section &#39;ReceiverTrack2Data&#39;
   * @return receiverTrack2Data
   */
  @javax.annotation.Nullable
  public String getReceiverTrack2Data() {
    return receiverTrack2Data;
  }

  public void setReceiverTrack2Data(String receiverTrack2Data) {
    this.receiverTrack2Data = receiverTrack2Data;
  }


  public Repowerrequest1 routingAndTransitNumber(String routingAndTransitNumber) {
    this.routingAndTransitNumber = routingAndTransitNumber;
    return this;
  }

  /**
   * Routing and Transit number. Details- Numeric, 9
   * @return routingAndTransitNumber
   */
  @javax.annotation.Nonnull
  public String getRoutingAndTransitNumber() {
    return routingAndTransitNumber;
  }

  public void setRoutingAndTransitNumber(String routingAndTransitNumber) {
    this.routingAndTransitNumber = routingAndTransitNumber;
  }


  public Repowerrequest1 transactionAmount(Transactionamount3 transactionAmount) {
    this.transactionAmount = transactionAmount;
    return this;
  }

  /**
   * Get transactionAmount
   * @return transactionAmount
   */
  @javax.annotation.Nullable
  public Transactionamount3 getTransactionAmount() {
    return transactionAmount;
  }

  public void setTransactionAmount(Transactionamount3 transactionAmount) {
    this.transactionAmount = transactionAmount;
  }


  public Repowerrequest1 transactionFee(Transactionfee4 transactionFee) {
    this.transactionFee = transactionFee;
    return this;
  }

  /**
   * Get transactionFee
   * @return transactionFee
   */
  @javax.annotation.Nullable
  public Transactionfee4 getTransactionFee() {
    return transactionFee;
  }

  public void setTransactionFee(Transactionfee4 transactionFee) {
    this.transactionFee = transactionFee;
  }


  public Repowerrequest1 transactionReference(String transactionReference) {
    this.transactionReference = transactionReference;
    return this;
  }

  /**
   * Repower Transaction Reference Number. Provided by the Client submitting the rePower transfer request. Must be \&quot;unique\&quot; across all rePower transfer requests. Details- Numeric, length 19
   * @return transactionReference
   */
  @javax.annotation.Nonnull
  public String getTransactionReference() {
    return transactionReference;
  }

  public void setTransactionReference(String transactionReference) {
    this.transactionReference = transactionReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Repowerrequest1 repowerrequest1 = (Repowerrequest1) o;
    return Objects.equals(this.additionalSenderInformation, repowerrequest1.additionalSenderInformation) &&
        Objects.equals(this.cardAcceptor, repowerrequest1.cardAcceptor) &&
        Objects.equals(this.cardNumber, repowerrequest1.cardNumber) &&
        Objects.equals(this.cardSequenceNumber, repowerrequest1.cardSequenceNumber) &&
        Objects.equals(this.channel, repowerrequest1.channel) &&
        Objects.equals(this.ICA, repowerrequest1.ICA) &&
        Objects.equals(this.icCEMVData, repowerrequest1.icCEMVData) &&
        Objects.equals(this._localDate, repowerrequest1._localDate) &&
        Objects.equals(this._localTime, repowerrequest1._localTime) &&
        Objects.equals(this.merchantType, repowerrequest1.merchantType) &&
        Objects.equals(this.poSCardDataTerminalInputCapabilityIndicator, repowerrequest1.poSCardDataTerminalInputCapabilityIndicator) &&
        Objects.equals(this.paymentInitiationChannel, repowerrequest1.paymentInitiationChannel) &&
        Objects.equals(this.paymentPosEntryMode, repowerrequest1.paymentPosEntryMode) &&
        Objects.equals(this.processorId, repowerrequest1.processorId) &&
        Objects.equals(this.receiverTrack2Data, repowerrequest1.receiverTrack2Data) &&
        Objects.equals(this.routingAndTransitNumber, repowerrequest1.routingAndTransitNumber) &&
        Objects.equals(this.transactionAmount, repowerrequest1.transactionAmount) &&
        Objects.equals(this.transactionFee, repowerrequest1.transactionFee) &&
        Objects.equals(this.transactionReference, repowerrequest1.transactionReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalSenderInformation, cardAcceptor, cardNumber, cardSequenceNumber, channel, ICA, icCEMVData, _localDate, _localTime, merchantType, poSCardDataTerminalInputCapabilityIndicator, paymentInitiationChannel, paymentPosEntryMode, processorId, receiverTrack2Data, routingAndTransitNumber, transactionAmount, transactionFee, transactionReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Repowerrequest1 {\n");
    sb.append("    additionalSenderInformation: ").append(toIndentedString(additionalSenderInformation)).append("\n");
    sb.append("    cardAcceptor: ").append(toIndentedString(cardAcceptor)).append("\n");
    sb.append("    cardNumber: ").append(toIndentedString(cardNumber)).append("\n");
    sb.append("    cardSequenceNumber: ").append(toIndentedString(cardSequenceNumber)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    ICA: ").append(toIndentedString(ICA)).append("\n");
    sb.append("    icCEMVData: ").append(toIndentedString(icCEMVData)).append("\n");
    sb.append("    _localDate: ").append(toIndentedString(_localDate)).append("\n");
    sb.append("    _localTime: ").append(toIndentedString(_localTime)).append("\n");
    sb.append("    merchantType: ").append(toIndentedString(merchantType)).append("\n");
    sb.append("    poSCardDataTerminalInputCapabilityIndicator: ").append(toIndentedString(poSCardDataTerminalInputCapabilityIndicator)).append("\n");
    sb.append("    paymentInitiationChannel: ").append(toIndentedString(paymentInitiationChannel)).append("\n");
    sb.append("    paymentPosEntryMode: ").append(toIndentedString(paymentPosEntryMode)).append("\n");
    sb.append("    processorId: ").append(toIndentedString(processorId)).append("\n");
    sb.append("    receiverTrack2Data: ").append(toIndentedString(receiverTrack2Data)).append("\n");
    sb.append("    routingAndTransitNumber: ").append(toIndentedString(routingAndTransitNumber)).append("\n");
    sb.append("    transactionAmount: ").append(toIndentedString(transactionAmount)).append("\n");
    sb.append("    transactionFee: ").append(toIndentedString(transactionFee)).append("\n");
    sb.append("    transactionReference: ").append(toIndentedString(transactionReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AdditionalSenderInformation");
    openapiFields.add("CardAcceptor");
    openapiFields.add("CardNumber");
    openapiFields.add("CardSequenceNumber");
    openapiFields.add("Channel");
    openapiFields.add("ICA");
    openapiFields.add("ICCEMVData");
    openapiFields.add("LocalDate");
    openapiFields.add("LocalTime");
    openapiFields.add("MerchantType");
    openapiFields.add("POSCardDataTerminalInputCapabilityIndicator");
    openapiFields.add("PaymentInitiationChannel");
    openapiFields.add("PaymentPosEntryMode");
    openapiFields.add("ProcessorId");
    openapiFields.add("ReceiverTrack2Data");
    openapiFields.add("RoutingAndTransitNumber");
    openapiFields.add("TransactionAmount");
    openapiFields.add("TransactionFee");
    openapiFields.add("TransactionReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CardNumber");
    openapiRequiredFields.add("Channel");
    openapiRequiredFields.add("ICA");
    openapiRequiredFields.add("LocalDate");
    openapiRequiredFields.add("LocalTime");
    openapiRequiredFields.add("MerchantType");
    openapiRequiredFields.add("ProcessorId");
    openapiRequiredFields.add("RoutingAndTransitNumber");
    openapiRequiredFields.add("TransactionReference");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Repowerrequest1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Repowerrequest1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Repowerrequest1 is not found in the empty JSON string", Repowerrequest1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Repowerrequest1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Repowerrequest1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Repowerrequest1.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AdditionalSenderInformation") != null && !jsonObj.get("AdditionalSenderInformation").isJsonNull()) && !jsonObj.get("AdditionalSenderInformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AdditionalSenderInformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AdditionalSenderInformation").toString()));
      }
      // validate the optional field `CardAcceptor`
      if (jsonObj.get("CardAcceptor") != null && !jsonObj.get("CardAcceptor").isJsonNull()) {
        Cardacceptor2.validateJsonElement(jsonObj.get("CardAcceptor"));
      }
      if (!jsonObj.get("CardNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CardNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CardNumber").toString()));
      }
      if ((jsonObj.get("CardSequenceNumber") != null && !jsonObj.get("CardSequenceNumber").isJsonNull()) && !jsonObj.get("CardSequenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CardSequenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CardSequenceNumber").toString()));
      }
      if (!jsonObj.get("Channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Channel").toString()));
      }
      if (!jsonObj.get("ICA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ICA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ICA").toString()));
      }
      if ((jsonObj.get("ICCEMVData") != null && !jsonObj.get("ICCEMVData").isJsonNull()) && !jsonObj.get("ICCEMVData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ICCEMVData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ICCEMVData").toString()));
      }
      if (!jsonObj.get("LocalDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LocalDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LocalDate").toString()));
      }
      if (!jsonObj.get("LocalTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LocalTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LocalTime").toString()));
      }
      if (!jsonObj.get("MerchantType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MerchantType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MerchantType").toString()));
      }
      if ((jsonObj.get("POSCardDataTerminalInputCapabilityIndicator") != null && !jsonObj.get("POSCardDataTerminalInputCapabilityIndicator").isJsonNull()) && !jsonObj.get("POSCardDataTerminalInputCapabilityIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `POSCardDataTerminalInputCapabilityIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("POSCardDataTerminalInputCapabilityIndicator").toString()));
      }
      if ((jsonObj.get("PaymentInitiationChannel") != null && !jsonObj.get("PaymentInitiationChannel").isJsonNull()) && !jsonObj.get("PaymentInitiationChannel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PaymentInitiationChannel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PaymentInitiationChannel").toString()));
      }
      if ((jsonObj.get("PaymentPosEntryMode") != null && !jsonObj.get("PaymentPosEntryMode").isJsonNull()) && !jsonObj.get("PaymentPosEntryMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PaymentPosEntryMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PaymentPosEntryMode").toString()));
      }
      if (!jsonObj.get("ProcessorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProcessorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProcessorId").toString()));
      }
      if ((jsonObj.get("ReceiverTrack2Data") != null && !jsonObj.get("ReceiverTrack2Data").isJsonNull()) && !jsonObj.get("ReceiverTrack2Data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReceiverTrack2Data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReceiverTrack2Data").toString()));
      }
      if (!jsonObj.get("RoutingAndTransitNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RoutingAndTransitNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RoutingAndTransitNumber").toString()));
      }
      // validate the optional field `TransactionAmount`
      if (jsonObj.get("TransactionAmount") != null && !jsonObj.get("TransactionAmount").isJsonNull()) {
        Transactionamount3.validateJsonElement(jsonObj.get("TransactionAmount"));
      }
      // validate the optional field `TransactionFee`
      if (jsonObj.get("TransactionFee") != null && !jsonObj.get("TransactionFee").isJsonNull()) {
        Transactionfee4.validateJsonElement(jsonObj.get("TransactionFee"));
      }
      if (!jsonObj.get("TransactionReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransactionReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TransactionReference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Repowerrequest1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Repowerrequest1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Repowerrequest1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Repowerrequest1.class));

       return (TypeAdapter<T>) new TypeAdapter<Repowerrequest1>() {
           @Override
           public void write(JsonWriter out, Repowerrequest1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Repowerrequest1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Repowerrequest1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Repowerrequest1
   * @throws IOException if the JSON string is invalid with respect to Repowerrequest1
   */
  public static Repowerrequest1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Repowerrequest1.class);
  }

  /**
   * Convert an instance of Repowerrequest1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

