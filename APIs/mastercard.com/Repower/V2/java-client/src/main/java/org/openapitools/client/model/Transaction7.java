/*
 * rePower
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Response8;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information for one transaction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:33.060481-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Transaction7 {
  public static final String SERIALIZED_NAME_NETWORK_REFERENCE_NUMBER = "NetworkReferenceNumber";
  @SerializedName(SERIALIZED_NAME_NETWORK_REFERENCE_NUMBER)
  private String networkReferenceNumber;

  public static final String SERIALIZED_NAME_RESPONSE = "Response";
  @SerializedName(SERIALIZED_NAME_RESPONSE)
  private Response8 response;

  public static final String SERIALIZED_NAME_SETTLEMENT_DATE = "SettlementDate";
  @SerializedName(SERIALIZED_NAME_SETTLEMENT_DATE)
  private String settlementDate;

  public static final String SERIALIZED_NAME_SUBMIT_DATE_TIME = "SubmitDateTime";
  @SerializedName(SERIALIZED_NAME_SUBMIT_DATE_TIME)
  private String submitDateTime;

  public static final String SERIALIZED_NAME_SYSTEM_TRACE_AUDIT_NUMBER = "SystemTraceAuditNumber";
  @SerializedName(SERIALIZED_NAME_SYSTEM_TRACE_AUDIT_NUMBER)
  private String systemTraceAuditNumber;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Transaction7() {
  }

  public Transaction7 networkReferenceNumber(String networkReferenceNumber) {
    this.networkReferenceNumber = networkReferenceNumber;
    return this;
  }

  /**
   * Network Reference Number that can be used for transaction inquiry. Details- Numeric, 9
   * @return networkReferenceNumber
   */
  @javax.annotation.Nullable
  public String getNetworkReferenceNumber() {
    return networkReferenceNumber;
  }

  public void setNetworkReferenceNumber(String networkReferenceNumber) {
    this.networkReferenceNumber = networkReferenceNumber;
  }


  public Transaction7 response(Response8 response) {
    this.response = response;
    return this;
  }

  /**
   * Get response
   * @return response
   */
  @javax.annotation.Nullable
  public Response8 getResponse() {
    return response;
  }

  public void setResponse(Response8 response) {
    this.response = response;
  }


  public Transaction7 settlementDate(String settlementDate) {
    this.settlementDate = settlementDate;
    return this;
  }

  /**
   * Date Funds will be transferred between the acquirer and issuer by Single Message System, in MMDD format
   * @return settlementDate
   */
  @javax.annotation.Nullable
  public String getSettlementDate() {
    return settlementDate;
  }

  public void setSettlementDate(String settlementDate) {
    this.settlementDate = settlementDate;
  }


  public Transaction7 submitDateTime(String submitDateTime) {
    this.submitDateTime = submitDateTime;
    return this;
  }

  /**
   * This is the time and date of the transaction submission, in the following format: &lt;date&gt;T&lt;time&gt;Z, where date&gt; is YYYY-MM-DD, &lt;time&gt; is HH:MM:SS
   * @return submitDateTime
   */
  @javax.annotation.Nullable
  public String getSubmitDateTime() {
    return submitDateTime;
  }

  public void setSubmitDateTime(String submitDateTime) {
    this.submitDateTime = submitDateTime;
  }


  public Transaction7 systemTraceAuditNumber(String systemTraceAuditNumber) {
    this.systemTraceAuditNumber = systemTraceAuditNumber;
    return this;
  }

  /**
   * Identifier assigned to each transaction by the rePower service. This identifier is unique for any single UTC date. Details- Numeric value, 6
   * @return systemTraceAuditNumber
   */
  @javax.annotation.Nullable
  public String getSystemTraceAuditNumber() {
    return systemTraceAuditNumber;
  }

  public void setSystemTraceAuditNumber(String systemTraceAuditNumber) {
    this.systemTraceAuditNumber = systemTraceAuditNumber;
  }


  public Transaction7 type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of transaction. Details- Alpha
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transaction7 transaction7 = (Transaction7) o;
    return Objects.equals(this.networkReferenceNumber, transaction7.networkReferenceNumber) &&
        Objects.equals(this.response, transaction7.response) &&
        Objects.equals(this.settlementDate, transaction7.settlementDate) &&
        Objects.equals(this.submitDateTime, transaction7.submitDateTime) &&
        Objects.equals(this.systemTraceAuditNumber, transaction7.systemTraceAuditNumber) &&
        Objects.equals(this.type, transaction7.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(networkReferenceNumber, response, settlementDate, submitDateTime, systemTraceAuditNumber, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transaction7 {\n");
    sb.append("    networkReferenceNumber: ").append(toIndentedString(networkReferenceNumber)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    settlementDate: ").append(toIndentedString(settlementDate)).append("\n");
    sb.append("    submitDateTime: ").append(toIndentedString(submitDateTime)).append("\n");
    sb.append("    systemTraceAuditNumber: ").append(toIndentedString(systemTraceAuditNumber)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("NetworkReferenceNumber");
    openapiFields.add("Response");
    openapiFields.add("SettlementDate");
    openapiFields.add("SubmitDateTime");
    openapiFields.add("SystemTraceAuditNumber");
    openapiFields.add("Type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Transaction7
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Transaction7.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Transaction7 is not found in the empty JSON string", Transaction7.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Transaction7.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Transaction7` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("NetworkReferenceNumber") != null && !jsonObj.get("NetworkReferenceNumber").isJsonNull()) && !jsonObj.get("NetworkReferenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NetworkReferenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NetworkReferenceNumber").toString()));
      }
      // validate the optional field `Response`
      if (jsonObj.get("Response") != null && !jsonObj.get("Response").isJsonNull()) {
        Response8.validateJsonElement(jsonObj.get("Response"));
      }
      if ((jsonObj.get("SettlementDate") != null && !jsonObj.get("SettlementDate").isJsonNull()) && !jsonObj.get("SettlementDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SettlementDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SettlementDate").toString()));
      }
      if ((jsonObj.get("SubmitDateTime") != null && !jsonObj.get("SubmitDateTime").isJsonNull()) && !jsonObj.get("SubmitDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SubmitDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SubmitDateTime").toString()));
      }
      if ((jsonObj.get("SystemTraceAuditNumber") != null && !jsonObj.get("SystemTraceAuditNumber").isJsonNull()) && !jsonObj.get("SystemTraceAuditNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SystemTraceAuditNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SystemTraceAuditNumber").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Transaction7.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Transaction7' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Transaction7> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Transaction7.class));

       return (TypeAdapter<T>) new TypeAdapter<Transaction7>() {
           @Override
           public void write(JsonWriter out, Transaction7 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Transaction7 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Transaction7 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Transaction7
   * @throws IOException if the JSON string is invalid with respect to Transaction7
   */
  public static Transaction7 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Transaction7.class);
  }

  /**
   * Convert an instance of Transaction7 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

