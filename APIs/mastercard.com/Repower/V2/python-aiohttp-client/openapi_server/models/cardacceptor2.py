# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Cardacceptor2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: str=None, name: str=None, postal_code: str=None, state: str=None):
        """Cardacceptor2 - a model defined in OpenAPI

        :param city: The city of this Cardacceptor2.
        :param country: The country of this Cardacceptor2.
        :param name: The name of this Cardacceptor2.
        :param postal_code: The postal_code of this Cardacceptor2.
        :param state: The state of this Cardacceptor2.
        """
        self.openapi_types = {
            'city': str,
            'country': str,
            'name': str,
            'postal_code': str,
            'state': str
        }

        self.attribute_map = {
            'city': 'City',
            'country': 'Country',
            'name': 'Name',
            'postal_code': 'PostalCode',
            'state': 'State'
        }

        self._city = city
        self._country = country
        self._name = name
        self._postal_code = postal_code
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Cardacceptor2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Cardacceptor_2 of this Cardacceptor2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this Cardacceptor2.

        City of merchant's address. Details- String, 1-13

        :return: The city of this Cardacceptor2.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Cardacceptor2.

        City of merchant's address. Details- String, 1-13

        :param city: The city of this Cardacceptor2.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def country(self):
        """Gets the country of this Cardacceptor2.

        The CountryIso3Code will be a three character value compliant with ISO 3166-1 and alpha-3 standards. Details- String, 3

        :return: The country of this Cardacceptor2.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Cardacceptor2.

        The CountryIso3Code will be a three character value compliant with ISO 3166-1 and alpha-3 standards. Details- String, 3

        :param country: The country of this Cardacceptor2.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def name(self):
        """Gets the name of this Cardacceptor2.

        Point of sale merchant's name. Details- String, 1-22

        :return: The name of this Cardacceptor2.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Cardacceptor2.

        Point of sale merchant's name. Details- String, 1-22

        :param name: The name of this Cardacceptor2.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def postal_code(self):
        """Gets the postal_code of this Cardacceptor2.

        The PostalCode is a value representing the zip code for the merchant's address. Details- String, 10

        :return: The postal_code of this Cardacceptor2.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Cardacceptor2.

        The PostalCode is a value representing the zip code for the merchant's address. Details- String, 10

        :param postal_code: The postal_code of this Cardacceptor2.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def state(self):
        """Gets the state of this Cardacceptor2.

        State of the merchant's address. Details- String, 2

        :return: The state of this Cardacceptor2.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Cardacceptor2.

        State of the merchant's address. Details- String, 2

        :param state: The state of this Cardacceptor2.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state
