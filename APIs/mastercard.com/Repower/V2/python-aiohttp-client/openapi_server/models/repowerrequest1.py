# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cardacceptor2 import Cardacceptor2
from openapi_server.models.transactionamount3 import Transactionamount3
from openapi_server.models.transactionfee4 import Transactionfee4
from openapi_server import util


class Repowerrequest1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_sender_information: str=None, card_acceptor: Cardacceptor2=None, card_number: str=None, card_sequence_number: str=None, channel: str=None, ica: str=None, iccemv_data: str=None, local_date: str=None, local_time: str=None, merchant_type: str=None, pos_card_data_terminal_input_capability_indicator: str=None, payment_initiation_channel: str=None, payment_pos_entry_mode: str=None, processor_id: str=None, receiver_track2_data: str=None, routing_and_transit_number: str=None, transaction_amount: Transactionamount3=None, transaction_fee: Transactionfee4=None, transaction_reference: str=None):
        """Repowerrequest1 - a model defined in OpenAPI

        :param additional_sender_information: The additional_sender_information of this Repowerrequest1.
        :param card_acceptor: The card_acceptor of this Repowerrequest1.
        :param card_number: The card_number of this Repowerrequest1.
        :param card_sequence_number: The card_sequence_number of this Repowerrequest1.
        :param channel: The channel of this Repowerrequest1.
        :param ica: The ica of this Repowerrequest1.
        :param iccemv_data: The iccemv_data of this Repowerrequest1.
        :param local_date: The local_date of this Repowerrequest1.
        :param local_time: The local_time of this Repowerrequest1.
        :param merchant_type: The merchant_type of this Repowerrequest1.
        :param pos_card_data_terminal_input_capability_indicator: The pos_card_data_terminal_input_capability_indicator of this Repowerrequest1.
        :param payment_initiation_channel: The payment_initiation_channel of this Repowerrequest1.
        :param payment_pos_entry_mode: The payment_pos_entry_mode of this Repowerrequest1.
        :param processor_id: The processor_id of this Repowerrequest1.
        :param receiver_track2_data: The receiver_track2_data of this Repowerrequest1.
        :param routing_and_transit_number: The routing_and_transit_number of this Repowerrequest1.
        :param transaction_amount: The transaction_amount of this Repowerrequest1.
        :param transaction_fee: The transaction_fee of this Repowerrequest1.
        :param transaction_reference: The transaction_reference of this Repowerrequest1.
        """
        self.openapi_types = {
            'additional_sender_information': str,
            'card_acceptor': Cardacceptor2,
            'card_number': str,
            'card_sequence_number': str,
            'channel': str,
            'ica': str,
            'iccemv_data': str,
            'local_date': str,
            'local_time': str,
            'merchant_type': str,
            'pos_card_data_terminal_input_capability_indicator': str,
            'payment_initiation_channel': str,
            'payment_pos_entry_mode': str,
            'processor_id': str,
            'receiver_track2_data': str,
            'routing_and_transit_number': str,
            'transaction_amount': Transactionamount3,
            'transaction_fee': Transactionfee4,
            'transaction_reference': str
        }

        self.attribute_map = {
            'additional_sender_information': 'AdditionalSenderInformation',
            'card_acceptor': 'CardAcceptor',
            'card_number': 'CardNumber',
            'card_sequence_number': 'CardSequenceNumber',
            'channel': 'Channel',
            'ica': 'ICA',
            'iccemv_data': 'ICCEMVData',
            'local_date': 'LocalDate',
            'local_time': 'LocalTime',
            'merchant_type': 'MerchantType',
            'pos_card_data_terminal_input_capability_indicator': 'POSCardDataTerminalInputCapabilityIndicator',
            'payment_initiation_channel': 'PaymentInitiationChannel',
            'payment_pos_entry_mode': 'PaymentPosEntryMode',
            'processor_id': 'ProcessorId',
            'receiver_track2_data': 'ReceiverTrack2Data',
            'routing_and_transit_number': 'RoutingAndTransitNumber',
            'transaction_amount': 'TransactionAmount',
            'transaction_fee': 'TransactionFee',
            'transaction_reference': 'TransactionReference'
        }

        self._additional_sender_information = additional_sender_information
        self._card_acceptor = card_acceptor
        self._card_number = card_number
        self._card_sequence_number = card_sequence_number
        self._channel = channel
        self._ica = ica
        self._iccemv_data = iccemv_data
        self._local_date = local_date
        self._local_time = local_time
        self._merchant_type = merchant_type
        self._pos_card_data_terminal_input_capability_indicator = pos_card_data_terminal_input_capability_indicator
        self._payment_initiation_channel = payment_initiation_channel
        self._payment_pos_entry_mode = payment_pos_entry_mode
        self._processor_id = processor_id
        self._receiver_track2_data = receiver_track2_data
        self._routing_and_transit_number = routing_and_transit_number
        self._transaction_amount = transaction_amount
        self._transaction_fee = transaction_fee
        self._transaction_reference = transaction_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Repowerrequest1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Repowerrequest_1 of this Repowerrequest1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_sender_information(self):
        """Gets the additional_sender_information of this Repowerrequest1.

         Contains additional sender information in the Financial Transaction.The first 20 digits will be telephone number(n-20), the next 8 digits will be Date of Birth(n-8)(MMDDYYYY)and 'Check' or 'Cash' needs to be populated next based on check load or cash load.  Details- String, Min 32 characters, Max 65 characters in Length

        :return: The additional_sender_information of this Repowerrequest1.
        :rtype: str
        """
        return self._additional_sender_information

    @additional_sender_information.setter
    def additional_sender_information(self, additional_sender_information):
        """Sets the additional_sender_information of this Repowerrequest1.

         Contains additional sender information in the Financial Transaction.The first 20 digits will be telephone number(n-20), the next 8 digits will be Date of Birth(n-8)(MMDDYYYY)and 'Check' or 'Cash' needs to be populated next based on check load or cash load.  Details- String, Min 32 characters, Max 65 characters in Length

        :param additional_sender_information: The additional_sender_information of this Repowerrequest1.
        :type additional_sender_information: str
        """

        self._additional_sender_information = additional_sender_information

    @property
    def card_acceptor(self):
        """Gets the card_acceptor of this Repowerrequest1.


        :return: The card_acceptor of this Repowerrequest1.
        :rtype: Cardacceptor2
        """
        return self._card_acceptor

    @card_acceptor.setter
    def card_acceptor(self, card_acceptor):
        """Sets the card_acceptor of this Repowerrequest1.


        :param card_acceptor: The card_acceptor of this Repowerrequest1.
        :type card_acceptor: Cardacceptor2
        """

        self._card_acceptor = card_acceptor

    @property
    def card_number(self):
        """Gets the card_number of this Repowerrequest1.

        Cardholder personal account number. Details- Numeric, 16 or 19, must pass LUHN MOD10 validation

        :return: The card_number of this Repowerrequest1.
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this Repowerrequest1.

        Cardholder personal account number. Details- Numeric, 16 or 19, must pass LUHN MOD10 validation

        :param card_number: The card_number of this Repowerrequest1.
        :type card_number: str
        """
        if card_number is None:
            raise ValueError("Invalid value for `card_number`, must not be `None`")

        self._card_number = card_number

    @property
    def card_sequence_number(self):
        """Gets the card_sequence_number of this Repowerrequest1.

        Card Sequence Number as part of PaymentPOS Entry mode Integrated Circuit and contactless M/Chip. It must be present for EMV,MDES or PayPass transactions (where POS Entry Mode = \"05x\" or \"07x\"). Details- Numeric, 3, The Possible values for Card Sequence Number are in the range 000–099

        :return: The card_sequence_number of this Repowerrequest1.
        :rtype: str
        """
        return self._card_sequence_number

    @card_sequence_number.setter
    def card_sequence_number(self, card_sequence_number):
        """Sets the card_sequence_number of this Repowerrequest1.

        Card Sequence Number as part of PaymentPOS Entry mode Integrated Circuit and contactless M/Chip. It must be present for EMV,MDES or PayPass transactions (where POS Entry Mode = \"05x\" or \"07x\"). Details- Numeric, 3, The Possible values for Card Sequence Number are in the range 000–099

        :param card_sequence_number: The card_sequence_number of this Repowerrequest1.
        :type card_sequence_number: str
        """

        self._card_sequence_number = card_sequence_number

    @property
    def channel(self):
        """Gets the channel of this Repowerrequest1.

        Origination channel for the rePower transaction as 'Attended POS' (P) or 'Web' (W).  Details- Alpha, 1, Constant P or W

        :return: The channel of this Repowerrequest1.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this Repowerrequest1.

        Origination channel for the rePower transaction as 'Attended POS' (P) or 'Web' (W).  Details- Alpha, 1, Constant P or W

        :param channel: The channel of this Repowerrequest1.
        :type channel: str
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")

        self._channel = channel

    @property
    def ica(self):
        """Gets the ica of this Repowerrequest1.

        ICA of acquiring institution. Details- Numeric, 4-6

        :return: The ica of this Repowerrequest1.
        :rtype: str
        """
        return self._ica

    @ica.setter
    def ica(self, ica):
        """Sets the ica of this Repowerrequest1.

        ICA of acquiring institution. Details- Numeric, 4-6

        :param ica: The ica of this Repowerrequest1.
        :type ica: str
        """
        if ica is None:
            raise ValueError("Invalid value for `ica`, must not be `None`")

        self._ica = ica

    @property
    def iccemv_data(self):
        """Gets the iccemv_data of this Repowerrequest1.

        Integrated Circuit Card (ICC) System related data. It must be present for EMV(Including paypass/MDES EMV) transactions. Details- String, 255. Please refer section 'ICCEMVData' for more details.

        :return: The iccemv_data of this Repowerrequest1.
        :rtype: str
        """
        return self._iccemv_data

    @iccemv_data.setter
    def iccemv_data(self, iccemv_data):
        """Sets the iccemv_data of this Repowerrequest1.

        Integrated Circuit Card (ICC) System related data. It must be present for EMV(Including paypass/MDES EMV) transactions. Details- String, 255. Please refer section 'ICCEMVData' for more details.

        :param iccemv_data: The iccemv_data of this Repowerrequest1.
        :type iccemv_data: str
        """

        self._iccemv_data = iccemv_data

    @property
    def local_date(self):
        """Gets the local_date of this Repowerrequest1.

        This is the local date for the location where the request is originating. Details- Numeric, 4, MMDD

        :return: The local_date of this Repowerrequest1.
        :rtype: str
        """
        return self._local_date

    @local_date.setter
    def local_date(self, local_date):
        """Sets the local_date of this Repowerrequest1.

        This is the local date for the location where the request is originating. Details- Numeric, 4, MMDD

        :param local_date: The local_date of this Repowerrequest1.
        :type local_date: str
        """
        if local_date is None:
            raise ValueError("Invalid value for `local_date`, must not be `None`")

        self._local_date = local_date

    @property
    def local_time(self):
        """Gets the local_time of this Repowerrequest1.

         This is the local time for the location where the request is originating. The format is military or twenty-four hour clock time. Details- Numeric, HHMMSS

        :return: The local_time of this Repowerrequest1.
        :rtype: str
        """
        return self._local_time

    @local_time.setter
    def local_time(self, local_time):
        """Sets the local_time of this Repowerrequest1.

         This is the local time for the location where the request is originating. The format is military or twenty-four hour clock time. Details- Numeric, HHMMSS

        :param local_time: The local_time of this Repowerrequest1.
        :type local_time: str
        """
        if local_time is None:
            raise ValueError("Invalid value for `local_time`, must not be `None`")

        self._local_time = local_time

    @property
    def merchant_type(self):
        """Gets the merchant_type of this Repowerrequest1.

        Merchant's type of business or Service will be represented as a member financial institution initiated rePower transaction (6532), or merchant initiated rePower transaction (6533). Details- Numeric, 4, constant 6532 or 6533

        :return: The merchant_type of this Repowerrequest1.
        :rtype: str
        """
        return self._merchant_type

    @merchant_type.setter
    def merchant_type(self, merchant_type):
        """Sets the merchant_type of this Repowerrequest1.

        Merchant's type of business or Service will be represented as a member financial institution initiated rePower transaction (6532), or merchant initiated rePower transaction (6533). Details- Numeric, 4, constant 6532 or 6533

        :param merchant_type: The merchant_type of this Repowerrequest1.
        :type merchant_type: str
        """
        if merchant_type is None:
            raise ValueError("Invalid value for `merchant_type`, must not be `None`")

        self._merchant_type = merchant_type

    @property
    def pos_card_data_terminal_input_capability_indicator(self):
        """Gets the pos_card_data_terminal_input_capability_indicator of this Repowerrequest1.

        Point of Service (POS) card data terminal input capability indicator. It must be present for EMV,MDES or PayPass transactions (where POS Entry Mode = \"05x\" or \"07x\" or \"91x\"). Details- Conditional, numeric, 1, The Possible values for POS card data terminal input capability indicator is 3 or 4.

        :return: The pos_card_data_terminal_input_capability_indicator of this Repowerrequest1.
        :rtype: str
        """
        return self._pos_card_data_terminal_input_capability_indicator

    @pos_card_data_terminal_input_capability_indicator.setter
    def pos_card_data_terminal_input_capability_indicator(self, pos_card_data_terminal_input_capability_indicator):
        """Sets the pos_card_data_terminal_input_capability_indicator of this Repowerrequest1.

        Point of Service (POS) card data terminal input capability indicator. It must be present for EMV,MDES or PayPass transactions (where POS Entry Mode = \"05x\" or \"07x\" or \"91x\"). Details- Conditional, numeric, 1, The Possible values for POS card data terminal input capability indicator is 3 or 4.

        :param pos_card_data_terminal_input_capability_indicator: The pos_card_data_terminal_input_capability_indicator of this Repowerrequest1.
        :type pos_card_data_terminal_input_capability_indicator: str
        """

        self._pos_card_data_terminal_input_capability_indicator = pos_card_data_terminal_input_capability_indicator

    @property
    def payment_initiation_channel(self):
        """Gets the payment_initiation_channel of this Repowerrequest1.

        Payment Initiation Channel is the device type used to identify mobile-initiated (m-commerce) or other non-card device initiated transactions. It's an option field for paypass transactions. Details-  Numeric, 2 digits. The possible values for Payment Initiation Channel is detailed out in section 'PaymentInitiationChannel'

        :return: The payment_initiation_channel of this Repowerrequest1.
        :rtype: str
        """
        return self._payment_initiation_channel

    @payment_initiation_channel.setter
    def payment_initiation_channel(self, payment_initiation_channel):
        """Sets the payment_initiation_channel of this Repowerrequest1.

        Payment Initiation Channel is the device type used to identify mobile-initiated (m-commerce) or other non-card device initiated transactions. It's an option field for paypass transactions. Details-  Numeric, 2 digits. The possible values for Payment Initiation Channel is detailed out in section 'PaymentInitiationChannel'

        :param payment_initiation_channel: The payment_initiation_channel of this Repowerrequest1.
        :type payment_initiation_channel: str
        """

        self._payment_initiation_channel = payment_initiation_channel

    @property
    def payment_pos_entry_mode(self):
        """Gets the payment_pos_entry_mode of this Repowerrequest1.

        PaymentPos Entry Mode to represent the POS Terminal PAN Entry Mode & Terminal PIN Entry Mode. This is required for EMV transactions and Paypass/MDES magstripe transactions. The first two digits indicate PAN entry mode and the last digit indicate PIN entry mode. Details- Numeric, 3. For PAN/PIN Entry mode details refer section 'PaymentPosEntryMode'

        :return: The payment_pos_entry_mode of this Repowerrequest1.
        :rtype: str
        """
        return self._payment_pos_entry_mode

    @payment_pos_entry_mode.setter
    def payment_pos_entry_mode(self, payment_pos_entry_mode):
        """Sets the payment_pos_entry_mode of this Repowerrequest1.

        PaymentPos Entry Mode to represent the POS Terminal PAN Entry Mode & Terminal PIN Entry Mode. This is required for EMV transactions and Paypass/MDES magstripe transactions. The first two digits indicate PAN entry mode and the last digit indicate PIN entry mode. Details- Numeric, 3. For PAN/PIN Entry mode details refer section 'PaymentPosEntryMode'

        :param payment_pos_entry_mode: The payment_pos_entry_mode of this Repowerrequest1.
        :type payment_pos_entry_mode: str
        """

        self._payment_pos_entry_mode = payment_pos_entry_mode

    @property
    def processor_id(self):
        """Gets the processor_id of this Repowerrequest1.

        Processor Id. Details- Numeric, 10

        :return: The processor_id of this Repowerrequest1.
        :rtype: str
        """
        return self._processor_id

    @processor_id.setter
    def processor_id(self, processor_id):
        """Sets the processor_id of this Repowerrequest1.

        Processor Id. Details- Numeric, 10

        :param processor_id: The processor_id of this Repowerrequest1.
        :type processor_id: str
        """
        if processor_id is None:
            raise ValueError("Invalid value for `processor_id`, must not be `None`")

        self._processor_id = processor_id

    @property
    def receiver_track2_data(self):
        """Gets the receiver_track2_data of this Repowerrequest1.

        Contains 8 sub fields to enhance the repower API to support EMV scripting data fields.It must be present for EMV, MDES or PayPass transactions(where POS Entry Mode is other than 010 or 011 or 012). Details- Conditional, String, Max 37 characters in Length. Refer section 'ReceiverTrack2Data'

        :return: The receiver_track2_data of this Repowerrequest1.
        :rtype: str
        """
        return self._receiver_track2_data

    @receiver_track2_data.setter
    def receiver_track2_data(self, receiver_track2_data):
        """Sets the receiver_track2_data of this Repowerrequest1.

        Contains 8 sub fields to enhance the repower API to support EMV scripting data fields.It must be present for EMV, MDES or PayPass transactions(where POS Entry Mode is other than 010 or 011 or 012). Details- Conditional, String, Max 37 characters in Length. Refer section 'ReceiverTrack2Data'

        :param receiver_track2_data: The receiver_track2_data of this Repowerrequest1.
        :type receiver_track2_data: str
        """

        self._receiver_track2_data = receiver_track2_data

    @property
    def routing_and_transit_number(self):
        """Gets the routing_and_transit_number of this Repowerrequest1.

        Routing and Transit number. Details- Numeric, 9

        :return: The routing_and_transit_number of this Repowerrequest1.
        :rtype: str
        """
        return self._routing_and_transit_number

    @routing_and_transit_number.setter
    def routing_and_transit_number(self, routing_and_transit_number):
        """Sets the routing_and_transit_number of this Repowerrequest1.

        Routing and Transit number. Details- Numeric, 9

        :param routing_and_transit_number: The routing_and_transit_number of this Repowerrequest1.
        :type routing_and_transit_number: str
        """
        if routing_and_transit_number is None:
            raise ValueError("Invalid value for `routing_and_transit_number`, must not be `None`")

        self._routing_and_transit_number = routing_and_transit_number

    @property
    def transaction_amount(self):
        """Gets the transaction_amount of this Repowerrequest1.


        :return: The transaction_amount of this Repowerrequest1.
        :rtype: Transactionamount3
        """
        return self._transaction_amount

    @transaction_amount.setter
    def transaction_amount(self, transaction_amount):
        """Sets the transaction_amount of this Repowerrequest1.


        :param transaction_amount: The transaction_amount of this Repowerrequest1.
        :type transaction_amount: Transactionamount3
        """

        self._transaction_amount = transaction_amount

    @property
    def transaction_fee(self):
        """Gets the transaction_fee of this Repowerrequest1.


        :return: The transaction_fee of this Repowerrequest1.
        :rtype: Transactionfee4
        """
        return self._transaction_fee

    @transaction_fee.setter
    def transaction_fee(self, transaction_fee):
        """Sets the transaction_fee of this Repowerrequest1.


        :param transaction_fee: The transaction_fee of this Repowerrequest1.
        :type transaction_fee: Transactionfee4
        """

        self._transaction_fee = transaction_fee

    @property
    def transaction_reference(self):
        """Gets the transaction_reference of this Repowerrequest1.

        Repower Transaction Reference Number. Provided by the Client submitting the rePower transfer request. Must be \"unique\" across all rePower transfer requests. Details- Numeric, length 19

        :return: The transaction_reference of this Repowerrequest1.
        :rtype: str
        """
        return self._transaction_reference

    @transaction_reference.setter
    def transaction_reference(self, transaction_reference):
        """Sets the transaction_reference of this Repowerrequest1.

        Repower Transaction Reference Number. Provided by the Client submitting the rePower transfer request. Must be \"unique\" across all rePower transfer requests. Details- Numeric, length 19

        :param transaction_reference: The transaction_reference of this Repowerrequest1.
        :type transaction_reference: str
        """
        if transaction_reference is None:
            raise ValueError("Invalid value for `transaction_reference`, must not be `None`")

        self._transaction_reference = transaction_reference
