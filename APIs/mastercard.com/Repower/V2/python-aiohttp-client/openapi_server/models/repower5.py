# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.accountbalance9 import Accountbalance9
from openapi_server.models.transactionhistory6 import Transactionhistory6
from openapi_server import util


class Repower5(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_balance: Accountbalance9=None, iccemv_data: str=None, pan_mapping_file_information: str=None, person_present_indicator: str=None, request_id: str=None, transaction_history: Transactionhistory6=None, transaction_reference: str=None):
        """Repower5 - a model defined in OpenAPI

        :param account_balance: The account_balance of this Repower5.
        :param iccemv_data: The iccemv_data of this Repower5.
        :param pan_mapping_file_information: The pan_mapping_file_information of this Repower5.
        :param person_present_indicator: The person_present_indicator of this Repower5.
        :param request_id: The request_id of this Repower5.
        :param transaction_history: The transaction_history of this Repower5.
        :param transaction_reference: The transaction_reference of this Repower5.
        """
        self.openapi_types = {
            'account_balance': Accountbalance9,
            'iccemv_data': str,
            'pan_mapping_file_information': str,
            'person_present_indicator': str,
            'request_id': str,
            'transaction_history': Transactionhistory6,
            'transaction_reference': str
        }

        self.attribute_map = {
            'account_balance': 'AccountBalance',
            'iccemv_data': 'ICCEMVData',
            'pan_mapping_file_information': 'PANMappingFileInformation',
            'person_present_indicator': 'PersonPresentIndicator',
            'request_id': 'RequestId',
            'transaction_history': 'TransactionHistory',
            'transaction_reference': 'TransactionReference'
        }

        self._account_balance = account_balance
        self._iccemv_data = iccemv_data
        self._pan_mapping_file_information = pan_mapping_file_information
        self._person_present_indicator = person_present_indicator
        self._request_id = request_id
        self._transaction_history = transaction_history
        self._transaction_reference = transaction_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Repower5':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Repower_5 of this Repower5.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_balance(self):
        """Gets the account_balance of this Repower5.


        :return: The account_balance of this Repower5.
        :rtype: Accountbalance9
        """
        return self._account_balance

    @account_balance.setter
    def account_balance(self, account_balance):
        """Sets the account_balance of this Repower5.


        :param account_balance: The account_balance of this Repower5.
        :type account_balance: Accountbalance9
        """

        self._account_balance = account_balance

    @property
    def iccemv_data(self):
        """Gets the iccemv_data of this Repower5.

         Integrated Circuit Card (ICC) System related data. It must be present for EMV transactions. Required DE 55 Subelements in /0200 and /0220 Messages. Details- Conditional, String, 255

        :return: The iccemv_data of this Repower5.
        :rtype: str
        """
        return self._iccemv_data

    @iccemv_data.setter
    def iccemv_data(self, iccemv_data):
        """Sets the iccemv_data of this Repower5.

         Integrated Circuit Card (ICC) System related data. It must be present for EMV transactions. Required DE 55 Subelements in /0200 and /0220 Messages. Details- Conditional, String, 255

        :param iccemv_data: The iccemv_data of this Repower5.
        :type iccemv_data: str
        """

        self._iccemv_data = iccemv_data

    @property
    def pan_mapping_file_information(self):
        """Gets the pan_mapping_file_information of this Repower5.

        PAN Mapping File Information will be avalable when the PAN is MDES token. Details- Conditional, String, 33

        :return: The pan_mapping_file_information of this Repower5.
        :rtype: str
        """
        return self._pan_mapping_file_information

    @pan_mapping_file_information.setter
    def pan_mapping_file_information(self, pan_mapping_file_information):
        """Sets the pan_mapping_file_information of this Repower5.

        PAN Mapping File Information will be avalable when the PAN is MDES token. Details- Conditional, String, 33

        :param pan_mapping_file_information: The pan_mapping_file_information of this Repower5.
        :type pan_mapping_file_information: str
        """

        self._pan_mapping_file_information = pan_mapping_file_information

    @property
    def person_present_indicator(self):
        """Gets the person_present_indicator of this Repower5.

        Person Present Indicator values is populated in repower response. Where the repower requests are  a. PaymentPosEntryMode (07*/09*)  b. CardSequenceNumber > 0  c. Transaction Amount > 0 It is a number value and size 2 digit

        :return: The person_present_indicator of this Repower5.
        :rtype: str
        """
        return self._person_present_indicator

    @person_present_indicator.setter
    def person_present_indicator(self, person_present_indicator):
        """Sets the person_present_indicator of this Repower5.

        Person Present Indicator values is populated in repower response. Where the repower requests are  a. PaymentPosEntryMode (07*/09*)  b. CardSequenceNumber > 0  c. Transaction Amount > 0 It is a number value and size 2 digit

        :param person_present_indicator: The person_present_indicator of this Repower5.
        :type person_present_indicator: str
        """

        self._person_present_indicator = person_present_indicator

    @property
    def request_id(self):
        """Gets the request_id of this Repower5.

        This is the unique identifier for API Web service request. Details- Numeric value, variable length between 1 and 19 digits, without zero padding

        :return: The request_id of this Repower5.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this Repower5.

        This is the unique identifier for API Web service request. Details- Numeric value, variable length between 1 and 19 digits, without zero padding

        :param request_id: The request_id of this Repower5.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def transaction_history(self):
        """Gets the transaction_history of this Repower5.


        :return: The transaction_history of this Repower5.
        :rtype: Transactionhistory6
        """
        return self._transaction_history

    @transaction_history.setter
    def transaction_history(self, transaction_history):
        """Sets the transaction_history of this Repower5.


        :param transaction_history: The transaction_history of this Repower5.
        :type transaction_history: Transactionhistory6
        """

        self._transaction_history = transaction_history

    @property
    def transaction_reference(self):
        """Gets the transaction_reference of this Repower5.

        This value represents the unique reference number for the rePower transaction provided by the merchant or acquiring institution. Details- Alphanumeric value, 19

        :return: The transaction_reference of this Repower5.
        :rtype: str
        """
        return self._transaction_reference

    @transaction_reference.setter
    def transaction_reference(self, transaction_reference):
        """Sets the transaction_reference of this Repower5.

        This value represents the unique reference number for the rePower transaction provided by the merchant or acquiring institution. Details- Alphanumeric value, 19

        :param transaction_reference: The transaction_reference of this Repower5.
        :type transaction_reference: str
        """

        self._transaction_reference = transaction_reference
