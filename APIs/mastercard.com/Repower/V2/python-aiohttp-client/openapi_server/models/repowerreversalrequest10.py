# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Repowerreversalrequest10(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ica: str=None, reversal_reason: str=None, transaction_reference: str=None):
        """Repowerreversalrequest10 - a model defined in OpenAPI

        :param ica: The ica of this Repowerreversalrequest10.
        :param reversal_reason: The reversal_reason of this Repowerreversalrequest10.
        :param transaction_reference: The transaction_reference of this Repowerreversalrequest10.
        """
        self.openapi_types = {
            'ica': str,
            'reversal_reason': str,
            'transaction_reference': str
        }

        self.attribute_map = {
            'ica': 'ICA',
            'reversal_reason': 'ReversalReason',
            'transaction_reference': 'TransactionReference'
        }

        self._ica = ica
        self._reversal_reason = reversal_reason
        self._transaction_reference = transaction_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Repowerreversalrequest10':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Repowerreversalrequest_10 of this Repowerreversalrequest10.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ica(self):
        """Gets the ica of this Repowerreversalrequest10.

        ICA of acquiring institution. Details- Numeric, 4-6

        :return: The ica of this Repowerreversalrequest10.
        :rtype: str
        """
        return self._ica

    @ica.setter
    def ica(self, ica):
        """Sets the ica of this Repowerreversalrequest10.

        ICA of acquiring institution. Details- Numeric, 4-6

        :param ica: The ica of this Repowerreversalrequest10.
        :type ica: str
        """
        if ica is None:
            raise ValueError("Invalid value for `ica`, must not be `None`")

        self._ica = ica

    @property
    def reversal_reason(self):
        """Gets the reversal_reason of this Repowerreversalrequest10.

        Brief description of reason for reversal. Details- String, 1-50

        :return: The reversal_reason of this Repowerreversalrequest10.
        :rtype: str
        """
        return self._reversal_reason

    @reversal_reason.setter
    def reversal_reason(self, reversal_reason):
        """Sets the reversal_reason of this Repowerreversalrequest10.

        Brief description of reason for reversal. Details- String, 1-50

        :param reversal_reason: The reversal_reason of this Repowerreversalrequest10.
        :type reversal_reason: str
        """
        if reversal_reason is None:
            raise ValueError("Invalid value for `reversal_reason`, must not be `None`")

        self._reversal_reason = reversal_reason

    @property
    def transaction_reference(self):
        """Gets the transaction_reference of this Repowerreversalrequest10.

        Unique reference number provided by the client in the \"original\" rePower transfer to be reversed. Details- Alphanumeric, 19

        :return: The transaction_reference of this Repowerreversalrequest10.
        :rtype: str
        """
        return self._transaction_reference

    @transaction_reference.setter
    def transaction_reference(self, transaction_reference):
        """Sets the transaction_reference of this Repowerreversalrequest10.

        Unique reference number provided by the client in the \"original\" rePower transfer to be reversed. Details- Alphanumeric, 19

        :param transaction_reference: The transaction_reference of this Repowerreversalrequest10.
        :type transaction_reference: str
        """
        if transaction_reference is None:
            raise ValueError("Invalid value for `transaction_reference`, must not be `None`")

        self._transaction_reference = transaction_reference
