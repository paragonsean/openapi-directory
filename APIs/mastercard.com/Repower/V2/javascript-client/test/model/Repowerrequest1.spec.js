/**
 * rePower
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RePower);
  }
}(this, function(expect, RePower) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new RePower.Repowerrequest1();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Repowerrequest1', function() {
    it('should create an instance of Repowerrequest1', function() {
      // uncomment below and update the code to test Repowerrequest1
      //var instance = new RePower.Repowerrequest1();
      //expect(instance).to.be.a(RePower.Repowerrequest1);
    });

    it('should have the property additionalSenderInformation (base name: "AdditionalSenderInformation")', function() {
      // uncomment below and update the code to test the property additionalSenderInformation
      //var instance = new RePower.Repowerrequest1();
      //expect(instance).to.be();
    });

    it('should have the property cardAcceptor (base name: "CardAcceptor")', function() {
      // uncomment below and update the code to test the property cardAcceptor
      //var instance = new RePower.Repowerrequest1();
      //expect(instance).to.be();
    });

    it('should have the property cardNumber (base name: "CardNumber")', function() {
      // uncomment below and update the code to test the property cardNumber
      //var instance = new RePower.Repowerrequest1();
      //expect(instance).to.be();
    });

    it('should have the property cardSequenceNumber (base name: "CardSequenceNumber")', function() {
      // uncomment below and update the code to test the property cardSequenceNumber
      //var instance = new RePower.Repowerrequest1();
      //expect(instance).to.be();
    });

    it('should have the property channel (base name: "Channel")', function() {
      // uncomment below and update the code to test the property channel
      //var instance = new RePower.Repowerrequest1();
      //expect(instance).to.be();
    });

    it('should have the property ICA (base name: "ICA")', function() {
      // uncomment below and update the code to test the property ICA
      //var instance = new RePower.Repowerrequest1();
      //expect(instance).to.be();
    });

    it('should have the property iCCEMVData (base name: "ICCEMVData")', function() {
      // uncomment below and update the code to test the property iCCEMVData
      //var instance = new RePower.Repowerrequest1();
      //expect(instance).to.be();
    });

    it('should have the property localDate (base name: "LocalDate")', function() {
      // uncomment below and update the code to test the property localDate
      //var instance = new RePower.Repowerrequest1();
      //expect(instance).to.be();
    });

    it('should have the property localTime (base name: "LocalTime")', function() {
      // uncomment below and update the code to test the property localTime
      //var instance = new RePower.Repowerrequest1();
      //expect(instance).to.be();
    });

    it('should have the property merchantType (base name: "MerchantType")', function() {
      // uncomment below and update the code to test the property merchantType
      //var instance = new RePower.Repowerrequest1();
      //expect(instance).to.be();
    });

    it('should have the property pOSCardDataTerminalInputCapabilityIndicator (base name: "POSCardDataTerminalInputCapabilityIndicator")', function() {
      // uncomment below and update the code to test the property pOSCardDataTerminalInputCapabilityIndicator
      //var instance = new RePower.Repowerrequest1();
      //expect(instance).to.be();
    });

    it('should have the property paymentInitiationChannel (base name: "PaymentInitiationChannel")', function() {
      // uncomment below and update the code to test the property paymentInitiationChannel
      //var instance = new RePower.Repowerrequest1();
      //expect(instance).to.be();
    });

    it('should have the property paymentPosEntryMode (base name: "PaymentPosEntryMode")', function() {
      // uncomment below and update the code to test the property paymentPosEntryMode
      //var instance = new RePower.Repowerrequest1();
      //expect(instance).to.be();
    });

    it('should have the property processorId (base name: "ProcessorId")', function() {
      // uncomment below and update the code to test the property processorId
      //var instance = new RePower.Repowerrequest1();
      //expect(instance).to.be();
    });

    it('should have the property receiverTrack2Data (base name: "ReceiverTrack2Data")', function() {
      // uncomment below and update the code to test the property receiverTrack2Data
      //var instance = new RePower.Repowerrequest1();
      //expect(instance).to.be();
    });

    it('should have the property routingAndTransitNumber (base name: "RoutingAndTransitNumber")', function() {
      // uncomment below and update the code to test the property routingAndTransitNumber
      //var instance = new RePower.Repowerrequest1();
      //expect(instance).to.be();
    });

    it('should have the property transactionAmount (base name: "TransactionAmount")', function() {
      // uncomment below and update the code to test the property transactionAmount
      //var instance = new RePower.Repowerrequest1();
      //expect(instance).to.be();
    });

    it('should have the property transactionFee (base name: "TransactionFee")', function() {
      // uncomment below and update the code to test the property transactionFee
      //var instance = new RePower.Repowerrequest1();
      //expect(instance).to.be();
    });

    it('should have the property transactionReference (base name: "TransactionReference")', function() {
      // uncomment below and update the code to test the property transactionReference
      //var instance = new RePower.Repowerrequest1();
      //expect(instance).to.be();
    });

  });

}));
