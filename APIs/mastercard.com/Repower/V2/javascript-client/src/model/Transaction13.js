/**
 * rePower
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Response14 from './Response14';

/**
 * The Transaction13 model module.
 * @module model/Transaction13
 * @version V2
 */
class Transaction13 {
    /**
     * Constructs a new <code>Transaction13</code>.
     * Information for one transaction
     * @alias module:model/Transaction13
     */
    constructor() { 
        
        Transaction13.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Transaction13</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transaction13} obj Optional instance to populate.
     * @return {module:model/Transaction13} The populated <code>Transaction13</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transaction13();

            if (data.hasOwnProperty('NetworkReferenceNumber')) {
                obj['NetworkReferenceNumber'] = ApiClient.convertToType(data['NetworkReferenceNumber'], 'String');
            }
            if (data.hasOwnProperty('Response')) {
                obj['Response'] = Response14.constructFromObject(data['Response']);
            }
            if (data.hasOwnProperty('SettlementDate')) {
                obj['SettlementDate'] = ApiClient.convertToType(data['SettlementDate'], 'String');
            }
            if (data.hasOwnProperty('SubmitDateTime')) {
                obj['SubmitDateTime'] = ApiClient.convertToType(data['SubmitDateTime'], 'String');
            }
            if (data.hasOwnProperty('SystemTraceAuditNumber')) {
                obj['SystemTraceAuditNumber'] = ApiClient.convertToType(data['SystemTraceAuditNumber'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Transaction13</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Transaction13</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['NetworkReferenceNumber'] && !(typeof data['NetworkReferenceNumber'] === 'string' || data['NetworkReferenceNumber'] instanceof String)) {
            throw new Error("Expected the field `NetworkReferenceNumber` to be a primitive type in the JSON string but got " + data['NetworkReferenceNumber']);
        }
        // validate the optional field `Response`
        if (data['Response']) { // data not null
          Response14.validateJSON(data['Response']);
        }
        // ensure the json data is a string
        if (data['SettlementDate'] && !(typeof data['SettlementDate'] === 'string' || data['SettlementDate'] instanceof String)) {
            throw new Error("Expected the field `SettlementDate` to be a primitive type in the JSON string but got " + data['SettlementDate']);
        }
        // ensure the json data is a string
        if (data['SubmitDateTime'] && !(typeof data['SubmitDateTime'] === 'string' || data['SubmitDateTime'] instanceof String)) {
            throw new Error("Expected the field `SubmitDateTime` to be a primitive type in the JSON string but got " + data['SubmitDateTime']);
        }
        // ensure the json data is a string
        if (data['SystemTraceAuditNumber'] && !(typeof data['SystemTraceAuditNumber'] === 'string' || data['SystemTraceAuditNumber'] instanceof String)) {
            throw new Error("Expected the field `SystemTraceAuditNumber` to be a primitive type in the JSON string but got " + data['SystemTraceAuditNumber']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }

        return true;
    }


}



/**
 * Network Reference Number that can be used for transaction inquiry. Details- Numeric, 9
 * @member {String} NetworkReferenceNumber
 */
Transaction13.prototype['NetworkReferenceNumber'] = undefined;

/**
 * @member {module:model/Response14} Response
 */
Transaction13.prototype['Response'] = undefined;

/**
 * Date Funds will be transferred between the acquirer and issuer by Single Message System, in MMDD format
 * @member {String} SettlementDate
 */
Transaction13.prototype['SettlementDate'] = undefined;

/**
 * This is the time and date of the transaction submission, in the following format: <date>T<time>Z, where date> is YYYY-MM-DD, <time> is HH:MM:SS
 * @member {String} SubmitDateTime
 */
Transaction13.prototype['SubmitDateTime'] = undefined;

/**
 * Identifier assigned to each transaction by the rePower service. This identifier is unique for any single UTC date. Details- Numeric value, 6
 * @member {String} SystemTraceAuditNumber
 */
Transaction13.prototype['SystemTraceAuditNumber'] = undefined;

/**
 * Type of transaction. Details- Alpha
 * @member {String} Type
 */
Transaction13.prototype['Type'] = undefined;






export default Transaction13;

