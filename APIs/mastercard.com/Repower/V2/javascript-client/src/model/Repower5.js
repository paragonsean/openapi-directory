/**
 * rePower
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Accountbalance9 from './Accountbalance9';
import Transactionhistory6 from './Transactionhistory6';

/**
 * The Repower5 model module.
 * @module model/Repower5
 * @version V2
 */
class Repower5 {
    /**
     * Constructs a new <code>Repower5</code>.
     * Response details
     * @alias module:model/Repower5
     */
    constructor() { 
        
        Repower5.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Repower5</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Repower5} obj Optional instance to populate.
     * @return {module:model/Repower5} The populated <code>Repower5</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Repower5();

            if (data.hasOwnProperty('AccountBalance')) {
                obj['AccountBalance'] = Accountbalance9.constructFromObject(data['AccountBalance']);
            }
            if (data.hasOwnProperty('ICCEMVData')) {
                obj['ICCEMVData'] = ApiClient.convertToType(data['ICCEMVData'], 'String');
            }
            if (data.hasOwnProperty('PANMappingFileInformation')) {
                obj['PANMappingFileInformation'] = ApiClient.convertToType(data['PANMappingFileInformation'], 'String');
            }
            if (data.hasOwnProperty('PersonPresentIndicator')) {
                obj['PersonPresentIndicator'] = ApiClient.convertToType(data['PersonPresentIndicator'], 'String');
            }
            if (data.hasOwnProperty('RequestId')) {
                obj['RequestId'] = ApiClient.convertToType(data['RequestId'], 'String');
            }
            if (data.hasOwnProperty('TransactionHistory')) {
                obj['TransactionHistory'] = Transactionhistory6.constructFromObject(data['TransactionHistory']);
            }
            if (data.hasOwnProperty('TransactionReference')) {
                obj['TransactionReference'] = ApiClient.convertToType(data['TransactionReference'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Repower5</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Repower5</code>.
     */
    static validateJSON(data) {
        // validate the optional field `AccountBalance`
        if (data['AccountBalance']) { // data not null
          Accountbalance9.validateJSON(data['AccountBalance']);
        }
        // ensure the json data is a string
        if (data['ICCEMVData'] && !(typeof data['ICCEMVData'] === 'string' || data['ICCEMVData'] instanceof String)) {
            throw new Error("Expected the field `ICCEMVData` to be a primitive type in the JSON string but got " + data['ICCEMVData']);
        }
        // ensure the json data is a string
        if (data['PANMappingFileInformation'] && !(typeof data['PANMappingFileInformation'] === 'string' || data['PANMappingFileInformation'] instanceof String)) {
            throw new Error("Expected the field `PANMappingFileInformation` to be a primitive type in the JSON string but got " + data['PANMappingFileInformation']);
        }
        // ensure the json data is a string
        if (data['PersonPresentIndicator'] && !(typeof data['PersonPresentIndicator'] === 'string' || data['PersonPresentIndicator'] instanceof String)) {
            throw new Error("Expected the field `PersonPresentIndicator` to be a primitive type in the JSON string but got " + data['PersonPresentIndicator']);
        }
        // ensure the json data is a string
        if (data['RequestId'] && !(typeof data['RequestId'] === 'string' || data['RequestId'] instanceof String)) {
            throw new Error("Expected the field `RequestId` to be a primitive type in the JSON string but got " + data['RequestId']);
        }
        // validate the optional field `TransactionHistory`
        if (data['TransactionHistory']) { // data not null
          Transactionhistory6.validateJSON(data['TransactionHistory']);
        }
        // ensure the json data is a string
        if (data['TransactionReference'] && !(typeof data['TransactionReference'] === 'string' || data['TransactionReference'] instanceof String)) {
            throw new Error("Expected the field `TransactionReference` to be a primitive type in the JSON string but got " + data['TransactionReference']);
        }

        return true;
    }


}



/**
 * @member {module:model/Accountbalance9} AccountBalance
 */
Repower5.prototype['AccountBalance'] = undefined;

/**
 *  Integrated Circuit Card (ICC) System related data. It must be present for EMV transactions. Required DE 55 Subelements in /0200 and /0220 Messages. Details- Conditional, String, 255
 * @member {String} ICCEMVData
 */
Repower5.prototype['ICCEMVData'] = undefined;

/**
 * PAN Mapping File Information will be avalable when the PAN is MDES token. Details- Conditional, String, 33
 * @member {String} PANMappingFileInformation
 */
Repower5.prototype['PANMappingFileInformation'] = undefined;

/**
 * Person Present Indicator values is populated in repower response. Where the repower requests are  a. PaymentPosEntryMode (07*_/09*)  b. CardSequenceNumber > 0  c. Transaction Amount > 0 It is a number value and size 2 digit
 * @member {String} PersonPresentIndicator
 */
Repower5.prototype['PersonPresentIndicator'] = undefined;

/**
 * This is the unique identifier for API Web service request. Details- Numeric value, variable length between 1 and 19 digits, without zero padding
 * @member {String} RequestId
 */
Repower5.prototype['RequestId'] = undefined;

/**
 * @member {module:model/Transactionhistory6} TransactionHistory
 */
Repower5.prototype['TransactionHistory'] = undefined;

/**
 * This value represents the unique reference number for the rePower transaction provided by the merchant or acquiring institution. Details- Alphanumeric value, 19
 * @member {String} TransactionReference
 */
Repower5.prototype['TransactionReference'] = undefined;






export default Repower5;

