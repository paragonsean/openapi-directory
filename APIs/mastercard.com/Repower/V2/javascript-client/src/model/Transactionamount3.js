/**
 * rePower
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Transactionamount3 model module.
 * @module model/Transactionamount3
 * @version V2
 */
class Transactionamount3 {
    /**
     * Constructs a new <code>Transactionamount3</code>.
     * Transaction amount value and currency
     * @alias module:model/Transactionamount3
     * @param currency {String} Global currency code used to represent the type of currency for the \"Value\" representing funds to be topped up. Details- numeric, 3, valid ISO 4217 numeric currency codes (leading zeros may be required.)
     * @param value {String} The amount to be loaded onto the account. Implied decimal point based on currency exponent. Details- Numeric, 2-12
     */
    constructor(currency, value) { 
        
        Transactionamount3.initialize(this, currency, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currency, value) { 
        obj['Currency'] = currency;
        obj['Value'] = value;
    }

    /**
     * Constructs a <code>Transactionamount3</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transactionamount3} obj Optional instance to populate.
     * @return {module:model/Transactionamount3} The populated <code>Transactionamount3</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transactionamount3();

            if (data.hasOwnProperty('Currency')) {
                obj['Currency'] = ApiClient.convertToType(data['Currency'], 'String');
            }
            if (data.hasOwnProperty('Value')) {
                obj['Value'] = ApiClient.convertToType(data['Value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Transactionamount3</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Transactionamount3</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Transactionamount3.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Currency'] && !(typeof data['Currency'] === 'string' || data['Currency'] instanceof String)) {
            throw new Error("Expected the field `Currency` to be a primitive type in the JSON string but got " + data['Currency']);
        }
        // ensure the json data is a string
        if (data['Value'] && !(typeof data['Value'] === 'string' || data['Value'] instanceof String)) {
            throw new Error("Expected the field `Value` to be a primitive type in the JSON string but got " + data['Value']);
        }

        return true;
    }


}

Transactionamount3.RequiredProperties = ["Currency", "Value"];

/**
 * Global currency code used to represent the type of currency for the \"Value\" representing funds to be topped up. Details- numeric, 3, valid ISO 4217 numeric currency codes (leading zeros may be required.)
 * @member {String} Currency
 */
Transactionamount3.prototype['Currency'] = undefined;

/**
 * The amount to be loaded onto the account. Implied decimal point based on currency exponent. Details- Numeric, 2-12
 * @member {String} Value
 */
Transactionamount3.prototype['Value'] = undefined;






export default Transactionamount3;

