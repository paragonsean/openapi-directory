/**
 * rePower
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Cardacceptor2 model module.
 * @module model/Cardacceptor2
 * @version V2
 */
class Cardacceptor2 {
    /**
     * Constructs a new <code>Cardacceptor2</code>.
     * Card Acceptor
     * @alias module:model/Cardacceptor2
     * @param city {String} City of merchant's address. Details- String, 1-13
     * @param country {String} The CountryIso3Code will be a three character value compliant with ISO 3166-1 and alpha-3 standards. Details- String, 3
     * @param name {String} Point of sale merchant's name. Details- String, 1-22
     * @param state {String} State of the merchant's address. Details- String, 2
     */
    constructor(city, country, name, state) { 
        
        Cardacceptor2.initialize(this, city, country, name, state);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, city, country, name, state) { 
        obj['City'] = city;
        obj['Country'] = country;
        obj['Name'] = name;
        obj['State'] = state;
    }

    /**
     * Constructs a <code>Cardacceptor2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Cardacceptor2} obj Optional instance to populate.
     * @return {module:model/Cardacceptor2} The populated <code>Cardacceptor2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Cardacceptor2();

            if (data.hasOwnProperty('City')) {
                obj['City'] = ApiClient.convertToType(data['City'], 'String');
            }
            if (data.hasOwnProperty('Country')) {
                obj['Country'] = ApiClient.convertToType(data['Country'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('PostalCode')) {
                obj['PostalCode'] = ApiClient.convertToType(data['PostalCode'], 'String');
            }
            if (data.hasOwnProperty('State')) {
                obj['State'] = ApiClient.convertToType(data['State'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Cardacceptor2</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Cardacceptor2</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Cardacceptor2.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['City'] && !(typeof data['City'] === 'string' || data['City'] instanceof String)) {
            throw new Error("Expected the field `City` to be a primitive type in the JSON string but got " + data['City']);
        }
        // ensure the json data is a string
        if (data['Country'] && !(typeof data['Country'] === 'string' || data['Country'] instanceof String)) {
            throw new Error("Expected the field `Country` to be a primitive type in the JSON string but got " + data['Country']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['PostalCode'] && !(typeof data['PostalCode'] === 'string' || data['PostalCode'] instanceof String)) {
            throw new Error("Expected the field `PostalCode` to be a primitive type in the JSON string but got " + data['PostalCode']);
        }
        // ensure the json data is a string
        if (data['State'] && !(typeof data['State'] === 'string' || data['State'] instanceof String)) {
            throw new Error("Expected the field `State` to be a primitive type in the JSON string but got " + data['State']);
        }

        return true;
    }


}

Cardacceptor2.RequiredProperties = ["City", "Country", "Name", "State"];

/**
 * City of merchant's address. Details- String, 1-13
 * @member {String} City
 */
Cardacceptor2.prototype['City'] = undefined;

/**
 * The CountryIso3Code will be a three character value compliant with ISO 3166-1 and alpha-3 standards. Details- String, 3
 * @member {String} Country
 */
Cardacceptor2.prototype['Country'] = undefined;

/**
 * Point of sale merchant's name. Details- String, 1-22
 * @member {String} Name
 */
Cardacceptor2.prototype['Name'] = undefined;

/**
 * The PostalCode is a value representing the zip code for the merchant's address. Details- String, 10
 * @member {String} PostalCode
 */
Cardacceptor2.prototype['PostalCode'] = undefined;

/**
 * State of the merchant's address. Details- String, 2
 * @member {String} State
 */
Cardacceptor2.prototype['State'] = undefined;






export default Cardacceptor2;

