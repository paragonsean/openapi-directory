/*
 * MasterCard ABU API
 * Mastercard ABU API
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AbuDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:11.500532-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AbuDTO {
  public static final String SERIALIZED_NAME_DISCRETIONARY_DATA = "discretionaryData";
  @SerializedName(SERIALIZED_NAME_DISCRETIONARY_DATA)
  private String discretionaryData;

  public static final String SERIALIZED_NAME_ICA = "ica";
  @SerializedName(SERIALIZED_NAME_ICA)
  private String ica;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchantId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_OLD_ACCOUNT_NUMBER = "oldAccountNumber";
  @SerializedName(SERIALIZED_NAME_OLD_ACCOUNT_NUMBER)
  private String oldAccountNumber;

  public static final String SERIALIZED_NAME_OLD_EXPIRATION_DATE = "oldExpirationDate";
  @SerializedName(SERIALIZED_NAME_OLD_EXPIRATION_DATE)
  private String oldExpirationDate;

  public static final String SERIALIZED_NAME_SUB_MERCHANT_ID = "subMerchantId";
  @SerializedName(SERIALIZED_NAME_SUB_MERCHANT_ID)
  private String subMerchantId;

  public static final String SERIALIZED_NAME_SUBSCRIBE = "subscribe";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBE)
  private String subscribe;

  public AbuDTO() {
  }

  public AbuDTO discretionaryData(String discretionaryData) {
    this.discretionaryData = discretionaryData;
    return this;
  }

  /**
   * Optional data that can be used by the requested for matching to the original inquiry.
   * @return discretionaryData
   */
  @javax.annotation.Nullable
  public String getDiscretionaryData() {
    return discretionaryData;
  }

  public void setDiscretionaryData(String discretionaryData) {
    this.discretionaryData = discretionaryData;
  }


  public AbuDTO ica(String ica) {
    this.ica = ica;
    return this;
  }

  /**
   * &lt;p class&#x3D;&#39;suffix-required&#39; style&#x3D;&#39;margin-bottom:5px&#39;&gt;[This field is required when the multiple ICAs are registered under the same client key.]&lt;/p&gt;Data that can be used to inform the ICA number: Interbank Card Association.
   * @return ica
   */
  @javax.annotation.Nullable
  public String getIca() {
    return ica;
  }

  public void setIca(String ica) {
    this.ica = ica;
  }


  public AbuDTO merchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  /**
   * Registered merchant ID that is mapped to the Customer ID.
   * @return merchantId
   */
  @javax.annotation.Nonnull
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public AbuDTO oldAccountNumber(String oldAccountNumber) {
    this.oldAccountNumber = oldAccountNumber;
    return this;
  }

  /**
   * Account number on file provided by merchant.
   * @return oldAccountNumber
   */
  @javax.annotation.Nonnull
  public String getOldAccountNumber() {
    return oldAccountNumber;
  }

  public void setOldAccountNumber(String oldAccountNumber) {
    this.oldAccountNumber = oldAccountNumber;
  }


  public AbuDTO oldExpirationDate(String oldExpirationDate) {
    this.oldExpirationDate = oldExpirationDate;
    return this;
  }

  /**
   * Account number expiration date on file provided by merchant that must be in MMYY format.
   * @return oldExpirationDate
   */
  @javax.annotation.Nonnull
  public String getOldExpirationDate() {
    return oldExpirationDate;
  }

  public void setOldExpirationDate(String oldExpirationDate) {
    this.oldExpirationDate = oldExpirationDate;
  }


  public AbuDTO subMerchantId(String subMerchantId) {
    this.subMerchantId = subMerchantId;
    return this;
  }

  /**
   * Optionally populated when the merchant ID is actually a previously populated payment facilitator or payment aggregator.
   * @return subMerchantId
   */
  @javax.annotation.Nullable
  public String getSubMerchantId() {
    return subMerchantId;
  }

  public void setSubMerchantId(String subMerchantId) {
    this.subMerchantId = subMerchantId;
  }


  public AbuDTO subscribe(String subscribe) {
    this.subscribe = subscribe;
    return this;
  }

  /**
   * &lt;p class&#x3D;\&quot;suffix-required\&quot; style&#x3D;\&quot;margin-bottom:5px\&quot;&gt;[Field used by Push Model only - REQUIRED]&lt;/p&gt;Optional data that can be used to subscribe, un-subscribe or query subscription status for PAN updates. Valid values are \&quot;subscribe\&quot;, \&quot;un-subscribe\&quot; and \&quot;query\&quot;.
   * @return subscribe
   */
  @javax.annotation.Nullable
  public String getSubscribe() {
    return subscribe;
  }

  public void setSubscribe(String subscribe) {
    this.subscribe = subscribe;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbuDTO abuDTO = (AbuDTO) o;
    return Objects.equals(this.discretionaryData, abuDTO.discretionaryData) &&
        Objects.equals(this.ica, abuDTO.ica) &&
        Objects.equals(this.merchantId, abuDTO.merchantId) &&
        Objects.equals(this.oldAccountNumber, abuDTO.oldAccountNumber) &&
        Objects.equals(this.oldExpirationDate, abuDTO.oldExpirationDate) &&
        Objects.equals(this.subMerchantId, abuDTO.subMerchantId) &&
        Objects.equals(this.subscribe, abuDTO.subscribe);
  }

  @Override
  public int hashCode() {
    return Objects.hash(discretionaryData, ica, merchantId, oldAccountNumber, oldExpirationDate, subMerchantId, subscribe);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbuDTO {\n");
    sb.append("    discretionaryData: ").append(toIndentedString(discretionaryData)).append("\n");
    sb.append("    ica: ").append(toIndentedString(ica)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    oldAccountNumber: ").append(toIndentedString(oldAccountNumber)).append("\n");
    sb.append("    oldExpirationDate: ").append(toIndentedString(oldExpirationDate)).append("\n");
    sb.append("    subMerchantId: ").append(toIndentedString(subMerchantId)).append("\n");
    sb.append("    subscribe: ").append(toIndentedString(subscribe)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("discretionaryData");
    openapiFields.add("ica");
    openapiFields.add("merchantId");
    openapiFields.add("oldAccountNumber");
    openapiFields.add("oldExpirationDate");
    openapiFields.add("subMerchantId");
    openapiFields.add("subscribe");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("merchantId");
    openapiRequiredFields.add("oldAccountNumber");
    openapiRequiredFields.add("oldExpirationDate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AbuDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AbuDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AbuDTO is not found in the empty JSON string", AbuDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AbuDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AbuDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AbuDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("discretionaryData") != null && !jsonObj.get("discretionaryData").isJsonNull()) && !jsonObj.get("discretionaryData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discretionaryData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discretionaryData").toString()));
      }
      if ((jsonObj.get("ica") != null && !jsonObj.get("ica").isJsonNull()) && !jsonObj.get("ica").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ica` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ica").toString()));
      }
      if (!jsonObj.get("merchantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantId").toString()));
      }
      if (!jsonObj.get("oldAccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oldAccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oldAccountNumber").toString()));
      }
      if (!jsonObj.get("oldExpirationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oldExpirationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oldExpirationDate").toString()));
      }
      if ((jsonObj.get("subMerchantId") != null && !jsonObj.get("subMerchantId").isJsonNull()) && !jsonObj.get("subMerchantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subMerchantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subMerchantId").toString()));
      }
      if ((jsonObj.get("subscribe") != null && !jsonObj.get("subscribe").isJsonNull()) && !jsonObj.get("subscribe").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscribe` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscribe").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AbuDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AbuDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AbuDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AbuDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<AbuDTO>() {
           @Override
           public void write(JsonWriter out, AbuDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AbuDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AbuDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AbuDTO
   * @throws IOException if the JSON string is invalid with respect to AbuDTO
   */
  public static AbuDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AbuDTO.class);
  }

  /**
   * Convert an instance of AbuDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

