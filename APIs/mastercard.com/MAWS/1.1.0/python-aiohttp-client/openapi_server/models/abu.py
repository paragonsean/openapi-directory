# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.abu_dto import AbuDTO
from openapi_server import util


class ABU(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, jsonrpc: str=None, method: str=None, params: AbuDTO=None):
        """ABU - a model defined in OpenAPI

        :param id: The id of this ABU.
        :param jsonrpc: The jsonrpc of this ABU.
        :param method: The method of this ABU.
        :param params: The params of this ABU.
        """
        self.openapi_types = {
            'id': str,
            'jsonrpc': str,
            'method': str,
            'params': AbuDTO
        }

        self.attribute_map = {
            'id': 'id',
            'jsonrpc': 'jsonrpc',
            'method': 'method',
            'params': 'params'
        }

        self._id = id
        self._jsonrpc = jsonrpc
        self._method = method
        self._params = params

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ABU':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ABU of this ABU.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ABU.

        An identifier established by the Client that MUST contain a String, Number, or NULL value if included.

        :return: The id of this ABU.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ABU.

        An identifier established by the Client that MUST contain a String, Number, or NULL value if included.

        :param id: The id of this ABU.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def jsonrpc(self):
        """Gets the jsonrpc of this ABU.

        A String specifying the version of the JSON-RPC protocol. MUST be exactly \"2.0\".

        :return: The jsonrpc of this ABU.
        :rtype: str
        """
        return self._jsonrpc

    @jsonrpc.setter
    def jsonrpc(self, jsonrpc):
        """Sets the jsonrpc of this ABU.

        A String specifying the version of the JSON-RPC protocol. MUST be exactly \"2.0\".

        :param jsonrpc: The jsonrpc of this ABU.
        :type jsonrpc: str
        """

        self._jsonrpc = jsonrpc

    @property
    def method(self):
        """Gets the method of this ABU.

        A String containing the name of the method to be invoked.

        :return: The method of this ABU.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this ABU.

        A String containing the name of the method to be invoked.

        :param method: The method of this ABU.
        :type method: str
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")

        self._method = method

    @property
    def params(self):
        """Gets the params of this ABU.


        :return: The params of this ABU.
        :rtype: AbuDTO
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this ABU.


        :param params: The params of this ABU.
        :type params: AbuDTO
        """
        if params is None:
            raise ValueError("Invalid value for `params`, must not be `None`")

        self._params = params
