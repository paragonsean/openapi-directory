# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AbuResultDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, discretionary_data: str=None, ica: str=None, merchant_id: str=None, new_account_number: str=None, new_expiration_date: str=None, old_account_number: str=None, old_expiration_date: str=None, reason_identifier: str=None, response_indicator: str=None, sub_merchant_id: str=None, subscription_identifier: str=None, subscription_indicator: str=None):
        """AbuResultDTO - a model defined in OpenAPI

        :param discretionary_data: The discretionary_data of this AbuResultDTO.
        :param ica: The ica of this AbuResultDTO.
        :param merchant_id: The merchant_id of this AbuResultDTO.
        :param new_account_number: The new_account_number of this AbuResultDTO.
        :param new_expiration_date: The new_expiration_date of this AbuResultDTO.
        :param old_account_number: The old_account_number of this AbuResultDTO.
        :param old_expiration_date: The old_expiration_date of this AbuResultDTO.
        :param reason_identifier: The reason_identifier of this AbuResultDTO.
        :param response_indicator: The response_indicator of this AbuResultDTO.
        :param sub_merchant_id: The sub_merchant_id of this AbuResultDTO.
        :param subscription_identifier: The subscription_identifier of this AbuResultDTO.
        :param subscription_indicator: The subscription_indicator of this AbuResultDTO.
        """
        self.openapi_types = {
            'discretionary_data': str,
            'ica': str,
            'merchant_id': str,
            'new_account_number': str,
            'new_expiration_date': str,
            'old_account_number': str,
            'old_expiration_date': str,
            'reason_identifier': str,
            'response_indicator': str,
            'sub_merchant_id': str,
            'subscription_identifier': str,
            'subscription_indicator': str
        }

        self.attribute_map = {
            'discretionary_data': 'discretionaryData',
            'ica': 'ica',
            'merchant_id': 'merchantId',
            'new_account_number': 'newAccountNumber',
            'new_expiration_date': 'newExpirationDate',
            'old_account_number': 'oldAccountNumber',
            'old_expiration_date': 'oldExpirationDate',
            'reason_identifier': 'reasonIdentifier',
            'response_indicator': 'responseIndicator',
            'sub_merchant_id': 'subMerchantId',
            'subscription_identifier': 'subscriptionIdentifier',
            'subscription_indicator': 'subscriptionIndicator'
        }

        self._discretionary_data = discretionary_data
        self._ica = ica
        self._merchant_id = merchant_id
        self._new_account_number = new_account_number
        self._new_expiration_date = new_expiration_date
        self._old_account_number = old_account_number
        self._old_expiration_date = old_expiration_date
        self._reason_identifier = reason_identifier
        self._response_indicator = response_indicator
        self._sub_merchant_id = sub_merchant_id
        self._subscription_identifier = subscription_identifier
        self._subscription_indicator = subscription_indicator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AbuResultDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AbuResultDTO of this AbuResultDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def discretionary_data(self):
        """Gets the discretionary_data of this AbuResultDTO.

        Discretionary data as in the request.

        :return: The discretionary_data of this AbuResultDTO.
        :rtype: str
        """
        return self._discretionary_data

    @discretionary_data.setter
    def discretionary_data(self, discretionary_data):
        """Sets the discretionary_data of this AbuResultDTO.

        Discretionary data as in the request.

        :param discretionary_data: The discretionary_data of this AbuResultDTO.
        :type discretionary_data: str
        """
        if discretionary_data is not None and len(discretionary_data) > 10:
            raise ValueError("Invalid value for `discretionary_data`, length must be less than or equal to `10`")
        if discretionary_data is not None and len(discretionary_data) < 0:
            raise ValueError("Invalid value for `discretionary_data`, length must be greater than or equal to `0`")

        self._discretionary_data = discretionary_data

    @property
    def ica(self):
        """Gets the ica of this AbuResultDTO.

        ICA number as in the request.

        :return: The ica of this AbuResultDTO.
        :rtype: str
        """
        return self._ica

    @ica.setter
    def ica(self, ica):
        """Sets the ica of this AbuResultDTO.

        ICA number as in the request.

        :param ica: The ica of this AbuResultDTO.
        :type ica: str
        """
        if ica is not None and len(ica) > 11:
            raise ValueError("Invalid value for `ica`, length must be less than or equal to `11`")
        if ica is not None and len(ica) < 0:
            raise ValueError("Invalid value for `ica`, length must be greater than or equal to `0`")

        self._ica = ica

    @property
    def merchant_id(self):
        """Gets the merchant_id of this AbuResultDTO.

        Merchant ID as in the request.

        :return: The merchant_id of this AbuResultDTO.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this AbuResultDTO.

        Merchant ID as in the request.

        :param merchant_id: The merchant_id of this AbuResultDTO.
        :type merchant_id: str
        """
        if merchant_id is not None and len(merchant_id) > 15:
            raise ValueError("Invalid value for `merchant_id`, length must be less than or equal to `15`")
        if merchant_id is not None and len(merchant_id) < 15:
            raise ValueError("Invalid value for `merchant_id`, length must be greater than or equal to `15`")

        self._merchant_id = merchant_id

    @property
    def new_account_number(self):
        """Gets the new_account_number of this AbuResultDTO.

        New account number.

        :return: The new_account_number of this AbuResultDTO.
        :rtype: str
        """
        return self._new_account_number

    @new_account_number.setter
    def new_account_number(self, new_account_number):
        """Sets the new_account_number of this AbuResultDTO.

        New account number.

        :param new_account_number: The new_account_number of this AbuResultDTO.
        :type new_account_number: str
        """
        if new_account_number is not None and len(new_account_number) > 19:
            raise ValueError("Invalid value for `new_account_number`, length must be less than or equal to `19`")
        if new_account_number is not None and len(new_account_number) < 16:
            raise ValueError("Invalid value for `new_account_number`, length must be greater than or equal to `16`")

        self._new_account_number = new_account_number

    @property
    def new_expiration_date(self):
        """Gets the new_expiration_date of this AbuResultDTO.

        New account number expiration date, in MMYY format.

        :return: The new_expiration_date of this AbuResultDTO.
        :rtype: str
        """
        return self._new_expiration_date

    @new_expiration_date.setter
    def new_expiration_date(self, new_expiration_date):
        """Sets the new_expiration_date of this AbuResultDTO.

        New account number expiration date, in MMYY format.

        :param new_expiration_date: The new_expiration_date of this AbuResultDTO.
        :type new_expiration_date: str
        """
        if new_expiration_date is not None and len(new_expiration_date) > 4:
            raise ValueError("Invalid value for `new_expiration_date`, length must be less than or equal to `4`")
        if new_expiration_date is not None and len(new_expiration_date) < 4:
            raise ValueError("Invalid value for `new_expiration_date`, length must be greater than or equal to `4`")

        self._new_expiration_date = new_expiration_date

    @property
    def old_account_number(self):
        """Gets the old_account_number of this AbuResultDTO.

        Account number on file as in the request.

        :return: The old_account_number of this AbuResultDTO.
        :rtype: str
        """
        return self._old_account_number

    @old_account_number.setter
    def old_account_number(self, old_account_number):
        """Sets the old_account_number of this AbuResultDTO.

        Account number on file as in the request.

        :param old_account_number: The old_account_number of this AbuResultDTO.
        :type old_account_number: str
        """
        if old_account_number is not None and len(old_account_number) > 19:
            raise ValueError("Invalid value for `old_account_number`, length must be less than or equal to `19`")
        if old_account_number is not None and len(old_account_number) < 16:
            raise ValueError("Invalid value for `old_account_number`, length must be greater than or equal to `16`")

        self._old_account_number = old_account_number

    @property
    def old_expiration_date(self):
        """Gets the old_expiration_date of this AbuResultDTO.

        Expiration date on file as in the request.

        :return: The old_expiration_date of this AbuResultDTO.
        :rtype: str
        """
        return self._old_expiration_date

    @old_expiration_date.setter
    def old_expiration_date(self, old_expiration_date):
        """Sets the old_expiration_date of this AbuResultDTO.

        Expiration date on file as in the request.

        :param old_expiration_date: The old_expiration_date of this AbuResultDTO.
        :type old_expiration_date: str
        """
        if old_expiration_date is not None and len(old_expiration_date) > 4:
            raise ValueError("Invalid value for `old_expiration_date`, length must be less than or equal to `4`")
        if old_expiration_date is not None and len(old_expiration_date) < 4:
            raise ValueError("Invalid value for `old_expiration_date`, length must be greater than or equal to `4`")

        self._old_expiration_date = old_expiration_date

    @property
    def reason_identifier(self):
        """Gets the reason_identifier of this AbuResultDTO.

        Response Type based on requested account.

        :return: The reason_identifier of this AbuResultDTO.
        :rtype: str
        """
        return self._reason_identifier

    @reason_identifier.setter
    def reason_identifier(self, reason_identifier):
        """Sets the reason_identifier of this AbuResultDTO.

        Response Type based on requested account.

        :param reason_identifier: The reason_identifier of this AbuResultDTO.
        :type reason_identifier: str
        """
        if reason_identifier is not None and len(reason_identifier) > 6:
            raise ValueError("Invalid value for `reason_identifier`, length must be less than or equal to `6`")

        self._reason_identifier = reason_identifier

    @property
    def response_indicator(self):
        """Gets the response_indicator of this AbuResultDTO.

        One character additional data, returned bases on  reasonIdentifier.(Note- ResponseIndicator displayed only when ReasonIdentifier is VALID or UNKNWN)

        :return: The response_indicator of this AbuResultDTO.
        :rtype: str
        """
        return self._response_indicator

    @response_indicator.setter
    def response_indicator(self, response_indicator):
        """Sets the response_indicator of this AbuResultDTO.

        One character additional data, returned bases on  reasonIdentifier.(Note- ResponseIndicator displayed only when ReasonIdentifier is VALID or UNKNWN)

        :param response_indicator: The response_indicator of this AbuResultDTO.
        :type response_indicator: str
        """
        if response_indicator is not None and len(response_indicator) > 1:
            raise ValueError("Invalid value for `response_indicator`, length must be less than or equal to `1`")
        if response_indicator is not None and len(response_indicator) < 1:
            raise ValueError("Invalid value for `response_indicator`, length must be greater than or equal to `1`")

        self._response_indicator = response_indicator

    @property
    def sub_merchant_id(self):
        """Gets the sub_merchant_id of this AbuResultDTO.

        SubMerchantID as in the request.

        :return: The sub_merchant_id of this AbuResultDTO.
        :rtype: str
        """
        return self._sub_merchant_id

    @sub_merchant_id.setter
    def sub_merchant_id(self, sub_merchant_id):
        """Sets the sub_merchant_id of this AbuResultDTO.

        SubMerchantID as in the request.

        :param sub_merchant_id: The sub_merchant_id of this AbuResultDTO.
        :type sub_merchant_id: str
        """
        if sub_merchant_id is not None and len(sub_merchant_id) > 15:
            raise ValueError("Invalid value for `sub_merchant_id`, length must be less than or equal to `15`")
        if sub_merchant_id is not None and len(sub_merchant_id) < 15:
            raise ValueError("Invalid value for `sub_merchant_id`, length must be greater than or equal to `15`")

        self._sub_merchant_id = sub_merchant_id

    @property
    def subscription_identifier(self):
        """Gets the subscription_identifier of this AbuResultDTO.

        <p class=\"suffix-required\" style=\"margin-bottom:5px\">[Field used by Push Model only]</p> Response Type based on the status of subscribe/un-subscribe or query subscription status for PAN.

        :return: The subscription_identifier of this AbuResultDTO.
        :rtype: str
        """
        return self._subscription_identifier

    @subscription_identifier.setter
    def subscription_identifier(self, subscription_identifier):
        """Sets the subscription_identifier of this AbuResultDTO.

        <p class=\"suffix-required\" style=\"margin-bottom:5px\">[Field used by Push Model only]</p> Response Type based on the status of subscribe/un-subscribe or query subscription status for PAN.

        :param subscription_identifier: The subscription_identifier of this AbuResultDTO.
        :type subscription_identifier: str
        """
        if subscription_identifier is not None and len(subscription_identifier) > 70:
            raise ValueError("Invalid value for `subscription_identifier`, length must be less than or equal to `70`")

        self._subscription_identifier = subscription_identifier

    @property
    def subscription_indicator(self):
        """Gets the subscription_indicator of this AbuResultDTO.

        <p class=\"suffix-required\" style=\"margin-bottom:5px\">[Field used by Push Model only]</p> One character additional data, returned based on subscriptionIdentifier:<ul><li>\"S\" for success</li><li>\"F\" for failures</li><li>\"T\" for token results.</li></ul>

        :return: The subscription_indicator of this AbuResultDTO.
        :rtype: str
        """
        return self._subscription_indicator

    @subscription_indicator.setter
    def subscription_indicator(self, subscription_indicator):
        """Sets the subscription_indicator of this AbuResultDTO.

        <p class=\"suffix-required\" style=\"margin-bottom:5px\">[Field used by Push Model only]</p> One character additional data, returned based on subscriptionIdentifier:<ul><li>\"S\" for success</li><li>\"F\" for failures</li><li>\"T\" for token results.</li></ul>

        :param subscription_indicator: The subscription_indicator of this AbuResultDTO.
        :type subscription_indicator: str
        """
        if subscription_indicator is not None and len(subscription_indicator) > 1:
            raise ValueError("Invalid value for `subscription_indicator`, length must be less than or equal to `1`")
        if subscription_indicator is not None and len(subscription_indicator) < 1:
            raise ValueError("Invalid value for `subscription_indicator`, length must be greater than or equal to `1`")

        self._subscription_indicator = subscription_indicator
