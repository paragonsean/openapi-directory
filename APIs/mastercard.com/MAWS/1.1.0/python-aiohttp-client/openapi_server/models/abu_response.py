# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.abu_result_dto import AbuResultDTO
from openapi_server import util


class AbuResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, jsonrpc: str=None, result: AbuResultDTO=None, status: bool=None):
        """AbuResponse - a model defined in OpenAPI

        :param id: The id of this AbuResponse.
        :param jsonrpc: The jsonrpc of this AbuResponse.
        :param result: The result of this AbuResponse.
        :param status: The status of this AbuResponse.
        """
        self.openapi_types = {
            'id': str,
            'jsonrpc': str,
            'result': AbuResultDTO,
            'status': bool
        }

        self.attribute_map = {
            'id': 'id',
            'jsonrpc': 'jsonrpc',
            'result': 'result',
            'status': 'status'
        }

        self._id = id
        self._jsonrpc = jsonrpc
        self._result = result
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AbuResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AbuResponse of this AbuResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this AbuResponse.

        An identifier established by the Client that MUST contain a String, Number, or NULL value if included.

        :return: The id of this AbuResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AbuResponse.

        An identifier established by the Client that MUST contain a String, Number, or NULL value if included.

        :param id: The id of this AbuResponse.
        :type id: str
        """

        self._id = id

    @property
    def jsonrpc(self):
        """Gets the jsonrpc of this AbuResponse.

        A String specifying the version of the JSON-RPC protocol. MUST be exactly \"2.0\".

        :return: The jsonrpc of this AbuResponse.
        :rtype: str
        """
        return self._jsonrpc

    @jsonrpc.setter
    def jsonrpc(self, jsonrpc):
        """Sets the jsonrpc of this AbuResponse.

        A String specifying the version of the JSON-RPC protocol. MUST be exactly \"2.0\".

        :param jsonrpc: The jsonrpc of this AbuResponse.
        :type jsonrpc: str
        """

        self._jsonrpc = jsonrpc

    @property
    def result(self):
        """Gets the result of this AbuResponse.


        :return: The result of this AbuResponse.
        :rtype: AbuResultDTO
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this AbuResponse.


        :param result: The result of this AbuResponse.
        :type result: AbuResultDTO
        """

        self._result = result

    @property
    def status(self):
        """Gets the status of this AbuResponse.

        The Service Status, success (true) or failure (false).

        :return: The status of this AbuResponse.
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AbuResponse.

        The Service Status, success (true) or failure (false).

        :param status: The status of this AbuResponse.
        :type status: bool
        """

        self._status = status
