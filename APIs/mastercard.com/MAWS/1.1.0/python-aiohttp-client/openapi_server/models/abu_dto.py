# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AbuDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, discretionary_data: str=None, ica: str=None, merchant_id: str=None, old_account_number: str=None, old_expiration_date: str=None, sub_merchant_id: str=None, subscribe: str=None):
        """AbuDTO - a model defined in OpenAPI

        :param discretionary_data: The discretionary_data of this AbuDTO.
        :param ica: The ica of this AbuDTO.
        :param merchant_id: The merchant_id of this AbuDTO.
        :param old_account_number: The old_account_number of this AbuDTO.
        :param old_expiration_date: The old_expiration_date of this AbuDTO.
        :param sub_merchant_id: The sub_merchant_id of this AbuDTO.
        :param subscribe: The subscribe of this AbuDTO.
        """
        self.openapi_types = {
            'discretionary_data': str,
            'ica': str,
            'merchant_id': str,
            'old_account_number': str,
            'old_expiration_date': str,
            'sub_merchant_id': str,
            'subscribe': str
        }

        self.attribute_map = {
            'discretionary_data': 'discretionaryData',
            'ica': 'ica',
            'merchant_id': 'merchantId',
            'old_account_number': 'oldAccountNumber',
            'old_expiration_date': 'oldExpirationDate',
            'sub_merchant_id': 'subMerchantId',
            'subscribe': 'subscribe'
        }

        self._discretionary_data = discretionary_data
        self._ica = ica
        self._merchant_id = merchant_id
        self._old_account_number = old_account_number
        self._old_expiration_date = old_expiration_date
        self._sub_merchant_id = sub_merchant_id
        self._subscribe = subscribe

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AbuDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AbuDTO of this AbuDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def discretionary_data(self):
        """Gets the discretionary_data of this AbuDTO.

        Optional data that can be used by the requested for matching to the original inquiry.

        :return: The discretionary_data of this AbuDTO.
        :rtype: str
        """
        return self._discretionary_data

    @discretionary_data.setter
    def discretionary_data(self, discretionary_data):
        """Sets the discretionary_data of this AbuDTO.

        Optional data that can be used by the requested for matching to the original inquiry.

        :param discretionary_data: The discretionary_data of this AbuDTO.
        :type discretionary_data: str
        """
        if discretionary_data is not None and len(discretionary_data) > 10:
            raise ValueError("Invalid value for `discretionary_data`, length must be less than or equal to `10`")
        if discretionary_data is not None and len(discretionary_data) < 0:
            raise ValueError("Invalid value for `discretionary_data`, length must be greater than or equal to `0`")

        self._discretionary_data = discretionary_data

    @property
    def ica(self):
        """Gets the ica of this AbuDTO.

        <p class='suffix-required' style='margin-bottom:5px'>[This field is required when the multiple ICAs are registered under the same client key.]</p>Data that can be used to inform the ICA number: Interbank Card Association.

        :return: The ica of this AbuDTO.
        :rtype: str
        """
        return self._ica

    @ica.setter
    def ica(self, ica):
        """Sets the ica of this AbuDTO.

        <p class='suffix-required' style='margin-bottom:5px'>[This field is required when the multiple ICAs are registered under the same client key.]</p>Data that can be used to inform the ICA number: Interbank Card Association.

        :param ica: The ica of this AbuDTO.
        :type ica: str
        """
        if ica is not None and len(ica) > 11:
            raise ValueError("Invalid value for `ica`, length must be less than or equal to `11`")
        if ica is not None and len(ica) < 0:
            raise ValueError("Invalid value for `ica`, length must be greater than or equal to `0`")

        self._ica = ica

    @property
    def merchant_id(self):
        """Gets the merchant_id of this AbuDTO.

        Registered merchant ID that is mapped to the Customer ID.

        :return: The merchant_id of this AbuDTO.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this AbuDTO.

        Registered merchant ID that is mapped to the Customer ID.

        :param merchant_id: The merchant_id of this AbuDTO.
        :type merchant_id: str
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")
        if merchant_id is not None and len(merchant_id) > 15:
            raise ValueError("Invalid value for `merchant_id`, length must be less than or equal to `15`")
        if merchant_id is not None and len(merchant_id) < 15:
            raise ValueError("Invalid value for `merchant_id`, length must be greater than or equal to `15`")

        self._merchant_id = merchant_id

    @property
    def old_account_number(self):
        """Gets the old_account_number of this AbuDTO.

        Account number on file provided by merchant.

        :return: The old_account_number of this AbuDTO.
        :rtype: str
        """
        return self._old_account_number

    @old_account_number.setter
    def old_account_number(self, old_account_number):
        """Sets the old_account_number of this AbuDTO.

        Account number on file provided by merchant.

        :param old_account_number: The old_account_number of this AbuDTO.
        :type old_account_number: str
        """
        if old_account_number is None:
            raise ValueError("Invalid value for `old_account_number`, must not be `None`")
        if old_account_number is not None and len(old_account_number) > 19:
            raise ValueError("Invalid value for `old_account_number`, length must be less than or equal to `19`")
        if old_account_number is not None and len(old_account_number) < 16:
            raise ValueError("Invalid value for `old_account_number`, length must be greater than or equal to `16`")

        self._old_account_number = old_account_number

    @property
    def old_expiration_date(self):
        """Gets the old_expiration_date of this AbuDTO.

        Account number expiration date on file provided by merchant that must be in MMYY format.

        :return: The old_expiration_date of this AbuDTO.
        :rtype: str
        """
        return self._old_expiration_date

    @old_expiration_date.setter
    def old_expiration_date(self, old_expiration_date):
        """Sets the old_expiration_date of this AbuDTO.

        Account number expiration date on file provided by merchant that must be in MMYY format.

        :param old_expiration_date: The old_expiration_date of this AbuDTO.
        :type old_expiration_date: str
        """
        if old_expiration_date is None:
            raise ValueError("Invalid value for `old_expiration_date`, must not be `None`")
        if old_expiration_date is not None and len(old_expiration_date) > 4:
            raise ValueError("Invalid value for `old_expiration_date`, length must be less than or equal to `4`")
        if old_expiration_date is not None and len(old_expiration_date) < 4:
            raise ValueError("Invalid value for `old_expiration_date`, length must be greater than or equal to `4`")

        self._old_expiration_date = old_expiration_date

    @property
    def sub_merchant_id(self):
        """Gets the sub_merchant_id of this AbuDTO.

        Optionally populated when the merchant ID is actually a previously populated payment facilitator or payment aggregator.

        :return: The sub_merchant_id of this AbuDTO.
        :rtype: str
        """
        return self._sub_merchant_id

    @sub_merchant_id.setter
    def sub_merchant_id(self, sub_merchant_id):
        """Sets the sub_merchant_id of this AbuDTO.

        Optionally populated when the merchant ID is actually a previously populated payment facilitator or payment aggregator.

        :param sub_merchant_id: The sub_merchant_id of this AbuDTO.
        :type sub_merchant_id: str
        """
        if sub_merchant_id is not None and len(sub_merchant_id) > 15:
            raise ValueError("Invalid value for `sub_merchant_id`, length must be less than or equal to `15`")
        if sub_merchant_id is not None and len(sub_merchant_id) < 15:
            raise ValueError("Invalid value for `sub_merchant_id`, length must be greater than or equal to `15`")

        self._sub_merchant_id = sub_merchant_id

    @property
    def subscribe(self):
        """Gets the subscribe of this AbuDTO.

        <p class=\"suffix-required\" style=\"margin-bottom:5px\">[Field used by Push Model only - REQUIRED]</p>Optional data that can be used to subscribe, un-subscribe or query subscription status for PAN updates. Valid values are \"subscribe\", \"un-subscribe\" and \"query\".

        :return: The subscribe of this AbuDTO.
        :rtype: str
        """
        return self._subscribe

    @subscribe.setter
    def subscribe(self, subscribe):
        """Sets the subscribe of this AbuDTO.

        <p class=\"suffix-required\" style=\"margin-bottom:5px\">[Field used by Push Model only - REQUIRED]</p>Optional data that can be used to subscribe, un-subscribe or query subscription status for PAN updates. Valid values are \"subscribe\", \"un-subscribe\" and \"query\".

        :param subscribe: The subscribe of this AbuDTO.
        :type subscribe: str
        """
        if subscribe is not None and len(subscribe) > 12:
            raise ValueError("Invalid value for `subscribe`, length must be less than or equal to `12`")
        if subscribe is not None and len(subscribe) < 0:
            raise ValueError("Invalid value for `subscribe`, length must be greater than or equal to `0`")

        self._subscribe = subscribe
