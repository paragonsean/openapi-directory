/**
 * Bill Payment Validator
 * The Bill Payment Validator service allows RPPS origination (payment sender) customers to identify if a potential RPPS transaction would process successfully before transmitting the formal payment transaction, reducing RPPS payment rejects and costly payment processing exceptions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import BillPayAccountValidation from './model/BillPayAccountValidation';
import BillPayRequest from './model/BillPayRequest';
import BillPayResponse from './model/BillPayResponse';
import Error from './model/Error';
import ErrorResponse from './model/ErrorResponse';
import Errors from './model/Errors';
import RPPSPaymentValidatorAPIApi from './api/RPPSPaymentValidatorAPIApi';


/**
* The Bill Payment Validator service allows RPPS origination (payment sender) customers to identify if a potential RPPS transaction would process successfully before transmitting the formal payment transaction, reducing RPPS payment rejects and costly payment processing exceptions..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var BillPaymentValidator = require('index'); // See note below*.
* var xxxSvc = new BillPaymentValidator.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new BillPaymentValidator.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new BillPaymentValidator.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new BillPaymentValidator.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The BillPayAccountValidation model constructor.
     * @property {module:model/BillPayAccountValidation}
     */
    BillPayAccountValidation,

    /**
     * The BillPayRequest model constructor.
     * @property {module:model/BillPayRequest}
     */
    BillPayRequest,

    /**
     * The BillPayResponse model constructor.
     * @property {module:model/BillPayResponse}
     */
    BillPayResponse,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The ErrorResponse model constructor.
     * @property {module:model/ErrorResponse}
     */
    ErrorResponse,

    /**
     * The Errors model constructor.
     * @property {module:model/Errors}
     */
    Errors,

    /**
    * The RPPSPaymentValidatorAPIApi service constructor.
    * @property {module:api/RPPSPaymentValidatorAPIApi}
    */
    RPPSPaymentValidatorAPIApi
};
