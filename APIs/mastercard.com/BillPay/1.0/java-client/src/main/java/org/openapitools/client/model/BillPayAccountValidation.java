/*
 * Bill Payment Validator
 * The Bill Payment Validator service allows RPPS origination (payment sender) customers to identify if a potential RPPS transaction would process successfully before transmitting the formal payment transaction, reducing RPPS payment rejects and costly payment processing exceptions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BillPayAccountValidation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:28.327719-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BillPayAccountValidation {
  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "AccountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_BILLER_ID = "BillerId";
  @SerializedName(SERIALIZED_NAME_BILLER_ID)
  private String billerId;

  public static final String SERIALIZED_NAME_CUSTOMER_IDENTIFIER1 = "CustomerIdentifier1";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_IDENTIFIER1)
  private String customerIdentifier1;

  public static final String SERIALIZED_NAME_CUSTOMER_IDENTIFIER2 = "CustomerIdentifier2";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_IDENTIFIER2)
  private String customerIdentifier2;

  public static final String SERIALIZED_NAME_CUSTOMER_IDENTIFIER3 = "CustomerIdentifier3";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_IDENTIFIER3)
  private String customerIdentifier3;

  public static final String SERIALIZED_NAME_CUSTOMER_IDENTIFIER4 = "CustomerIdentifier4";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_IDENTIFIER4)
  private String customerIdentifier4;

  public static final String SERIALIZED_NAME_RESPONSE_STRING = "ResponseString";
  @SerializedName(SERIALIZED_NAME_RESPONSE_STRING)
  private String responseString;

  public static final String SERIALIZED_NAME_RPPS_ID = "RppsId";
  @SerializedName(SERIALIZED_NAME_RPPS_ID)
  private String rppsId;

  public static final String SERIALIZED_NAME_TRANSACTION_AMOUNT = "TransactionAmount";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_AMOUNT)
  private String transactionAmount;

  public BillPayAccountValidation() {
  }

  public BillPayAccountValidation accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

  /**
   * Consumer account number populated in the message.  The minimum length is 8 and the maximum length is 22.
   * @return accountNumber
   */
  @javax.annotation.Nullable
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public BillPayAccountValidation billerId(String billerId) {
    this.billerId = billerId;
    return this;
  }

  /**
   * Biller ID populated in the message. The maximum length is 10.
   * @return billerId
   */
  @javax.annotation.Nullable
  public String getBillerId() {
    return billerId;
  }

  public void setBillerId(String billerId) {
    this.billerId = billerId;
  }


  public BillPayAccountValidation customerIdentifier1(String customerIdentifier1) {
    this.customerIdentifier1 = customerIdentifier1;
    return this;
  }

  /**
   * Consumer identifier populated in the message.
   * @return customerIdentifier1
   */
  @javax.annotation.Nullable
  public String getCustomerIdentifier1() {
    return customerIdentifier1;
  }

  public void setCustomerIdentifier1(String customerIdentifier1) {
    this.customerIdentifier1 = customerIdentifier1;
  }


  public BillPayAccountValidation customerIdentifier2(String customerIdentifier2) {
    this.customerIdentifier2 = customerIdentifier2;
    return this;
  }

  /**
   * Consumer identifier populated in the message.
   * @return customerIdentifier2
   */
  @javax.annotation.Nullable
  public String getCustomerIdentifier2() {
    return customerIdentifier2;
  }

  public void setCustomerIdentifier2(String customerIdentifier2) {
    this.customerIdentifier2 = customerIdentifier2;
  }


  public BillPayAccountValidation customerIdentifier3(String customerIdentifier3) {
    this.customerIdentifier3 = customerIdentifier3;
    return this;
  }

  /**
   * Consumer identifier populated in the message.
   * @return customerIdentifier3
   */
  @javax.annotation.Nullable
  public String getCustomerIdentifier3() {
    return customerIdentifier3;
  }

  public void setCustomerIdentifier3(String customerIdentifier3) {
    this.customerIdentifier3 = customerIdentifier3;
  }


  public BillPayAccountValidation customerIdentifier4(String customerIdentifier4) {
    this.customerIdentifier4 = customerIdentifier4;
    return this;
  }

  /**
   * Consumer identifier populated in the message.
   * @return customerIdentifier4
   */
  @javax.annotation.Nullable
  public String getCustomerIdentifier4() {
    return customerIdentifier4;
  }

  public void setCustomerIdentifier4(String customerIdentifier4) {
    this.customerIdentifier4 = customerIdentifier4;
  }


  public BillPayAccountValidation responseString(String responseString) {
    this.responseString = responseString;
    return this;
  }

  /**
   * Indicates if the bill payment transaction information passed all RPPS transaction processing edits for the specified biller ID or indicates errors. The minimum length is 0 and the maximum length is 120.
   * @return responseString
   */
  @javax.annotation.Nullable
  public String getResponseString() {
    return responseString;
  }

  public void setResponseString(String responseString) {
    this.responseString = responseString;
  }


  public BillPayAccountValidation rppsId(String rppsId) {
    this.rppsId = rppsId;
    return this;
  }

  /**
   * Originator RPPS ID populated in the message.  The maximum length is 8.
   * @return rppsId
   */
  @javax.annotation.Nullable
  public String getRppsId() {
    return rppsId;
  }

  public void setRppsId(String rppsId) {
    this.rppsId = rppsId;
  }


  public BillPayAccountValidation transactionAmount(String transactionAmount) {
    this.transactionAmount = transactionAmount;
    return this;
  }

  /**
   * Amount populated in the message.
   * @return transactionAmount
   */
  @javax.annotation.Nullable
  public String getTransactionAmount() {
    return transactionAmount;
  }

  public void setTransactionAmount(String transactionAmount) {
    this.transactionAmount = transactionAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillPayAccountValidation billPayAccountValidation = (BillPayAccountValidation) o;
    return Objects.equals(this.accountNumber, billPayAccountValidation.accountNumber) &&
        Objects.equals(this.billerId, billPayAccountValidation.billerId) &&
        Objects.equals(this.customerIdentifier1, billPayAccountValidation.customerIdentifier1) &&
        Objects.equals(this.customerIdentifier2, billPayAccountValidation.customerIdentifier2) &&
        Objects.equals(this.customerIdentifier3, billPayAccountValidation.customerIdentifier3) &&
        Objects.equals(this.customerIdentifier4, billPayAccountValidation.customerIdentifier4) &&
        Objects.equals(this.responseString, billPayAccountValidation.responseString) &&
        Objects.equals(this.rppsId, billPayAccountValidation.rppsId) &&
        Objects.equals(this.transactionAmount, billPayAccountValidation.transactionAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountNumber, billerId, customerIdentifier1, customerIdentifier2, customerIdentifier3, customerIdentifier4, responseString, rppsId, transactionAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillPayAccountValidation {\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    billerId: ").append(toIndentedString(billerId)).append("\n");
    sb.append("    customerIdentifier1: ").append(toIndentedString(customerIdentifier1)).append("\n");
    sb.append("    customerIdentifier2: ").append(toIndentedString(customerIdentifier2)).append("\n");
    sb.append("    customerIdentifier3: ").append(toIndentedString(customerIdentifier3)).append("\n");
    sb.append("    customerIdentifier4: ").append(toIndentedString(customerIdentifier4)).append("\n");
    sb.append("    responseString: ").append(toIndentedString(responseString)).append("\n");
    sb.append("    rppsId: ").append(toIndentedString(rppsId)).append("\n");
    sb.append("    transactionAmount: ").append(toIndentedString(transactionAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountNumber");
    openapiFields.add("BillerId");
    openapiFields.add("CustomerIdentifier1");
    openapiFields.add("CustomerIdentifier2");
    openapiFields.add("CustomerIdentifier3");
    openapiFields.add("CustomerIdentifier4");
    openapiFields.add("ResponseString");
    openapiFields.add("RppsId");
    openapiFields.add("TransactionAmount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BillPayAccountValidation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BillPayAccountValidation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BillPayAccountValidation is not found in the empty JSON string", BillPayAccountValidation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BillPayAccountValidation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BillPayAccountValidation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AccountNumber") != null && !jsonObj.get("AccountNumber").isJsonNull()) && !jsonObj.get("AccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountNumber").toString()));
      }
      if ((jsonObj.get("BillerId") != null && !jsonObj.get("BillerId").isJsonNull()) && !jsonObj.get("BillerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BillerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BillerId").toString()));
      }
      if ((jsonObj.get("CustomerIdentifier1") != null && !jsonObj.get("CustomerIdentifier1").isJsonNull()) && !jsonObj.get("CustomerIdentifier1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomerIdentifier1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CustomerIdentifier1").toString()));
      }
      if ((jsonObj.get("CustomerIdentifier2") != null && !jsonObj.get("CustomerIdentifier2").isJsonNull()) && !jsonObj.get("CustomerIdentifier2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomerIdentifier2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CustomerIdentifier2").toString()));
      }
      if ((jsonObj.get("CustomerIdentifier3") != null && !jsonObj.get("CustomerIdentifier3").isJsonNull()) && !jsonObj.get("CustomerIdentifier3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomerIdentifier3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CustomerIdentifier3").toString()));
      }
      if ((jsonObj.get("CustomerIdentifier4") != null && !jsonObj.get("CustomerIdentifier4").isJsonNull()) && !jsonObj.get("CustomerIdentifier4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomerIdentifier4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CustomerIdentifier4").toString()));
      }
      if ((jsonObj.get("ResponseString") != null && !jsonObj.get("ResponseString").isJsonNull()) && !jsonObj.get("ResponseString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResponseString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ResponseString").toString()));
      }
      if ((jsonObj.get("RppsId") != null && !jsonObj.get("RppsId").isJsonNull()) && !jsonObj.get("RppsId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RppsId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RppsId").toString()));
      }
      if ((jsonObj.get("TransactionAmount") != null && !jsonObj.get("TransactionAmount").isJsonNull()) && !jsonObj.get("TransactionAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransactionAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TransactionAmount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BillPayAccountValidation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BillPayAccountValidation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BillPayAccountValidation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BillPayAccountValidation.class));

       return (TypeAdapter<T>) new TypeAdapter<BillPayAccountValidation>() {
           @Override
           public void write(JsonWriter out, BillPayAccountValidation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BillPayAccountValidation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BillPayAccountValidation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BillPayAccountValidation
   * @throws IOException if the JSON string is invalid with respect to BillPayAccountValidation
   */
  public static BillPayAccountValidation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BillPayAccountValidation.class);
  }

  /**
   * Convert an instance of BillPayAccountValidation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

