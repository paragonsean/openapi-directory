/**
 * Locations API
 * The Locations API provides access to MasterCard's ATM and Merchant location database
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Country from './Country';
import CountrySubdivision from './CountrySubdivision';

/**
 * The Address model module.
 * @module model/Address
 * @version 1.0.0
 */
class Address {
    /**
     * Constructs a new <code>Address</code>.
     * @alias module:model/Address
     */
    constructor() { 
        
        Address.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Address</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Address} obj Optional instance to populate.
     * @return {module:model/Address} The populated <code>Address</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Address();

            if (data.hasOwnProperty('City')) {
                obj['City'] = ApiClient.convertToType(data['City'], 'String');
            }
            if (data.hasOwnProperty('Country')) {
                obj['Country'] = Country.constructFromObject(data['Country']);
            }
            if (data.hasOwnProperty('CountrySubdivision')) {
                obj['CountrySubdivision'] = CountrySubdivision.constructFromObject(data['CountrySubdivision']);
            }
            if (data.hasOwnProperty('Line1')) {
                obj['Line1'] = ApiClient.convertToType(data['Line1'], 'String');
            }
            if (data.hasOwnProperty('Line2')) {
                obj['Line2'] = ApiClient.convertToType(data['Line2'], 'String');
            }
            if (data.hasOwnProperty('PostalCode')) {
                obj['PostalCode'] = ApiClient.convertToType(data['PostalCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Address</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Address</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['City'] && !(typeof data['City'] === 'string' || data['City'] instanceof String)) {
            throw new Error("Expected the field `City` to be a primitive type in the JSON string but got " + data['City']);
        }
        // validate the optional field `Country`
        if (data['Country']) { // data not null
          Country.validateJSON(data['Country']);
        }
        // validate the optional field `CountrySubdivision`
        if (data['CountrySubdivision']) { // data not null
          CountrySubdivision.validateJSON(data['CountrySubdivision']);
        }
        // ensure the json data is a string
        if (data['Line1'] && !(typeof data['Line1'] === 'string' || data['Line1'] instanceof String)) {
            throw new Error("Expected the field `Line1` to be a primitive type in the JSON string but got " + data['Line1']);
        }
        // ensure the json data is a string
        if (data['Line2'] && !(typeof data['Line2'] === 'string' || data['Line2'] instanceof String)) {
            throw new Error("Expected the field `Line2` to be a primitive type in the JSON string but got " + data['Line2']);
        }
        // ensure the json data is a string
        if (data['PostalCode'] && !(typeof data['PostalCode'] === 'string' || data['PostalCode'] instanceof String)) {
            throw new Error("Expected the field `PostalCode` to be a primitive type in the JSON string but got " + data['PostalCode']);
        }

        return true;
    }


}



/**
 * The name of the city for an ATM location.
 * @member {String} City
 */
Address.prototype['City'] = undefined;

/**
 * @member {module:model/Country} Country
 */
Address.prototype['Country'] = undefined;

/**
 * @member {module:model/CountrySubdivision} CountrySubdivision
 */
Address.prototype['CountrySubdivision'] = undefined;

/**
 * Line 1 of the street address for the merchant location.  Usually includes the street number and name.
 * @member {String} Line1
 */
Address.prototype['Line1'] = undefined;

/**
 * Line 2 of the street address usually an apartment number or suite number.
 * @member {String} Line2
 */
Address.prototype['Line2'] = undefined;

/**
 * The zip code or postal code for an ATM location.
 * @member {String} PostalCode
 */
Address.prototype['PostalCode'] = undefined;






export default Address;

