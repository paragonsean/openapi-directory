/**
 * Locations API
 * The Locations API provides access to MasterCard's ATM and Merchant location database
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Merchant from './Merchant';

/**
 * The Merchants model module.
 * @module model/Merchants
 * @version 1.0.0
 */
class Merchants {
    /**
     * Constructs a new <code>Merchants</code>.
     * @alias module:model/Merchants
     */
    constructor() { 
        
        Merchants.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Merchants</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Merchants} obj Optional instance to populate.
     * @return {module:model/Merchants} The populated <code>Merchants</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Merchants();

            if (data.hasOwnProperty('Merchant')) {
                obj['Merchant'] = ApiClient.convertToType(data['Merchant'], [Merchant]);
            }
            if (data.hasOwnProperty('PageOffset')) {
                obj['PageOffset'] = ApiClient.convertToType(data['PageOffset'], 'String');
            }
            if (data.hasOwnProperty('TotalCount')) {
                obj['TotalCount'] = ApiClient.convertToType(data['TotalCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Merchants</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Merchants</code>.
     */
    static validateJSON(data) {
        if (data['Merchant']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Merchant'])) {
                throw new Error("Expected the field `Merchant` to be an array in the JSON data but got " + data['Merchant']);
            }
            // validate the optional field `Merchant` (array)
            for (const item of data['Merchant']) {
                Merchant.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['PageOffset'] && !(typeof data['PageOffset'] === 'string' || data['PageOffset'] instanceof String)) {
            throw new Error("Expected the field `PageOffset` to be a primitive type in the JSON string but got " + data['PageOffset']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/Merchant>} Merchant
 */
Merchants.prototype['Merchant'] = undefined;

/**
 * Zero-based offset where the response will start. The actual start position is this value +1. An offset of 10 starts at item 11. Combined with the PageLength option this allows pagination to be supported through the service requests.
 * @member {String} PageOffset
 */
Merchants.prototype['PageOffset'] = undefined;

/**
 * This is the total number of ATtms that match your criteria.
 * @member {Number} TotalCount
 */
Merchants.prototype['TotalCount'] = undefined;






export default Merchants;

