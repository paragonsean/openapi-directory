/**
 * Locations API
 * The Locations API provides access to MasterCard's ATM and Merchant location database
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PayPass model module.
 * @module model/PayPass
 * @version 1.0.0
 */
class PayPass {
    /**
     * Constructs a new <code>PayPass</code>.
     * @alias module:model/PayPass
     */
    constructor() { 
        
        PayPass.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PayPass</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PayPass} obj Optional instance to populate.
     * @return {module:model/PayPass} The populated <code>PayPass</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PayPass();

            if (data.hasOwnProperty('Concession')) {
                obj['Concession'] = ApiClient.convertToType(data['Concession'], 'Boolean');
            }
            if (data.hasOwnProperty('DriveThru')) {
                obj['DriveThru'] = ApiClient.convertToType(data['DriveThru'], 'Boolean');
            }
            if (data.hasOwnProperty('FuelPump')) {
                obj['FuelPump'] = ApiClient.convertToType(data['FuelPump'], 'Boolean');
            }
            if (data.hasOwnProperty('Pharmacy')) {
                obj['Pharmacy'] = ApiClient.convertToType(data['Pharmacy'], 'Boolean');
            }
            if (data.hasOwnProperty('Register')) {
                obj['Register'] = ApiClient.convertToType(data['Register'], 'Boolean');
            }
            if (data.hasOwnProperty('Ticketing')) {
                obj['Ticketing'] = ApiClient.convertToType(data['Ticketing'], 'Boolean');
            }
            if (data.hasOwnProperty('TollBooth')) {
                obj['TollBooth'] = ApiClient.convertToType(data['TollBooth'], 'Boolean');
            }
            if (data.hasOwnProperty('VendingMachine')) {
                obj['VendingMachine'] = ApiClient.convertToType(data['VendingMachine'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PayPass</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PayPass</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Boolean value which indicates if the concession area is equipped with a PayPass card reader.
 * @member {Boolean} Concession
 */
PayPass.prototype['Concession'] = undefined;

/**
 * Boolean value which indicates if the drive thru is equipped with a PayPass card reader.
 * @member {Boolean} DriveThru
 */
PayPass.prototype['DriveThru'] = undefined;

/**
 * Boolean value which indicates if the fuel pump is equipped with a PayPass card reader.
 * @member {Boolean} FuelPump
 */
PayPass.prototype['FuelPump'] = undefined;

/**
 * Boolean value which indicates if the pharmacy is equipped with a PayPass card reader.
 * @member {Boolean} Pharmacy
 */
PayPass.prototype['Pharmacy'] = undefined;

/**
 * Boolean value which indicates if the register is equipped with a PayPass card reader.
 * @member {Boolean} Register
 */
PayPass.prototype['Register'] = undefined;

/**
 * Boolean value which indicates if the ticketing area is equipped with a PayPass card reader.
 * @member {Boolean} Ticketing
 */
PayPass.prototype['Ticketing'] = undefined;

/**
 * Boolean value which indicates if the toll booth is equipped with a PayPass card reader.
 * @member {Boolean} TollBooth
 */
PayPass.prototype['TollBooth'] = undefined;

/**
 * Boolean value which indicates if the vending machine is equipped with a PayPass card reader.
 * @member {Boolean} VendingMachine
 */
PayPass.prototype['VendingMachine'] = undefined;






export default PayPass;

