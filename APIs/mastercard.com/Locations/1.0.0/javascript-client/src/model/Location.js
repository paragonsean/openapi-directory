/**
 * Locations API
 * The Locations API provides access to MasterCard's ATM and Merchant location database
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import LocationType from './LocationType';
import Point from './Point';

/**
 * The Location model module.
 * @module model/Location
 * @version 1.0.0
 */
class Location {
    /**
     * Constructs a new <code>Location</code>.
     * @alias module:model/Location
     */
    constructor() { 
        
        Location.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Location</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Location} obj Optional instance to populate.
     * @return {module:model/Location} The populated <code>Location</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Location();

            if (data.hasOwnProperty('Address')) {
                obj['Address'] = Address.constructFromObject(data['Address']);
            }
            if (data.hasOwnProperty('Distance')) {
                obj['Distance'] = ApiClient.convertToType(data['Distance'], 'Number');
            }
            if (data.hasOwnProperty('DistanceUnit')) {
                obj['DistanceUnit'] = ApiClient.convertToType(data['DistanceUnit'], 'String');
            }
            if (data.hasOwnProperty('LocationType')) {
                obj['LocationType'] = LocationType.constructFromObject(data['LocationType']);
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Point')) {
                obj['Point'] = Point.constructFromObject(data['Point']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Location</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Location</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Address`
        if (data['Address']) { // data not null
          Address.validateJSON(data['Address']);
        }
        // ensure the json data is a string
        if (data['DistanceUnit'] && !(typeof data['DistanceUnit'] === 'string' || data['DistanceUnit'] instanceof String)) {
            throw new Error("Expected the field `DistanceUnit` to be a primitive type in the JSON string but got " + data['DistanceUnit']);
        }
        // validate the optional field `LocationType`
        if (data['LocationType']) { // data not null
          LocationType.validateJSON(data['LocationType']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // validate the optional field `Point`
        if (data['Point']) { // data not null
          Point.validateJSON(data['Point']);
        }

        return true;
    }


}



/**
 * @member {module:model/Address} Address
 */
Location.prototype['Address'] = undefined;

/**
 * This is the numerical value for the distance from the provided location to the selected ATM.
 * @member {Number} Distance
 */
Location.prototype['Distance'] = undefined;

/**
 * This is the unit of measure value for the distance from the provided location to the selected ATM. Options are KILOMETER and MILE.
 * @member {String} DistanceUnit
 */
Location.prototype['DistanceUnit'] = undefined;

/**
 * @member {module:model/LocationType} LocationType
 */
Location.prototype['LocationType'] = undefined;

/**
 * This is the name of the ATM location
 * @member {String} Name
 */
Location.prototype['Name'] = undefined;

/**
 * @member {module:model/Point} Point
 */
Location.prototype['Point'] = undefined;






export default Location;

