/**
 * Locations API
 * The Locations API provides access to MasterCard's ATM and Merchant location database
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Acceptance from './Acceptance';
import Features from './Features';
import Location from './Location';
import Products from './Products';
import Topup from './Topup';

/**
 * The Merchant model module.
 * @module model/Merchant
 * @version 1.0.0
 */
class Merchant {
    /**
     * Constructs a new <code>Merchant</code>.
     * @alias module:model/Merchant
     */
    constructor() { 
        
        Merchant.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Merchant</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Merchant} obj Optional instance to populate.
     * @return {module:model/Merchant} The populated <code>Merchant</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Merchant();

            if (data.hasOwnProperty('Acceptance')) {
                obj['Acceptance'] = Acceptance.constructFromObject(data['Acceptance']);
            }
            if (data.hasOwnProperty('Category')) {
                obj['Category'] = ApiClient.convertToType(data['Category'], 'String');
            }
            if (data.hasOwnProperty('Features')) {
                obj['Features'] = Features.constructFromObject(data['Features']);
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('Location')) {
                obj['Location'] = Location.constructFromObject(data['Location']);
            }
            if (data.hasOwnProperty('MerchantOfferId')) {
                obj['MerchantOfferId'] = ApiClient.convertToType(data['MerchantOfferId'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('PhoneNumber')) {
                obj['PhoneNumber'] = ApiClient.convertToType(data['PhoneNumber'], 'String');
            }
            if (data.hasOwnProperty('Products')) {
                obj['Products'] = Products.constructFromObject(data['Products']);
            }
            if (data.hasOwnProperty('Topup')) {
                obj['Topup'] = Topup.constructFromObject(data['Topup']);
            }
            if (data.hasOwnProperty('WebsiteUrl')) {
                obj['WebsiteUrl'] = ApiClient.convertToType(data['WebsiteUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Merchant</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Merchant</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Acceptance`
        if (data['Acceptance']) { // data not null
          Acceptance.validateJSON(data['Acceptance']);
        }
        // ensure the json data is a string
        if (data['Category'] && !(typeof data['Category'] === 'string' || data['Category'] instanceof String)) {
            throw new Error("Expected the field `Category` to be a primitive type in the JSON string but got " + data['Category']);
        }
        // validate the optional field `Features`
        if (data['Features']) { // data not null
          Features.validateJSON(data['Features']);
        }
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // validate the optional field `Location`
        if (data['Location']) { // data not null
          Location.validateJSON(data['Location']);
        }
        // ensure the json data is a string
        if (data['MerchantOfferId'] && !(typeof data['MerchantOfferId'] === 'string' || data['MerchantOfferId'] instanceof String)) {
            throw new Error("Expected the field `MerchantOfferId` to be a primitive type in the JSON string but got " + data['MerchantOfferId']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['PhoneNumber'] && !(typeof data['PhoneNumber'] === 'string' || data['PhoneNumber'] instanceof String)) {
            throw new Error("Expected the field `PhoneNumber` to be a primitive type in the JSON string but got " + data['PhoneNumber']);
        }
        // validate the optional field `Products`
        if (data['Products']) { // data not null
          Products.validateJSON(data['Products']);
        }
        // validate the optional field `Topup`
        if (data['Topup']) { // data not null
          Topup.validateJSON(data['Topup']);
        }
        // ensure the json data is a string
        if (data['WebsiteUrl'] && !(typeof data['WebsiteUrl'] === 'string' || data['WebsiteUrl'] instanceof String)) {
            throw new Error("Expected the field `WebsiteUrl` to be a primitive type in the JSON string but got " + data['WebsiteUrl']);
        }

        return true;
    }


}



/**
 * @member {module:model/Acceptance} Acceptance
 */
Merchant.prototype['Acceptance'] = undefined;

/**
 * Merchant's category.
 * @member {String} Category
 */
Merchant.prototype['Category'] = undefined;

/**
 * @member {module:model/Features} Features
 */
Merchant.prototype['Features'] = undefined;

/**
 * Numerical merchant identifier.
 * @member {String} Id
 */
Merchant.prototype['Id'] = undefined;

/**
 * @member {module:model/Location} Location
 */
Merchant.prototype['Location'] = undefined;

/**
 * Merchant's Easy Savings Offer Id
 * @member {String} MerchantOfferId
 */
Merchant.prototype['MerchantOfferId'] = undefined;

/**
 * Name of the merchant
 * @member {String} Name
 */
Merchant.prototype['Name'] = undefined;

/**
 * Merchant's phone number
 * @member {String} PhoneNumber
 */
Merchant.prototype['PhoneNumber'] = undefined;

/**
 * @member {module:model/Products} Products
 */
Merchant.prototype['Products'] = undefined;

/**
 * @member {module:model/Topup} Topup
 */
Merchant.prototype['Topup'] = undefined;

/**
 * Merchant's website URL address.
 * @member {String} WebsiteUrl
 */
Merchant.prototype['WebsiteUrl'] = undefined;






export default Merchant;

