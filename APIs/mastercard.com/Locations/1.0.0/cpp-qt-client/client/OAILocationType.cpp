/**
 * Locations API
 * The Locations API provides access to MasterCard's ATM and Merchant location database
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocationType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocationType::OAILocationType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocationType::OAILocationType() {
    this->initializeModel();
}

OAILocationType::~OAILocationType() {}

void OAILocationType::initializeModel() {

    m_airport_code_isSet = false;
    m_airport_code_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAILocationType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocationType::fromJsonObject(QJsonObject json) {

    m_airport_code_isValid = ::OpenAPI::fromJsonValue(m_airport_code, json[QString("AirportCode")]);
    m_airport_code_isSet = !json[QString("AirportCode")].isNull() && m_airport_code_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAILocationType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocationType::asJsonObject() const {
    QJsonObject obj;
    if (m_airport_code_isSet) {
        obj.insert(QString("AirportCode"), ::OpenAPI::toJsonValue(m_airport_code));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAILocationType::getAirportCode() const {
    return m_airport_code;
}
void OAILocationType::setAirportCode(const QString &airport_code) {
    m_airport_code = airport_code;
    m_airport_code_isSet = true;
}

bool OAILocationType::is_airport_code_Set() const{
    return m_airport_code_isSet;
}

bool OAILocationType::is_airport_code_Valid() const{
    return m_airport_code_isValid;
}

QString OAILocationType::getType() const {
    return m_type;
}
void OAILocationType::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILocationType::is_type_Set() const{
    return m_type_isSet;
}

bool OAILocationType::is_type_Valid() const{
    return m_type_isValid;
}

bool OAILocationType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_airport_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocationType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
