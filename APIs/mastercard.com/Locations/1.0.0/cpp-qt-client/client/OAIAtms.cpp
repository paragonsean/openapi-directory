/**
 * Locations API
 * The Locations API provides access to MasterCard's ATM and Merchant location database
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAtms.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAtms::OAIAtms(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAtms::OAIAtms() {
    this->initializeModel();
}

OAIAtms::~OAIAtms() {}

void OAIAtms::initializeModel() {

    m_atm_isSet = false;
    m_atm_isValid = false;

    m_page_offset_isSet = false;
    m_page_offset_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;
}

void OAIAtms::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAtms::fromJsonObject(QJsonObject json) {

    m_atm_isValid = ::OpenAPI::fromJsonValue(m_atm, json[QString("Atm")]);
    m_atm_isSet = !json[QString("Atm")].isNull() && m_atm_isValid;

    m_page_offset_isValid = ::OpenAPI::fromJsonValue(m_page_offset, json[QString("PageOffset")]);
    m_page_offset_isSet = !json[QString("PageOffset")].isNull() && m_page_offset_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("TotalCount")]);
    m_total_count_isSet = !json[QString("TotalCount")].isNull() && m_total_count_isValid;
}

QString OAIAtms::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAtms::asJsonObject() const {
    QJsonObject obj;
    if (m_atm.size() > 0) {
        obj.insert(QString("Atm"), ::OpenAPI::toJsonValue(m_atm));
    }
    if (m_page_offset_isSet) {
        obj.insert(QString("PageOffset"), ::OpenAPI::toJsonValue(m_page_offset));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("TotalCount"), ::OpenAPI::toJsonValue(m_total_count));
    }
    return obj;
}

QList<OAIAtm> OAIAtms::getAtm() const {
    return m_atm;
}
void OAIAtms::setAtm(const QList<OAIAtm> &atm) {
    m_atm = atm;
    m_atm_isSet = true;
}

bool OAIAtms::is_atm_Set() const{
    return m_atm_isSet;
}

bool OAIAtms::is_atm_Valid() const{
    return m_atm_isValid;
}

QString OAIAtms::getPageOffset() const {
    return m_page_offset;
}
void OAIAtms::setPageOffset(const QString &page_offset) {
    m_page_offset = page_offset;
    m_page_offset_isSet = true;
}

bool OAIAtms::is_page_offset_Set() const{
    return m_page_offset_isSet;
}

bool OAIAtms::is_page_offset_Valid() const{
    return m_page_offset_isValid;
}

qint32 OAIAtms::getTotalCount() const {
    return m_total_count;
}
void OAIAtms::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIAtms::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIAtms::is_total_count_Valid() const{
    return m_total_count_isValid;
}

bool OAIAtms::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_atm.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAtms::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
