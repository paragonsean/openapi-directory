/**
 * Locations API
 * The Locations API provides access to MasterCard's ATM and Merchant location database
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAtm.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAtm::OAIAtm(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAtm::OAIAtm() {
    this->initializeModel();
}

OAIAtm::~OAIAtm() {}

void OAIAtm::initializeModel() {

    m_access_fees_isSet = false;
    m_access_fees_isValid = false;

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_camera_isSet = false;
    m_camera_isValid = false;

    m_handicap_accessible_isSet = false;
    m_handicap_accessible_isValid = false;

    m_international_maestro_accepted_isSet = false;
    m_international_maestro_accepted_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_shared_deposit_isSet = false;
    m_shared_deposit_isValid = false;

    m_sponsor_isSet = false;
    m_sponsor_isValid = false;

    m_support_emv_isSet = false;
    m_support_emv_isValid = false;

    m_surcharge_free_alliance_isSet = false;
    m_surcharge_free_alliance_isValid = false;

    m_surcharge_free_alliance_network_isSet = false;
    m_surcharge_free_alliance_network_isValid = false;
}

void OAIAtm::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAtm::fromJsonObject(QJsonObject json) {

    m_access_fees_isValid = ::OpenAPI::fromJsonValue(m_access_fees, json[QString("AccessFees")]);
    m_access_fees_isSet = !json[QString("AccessFees")].isNull() && m_access_fees_isValid;

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("Availability")]);
    m_availability_isSet = !json[QString("Availability")].isNull() && m_availability_isValid;

    m_camera_isValid = ::OpenAPI::fromJsonValue(m_camera, json[QString("Camera")]);
    m_camera_isSet = !json[QString("Camera")].isNull() && m_camera_isValid;

    m_handicap_accessible_isValid = ::OpenAPI::fromJsonValue(m_handicap_accessible, json[QString("HandicapAccessible")]);
    m_handicap_accessible_isSet = !json[QString("HandicapAccessible")].isNull() && m_handicap_accessible_isValid;

    m_international_maestro_accepted_isValid = ::OpenAPI::fromJsonValue(m_international_maestro_accepted, json[QString("InternationalMaestroAccepted")]);
    m_international_maestro_accepted_isSet = !json[QString("InternationalMaestroAccepted")].isNull() && m_international_maestro_accepted_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("Location")]);
    m_location_isSet = !json[QString("Location")].isNull() && m_location_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("Owner")]);
    m_owner_isSet = !json[QString("Owner")].isNull() && m_owner_isValid;

    m_shared_deposit_isValid = ::OpenAPI::fromJsonValue(m_shared_deposit, json[QString("SharedDeposit")]);
    m_shared_deposit_isSet = !json[QString("SharedDeposit")].isNull() && m_shared_deposit_isValid;

    m_sponsor_isValid = ::OpenAPI::fromJsonValue(m_sponsor, json[QString("Sponsor")]);
    m_sponsor_isSet = !json[QString("Sponsor")].isNull() && m_sponsor_isValid;

    m_support_emv_isValid = ::OpenAPI::fromJsonValue(m_support_emv, json[QString("SupportEMV")]);
    m_support_emv_isSet = !json[QString("SupportEMV")].isNull() && m_support_emv_isValid;

    m_surcharge_free_alliance_isValid = ::OpenAPI::fromJsonValue(m_surcharge_free_alliance, json[QString("SurchargeFreeAlliance")]);
    m_surcharge_free_alliance_isSet = !json[QString("SurchargeFreeAlliance")].isNull() && m_surcharge_free_alliance_isValid;

    m_surcharge_free_alliance_network_isValid = ::OpenAPI::fromJsonValue(m_surcharge_free_alliance_network, json[QString("SurchargeFreeAllianceNetwork")]);
    m_surcharge_free_alliance_network_isSet = !json[QString("SurchargeFreeAllianceNetwork")].isNull() && m_surcharge_free_alliance_network_isValid;
}

QString OAIAtm::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAtm::asJsonObject() const {
    QJsonObject obj;
    if (m_access_fees_isSet) {
        obj.insert(QString("AccessFees"), ::OpenAPI::toJsonValue(m_access_fees));
    }
    if (m_availability_isSet) {
        obj.insert(QString("Availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_camera_isSet) {
        obj.insert(QString("Camera"), ::OpenAPI::toJsonValue(m_camera));
    }
    if (m_handicap_accessible_isSet) {
        obj.insert(QString("HandicapAccessible"), ::OpenAPI::toJsonValue(m_handicap_accessible));
    }
    if (m_international_maestro_accepted_isSet) {
        obj.insert(QString("InternationalMaestroAccepted"), ::OpenAPI::toJsonValue(m_international_maestro_accepted));
    }
    if (m_location.isSet()) {
        obj.insert(QString("Location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_owner_isSet) {
        obj.insert(QString("Owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_shared_deposit_isSet) {
        obj.insert(QString("SharedDeposit"), ::OpenAPI::toJsonValue(m_shared_deposit));
    }
    if (m_sponsor_isSet) {
        obj.insert(QString("Sponsor"), ::OpenAPI::toJsonValue(m_sponsor));
    }
    if (m_support_emv_isSet) {
        obj.insert(QString("SupportEMV"), ::OpenAPI::toJsonValue(m_support_emv));
    }
    if (m_surcharge_free_alliance_isSet) {
        obj.insert(QString("SurchargeFreeAlliance"), ::OpenAPI::toJsonValue(m_surcharge_free_alliance));
    }
    if (m_surcharge_free_alliance_network_isSet) {
        obj.insert(QString("SurchargeFreeAllianceNetwork"), ::OpenAPI::toJsonValue(m_surcharge_free_alliance_network));
    }
    return obj;
}

QString OAIAtm::getAccessFees() const {
    return m_access_fees;
}
void OAIAtm::setAccessFees(const QString &access_fees) {
    m_access_fees = access_fees;
    m_access_fees_isSet = true;
}

bool OAIAtm::is_access_fees_Set() const{
    return m_access_fees_isSet;
}

bool OAIAtm::is_access_fees_Valid() const{
    return m_access_fees_isValid;
}

QString OAIAtm::getAvailability() const {
    return m_availability;
}
void OAIAtm::setAvailability(const QString &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAIAtm::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAIAtm::is_availability_Valid() const{
    return m_availability_isValid;
}

QString OAIAtm::getCamera() const {
    return m_camera;
}
void OAIAtm::setCamera(const QString &camera) {
    m_camera = camera;
    m_camera_isSet = true;
}

bool OAIAtm::is_camera_Set() const{
    return m_camera_isSet;
}

bool OAIAtm::is_camera_Valid() const{
    return m_camera_isValid;
}

QString OAIAtm::getHandicapAccessible() const {
    return m_handicap_accessible;
}
void OAIAtm::setHandicapAccessible(const QString &handicap_accessible) {
    m_handicap_accessible = handicap_accessible;
    m_handicap_accessible_isSet = true;
}

bool OAIAtm::is_handicap_accessible_Set() const{
    return m_handicap_accessible_isSet;
}

bool OAIAtm::is_handicap_accessible_Valid() const{
    return m_handicap_accessible_isValid;
}

qint32 OAIAtm::getInternationalMaestroAccepted() const {
    return m_international_maestro_accepted;
}
void OAIAtm::setInternationalMaestroAccepted(const qint32 &international_maestro_accepted) {
    m_international_maestro_accepted = international_maestro_accepted;
    m_international_maestro_accepted_isSet = true;
}

bool OAIAtm::is_international_maestro_accepted_Set() const{
    return m_international_maestro_accepted_isSet;
}

bool OAIAtm::is_international_maestro_accepted_Valid() const{
    return m_international_maestro_accepted_isValid;
}

OAILocation OAIAtm::getLocation() const {
    return m_location;
}
void OAIAtm::setLocation(const OAILocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIAtm::is_location_Set() const{
    return m_location_isSet;
}

bool OAIAtm::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIAtm::getOwner() const {
    return m_owner;
}
void OAIAtm::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIAtm::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIAtm::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIAtm::getSharedDeposit() const {
    return m_shared_deposit;
}
void OAIAtm::setSharedDeposit(const QString &shared_deposit) {
    m_shared_deposit = shared_deposit;
    m_shared_deposit_isSet = true;
}

bool OAIAtm::is_shared_deposit_Set() const{
    return m_shared_deposit_isSet;
}

bool OAIAtm::is_shared_deposit_Valid() const{
    return m_shared_deposit_isValid;
}

QString OAIAtm::getSponsor() const {
    return m_sponsor;
}
void OAIAtm::setSponsor(const QString &sponsor) {
    m_sponsor = sponsor;
    m_sponsor_isSet = true;
}

bool OAIAtm::is_sponsor_Set() const{
    return m_sponsor_isSet;
}

bool OAIAtm::is_sponsor_Valid() const{
    return m_sponsor_isValid;
}

qint32 OAIAtm::getSupportEmv() const {
    return m_support_emv;
}
void OAIAtm::setSupportEmv(const qint32 &support_emv) {
    m_support_emv = support_emv;
    m_support_emv_isSet = true;
}

bool OAIAtm::is_support_emv_Set() const{
    return m_support_emv_isSet;
}

bool OAIAtm::is_support_emv_Valid() const{
    return m_support_emv_isValid;
}

QString OAIAtm::getSurchargeFreeAlliance() const {
    return m_surcharge_free_alliance;
}
void OAIAtm::setSurchargeFreeAlliance(const QString &surcharge_free_alliance) {
    m_surcharge_free_alliance = surcharge_free_alliance;
    m_surcharge_free_alliance_isSet = true;
}

bool OAIAtm::is_surcharge_free_alliance_Set() const{
    return m_surcharge_free_alliance_isSet;
}

bool OAIAtm::is_surcharge_free_alliance_Valid() const{
    return m_surcharge_free_alliance_isValid;
}

QString OAIAtm::getSurchargeFreeAllianceNetwork() const {
    return m_surcharge_free_alliance_network;
}
void OAIAtm::setSurchargeFreeAllianceNetwork(const QString &surcharge_free_alliance_network) {
    m_surcharge_free_alliance_network = surcharge_free_alliance_network;
    m_surcharge_free_alliance_network_isSet = true;
}

bool OAIAtm::is_surcharge_free_alliance_network_Set() const{
    return m_surcharge_free_alliance_network_isSet;
}

bool OAIAtm::is_surcharge_free_alliance_network_Valid() const{
    return m_surcharge_free_alliance_network_isValid;
}

bool OAIAtm::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_fees_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_camera_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_handicap_accessible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_international_maestro_accepted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_deposit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sponsor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_emv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_surcharge_free_alliance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_surcharge_free_alliance_network_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAtm::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
