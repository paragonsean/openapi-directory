/**
 * Locations API
 * The Locations API provides access to MasterCard's ATM and Merchant location database
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocation::OAILocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocation::OAILocation() {
    this->initializeModel();
}

OAILocation::~OAILocation() {}

void OAILocation::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_distance_unit_isSet = false;
    m_distance_unit_isValid = false;

    m_location_type_isSet = false;
    m_location_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_point_isSet = false;
    m_point_isValid = false;
}

void OAILocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocation::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("Address")]);
    m_address_isSet = !json[QString("Address")].isNull() && m_address_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("Distance")]);
    m_distance_isSet = !json[QString("Distance")].isNull() && m_distance_isValid;

    m_distance_unit_isValid = ::OpenAPI::fromJsonValue(m_distance_unit, json[QString("DistanceUnit")]);
    m_distance_unit_isSet = !json[QString("DistanceUnit")].isNull() && m_distance_unit_isValid;

    m_location_type_isValid = ::OpenAPI::fromJsonValue(m_location_type, json[QString("LocationType")]);
    m_location_type_isSet = !json[QString("LocationType")].isNull() && m_location_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_point_isValid = ::OpenAPI::fromJsonValue(m_point, json[QString("Point")]);
    m_point_isSet = !json[QString("Point")].isNull() && m_point_isValid;
}

QString OAILocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocation::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("Address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_distance_isSet) {
        obj.insert(QString("Distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_distance_unit_isSet) {
        obj.insert(QString("DistanceUnit"), ::OpenAPI::toJsonValue(m_distance_unit));
    }
    if (m_location_type.isSet()) {
        obj.insert(QString("LocationType"), ::OpenAPI::toJsonValue(m_location_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_point.isSet()) {
        obj.insert(QString("Point"), ::OpenAPI::toJsonValue(m_point));
    }
    return obj;
}

OAIAddress OAILocation::getAddress() const {
    return m_address;
}
void OAILocation::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAILocation::is_address_Set() const{
    return m_address_isSet;
}

bool OAILocation::is_address_Valid() const{
    return m_address_isValid;
}

double OAILocation::getDistance() const {
    return m_distance;
}
void OAILocation::setDistance(const double &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAILocation::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAILocation::is_distance_Valid() const{
    return m_distance_isValid;
}

QString OAILocation::getDistanceUnit() const {
    return m_distance_unit;
}
void OAILocation::setDistanceUnit(const QString &distance_unit) {
    m_distance_unit = distance_unit;
    m_distance_unit_isSet = true;
}

bool OAILocation::is_distance_unit_Set() const{
    return m_distance_unit_isSet;
}

bool OAILocation::is_distance_unit_Valid() const{
    return m_distance_unit_isValid;
}

OAILocationType OAILocation::getLocationType() const {
    return m_location_type;
}
void OAILocation::setLocationType(const OAILocationType &location_type) {
    m_location_type = location_type;
    m_location_type_isSet = true;
}

bool OAILocation::is_location_type_Set() const{
    return m_location_type_isSet;
}

bool OAILocation::is_location_type_Valid() const{
    return m_location_type_isValid;
}

QString OAILocation::getName() const {
    return m_name;
}
void OAILocation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILocation::is_name_Set() const{
    return m_name_isSet;
}

bool OAILocation::is_name_Valid() const{
    return m_name_isValid;
}

OAIPoint OAILocation::getPoint() const {
    return m_point;
}
void OAILocation::setPoint(const OAIPoint &point) {
    m_point = point;
    m_point_isSet = true;
}

bool OAILocation::is_point_Set() const{
    return m_point_isSet;
}

bool OAILocation::is_point_Valid() const{
    return m_point_isValid;
}

bool OAILocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
