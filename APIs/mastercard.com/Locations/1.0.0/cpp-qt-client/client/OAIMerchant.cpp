/**
 * Locations API
 * The Locations API provides access to MasterCard's ATM and Merchant location database
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMerchant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMerchant::OAIMerchant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMerchant::OAIMerchant() {
    this->initializeModel();
}

OAIMerchant::~OAIMerchant() {}

void OAIMerchant::initializeModel() {

    m_acceptance_isSet = false;
    m_acceptance_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_features_isSet = false;
    m_features_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_merchant_offer_id_isSet = false;
    m_merchant_offer_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_products_isSet = false;
    m_products_isValid = false;

    m_topup_isSet = false;
    m_topup_isValid = false;

    m_website_url_isSet = false;
    m_website_url_isValid = false;
}

void OAIMerchant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMerchant::fromJsonObject(QJsonObject json) {

    m_acceptance_isValid = ::OpenAPI::fromJsonValue(m_acceptance, json[QString("Acceptance")]);
    m_acceptance_isSet = !json[QString("Acceptance")].isNull() && m_acceptance_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("Category")]);
    m_category_isSet = !json[QString("Category")].isNull() && m_category_isValid;

    m_features_isValid = ::OpenAPI::fromJsonValue(m_features, json[QString("Features")]);
    m_features_isSet = !json[QString("Features")].isNull() && m_features_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("Location")]);
    m_location_isSet = !json[QString("Location")].isNull() && m_location_isValid;

    m_merchant_offer_id_isValid = ::OpenAPI::fromJsonValue(m_merchant_offer_id, json[QString("MerchantOfferId")]);
    m_merchant_offer_id_isSet = !json[QString("MerchantOfferId")].isNull() && m_merchant_offer_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("PhoneNumber")]);
    m_phone_number_isSet = !json[QString("PhoneNumber")].isNull() && m_phone_number_isValid;

    m_products_isValid = ::OpenAPI::fromJsonValue(m_products, json[QString("Products")]);
    m_products_isSet = !json[QString("Products")].isNull() && m_products_isValid;

    m_topup_isValid = ::OpenAPI::fromJsonValue(m_topup, json[QString("Topup")]);
    m_topup_isSet = !json[QString("Topup")].isNull() && m_topup_isValid;

    m_website_url_isValid = ::OpenAPI::fromJsonValue(m_website_url, json[QString("WebsiteUrl")]);
    m_website_url_isSet = !json[QString("WebsiteUrl")].isNull() && m_website_url_isValid;
}

QString OAIMerchant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMerchant::asJsonObject() const {
    QJsonObject obj;
    if (m_acceptance.isSet()) {
        obj.insert(QString("Acceptance"), ::OpenAPI::toJsonValue(m_acceptance));
    }
    if (m_category_isSet) {
        obj.insert(QString("Category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_features.isSet()) {
        obj.insert(QString("Features"), ::OpenAPI::toJsonValue(m_features));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location.isSet()) {
        obj.insert(QString("Location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_merchant_offer_id_isSet) {
        obj.insert(QString("MerchantOfferId"), ::OpenAPI::toJsonValue(m_merchant_offer_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("PhoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_products.isSet()) {
        obj.insert(QString("Products"), ::OpenAPI::toJsonValue(m_products));
    }
    if (m_topup.isSet()) {
        obj.insert(QString("Topup"), ::OpenAPI::toJsonValue(m_topup));
    }
    if (m_website_url_isSet) {
        obj.insert(QString("WebsiteUrl"), ::OpenAPI::toJsonValue(m_website_url));
    }
    return obj;
}

OAIAcceptance OAIMerchant::getAcceptance() const {
    return m_acceptance;
}
void OAIMerchant::setAcceptance(const OAIAcceptance &acceptance) {
    m_acceptance = acceptance;
    m_acceptance_isSet = true;
}

bool OAIMerchant::is_acceptance_Set() const{
    return m_acceptance_isSet;
}

bool OAIMerchant::is_acceptance_Valid() const{
    return m_acceptance_isValid;
}

QString OAIMerchant::getCategory() const {
    return m_category;
}
void OAIMerchant::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIMerchant::is_category_Set() const{
    return m_category_isSet;
}

bool OAIMerchant::is_category_Valid() const{
    return m_category_isValid;
}

OAIFeatures OAIMerchant::getFeatures() const {
    return m_features;
}
void OAIMerchant::setFeatures(const OAIFeatures &features) {
    m_features = features;
    m_features_isSet = true;
}

bool OAIMerchant::is_features_Set() const{
    return m_features_isSet;
}

bool OAIMerchant::is_features_Valid() const{
    return m_features_isValid;
}

QString OAIMerchant::getId() const {
    return m_id;
}
void OAIMerchant::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMerchant::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMerchant::is_id_Valid() const{
    return m_id_isValid;
}

OAILocation OAIMerchant::getLocation() const {
    return m_location;
}
void OAIMerchant::setLocation(const OAILocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIMerchant::is_location_Set() const{
    return m_location_isSet;
}

bool OAIMerchant::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIMerchant::getMerchantOfferId() const {
    return m_merchant_offer_id;
}
void OAIMerchant::setMerchantOfferId(const QString &merchant_offer_id) {
    m_merchant_offer_id = merchant_offer_id;
    m_merchant_offer_id_isSet = true;
}

bool OAIMerchant::is_merchant_offer_id_Set() const{
    return m_merchant_offer_id_isSet;
}

bool OAIMerchant::is_merchant_offer_id_Valid() const{
    return m_merchant_offer_id_isValid;
}

QString OAIMerchant::getName() const {
    return m_name;
}
void OAIMerchant::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMerchant::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMerchant::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMerchant::getPhoneNumber() const {
    return m_phone_number;
}
void OAIMerchant::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIMerchant::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIMerchant::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

OAIProducts OAIMerchant::getProducts() const {
    return m_products;
}
void OAIMerchant::setProducts(const OAIProducts &products) {
    m_products = products;
    m_products_isSet = true;
}

bool OAIMerchant::is_products_Set() const{
    return m_products_isSet;
}

bool OAIMerchant::is_products_Valid() const{
    return m_products_isValid;
}

OAITopup OAIMerchant::getTopup() const {
    return m_topup;
}
void OAIMerchant::setTopup(const OAITopup &topup) {
    m_topup = topup;
    m_topup_isSet = true;
}

bool OAIMerchant::is_topup_Set() const{
    return m_topup_isSet;
}

bool OAIMerchant::is_topup_Valid() const{
    return m_topup_isValid;
}

QString OAIMerchant::getWebsiteUrl() const {
    return m_website_url;
}
void OAIMerchant::setWebsiteUrl(const QString &website_url) {
    m_website_url = website_url;
    m_website_url_isSet = true;
}

bool OAIMerchant::is_website_url_Set() const{
    return m_website_url_isSet;
}

bool OAIMerchant::is_website_url_Valid() const{
    return m_website_url_isValid;
}

bool OAIMerchant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acceptance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_features.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_products.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_topup.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMerchant::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
