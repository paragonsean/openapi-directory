/**
 * Locations API
 * The Locations API provides access to MasterCard's ATM and Merchant location database
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAtm.h
 *
 * 
 */

#ifndef OAIAtm_H
#define OAIAtm_H

#include <QJsonObject>

#include "OAILocation.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILocation;

class OAIAtm : public OAIObject {
public:
    OAIAtm();
    OAIAtm(QString json);
    ~OAIAtm() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccessFees() const;
    void setAccessFees(const QString &access_fees);
    bool is_access_fees_Set() const;
    bool is_access_fees_Valid() const;

    QString getAvailability() const;
    void setAvailability(const QString &availability);
    bool is_availability_Set() const;
    bool is_availability_Valid() const;

    QString getCamera() const;
    void setCamera(const QString &camera);
    bool is_camera_Set() const;
    bool is_camera_Valid() const;

    QString getHandicapAccessible() const;
    void setHandicapAccessible(const QString &handicap_accessible);
    bool is_handicap_accessible_Set() const;
    bool is_handicap_accessible_Valid() const;

    qint32 getInternationalMaestroAccepted() const;
    void setInternationalMaestroAccepted(const qint32 &international_maestro_accepted);
    bool is_international_maestro_accepted_Set() const;
    bool is_international_maestro_accepted_Valid() const;

    OAILocation getLocation() const;
    void setLocation(const OAILocation &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QString getOwner() const;
    void setOwner(const QString &owner);
    bool is_owner_Set() const;
    bool is_owner_Valid() const;

    QString getSharedDeposit() const;
    void setSharedDeposit(const QString &shared_deposit);
    bool is_shared_deposit_Set() const;
    bool is_shared_deposit_Valid() const;

    QString getSponsor() const;
    void setSponsor(const QString &sponsor);
    bool is_sponsor_Set() const;
    bool is_sponsor_Valid() const;

    qint32 getSupportEmv() const;
    void setSupportEmv(const qint32 &support_emv);
    bool is_support_emv_Set() const;
    bool is_support_emv_Valid() const;

    QString getSurchargeFreeAlliance() const;
    void setSurchargeFreeAlliance(const QString &surcharge_free_alliance);
    bool is_surcharge_free_alliance_Set() const;
    bool is_surcharge_free_alliance_Valid() const;

    QString getSurchargeFreeAllianceNetwork() const;
    void setSurchargeFreeAllianceNetwork(const QString &surcharge_free_alliance_network);
    bool is_surcharge_free_alliance_network_Set() const;
    bool is_surcharge_free_alliance_network_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_access_fees;
    bool m_access_fees_isSet;
    bool m_access_fees_isValid;

    QString m_availability;
    bool m_availability_isSet;
    bool m_availability_isValid;

    QString m_camera;
    bool m_camera_isSet;
    bool m_camera_isValid;

    QString m_handicap_accessible;
    bool m_handicap_accessible_isSet;
    bool m_handicap_accessible_isValid;

    qint32 m_international_maestro_accepted;
    bool m_international_maestro_accepted_isSet;
    bool m_international_maestro_accepted_isValid;

    OAILocation m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QString m_owner;
    bool m_owner_isSet;
    bool m_owner_isValid;

    QString m_shared_deposit;
    bool m_shared_deposit_isSet;
    bool m_shared_deposit_isValid;

    QString m_sponsor;
    bool m_sponsor_isSet;
    bool m_sponsor_isValid;

    qint32 m_support_emv;
    bool m_support_emv_isSet;
    bool m_support_emv_isValid;

    QString m_surcharge_free_alliance;
    bool m_surcharge_free_alliance_isSet;
    bool m_surcharge_free_alliance_isValid;

    QString m_surcharge_free_alliance_network;
    bool m_surcharge_free_alliance_network_isSet;
    bool m_surcharge_free_alliance_network_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAtm)

#endif // OAIAtm_H
