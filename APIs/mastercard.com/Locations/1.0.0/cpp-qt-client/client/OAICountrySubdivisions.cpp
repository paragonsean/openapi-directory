/**
 * Locations API
 * The Locations API provides access to MasterCard's ATM and Merchant location database
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICountrySubdivisions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICountrySubdivisions::OAICountrySubdivisions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICountrySubdivisions::OAICountrySubdivisions() {
    this->initializeModel();
}

OAICountrySubdivisions::~OAICountrySubdivisions() {}

void OAICountrySubdivisions::initializeModel() {

    m_country_subdivision_isSet = false;
    m_country_subdivision_isValid = false;
}

void OAICountrySubdivisions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICountrySubdivisions::fromJsonObject(QJsonObject json) {

    m_country_subdivision_isValid = ::OpenAPI::fromJsonValue(m_country_subdivision, json[QString("CountrySubdivision")]);
    m_country_subdivision_isSet = !json[QString("CountrySubdivision")].isNull() && m_country_subdivision_isValid;
}

QString OAICountrySubdivisions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICountrySubdivisions::asJsonObject() const {
    QJsonObject obj;
    if (m_country_subdivision.size() > 0) {
        obj.insert(QString("CountrySubdivision"), ::OpenAPI::toJsonValue(m_country_subdivision));
    }
    return obj;
}

QList<OAICountrySubdivision> OAICountrySubdivisions::getCountrySubdivision() const {
    return m_country_subdivision;
}
void OAICountrySubdivisions::setCountrySubdivision(const QList<OAICountrySubdivision> &country_subdivision) {
    m_country_subdivision = country_subdivision;
    m_country_subdivision_isSet = true;
}

bool OAICountrySubdivisions::is_country_subdivision_Set() const{
    return m_country_subdivision_isSet;
}

bool OAICountrySubdivisions::is_country_subdivision_Valid() const{
    return m_country_subdivision_isValid;
}

bool OAICountrySubdivisions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_subdivision.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICountrySubdivisions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
