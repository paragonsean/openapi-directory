/**
 * Locations API
 * The Locations API provides access to MasterCard's ATM and Merchant location database
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayPass.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayPass::OAIPayPass(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayPass::OAIPayPass() {
    this->initializeModel();
}

OAIPayPass::~OAIPayPass() {}

void OAIPayPass::initializeModel() {

    m_concession_isSet = false;
    m_concession_isValid = false;

    m_drive_thru_isSet = false;
    m_drive_thru_isValid = false;

    m_fuel_pump_isSet = false;
    m_fuel_pump_isValid = false;

    m_pharmacy_isSet = false;
    m_pharmacy_isValid = false;

    m_r_register_isSet = false;
    m_r_register_isValid = false;

    m_ticketing_isSet = false;
    m_ticketing_isValid = false;

    m_toll_booth_isSet = false;
    m_toll_booth_isValid = false;

    m_vending_machine_isSet = false;
    m_vending_machine_isValid = false;
}

void OAIPayPass::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPayPass::fromJsonObject(QJsonObject json) {

    m_concession_isValid = ::OpenAPI::fromJsonValue(m_concession, json[QString("Concession")]);
    m_concession_isSet = !json[QString("Concession")].isNull() && m_concession_isValid;

    m_drive_thru_isValid = ::OpenAPI::fromJsonValue(m_drive_thru, json[QString("DriveThru")]);
    m_drive_thru_isSet = !json[QString("DriveThru")].isNull() && m_drive_thru_isValid;

    m_fuel_pump_isValid = ::OpenAPI::fromJsonValue(m_fuel_pump, json[QString("FuelPump")]);
    m_fuel_pump_isSet = !json[QString("FuelPump")].isNull() && m_fuel_pump_isValid;

    m_pharmacy_isValid = ::OpenAPI::fromJsonValue(m_pharmacy, json[QString("Pharmacy")]);
    m_pharmacy_isSet = !json[QString("Pharmacy")].isNull() && m_pharmacy_isValid;

    m_r_register_isValid = ::OpenAPI::fromJsonValue(m_r_register, json[QString("Register")]);
    m_r_register_isSet = !json[QString("Register")].isNull() && m_r_register_isValid;

    m_ticketing_isValid = ::OpenAPI::fromJsonValue(m_ticketing, json[QString("Ticketing")]);
    m_ticketing_isSet = !json[QString("Ticketing")].isNull() && m_ticketing_isValid;

    m_toll_booth_isValid = ::OpenAPI::fromJsonValue(m_toll_booth, json[QString("TollBooth")]);
    m_toll_booth_isSet = !json[QString("TollBooth")].isNull() && m_toll_booth_isValid;

    m_vending_machine_isValid = ::OpenAPI::fromJsonValue(m_vending_machine, json[QString("VendingMachine")]);
    m_vending_machine_isSet = !json[QString("VendingMachine")].isNull() && m_vending_machine_isValid;
}

QString OAIPayPass::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPayPass::asJsonObject() const {
    QJsonObject obj;
    if (m_concession_isSet) {
        obj.insert(QString("Concession"), ::OpenAPI::toJsonValue(m_concession));
    }
    if (m_drive_thru_isSet) {
        obj.insert(QString("DriveThru"), ::OpenAPI::toJsonValue(m_drive_thru));
    }
    if (m_fuel_pump_isSet) {
        obj.insert(QString("FuelPump"), ::OpenAPI::toJsonValue(m_fuel_pump));
    }
    if (m_pharmacy_isSet) {
        obj.insert(QString("Pharmacy"), ::OpenAPI::toJsonValue(m_pharmacy));
    }
    if (m_r_register_isSet) {
        obj.insert(QString("Register"), ::OpenAPI::toJsonValue(m_r_register));
    }
    if (m_ticketing_isSet) {
        obj.insert(QString("Ticketing"), ::OpenAPI::toJsonValue(m_ticketing));
    }
    if (m_toll_booth_isSet) {
        obj.insert(QString("TollBooth"), ::OpenAPI::toJsonValue(m_toll_booth));
    }
    if (m_vending_machine_isSet) {
        obj.insert(QString("VendingMachine"), ::OpenAPI::toJsonValue(m_vending_machine));
    }
    return obj;
}

bool OAIPayPass::isConcession() const {
    return m_concession;
}
void OAIPayPass::setConcession(const bool &concession) {
    m_concession = concession;
    m_concession_isSet = true;
}

bool OAIPayPass::is_concession_Set() const{
    return m_concession_isSet;
}

bool OAIPayPass::is_concession_Valid() const{
    return m_concession_isValid;
}

bool OAIPayPass::isDriveThru() const {
    return m_drive_thru;
}
void OAIPayPass::setDriveThru(const bool &drive_thru) {
    m_drive_thru = drive_thru;
    m_drive_thru_isSet = true;
}

bool OAIPayPass::is_drive_thru_Set() const{
    return m_drive_thru_isSet;
}

bool OAIPayPass::is_drive_thru_Valid() const{
    return m_drive_thru_isValid;
}

bool OAIPayPass::isFuelPump() const {
    return m_fuel_pump;
}
void OAIPayPass::setFuelPump(const bool &fuel_pump) {
    m_fuel_pump = fuel_pump;
    m_fuel_pump_isSet = true;
}

bool OAIPayPass::is_fuel_pump_Set() const{
    return m_fuel_pump_isSet;
}

bool OAIPayPass::is_fuel_pump_Valid() const{
    return m_fuel_pump_isValid;
}

bool OAIPayPass::isPharmacy() const {
    return m_pharmacy;
}
void OAIPayPass::setPharmacy(const bool &pharmacy) {
    m_pharmacy = pharmacy;
    m_pharmacy_isSet = true;
}

bool OAIPayPass::is_pharmacy_Set() const{
    return m_pharmacy_isSet;
}

bool OAIPayPass::is_pharmacy_Valid() const{
    return m_pharmacy_isValid;
}

bool OAIPayPass::isRRegister() const {
    return m_r_register;
}
void OAIPayPass::setRRegister(const bool &r_register) {
    m_r_register = r_register;
    m_r_register_isSet = true;
}

bool OAIPayPass::is_r_register_Set() const{
    return m_r_register_isSet;
}

bool OAIPayPass::is_r_register_Valid() const{
    return m_r_register_isValid;
}

bool OAIPayPass::isTicketing() const {
    return m_ticketing;
}
void OAIPayPass::setTicketing(const bool &ticketing) {
    m_ticketing = ticketing;
    m_ticketing_isSet = true;
}

bool OAIPayPass::is_ticketing_Set() const{
    return m_ticketing_isSet;
}

bool OAIPayPass::is_ticketing_Valid() const{
    return m_ticketing_isValid;
}

bool OAIPayPass::isTollBooth() const {
    return m_toll_booth;
}
void OAIPayPass::setTollBooth(const bool &toll_booth) {
    m_toll_booth = toll_booth;
    m_toll_booth_isSet = true;
}

bool OAIPayPass::is_toll_booth_Set() const{
    return m_toll_booth_isSet;
}

bool OAIPayPass::is_toll_booth_Valid() const{
    return m_toll_booth_isValid;
}

bool OAIPayPass::isVendingMachine() const {
    return m_vending_machine;
}
void OAIPayPass::setVendingMachine(const bool &vending_machine) {
    m_vending_machine = vending_machine;
    m_vending_machine_isSet = true;
}

bool OAIPayPass::is_vending_machine_Set() const{
    return m_vending_machine_isSet;
}

bool OAIPayPass::is_vending_machine_Valid() const{
    return m_vending_machine_isValid;
}

bool OAIPayPass::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_concession_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drive_thru_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fuel_pump_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pharmacy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_register_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticketing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_toll_booth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vending_machine_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPayPass::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
