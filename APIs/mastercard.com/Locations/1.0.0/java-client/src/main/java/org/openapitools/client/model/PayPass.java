/*
 * Locations API
 * The Locations API provides access to MasterCard's ATM and Merchant location database
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PayPass
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:37.866161-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PayPass {
  public static final String SERIALIZED_NAME_CONCESSION = "Concession";
  @SerializedName(SERIALIZED_NAME_CONCESSION)
  private Boolean concession;

  public static final String SERIALIZED_NAME_DRIVE_THRU = "DriveThru";
  @SerializedName(SERIALIZED_NAME_DRIVE_THRU)
  private Boolean driveThru;

  public static final String SERIALIZED_NAME_FUEL_PUMP = "FuelPump";
  @SerializedName(SERIALIZED_NAME_FUEL_PUMP)
  private Boolean fuelPump;

  public static final String SERIALIZED_NAME_PHARMACY = "Pharmacy";
  @SerializedName(SERIALIZED_NAME_PHARMACY)
  private Boolean pharmacy;

  public static final String SERIALIZED_NAME_REGISTER = "Register";
  @SerializedName(SERIALIZED_NAME_REGISTER)
  private Boolean register;

  public static final String SERIALIZED_NAME_TICKETING = "Ticketing";
  @SerializedName(SERIALIZED_NAME_TICKETING)
  private Boolean ticketing;

  public static final String SERIALIZED_NAME_TOLL_BOOTH = "TollBooth";
  @SerializedName(SERIALIZED_NAME_TOLL_BOOTH)
  private Boolean tollBooth;

  public static final String SERIALIZED_NAME_VENDING_MACHINE = "VendingMachine";
  @SerializedName(SERIALIZED_NAME_VENDING_MACHINE)
  private Boolean vendingMachine;

  public PayPass() {
  }

  public PayPass concession(Boolean concession) {
    this.concession = concession;
    return this;
  }

  /**
   * Boolean value which indicates if the concession area is equipped with a PayPass card reader.
   * @return concession
   */
  @javax.annotation.Nullable
  public Boolean getConcession() {
    return concession;
  }

  public void setConcession(Boolean concession) {
    this.concession = concession;
  }


  public PayPass driveThru(Boolean driveThru) {
    this.driveThru = driveThru;
    return this;
  }

  /**
   * Boolean value which indicates if the drive thru is equipped with a PayPass card reader.
   * @return driveThru
   */
  @javax.annotation.Nullable
  public Boolean getDriveThru() {
    return driveThru;
  }

  public void setDriveThru(Boolean driveThru) {
    this.driveThru = driveThru;
  }


  public PayPass fuelPump(Boolean fuelPump) {
    this.fuelPump = fuelPump;
    return this;
  }

  /**
   * Boolean value which indicates if the fuel pump is equipped with a PayPass card reader.
   * @return fuelPump
   */
  @javax.annotation.Nullable
  public Boolean getFuelPump() {
    return fuelPump;
  }

  public void setFuelPump(Boolean fuelPump) {
    this.fuelPump = fuelPump;
  }


  public PayPass pharmacy(Boolean pharmacy) {
    this.pharmacy = pharmacy;
    return this;
  }

  /**
   * Boolean value which indicates if the pharmacy is equipped with a PayPass card reader.
   * @return pharmacy
   */
  @javax.annotation.Nullable
  public Boolean getPharmacy() {
    return pharmacy;
  }

  public void setPharmacy(Boolean pharmacy) {
    this.pharmacy = pharmacy;
  }


  public PayPass register(Boolean register) {
    this.register = register;
    return this;
  }

  /**
   * Boolean value which indicates if the register is equipped with a PayPass card reader.
   * @return register
   */
  @javax.annotation.Nullable
  public Boolean getRegister() {
    return register;
  }

  public void setRegister(Boolean register) {
    this.register = register;
  }


  public PayPass ticketing(Boolean ticketing) {
    this.ticketing = ticketing;
    return this;
  }

  /**
   * Boolean value which indicates if the ticketing area is equipped with a PayPass card reader.
   * @return ticketing
   */
  @javax.annotation.Nullable
  public Boolean getTicketing() {
    return ticketing;
  }

  public void setTicketing(Boolean ticketing) {
    this.ticketing = ticketing;
  }


  public PayPass tollBooth(Boolean tollBooth) {
    this.tollBooth = tollBooth;
    return this;
  }

  /**
   * Boolean value which indicates if the toll booth is equipped with a PayPass card reader.
   * @return tollBooth
   */
  @javax.annotation.Nullable
  public Boolean getTollBooth() {
    return tollBooth;
  }

  public void setTollBooth(Boolean tollBooth) {
    this.tollBooth = tollBooth;
  }


  public PayPass vendingMachine(Boolean vendingMachine) {
    this.vendingMachine = vendingMachine;
    return this;
  }

  /**
   * Boolean value which indicates if the vending machine is equipped with a PayPass card reader.
   * @return vendingMachine
   */
  @javax.annotation.Nullable
  public Boolean getVendingMachine() {
    return vendingMachine;
  }

  public void setVendingMachine(Boolean vendingMachine) {
    this.vendingMachine = vendingMachine;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayPass payPass = (PayPass) o;
    return Objects.equals(this.concession, payPass.concession) &&
        Objects.equals(this.driveThru, payPass.driveThru) &&
        Objects.equals(this.fuelPump, payPass.fuelPump) &&
        Objects.equals(this.pharmacy, payPass.pharmacy) &&
        Objects.equals(this.register, payPass.register) &&
        Objects.equals(this.ticketing, payPass.ticketing) &&
        Objects.equals(this.tollBooth, payPass.tollBooth) &&
        Objects.equals(this.vendingMachine, payPass.vendingMachine);
  }

  @Override
  public int hashCode() {
    return Objects.hash(concession, driveThru, fuelPump, pharmacy, register, ticketing, tollBooth, vendingMachine);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayPass {\n");
    sb.append("    concession: ").append(toIndentedString(concession)).append("\n");
    sb.append("    driveThru: ").append(toIndentedString(driveThru)).append("\n");
    sb.append("    fuelPump: ").append(toIndentedString(fuelPump)).append("\n");
    sb.append("    pharmacy: ").append(toIndentedString(pharmacy)).append("\n");
    sb.append("    register: ").append(toIndentedString(register)).append("\n");
    sb.append("    ticketing: ").append(toIndentedString(ticketing)).append("\n");
    sb.append("    tollBooth: ").append(toIndentedString(tollBooth)).append("\n");
    sb.append("    vendingMachine: ").append(toIndentedString(vendingMachine)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Concession");
    openapiFields.add("DriveThru");
    openapiFields.add("FuelPump");
    openapiFields.add("Pharmacy");
    openapiFields.add("Register");
    openapiFields.add("Ticketing");
    openapiFields.add("TollBooth");
    openapiFields.add("VendingMachine");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PayPass
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PayPass.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayPass is not found in the empty JSON string", PayPass.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PayPass.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PayPass` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayPass.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayPass' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayPass> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayPass.class));

       return (TypeAdapter<T>) new TypeAdapter<PayPass>() {
           @Override
           public void write(JsonWriter out, PayPass value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PayPass read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PayPass given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PayPass
   * @throws IOException if the JSON string is invalid with respect to PayPass
   */
  public static PayPass fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayPass.class);
  }

  /**
   * Convert an instance of PayPass to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

