/*
 * Locations API
 * The Locations API provides access to MasterCard's ATM and Merchant location database
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.MerchantsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MerchantLocationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MerchantLocationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MerchantLocationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for merchantsV1MerchantGet
     * @param details Type of merchant location. Options are \&quot;acceptance.paypass\&quot; \&quot;topup.repower\&quot; \&quot;products.prepaidtravelcard\&quot; \&quot;offers.easysavings\&quot; and \&quot;features.cashback\&quot;. Cash Back is currently only available in the US. (required)
     * @param pageOffset Zero-based offset where the response will start. The actual start position is this value +1. An offset of 10 starts at item 11. Combined with the PageLength option this allows pagination to be supported through the service requests. (required)
     * @param pageLength Maximum number of items to retrieve within the current \&quot;page\&quot; of results. (required)
     * @param category Category of the merchant location. See the Categories (Merchant) resource for a list of valid categories. This parameter is only valid for merchant queries with Details &#x3D; \&quot;acceptance.paypass\&quot; or \&quot;features.cashback\&quot;. (optional)
     * @param addressLine1 Line 1 of the street address for the merchant location.  Usually includes the street number and name. This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter and either City parameter or PostalCode parameter. (optional)
     * @param addressLine2 Line 2 of the street address usually an apartment number or suite number. This parameter is used rarely and is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter and either City parameter or PostalCode parameter. (optional)
     * @param city Name of the city for a merchant location.  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter. (optional)
     * @param countrySubdivision State or province for a merchant location (only supported for US and Canada locations).  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter. (optional)
     * @param postalCode Zip code or postal code for a merchant location.  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter. (optional)
     * @param country Any three digit country code for an ATM location.  Valid values are Three digit alpha country code as defined in ISO 3166-1.  This parameter is ignored if latitude and longitude are provided. This parameter is required if any other address information is provided including AddressLine1 AddressLine2 City PostalCode or CountrySubdivision. By default we supply ATM location data for United States ATMs for up to twenty-five records per request. (optional)
     * @param latitude Latitude of a merchant location.  If latitude is provided longitude must also be provided. (optional)
     * @param longitude Longitude of a merchant location.  If longitude is provided latitude must also be provided. (optional)
     * @param distanceUnit Indicates the unit for the radius as well as the units of the distance of each location from the basepoint in the response. (optional)
     * @param radius This is the radius from the search point in the distance unit you set.  For example if you want to search for locations within 50 miles of a certain point you would set DistanceUnit&#x3D;mile and Radius&#x3D;50.  This parameter is ignored in non-geocoded countries. (optional)
     * @param offerMerchantID Unique identifier that represents the merhcant sponsor of an offer. Any valid merchant ID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Merchant locations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantsV1MerchantGetCall(String details, Integer pageOffset, Integer pageLength, String category, String addressLine1, String addressLine2, String city, String countrySubdivision, String postalCode, String country, Double latitude, Double longitude, String distanceUnit, Integer radius, String offerMerchantID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchants/v1/merchant";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Details", details));
        }

        if (pageOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageOffset", pageOffset));
        }

        if (pageLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageLength", pageLength));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Category", category));
        }

        if (addressLine1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AddressLine1", addressLine1));
        }

        if (addressLine2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AddressLine2", addressLine2));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("City", city));
        }

        if (countrySubdivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CountrySubdivision", countrySubdivision));
        }

        if (postalCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PostalCode", postalCode));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Country", country));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Longitude", longitude));
        }

        if (distanceUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DistanceUnit", distanceUnit));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Radius", radius));
        }

        if (offerMerchantID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OfferMerchantID", offerMerchantID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call merchantsV1MerchantGetValidateBeforeCall(String details, Integer pageOffset, Integer pageLength, String category, String addressLine1, String addressLine2, String city, String countrySubdivision, String postalCode, String country, Double latitude, Double longitude, String distanceUnit, Integer radius, String offerMerchantID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'details' is set
        if (details == null) {
            throw new ApiException("Missing the required parameter 'details' when calling merchantsV1MerchantGet(Async)");
        }

        // verify the required parameter 'pageOffset' is set
        if (pageOffset == null) {
            throw new ApiException("Missing the required parameter 'pageOffset' when calling merchantsV1MerchantGet(Async)");
        }

        // verify the required parameter 'pageLength' is set
        if (pageLength == null) {
            throw new ApiException("Missing the required parameter 'pageLength' when calling merchantsV1MerchantGet(Async)");
        }

        return merchantsV1MerchantGetCall(details, pageOffset, pageLength, category, addressLine1, addressLine2, city, countrySubdivision, postalCode, country, latitude, longitude, distanceUnit, radius, offerMerchantID, _callback);

    }

    /**
     * Returns merchant location information for merchants offering the following services: accept contactless-enabled cards and devices, allow customers to add money to an eligible MasterCard or Maestro prepaid card, issue MasterCard Prepaid Travel cards, participate in the MasterCard Easy Savings program, and offer cash at checkout when paying with a Debit MasterCard or Maestro Card. 
     * Returns merchant location information for merchants offering the following services: accept contactless-enabled cards and devices, allow customers to add money to an eligible MasterCard or Maestro prepaid card, issue MasterCard Prepaid Travel cards, participate in the MasterCard Easy Savings program, and offer cash at checkout when paying with a Debit MasterCard or Maestro Card. 
     * @param details Type of merchant location. Options are \&quot;acceptance.paypass\&quot; \&quot;topup.repower\&quot; \&quot;products.prepaidtravelcard\&quot; \&quot;offers.easysavings\&quot; and \&quot;features.cashback\&quot;. Cash Back is currently only available in the US. (required)
     * @param pageOffset Zero-based offset where the response will start. The actual start position is this value +1. An offset of 10 starts at item 11. Combined with the PageLength option this allows pagination to be supported through the service requests. (required)
     * @param pageLength Maximum number of items to retrieve within the current \&quot;page\&quot; of results. (required)
     * @param category Category of the merchant location. See the Categories (Merchant) resource for a list of valid categories. This parameter is only valid for merchant queries with Details &#x3D; \&quot;acceptance.paypass\&quot; or \&quot;features.cashback\&quot;. (optional)
     * @param addressLine1 Line 1 of the street address for the merchant location.  Usually includes the street number and name. This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter and either City parameter or PostalCode parameter. (optional)
     * @param addressLine2 Line 2 of the street address usually an apartment number or suite number. This parameter is used rarely and is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter and either City parameter or PostalCode parameter. (optional)
     * @param city Name of the city for a merchant location.  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter. (optional)
     * @param countrySubdivision State or province for a merchant location (only supported for US and Canada locations).  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter. (optional)
     * @param postalCode Zip code or postal code for a merchant location.  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter. (optional)
     * @param country Any three digit country code for an ATM location.  Valid values are Three digit alpha country code as defined in ISO 3166-1.  This parameter is ignored if latitude and longitude are provided. This parameter is required if any other address information is provided including AddressLine1 AddressLine2 City PostalCode or CountrySubdivision. By default we supply ATM location data for United States ATMs for up to twenty-five records per request. (optional)
     * @param latitude Latitude of a merchant location.  If latitude is provided longitude must also be provided. (optional)
     * @param longitude Longitude of a merchant location.  If longitude is provided latitude must also be provided. (optional)
     * @param distanceUnit Indicates the unit for the radius as well as the units of the distance of each location from the basepoint in the response. (optional)
     * @param radius This is the radius from the search point in the distance unit you set.  For example if you want to search for locations within 50 miles of a certain point you would set DistanceUnit&#x3D;mile and Radius&#x3D;50.  This parameter is ignored in non-geocoded countries. (optional)
     * @param offerMerchantID Unique identifier that represents the merhcant sponsor of an offer. Any valid merchant ID. (optional)
     * @return MerchantsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Merchant locations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public MerchantsResponse merchantsV1MerchantGet(String details, Integer pageOffset, Integer pageLength, String category, String addressLine1, String addressLine2, String city, String countrySubdivision, String postalCode, String country, Double latitude, Double longitude, String distanceUnit, Integer radius, String offerMerchantID) throws ApiException {
        ApiResponse<MerchantsResponse> localVarResp = merchantsV1MerchantGetWithHttpInfo(details, pageOffset, pageLength, category, addressLine1, addressLine2, city, countrySubdivision, postalCode, country, latitude, longitude, distanceUnit, radius, offerMerchantID);
        return localVarResp.getData();
    }

    /**
     * Returns merchant location information for merchants offering the following services: accept contactless-enabled cards and devices, allow customers to add money to an eligible MasterCard or Maestro prepaid card, issue MasterCard Prepaid Travel cards, participate in the MasterCard Easy Savings program, and offer cash at checkout when paying with a Debit MasterCard or Maestro Card. 
     * Returns merchant location information for merchants offering the following services: accept contactless-enabled cards and devices, allow customers to add money to an eligible MasterCard or Maestro prepaid card, issue MasterCard Prepaid Travel cards, participate in the MasterCard Easy Savings program, and offer cash at checkout when paying with a Debit MasterCard or Maestro Card. 
     * @param details Type of merchant location. Options are \&quot;acceptance.paypass\&quot; \&quot;topup.repower\&quot; \&quot;products.prepaidtravelcard\&quot; \&quot;offers.easysavings\&quot; and \&quot;features.cashback\&quot;. Cash Back is currently only available in the US. (required)
     * @param pageOffset Zero-based offset where the response will start. The actual start position is this value +1. An offset of 10 starts at item 11. Combined with the PageLength option this allows pagination to be supported through the service requests. (required)
     * @param pageLength Maximum number of items to retrieve within the current \&quot;page\&quot; of results. (required)
     * @param category Category of the merchant location. See the Categories (Merchant) resource for a list of valid categories. This parameter is only valid for merchant queries with Details &#x3D; \&quot;acceptance.paypass\&quot; or \&quot;features.cashback\&quot;. (optional)
     * @param addressLine1 Line 1 of the street address for the merchant location.  Usually includes the street number and name. This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter and either City parameter or PostalCode parameter. (optional)
     * @param addressLine2 Line 2 of the street address usually an apartment number or suite number. This parameter is used rarely and is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter and either City parameter or PostalCode parameter. (optional)
     * @param city Name of the city for a merchant location.  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter. (optional)
     * @param countrySubdivision State or province for a merchant location (only supported for US and Canada locations).  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter. (optional)
     * @param postalCode Zip code or postal code for a merchant location.  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter. (optional)
     * @param country Any three digit country code for an ATM location.  Valid values are Three digit alpha country code as defined in ISO 3166-1.  This parameter is ignored if latitude and longitude are provided. This parameter is required if any other address information is provided including AddressLine1 AddressLine2 City PostalCode or CountrySubdivision. By default we supply ATM location data for United States ATMs for up to twenty-five records per request. (optional)
     * @param latitude Latitude of a merchant location.  If latitude is provided longitude must also be provided. (optional)
     * @param longitude Longitude of a merchant location.  If longitude is provided latitude must also be provided. (optional)
     * @param distanceUnit Indicates the unit for the radius as well as the units of the distance of each location from the basepoint in the response. (optional)
     * @param radius This is the radius from the search point in the distance unit you set.  For example if you want to search for locations within 50 miles of a certain point you would set DistanceUnit&#x3D;mile and Radius&#x3D;50.  This parameter is ignored in non-geocoded countries. (optional)
     * @param offerMerchantID Unique identifier that represents the merhcant sponsor of an offer. Any valid merchant ID. (optional)
     * @return ApiResponse&lt;MerchantsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Merchant locations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantsResponse> merchantsV1MerchantGetWithHttpInfo(String details, Integer pageOffset, Integer pageLength, String category, String addressLine1, String addressLine2, String city, String countrySubdivision, String postalCode, String country, Double latitude, Double longitude, String distanceUnit, Integer radius, String offerMerchantID) throws ApiException {
        okhttp3.Call localVarCall = merchantsV1MerchantGetValidateBeforeCall(details, pageOffset, pageLength, category, addressLine1, addressLine2, city, countrySubdivision, postalCode, country, latitude, longitude, distanceUnit, radius, offerMerchantID, null);
        Type localVarReturnType = new TypeToken<MerchantsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns merchant location information for merchants offering the following services: accept contactless-enabled cards and devices, allow customers to add money to an eligible MasterCard or Maestro prepaid card, issue MasterCard Prepaid Travel cards, participate in the MasterCard Easy Savings program, and offer cash at checkout when paying with a Debit MasterCard or Maestro Card.  (asynchronously)
     * Returns merchant location information for merchants offering the following services: accept contactless-enabled cards and devices, allow customers to add money to an eligible MasterCard or Maestro prepaid card, issue MasterCard Prepaid Travel cards, participate in the MasterCard Easy Savings program, and offer cash at checkout when paying with a Debit MasterCard or Maestro Card. 
     * @param details Type of merchant location. Options are \&quot;acceptance.paypass\&quot; \&quot;topup.repower\&quot; \&quot;products.prepaidtravelcard\&quot; \&quot;offers.easysavings\&quot; and \&quot;features.cashback\&quot;. Cash Back is currently only available in the US. (required)
     * @param pageOffset Zero-based offset where the response will start. The actual start position is this value +1. An offset of 10 starts at item 11. Combined with the PageLength option this allows pagination to be supported through the service requests. (required)
     * @param pageLength Maximum number of items to retrieve within the current \&quot;page\&quot; of results. (required)
     * @param category Category of the merchant location. See the Categories (Merchant) resource for a list of valid categories. This parameter is only valid for merchant queries with Details &#x3D; \&quot;acceptance.paypass\&quot; or \&quot;features.cashback\&quot;. (optional)
     * @param addressLine1 Line 1 of the street address for the merchant location.  Usually includes the street number and name. This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter and either City parameter or PostalCode parameter. (optional)
     * @param addressLine2 Line 2 of the street address usually an apartment number or suite number. This parameter is used rarely and is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter and either City parameter or PostalCode parameter. (optional)
     * @param city Name of the city for a merchant location.  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter. (optional)
     * @param countrySubdivision State or province for a merchant location (only supported for US and Canada locations).  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter. (optional)
     * @param postalCode Zip code or postal code for a merchant location.  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter. (optional)
     * @param country Any three digit country code for an ATM location.  Valid values are Three digit alpha country code as defined in ISO 3166-1.  This parameter is ignored if latitude and longitude are provided. This parameter is required if any other address information is provided including AddressLine1 AddressLine2 City PostalCode or CountrySubdivision. By default we supply ATM location data for United States ATMs for up to twenty-five records per request. (optional)
     * @param latitude Latitude of a merchant location.  If latitude is provided longitude must also be provided. (optional)
     * @param longitude Longitude of a merchant location.  If longitude is provided latitude must also be provided. (optional)
     * @param distanceUnit Indicates the unit for the radius as well as the units of the distance of each location from the basepoint in the response. (optional)
     * @param radius This is the radius from the search point in the distance unit you set.  For example if you want to search for locations within 50 miles of a certain point you would set DistanceUnit&#x3D;mile and Radius&#x3D;50.  This parameter is ignored in non-geocoded countries. (optional)
     * @param offerMerchantID Unique identifier that represents the merhcant sponsor of an offer. Any valid merchant ID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of Merchant locations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantsV1MerchantGetAsync(String details, Integer pageOffset, Integer pageLength, String category, String addressLine1, String addressLine2, String city, String countrySubdivision, String postalCode, String country, Double latitude, Double longitude, String distanceUnit, Integer radius, String offerMerchantID, final ApiCallback<MerchantsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = merchantsV1MerchantGetValidateBeforeCall(details, pageOffset, pageLength, category, addressLine1, addressLine2, city, countrySubdivision, postalCode, country, latitude, longitude, distanceUnit, radius, offerMerchantID, _callback);
        Type localVarReturnType = new TypeToken<MerchantsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
