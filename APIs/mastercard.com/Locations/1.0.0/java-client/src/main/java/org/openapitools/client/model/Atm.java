/*
 * Locations API
 * The Locations API provides access to MasterCard's ATM and Merchant location database
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Location;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Atm
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:37.866161-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Atm {
  public static final String SERIALIZED_NAME_ACCESS_FEES = "AccessFees";
  @SerializedName(SERIALIZED_NAME_ACCESS_FEES)
  private String accessFees;

  public static final String SERIALIZED_NAME_AVAILABILITY = "Availability";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY)
  private String availability;

  public static final String SERIALIZED_NAME_CAMERA = "Camera";
  @SerializedName(SERIALIZED_NAME_CAMERA)
  private String camera;

  public static final String SERIALIZED_NAME_HANDICAP_ACCESSIBLE = "HandicapAccessible";
  @SerializedName(SERIALIZED_NAME_HANDICAP_ACCESSIBLE)
  private String handicapAccessible;

  public static final String SERIALIZED_NAME_INTERNATIONAL_MAESTRO_ACCEPTED = "InternationalMaestroAccepted";
  @SerializedName(SERIALIZED_NAME_INTERNATIONAL_MAESTRO_ACCEPTED)
  private Integer internationalMaestroAccepted;

  public static final String SERIALIZED_NAME_LOCATION = "Location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Location location;

  public static final String SERIALIZED_NAME_OWNER = "Owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_SHARED_DEPOSIT = "SharedDeposit";
  @SerializedName(SERIALIZED_NAME_SHARED_DEPOSIT)
  private String sharedDeposit;

  public static final String SERIALIZED_NAME_SPONSOR = "Sponsor";
  @SerializedName(SERIALIZED_NAME_SPONSOR)
  private String sponsor;

  public static final String SERIALIZED_NAME_SUPPORT_E_M_V = "SupportEMV";
  @SerializedName(SERIALIZED_NAME_SUPPORT_E_M_V)
  private Integer supportEMV;

  public static final String SERIALIZED_NAME_SURCHARGE_FREE_ALLIANCE = "SurchargeFreeAlliance";
  @SerializedName(SERIALIZED_NAME_SURCHARGE_FREE_ALLIANCE)
  private String surchargeFreeAlliance;

  public static final String SERIALIZED_NAME_SURCHARGE_FREE_ALLIANCE_NETWORK = "SurchargeFreeAllianceNetwork";
  @SerializedName(SERIALIZED_NAME_SURCHARGE_FREE_ALLIANCE_NETWORK)
  private String surchargeFreeAllianceNetwork;

  public Atm() {
  }

  public Atm accessFees(String accessFees) {
    this.accessFees = accessFees;
    return this;
  }

  /**
   * This value indicates under what conditions access fees are charged. Options are UNKNOWN, DOMESTIC, INTERNATIONAL, DOMESTIC_AND_INTERNATIONAL, NO_FEE.
   * @return accessFees
   */
  @javax.annotation.Nullable
  public String getAccessFees() {
    return accessFees;
  }

  public void setAccessFees(String accessFees) {
    this.accessFees = accessFees;
  }


  public Atm availability(String availability) {
    this.availability = availability;
    return this;
  }

  /**
   * This value indicates the availability hours of the ATM. Options are UNKNOWN, ALWAYS_AVAILABLE, BUSINESS_HOURS, IRREGULAR_HOURS.
   * @return availability
   */
  @javax.annotation.Nullable
  public String getAvailability() {
    return availability;
  }

  public void setAvailability(String availability) {
    this.availability = availability;
  }


  public Atm camera(String camera) {
    this.camera = camera;
    return this;
  }

  /**
   * This value indicates whether or not a security camera is present or near ATM. Options are UNKNOWN, YES, NO.
   * @return camera
   */
  @javax.annotation.Nullable
  public String getCamera() {
    return camera;
  }

  public void setCamera(String camera) {
    this.camera = camera;
  }


  public Atm handicapAccessible(String handicapAccessible) {
    this.handicapAccessible = handicapAccessible;
    return this;
  }

  /**
   * This value indicates whether or not the ATM is accessible by wheelchair. Options are UNKNOWN, YES, NO.
   * @return handicapAccessible
   */
  @javax.annotation.Nullable
  public String getHandicapAccessible() {
    return handicapAccessible;
  }

  public void setHandicapAccessible(String handicapAccessible) {
    this.handicapAccessible = handicapAccessible;
  }


  public Atm internationalMaestroAccepted(Integer internationalMaestroAccepted) {
    this.internationalMaestroAccepted = internationalMaestroAccepted;
    return this;
  }

  /**
   * This field will provide ATM Terminals which can still process Maestro transactions but are not yet EMV chip reader enabled. Information available only for USA and Argentina till October 2014. 1&#x3D;Yes.
   * @return internationalMaestroAccepted
   */
  @javax.annotation.Nullable
  public Integer getInternationalMaestroAccepted() {
    return internationalMaestroAccepted;
  }

  public void setInternationalMaestroAccepted(Integer internationalMaestroAccepted) {
    this.internationalMaestroAccepted = internationalMaestroAccepted;
  }


  public Atm location(Location location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public Location getLocation() {
    return location;
  }

  public void setLocation(Location location) {
    this.location = location;
  }


  public Atm owner(String owner) {
    this.owner = owner;
    return this;
  }

  /**
   * This is the DBA name of the financial institution affiliate or independent service organization.
   * @return owner
   */
  @javax.annotation.Nullable
  public String getOwner() {
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }


  public Atm sharedDeposit(String sharedDeposit) {
    this.sharedDeposit = sharedDeposit;
    return this;
  }

  /**
   * This value indicates whether or not the ATM participates in the MasterCard Shared Deposit network. Options are YES or NO.
   * @return sharedDeposit
   */
  @javax.annotation.Nullable
  public String getSharedDeposit() {
    return sharedDeposit;
  }

  public void setSharedDeposit(String sharedDeposit) {
    this.sharedDeposit = sharedDeposit;
  }


  public Atm sponsor(String sponsor) {
    this.sponsor = sponsor;
    return this;
  }

  /**
   * This is the legal or business name of the entity that sponsors the owner of the ATM into the MasterCard network.
   * @return sponsor
   */
  @javax.annotation.Nullable
  public String getSponsor() {
    return sponsor;
  }

  public void setSponsor(String sponsor) {
    this.sponsor = sponsor;
  }


  public Atm supportEMV(Integer supportEMV) {
    this.supportEMV = supportEMV;
    return this;
  }

  /**
   * This indicates whether the ATM has the ability to read chip cards or not. Options are 1 &#x3D; Yes 2 &#x3D; No or Empty &#x3D; Unknown.
   * @return supportEMV
   */
  @javax.annotation.Nullable
  public Integer getSupportEMV() {
    return supportEMV;
  }

  public void setSupportEMV(Integer supportEMV) {
    this.supportEMV = supportEMV;
  }


  public Atm surchargeFreeAlliance(String surchargeFreeAlliance) {
    this.surchargeFreeAlliance = surchargeFreeAlliance;
    return this;
  }

  /**
   * This value indicates whether or not the ATM participates in the MasterCard Shared (only) Surcharge Free Alliance network. Options are YES or NO.
   * @return surchargeFreeAlliance
   */
  @javax.annotation.Nullable
  public String getSurchargeFreeAlliance() {
    return surchargeFreeAlliance;
  }

  public void setSurchargeFreeAlliance(String surchargeFreeAlliance) {
    this.surchargeFreeAlliance = surchargeFreeAlliance;
  }


  public Atm surchargeFreeAllianceNetwork(String surchargeFreeAllianceNetwork) {
    this.surchargeFreeAllianceNetwork = surchargeFreeAllianceNetwork;
    return this;
  }

  /**
   * This value indicates whether or not the ATM participates in the MasterCard Shared (only) Surcharge Free Alliance network. Options are DOES_NOT_PARTICIPATE_IN_SFA, ALLPOINT_PREPAID, MONEYPASS_DEBIT, and ALL_SURCHARGE_FREE.
   * @return surchargeFreeAllianceNetwork
   */
  @javax.annotation.Nullable
  public String getSurchargeFreeAllianceNetwork() {
    return surchargeFreeAllianceNetwork;
  }

  public void setSurchargeFreeAllianceNetwork(String surchargeFreeAllianceNetwork) {
    this.surchargeFreeAllianceNetwork = surchargeFreeAllianceNetwork;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Atm atm = (Atm) o;
    return Objects.equals(this.accessFees, atm.accessFees) &&
        Objects.equals(this.availability, atm.availability) &&
        Objects.equals(this.camera, atm.camera) &&
        Objects.equals(this.handicapAccessible, atm.handicapAccessible) &&
        Objects.equals(this.internationalMaestroAccepted, atm.internationalMaestroAccepted) &&
        Objects.equals(this.location, atm.location) &&
        Objects.equals(this.owner, atm.owner) &&
        Objects.equals(this.sharedDeposit, atm.sharedDeposit) &&
        Objects.equals(this.sponsor, atm.sponsor) &&
        Objects.equals(this.supportEMV, atm.supportEMV) &&
        Objects.equals(this.surchargeFreeAlliance, atm.surchargeFreeAlliance) &&
        Objects.equals(this.surchargeFreeAllianceNetwork, atm.surchargeFreeAllianceNetwork);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessFees, availability, camera, handicapAccessible, internationalMaestroAccepted, location, owner, sharedDeposit, sponsor, supportEMV, surchargeFreeAlliance, surchargeFreeAllianceNetwork);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Atm {\n");
    sb.append("    accessFees: ").append(toIndentedString(accessFees)).append("\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("    camera: ").append(toIndentedString(camera)).append("\n");
    sb.append("    handicapAccessible: ").append(toIndentedString(handicapAccessible)).append("\n");
    sb.append("    internationalMaestroAccepted: ").append(toIndentedString(internationalMaestroAccepted)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    sharedDeposit: ").append(toIndentedString(sharedDeposit)).append("\n");
    sb.append("    sponsor: ").append(toIndentedString(sponsor)).append("\n");
    sb.append("    supportEMV: ").append(toIndentedString(supportEMV)).append("\n");
    sb.append("    surchargeFreeAlliance: ").append(toIndentedString(surchargeFreeAlliance)).append("\n");
    sb.append("    surchargeFreeAllianceNetwork: ").append(toIndentedString(surchargeFreeAllianceNetwork)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccessFees");
    openapiFields.add("Availability");
    openapiFields.add("Camera");
    openapiFields.add("HandicapAccessible");
    openapiFields.add("InternationalMaestroAccepted");
    openapiFields.add("Location");
    openapiFields.add("Owner");
    openapiFields.add("SharedDeposit");
    openapiFields.add("Sponsor");
    openapiFields.add("SupportEMV");
    openapiFields.add("SurchargeFreeAlliance");
    openapiFields.add("SurchargeFreeAllianceNetwork");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Atm
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Atm.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Atm is not found in the empty JSON string", Atm.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Atm.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Atm` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AccessFees") != null && !jsonObj.get("AccessFees").isJsonNull()) && !jsonObj.get("AccessFees").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccessFees` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccessFees").toString()));
      }
      if ((jsonObj.get("Availability") != null && !jsonObj.get("Availability").isJsonNull()) && !jsonObj.get("Availability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Availability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Availability").toString()));
      }
      if ((jsonObj.get("Camera") != null && !jsonObj.get("Camera").isJsonNull()) && !jsonObj.get("Camera").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Camera` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Camera").toString()));
      }
      if ((jsonObj.get("HandicapAccessible") != null && !jsonObj.get("HandicapAccessible").isJsonNull()) && !jsonObj.get("HandicapAccessible").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HandicapAccessible` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HandicapAccessible").toString()));
      }
      // validate the optional field `Location`
      if (jsonObj.get("Location") != null && !jsonObj.get("Location").isJsonNull()) {
        Location.validateJsonElement(jsonObj.get("Location"));
      }
      if ((jsonObj.get("Owner") != null && !jsonObj.get("Owner").isJsonNull()) && !jsonObj.get("Owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Owner").toString()));
      }
      if ((jsonObj.get("SharedDeposit") != null && !jsonObj.get("SharedDeposit").isJsonNull()) && !jsonObj.get("SharedDeposit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SharedDeposit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SharedDeposit").toString()));
      }
      if ((jsonObj.get("Sponsor") != null && !jsonObj.get("Sponsor").isJsonNull()) && !jsonObj.get("Sponsor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Sponsor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Sponsor").toString()));
      }
      if ((jsonObj.get("SurchargeFreeAlliance") != null && !jsonObj.get("SurchargeFreeAlliance").isJsonNull()) && !jsonObj.get("SurchargeFreeAlliance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SurchargeFreeAlliance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SurchargeFreeAlliance").toString()));
      }
      if ((jsonObj.get("SurchargeFreeAllianceNetwork") != null && !jsonObj.get("SurchargeFreeAllianceNetwork").isJsonNull()) && !jsonObj.get("SurchargeFreeAllianceNetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SurchargeFreeAllianceNetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SurchargeFreeAllianceNetwork").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Atm.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Atm' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Atm> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Atm.class));

       return (TypeAdapter<T>) new TypeAdapter<Atm>() {
           @Override
           public void write(JsonWriter out, Atm value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Atm read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Atm given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Atm
   * @throws IOException if the JSON string is invalid with respect to Atm
   */
  public static Atm fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Atm.class);
  }

  /**
   * Convert an instance of Atm to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

