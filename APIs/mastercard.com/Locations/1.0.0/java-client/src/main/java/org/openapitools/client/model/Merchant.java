/*
 * Locations API
 * The Locations API provides access to MasterCard's ATM and Merchant location database
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Acceptance;
import org.openapitools.client.model.Features;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.Products;
import org.openapitools.client.model.Topup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Merchant
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:37.866161-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Merchant {
  public static final String SERIALIZED_NAME_ACCEPTANCE = "Acceptance";
  @SerializedName(SERIALIZED_NAME_ACCEPTANCE)
  private Acceptance acceptance;

  public static final String SERIALIZED_NAME_CATEGORY = "Category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_FEATURES = "Features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private Features features;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOCATION = "Location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Location location;

  public static final String SERIALIZED_NAME_MERCHANT_OFFER_ID = "MerchantOfferId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_OFFER_ID)
  private String merchantOfferId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "PhoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_PRODUCTS = "Products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  private Products products;

  public static final String SERIALIZED_NAME_TOPUP = "Topup";
  @SerializedName(SERIALIZED_NAME_TOPUP)
  private Topup topup;

  public static final String SERIALIZED_NAME_WEBSITE_URL = "WebsiteUrl";
  @SerializedName(SERIALIZED_NAME_WEBSITE_URL)
  private String websiteUrl;

  public Merchant() {
  }

  public Merchant acceptance(Acceptance acceptance) {
    this.acceptance = acceptance;
    return this;
  }

  /**
   * Get acceptance
   * @return acceptance
   */
  @javax.annotation.Nullable
  public Acceptance getAcceptance() {
    return acceptance;
  }

  public void setAcceptance(Acceptance acceptance) {
    this.acceptance = acceptance;
  }


  public Merchant category(String category) {
    this.category = category;
    return this;
  }

  /**
   * Merchant&#39;s category.
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public Merchant features(Features features) {
    this.features = features;
    return this;
  }

  /**
   * Get features
   * @return features
   */
  @javax.annotation.Nullable
  public Features getFeatures() {
    return features;
  }

  public void setFeatures(Features features) {
    this.features = features;
  }


  public Merchant id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Numerical merchant identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Merchant location(Location location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public Location getLocation() {
    return location;
  }

  public void setLocation(Location location) {
    this.location = location;
  }


  public Merchant merchantOfferId(String merchantOfferId) {
    this.merchantOfferId = merchantOfferId;
    return this;
  }

  /**
   * Merchant&#39;s Easy Savings Offer Id
   * @return merchantOfferId
   */
  @javax.annotation.Nullable
  public String getMerchantOfferId() {
    return merchantOfferId;
  }

  public void setMerchantOfferId(String merchantOfferId) {
    this.merchantOfferId = merchantOfferId;
  }


  public Merchant name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the merchant
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Merchant phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Merchant&#39;s phone number
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public Merchant products(Products products) {
    this.products = products;
    return this;
  }

  /**
   * Get products
   * @return products
   */
  @javax.annotation.Nullable
  public Products getProducts() {
    return products;
  }

  public void setProducts(Products products) {
    this.products = products;
  }


  public Merchant topup(Topup topup) {
    this.topup = topup;
    return this;
  }

  /**
   * Get topup
   * @return topup
   */
  @javax.annotation.Nullable
  public Topup getTopup() {
    return topup;
  }

  public void setTopup(Topup topup) {
    this.topup = topup;
  }


  public Merchant websiteUrl(String websiteUrl) {
    this.websiteUrl = websiteUrl;
    return this;
  }

  /**
   * Merchant&#39;s website URL address.
   * @return websiteUrl
   */
  @javax.annotation.Nullable
  public String getWebsiteUrl() {
    return websiteUrl;
  }

  public void setWebsiteUrl(String websiteUrl) {
    this.websiteUrl = websiteUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Merchant merchant = (Merchant) o;
    return Objects.equals(this.acceptance, merchant.acceptance) &&
        Objects.equals(this.category, merchant.category) &&
        Objects.equals(this.features, merchant.features) &&
        Objects.equals(this.id, merchant.id) &&
        Objects.equals(this.location, merchant.location) &&
        Objects.equals(this.merchantOfferId, merchant.merchantOfferId) &&
        Objects.equals(this.name, merchant.name) &&
        Objects.equals(this.phoneNumber, merchant.phoneNumber) &&
        Objects.equals(this.products, merchant.products) &&
        Objects.equals(this.topup, merchant.topup) &&
        Objects.equals(this.websiteUrl, merchant.websiteUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptance, category, features, id, location, merchantOfferId, name, phoneNumber, products, topup, websiteUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Merchant {\n");
    sb.append("    acceptance: ").append(toIndentedString(acceptance)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    merchantOfferId: ").append(toIndentedString(merchantOfferId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    topup: ").append(toIndentedString(topup)).append("\n");
    sb.append("    websiteUrl: ").append(toIndentedString(websiteUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Acceptance");
    openapiFields.add("Category");
    openapiFields.add("Features");
    openapiFields.add("Id");
    openapiFields.add("Location");
    openapiFields.add("MerchantOfferId");
    openapiFields.add("Name");
    openapiFields.add("PhoneNumber");
    openapiFields.add("Products");
    openapiFields.add("Topup");
    openapiFields.add("WebsiteUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Merchant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Merchant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Merchant is not found in the empty JSON string", Merchant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Merchant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Merchant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Acceptance`
      if (jsonObj.get("Acceptance") != null && !jsonObj.get("Acceptance").isJsonNull()) {
        Acceptance.validateJsonElement(jsonObj.get("Acceptance"));
      }
      if ((jsonObj.get("Category") != null && !jsonObj.get("Category").isJsonNull()) && !jsonObj.get("Category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Category").toString()));
      }
      // validate the optional field `Features`
      if (jsonObj.get("Features") != null && !jsonObj.get("Features").isJsonNull()) {
        Features.validateJsonElement(jsonObj.get("Features"));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      // validate the optional field `Location`
      if (jsonObj.get("Location") != null && !jsonObj.get("Location").isJsonNull()) {
        Location.validateJsonElement(jsonObj.get("Location"));
      }
      if ((jsonObj.get("MerchantOfferId") != null && !jsonObj.get("MerchantOfferId").isJsonNull()) && !jsonObj.get("MerchantOfferId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MerchantOfferId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MerchantOfferId").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("PhoneNumber") != null && !jsonObj.get("PhoneNumber").isJsonNull()) && !jsonObj.get("PhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PhoneNumber").toString()));
      }
      // validate the optional field `Products`
      if (jsonObj.get("Products") != null && !jsonObj.get("Products").isJsonNull()) {
        Products.validateJsonElement(jsonObj.get("Products"));
      }
      // validate the optional field `Topup`
      if (jsonObj.get("Topup") != null && !jsonObj.get("Topup").isJsonNull()) {
        Topup.validateJsonElement(jsonObj.get("Topup"));
      }
      if ((jsonObj.get("WebsiteUrl") != null && !jsonObj.get("WebsiteUrl").isJsonNull()) && !jsonObj.get("WebsiteUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WebsiteUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WebsiteUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Merchant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Merchant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Merchant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Merchant.class));

       return (TypeAdapter<T>) new TypeAdapter<Merchant>() {
           @Override
           public void write(JsonWriter out, Merchant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Merchant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Merchant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Merchant
   * @throws IOException if the JSON string is invalid with respect to Merchant
   */
  public static Merchant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Merchant.class);
  }

  /**
   * Convert an instance of Merchant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

