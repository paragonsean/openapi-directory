# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.location import Location
from openapi_server import util


class Atm(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_fees: str=None, availability: str=None, camera: str=None, handicap_accessible: str=None, international_maestro_accepted: int=None, location: Location=None, owner: str=None, shared_deposit: str=None, sponsor: str=None, support_emv: int=None, surcharge_free_alliance: str=None, surcharge_free_alliance_network: str=None):
        """Atm - a model defined in OpenAPI

        :param access_fees: The access_fees of this Atm.
        :param availability: The availability of this Atm.
        :param camera: The camera of this Atm.
        :param handicap_accessible: The handicap_accessible of this Atm.
        :param international_maestro_accepted: The international_maestro_accepted of this Atm.
        :param location: The location of this Atm.
        :param owner: The owner of this Atm.
        :param shared_deposit: The shared_deposit of this Atm.
        :param sponsor: The sponsor of this Atm.
        :param support_emv: The support_emv of this Atm.
        :param surcharge_free_alliance: The surcharge_free_alliance of this Atm.
        :param surcharge_free_alliance_network: The surcharge_free_alliance_network of this Atm.
        """
        self.openapi_types = {
            'access_fees': str,
            'availability': str,
            'camera': str,
            'handicap_accessible': str,
            'international_maestro_accepted': int,
            'location': Location,
            'owner': str,
            'shared_deposit': str,
            'sponsor': str,
            'support_emv': int,
            'surcharge_free_alliance': str,
            'surcharge_free_alliance_network': str
        }

        self.attribute_map = {
            'access_fees': 'AccessFees',
            'availability': 'Availability',
            'camera': 'Camera',
            'handicap_accessible': 'HandicapAccessible',
            'international_maestro_accepted': 'InternationalMaestroAccepted',
            'location': 'Location',
            'owner': 'Owner',
            'shared_deposit': 'SharedDeposit',
            'sponsor': 'Sponsor',
            'support_emv': 'SupportEMV',
            'surcharge_free_alliance': 'SurchargeFreeAlliance',
            'surcharge_free_alliance_network': 'SurchargeFreeAllianceNetwork'
        }

        self._access_fees = access_fees
        self._availability = availability
        self._camera = camera
        self._handicap_accessible = handicap_accessible
        self._international_maestro_accepted = international_maestro_accepted
        self._location = location
        self._owner = owner
        self._shared_deposit = shared_deposit
        self._sponsor = sponsor
        self._support_emv = support_emv
        self._surcharge_free_alliance = surcharge_free_alliance
        self._surcharge_free_alliance_network = surcharge_free_alliance_network

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Atm':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Atm of this Atm.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_fees(self):
        """Gets the access_fees of this Atm.

        This value indicates under what conditions access fees are charged. Options are UNKNOWN, DOMESTIC, INTERNATIONAL, DOMESTIC_AND_INTERNATIONAL, NO_FEE.

        :return: The access_fees of this Atm.
        :rtype: str
        """
        return self._access_fees

    @access_fees.setter
    def access_fees(self, access_fees):
        """Sets the access_fees of this Atm.

        This value indicates under what conditions access fees are charged. Options are UNKNOWN, DOMESTIC, INTERNATIONAL, DOMESTIC_AND_INTERNATIONAL, NO_FEE.

        :param access_fees: The access_fees of this Atm.
        :type access_fees: str
        """

        self._access_fees = access_fees

    @property
    def availability(self):
        """Gets the availability of this Atm.

        This value indicates the availability hours of the ATM. Options are UNKNOWN, ALWAYS_AVAILABLE, BUSINESS_HOURS, IRREGULAR_HOURS.

        :return: The availability of this Atm.
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this Atm.

        This value indicates the availability hours of the ATM. Options are UNKNOWN, ALWAYS_AVAILABLE, BUSINESS_HOURS, IRREGULAR_HOURS.

        :param availability: The availability of this Atm.
        :type availability: str
        """

        self._availability = availability

    @property
    def camera(self):
        """Gets the camera of this Atm.

        This value indicates whether or not a security camera is present or near ATM. Options are UNKNOWN, YES, NO.

        :return: The camera of this Atm.
        :rtype: str
        """
        return self._camera

    @camera.setter
    def camera(self, camera):
        """Sets the camera of this Atm.

        This value indicates whether or not a security camera is present or near ATM. Options are UNKNOWN, YES, NO.

        :param camera: The camera of this Atm.
        :type camera: str
        """

        self._camera = camera

    @property
    def handicap_accessible(self):
        """Gets the handicap_accessible of this Atm.

        This value indicates whether or not the ATM is accessible by wheelchair. Options are UNKNOWN, YES, NO.

        :return: The handicap_accessible of this Atm.
        :rtype: str
        """
        return self._handicap_accessible

    @handicap_accessible.setter
    def handicap_accessible(self, handicap_accessible):
        """Sets the handicap_accessible of this Atm.

        This value indicates whether or not the ATM is accessible by wheelchair. Options are UNKNOWN, YES, NO.

        :param handicap_accessible: The handicap_accessible of this Atm.
        :type handicap_accessible: str
        """

        self._handicap_accessible = handicap_accessible

    @property
    def international_maestro_accepted(self):
        """Gets the international_maestro_accepted of this Atm.

        This field will provide ATM Terminals which can still process Maestro transactions but are not yet EMV chip reader enabled. Information available only for USA and Argentina till October 2014. 1=Yes.

        :return: The international_maestro_accepted of this Atm.
        :rtype: int
        """
        return self._international_maestro_accepted

    @international_maestro_accepted.setter
    def international_maestro_accepted(self, international_maestro_accepted):
        """Sets the international_maestro_accepted of this Atm.

        This field will provide ATM Terminals which can still process Maestro transactions but are not yet EMV chip reader enabled. Information available only for USA and Argentina till October 2014. 1=Yes.

        :param international_maestro_accepted: The international_maestro_accepted of this Atm.
        :type international_maestro_accepted: int
        """

        self._international_maestro_accepted = international_maestro_accepted

    @property
    def location(self):
        """Gets the location of this Atm.


        :return: The location of this Atm.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Atm.


        :param location: The location of this Atm.
        :type location: Location
        """

        self._location = location

    @property
    def owner(self):
        """Gets the owner of this Atm.

        This is the DBA name of the financial institution affiliate or independent service organization.

        :return: The owner of this Atm.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Atm.

        This is the DBA name of the financial institution affiliate or independent service organization.

        :param owner: The owner of this Atm.
        :type owner: str
        """

        self._owner = owner

    @property
    def shared_deposit(self):
        """Gets the shared_deposit of this Atm.

        This value indicates whether or not the ATM participates in the MasterCard Shared Deposit network. Options are YES or NO.

        :return: The shared_deposit of this Atm.
        :rtype: str
        """
        return self._shared_deposit

    @shared_deposit.setter
    def shared_deposit(self, shared_deposit):
        """Sets the shared_deposit of this Atm.

        This value indicates whether or not the ATM participates in the MasterCard Shared Deposit network. Options are YES or NO.

        :param shared_deposit: The shared_deposit of this Atm.
        :type shared_deposit: str
        """

        self._shared_deposit = shared_deposit

    @property
    def sponsor(self):
        """Gets the sponsor of this Atm.

        This is the legal or business name of the entity that sponsors the owner of the ATM into the MasterCard network.

        :return: The sponsor of this Atm.
        :rtype: str
        """
        return self._sponsor

    @sponsor.setter
    def sponsor(self, sponsor):
        """Sets the sponsor of this Atm.

        This is the legal or business name of the entity that sponsors the owner of the ATM into the MasterCard network.

        :param sponsor: The sponsor of this Atm.
        :type sponsor: str
        """

        self._sponsor = sponsor

    @property
    def support_emv(self):
        """Gets the support_emv of this Atm.

        This indicates whether the ATM has the ability to read chip cards or not. Options are 1 = Yes 2 = No or Empty = Unknown.

        :return: The support_emv of this Atm.
        :rtype: int
        """
        return self._support_emv

    @support_emv.setter
    def support_emv(self, support_emv):
        """Sets the support_emv of this Atm.

        This indicates whether the ATM has the ability to read chip cards or not. Options are 1 = Yes 2 = No or Empty = Unknown.

        :param support_emv: The support_emv of this Atm.
        :type support_emv: int
        """

        self._support_emv = support_emv

    @property
    def surcharge_free_alliance(self):
        """Gets the surcharge_free_alliance of this Atm.

        This value indicates whether or not the ATM participates in the MasterCard Shared (only) Surcharge Free Alliance network. Options are YES or NO.

        :return: The surcharge_free_alliance of this Atm.
        :rtype: str
        """
        return self._surcharge_free_alliance

    @surcharge_free_alliance.setter
    def surcharge_free_alliance(self, surcharge_free_alliance):
        """Sets the surcharge_free_alliance of this Atm.

        This value indicates whether or not the ATM participates in the MasterCard Shared (only) Surcharge Free Alliance network. Options are YES or NO.

        :param surcharge_free_alliance: The surcharge_free_alliance of this Atm.
        :type surcharge_free_alliance: str
        """

        self._surcharge_free_alliance = surcharge_free_alliance

    @property
    def surcharge_free_alliance_network(self):
        """Gets the surcharge_free_alliance_network of this Atm.

        This value indicates whether or not the ATM participates in the MasterCard Shared (only) Surcharge Free Alliance network. Options are DOES_NOT_PARTICIPATE_IN_SFA, ALLPOINT_PREPAID, MONEYPASS_DEBIT, and ALL_SURCHARGE_FREE.

        :return: The surcharge_free_alliance_network of this Atm.
        :rtype: str
        """
        return self._surcharge_free_alliance_network

    @surcharge_free_alliance_network.setter
    def surcharge_free_alliance_network(self, surcharge_free_alliance_network):
        """Sets the surcharge_free_alliance_network of this Atm.

        This value indicates whether or not the ATM participates in the MasterCard Shared (only) Surcharge Free Alliance network. Options are DOES_NOT_PARTICIPATE_IN_SFA, ALLPOINT_PREPAID, MONEYPASS_DEBIT, and ALL_SURCHARGE_FREE.

        :param surcharge_free_alliance_network: The surcharge_free_alliance_network of this Atm.
        :type surcharge_free_alliance_network: str
        """

        self._surcharge_free_alliance_network = surcharge_free_alliance_network
