# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PayPass(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, concession: bool=None, drive_thru: bool=None, fuel_pump: bool=None, pharmacy: bool=None, register: bool=None, ticketing: bool=None, toll_booth: bool=None, vending_machine: bool=None):
        """PayPass - a model defined in OpenAPI

        :param concession: The concession of this PayPass.
        :param drive_thru: The drive_thru of this PayPass.
        :param fuel_pump: The fuel_pump of this PayPass.
        :param pharmacy: The pharmacy of this PayPass.
        :param register: The register of this PayPass.
        :param ticketing: The ticketing of this PayPass.
        :param toll_booth: The toll_booth of this PayPass.
        :param vending_machine: The vending_machine of this PayPass.
        """
        self.openapi_types = {
            'concession': bool,
            'drive_thru': bool,
            'fuel_pump': bool,
            'pharmacy': bool,
            'register': bool,
            'ticketing': bool,
            'toll_booth': bool,
            'vending_machine': bool
        }

        self.attribute_map = {
            'concession': 'Concession',
            'drive_thru': 'DriveThru',
            'fuel_pump': 'FuelPump',
            'pharmacy': 'Pharmacy',
            'register': 'Register',
            'ticketing': 'Ticketing',
            'toll_booth': 'TollBooth',
            'vending_machine': 'VendingMachine'
        }

        self._concession = concession
        self._drive_thru = drive_thru
        self._fuel_pump = fuel_pump
        self._pharmacy = pharmacy
        self._register = register
        self._ticketing = ticketing
        self._toll_booth = toll_booth
        self._vending_machine = vending_machine

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayPass':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayPass of this PayPass.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def concession(self):
        """Gets the concession of this PayPass.

        Boolean value which indicates if the concession area is equipped with a PayPass card reader.

        :return: The concession of this PayPass.
        :rtype: bool
        """
        return self._concession

    @concession.setter
    def concession(self, concession):
        """Sets the concession of this PayPass.

        Boolean value which indicates if the concession area is equipped with a PayPass card reader.

        :param concession: The concession of this PayPass.
        :type concession: bool
        """

        self._concession = concession

    @property
    def drive_thru(self):
        """Gets the drive_thru of this PayPass.

        Boolean value which indicates if the drive thru is equipped with a PayPass card reader.

        :return: The drive_thru of this PayPass.
        :rtype: bool
        """
        return self._drive_thru

    @drive_thru.setter
    def drive_thru(self, drive_thru):
        """Sets the drive_thru of this PayPass.

        Boolean value which indicates if the drive thru is equipped with a PayPass card reader.

        :param drive_thru: The drive_thru of this PayPass.
        :type drive_thru: bool
        """

        self._drive_thru = drive_thru

    @property
    def fuel_pump(self):
        """Gets the fuel_pump of this PayPass.

        Boolean value which indicates if the fuel pump is equipped with a PayPass card reader.

        :return: The fuel_pump of this PayPass.
        :rtype: bool
        """
        return self._fuel_pump

    @fuel_pump.setter
    def fuel_pump(self, fuel_pump):
        """Sets the fuel_pump of this PayPass.

        Boolean value which indicates if the fuel pump is equipped with a PayPass card reader.

        :param fuel_pump: The fuel_pump of this PayPass.
        :type fuel_pump: bool
        """

        self._fuel_pump = fuel_pump

    @property
    def pharmacy(self):
        """Gets the pharmacy of this PayPass.

        Boolean value which indicates if the pharmacy is equipped with a PayPass card reader.

        :return: The pharmacy of this PayPass.
        :rtype: bool
        """
        return self._pharmacy

    @pharmacy.setter
    def pharmacy(self, pharmacy):
        """Sets the pharmacy of this PayPass.

        Boolean value which indicates if the pharmacy is equipped with a PayPass card reader.

        :param pharmacy: The pharmacy of this PayPass.
        :type pharmacy: bool
        """

        self._pharmacy = pharmacy

    @property
    def register(self):
        """Gets the register of this PayPass.

        Boolean value which indicates if the register is equipped with a PayPass card reader.

        :return: The register of this PayPass.
        :rtype: bool
        """
        return self._register

    @register.setter
    def register(self, register):
        """Sets the register of this PayPass.

        Boolean value which indicates if the register is equipped with a PayPass card reader.

        :param register: The register of this PayPass.
        :type register: bool
        """

        self._register = register

    @property
    def ticketing(self):
        """Gets the ticketing of this PayPass.

        Boolean value which indicates if the ticketing area is equipped with a PayPass card reader.

        :return: The ticketing of this PayPass.
        :rtype: bool
        """
        return self._ticketing

    @ticketing.setter
    def ticketing(self, ticketing):
        """Sets the ticketing of this PayPass.

        Boolean value which indicates if the ticketing area is equipped with a PayPass card reader.

        :param ticketing: The ticketing of this PayPass.
        :type ticketing: bool
        """

        self._ticketing = ticketing

    @property
    def toll_booth(self):
        """Gets the toll_booth of this PayPass.

        Boolean value which indicates if the toll booth is equipped with a PayPass card reader.

        :return: The toll_booth of this PayPass.
        :rtype: bool
        """
        return self._toll_booth

    @toll_booth.setter
    def toll_booth(self, toll_booth):
        """Sets the toll_booth of this PayPass.

        Boolean value which indicates if the toll booth is equipped with a PayPass card reader.

        :param toll_booth: The toll_booth of this PayPass.
        :type toll_booth: bool
        """

        self._toll_booth = toll_booth

    @property
    def vending_machine(self):
        """Gets the vending_machine of this PayPass.

        Boolean value which indicates if the vending machine is equipped with a PayPass card reader.

        :return: The vending_machine of this PayPass.
        :rtype: bool
        """
        return self._vending_machine

    @vending_machine.setter
    def vending_machine(self, vending_machine):
        """Sets the vending_machine of this PayPass.

        Boolean value which indicates if the vending machine is equipped with a PayPass card reader.

        :param vending_machine: The vending_machine of this PayPass.
        :type vending_machine: bool
        """

        self._vending_machine = vending_machine
