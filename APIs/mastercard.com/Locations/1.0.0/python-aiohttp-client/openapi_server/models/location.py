# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.location_type import LocationType
from openapi_server.models.point import Point
from openapi_server import util


class Location(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, distance: float=None, distance_unit: str=None, location_type: LocationType=None, name: str=None, point: Point=None):
        """Location - a model defined in OpenAPI

        :param address: The address of this Location.
        :param distance: The distance of this Location.
        :param distance_unit: The distance_unit of this Location.
        :param location_type: The location_type of this Location.
        :param name: The name of this Location.
        :param point: The point of this Location.
        """
        self.openapi_types = {
            'address': Address,
            'distance': float,
            'distance_unit': str,
            'location_type': LocationType,
            'name': str,
            'point': Point
        }

        self.attribute_map = {
            'address': 'Address',
            'distance': 'Distance',
            'distance_unit': 'DistanceUnit',
            'location_type': 'LocationType',
            'name': 'Name',
            'point': 'Point'
        }

        self._address = address
        self._distance = distance
        self._distance_unit = distance_unit
        self._location_type = location_type
        self._name = name
        self._point = point

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Location':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Location of this Location.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Location.


        :return: The address of this Location.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Location.


        :param address: The address of this Location.
        :type address: Address
        """

        self._address = address

    @property
    def distance(self):
        """Gets the distance of this Location.

        This is the numerical value for the distance from the provided location to the selected ATM.

        :return: The distance of this Location.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this Location.

        This is the numerical value for the distance from the provided location to the selected ATM.

        :param distance: The distance of this Location.
        :type distance: float
        """

        self._distance = distance

    @property
    def distance_unit(self):
        """Gets the distance_unit of this Location.

        This is the unit of measure value for the distance from the provided location to the selected ATM. Options are KILOMETER and MILE.

        :return: The distance_unit of this Location.
        :rtype: str
        """
        return self._distance_unit

    @distance_unit.setter
    def distance_unit(self, distance_unit):
        """Sets the distance_unit of this Location.

        This is the unit of measure value for the distance from the provided location to the selected ATM. Options are KILOMETER and MILE.

        :param distance_unit: The distance_unit of this Location.
        :type distance_unit: str
        """

        self._distance_unit = distance_unit

    @property
    def location_type(self):
        """Gets the location_type of this Location.


        :return: The location_type of this Location.
        :rtype: LocationType
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this Location.


        :param location_type: The location_type of this Location.
        :type location_type: LocationType
        """

        self._location_type = location_type

    @property
    def name(self):
        """Gets the name of this Location.

        This is the name of the ATM location

        :return: The name of this Location.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Location.

        This is the name of the ATM location

        :param name: The name of this Location.
        :type name: str
        """

        self._name = name

    @property
    def point(self):
        """Gets the point of this Location.


        :return: The point of this Location.
        :rtype: Point
        """
        return self._point

    @point.setter
    def point(self, point):
        """Sets the point of this Location.


        :param point: The point of this Location.
        :type point: Point
        """

        self._point = point
