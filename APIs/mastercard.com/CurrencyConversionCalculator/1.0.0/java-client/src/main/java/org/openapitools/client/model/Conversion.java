/*
 * API for the Settlement Currency Rate converter
 * This API provides a range of functions to get back currency conversion rates and amounts based on current Mastercard currency conversion values.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Conversion
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:27.351062-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Conversion {
  public static final String SERIALIZED_NAME_BANK_FEE = "bankFee";
  @SerializedName(SERIALIZED_NAME_BANK_FEE)
  private Double bankFee;

  public static final String SERIALIZED_NAME_CONVERSION_RATE = "conversionRate";
  @SerializedName(SERIALIZED_NAME_CONVERSION_RATE)
  private Double conversionRate;

  public static final String SERIALIZED_NAME_CRDHLD_BILL_AMT = "crdhldBillAmt";
  @SerializedName(SERIALIZED_NAME_CRDHLD_BILL_AMT)
  private Double crdhldBillAmt;

  public static final String SERIALIZED_NAME_CRDHLD_BILL_CURR = "crdhldBillCurr";
  @SerializedName(SERIALIZED_NAME_CRDHLD_BILL_CURR)
  private String crdhldBillCurr;

  public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private String errorCode;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_FX_DATE = "fxDate";
  @SerializedName(SERIALIZED_NAME_FX_DATE)
  private String fxDate;

  public static final String SERIALIZED_NAME_TRANS_AMT = "transAmt";
  @SerializedName(SERIALIZED_NAME_TRANS_AMT)
  private Double transAmt;

  public static final String SERIALIZED_NAME_TRANS_CURR = "transCurr";
  @SerializedName(SERIALIZED_NAME_TRANS_CURR)
  private String transCurr;

  public Conversion() {
  }

  public Conversion bankFee(Double bankFee) {
    this.bankFee = bankFee;
    return this;
  }

  /**
   * Additional fees imposed by the bank.
   * @return bankFee
   */
  @javax.annotation.Nullable
  public Double getBankFee() {
    return bankFee;
  }

  public void setBankFee(Double bankFee) {
    this.bankFee = bankFee;
  }


  public Conversion conversionRate(Double conversionRate) {
    this.conversionRate = conversionRate;
    return this;
  }

  /**
   * Rate applied to the transaction to convert from Transaction Currency to Cardholder Billing Currency.
   * @return conversionRate
   */
  @javax.annotation.Nullable
  public Double getConversionRate() {
    return conversionRate;
  }

  public void setConversionRate(Double conversionRate) {
    this.conversionRate = conversionRate;
  }


  public Conversion crdhldBillAmt(Double crdhldBillAmt) {
    this.crdhldBillAmt = crdhldBillAmt;
    return this;
  }

  /**
   * Amount in the cardholder billing currency.
   * @return crdhldBillAmt
   */
  @javax.annotation.Nullable
  public Double getCrdhldBillAmt() {
    return crdhldBillAmt;
  }

  public void setCrdhldBillAmt(Double crdhldBillAmt) {
    this.crdhldBillAmt = crdhldBillAmt;
  }


  public Conversion crdhldBillCurr(String crdhldBillCurr) {
    this.crdhldBillCurr = crdhldBillCurr;
    return this;
  }

  /**
   * Cardholder billing currency.
   * @return crdhldBillCurr
   */
  @javax.annotation.Nullable
  public String getCrdhldBillCurr() {
    return crdhldBillCurr;
  }

  public void setCrdhldBillCurr(String crdhldBillCurr) {
    this.crdhldBillCurr = crdhldBillCurr;
  }


  public Conversion errorCode(String errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  /**
   * The error code associated with the error being returned.
   * @return errorCode
   */
  @javax.annotation.Nullable
  public String getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }


  public Conversion errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * The reason for the error.
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public Conversion fxDate(String fxDate) {
    this.fxDate = fxDate;
    return this;
  }

  /**
   * Date of the requested FX rates.
   * @return fxDate
   */
  @javax.annotation.Nullable
  public String getFxDate() {
    return fxDate;
  }

  public void setFxDate(String fxDate) {
    this.fxDate = fxDate;
  }


  public Conversion transAmt(Double transAmt) {
    this.transAmt = transAmt;
    return this;
  }

  /**
   * Amount in the transaction currency.
   * @return transAmt
   */
  @javax.annotation.Nullable
  public Double getTransAmt() {
    return transAmt;
  }

  public void setTransAmt(Double transAmt) {
    this.transAmt = transAmt;
  }


  public Conversion transCurr(String transCurr) {
    this.transCurr = transCurr;
    return this;
  }

  /**
   * Currency of the transaction.
   * @return transCurr
   */
  @javax.annotation.Nullable
  public String getTransCurr() {
    return transCurr;
  }

  public void setTransCurr(String transCurr) {
    this.transCurr = transCurr;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Conversion conversion = (Conversion) o;
    return Objects.equals(this.bankFee, conversion.bankFee) &&
        Objects.equals(this.conversionRate, conversion.conversionRate) &&
        Objects.equals(this.crdhldBillAmt, conversion.crdhldBillAmt) &&
        Objects.equals(this.crdhldBillCurr, conversion.crdhldBillCurr) &&
        Objects.equals(this.errorCode, conversion.errorCode) &&
        Objects.equals(this.errorMessage, conversion.errorMessage) &&
        Objects.equals(this.fxDate, conversion.fxDate) &&
        Objects.equals(this.transAmt, conversion.transAmt) &&
        Objects.equals(this.transCurr, conversion.transCurr);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bankFee, conversionRate, crdhldBillAmt, crdhldBillCurr, errorCode, errorMessage, fxDate, transAmt, transCurr);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Conversion {\n");
    sb.append("    bankFee: ").append(toIndentedString(bankFee)).append("\n");
    sb.append("    conversionRate: ").append(toIndentedString(conversionRate)).append("\n");
    sb.append("    crdhldBillAmt: ").append(toIndentedString(crdhldBillAmt)).append("\n");
    sb.append("    crdhldBillCurr: ").append(toIndentedString(crdhldBillCurr)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    fxDate: ").append(toIndentedString(fxDate)).append("\n");
    sb.append("    transAmt: ").append(toIndentedString(transAmt)).append("\n");
    sb.append("    transCurr: ").append(toIndentedString(transCurr)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bankFee");
    openapiFields.add("conversionRate");
    openapiFields.add("crdhldBillAmt");
    openapiFields.add("crdhldBillCurr");
    openapiFields.add("errorCode");
    openapiFields.add("errorMessage");
    openapiFields.add("fxDate");
    openapiFields.add("transAmt");
    openapiFields.add("transCurr");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Conversion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Conversion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Conversion is not found in the empty JSON string", Conversion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Conversion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Conversion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("crdhldBillCurr") != null && !jsonObj.get("crdhldBillCurr").isJsonNull()) && !jsonObj.get("crdhldBillCurr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crdhldBillCurr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crdhldBillCurr").toString()));
      }
      if ((jsonObj.get("errorCode") != null && !jsonObj.get("errorCode").isJsonNull()) && !jsonObj.get("errorCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorCode").toString()));
      }
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
      if ((jsonObj.get("fxDate") != null && !jsonObj.get("fxDate").isJsonNull()) && !jsonObj.get("fxDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fxDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fxDate").toString()));
      }
      if ((jsonObj.get("transCurr") != null && !jsonObj.get("transCurr").isJsonNull()) && !jsonObj.get("transCurr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transCurr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transCurr").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Conversion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Conversion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Conversion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Conversion.class));

       return (TypeAdapter<T>) new TypeAdapter<Conversion>() {
           @Override
           public void write(JsonWriter out, Conversion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Conversion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Conversion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Conversion
   * @throws IOException if the JSON string is invalid with respect to Conversion
   */
  public static Conversion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Conversion.class);
  }

  /**
   * Convert an instance of Conversion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

