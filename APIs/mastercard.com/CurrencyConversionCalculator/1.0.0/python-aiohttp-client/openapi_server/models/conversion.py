# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Conversion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bank_fee: float=None, conversion_rate: float=None, crdhld_bill_amt: float=None, crdhld_bill_curr: str=None, error_code: str=None, error_message: str=None, fx_date: str=None, trans_amt: float=None, trans_curr: str=None):
        """Conversion - a model defined in OpenAPI

        :param bank_fee: The bank_fee of this Conversion.
        :param conversion_rate: The conversion_rate of this Conversion.
        :param crdhld_bill_amt: The crdhld_bill_amt of this Conversion.
        :param crdhld_bill_curr: The crdhld_bill_curr of this Conversion.
        :param error_code: The error_code of this Conversion.
        :param error_message: The error_message of this Conversion.
        :param fx_date: The fx_date of this Conversion.
        :param trans_amt: The trans_amt of this Conversion.
        :param trans_curr: The trans_curr of this Conversion.
        """
        self.openapi_types = {
            'bank_fee': float,
            'conversion_rate': float,
            'crdhld_bill_amt': float,
            'crdhld_bill_curr': str,
            'error_code': str,
            'error_message': str,
            'fx_date': str,
            'trans_amt': float,
            'trans_curr': str
        }

        self.attribute_map = {
            'bank_fee': 'bankFee',
            'conversion_rate': 'conversionRate',
            'crdhld_bill_amt': 'crdhldBillAmt',
            'crdhld_bill_curr': 'crdhldBillCurr',
            'error_code': 'errorCode',
            'error_message': 'errorMessage',
            'fx_date': 'fxDate',
            'trans_amt': 'transAmt',
            'trans_curr': 'transCurr'
        }

        self._bank_fee = bank_fee
        self._conversion_rate = conversion_rate
        self._crdhld_bill_amt = crdhld_bill_amt
        self._crdhld_bill_curr = crdhld_bill_curr
        self._error_code = error_code
        self._error_message = error_message
        self._fx_date = fx_date
        self._trans_amt = trans_amt
        self._trans_curr = trans_curr

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Conversion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Conversion of this Conversion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bank_fee(self):
        """Gets the bank_fee of this Conversion.

        Additional fees imposed by the bank.

        :return: The bank_fee of this Conversion.
        :rtype: float
        """
        return self._bank_fee

    @bank_fee.setter
    def bank_fee(self, bank_fee):
        """Sets the bank_fee of this Conversion.

        Additional fees imposed by the bank.

        :param bank_fee: The bank_fee of this Conversion.
        :type bank_fee: float
        """

        self._bank_fee = bank_fee

    @property
    def conversion_rate(self):
        """Gets the conversion_rate of this Conversion.

        Rate applied to the transaction to convert from Transaction Currency to Cardholder Billing Currency.

        :return: The conversion_rate of this Conversion.
        :rtype: float
        """
        return self._conversion_rate

    @conversion_rate.setter
    def conversion_rate(self, conversion_rate):
        """Sets the conversion_rate of this Conversion.

        Rate applied to the transaction to convert from Transaction Currency to Cardholder Billing Currency.

        :param conversion_rate: The conversion_rate of this Conversion.
        :type conversion_rate: float
        """

        self._conversion_rate = conversion_rate

    @property
    def crdhld_bill_amt(self):
        """Gets the crdhld_bill_amt of this Conversion.

        Amount in the cardholder billing currency.

        :return: The crdhld_bill_amt of this Conversion.
        :rtype: float
        """
        return self._crdhld_bill_amt

    @crdhld_bill_amt.setter
    def crdhld_bill_amt(self, crdhld_bill_amt):
        """Sets the crdhld_bill_amt of this Conversion.

        Amount in the cardholder billing currency.

        :param crdhld_bill_amt: The crdhld_bill_amt of this Conversion.
        :type crdhld_bill_amt: float
        """

        self._crdhld_bill_amt = crdhld_bill_amt

    @property
    def crdhld_bill_curr(self):
        """Gets the crdhld_bill_curr of this Conversion.

        Cardholder billing currency.

        :return: The crdhld_bill_curr of this Conversion.
        :rtype: str
        """
        return self._crdhld_bill_curr

    @crdhld_bill_curr.setter
    def crdhld_bill_curr(self, crdhld_bill_curr):
        """Sets the crdhld_bill_curr of this Conversion.

        Cardholder billing currency.

        :param crdhld_bill_curr: The crdhld_bill_curr of this Conversion.
        :type crdhld_bill_curr: str
        """

        self._crdhld_bill_curr = crdhld_bill_curr

    @property
    def error_code(self):
        """Gets the error_code of this Conversion.

        The error code associated with the error being returned.

        :return: The error_code of this Conversion.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this Conversion.

        The error code associated with the error being returned.

        :param error_code: The error_code of this Conversion.
        :type error_code: str
        """

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this Conversion.

        The reason for the error.

        :return: The error_message of this Conversion.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this Conversion.

        The reason for the error.

        :param error_message: The error_message of this Conversion.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def fx_date(self):
        """Gets the fx_date of this Conversion.

        Date of the requested FX rates.

        :return: The fx_date of this Conversion.
        :rtype: str
        """
        return self._fx_date

    @fx_date.setter
    def fx_date(self, fx_date):
        """Sets the fx_date of this Conversion.

        Date of the requested FX rates.

        :param fx_date: The fx_date of this Conversion.
        :type fx_date: str
        """

        self._fx_date = fx_date

    @property
    def trans_amt(self):
        """Gets the trans_amt of this Conversion.

        Amount in the transaction currency.

        :return: The trans_amt of this Conversion.
        :rtype: float
        """
        return self._trans_amt

    @trans_amt.setter
    def trans_amt(self, trans_amt):
        """Sets the trans_amt of this Conversion.

        Amount in the transaction currency.

        :param trans_amt: The trans_amt of this Conversion.
        :type trans_amt: float
        """

        self._trans_amt = trans_amt

    @property
    def trans_curr(self):
        """Gets the trans_curr of this Conversion.

        Currency of the transaction.

        :return: The trans_curr of this Conversion.
        :rtype: str
        """
        return self._trans_curr

    @trans_curr.setter
    def trans_curr(self, trans_curr):
        """Sets the trans_curr of this Conversion.

        Currency of the transaction.

        :param trans_curr: The trans_curr of this Conversion.
        :type trans_curr: str
        """

        self._trans_curr = trans_curr
