/**
 * API for the Settlement Currency Rate converter
 * This API provides a range of functions to get back currency conversion rates and amounts based on current Mastercard currency conversion values.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversion::OAIConversion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversion::OAIConversion() {
    this->initializeModel();
}

OAIConversion::~OAIConversion() {}

void OAIConversion::initializeModel() {

    m_bank_fee_isSet = false;
    m_bank_fee_isValid = false;

    m_conversion_rate_isSet = false;
    m_conversion_rate_isValid = false;

    m_crdhld_bill_amt_isSet = false;
    m_crdhld_bill_amt_isValid = false;

    m_crdhld_bill_curr_isSet = false;
    m_crdhld_bill_curr_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_fx_date_isSet = false;
    m_fx_date_isValid = false;

    m_trans_amt_isSet = false;
    m_trans_amt_isValid = false;

    m_trans_curr_isSet = false;
    m_trans_curr_isValid = false;
}

void OAIConversion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversion::fromJsonObject(QJsonObject json) {

    m_bank_fee_isValid = ::OpenAPI::fromJsonValue(m_bank_fee, json[QString("bankFee")]);
    m_bank_fee_isSet = !json[QString("bankFee")].isNull() && m_bank_fee_isValid;

    m_conversion_rate_isValid = ::OpenAPI::fromJsonValue(m_conversion_rate, json[QString("conversionRate")]);
    m_conversion_rate_isSet = !json[QString("conversionRate")].isNull() && m_conversion_rate_isValid;

    m_crdhld_bill_amt_isValid = ::OpenAPI::fromJsonValue(m_crdhld_bill_amt, json[QString("crdhldBillAmt")]);
    m_crdhld_bill_amt_isSet = !json[QString("crdhldBillAmt")].isNull() && m_crdhld_bill_amt_isValid;

    m_crdhld_bill_curr_isValid = ::OpenAPI::fromJsonValue(m_crdhld_bill_curr, json[QString("crdhldBillCurr")]);
    m_crdhld_bill_curr_isSet = !json[QString("crdhldBillCurr")].isNull() && m_crdhld_bill_curr_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_fx_date_isValid = ::OpenAPI::fromJsonValue(m_fx_date, json[QString("fxDate")]);
    m_fx_date_isSet = !json[QString("fxDate")].isNull() && m_fx_date_isValid;

    m_trans_amt_isValid = ::OpenAPI::fromJsonValue(m_trans_amt, json[QString("transAmt")]);
    m_trans_amt_isSet = !json[QString("transAmt")].isNull() && m_trans_amt_isValid;

    m_trans_curr_isValid = ::OpenAPI::fromJsonValue(m_trans_curr, json[QString("transCurr")]);
    m_trans_curr_isSet = !json[QString("transCurr")].isNull() && m_trans_curr_isValid;
}

QString OAIConversion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversion::asJsonObject() const {
    QJsonObject obj;
    if (m_bank_fee_isSet) {
        obj.insert(QString("bankFee"), ::OpenAPI::toJsonValue(m_bank_fee));
    }
    if (m_conversion_rate_isSet) {
        obj.insert(QString("conversionRate"), ::OpenAPI::toJsonValue(m_conversion_rate));
    }
    if (m_crdhld_bill_amt_isSet) {
        obj.insert(QString("crdhldBillAmt"), ::OpenAPI::toJsonValue(m_crdhld_bill_amt));
    }
    if (m_crdhld_bill_curr_isSet) {
        obj.insert(QString("crdhldBillCurr"), ::OpenAPI::toJsonValue(m_crdhld_bill_curr));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_fx_date_isSet) {
        obj.insert(QString("fxDate"), ::OpenAPI::toJsonValue(m_fx_date));
    }
    if (m_trans_amt_isSet) {
        obj.insert(QString("transAmt"), ::OpenAPI::toJsonValue(m_trans_amt));
    }
    if (m_trans_curr_isSet) {
        obj.insert(QString("transCurr"), ::OpenAPI::toJsonValue(m_trans_curr));
    }
    return obj;
}

double OAIConversion::getBankFee() const {
    return m_bank_fee;
}
void OAIConversion::setBankFee(const double &bank_fee) {
    m_bank_fee = bank_fee;
    m_bank_fee_isSet = true;
}

bool OAIConversion::is_bank_fee_Set() const{
    return m_bank_fee_isSet;
}

bool OAIConversion::is_bank_fee_Valid() const{
    return m_bank_fee_isValid;
}

double OAIConversion::getConversionRate() const {
    return m_conversion_rate;
}
void OAIConversion::setConversionRate(const double &conversion_rate) {
    m_conversion_rate = conversion_rate;
    m_conversion_rate_isSet = true;
}

bool OAIConversion::is_conversion_rate_Set() const{
    return m_conversion_rate_isSet;
}

bool OAIConversion::is_conversion_rate_Valid() const{
    return m_conversion_rate_isValid;
}

double OAIConversion::getCrdhldBillAmt() const {
    return m_crdhld_bill_amt;
}
void OAIConversion::setCrdhldBillAmt(const double &crdhld_bill_amt) {
    m_crdhld_bill_amt = crdhld_bill_amt;
    m_crdhld_bill_amt_isSet = true;
}

bool OAIConversion::is_crdhld_bill_amt_Set() const{
    return m_crdhld_bill_amt_isSet;
}

bool OAIConversion::is_crdhld_bill_amt_Valid() const{
    return m_crdhld_bill_amt_isValid;
}

QString OAIConversion::getCrdhldBillCurr() const {
    return m_crdhld_bill_curr;
}
void OAIConversion::setCrdhldBillCurr(const QString &crdhld_bill_curr) {
    m_crdhld_bill_curr = crdhld_bill_curr;
    m_crdhld_bill_curr_isSet = true;
}

bool OAIConversion::is_crdhld_bill_curr_Set() const{
    return m_crdhld_bill_curr_isSet;
}

bool OAIConversion::is_crdhld_bill_curr_Valid() const{
    return m_crdhld_bill_curr_isValid;
}

QString OAIConversion::getErrorCode() const {
    return m_error_code;
}
void OAIConversion::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIConversion::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIConversion::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIConversion::getErrorMessage() const {
    return m_error_message;
}
void OAIConversion::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIConversion::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIConversion::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIConversion::getFxDate() const {
    return m_fx_date;
}
void OAIConversion::setFxDate(const QString &fx_date) {
    m_fx_date = fx_date;
    m_fx_date_isSet = true;
}

bool OAIConversion::is_fx_date_Set() const{
    return m_fx_date_isSet;
}

bool OAIConversion::is_fx_date_Valid() const{
    return m_fx_date_isValid;
}

double OAIConversion::getTransAmt() const {
    return m_trans_amt;
}
void OAIConversion::setTransAmt(const double &trans_amt) {
    m_trans_amt = trans_amt;
    m_trans_amt_isSet = true;
}

bool OAIConversion::is_trans_amt_Set() const{
    return m_trans_amt_isSet;
}

bool OAIConversion::is_trans_amt_Valid() const{
    return m_trans_amt_isValid;
}

QString OAIConversion::getTransCurr() const {
    return m_trans_curr;
}
void OAIConversion::setTransCurr(const QString &trans_curr) {
    m_trans_curr = trans_curr;
    m_trans_curr_isSet = true;
}

bool OAIConversion::is_trans_curr_Set() const{
    return m_trans_curr_isSet;
}

bool OAIConversion::is_trans_curr_Valid() const{
    return m_trans_curr_isValid;
}

bool OAIConversion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bank_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversion_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crdhld_bill_amt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crdhld_bill_curr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fx_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trans_amt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trans_curr_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
