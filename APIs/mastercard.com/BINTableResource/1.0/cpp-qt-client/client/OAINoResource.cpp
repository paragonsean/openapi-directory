/**
 * MasterCard Bin Table Listing
 * MasterCard Bin Table Listing API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mastercard@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINoResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINoResource::OAINoResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINoResource::OAINoResource() {
    this->initializeModel();
}

OAINoResource::~OAINoResource() {}

void OAINoResource::initializeModel() {

    m_reason_code_isSet = false;
    m_reason_code_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_recoverable_isSet = false;
    m_recoverable_isValid = false;
}

void OAINoResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINoResource::fromJsonObject(QJsonObject json) {

    m_reason_code_isValid = ::OpenAPI::fromJsonValue(m_reason_code, json[QString("ReasonCode")]);
    m_reason_code_isSet = !json[QString("ReasonCode")].isNull() && m_reason_code_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_recoverable_isValid = ::OpenAPI::fromJsonValue(m_recoverable, json[QString("recoverable")]);
    m_recoverable_isSet = !json[QString("recoverable")].isNull() && m_recoverable_isValid;
}

QString OAINoResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINoResource::asJsonObject() const {
    QJsonObject obj;
    if (m_reason_code_isSet) {
        obj.insert(QString("ReasonCode"), ::OpenAPI::toJsonValue(m_reason_code));
    }
    if (m_source_isSet) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_recoverable_isSet) {
        obj.insert(QString("recoverable"), ::OpenAPI::toJsonValue(m_recoverable));
    }
    return obj;
}

QString OAINoResource::getReasonCode() const {
    return m_reason_code;
}
void OAINoResource::setReasonCode(const QString &reason_code) {
    m_reason_code = reason_code;
    m_reason_code_isSet = true;
}

bool OAINoResource::is_reason_code_Set() const{
    return m_reason_code_isSet;
}

bool OAINoResource::is_reason_code_Valid() const{
    return m_reason_code_isValid;
}

QString OAINoResource::getSource() const {
    return m_source;
}
void OAINoResource::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAINoResource::is_source_Set() const{
    return m_source_isSet;
}

bool OAINoResource::is_source_Valid() const{
    return m_source_isValid;
}

QString OAINoResource::getDescription() const {
    return m_description;
}
void OAINoResource::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINoResource::is_description_Set() const{
    return m_description_isSet;
}

bool OAINoResource::is_description_Valid() const{
    return m_description_isValid;
}

bool OAINoResource::isRecoverable() const {
    return m_recoverable;
}
void OAINoResource::setRecoverable(const bool &recoverable) {
    m_recoverable = recoverable;
    m_recoverable_isSet = true;
}

bool OAINoResource::is_recoverable_Set() const{
    return m_recoverable_isSet;
}

bool OAINoResource::is_recoverable_Valid() const{
    return m_recoverable_isValid;
}

bool OAINoResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_reason_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recoverable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINoResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
