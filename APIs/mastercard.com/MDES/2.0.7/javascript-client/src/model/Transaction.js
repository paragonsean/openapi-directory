/**
 * MDES Customer Service
 * This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.
 *
 * The version of the OpenAPI document: 2.0.7
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Transaction model module.
 * @module model/Transaction
 * @version 2.0.7
 */
class Transaction {
    /**
     * Constructs a new <code>Transaction</code>.
     * @alias module:model/Transaction
     */
    constructor() { 
        
        Transaction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transaction} obj Optional instance to populate.
     * @return {module:model/Transaction} The populated <code>Transaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transaction();

            if (data.hasOwnProperty('CurrencyCode')) {
                obj['CurrencyCode'] = ApiClient.convertToType(data['CurrencyCode'], 'String');
            }
            if (data.hasOwnProperty('MerchantCategoryCode')) {
                obj['MerchantCategoryCode'] = ApiClient.convertToType(data['MerchantCategoryCode'], 'String');
            }
            if (data.hasOwnProperty('MerchantCategoryDescription')) {
                obj['MerchantCategoryDescription'] = ApiClient.convertToType(data['MerchantCategoryDescription'], 'String');
            }
            if (data.hasOwnProperty('MerchantName')) {
                obj['MerchantName'] = ApiClient.convertToType(data['MerchantName'], 'String');
            }
            if (data.hasOwnProperty('POSEntryMode')) {
                obj['POSEntryMode'] = ApiClient.convertToType(data['POSEntryMode'], 'String');
            }
            if (data.hasOwnProperty('TransactionAmount')) {
                obj['TransactionAmount'] = ApiClient.convertToType(data['TransactionAmount'], 'String');
            }
            if (data.hasOwnProperty('TransactionDateTime')) {
                obj['TransactionDateTime'] = ApiClient.convertToType(data['TransactionDateTime'], 'String');
            }
            if (data.hasOwnProperty('TransactionStatusCode')) {
                obj['TransactionStatusCode'] = ApiClient.convertToType(data['TransactionStatusCode'], 'String');
            }
            if (data.hasOwnProperty('TransactionTypeCode')) {
                obj['TransactionTypeCode'] = ApiClient.convertToType(data['TransactionTypeCode'], 'String');
            }
            if (data.hasOwnProperty('TransactionTypeDescription')) {
                obj['TransactionTypeDescription'] = ApiClient.convertToType(data['TransactionTypeDescription'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Transaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Transaction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['CurrencyCode'] && !(typeof data['CurrencyCode'] === 'string' || data['CurrencyCode'] instanceof String)) {
            throw new Error("Expected the field `CurrencyCode` to be a primitive type in the JSON string but got " + data['CurrencyCode']);
        }
        // ensure the json data is a string
        if (data['MerchantCategoryCode'] && !(typeof data['MerchantCategoryCode'] === 'string' || data['MerchantCategoryCode'] instanceof String)) {
            throw new Error("Expected the field `MerchantCategoryCode` to be a primitive type in the JSON string but got " + data['MerchantCategoryCode']);
        }
        // ensure the json data is a string
        if (data['MerchantCategoryDescription'] && !(typeof data['MerchantCategoryDescription'] === 'string' || data['MerchantCategoryDescription'] instanceof String)) {
            throw new Error("Expected the field `MerchantCategoryDescription` to be a primitive type in the JSON string but got " + data['MerchantCategoryDescription']);
        }
        // ensure the json data is a string
        if (data['MerchantName'] && !(typeof data['MerchantName'] === 'string' || data['MerchantName'] instanceof String)) {
            throw new Error("Expected the field `MerchantName` to be a primitive type in the JSON string but got " + data['MerchantName']);
        }
        // ensure the json data is a string
        if (data['POSEntryMode'] && !(typeof data['POSEntryMode'] === 'string' || data['POSEntryMode'] instanceof String)) {
            throw new Error("Expected the field `POSEntryMode` to be a primitive type in the JSON string but got " + data['POSEntryMode']);
        }
        // ensure the json data is a string
        if (data['TransactionAmount'] && !(typeof data['TransactionAmount'] === 'string' || data['TransactionAmount'] instanceof String)) {
            throw new Error("Expected the field `TransactionAmount` to be a primitive type in the JSON string but got " + data['TransactionAmount']);
        }
        // ensure the json data is a string
        if (data['TransactionDateTime'] && !(typeof data['TransactionDateTime'] === 'string' || data['TransactionDateTime'] instanceof String)) {
            throw new Error("Expected the field `TransactionDateTime` to be a primitive type in the JSON string but got " + data['TransactionDateTime']);
        }
        // ensure the json data is a string
        if (data['TransactionStatusCode'] && !(typeof data['TransactionStatusCode'] === 'string' || data['TransactionStatusCode'] instanceof String)) {
            throw new Error("Expected the field `TransactionStatusCode` to be a primitive type in the JSON string but got " + data['TransactionStatusCode']);
        }
        // ensure the json data is a string
        if (data['TransactionTypeCode'] && !(typeof data['TransactionTypeCode'] === 'string' || data['TransactionTypeCode'] instanceof String)) {
            throw new Error("Expected the field `TransactionTypeCode` to be a primitive type in the JSON string but got " + data['TransactionTypeCode']);
        }
        // ensure the json data is a string
        if (data['TransactionTypeDescription'] && !(typeof data['TransactionTypeDescription'] === 'string' || data['TransactionTypeDescription'] instanceof String)) {
            throw new Error("Expected the field `TransactionTypeDescription` to be a primitive type in the JSON string but got " + data['TransactionTypeDescription']);
        }

        return true;
    }


}



/**
 * ISO-4217 currency code (3-letter alphabetic currency code).
 * @member {String} CurrencyCode
 */
Transaction.prototype['CurrencyCode'] = undefined;

/**
 * Merchant category of the merchant. Conditional field. When available, it must be included in the response.
 * @member {String} MerchantCategoryCode
 */
Transaction.prototype['MerchantCategoryCode'] = undefined;

/**
 * Description of the merchant category.
 * @member {String} MerchantCategoryDescription
 */
Transaction.prototype['MerchantCategoryDescription'] = undefined;

/**
 * Name of the merchant. Conditional field. When available, it must be included in the response.
 * @member {String} MerchantName
 */
Transaction.prototype['MerchantName'] = undefined;

/**
 * Indicates the mode by which transaction data was collected at the merchant. Conditional field. When available, it must be included in the response.  Valid values:<br />    \"07\" - Contactless M/Chip transaction<br />    \"09\" - Digital Secure Remote Payment containing EMV data<br />    \"81\" - Digital Secure Remote Payment containing UCAF data or CoF<br />    \"82\" - CoF - PAN auto entry via server<br />    \"90\" - Dynamic Magnetic Strip Data<br />    \"91\" - Contactless magnetic stripe
 * @member {String} POSEntryMode
 */
Transaction.prototype['POSEntryMode'] = undefined;

/**
 * Amount of the transaction formatted with decimal places.
 * @member {String} TransactionAmount
 */
Transaction.prototype['TransactionAmount'] = undefined;

/**
 * Date and time the comment was updated. String, YYYY-MM-DDThh:mm:ssTZD.
 * @member {String} TransactionDateTime
 */
Transaction.prototype['TransactionDateTime'] = undefined;

/**
 * Transaction status. Valid values:<br />    \"AUTH\" = Authorized<br />    \"COMP\" = Completed<br />    \"DCLN\" = Declined<br />    \"PAUTH\" = Pre-Authorized<br />    \"PAUTC\" = Pre-Authorization Completed<br />    \"PAUTD\" = Pre-Authorization Declined<br />    \"REFND\" = Refunded
 * @member {String} TransactionStatusCode
 */
Transaction.prototype['TransactionStatusCode'] = undefined;

/**
 * Type of transaction. Valid values:<br />    \"PURCH\" = Purchase<br />    \"PURCB\" = Purchase with Cashback<br />    \"REFND\" = Refund<br />    \"AFD\" = Purchase Pre-Auth AFD<br />    \"CLRRF\" = Clearing Refund<br />    \"NAFD\" = Purchase Pre-Auth Non-AFD<br />    \"PYMT\" = Push Payments.
 * @member {String} TransactionTypeCode
 */
Transaction.prototype['TransactionTypeCode'] = undefined;

/**
 * Description of the transaction type.
 * @member {String} TransactionTypeDescription
 */
Transaction.prototype['TransactionTypeDescription'] = undefined;






export default Transaction;

