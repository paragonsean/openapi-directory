/**
 * MDES Customer Service
 * This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.
 *
 * The version of the OpenAPI document: 2.0.7
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuditInfo from './AuditInfo';

/**
 * The SearchRequest model module.
 * @module model/SearchRequest
 * @version 2.0.7
 */
class SearchRequest {
    /**
     * Constructs a new <code>SearchRequest</code>.
     * @alias module:model/SearchRequest
     * @param auditInfo {module:model/AuditInfo} 
     */
    constructor(auditInfo) { 
        
        SearchRequest.initialize(this, auditInfo);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, auditInfo) { 
        obj['AuditInfo'] = auditInfo;
    }

    /**
     * Constructs a <code>SearchRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchRequest} obj Optional instance to populate.
     * @return {module:model/SearchRequest} The populated <code>SearchRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchRequest();

            if (data.hasOwnProperty('AccountPan')) {
                obj['AccountPan'] = ApiClient.convertToType(data['AccountPan'], 'String');
            }
            if (data.hasOwnProperty('AlternateAccountIdentifier')) {
                obj['AlternateAccountIdentifier'] = ApiClient.convertToType(data['AlternateAccountIdentifier'], 'String');
            }
            if (data.hasOwnProperty('AuditInfo')) {
                obj['AuditInfo'] = AuditInfo.constructFromObject(data['AuditInfo']);
            }
            if (data.hasOwnProperty('CommentId')) {
                obj['CommentId'] = ApiClient.convertToType(data['CommentId'], 'String');
            }
            if (data.hasOwnProperty('ExcludeDeletedIndicator')) {
                obj['ExcludeDeletedIndicator'] = ApiClient.convertToType(data['ExcludeDeletedIndicator'], 'String');
            }
            if (data.hasOwnProperty('PaymentAppInstanceId')) {
                obj['PaymentAppInstanceId'] = ApiClient.convertToType(data['PaymentAppInstanceId'], 'String');
            }
            if (data.hasOwnProperty('Token')) {
                obj['Token'] = ApiClient.convertToType(data['Token'], 'String');
            }
            if (data.hasOwnProperty('TokenUniqueReference')) {
                obj['TokenUniqueReference'] = ApiClient.convertToType(data['TokenUniqueReference'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SearchRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['AccountPan'] && !(typeof data['AccountPan'] === 'string' || data['AccountPan'] instanceof String)) {
            throw new Error("Expected the field `AccountPan` to be a primitive type in the JSON string but got " + data['AccountPan']);
        }
        // ensure the json data is a string
        if (data['AlternateAccountIdentifier'] && !(typeof data['AlternateAccountIdentifier'] === 'string' || data['AlternateAccountIdentifier'] instanceof String)) {
            throw new Error("Expected the field `AlternateAccountIdentifier` to be a primitive type in the JSON string but got " + data['AlternateAccountIdentifier']);
        }
        // validate the optional field `AuditInfo`
        if (data['AuditInfo']) { // data not null
          AuditInfo.validateJSON(data['AuditInfo']);
        }
        // ensure the json data is a string
        if (data['CommentId'] && !(typeof data['CommentId'] === 'string' || data['CommentId'] instanceof String)) {
            throw new Error("Expected the field `CommentId` to be a primitive type in the JSON string but got " + data['CommentId']);
        }
        // ensure the json data is a string
        if (data['ExcludeDeletedIndicator'] && !(typeof data['ExcludeDeletedIndicator'] === 'string' || data['ExcludeDeletedIndicator'] instanceof String)) {
            throw new Error("Expected the field `ExcludeDeletedIndicator` to be a primitive type in the JSON string but got " + data['ExcludeDeletedIndicator']);
        }
        // ensure the json data is a string
        if (data['PaymentAppInstanceId'] && !(typeof data['PaymentAppInstanceId'] === 'string' || data['PaymentAppInstanceId'] instanceof String)) {
            throw new Error("Expected the field `PaymentAppInstanceId` to be a primitive type in the JSON string but got " + data['PaymentAppInstanceId']);
        }
        // ensure the json data is a string
        if (data['Token'] && !(typeof data['Token'] === 'string' || data['Token'] instanceof String)) {
            throw new Error("Expected the field `Token` to be a primitive type in the JSON string but got " + data['Token']);
        }
        // ensure the json data is a string
        if (data['TokenUniqueReference'] && !(typeof data['TokenUniqueReference'] === 'string' || data['TokenUniqueReference'] instanceof String)) {
            throw new Error("Expected the field `TokenUniqueReference` to be a primitive type in the JSON string but got " + data['TokenUniqueReference']);
        }

        return true;
    }


}

SearchRequest.RequiredProperties = ["AuditInfo"];

/**
 * When present, the search will return tokens for the Account matching this Primary Account Number (PAN), for any Wallet Provider or device. Cannot be used together with any of the following search request.  parameters:TokenUniqueReference, Token, PaymentAppInstanceId, CommentId, or AlternateAccountIdentifier.
 * @member {String} AccountPan
 */
SearchRequest.prototype['AccountPan'] = undefined;

/**
 * When present, the search will return tokens matching this Alternate Account Identifier, for any Wallet Provider or device. Space characters are not allowed. Cannot be used together with any of the following search request parameters; AccountPan, TokenUniqueReference, Token, PaymentAppInstanceId, or CommentId.
 * @member {String} AlternateAccountIdentifier
 */
SearchRequest.prototype['AlternateAccountIdentifier'] = undefined;

/**
 * @member {module:model/AuditInfo} AuditInfo
 */
SearchRequest.prototype['AuditInfo'] = undefined;

/**
 * When present, the search will return one specific token linked to the comment. Cannot be used together with any of the following search request parameters; AccountPan, TokenUniqueReference, Token, PaymentAppInstanceId, or AlternateAccountIdentifier.
 * @member {String} CommentId
 */
SearchRequest.prototype['CommentId'] = undefined;

/**
 * Indicates whether deleted tokens should be excluded from the search results. When omitted, deleted tokens are included in the results. \"true\" indicates deleted tokens are excluded from the search results. \"false\" means deleted tokens are included in the search results.
 * @member {module:model/SearchRequest.ExcludeDeletedIndicatorEnum} ExcludeDeletedIndicator
 */
SearchRequest.prototype['ExcludeDeletedIndicator'] = undefined;

/**
 * When present, the search will return tokens already present or to be provisioned to the specified Payment App instance.<br><br>_Note:_ This may contain the identifier of the Secure Element or a mobile device for some programs. Cannot be used together with any of the following search request parameters; AccountPan, TokenUniqueReference, Token, CommentId, or AlternateAccountIdentifier.
 * @member {String} PaymentAppInstanceId
 */
SearchRequest.prototype['PaymentAppInstanceId'] = undefined;

/**
 * When present, the search will return one specific token. Cannot be used together with any of the following search request parameters; AccountPan, TokenUniqueReference, PaymentAppInstanceId, CommentId, or AlternateAccountIdentifier.
 * @member {String} Token
 */
SearchRequest.prototype['Token'] = undefined;

/**
 * When present, the search will return one specific matching token. Cannot be used together with any of the following search request parameters; AccountPan, Token, PaymentAppInstanceId, CommentId, or AlternateAccountIdentifier.
 * @member {String} TokenUniqueReference
 */
SearchRequest.prototype['TokenUniqueReference'] = undefined;





/**
 * Allowed values for the <code>ExcludeDeletedIndicator</code> property.
 * @enum {String}
 * @readonly
 */
SearchRequest['ExcludeDeletedIndicatorEnum'] = {

    /**
     * value: "true"
     * @const
     */
    "true": "true",

    /**
     * value: "false"
     * @const
     */
    "false": "false"
};



export default SearchRequest;

