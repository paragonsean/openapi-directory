/**
 * MDES Customer Service
 * This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.
 *
 * The version of the OpenAPI document: 2.0.7
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuditInfo from './AuditInfo';

/**
 * The TokenUpdateRequest model module.
 * @module model/TokenUpdateRequest
 * @version 2.0.7
 */
class TokenUpdateRequest {
    /**
     * Constructs a new <code>TokenUpdateRequest</code>.
     * @alias module:model/TokenUpdateRequest
     * @param auditInfo {module:model/AuditInfo} 
     */
    constructor(auditInfo) { 
        
        TokenUpdateRequest.initialize(this, auditInfo);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, auditInfo) { 
        obj['AuditInfo'] = auditInfo;
    }

    /**
     * Constructs a <code>TokenUpdateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TokenUpdateRequest} obj Optional instance to populate.
     * @return {module:model/TokenUpdateRequest} The populated <code>TokenUpdateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TokenUpdateRequest();

            if (data.hasOwnProperty('AccountPanSequenceNumber')) {
                obj['AccountPanSequenceNumber'] = ApiClient.convertToType(data['AccountPanSequenceNumber'], 'String');
            }
            if (data.hasOwnProperty('AuditInfo')) {
                obj['AuditInfo'] = AuditInfo.constructFromObject(data['AuditInfo']);
            }
            if (data.hasOwnProperty('CommentText')) {
                obj['CommentText'] = ApiClient.convertToType(data['CommentText'], 'String');
            }
            if (data.hasOwnProperty('CurrentAccountPan')) {
                obj['CurrentAccountPan'] = ApiClient.convertToType(data['CurrentAccountPan'], 'String');
            }
            if (data.hasOwnProperty('ExpirationDate')) {
                obj['ExpirationDate'] = ApiClient.convertToType(data['ExpirationDate'], 'String');
            }
            if (data.hasOwnProperty('IssuerProductConfigurationId')) {
                obj['IssuerProductConfigurationId'] = ApiClient.convertToType(data['IssuerProductConfigurationId'], 'String');
            }
            if (data.hasOwnProperty('NewAccountPan')) {
                obj['NewAccountPan'] = ApiClient.convertToType(data['NewAccountPan'], 'String');
            }
            if (data.hasOwnProperty('TokenUniqueReference')) {
                obj['TokenUniqueReference'] = ApiClient.convertToType(data['TokenUniqueReference'], 'String');
            }
            if (data.hasOwnProperty('UpdateWalletProviderIndicator')) {
                obj['UpdateWalletProviderIndicator'] = ApiClient.convertToType(data['UpdateWalletProviderIndicator'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TokenUpdateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TokenUpdateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TokenUpdateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['AccountPanSequenceNumber'] && !(typeof data['AccountPanSequenceNumber'] === 'string' || data['AccountPanSequenceNumber'] instanceof String)) {
            throw new Error("Expected the field `AccountPanSequenceNumber` to be a primitive type in the JSON string but got " + data['AccountPanSequenceNumber']);
        }
        // validate the optional field `AuditInfo`
        if (data['AuditInfo']) { // data not null
          AuditInfo.validateJSON(data['AuditInfo']);
        }
        // ensure the json data is a string
        if (data['CommentText'] && !(typeof data['CommentText'] === 'string' || data['CommentText'] instanceof String)) {
            throw new Error("Expected the field `CommentText` to be a primitive type in the JSON string but got " + data['CommentText']);
        }
        // ensure the json data is a string
        if (data['CurrentAccountPan'] && !(typeof data['CurrentAccountPan'] === 'string' || data['CurrentAccountPan'] instanceof String)) {
            throw new Error("Expected the field `CurrentAccountPan` to be a primitive type in the JSON string but got " + data['CurrentAccountPan']);
        }
        // ensure the json data is a string
        if (data['ExpirationDate'] && !(typeof data['ExpirationDate'] === 'string' || data['ExpirationDate'] instanceof String)) {
            throw new Error("Expected the field `ExpirationDate` to be a primitive type in the JSON string but got " + data['ExpirationDate']);
        }
        // ensure the json data is a string
        if (data['IssuerProductConfigurationId'] && !(typeof data['IssuerProductConfigurationId'] === 'string' || data['IssuerProductConfigurationId'] instanceof String)) {
            throw new Error("Expected the field `IssuerProductConfigurationId` to be a primitive type in the JSON string but got " + data['IssuerProductConfigurationId']);
        }
        // ensure the json data is a string
        if (data['NewAccountPan'] && !(typeof data['NewAccountPan'] === 'string' || data['NewAccountPan'] instanceof String)) {
            throw new Error("Expected the field `NewAccountPan` to be a primitive type in the JSON string but got " + data['NewAccountPan']);
        }
        // ensure the json data is a string
        if (data['TokenUniqueReference'] && !(typeof data['TokenUniqueReference'] === 'string' || data['TokenUniqueReference'] instanceof String)) {
            throw new Error("Expected the field `TokenUniqueReference` to be a primitive type in the JSON string but got " + data['TokenUniqueReference']);
        }
        // ensure the json data is a string
        if (data['UpdateWalletProviderIndicator'] && !(typeof data['UpdateWalletProviderIndicator'] === 'string' || data['UpdateWalletProviderIndicator'] instanceof String)) {
            throw new Error("Expected the field `UpdateWalletProviderIndicator` to be a primitive type in the JSON string but got " + data['UpdateWalletProviderIndicator']);
        }

        return true;
    }


}

TokenUpdateRequest.RequiredProperties = ["AuditInfo"];

/**
 * New PAN sequence number to be applied to the updated token(s). Conditional field, must not be present when IssuerProductConfigurationId is present. Optional if updating PAN mapping or Expiration Date.
 * @member {String} AccountPanSequenceNumber
 */
TokenUpdateRequest.prototype['AccountPanSequenceNumber'] = undefined;

/**
 * @member {module:model/AuditInfo} AuditInfo
 */
TokenUpdateRequest.prototype['AuditInfo'] = undefined;

/**
 * Comment related to the updated token(s).
 * @member {String} CommentText
 */
TokenUpdateRequest.prototype['CommentText'] = undefined;

/**
 * Current Account PAN of the token(s) to be updated. Conditional field, used for updating all tokens mapped to a single Account PAN and must not be present when TokenUniqueReference is present.
 * @member {String} CurrentAccountPan
 */
TokenUpdateRequest.prototype['CurrentAccountPan'] = undefined;

/**
 * New expiration date to be applied to the updated token(s). Conditional field, must not be present when IssuerProductConfigurationId is present. Optional if updating PAN mapping or PAN Sequence Number.
 * @member {String} ExpirationDate
 */
TokenUpdateRequest.prototype['ExpirationDate'] = undefined;

/**
 * New product configuration ID to be applied to the updated token(s). Conditional field, must not be present if any of the following are present; NewAccountPan, ExpirationDate, AccountPanSequenceNumber.
 * @member {String} IssuerProductConfigurationId
 */
TokenUpdateRequest.prototype['IssuerProductConfigurationId'] = undefined;

/**
 * New Account PAN to be applied to the updated token(s) if there is in fact a new Account PAN. Optional if updating Expiration Date or PAN Sequence Number.
 * @member {String} NewAccountPan
 */
TokenUpdateRequest.prototype['NewAccountPan'] = undefined;

/**
 * Unique reference of the token to be updated. Conditional field, used for updating a single token and not used when CurrentAccountPan is present.
 * @member {String} TokenUniqueReference
 */
TokenUpdateRequest.prototype['TokenUniqueReference'] = undefined;

/**
 * Indicates whether the updated token information should be provided to the Wallet Provider. Valid values:<br />    \"0\" - Pass the updated information to the Wallet Provider<br />    \"1\" - Do not pass the updated information to the Wallet Provider.<br />Optional parameter. The default is 1 if not present.
 * @member {String} UpdateWalletProviderIndicator
 */
TokenUpdateRequest.prototype['UpdateWalletProviderIndicator'] = undefined;






export default TokenUpdateRequest;

