/**
 * MDES Customer Service
 * This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.
 *
 * The version of the OpenAPI document: 2.0.7
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Device model module.
 * @module model/Device
 * @version 2.0.7
 */
class Device {
    /**
     * Constructs a new <code>Device</code>.
     * @alias module:model/Device
     */
    constructor() { 
        
        Device.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Device</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Device} obj Optional instance to populate.
     * @return {module:model/Device} The populated <code>Device</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Device();

            if (data.hasOwnProperty('DeviceId')) {
                obj['DeviceId'] = ApiClient.convertToType(data['DeviceId'], 'String');
            }
            if (data.hasOwnProperty('DeviceName')) {
                obj['DeviceName'] = ApiClient.convertToType(data['DeviceName'], 'String');
            }
            if (data.hasOwnProperty('DeviceType')) {
                obj['DeviceType'] = ApiClient.convertToType(data['DeviceType'], 'String');
            }
            if (data.hasOwnProperty('SecureElementId')) {
                obj['SecureElementId'] = ApiClient.convertToType(data['SecureElementId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Device</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Device</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['DeviceId'] && !(typeof data['DeviceId'] === 'string' || data['DeviceId'] instanceof String)) {
            throw new Error("Expected the field `DeviceId` to be a primitive type in the JSON string but got " + data['DeviceId']);
        }
        // ensure the json data is a string
        if (data['DeviceName'] && !(typeof data['DeviceName'] === 'string' || data['DeviceName'] instanceof String)) {
            throw new Error("Expected the field `DeviceName` to be a primitive type in the JSON string but got " + data['DeviceName']);
        }
        // ensure the json data is a string
        if (data['DeviceType'] && !(typeof data['DeviceType'] === 'string' || data['DeviceType'] instanceof String)) {
            throw new Error("Expected the field `DeviceType` to be a primitive type in the JSON string but got " + data['DeviceType']);
        }
        // ensure the json data is a string
        if (data['SecureElementId'] && !(typeof data['SecureElementId'] === 'string' || data['SecureElementId'] instanceof String)) {
            throw new Error("Expected the field `SecureElementId` to be a primitive type in the JSON string but got " + data['SecureElementId']);
        }

        return true;
    }


}



/**
 * Serial number of the device provisioned with the token. May be masked. Conditional field, not present for CoF tokens, and only present when provided by a Wallet Provider. May be masked (by the Wallet Provider).<br />Example (unmasked) \"C2ZBY14310005664\". Example (masked) \"xxxxY1431xxxxxxx\".
 * @member {String} DeviceId
 */
Device.prototype['DeviceId'] = undefined;

/**
 * Nickname of the device provisioned with the token. Conditional field, not present for CoF tokens, and only present when the Payment App Provider has implemented the 'Get Device Info' MDES API.
 * @member {String} DeviceName
 */
Device.prototype['DeviceName'] = undefined;

/**
 * Type of the device provisioned with the token. Valid values:<br />    \"03\" - Watch<br />    \"09\" - Mobile Phone or Smartphone with a fixed (non-removable) secure element not controlled by the mobile network operator<br />    \"13\" - Tablet or e-reader with a fixed (non-removable) secure element not controlled by the mobile network operator<br />    \"14\" - Mobile phone or Smartphone with a payment application running in a host processor<br />    \"15\" - Tablet or E-Book with a payment application running in a host processor<br />    \"16\" ? Mobile Phone or Smartphone with a payment application running in the TEE of a host processor<br />    \"17\" ? Tablet or E-Book with a payment application running in the TEE of a host processor<br />    \"18\" ? Watch with a payment application running in the TEE of a host processor<br />    \"19\" ? Watch with a payment application running in a host processor.<br />    \"21\" ? Phone.<br />    \"22\" ? Tablet. <br />    \"23\" ? Watch.<br />    \"24\" ? Sticker.<br />    \"25\" ? Personal Computer.<br />    \"26\" ? Device Peripheral.<br />    \"27\" ? Tag.<br />    \"28\" ? Jewelry.<br />    \"29\" ?  Fashion Accessory.<br />    \"30\" ?  Garment.<br />    \"31\" ?  Domestic Appliance.<br />    \"32\" ?  Vehicle.<br />    \"33\" ?  Media or Gaming Device.<br />    \"99\" ?  Undefined.<br />Conditional field, not present for CoF tokens, and only present when supplied by the Payment App Provider.
 * @member {String} DeviceType
 */
Device.prototype['DeviceType'] = undefined;

/**
 * Identifier of the secure element provisioned with the token. Conditional field, not present for CoF tokens, and only present when the token is provisioned to a secure element.
 * @member {String} SecureElementId
 */
Device.prototype['SecureElementId'] = undefined;






export default Device;

