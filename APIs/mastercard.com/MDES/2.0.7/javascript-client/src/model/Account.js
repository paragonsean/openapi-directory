/**
 * MDES Customer Service
 * This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.
 *
 * The version of the OpenAPI document: 2.0.7
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Tokens from './Tokens';

/**
 * The Account model module.
 * @module model/Account
 * @version 2.0.7
 */
class Account {
    /**
     * Constructs a new <code>Account</code>.
     * @alias module:model/Account
     */
    constructor() { 
        
        Account.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Account</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Account} obj Optional instance to populate.
     * @return {module:model/Account} The populated <code>Account</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Account();

            if (data.hasOwnProperty('AccountPanSuffix')) {
                obj['AccountPanSuffix'] = ApiClient.convertToType(data['AccountPanSuffix'], 'String');
            }
            if (data.hasOwnProperty('AlternateAccountIdentifierSuffix')) {
                obj['AlternateAccountIdentifierSuffix'] = ApiClient.convertToType(data['AlternateAccountIdentifierSuffix'], 'String');
            }
            if (data.hasOwnProperty('ExpirationDate')) {
                obj['ExpirationDate'] = ApiClient.convertToType(data['ExpirationDate'], 'String');
            }
            if (data.hasOwnProperty('Tokens')) {
                obj['Tokens'] = Tokens.constructFromObject(data['Tokens']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Account</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Account</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AccountPanSuffix'] && !(typeof data['AccountPanSuffix'] === 'string' || data['AccountPanSuffix'] instanceof String)) {
            throw new Error("Expected the field `AccountPanSuffix` to be a primitive type in the JSON string but got " + data['AccountPanSuffix']);
        }
        // ensure the json data is a string
        if (data['AlternateAccountIdentifierSuffix'] && !(typeof data['AlternateAccountIdentifierSuffix'] === 'string' || data['AlternateAccountIdentifierSuffix'] instanceof String)) {
            throw new Error("Expected the field `AlternateAccountIdentifierSuffix` to be a primitive type in the JSON string but got " + data['AlternateAccountIdentifierSuffix']);
        }
        // ensure the json data is a string
        if (data['ExpirationDate'] && !(typeof data['ExpirationDate'] === 'string' || data['ExpirationDate'] instanceof String)) {
            throw new Error("Expected the field `ExpirationDate` to be a primitive type in the JSON string but got " + data['ExpirationDate']);
        }
        // validate the optional field `Tokens`
        if (data['Tokens']) { // data not null
          Tokens.validateJSON(data['Tokens']);
        }

        return true;
    }


}



/**
 * Last 4 digits of Account PAN mapped (or to be mapped) to Token(s).
 * @member {String} AccountPanSuffix
 */
Account.prototype['AccountPanSuffix'] = undefined;

/**
 * Alternate Account Identifier is a cardholder friendly reference to a bank account. It is typically used to identify associated tokens when the cardholder is unaware of their Account PAN. The Alternate Account Identifier Suffix exposes just the last few characters of the full identifier in order to protect the full identifier from possible fraud.
 * @member {String} AlternateAccountIdentifierSuffix
 */
Account.prototype['AlternateAccountIdentifierSuffix'] = undefined;

/**
 * Expiration date of Account PAN mapped (or to be mapped) to Token(s). 'MMYY' Format.
 * @member {String} ExpirationDate
 */
Account.prototype['ExpirationDate'] = undefined;

/**
 * @member {module:model/Tokens} Tokens
 */
Account.prototype['Tokens'] = undefined;






export default Account;

