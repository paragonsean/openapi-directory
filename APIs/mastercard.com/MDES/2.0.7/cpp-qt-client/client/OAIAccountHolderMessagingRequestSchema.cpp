/**
 * MDES Customer Service
 * This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.
 *
 * The version of the OpenAPI document: 2.0.7
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountHolderMessagingRequestSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountHolderMessagingRequestSchema::OAIAccountHolderMessagingRequestSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountHolderMessagingRequestSchema::OAIAccountHolderMessagingRequestSchema() {
    this->initializeModel();
}

OAIAccountHolderMessagingRequestSchema::~OAIAccountHolderMessagingRequestSchema() {}

void OAIAccountHolderMessagingRequestSchema::initializeModel() {

    m_audit_info_isSet = false;
    m_audit_info_isValid = false;

    m_issuer_application_message_display_isSet = false;
    m_issuer_application_message_display_isValid = false;

    m_message_expiration_isSet = false;
    m_message_expiration_isValid = false;

    m_message_identifier_isSet = false;
    m_message_identifier_isValid = false;

    m_message_language_code_isSet = false;
    m_message_language_code_isValid = false;

    m_message_text_isSet = false;
    m_message_text_isValid = false;

    m_token_unique_reference_isSet = false;
    m_token_unique_reference_isValid = false;
}

void OAIAccountHolderMessagingRequestSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountHolderMessagingRequestSchema::fromJsonObject(QJsonObject json) {

    m_audit_info_isValid = ::OpenAPI::fromJsonValue(m_audit_info, json[QString("AuditInfo")]);
    m_audit_info_isSet = !json[QString("AuditInfo")].isNull() && m_audit_info_isValid;

    m_issuer_application_message_display_isValid = ::OpenAPI::fromJsonValue(m_issuer_application_message_display, json[QString("IssuerApplicationMessageDisplay")]);
    m_issuer_application_message_display_isSet = !json[QString("IssuerApplicationMessageDisplay")].isNull() && m_issuer_application_message_display_isValid;

    m_message_expiration_isValid = ::OpenAPI::fromJsonValue(m_message_expiration, json[QString("MessageExpiration")]);
    m_message_expiration_isSet = !json[QString("MessageExpiration")].isNull() && m_message_expiration_isValid;

    m_message_identifier_isValid = ::OpenAPI::fromJsonValue(m_message_identifier, json[QString("MessageIdentifier")]);
    m_message_identifier_isSet = !json[QString("MessageIdentifier")].isNull() && m_message_identifier_isValid;

    m_message_language_code_isValid = ::OpenAPI::fromJsonValue(m_message_language_code, json[QString("MessageLanguageCode")]);
    m_message_language_code_isSet = !json[QString("MessageLanguageCode")].isNull() && m_message_language_code_isValid;

    m_message_text_isValid = ::OpenAPI::fromJsonValue(m_message_text, json[QString("MessageText")]);
    m_message_text_isSet = !json[QString("MessageText")].isNull() && m_message_text_isValid;

    m_token_unique_reference_isValid = ::OpenAPI::fromJsonValue(m_token_unique_reference, json[QString("TokenUniqueReference")]);
    m_token_unique_reference_isSet = !json[QString("TokenUniqueReference")].isNull() && m_token_unique_reference_isValid;
}

QString OAIAccountHolderMessagingRequestSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountHolderMessagingRequestSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_audit_info.isSet()) {
        obj.insert(QString("AuditInfo"), ::OpenAPI::toJsonValue(m_audit_info));
    }
    if (m_issuer_application_message_display_isSet) {
        obj.insert(QString("IssuerApplicationMessageDisplay"), ::OpenAPI::toJsonValue(m_issuer_application_message_display));
    }
    if (m_message_expiration_isSet) {
        obj.insert(QString("MessageExpiration"), ::OpenAPI::toJsonValue(m_message_expiration));
    }
    if (m_message_identifier_isSet) {
        obj.insert(QString("MessageIdentifier"), ::OpenAPI::toJsonValue(m_message_identifier));
    }
    if (m_message_language_code_isSet) {
        obj.insert(QString("MessageLanguageCode"), ::OpenAPI::toJsonValue(m_message_language_code));
    }
    if (m_message_text_isSet) {
        obj.insert(QString("MessageText"), ::OpenAPI::toJsonValue(m_message_text));
    }
    if (m_token_unique_reference_isSet) {
        obj.insert(QString("TokenUniqueReference"), ::OpenAPI::toJsonValue(m_token_unique_reference));
    }
    return obj;
}

OAIAuditInfo OAIAccountHolderMessagingRequestSchema::getAuditInfo() const {
    return m_audit_info;
}
void OAIAccountHolderMessagingRequestSchema::setAuditInfo(const OAIAuditInfo &audit_info) {
    m_audit_info = audit_info;
    m_audit_info_isSet = true;
}

bool OAIAccountHolderMessagingRequestSchema::is_audit_info_Set() const{
    return m_audit_info_isSet;
}

bool OAIAccountHolderMessagingRequestSchema::is_audit_info_Valid() const{
    return m_audit_info_isValid;
}

QString OAIAccountHolderMessagingRequestSchema::getIssuerApplicationMessageDisplay() const {
    return m_issuer_application_message_display;
}
void OAIAccountHolderMessagingRequestSchema::setIssuerApplicationMessageDisplay(const QString &issuer_application_message_display) {
    m_issuer_application_message_display = issuer_application_message_display;
    m_issuer_application_message_display_isSet = true;
}

bool OAIAccountHolderMessagingRequestSchema::is_issuer_application_message_display_Set() const{
    return m_issuer_application_message_display_isSet;
}

bool OAIAccountHolderMessagingRequestSchema::is_issuer_application_message_display_Valid() const{
    return m_issuer_application_message_display_isValid;
}

QString OAIAccountHolderMessagingRequestSchema::getMessageExpiration() const {
    return m_message_expiration;
}
void OAIAccountHolderMessagingRequestSchema::setMessageExpiration(const QString &message_expiration) {
    m_message_expiration = message_expiration;
    m_message_expiration_isSet = true;
}

bool OAIAccountHolderMessagingRequestSchema::is_message_expiration_Set() const{
    return m_message_expiration_isSet;
}

bool OAIAccountHolderMessagingRequestSchema::is_message_expiration_Valid() const{
    return m_message_expiration_isValid;
}

QString OAIAccountHolderMessagingRequestSchema::getMessageIdentifier() const {
    return m_message_identifier;
}
void OAIAccountHolderMessagingRequestSchema::setMessageIdentifier(const QString &message_identifier) {
    m_message_identifier = message_identifier;
    m_message_identifier_isSet = true;
}

bool OAIAccountHolderMessagingRequestSchema::is_message_identifier_Set() const{
    return m_message_identifier_isSet;
}

bool OAIAccountHolderMessagingRequestSchema::is_message_identifier_Valid() const{
    return m_message_identifier_isValid;
}

QString OAIAccountHolderMessagingRequestSchema::getMessageLanguageCode() const {
    return m_message_language_code;
}
void OAIAccountHolderMessagingRequestSchema::setMessageLanguageCode(const QString &message_language_code) {
    m_message_language_code = message_language_code;
    m_message_language_code_isSet = true;
}

bool OAIAccountHolderMessagingRequestSchema::is_message_language_code_Set() const{
    return m_message_language_code_isSet;
}

bool OAIAccountHolderMessagingRequestSchema::is_message_language_code_Valid() const{
    return m_message_language_code_isValid;
}

QString OAIAccountHolderMessagingRequestSchema::getMessageText() const {
    return m_message_text;
}
void OAIAccountHolderMessagingRequestSchema::setMessageText(const QString &message_text) {
    m_message_text = message_text;
    m_message_text_isSet = true;
}

bool OAIAccountHolderMessagingRequestSchema::is_message_text_Set() const{
    return m_message_text_isSet;
}

bool OAIAccountHolderMessagingRequestSchema::is_message_text_Valid() const{
    return m_message_text_isValid;
}

QString OAIAccountHolderMessagingRequestSchema::getTokenUniqueReference() const {
    return m_token_unique_reference;
}
void OAIAccountHolderMessagingRequestSchema::setTokenUniqueReference(const QString &token_unique_reference) {
    m_token_unique_reference = token_unique_reference;
    m_token_unique_reference_isSet = true;
}

bool OAIAccountHolderMessagingRequestSchema::is_token_unique_reference_Set() const{
    return m_token_unique_reference_isSet;
}

bool OAIAccountHolderMessagingRequestSchema::is_token_unique_reference_Valid() const{
    return m_token_unique_reference_isValid;
}

bool OAIAccountHolderMessagingRequestSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audit_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_application_message_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_unique_reference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountHolderMessagingRequestSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_audit_info_isValid && m_issuer_application_message_display_isValid && m_message_expiration_isValid && m_message_identifier_isValid && m_message_language_code_isValid && m_message_text_isValid && m_token_unique_reference_isValid && true;
}

} // namespace OpenAPI
