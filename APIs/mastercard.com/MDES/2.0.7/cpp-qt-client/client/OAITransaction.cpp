/**
 * MDES Customer Service
 * This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.
 *
 * The version of the OpenAPI document: 2.0.7
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransaction::OAITransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransaction::OAITransaction() {
    this->initializeModel();
}

OAITransaction::~OAITransaction() {}

void OAITransaction::initializeModel() {

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_merchant_category_code_isSet = false;
    m_merchant_category_code_isValid = false;

    m_merchant_category_description_isSet = false;
    m_merchant_category_description_isValid = false;

    m_merchant_name_isSet = false;
    m_merchant_name_isValid = false;

    m_pos_entry_mode_isSet = false;
    m_pos_entry_mode_isValid = false;

    m_transaction_amount_isSet = false;
    m_transaction_amount_isValid = false;

    m_transaction_date_time_isSet = false;
    m_transaction_date_time_isValid = false;

    m_transaction_status_code_isSet = false;
    m_transaction_status_code_isValid = false;

    m_transaction_type_code_isSet = false;
    m_transaction_type_code_isValid = false;

    m_transaction_type_description_isSet = false;
    m_transaction_type_description_isValid = false;
}

void OAITransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransaction::fromJsonObject(QJsonObject json) {

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("CurrencyCode")]);
    m_currency_code_isSet = !json[QString("CurrencyCode")].isNull() && m_currency_code_isValid;

    m_merchant_category_code_isValid = ::OpenAPI::fromJsonValue(m_merchant_category_code, json[QString("MerchantCategoryCode")]);
    m_merchant_category_code_isSet = !json[QString("MerchantCategoryCode")].isNull() && m_merchant_category_code_isValid;

    m_merchant_category_description_isValid = ::OpenAPI::fromJsonValue(m_merchant_category_description, json[QString("MerchantCategoryDescription")]);
    m_merchant_category_description_isSet = !json[QString("MerchantCategoryDescription")].isNull() && m_merchant_category_description_isValid;

    m_merchant_name_isValid = ::OpenAPI::fromJsonValue(m_merchant_name, json[QString("MerchantName")]);
    m_merchant_name_isSet = !json[QString("MerchantName")].isNull() && m_merchant_name_isValid;

    m_pos_entry_mode_isValid = ::OpenAPI::fromJsonValue(m_pos_entry_mode, json[QString("POSEntryMode")]);
    m_pos_entry_mode_isSet = !json[QString("POSEntryMode")].isNull() && m_pos_entry_mode_isValid;

    m_transaction_amount_isValid = ::OpenAPI::fromJsonValue(m_transaction_amount, json[QString("TransactionAmount")]);
    m_transaction_amount_isSet = !json[QString("TransactionAmount")].isNull() && m_transaction_amount_isValid;

    m_transaction_date_time_isValid = ::OpenAPI::fromJsonValue(m_transaction_date_time, json[QString("TransactionDateTime")]);
    m_transaction_date_time_isSet = !json[QString("TransactionDateTime")].isNull() && m_transaction_date_time_isValid;

    m_transaction_status_code_isValid = ::OpenAPI::fromJsonValue(m_transaction_status_code, json[QString("TransactionStatusCode")]);
    m_transaction_status_code_isSet = !json[QString("TransactionStatusCode")].isNull() && m_transaction_status_code_isValid;

    m_transaction_type_code_isValid = ::OpenAPI::fromJsonValue(m_transaction_type_code, json[QString("TransactionTypeCode")]);
    m_transaction_type_code_isSet = !json[QString("TransactionTypeCode")].isNull() && m_transaction_type_code_isValid;

    m_transaction_type_description_isValid = ::OpenAPI::fromJsonValue(m_transaction_type_description, json[QString("TransactionTypeDescription")]);
    m_transaction_type_description_isSet = !json[QString("TransactionTypeDescription")].isNull() && m_transaction_type_description_isValid;
}

QString OAITransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_code_isSet) {
        obj.insert(QString("CurrencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_merchant_category_code_isSet) {
        obj.insert(QString("MerchantCategoryCode"), ::OpenAPI::toJsonValue(m_merchant_category_code));
    }
    if (m_merchant_category_description_isSet) {
        obj.insert(QString("MerchantCategoryDescription"), ::OpenAPI::toJsonValue(m_merchant_category_description));
    }
    if (m_merchant_name_isSet) {
        obj.insert(QString("MerchantName"), ::OpenAPI::toJsonValue(m_merchant_name));
    }
    if (m_pos_entry_mode_isSet) {
        obj.insert(QString("POSEntryMode"), ::OpenAPI::toJsonValue(m_pos_entry_mode));
    }
    if (m_transaction_amount_isSet) {
        obj.insert(QString("TransactionAmount"), ::OpenAPI::toJsonValue(m_transaction_amount));
    }
    if (m_transaction_date_time_isSet) {
        obj.insert(QString("TransactionDateTime"), ::OpenAPI::toJsonValue(m_transaction_date_time));
    }
    if (m_transaction_status_code_isSet) {
        obj.insert(QString("TransactionStatusCode"), ::OpenAPI::toJsonValue(m_transaction_status_code));
    }
    if (m_transaction_type_code_isSet) {
        obj.insert(QString("TransactionTypeCode"), ::OpenAPI::toJsonValue(m_transaction_type_code));
    }
    if (m_transaction_type_description_isSet) {
        obj.insert(QString("TransactionTypeDescription"), ::OpenAPI::toJsonValue(m_transaction_type_description));
    }
    return obj;
}

QString OAITransaction::getCurrencyCode() const {
    return m_currency_code;
}
void OAITransaction::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAITransaction::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAITransaction::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAITransaction::getMerchantCategoryCode() const {
    return m_merchant_category_code;
}
void OAITransaction::setMerchantCategoryCode(const QString &merchant_category_code) {
    m_merchant_category_code = merchant_category_code;
    m_merchant_category_code_isSet = true;
}

bool OAITransaction::is_merchant_category_code_Set() const{
    return m_merchant_category_code_isSet;
}

bool OAITransaction::is_merchant_category_code_Valid() const{
    return m_merchant_category_code_isValid;
}

QString OAITransaction::getMerchantCategoryDescription() const {
    return m_merchant_category_description;
}
void OAITransaction::setMerchantCategoryDescription(const QString &merchant_category_description) {
    m_merchant_category_description = merchant_category_description;
    m_merchant_category_description_isSet = true;
}

bool OAITransaction::is_merchant_category_description_Set() const{
    return m_merchant_category_description_isSet;
}

bool OAITransaction::is_merchant_category_description_Valid() const{
    return m_merchant_category_description_isValid;
}

QString OAITransaction::getMerchantName() const {
    return m_merchant_name;
}
void OAITransaction::setMerchantName(const QString &merchant_name) {
    m_merchant_name = merchant_name;
    m_merchant_name_isSet = true;
}

bool OAITransaction::is_merchant_name_Set() const{
    return m_merchant_name_isSet;
}

bool OAITransaction::is_merchant_name_Valid() const{
    return m_merchant_name_isValid;
}

QString OAITransaction::getPosEntryMode() const {
    return m_pos_entry_mode;
}
void OAITransaction::setPosEntryMode(const QString &pos_entry_mode) {
    m_pos_entry_mode = pos_entry_mode;
    m_pos_entry_mode_isSet = true;
}

bool OAITransaction::is_pos_entry_mode_Set() const{
    return m_pos_entry_mode_isSet;
}

bool OAITransaction::is_pos_entry_mode_Valid() const{
    return m_pos_entry_mode_isValid;
}

QString OAITransaction::getTransactionAmount() const {
    return m_transaction_amount;
}
void OAITransaction::setTransactionAmount(const QString &transaction_amount) {
    m_transaction_amount = transaction_amount;
    m_transaction_amount_isSet = true;
}

bool OAITransaction::is_transaction_amount_Set() const{
    return m_transaction_amount_isSet;
}

bool OAITransaction::is_transaction_amount_Valid() const{
    return m_transaction_amount_isValid;
}

QString OAITransaction::getTransactionDateTime() const {
    return m_transaction_date_time;
}
void OAITransaction::setTransactionDateTime(const QString &transaction_date_time) {
    m_transaction_date_time = transaction_date_time;
    m_transaction_date_time_isSet = true;
}

bool OAITransaction::is_transaction_date_time_Set() const{
    return m_transaction_date_time_isSet;
}

bool OAITransaction::is_transaction_date_time_Valid() const{
    return m_transaction_date_time_isValid;
}

QString OAITransaction::getTransactionStatusCode() const {
    return m_transaction_status_code;
}
void OAITransaction::setTransactionStatusCode(const QString &transaction_status_code) {
    m_transaction_status_code = transaction_status_code;
    m_transaction_status_code_isSet = true;
}

bool OAITransaction::is_transaction_status_code_Set() const{
    return m_transaction_status_code_isSet;
}

bool OAITransaction::is_transaction_status_code_Valid() const{
    return m_transaction_status_code_isValid;
}

QString OAITransaction::getTransactionTypeCode() const {
    return m_transaction_type_code;
}
void OAITransaction::setTransactionTypeCode(const QString &transaction_type_code) {
    m_transaction_type_code = transaction_type_code;
    m_transaction_type_code_isSet = true;
}

bool OAITransaction::is_transaction_type_code_Set() const{
    return m_transaction_type_code_isSet;
}

bool OAITransaction::is_transaction_type_code_Valid() const{
    return m_transaction_type_code_isValid;
}

QString OAITransaction::getTransactionTypeDescription() const {
    return m_transaction_type_description;
}
void OAITransaction::setTransactionTypeDescription(const QString &transaction_type_description) {
    m_transaction_type_description = transaction_type_description;
    m_transaction_type_description_isSet = true;
}

bool OAITransaction::is_transaction_type_description_Set() const{
    return m_transaction_type_description_isSet;
}

bool OAITransaction::is_transaction_type_description_Valid() const{
    return m_transaction_type_description_isValid;
}

bool OAITransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_category_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_category_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pos_entry_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_type_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
