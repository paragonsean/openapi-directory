/**
 * MDES Customer Service
 * This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.
 *
 * The version of the OpenAPI document: 2.0.7
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITokenUpdateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITokenUpdateRequest::OAITokenUpdateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITokenUpdateRequest::OAITokenUpdateRequest() {
    this->initializeModel();
}

OAITokenUpdateRequest::~OAITokenUpdateRequest() {}

void OAITokenUpdateRequest::initializeModel() {

    m_account_pan_sequence_number_isSet = false;
    m_account_pan_sequence_number_isValid = false;

    m_audit_info_isSet = false;
    m_audit_info_isValid = false;

    m_comment_text_isSet = false;
    m_comment_text_isValid = false;

    m_current_account_pan_isSet = false;
    m_current_account_pan_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_issuer_product_configuration_id_isSet = false;
    m_issuer_product_configuration_id_isValid = false;

    m_new_account_pan_isSet = false;
    m_new_account_pan_isValid = false;

    m_token_unique_reference_isSet = false;
    m_token_unique_reference_isValid = false;

    m_update_wallet_provider_indicator_isSet = false;
    m_update_wallet_provider_indicator_isValid = false;
}

void OAITokenUpdateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITokenUpdateRequest::fromJsonObject(QJsonObject json) {

    m_account_pan_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_account_pan_sequence_number, json[QString("AccountPanSequenceNumber")]);
    m_account_pan_sequence_number_isSet = !json[QString("AccountPanSequenceNumber")].isNull() && m_account_pan_sequence_number_isValid;

    m_audit_info_isValid = ::OpenAPI::fromJsonValue(m_audit_info, json[QString("AuditInfo")]);
    m_audit_info_isSet = !json[QString("AuditInfo")].isNull() && m_audit_info_isValid;

    m_comment_text_isValid = ::OpenAPI::fromJsonValue(m_comment_text, json[QString("CommentText")]);
    m_comment_text_isSet = !json[QString("CommentText")].isNull() && m_comment_text_isValid;

    m_current_account_pan_isValid = ::OpenAPI::fromJsonValue(m_current_account_pan, json[QString("CurrentAccountPan")]);
    m_current_account_pan_isSet = !json[QString("CurrentAccountPan")].isNull() && m_current_account_pan_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("ExpirationDate")]);
    m_expiration_date_isSet = !json[QString("ExpirationDate")].isNull() && m_expiration_date_isValid;

    m_issuer_product_configuration_id_isValid = ::OpenAPI::fromJsonValue(m_issuer_product_configuration_id, json[QString("IssuerProductConfigurationId")]);
    m_issuer_product_configuration_id_isSet = !json[QString("IssuerProductConfigurationId")].isNull() && m_issuer_product_configuration_id_isValid;

    m_new_account_pan_isValid = ::OpenAPI::fromJsonValue(m_new_account_pan, json[QString("NewAccountPan")]);
    m_new_account_pan_isSet = !json[QString("NewAccountPan")].isNull() && m_new_account_pan_isValid;

    m_token_unique_reference_isValid = ::OpenAPI::fromJsonValue(m_token_unique_reference, json[QString("TokenUniqueReference")]);
    m_token_unique_reference_isSet = !json[QString("TokenUniqueReference")].isNull() && m_token_unique_reference_isValid;

    m_update_wallet_provider_indicator_isValid = ::OpenAPI::fromJsonValue(m_update_wallet_provider_indicator, json[QString("UpdateWalletProviderIndicator")]);
    m_update_wallet_provider_indicator_isSet = !json[QString("UpdateWalletProviderIndicator")].isNull() && m_update_wallet_provider_indicator_isValid;
}

QString OAITokenUpdateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITokenUpdateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_account_pan_sequence_number_isSet) {
        obj.insert(QString("AccountPanSequenceNumber"), ::OpenAPI::toJsonValue(m_account_pan_sequence_number));
    }
    if (m_audit_info.isSet()) {
        obj.insert(QString("AuditInfo"), ::OpenAPI::toJsonValue(m_audit_info));
    }
    if (m_comment_text_isSet) {
        obj.insert(QString("CommentText"), ::OpenAPI::toJsonValue(m_comment_text));
    }
    if (m_current_account_pan_isSet) {
        obj.insert(QString("CurrentAccountPan"), ::OpenAPI::toJsonValue(m_current_account_pan));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("ExpirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_issuer_product_configuration_id_isSet) {
        obj.insert(QString("IssuerProductConfigurationId"), ::OpenAPI::toJsonValue(m_issuer_product_configuration_id));
    }
    if (m_new_account_pan_isSet) {
        obj.insert(QString("NewAccountPan"), ::OpenAPI::toJsonValue(m_new_account_pan));
    }
    if (m_token_unique_reference_isSet) {
        obj.insert(QString("TokenUniqueReference"), ::OpenAPI::toJsonValue(m_token_unique_reference));
    }
    if (m_update_wallet_provider_indicator_isSet) {
        obj.insert(QString("UpdateWalletProviderIndicator"), ::OpenAPI::toJsonValue(m_update_wallet_provider_indicator));
    }
    return obj;
}

QString OAITokenUpdateRequest::getAccountPanSequenceNumber() const {
    return m_account_pan_sequence_number;
}
void OAITokenUpdateRequest::setAccountPanSequenceNumber(const QString &account_pan_sequence_number) {
    m_account_pan_sequence_number = account_pan_sequence_number;
    m_account_pan_sequence_number_isSet = true;
}

bool OAITokenUpdateRequest::is_account_pan_sequence_number_Set() const{
    return m_account_pan_sequence_number_isSet;
}

bool OAITokenUpdateRequest::is_account_pan_sequence_number_Valid() const{
    return m_account_pan_sequence_number_isValid;
}

OAIAuditInfo OAITokenUpdateRequest::getAuditInfo() const {
    return m_audit_info;
}
void OAITokenUpdateRequest::setAuditInfo(const OAIAuditInfo &audit_info) {
    m_audit_info = audit_info;
    m_audit_info_isSet = true;
}

bool OAITokenUpdateRequest::is_audit_info_Set() const{
    return m_audit_info_isSet;
}

bool OAITokenUpdateRequest::is_audit_info_Valid() const{
    return m_audit_info_isValid;
}

QString OAITokenUpdateRequest::getCommentText() const {
    return m_comment_text;
}
void OAITokenUpdateRequest::setCommentText(const QString &comment_text) {
    m_comment_text = comment_text;
    m_comment_text_isSet = true;
}

bool OAITokenUpdateRequest::is_comment_text_Set() const{
    return m_comment_text_isSet;
}

bool OAITokenUpdateRequest::is_comment_text_Valid() const{
    return m_comment_text_isValid;
}

QString OAITokenUpdateRequest::getCurrentAccountPan() const {
    return m_current_account_pan;
}
void OAITokenUpdateRequest::setCurrentAccountPan(const QString &current_account_pan) {
    m_current_account_pan = current_account_pan;
    m_current_account_pan_isSet = true;
}

bool OAITokenUpdateRequest::is_current_account_pan_Set() const{
    return m_current_account_pan_isSet;
}

bool OAITokenUpdateRequest::is_current_account_pan_Valid() const{
    return m_current_account_pan_isValid;
}

QString OAITokenUpdateRequest::getExpirationDate() const {
    return m_expiration_date;
}
void OAITokenUpdateRequest::setExpirationDate(const QString &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAITokenUpdateRequest::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAITokenUpdateRequest::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QString OAITokenUpdateRequest::getIssuerProductConfigurationId() const {
    return m_issuer_product_configuration_id;
}
void OAITokenUpdateRequest::setIssuerProductConfigurationId(const QString &issuer_product_configuration_id) {
    m_issuer_product_configuration_id = issuer_product_configuration_id;
    m_issuer_product_configuration_id_isSet = true;
}

bool OAITokenUpdateRequest::is_issuer_product_configuration_id_Set() const{
    return m_issuer_product_configuration_id_isSet;
}

bool OAITokenUpdateRequest::is_issuer_product_configuration_id_Valid() const{
    return m_issuer_product_configuration_id_isValid;
}

QString OAITokenUpdateRequest::getNewAccountPan() const {
    return m_new_account_pan;
}
void OAITokenUpdateRequest::setNewAccountPan(const QString &new_account_pan) {
    m_new_account_pan = new_account_pan;
    m_new_account_pan_isSet = true;
}

bool OAITokenUpdateRequest::is_new_account_pan_Set() const{
    return m_new_account_pan_isSet;
}

bool OAITokenUpdateRequest::is_new_account_pan_Valid() const{
    return m_new_account_pan_isValid;
}

QString OAITokenUpdateRequest::getTokenUniqueReference() const {
    return m_token_unique_reference;
}
void OAITokenUpdateRequest::setTokenUniqueReference(const QString &token_unique_reference) {
    m_token_unique_reference = token_unique_reference;
    m_token_unique_reference_isSet = true;
}

bool OAITokenUpdateRequest::is_token_unique_reference_Set() const{
    return m_token_unique_reference_isSet;
}

bool OAITokenUpdateRequest::is_token_unique_reference_Valid() const{
    return m_token_unique_reference_isValid;
}

QString OAITokenUpdateRequest::getUpdateWalletProviderIndicator() const {
    return m_update_wallet_provider_indicator;
}
void OAITokenUpdateRequest::setUpdateWalletProviderIndicator(const QString &update_wallet_provider_indicator) {
    m_update_wallet_provider_indicator = update_wallet_provider_indicator;
    m_update_wallet_provider_indicator_isSet = true;
}

bool OAITokenUpdateRequest::is_update_wallet_provider_indicator_Set() const{
    return m_update_wallet_provider_indicator_isSet;
}

bool OAITokenUpdateRequest::is_update_wallet_provider_indicator_Valid() const{
    return m_update_wallet_provider_indicator_isValid;
}

bool OAITokenUpdateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_pan_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audit_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_account_pan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_product_configuration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_account_pan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_unique_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_wallet_provider_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITokenUpdateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_audit_info_isValid && true;
}

} // namespace OpenAPI
