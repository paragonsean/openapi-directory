/**
 * MDES Customer Service
 * This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.
 *
 * The version of the OpenAPI document: 2.0.7
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIToken::OAIToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIToken::OAIToken() {
    this->initializeModel();
}

OAIToken::~OAIToken() {}

void OAIToken::initializeModel() {

    m_account_pan_sequence_number_isSet = false;
    m_account_pan_sequence_number_isValid = false;

    m_activation_code_expiration_date_time_isSet = false;
    m_activation_code_expiration_date_time_isValid = false;

    m_correlation_id_isSet = false;
    m_correlation_id_isValid = false;

    m_current_status_code_isSet = false;
    m_current_status_code_isValid = false;

    m_current_status_date_time_isSet = false;
    m_current_status_date_time_isValid = false;

    m_current_status_description_isSet = false;
    m_current_status_description_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_digitization_request_date_time_isSet = false;
    m_digitization_request_date_time_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_final_tokenization_decision_isSet = false;
    m_final_tokenization_decision_isValid = false;

    m_last_comment_id_isSet = false;
    m_last_comment_id_isValid = false;

    m_payment_app_instance_id_isSet = false;
    m_payment_app_instance_id_isValid = false;

    m_primary_account_number_unique_reference_isSet = false;
    m_primary_account_number_unique_reference_isValid = false;

    m_provisioning_status_code_isSet = false;
    m_provisioning_status_code_isValid = false;

    m_provisioning_status_description_isSet = false;
    m_provisioning_status_description_isValid = false;

    m_storage_technology_isSet = false;
    m_storage_technology_isValid = false;

    m_suspenders_isSet = false;
    m_suspenders_isValid = false;

    m_token_activated_date_time_isSet = false;
    m_token_activated_date_time_isValid = false;

    m_token_assurance_level_isSet = false;
    m_token_assurance_level_isValid = false;

    m_token_deleted_from_consumer_app_isSet = false;
    m_token_deleted_from_consumer_app_isValid = false;

    m_token_requestor_consumer_facing_entity_name_isSet = false;
    m_token_requestor_consumer_facing_entity_name_isValid = false;

    m_token_requestor_id_isSet = false;
    m_token_requestor_id_isValid = false;

    m_token_requestor_name_isSet = false;
    m_token_requestor_name_isValid = false;

    m_token_suffix_isSet = false;
    m_token_suffix_isValid = false;

    m_token_type_isSet = false;
    m_token_type_isValid = false;

    m_token_unique_reference_isSet = false;
    m_token_unique_reference_isValid = false;

    m_wallet_id_isSet = false;
    m_wallet_id_isValid = false;
}

void OAIToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIToken::fromJsonObject(QJsonObject json) {

    m_account_pan_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_account_pan_sequence_number, json[QString("AccountPanSequenceNumber")]);
    m_account_pan_sequence_number_isSet = !json[QString("AccountPanSequenceNumber")].isNull() && m_account_pan_sequence_number_isValid;

    m_activation_code_expiration_date_time_isValid = ::OpenAPI::fromJsonValue(m_activation_code_expiration_date_time, json[QString("ActivationCodeExpirationDateTime")]);
    m_activation_code_expiration_date_time_isSet = !json[QString("ActivationCodeExpirationDateTime")].isNull() && m_activation_code_expiration_date_time_isValid;

    m_correlation_id_isValid = ::OpenAPI::fromJsonValue(m_correlation_id, json[QString("CorrelationId")]);
    m_correlation_id_isSet = !json[QString("CorrelationId")].isNull() && m_correlation_id_isValid;

    m_current_status_code_isValid = ::OpenAPI::fromJsonValue(m_current_status_code, json[QString("CurrentStatusCode")]);
    m_current_status_code_isSet = !json[QString("CurrentStatusCode")].isNull() && m_current_status_code_isValid;

    m_current_status_date_time_isValid = ::OpenAPI::fromJsonValue(m_current_status_date_time, json[QString("CurrentStatusDateTime")]);
    m_current_status_date_time_isSet = !json[QString("CurrentStatusDateTime")].isNull() && m_current_status_date_time_isValid;

    m_current_status_description_isValid = ::OpenAPI::fromJsonValue(m_current_status_description, json[QString("CurrentStatusDescription")]);
    m_current_status_description_isSet = !json[QString("CurrentStatusDescription")].isNull() && m_current_status_description_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("Device")]);
    m_device_isSet = !json[QString("Device")].isNull() && m_device_isValid;

    m_digitization_request_date_time_isValid = ::OpenAPI::fromJsonValue(m_digitization_request_date_time, json[QString("DigitizationRequestDateTime")]);
    m_digitization_request_date_time_isSet = !json[QString("DigitizationRequestDateTime")].isNull() && m_digitization_request_date_time_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("ExpirationDate")]);
    m_expiration_date_isSet = !json[QString("ExpirationDate")].isNull() && m_expiration_date_isValid;

    m_final_tokenization_decision_isValid = ::OpenAPI::fromJsonValue(m_final_tokenization_decision, json[QString("FinalTokenizationDecision")]);
    m_final_tokenization_decision_isSet = !json[QString("FinalTokenizationDecision")].isNull() && m_final_tokenization_decision_isValid;

    m_last_comment_id_isValid = ::OpenAPI::fromJsonValue(m_last_comment_id, json[QString("LastCommentId")]);
    m_last_comment_id_isSet = !json[QString("LastCommentId")].isNull() && m_last_comment_id_isValid;

    m_payment_app_instance_id_isValid = ::OpenAPI::fromJsonValue(m_payment_app_instance_id, json[QString("PaymentAppInstanceId")]);
    m_payment_app_instance_id_isSet = !json[QString("PaymentAppInstanceId")].isNull() && m_payment_app_instance_id_isValid;

    m_primary_account_number_unique_reference_isValid = ::OpenAPI::fromJsonValue(m_primary_account_number_unique_reference, json[QString("PrimaryAccountNumberUniqueReference")]);
    m_primary_account_number_unique_reference_isSet = !json[QString("PrimaryAccountNumberUniqueReference")].isNull() && m_primary_account_number_unique_reference_isValid;

    m_provisioning_status_code_isValid = ::OpenAPI::fromJsonValue(m_provisioning_status_code, json[QString("ProvisioningStatusCode")]);
    m_provisioning_status_code_isSet = !json[QString("ProvisioningStatusCode")].isNull() && m_provisioning_status_code_isValid;

    m_provisioning_status_description_isValid = ::OpenAPI::fromJsonValue(m_provisioning_status_description, json[QString("ProvisioningStatusDescription")]);
    m_provisioning_status_description_isSet = !json[QString("ProvisioningStatusDescription")].isNull() && m_provisioning_status_description_isValid;

    m_storage_technology_isValid = ::OpenAPI::fromJsonValue(m_storage_technology, json[QString("StorageTechnology")]);
    m_storage_technology_isSet = !json[QString("StorageTechnology")].isNull() && m_storage_technology_isValid;

    m_suspenders_isValid = ::OpenAPI::fromJsonValue(m_suspenders, json[QString("Suspenders")]);
    m_suspenders_isSet = !json[QString("Suspenders")].isNull() && m_suspenders_isValid;

    m_token_activated_date_time_isValid = ::OpenAPI::fromJsonValue(m_token_activated_date_time, json[QString("TokenActivatedDateTime")]);
    m_token_activated_date_time_isSet = !json[QString("TokenActivatedDateTime")].isNull() && m_token_activated_date_time_isValid;

    m_token_assurance_level_isValid = ::OpenAPI::fromJsonValue(m_token_assurance_level, json[QString("TokenAssuranceLevel")]);
    m_token_assurance_level_isSet = !json[QString("TokenAssuranceLevel")].isNull() && m_token_assurance_level_isValid;

    m_token_deleted_from_consumer_app_isValid = ::OpenAPI::fromJsonValue(m_token_deleted_from_consumer_app, json[QString("TokenDeletedFromConsumerApp")]);
    m_token_deleted_from_consumer_app_isSet = !json[QString("TokenDeletedFromConsumerApp")].isNull() && m_token_deleted_from_consumer_app_isValid;

    m_token_requestor_consumer_facing_entity_name_isValid = ::OpenAPI::fromJsonValue(m_token_requestor_consumer_facing_entity_name, json[QString("TokenRequestorConsumerFacingEntityName")]);
    m_token_requestor_consumer_facing_entity_name_isSet = !json[QString("TokenRequestorConsumerFacingEntityName")].isNull() && m_token_requestor_consumer_facing_entity_name_isValid;

    m_token_requestor_id_isValid = ::OpenAPI::fromJsonValue(m_token_requestor_id, json[QString("TokenRequestorId")]);
    m_token_requestor_id_isSet = !json[QString("TokenRequestorId")].isNull() && m_token_requestor_id_isValid;

    m_token_requestor_name_isValid = ::OpenAPI::fromJsonValue(m_token_requestor_name, json[QString("TokenRequestorName")]);
    m_token_requestor_name_isSet = !json[QString("TokenRequestorName")].isNull() && m_token_requestor_name_isValid;

    m_token_suffix_isValid = ::OpenAPI::fromJsonValue(m_token_suffix, json[QString("TokenSuffix")]);
    m_token_suffix_isSet = !json[QString("TokenSuffix")].isNull() && m_token_suffix_isValid;

    m_token_type_isValid = ::OpenAPI::fromJsonValue(m_token_type, json[QString("TokenType")]);
    m_token_type_isSet = !json[QString("TokenType")].isNull() && m_token_type_isValid;

    m_token_unique_reference_isValid = ::OpenAPI::fromJsonValue(m_token_unique_reference, json[QString("TokenUniqueReference")]);
    m_token_unique_reference_isSet = !json[QString("TokenUniqueReference")].isNull() && m_token_unique_reference_isValid;

    m_wallet_id_isValid = ::OpenAPI::fromJsonValue(m_wallet_id, json[QString("WalletId")]);
    m_wallet_id_isSet = !json[QString("WalletId")].isNull() && m_wallet_id_isValid;
}

QString OAIToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIToken::asJsonObject() const {
    QJsonObject obj;
    if (m_account_pan_sequence_number_isSet) {
        obj.insert(QString("AccountPanSequenceNumber"), ::OpenAPI::toJsonValue(m_account_pan_sequence_number));
    }
    if (m_activation_code_expiration_date_time_isSet) {
        obj.insert(QString("ActivationCodeExpirationDateTime"), ::OpenAPI::toJsonValue(m_activation_code_expiration_date_time));
    }
    if (m_correlation_id_isSet) {
        obj.insert(QString("CorrelationId"), ::OpenAPI::toJsonValue(m_correlation_id));
    }
    if (m_current_status_code_isSet) {
        obj.insert(QString("CurrentStatusCode"), ::OpenAPI::toJsonValue(m_current_status_code));
    }
    if (m_current_status_date_time_isSet) {
        obj.insert(QString("CurrentStatusDateTime"), ::OpenAPI::toJsonValue(m_current_status_date_time));
    }
    if (m_current_status_description_isSet) {
        obj.insert(QString("CurrentStatusDescription"), ::OpenAPI::toJsonValue(m_current_status_description));
    }
    if (m_device.isSet()) {
        obj.insert(QString("Device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_digitization_request_date_time_isSet) {
        obj.insert(QString("DigitizationRequestDateTime"), ::OpenAPI::toJsonValue(m_digitization_request_date_time));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("ExpirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_final_tokenization_decision_isSet) {
        obj.insert(QString("FinalTokenizationDecision"), ::OpenAPI::toJsonValue(m_final_tokenization_decision));
    }
    if (m_last_comment_id_isSet) {
        obj.insert(QString("LastCommentId"), ::OpenAPI::toJsonValue(m_last_comment_id));
    }
    if (m_payment_app_instance_id_isSet) {
        obj.insert(QString("PaymentAppInstanceId"), ::OpenAPI::toJsonValue(m_payment_app_instance_id));
    }
    if (m_primary_account_number_unique_reference_isSet) {
        obj.insert(QString("PrimaryAccountNumberUniqueReference"), ::OpenAPI::toJsonValue(m_primary_account_number_unique_reference));
    }
    if (m_provisioning_status_code_isSet) {
        obj.insert(QString("ProvisioningStatusCode"), ::OpenAPI::toJsonValue(m_provisioning_status_code));
    }
    if (m_provisioning_status_description_isSet) {
        obj.insert(QString("ProvisioningStatusDescription"), ::OpenAPI::toJsonValue(m_provisioning_status_description));
    }
    if (m_storage_technology_isSet) {
        obj.insert(QString("StorageTechnology"), ::OpenAPI::toJsonValue(m_storage_technology));
    }
    if (m_suspenders.isSet()) {
        obj.insert(QString("Suspenders"), ::OpenAPI::toJsonValue(m_suspenders));
    }
    if (m_token_activated_date_time_isSet) {
        obj.insert(QString("TokenActivatedDateTime"), ::OpenAPI::toJsonValue(m_token_activated_date_time));
    }
    if (m_token_assurance_level_isSet) {
        obj.insert(QString("TokenAssuranceLevel"), ::OpenAPI::toJsonValue(m_token_assurance_level));
    }
    if (m_token_deleted_from_consumer_app_isSet) {
        obj.insert(QString("TokenDeletedFromConsumerApp"), ::OpenAPI::toJsonValue(m_token_deleted_from_consumer_app));
    }
    if (m_token_requestor_consumer_facing_entity_name_isSet) {
        obj.insert(QString("TokenRequestorConsumerFacingEntityName"), ::OpenAPI::toJsonValue(m_token_requestor_consumer_facing_entity_name));
    }
    if (m_token_requestor_id_isSet) {
        obj.insert(QString("TokenRequestorId"), ::OpenAPI::toJsonValue(m_token_requestor_id));
    }
    if (m_token_requestor_name_isSet) {
        obj.insert(QString("TokenRequestorName"), ::OpenAPI::toJsonValue(m_token_requestor_name));
    }
    if (m_token_suffix_isSet) {
        obj.insert(QString("TokenSuffix"), ::OpenAPI::toJsonValue(m_token_suffix));
    }
    if (m_token_type_isSet) {
        obj.insert(QString("TokenType"), ::OpenAPI::toJsonValue(m_token_type));
    }
    if (m_token_unique_reference_isSet) {
        obj.insert(QString("TokenUniqueReference"), ::OpenAPI::toJsonValue(m_token_unique_reference));
    }
    if (m_wallet_id_isSet) {
        obj.insert(QString("WalletId"), ::OpenAPI::toJsonValue(m_wallet_id));
    }
    return obj;
}

QString OAIToken::getAccountPanSequenceNumber() const {
    return m_account_pan_sequence_number;
}
void OAIToken::setAccountPanSequenceNumber(const QString &account_pan_sequence_number) {
    m_account_pan_sequence_number = account_pan_sequence_number;
    m_account_pan_sequence_number_isSet = true;
}

bool OAIToken::is_account_pan_sequence_number_Set() const{
    return m_account_pan_sequence_number_isSet;
}

bool OAIToken::is_account_pan_sequence_number_Valid() const{
    return m_account_pan_sequence_number_isValid;
}

QString OAIToken::getActivationCodeExpirationDateTime() const {
    return m_activation_code_expiration_date_time;
}
void OAIToken::setActivationCodeExpirationDateTime(const QString &activation_code_expiration_date_time) {
    m_activation_code_expiration_date_time = activation_code_expiration_date_time;
    m_activation_code_expiration_date_time_isSet = true;
}

bool OAIToken::is_activation_code_expiration_date_time_Set() const{
    return m_activation_code_expiration_date_time_isSet;
}

bool OAIToken::is_activation_code_expiration_date_time_Valid() const{
    return m_activation_code_expiration_date_time_isValid;
}

QString OAIToken::getCorrelationId() const {
    return m_correlation_id;
}
void OAIToken::setCorrelationId(const QString &correlation_id) {
    m_correlation_id = correlation_id;
    m_correlation_id_isSet = true;
}

bool OAIToken::is_correlation_id_Set() const{
    return m_correlation_id_isSet;
}

bool OAIToken::is_correlation_id_Valid() const{
    return m_correlation_id_isValid;
}

QString OAIToken::getCurrentStatusCode() const {
    return m_current_status_code;
}
void OAIToken::setCurrentStatusCode(const QString &current_status_code) {
    m_current_status_code = current_status_code;
    m_current_status_code_isSet = true;
}

bool OAIToken::is_current_status_code_Set() const{
    return m_current_status_code_isSet;
}

bool OAIToken::is_current_status_code_Valid() const{
    return m_current_status_code_isValid;
}

QString OAIToken::getCurrentStatusDateTime() const {
    return m_current_status_date_time;
}
void OAIToken::setCurrentStatusDateTime(const QString &current_status_date_time) {
    m_current_status_date_time = current_status_date_time;
    m_current_status_date_time_isSet = true;
}

bool OAIToken::is_current_status_date_time_Set() const{
    return m_current_status_date_time_isSet;
}

bool OAIToken::is_current_status_date_time_Valid() const{
    return m_current_status_date_time_isValid;
}

QString OAIToken::getCurrentStatusDescription() const {
    return m_current_status_description;
}
void OAIToken::setCurrentStatusDescription(const QString &current_status_description) {
    m_current_status_description = current_status_description;
    m_current_status_description_isSet = true;
}

bool OAIToken::is_current_status_description_Set() const{
    return m_current_status_description_isSet;
}

bool OAIToken::is_current_status_description_Valid() const{
    return m_current_status_description_isValid;
}

OAIDevice OAIToken::getDevice() const {
    return m_device;
}
void OAIToken::setDevice(const OAIDevice &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIToken::is_device_Set() const{
    return m_device_isSet;
}

bool OAIToken::is_device_Valid() const{
    return m_device_isValid;
}

QString OAIToken::getDigitizationRequestDateTime() const {
    return m_digitization_request_date_time;
}
void OAIToken::setDigitizationRequestDateTime(const QString &digitization_request_date_time) {
    m_digitization_request_date_time = digitization_request_date_time;
    m_digitization_request_date_time_isSet = true;
}

bool OAIToken::is_digitization_request_date_time_Set() const{
    return m_digitization_request_date_time_isSet;
}

bool OAIToken::is_digitization_request_date_time_Valid() const{
    return m_digitization_request_date_time_isValid;
}

QString OAIToken::getExpirationDate() const {
    return m_expiration_date;
}
void OAIToken::setExpirationDate(const QString &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIToken::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIToken::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QString OAIToken::getFinalTokenizationDecision() const {
    return m_final_tokenization_decision;
}
void OAIToken::setFinalTokenizationDecision(const QString &final_tokenization_decision) {
    m_final_tokenization_decision = final_tokenization_decision;
    m_final_tokenization_decision_isSet = true;
}

bool OAIToken::is_final_tokenization_decision_Set() const{
    return m_final_tokenization_decision_isSet;
}

bool OAIToken::is_final_tokenization_decision_Valid() const{
    return m_final_tokenization_decision_isValid;
}

QString OAIToken::getLastCommentId() const {
    return m_last_comment_id;
}
void OAIToken::setLastCommentId(const QString &last_comment_id) {
    m_last_comment_id = last_comment_id;
    m_last_comment_id_isSet = true;
}

bool OAIToken::is_last_comment_id_Set() const{
    return m_last_comment_id_isSet;
}

bool OAIToken::is_last_comment_id_Valid() const{
    return m_last_comment_id_isValid;
}

QString OAIToken::getPaymentAppInstanceId() const {
    return m_payment_app_instance_id;
}
void OAIToken::setPaymentAppInstanceId(const QString &payment_app_instance_id) {
    m_payment_app_instance_id = payment_app_instance_id;
    m_payment_app_instance_id_isSet = true;
}

bool OAIToken::is_payment_app_instance_id_Set() const{
    return m_payment_app_instance_id_isSet;
}

bool OAIToken::is_payment_app_instance_id_Valid() const{
    return m_payment_app_instance_id_isValid;
}

QString OAIToken::getPrimaryAccountNumberUniqueReference() const {
    return m_primary_account_number_unique_reference;
}
void OAIToken::setPrimaryAccountNumberUniqueReference(const QString &primary_account_number_unique_reference) {
    m_primary_account_number_unique_reference = primary_account_number_unique_reference;
    m_primary_account_number_unique_reference_isSet = true;
}

bool OAIToken::is_primary_account_number_unique_reference_Set() const{
    return m_primary_account_number_unique_reference_isSet;
}

bool OAIToken::is_primary_account_number_unique_reference_Valid() const{
    return m_primary_account_number_unique_reference_isValid;
}

QString OAIToken::getProvisioningStatusCode() const {
    return m_provisioning_status_code;
}
void OAIToken::setProvisioningStatusCode(const QString &provisioning_status_code) {
    m_provisioning_status_code = provisioning_status_code;
    m_provisioning_status_code_isSet = true;
}

bool OAIToken::is_provisioning_status_code_Set() const{
    return m_provisioning_status_code_isSet;
}

bool OAIToken::is_provisioning_status_code_Valid() const{
    return m_provisioning_status_code_isValid;
}

QString OAIToken::getProvisioningStatusDescription() const {
    return m_provisioning_status_description;
}
void OAIToken::setProvisioningStatusDescription(const QString &provisioning_status_description) {
    m_provisioning_status_description = provisioning_status_description;
    m_provisioning_status_description_isSet = true;
}

bool OAIToken::is_provisioning_status_description_Set() const{
    return m_provisioning_status_description_isSet;
}

bool OAIToken::is_provisioning_status_description_Valid() const{
    return m_provisioning_status_description_isValid;
}

QString OAIToken::getStorageTechnology() const {
    return m_storage_technology;
}
void OAIToken::setStorageTechnology(const QString &storage_technology) {
    m_storage_technology = storage_technology;
    m_storage_technology_isSet = true;
}

bool OAIToken::is_storage_technology_Set() const{
    return m_storage_technology_isSet;
}

bool OAIToken::is_storage_technology_Valid() const{
    return m_storage_technology_isValid;
}

OAISuspenders OAIToken::getSuspenders() const {
    return m_suspenders;
}
void OAIToken::setSuspenders(const OAISuspenders &suspenders) {
    m_suspenders = suspenders;
    m_suspenders_isSet = true;
}

bool OAIToken::is_suspenders_Set() const{
    return m_suspenders_isSet;
}

bool OAIToken::is_suspenders_Valid() const{
    return m_suspenders_isValid;
}

QString OAIToken::getTokenActivatedDateTime() const {
    return m_token_activated_date_time;
}
void OAIToken::setTokenActivatedDateTime(const QString &token_activated_date_time) {
    m_token_activated_date_time = token_activated_date_time;
    m_token_activated_date_time_isSet = true;
}

bool OAIToken::is_token_activated_date_time_Set() const{
    return m_token_activated_date_time_isSet;
}

bool OAIToken::is_token_activated_date_time_Valid() const{
    return m_token_activated_date_time_isValid;
}

QString OAIToken::getTokenAssuranceLevel() const {
    return m_token_assurance_level;
}
void OAIToken::setTokenAssuranceLevel(const QString &token_assurance_level) {
    m_token_assurance_level = token_assurance_level;
    m_token_assurance_level_isSet = true;
}

bool OAIToken::is_token_assurance_level_Set() const{
    return m_token_assurance_level_isSet;
}

bool OAIToken::is_token_assurance_level_Valid() const{
    return m_token_assurance_level_isValid;
}

QString OAIToken::getTokenDeletedFromConsumerApp() const {
    return m_token_deleted_from_consumer_app;
}
void OAIToken::setTokenDeletedFromConsumerApp(const QString &token_deleted_from_consumer_app) {
    m_token_deleted_from_consumer_app = token_deleted_from_consumer_app;
    m_token_deleted_from_consumer_app_isSet = true;
}

bool OAIToken::is_token_deleted_from_consumer_app_Set() const{
    return m_token_deleted_from_consumer_app_isSet;
}

bool OAIToken::is_token_deleted_from_consumer_app_Valid() const{
    return m_token_deleted_from_consumer_app_isValid;
}

QString OAIToken::getTokenRequestorConsumerFacingEntityName() const {
    return m_token_requestor_consumer_facing_entity_name;
}
void OAIToken::setTokenRequestorConsumerFacingEntityName(const QString &token_requestor_consumer_facing_entity_name) {
    m_token_requestor_consumer_facing_entity_name = token_requestor_consumer_facing_entity_name;
    m_token_requestor_consumer_facing_entity_name_isSet = true;
}

bool OAIToken::is_token_requestor_consumer_facing_entity_name_Set() const{
    return m_token_requestor_consumer_facing_entity_name_isSet;
}

bool OAIToken::is_token_requestor_consumer_facing_entity_name_Valid() const{
    return m_token_requestor_consumer_facing_entity_name_isValid;
}

QString OAIToken::getTokenRequestorId() const {
    return m_token_requestor_id;
}
void OAIToken::setTokenRequestorId(const QString &token_requestor_id) {
    m_token_requestor_id = token_requestor_id;
    m_token_requestor_id_isSet = true;
}

bool OAIToken::is_token_requestor_id_Set() const{
    return m_token_requestor_id_isSet;
}

bool OAIToken::is_token_requestor_id_Valid() const{
    return m_token_requestor_id_isValid;
}

QString OAIToken::getTokenRequestorName() const {
    return m_token_requestor_name;
}
void OAIToken::setTokenRequestorName(const QString &token_requestor_name) {
    m_token_requestor_name = token_requestor_name;
    m_token_requestor_name_isSet = true;
}

bool OAIToken::is_token_requestor_name_Set() const{
    return m_token_requestor_name_isSet;
}

bool OAIToken::is_token_requestor_name_Valid() const{
    return m_token_requestor_name_isValid;
}

QString OAIToken::getTokenSuffix() const {
    return m_token_suffix;
}
void OAIToken::setTokenSuffix(const QString &token_suffix) {
    m_token_suffix = token_suffix;
    m_token_suffix_isSet = true;
}

bool OAIToken::is_token_suffix_Set() const{
    return m_token_suffix_isSet;
}

bool OAIToken::is_token_suffix_Valid() const{
    return m_token_suffix_isValid;
}

QString OAIToken::getTokenType() const {
    return m_token_type;
}
void OAIToken::setTokenType(const QString &token_type) {
    m_token_type = token_type;
    m_token_type_isSet = true;
}

bool OAIToken::is_token_type_Set() const{
    return m_token_type_isSet;
}

bool OAIToken::is_token_type_Valid() const{
    return m_token_type_isValid;
}

QString OAIToken::getTokenUniqueReference() const {
    return m_token_unique_reference;
}
void OAIToken::setTokenUniqueReference(const QString &token_unique_reference) {
    m_token_unique_reference = token_unique_reference;
    m_token_unique_reference_isSet = true;
}

bool OAIToken::is_token_unique_reference_Set() const{
    return m_token_unique_reference_isSet;
}

bool OAIToken::is_token_unique_reference_Valid() const{
    return m_token_unique_reference_isValid;
}

QString OAIToken::getWalletId() const {
    return m_wallet_id;
}
void OAIToken::setWalletId(const QString &wallet_id) {
    m_wallet_id = wallet_id;
    m_wallet_id_isSet = true;
}

bool OAIToken::is_wallet_id_Set() const{
    return m_wallet_id_isSet;
}

bool OAIToken::is_wallet_id_Valid() const{
    return m_wallet_id_isValid;
}

bool OAIToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_pan_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activation_code_expiration_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_correlation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_status_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_status_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_digitization_request_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_final_tokenization_decision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_comment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_app_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_account_number_unique_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_status_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_technology_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspenders.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_activated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_assurance_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_deleted_from_consumer_app_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_requestor_consumer_facing_entity_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_requestor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_requestor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_unique_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wallet_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
