/**
 * MDES Customer Service
 * This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.
 *
 * The version of the OpenAPI document: 2.0.7
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatus::OAIStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatus::OAIStatus() {
    this->initializeModel();
}

OAIStatus::~OAIStatus() {}

void OAIStatus::initializeModel() {

    m_audit_info_isSet = false;
    m_audit_info_isValid = false;

    m_comment_id_isSet = false;
    m_comment_id_isValid = false;

    m_initiator_isSet = false;
    m_initiator_isValid = false;

    m_reason_code_isSet = false;
    m_reason_code_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_status_date_time_isSet = false;
    m_status_date_time_isValid = false;

    m_status_description_isSet = false;
    m_status_description_isValid = false;
}

void OAIStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatus::fromJsonObject(QJsonObject json) {

    m_audit_info_isValid = ::OpenAPI::fromJsonValue(m_audit_info, json[QString("AuditInfo")]);
    m_audit_info_isSet = !json[QString("AuditInfo")].isNull() && m_audit_info_isValid;

    m_comment_id_isValid = ::OpenAPI::fromJsonValue(m_comment_id, json[QString("CommentId")]);
    m_comment_id_isSet = !json[QString("CommentId")].isNull() && m_comment_id_isValid;

    m_initiator_isValid = ::OpenAPI::fromJsonValue(m_initiator, json[QString("Initiator")]);
    m_initiator_isSet = !json[QString("Initiator")].isNull() && m_initiator_isValid;

    m_reason_code_isValid = ::OpenAPI::fromJsonValue(m_reason_code, json[QString("ReasonCode")]);
    m_reason_code_isSet = !json[QString("ReasonCode")].isNull() && m_reason_code_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("StatusCode")]);
    m_status_code_isSet = !json[QString("StatusCode")].isNull() && m_status_code_isValid;

    m_status_date_time_isValid = ::OpenAPI::fromJsonValue(m_status_date_time, json[QString("StatusDateTime")]);
    m_status_date_time_isSet = !json[QString("StatusDateTime")].isNull() && m_status_date_time_isValid;

    m_status_description_isValid = ::OpenAPI::fromJsonValue(m_status_description, json[QString("StatusDescription")]);
    m_status_description_isSet = !json[QString("StatusDescription")].isNull() && m_status_description_isValid;
}

QString OAIStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_audit_info.isSet()) {
        obj.insert(QString("AuditInfo"), ::OpenAPI::toJsonValue(m_audit_info));
    }
    if (m_comment_id_isSet) {
        obj.insert(QString("CommentId"), ::OpenAPI::toJsonValue(m_comment_id));
    }
    if (m_initiator_isSet) {
        obj.insert(QString("Initiator"), ::OpenAPI::toJsonValue(m_initiator));
    }
    if (m_reason_code_isSet) {
        obj.insert(QString("ReasonCode"), ::OpenAPI::toJsonValue(m_reason_code));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("StatusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_status_date_time_isSet) {
        obj.insert(QString("StatusDateTime"), ::OpenAPI::toJsonValue(m_status_date_time));
    }
    if (m_status_description_isSet) {
        obj.insert(QString("StatusDescription"), ::OpenAPI::toJsonValue(m_status_description));
    }
    return obj;
}

OAIAuditInfo OAIStatus::getAuditInfo() const {
    return m_audit_info;
}
void OAIStatus::setAuditInfo(const OAIAuditInfo &audit_info) {
    m_audit_info = audit_info;
    m_audit_info_isSet = true;
}

bool OAIStatus::is_audit_info_Set() const{
    return m_audit_info_isSet;
}

bool OAIStatus::is_audit_info_Valid() const{
    return m_audit_info_isValid;
}

QString OAIStatus::getCommentId() const {
    return m_comment_id;
}
void OAIStatus::setCommentId(const QString &comment_id) {
    m_comment_id = comment_id;
    m_comment_id_isSet = true;
}

bool OAIStatus::is_comment_id_Set() const{
    return m_comment_id_isSet;
}

bool OAIStatus::is_comment_id_Valid() const{
    return m_comment_id_isValid;
}

QString OAIStatus::getInitiator() const {
    return m_initiator;
}
void OAIStatus::setInitiator(const QString &initiator) {
    m_initiator = initiator;
    m_initiator_isSet = true;
}

bool OAIStatus::is_initiator_Set() const{
    return m_initiator_isSet;
}

bool OAIStatus::is_initiator_Valid() const{
    return m_initiator_isValid;
}

QString OAIStatus::getReasonCode() const {
    return m_reason_code;
}
void OAIStatus::setReasonCode(const QString &reason_code) {
    m_reason_code = reason_code;
    m_reason_code_isSet = true;
}

bool OAIStatus::is_reason_code_Set() const{
    return m_reason_code_isSet;
}

bool OAIStatus::is_reason_code_Valid() const{
    return m_reason_code_isValid;
}

QString OAIStatus::getStatusCode() const {
    return m_status_code;
}
void OAIStatus::setStatusCode(const QString &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIStatus::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIStatus::is_status_code_Valid() const{
    return m_status_code_isValid;
}

QString OAIStatus::getStatusDateTime() const {
    return m_status_date_time;
}
void OAIStatus::setStatusDateTime(const QString &status_date_time) {
    m_status_date_time = status_date_time;
    m_status_date_time_isSet = true;
}

bool OAIStatus::is_status_date_time_Set() const{
    return m_status_date_time_isSet;
}

bool OAIStatus::is_status_date_time_Valid() const{
    return m_status_date_time_isValid;
}

QString OAIStatus::getStatusDescription() const {
    return m_status_description;
}
void OAIStatus::setStatusDescription(const QString &status_description) {
    m_status_description = status_description;
    m_status_description_isSet = true;
}

bool OAIStatus::is_status_description_Set() const{
    return m_status_description_isSet;
}

bool OAIStatus::is_status_description_Valid() const{
    return m_status_description_isValid;
}

bool OAIStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audit_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initiator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
