/**
 * MDES Customer Service
 * This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.
 *
 * The version of the OpenAPI document: 2.0.7
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDevice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDevice::OAIDevice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDevice::OAIDevice() {
    this->initializeModel();
}

OAIDevice::~OAIDevice() {}

void OAIDevice::initializeModel() {

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_device_type_isSet = false;
    m_device_type_isValid = false;

    m_secure_element_id_isSet = false;
    m_secure_element_id_isValid = false;
}

void OAIDevice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDevice::fromJsonObject(QJsonObject json) {

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("DeviceId")]);
    m_device_id_isSet = !json[QString("DeviceId")].isNull() && m_device_id_isValid;

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("DeviceName")]);
    m_device_name_isSet = !json[QString("DeviceName")].isNull() && m_device_name_isValid;

    m_device_type_isValid = ::OpenAPI::fromJsonValue(m_device_type, json[QString("DeviceType")]);
    m_device_type_isSet = !json[QString("DeviceType")].isNull() && m_device_type_isValid;

    m_secure_element_id_isValid = ::OpenAPI::fromJsonValue(m_secure_element_id, json[QString("SecureElementId")]);
    m_secure_element_id_isSet = !json[QString("SecureElementId")].isNull() && m_secure_element_id_isValid;
}

QString OAIDevice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDevice::asJsonObject() const {
    QJsonObject obj;
    if (m_device_id_isSet) {
        obj.insert(QString("DeviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_device_name_isSet) {
        obj.insert(QString("DeviceName"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_device_type_isSet) {
        obj.insert(QString("DeviceType"), ::OpenAPI::toJsonValue(m_device_type));
    }
    if (m_secure_element_id_isSet) {
        obj.insert(QString("SecureElementId"), ::OpenAPI::toJsonValue(m_secure_element_id));
    }
    return obj;
}

QString OAIDevice::getDeviceId() const {
    return m_device_id;
}
void OAIDevice::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIDevice::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIDevice::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAIDevice::getDeviceName() const {
    return m_device_name;
}
void OAIDevice::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAIDevice::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAIDevice::is_device_name_Valid() const{
    return m_device_name_isValid;
}

QString OAIDevice::getDeviceType() const {
    return m_device_type;
}
void OAIDevice::setDeviceType(const QString &device_type) {
    m_device_type = device_type;
    m_device_type_isSet = true;
}

bool OAIDevice::is_device_type_Set() const{
    return m_device_type_isSet;
}

bool OAIDevice::is_device_type_Valid() const{
    return m_device_type_isValid;
}

QString OAIDevice::getSecureElementId() const {
    return m_secure_element_id;
}
void OAIDevice::setSecureElementId(const QString &secure_element_id) {
    m_secure_element_id = secure_element_id;
    m_secure_element_id_isSet = true;
}

bool OAIDevice::is_secure_element_id_Set() const{
    return m_secure_element_id_isSet;
}

bool OAIDevice::is_secure_element_id_Valid() const{
    return m_secure_element_id_isValid;
}

bool OAIDevice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secure_element_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDevice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
