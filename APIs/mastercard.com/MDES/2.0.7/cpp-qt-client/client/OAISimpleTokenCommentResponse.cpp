/**
 * MDES Customer Service
 * This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.
 *
 * The version of the OpenAPI document: 2.0.7
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimpleTokenCommentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimpleTokenCommentResponse::OAISimpleTokenCommentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimpleTokenCommentResponse::OAISimpleTokenCommentResponse() {
    this->initializeModel();
}

OAISimpleTokenCommentResponse::~OAISimpleTokenCommentResponse() {}

void OAISimpleTokenCommentResponse::initializeModel() {

    m_comment_id_isSet = false;
    m_comment_id_isValid = false;

    m_token_unique_reference_isSet = false;
    m_token_unique_reference_isValid = false;
}

void OAISimpleTokenCommentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimpleTokenCommentResponse::fromJsonObject(QJsonObject json) {

    m_comment_id_isValid = ::OpenAPI::fromJsonValue(m_comment_id, json[QString("CommentId")]);
    m_comment_id_isSet = !json[QString("CommentId")].isNull() && m_comment_id_isValid;

    m_token_unique_reference_isValid = ::OpenAPI::fromJsonValue(m_token_unique_reference, json[QString("TokenUniqueReference")]);
    m_token_unique_reference_isSet = !json[QString("TokenUniqueReference")].isNull() && m_token_unique_reference_isValid;
}

QString OAISimpleTokenCommentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimpleTokenCommentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_id_isSet) {
        obj.insert(QString("CommentId"), ::OpenAPI::toJsonValue(m_comment_id));
    }
    if (m_token_unique_reference_isSet) {
        obj.insert(QString("TokenUniqueReference"), ::OpenAPI::toJsonValue(m_token_unique_reference));
    }
    return obj;
}

QString OAISimpleTokenCommentResponse::getCommentId() const {
    return m_comment_id;
}
void OAISimpleTokenCommentResponse::setCommentId(const QString &comment_id) {
    m_comment_id = comment_id;
    m_comment_id_isSet = true;
}

bool OAISimpleTokenCommentResponse::is_comment_id_Set() const{
    return m_comment_id_isSet;
}

bool OAISimpleTokenCommentResponse::is_comment_id_Valid() const{
    return m_comment_id_isValid;
}

QString OAISimpleTokenCommentResponse::getTokenUniqueReference() const {
    return m_token_unique_reference;
}
void OAISimpleTokenCommentResponse::setTokenUniqueReference(const QString &token_unique_reference) {
    m_token_unique_reference = token_unique_reference;
    m_token_unique_reference_isSet = true;
}

bool OAISimpleTokenCommentResponse::is_token_unique_reference_Set() const{
    return m_token_unique_reference_isSet;
}

bool OAISimpleTokenCommentResponse::is_token_unique_reference_Valid() const{
    return m_token_unique_reference_isValid;
}

bool OAISimpleTokenCommentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_unique_reference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimpleTokenCommentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_token_unique_reference_isValid && true;
}

} // namespace OpenAPI
