/**
 * MDES Customer Service
 * This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.
 *
 * The version of the OpenAPI document: 2.0.7
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchRequest::OAISearchRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchRequest::OAISearchRequest() {
    this->initializeModel();
}

OAISearchRequest::~OAISearchRequest() {}

void OAISearchRequest::initializeModel() {

    m_account_pan_isSet = false;
    m_account_pan_isValid = false;

    m_alternate_account_identifier_isSet = false;
    m_alternate_account_identifier_isValid = false;

    m_audit_info_isSet = false;
    m_audit_info_isValid = false;

    m_comment_id_isSet = false;
    m_comment_id_isValid = false;

    m_exclude_deleted_indicator_isSet = false;
    m_exclude_deleted_indicator_isValid = false;

    m_payment_app_instance_id_isSet = false;
    m_payment_app_instance_id_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_token_unique_reference_isSet = false;
    m_token_unique_reference_isValid = false;
}

void OAISearchRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchRequest::fromJsonObject(QJsonObject json) {

    m_account_pan_isValid = ::OpenAPI::fromJsonValue(m_account_pan, json[QString("AccountPan")]);
    m_account_pan_isSet = !json[QString("AccountPan")].isNull() && m_account_pan_isValid;

    m_alternate_account_identifier_isValid = ::OpenAPI::fromJsonValue(m_alternate_account_identifier, json[QString("AlternateAccountIdentifier")]);
    m_alternate_account_identifier_isSet = !json[QString("AlternateAccountIdentifier")].isNull() && m_alternate_account_identifier_isValid;

    m_audit_info_isValid = ::OpenAPI::fromJsonValue(m_audit_info, json[QString("AuditInfo")]);
    m_audit_info_isSet = !json[QString("AuditInfo")].isNull() && m_audit_info_isValid;

    m_comment_id_isValid = ::OpenAPI::fromJsonValue(m_comment_id, json[QString("CommentId")]);
    m_comment_id_isSet = !json[QString("CommentId")].isNull() && m_comment_id_isValid;

    m_exclude_deleted_indicator_isValid = ::OpenAPI::fromJsonValue(m_exclude_deleted_indicator, json[QString("ExcludeDeletedIndicator")]);
    m_exclude_deleted_indicator_isSet = !json[QString("ExcludeDeletedIndicator")].isNull() && m_exclude_deleted_indicator_isValid;

    m_payment_app_instance_id_isValid = ::OpenAPI::fromJsonValue(m_payment_app_instance_id, json[QString("PaymentAppInstanceId")]);
    m_payment_app_instance_id_isSet = !json[QString("PaymentAppInstanceId")].isNull() && m_payment_app_instance_id_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("Token")]);
    m_token_isSet = !json[QString("Token")].isNull() && m_token_isValid;

    m_token_unique_reference_isValid = ::OpenAPI::fromJsonValue(m_token_unique_reference, json[QString("TokenUniqueReference")]);
    m_token_unique_reference_isSet = !json[QString("TokenUniqueReference")].isNull() && m_token_unique_reference_isValid;
}

QString OAISearchRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_account_pan_isSet) {
        obj.insert(QString("AccountPan"), ::OpenAPI::toJsonValue(m_account_pan));
    }
    if (m_alternate_account_identifier_isSet) {
        obj.insert(QString("AlternateAccountIdentifier"), ::OpenAPI::toJsonValue(m_alternate_account_identifier));
    }
    if (m_audit_info.isSet()) {
        obj.insert(QString("AuditInfo"), ::OpenAPI::toJsonValue(m_audit_info));
    }
    if (m_comment_id_isSet) {
        obj.insert(QString("CommentId"), ::OpenAPI::toJsonValue(m_comment_id));
    }
    if (m_exclude_deleted_indicator_isSet) {
        obj.insert(QString("ExcludeDeletedIndicator"), ::OpenAPI::toJsonValue(m_exclude_deleted_indicator));
    }
    if (m_payment_app_instance_id_isSet) {
        obj.insert(QString("PaymentAppInstanceId"), ::OpenAPI::toJsonValue(m_payment_app_instance_id));
    }
    if (m_token_isSet) {
        obj.insert(QString("Token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_token_unique_reference_isSet) {
        obj.insert(QString("TokenUniqueReference"), ::OpenAPI::toJsonValue(m_token_unique_reference));
    }
    return obj;
}

QString OAISearchRequest::getAccountPan() const {
    return m_account_pan;
}
void OAISearchRequest::setAccountPan(const QString &account_pan) {
    m_account_pan = account_pan;
    m_account_pan_isSet = true;
}

bool OAISearchRequest::is_account_pan_Set() const{
    return m_account_pan_isSet;
}

bool OAISearchRequest::is_account_pan_Valid() const{
    return m_account_pan_isValid;
}

QString OAISearchRequest::getAlternateAccountIdentifier() const {
    return m_alternate_account_identifier;
}
void OAISearchRequest::setAlternateAccountIdentifier(const QString &alternate_account_identifier) {
    m_alternate_account_identifier = alternate_account_identifier;
    m_alternate_account_identifier_isSet = true;
}

bool OAISearchRequest::is_alternate_account_identifier_Set() const{
    return m_alternate_account_identifier_isSet;
}

bool OAISearchRequest::is_alternate_account_identifier_Valid() const{
    return m_alternate_account_identifier_isValid;
}

OAIAuditInfo OAISearchRequest::getAuditInfo() const {
    return m_audit_info;
}
void OAISearchRequest::setAuditInfo(const OAIAuditInfo &audit_info) {
    m_audit_info = audit_info;
    m_audit_info_isSet = true;
}

bool OAISearchRequest::is_audit_info_Set() const{
    return m_audit_info_isSet;
}

bool OAISearchRequest::is_audit_info_Valid() const{
    return m_audit_info_isValid;
}

QString OAISearchRequest::getCommentId() const {
    return m_comment_id;
}
void OAISearchRequest::setCommentId(const QString &comment_id) {
    m_comment_id = comment_id;
    m_comment_id_isSet = true;
}

bool OAISearchRequest::is_comment_id_Set() const{
    return m_comment_id_isSet;
}

bool OAISearchRequest::is_comment_id_Valid() const{
    return m_comment_id_isValid;
}

QString OAISearchRequest::getExcludeDeletedIndicator() const {
    return m_exclude_deleted_indicator;
}
void OAISearchRequest::setExcludeDeletedIndicator(const QString &exclude_deleted_indicator) {
    m_exclude_deleted_indicator = exclude_deleted_indicator;
    m_exclude_deleted_indicator_isSet = true;
}

bool OAISearchRequest::is_exclude_deleted_indicator_Set() const{
    return m_exclude_deleted_indicator_isSet;
}

bool OAISearchRequest::is_exclude_deleted_indicator_Valid() const{
    return m_exclude_deleted_indicator_isValid;
}

QString OAISearchRequest::getPaymentAppInstanceId() const {
    return m_payment_app_instance_id;
}
void OAISearchRequest::setPaymentAppInstanceId(const QString &payment_app_instance_id) {
    m_payment_app_instance_id = payment_app_instance_id;
    m_payment_app_instance_id_isSet = true;
}

bool OAISearchRequest::is_payment_app_instance_id_Set() const{
    return m_payment_app_instance_id_isSet;
}

bool OAISearchRequest::is_payment_app_instance_id_Valid() const{
    return m_payment_app_instance_id_isValid;
}

QString OAISearchRequest::getToken() const {
    return m_token;
}
void OAISearchRequest::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAISearchRequest::is_token_Set() const{
    return m_token_isSet;
}

bool OAISearchRequest::is_token_Valid() const{
    return m_token_isValid;
}

QString OAISearchRequest::getTokenUniqueReference() const {
    return m_token_unique_reference;
}
void OAISearchRequest::setTokenUniqueReference(const QString &token_unique_reference) {
    m_token_unique_reference = token_unique_reference;
    m_token_unique_reference_isSet = true;
}

bool OAISearchRequest::is_token_unique_reference_Set() const{
    return m_token_unique_reference_isSet;
}

bool OAISearchRequest::is_token_unique_reference_Valid() const{
    return m_token_unique_reference_isValid;
}

bool OAISearchRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_pan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternate_account_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audit_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_deleted_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_app_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_unique_reference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_audit_info_isValid && true;
}

} // namespace OpenAPI
