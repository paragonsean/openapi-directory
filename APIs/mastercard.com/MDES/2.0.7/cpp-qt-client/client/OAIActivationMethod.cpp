/**
 * MDES Customer Service
 * This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.
 *
 * The version of the OpenAPI document: 2.0.7
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivationMethod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivationMethod::OAIActivationMethod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivationMethod::OAIActivationMethod() {
    this->initializeModel();
}

OAIActivationMethod::~OAIActivationMethod() {}

void OAIActivationMethod::initializeModel() {

    m_activation_method_id_isSet = false;
    m_activation_method_id_isValid = false;

    m_activation_method_type_isSet = false;
    m_activation_method_type_isValid = false;

    m_activation_method_value_isSet = false;
    m_activation_method_value_isValid = false;

    m_resend_indicator_isSet = false;
    m_resend_indicator_isValid = false;
}

void OAIActivationMethod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivationMethod::fromJsonObject(QJsonObject json) {

    m_activation_method_id_isValid = ::OpenAPI::fromJsonValue(m_activation_method_id, json[QString("ActivationMethodId")]);
    m_activation_method_id_isSet = !json[QString("ActivationMethodId")].isNull() && m_activation_method_id_isValid;

    m_activation_method_type_isValid = ::OpenAPI::fromJsonValue(m_activation_method_type, json[QString("ActivationMethodType")]);
    m_activation_method_type_isSet = !json[QString("ActivationMethodType")].isNull() && m_activation_method_type_isValid;

    m_activation_method_value_isValid = ::OpenAPI::fromJsonValue(m_activation_method_value, json[QString("ActivationMethodValue")]);
    m_activation_method_value_isSet = !json[QString("ActivationMethodValue")].isNull() && m_activation_method_value_isValid;

    m_resend_indicator_isValid = ::OpenAPI::fromJsonValue(m_resend_indicator, json[QString("ResendIndicator")]);
    m_resend_indicator_isSet = !json[QString("ResendIndicator")].isNull() && m_resend_indicator_isValid;
}

QString OAIActivationMethod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivationMethod::asJsonObject() const {
    QJsonObject obj;
    if (m_activation_method_id_isSet) {
        obj.insert(QString("ActivationMethodId"), ::OpenAPI::toJsonValue(m_activation_method_id));
    }
    if (m_activation_method_type_isSet) {
        obj.insert(QString("ActivationMethodType"), ::OpenAPI::toJsonValue(m_activation_method_type));
    }
    if (m_activation_method_value_isSet) {
        obj.insert(QString("ActivationMethodValue"), ::OpenAPI::toJsonValue(m_activation_method_value));
    }
    if (m_resend_indicator_isSet) {
        obj.insert(QString("ResendIndicator"), ::OpenAPI::toJsonValue(m_resend_indicator));
    }
    return obj;
}

QString OAIActivationMethod::getActivationMethodId() const {
    return m_activation_method_id;
}
void OAIActivationMethod::setActivationMethodId(const QString &activation_method_id) {
    m_activation_method_id = activation_method_id;
    m_activation_method_id_isSet = true;
}

bool OAIActivationMethod::is_activation_method_id_Set() const{
    return m_activation_method_id_isSet;
}

bool OAIActivationMethod::is_activation_method_id_Valid() const{
    return m_activation_method_id_isValid;
}

QString OAIActivationMethod::getActivationMethodType() const {
    return m_activation_method_type;
}
void OAIActivationMethod::setActivationMethodType(const QString &activation_method_type) {
    m_activation_method_type = activation_method_type;
    m_activation_method_type_isSet = true;
}

bool OAIActivationMethod::is_activation_method_type_Set() const{
    return m_activation_method_type_isSet;
}

bool OAIActivationMethod::is_activation_method_type_Valid() const{
    return m_activation_method_type_isValid;
}

QString OAIActivationMethod::getActivationMethodValue() const {
    return m_activation_method_value;
}
void OAIActivationMethod::setActivationMethodValue(const QString &activation_method_value) {
    m_activation_method_value = activation_method_value;
    m_activation_method_value_isSet = true;
}

bool OAIActivationMethod::is_activation_method_value_Set() const{
    return m_activation_method_value_isSet;
}

bool OAIActivationMethod::is_activation_method_value_Valid() const{
    return m_activation_method_value_isValid;
}

QString OAIActivationMethod::getResendIndicator() const {
    return m_resend_indicator;
}
void OAIActivationMethod::setResendIndicator(const QString &resend_indicator) {
    m_resend_indicator = resend_indicator;
    m_resend_indicator_isSet = true;
}

bool OAIActivationMethod::is_resend_indicator_Set() const{
    return m_resend_indicator_isSet;
}

bool OAIActivationMethod::is_resend_indicator_Valid() const{
    return m_resend_indicator_isValid;
}

bool OAIActivationMethod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activation_method_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activation_method_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activation_method_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resend_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivationMethod::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
