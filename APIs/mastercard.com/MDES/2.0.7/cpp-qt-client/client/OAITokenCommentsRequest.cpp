/**
 * MDES Customer Service
 * This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.
 *
 * The version of the OpenAPI document: 2.0.7
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITokenCommentsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITokenCommentsRequest::OAITokenCommentsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITokenCommentsRequest::OAITokenCommentsRequest() {
    this->initializeModel();
}

OAITokenCommentsRequest::~OAITokenCommentsRequest() {}

void OAITokenCommentsRequest::initializeModel() {

    m_audit_info_isSet = false;
    m_audit_info_isValid = false;

    m_token_unique_reference_isSet = false;
    m_token_unique_reference_isValid = false;
}

void OAITokenCommentsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITokenCommentsRequest::fromJsonObject(QJsonObject json) {

    m_audit_info_isValid = ::OpenAPI::fromJsonValue(m_audit_info, json[QString("AuditInfo")]);
    m_audit_info_isSet = !json[QString("AuditInfo")].isNull() && m_audit_info_isValid;

    m_token_unique_reference_isValid = ::OpenAPI::fromJsonValue(m_token_unique_reference, json[QString("TokenUniqueReference")]);
    m_token_unique_reference_isSet = !json[QString("TokenUniqueReference")].isNull() && m_token_unique_reference_isValid;
}

QString OAITokenCommentsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITokenCommentsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_audit_info.isSet()) {
        obj.insert(QString("AuditInfo"), ::OpenAPI::toJsonValue(m_audit_info));
    }
    if (m_token_unique_reference_isSet) {
        obj.insert(QString("TokenUniqueReference"), ::OpenAPI::toJsonValue(m_token_unique_reference));
    }
    return obj;
}

OAIAuditInfo OAITokenCommentsRequest::getAuditInfo() const {
    return m_audit_info;
}
void OAITokenCommentsRequest::setAuditInfo(const OAIAuditInfo &audit_info) {
    m_audit_info = audit_info;
    m_audit_info_isSet = true;
}

bool OAITokenCommentsRequest::is_audit_info_Set() const{
    return m_audit_info_isSet;
}

bool OAITokenCommentsRequest::is_audit_info_Valid() const{
    return m_audit_info_isValid;
}

QString OAITokenCommentsRequest::getTokenUniqueReference() const {
    return m_token_unique_reference;
}
void OAITokenCommentsRequest::setTokenUniqueReference(const QString &token_unique_reference) {
    m_token_unique_reference = token_unique_reference;
    m_token_unique_reference_isSet = true;
}

bool OAITokenCommentsRequest::is_token_unique_reference_Set() const{
    return m_token_unique_reference_isSet;
}

bool OAITokenCommentsRequest::is_token_unique_reference_Valid() const{
    return m_token_unique_reference_isValid;
}

bool OAITokenCommentsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audit_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_unique_reference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITokenCommentsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_token_unique_reference_isValid && true;
}

} // namespace OpenAPI
