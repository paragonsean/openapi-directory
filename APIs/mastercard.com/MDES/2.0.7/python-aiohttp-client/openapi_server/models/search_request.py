# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audit_info import AuditInfo
from openapi_server import util


class SearchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_pan: str=None, alternate_account_identifier: str=None, audit_info: AuditInfo=None, comment_id: str=None, exclude_deleted_indicator: str=None, payment_app_instance_id: str=None, token: str=None, token_unique_reference: str=None):
        """SearchRequest - a model defined in OpenAPI

        :param account_pan: The account_pan of this SearchRequest.
        :param alternate_account_identifier: The alternate_account_identifier of this SearchRequest.
        :param audit_info: The audit_info of this SearchRequest.
        :param comment_id: The comment_id of this SearchRequest.
        :param exclude_deleted_indicator: The exclude_deleted_indicator of this SearchRequest.
        :param payment_app_instance_id: The payment_app_instance_id of this SearchRequest.
        :param token: The token of this SearchRequest.
        :param token_unique_reference: The token_unique_reference of this SearchRequest.
        """
        self.openapi_types = {
            'account_pan': str,
            'alternate_account_identifier': str,
            'audit_info': AuditInfo,
            'comment_id': str,
            'exclude_deleted_indicator': str,
            'payment_app_instance_id': str,
            'token': str,
            'token_unique_reference': str
        }

        self.attribute_map = {
            'account_pan': 'AccountPan',
            'alternate_account_identifier': 'AlternateAccountIdentifier',
            'audit_info': 'AuditInfo',
            'comment_id': 'CommentId',
            'exclude_deleted_indicator': 'ExcludeDeletedIndicator',
            'payment_app_instance_id': 'PaymentAppInstanceId',
            'token': 'Token',
            'token_unique_reference': 'TokenUniqueReference'
        }

        self._account_pan = account_pan
        self._alternate_account_identifier = alternate_account_identifier
        self._audit_info = audit_info
        self._comment_id = comment_id
        self._exclude_deleted_indicator = exclude_deleted_indicator
        self._payment_app_instance_id = payment_app_instance_id
        self._token = token
        self._token_unique_reference = token_unique_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchRequest of this SearchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_pan(self):
        """Gets the account_pan of this SearchRequest.

        When present, the search will return tokens for the Account matching this Primary Account Number (PAN), for any Wallet Provider or device. Cannot be used together with any of the following search request.  parameters:TokenUniqueReference, Token, PaymentAppInstanceId, CommentId, or AlternateAccountIdentifier.

        :return: The account_pan of this SearchRequest.
        :rtype: str
        """
        return self._account_pan

    @account_pan.setter
    def account_pan(self, account_pan):
        """Sets the account_pan of this SearchRequest.

        When present, the search will return tokens for the Account matching this Primary Account Number (PAN), for any Wallet Provider or device. Cannot be used together with any of the following search request.  parameters:TokenUniqueReference, Token, PaymentAppInstanceId, CommentId, or AlternateAccountIdentifier.

        :param account_pan: The account_pan of this SearchRequest.
        :type account_pan: str
        """
        if account_pan is not None and len(account_pan) > 19:
            raise ValueError("Invalid value for `account_pan`, length must be less than or equal to `19`")
        if account_pan is not None and len(account_pan) < 9:
            raise ValueError("Invalid value for `account_pan`, length must be greater than or equal to `9`")

        self._account_pan = account_pan

    @property
    def alternate_account_identifier(self):
        """Gets the alternate_account_identifier of this SearchRequest.

        When present, the search will return tokens matching this Alternate Account Identifier, for any Wallet Provider or device. Space characters are not allowed. Cannot be used together with any of the following search request parameters; AccountPan, TokenUniqueReference, Token, PaymentAppInstanceId, or CommentId.

        :return: The alternate_account_identifier of this SearchRequest.
        :rtype: str
        """
        return self._alternate_account_identifier

    @alternate_account_identifier.setter
    def alternate_account_identifier(self, alternate_account_identifier):
        """Sets the alternate_account_identifier of this SearchRequest.

        When present, the search will return tokens matching this Alternate Account Identifier, for any Wallet Provider or device. Space characters are not allowed. Cannot be used together with any of the following search request parameters; AccountPan, TokenUniqueReference, Token, PaymentAppInstanceId, or CommentId.

        :param alternate_account_identifier: The alternate_account_identifier of this SearchRequest.
        :type alternate_account_identifier: str
        """
        if alternate_account_identifier is not None and len(alternate_account_identifier) > 64:
            raise ValueError("Invalid value for `alternate_account_identifier`, length must be less than or equal to `64`")
        if alternate_account_identifier is not None and len(alternate_account_identifier) < 9:
            raise ValueError("Invalid value for `alternate_account_identifier`, length must be greater than or equal to `9`")

        self._alternate_account_identifier = alternate_account_identifier

    @property
    def audit_info(self):
        """Gets the audit_info of this SearchRequest.


        :return: The audit_info of this SearchRequest.
        :rtype: AuditInfo
        """
        return self._audit_info

    @audit_info.setter
    def audit_info(self, audit_info):
        """Sets the audit_info of this SearchRequest.


        :param audit_info: The audit_info of this SearchRequest.
        :type audit_info: AuditInfo
        """
        if audit_info is None:
            raise ValueError("Invalid value for `audit_info`, must not be `None`")

        self._audit_info = audit_info

    @property
    def comment_id(self):
        """Gets the comment_id of this SearchRequest.

        When present, the search will return one specific token linked to the comment. Cannot be used together with any of the following search request parameters; AccountPan, TokenUniqueReference, Token, PaymentAppInstanceId, or AlternateAccountIdentifier.

        :return: The comment_id of this SearchRequest.
        :rtype: str
        """
        return self._comment_id

    @comment_id.setter
    def comment_id(self, comment_id):
        """Sets the comment_id of this SearchRequest.

        When present, the search will return one specific token linked to the comment. Cannot be used together with any of the following search request parameters; AccountPan, TokenUniqueReference, Token, PaymentAppInstanceId, or AlternateAccountIdentifier.

        :param comment_id: The comment_id of this SearchRequest.
        :type comment_id: str
        """
        if comment_id is not None and len(comment_id) > 0:
            raise ValueError("Invalid value for `comment_id`, length must be less than or equal to `0`")

        self._comment_id = comment_id

    @property
    def exclude_deleted_indicator(self):
        """Gets the exclude_deleted_indicator of this SearchRequest.

        Indicates whether deleted tokens should be excluded from the search results. When omitted, deleted tokens are included in the results. \"true\" indicates deleted tokens are excluded from the search results. \"false\" means deleted tokens are included in the search results.

        :return: The exclude_deleted_indicator of this SearchRequest.
        :rtype: str
        """
        return self._exclude_deleted_indicator

    @exclude_deleted_indicator.setter
    def exclude_deleted_indicator(self, exclude_deleted_indicator):
        """Sets the exclude_deleted_indicator of this SearchRequest.

        Indicates whether deleted tokens should be excluded from the search results. When omitted, deleted tokens are included in the results. \"true\" indicates deleted tokens are excluded from the search results. \"false\" means deleted tokens are included in the search results.

        :param exclude_deleted_indicator: The exclude_deleted_indicator of this SearchRequest.
        :type exclude_deleted_indicator: str
        """
        allowed_values = ["true", "false"]  # noqa: E501
        if exclude_deleted_indicator not in allowed_values:
            raise ValueError(
                "Invalid value for `exclude_deleted_indicator` ({0}), must be one of {1}"
                .format(exclude_deleted_indicator, allowed_values)
            )

        self._exclude_deleted_indicator = exclude_deleted_indicator

    @property
    def payment_app_instance_id(self):
        """Gets the payment_app_instance_id of this SearchRequest.

        When present, the search will return tokens already present or to be provisioned to the specified Payment App instance.<br><br>_Note:_ This may contain the identifier of the Secure Element or a mobile device for some programs. Cannot be used together with any of the following search request parameters; AccountPan, TokenUniqueReference, Token, CommentId, or AlternateAccountIdentifier.

        :return: The payment_app_instance_id of this SearchRequest.
        :rtype: str
        """
        return self._payment_app_instance_id

    @payment_app_instance_id.setter
    def payment_app_instance_id(self, payment_app_instance_id):
        """Sets the payment_app_instance_id of this SearchRequest.

        When present, the search will return tokens already present or to be provisioned to the specified Payment App instance.<br><br>_Note:_ This may contain the identifier of the Secure Element or a mobile device for some programs. Cannot be used together with any of the following search request parameters; AccountPan, TokenUniqueReference, Token, CommentId, or AlternateAccountIdentifier.

        :param payment_app_instance_id: The payment_app_instance_id of this SearchRequest.
        :type payment_app_instance_id: str
        """
        if payment_app_instance_id is not None and len(payment_app_instance_id) > 48:
            raise ValueError("Invalid value for `payment_app_instance_id`, length must be less than or equal to `48`")

        self._payment_app_instance_id = payment_app_instance_id

    @property
    def token(self):
        """Gets the token of this SearchRequest.

        When present, the search will return one specific token. Cannot be used together with any of the following search request parameters; AccountPan, TokenUniqueReference, PaymentAppInstanceId, CommentId, or AlternateAccountIdentifier.

        :return: The token of this SearchRequest.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this SearchRequest.

        When present, the search will return one specific token. Cannot be used together with any of the following search request parameters; AccountPan, TokenUniqueReference, PaymentAppInstanceId, CommentId, or AlternateAccountIdentifier.

        :param token: The token of this SearchRequest.
        :type token: str
        """
        if token is not None and len(token) > 19:
            raise ValueError("Invalid value for `token`, length must be less than or equal to `19`")
        if token is not None and len(token) < 9:
            raise ValueError("Invalid value for `token`, length must be greater than or equal to `9`")

        self._token = token

    @property
    def token_unique_reference(self):
        """Gets the token_unique_reference of this SearchRequest.

        When present, the search will return one specific matching token. Cannot be used together with any of the following search request parameters; AccountPan, Token, PaymentAppInstanceId, CommentId, or AlternateAccountIdentifier.

        :return: The token_unique_reference of this SearchRequest.
        :rtype: str
        """
        return self._token_unique_reference

    @token_unique_reference.setter
    def token_unique_reference(self, token_unique_reference):
        """Sets the token_unique_reference of this SearchRequest.

        When present, the search will return one specific matching token. Cannot be used together with any of the following search request parameters; AccountPan, Token, PaymentAppInstanceId, CommentId, or AlternateAccountIdentifier.

        :param token_unique_reference: The token_unique_reference of this SearchRequest.
        :type token_unique_reference: str
        """
        if token_unique_reference is not None and len(token_unique_reference) > 48:
            raise ValueError("Invalid value for `token_unique_reference`, length must be less than or equal to `48`")

        self._token_unique_reference = token_unique_reference
