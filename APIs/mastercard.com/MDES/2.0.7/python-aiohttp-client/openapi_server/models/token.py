# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device import Device
from openapi_server.models.suspenders import Suspenders
from openapi_server import util


class Token(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_pan_sequence_number: str=None, activation_code_expiration_date_time: str=None, correlation_id: str=None, current_status_code: str=None, current_status_date_time: str=None, current_status_description: str=None, device: Device=None, digitization_request_date_time: str=None, expiration_date: str=None, final_tokenization_decision: str=None, last_comment_id: str=None, payment_app_instance_id: str=None, primary_account_number_unique_reference: str=None, provisioning_status_code: str=None, provisioning_status_description: str=None, storage_technology: str=None, suspenders: Suspenders=None, token_activated_date_time: str=None, token_assurance_level: str=None, token_deleted_from_consumer_app: str=None, token_requestor_consumer_facing_entity_name: str=None, token_requestor_id: str=None, token_requestor_name: str=None, token_suffix: str=None, token_type: str=None, token_unique_reference: str=None, wallet_id: str=None):
        """Token - a model defined in OpenAPI

        :param account_pan_sequence_number: The account_pan_sequence_number of this Token.
        :param activation_code_expiration_date_time: The activation_code_expiration_date_time of this Token.
        :param correlation_id: The correlation_id of this Token.
        :param current_status_code: The current_status_code of this Token.
        :param current_status_date_time: The current_status_date_time of this Token.
        :param current_status_description: The current_status_description of this Token.
        :param device: The device of this Token.
        :param digitization_request_date_time: The digitization_request_date_time of this Token.
        :param expiration_date: The expiration_date of this Token.
        :param final_tokenization_decision: The final_tokenization_decision of this Token.
        :param last_comment_id: The last_comment_id of this Token.
        :param payment_app_instance_id: The payment_app_instance_id of this Token.
        :param primary_account_number_unique_reference: The primary_account_number_unique_reference of this Token.
        :param provisioning_status_code: The provisioning_status_code of this Token.
        :param provisioning_status_description: The provisioning_status_description of this Token.
        :param storage_technology: The storage_technology of this Token.
        :param suspenders: The suspenders of this Token.
        :param token_activated_date_time: The token_activated_date_time of this Token.
        :param token_assurance_level: The token_assurance_level of this Token.
        :param token_deleted_from_consumer_app: The token_deleted_from_consumer_app of this Token.
        :param token_requestor_consumer_facing_entity_name: The token_requestor_consumer_facing_entity_name of this Token.
        :param token_requestor_id: The token_requestor_id of this Token.
        :param token_requestor_name: The token_requestor_name of this Token.
        :param token_suffix: The token_suffix of this Token.
        :param token_type: The token_type of this Token.
        :param token_unique_reference: The token_unique_reference of this Token.
        :param wallet_id: The wallet_id of this Token.
        """
        self.openapi_types = {
            'account_pan_sequence_number': str,
            'activation_code_expiration_date_time': str,
            'correlation_id': str,
            'current_status_code': str,
            'current_status_date_time': str,
            'current_status_description': str,
            'device': Device,
            'digitization_request_date_time': str,
            'expiration_date': str,
            'final_tokenization_decision': str,
            'last_comment_id': str,
            'payment_app_instance_id': str,
            'primary_account_number_unique_reference': str,
            'provisioning_status_code': str,
            'provisioning_status_description': str,
            'storage_technology': str,
            'suspenders': Suspenders,
            'token_activated_date_time': str,
            'token_assurance_level': str,
            'token_deleted_from_consumer_app': str,
            'token_requestor_consumer_facing_entity_name': str,
            'token_requestor_id': str,
            'token_requestor_name': str,
            'token_suffix': str,
            'token_type': str,
            'token_unique_reference': str,
            'wallet_id': str
        }

        self.attribute_map = {
            'account_pan_sequence_number': 'AccountPanSequenceNumber',
            'activation_code_expiration_date_time': 'ActivationCodeExpirationDateTime',
            'correlation_id': 'CorrelationId',
            'current_status_code': 'CurrentStatusCode',
            'current_status_date_time': 'CurrentStatusDateTime',
            'current_status_description': 'CurrentStatusDescription',
            'device': 'Device',
            'digitization_request_date_time': 'DigitizationRequestDateTime',
            'expiration_date': 'ExpirationDate',
            'final_tokenization_decision': 'FinalTokenizationDecision',
            'last_comment_id': 'LastCommentId',
            'payment_app_instance_id': 'PaymentAppInstanceId',
            'primary_account_number_unique_reference': 'PrimaryAccountNumberUniqueReference',
            'provisioning_status_code': 'ProvisioningStatusCode',
            'provisioning_status_description': 'ProvisioningStatusDescription',
            'storage_technology': 'StorageTechnology',
            'suspenders': 'Suspenders',
            'token_activated_date_time': 'TokenActivatedDateTime',
            'token_assurance_level': 'TokenAssuranceLevel',
            'token_deleted_from_consumer_app': 'TokenDeletedFromConsumerApp',
            'token_requestor_consumer_facing_entity_name': 'TokenRequestorConsumerFacingEntityName',
            'token_requestor_id': 'TokenRequestorId',
            'token_requestor_name': 'TokenRequestorName',
            'token_suffix': 'TokenSuffix',
            'token_type': 'TokenType',
            'token_unique_reference': 'TokenUniqueReference',
            'wallet_id': 'WalletId'
        }

        self._account_pan_sequence_number = account_pan_sequence_number
        self._activation_code_expiration_date_time = activation_code_expiration_date_time
        self._correlation_id = correlation_id
        self._current_status_code = current_status_code
        self._current_status_date_time = current_status_date_time
        self._current_status_description = current_status_description
        self._device = device
        self._digitization_request_date_time = digitization_request_date_time
        self._expiration_date = expiration_date
        self._final_tokenization_decision = final_tokenization_decision
        self._last_comment_id = last_comment_id
        self._payment_app_instance_id = payment_app_instance_id
        self._primary_account_number_unique_reference = primary_account_number_unique_reference
        self._provisioning_status_code = provisioning_status_code
        self._provisioning_status_description = provisioning_status_description
        self._storage_technology = storage_technology
        self._suspenders = suspenders
        self._token_activated_date_time = token_activated_date_time
        self._token_assurance_level = token_assurance_level
        self._token_deleted_from_consumer_app = token_deleted_from_consumer_app
        self._token_requestor_consumer_facing_entity_name = token_requestor_consumer_facing_entity_name
        self._token_requestor_id = token_requestor_id
        self._token_requestor_name = token_requestor_name
        self._token_suffix = token_suffix
        self._token_type = token_type
        self._token_unique_reference = token_unique_reference
        self._wallet_id = wallet_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Token':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Token of this Token.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_pan_sequence_number(self):
        """Gets the account_pan_sequence_number of this Token.

        The Account PAN Sequence Number associated with a specific token, as provided to MDES previously by the issuer. It may be used to distinguish between multiple cardholders for a single Account PAN, to represent an issuance number of a specific card, or to distinguish between different card products, such as debit or credit, that share the same Account PAN. Conditional field, present when successfully assigned. Supported values - 00 to 99.

        :return: The account_pan_sequence_number of this Token.
        :rtype: str
        """
        return self._account_pan_sequence_number

    @account_pan_sequence_number.setter
    def account_pan_sequence_number(self, account_pan_sequence_number):
        """Sets the account_pan_sequence_number of this Token.

        The Account PAN Sequence Number associated with a specific token, as provided to MDES previously by the issuer. It may be used to distinguish between multiple cardholders for a single Account PAN, to represent an issuance number of a specific card, or to distinguish between different card products, such as debit or credit, that share the same Account PAN. Conditional field, present when successfully assigned. Supported values - 00 to 99.

        :param account_pan_sequence_number: The account_pan_sequence_number of this Token.
        :type account_pan_sequence_number: str
        """
        if account_pan_sequence_number is not None and len(account_pan_sequence_number) > 2:
            raise ValueError("Invalid value for `account_pan_sequence_number`, length must be less than or equal to `2`")

        self._account_pan_sequence_number = account_pan_sequence_number

    @property
    def activation_code_expiration_date_time(self):
        """Gets the activation_code_expiration_date_time of this Token.

        Date and time when an Activation Code will expire. Conditional field, not present for CoF tokens, and only present when an Activation Code has been generated and activation has not yet occurred. The date and time may be in the future or past. string in ISO 8601 format ? YYYY-MM-DDThh:mm:ssTZD .

        :return: The activation_code_expiration_date_time of this Token.
        :rtype: str
        """
        return self._activation_code_expiration_date_time

    @activation_code_expiration_date_time.setter
    def activation_code_expiration_date_time(self, activation_code_expiration_date_time):
        """Sets the activation_code_expiration_date_time of this Token.

        Date and time when an Activation Code will expire. Conditional field, not present for CoF tokens, and only present when an Activation Code has been generated and activation has not yet occurred. The date and time may be in the future or past. string in ISO 8601 format ? YYYY-MM-DDThh:mm:ssTZD .

        :param activation_code_expiration_date_time: The activation_code_expiration_date_time of this Token.
        :type activation_code_expiration_date_time: str
        """

        self._activation_code_expiration_date_time = activation_code_expiration_date_time

    @property
    def correlation_id(self):
        """Gets the correlation_id of this Token.

        Value linking pre-digitization messages generated during provisioning. Conditional field, not present for CoF tokens.

        :return: The correlation_id of this Token.
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this Token.

        Value linking pre-digitization messages generated during provisioning. Conditional field, not present for CoF tokens.

        :param correlation_id: The correlation_id of this Token.
        :type correlation_id: str
        """
        if correlation_id is not None and len(correlation_id) > 14:
            raise ValueError("Invalid value for `correlation_id`, length must be less than or equal to `14`")

        self._correlation_id = correlation_id

    @property
    def current_status_code(self):
        """Gets the current_status_code of this Token.

        Current status of the Token. Valid values:<br> \"U\" - Unmapped. The token has not yet been linked to the Account PAN. The process of tokenization is ?In Progress.'<br> \"A\" - Active. The token is linked to the Account PAN and may initiate new transactions to be authorized.<br> \"S\" - Suspended. The token is linked to the Account PAN but may not perform transactions at the request of one or more suspenders.<br> \"D\" - Deleted. The token is logically deleted but is still linked to the Account PAN for the purposes of post-authorization transaction processing.

        :return: The current_status_code of this Token.
        :rtype: str
        """
        return self._current_status_code

    @current_status_code.setter
    def current_status_code(self, current_status_code):
        """Sets the current_status_code of this Token.

        Current status of the Token. Valid values:<br> \"U\" - Unmapped. The token has not yet been linked to the Account PAN. The process of tokenization is ?In Progress.'<br> \"A\" - Active. The token is linked to the Account PAN and may initiate new transactions to be authorized.<br> \"S\" - Suspended. The token is linked to the Account PAN but may not perform transactions at the request of one or more suspenders.<br> \"D\" - Deleted. The token is logically deleted but is still linked to the Account PAN for the purposes of post-authorization transaction processing.

        :param current_status_code: The current_status_code of this Token.
        :type current_status_code: str
        """
        if current_status_code is not None and len(current_status_code) > 1:
            raise ValueError("Invalid value for `current_status_code`, length must be less than or equal to `1`")

        self._current_status_code = current_status_code

    @property
    def current_status_date_time(self):
        """Gets the current_status_date_time of this Token.

        Date and time the status was updated.  string, ISO 8601 format ? YYYY-MM-DDThh:mm:ssTZD .

        :return: The current_status_date_time of this Token.
        :rtype: str
        """
        return self._current_status_date_time

    @current_status_date_time.setter
    def current_status_date_time(self, current_status_date_time):
        """Sets the current_status_date_time of this Token.

        Date and time the status was updated.  string, ISO 8601 format ? YYYY-MM-DDThh:mm:ssTZD .

        :param current_status_date_time: The current_status_date_time of this Token.
        :type current_status_date_time: str
        """

        self._current_status_date_time = current_status_date_time

    @property
    def current_status_description(self):
        """Gets the current_status_description of this Token.

        Description of the current status.

        :return: The current_status_description of this Token.
        :rtype: str
        """
        return self._current_status_description

    @current_status_description.setter
    def current_status_description(self, current_status_description):
        """Sets the current_status_description of this Token.

        Description of the current status.

        :param current_status_description: The current_status_description of this Token.
        :type current_status_description: str
        """
        if current_status_description is not None and len(current_status_description) > 0:
            raise ValueError("Invalid value for `current_status_description`, length must be less than or equal to `0`")

        self._current_status_description = current_status_description

    @property
    def device(self):
        """Gets the device of this Token.


        :return: The device of this Token.
        :rtype: Device
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this Token.


        :param device: The device of this Token.
        :type device: Device
        """

        self._device = device

    @property
    def digitization_request_date_time(self):
        """Gets the digitization_request_date_time of this Token.

        Date and time of the initial request for digitization of the Account PAN for this token. Conditional field, not present for CoF tokens. string, in ISO 8601 format ? YYYY-MM-DDThh:mm:ssTZD .

        :return: The digitization_request_date_time of this Token.
        :rtype: str
        """
        return self._digitization_request_date_time

    @digitization_request_date_time.setter
    def digitization_request_date_time(self, digitization_request_date_time):
        """Sets the digitization_request_date_time of this Token.

        Date and time of the initial request for digitization of the Account PAN for this token. Conditional field, not present for CoF tokens. string, in ISO 8601 format ? YYYY-MM-DDThh:mm:ssTZD .

        :param digitization_request_date_time: The digitization_request_date_time of this Token.
        :type digitization_request_date_time: str
        """

        self._digitization_request_date_time = digitization_request_date_time

    @property
    def expiration_date(self):
        """Gets the expiration_date of this Token.

        Expiration date of token. Conditional field, present once the token has been designated for the digitization. Four digit string. Format \"mmyy\".

        :return: The expiration_date of this Token.
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this Token.

        Expiration date of token. Conditional field, present once the token has been designated for the digitization. Four digit string. Format \"mmyy\".

        :param expiration_date: The expiration_date of this Token.
        :type expiration_date: str
        """
        if expiration_date is not None and len(expiration_date) > 4:
            raise ValueError("Invalid value for `expiration_date`, length must be less than or equal to `4`")

        self._expiration_date = expiration_date

    @property
    def final_tokenization_decision(self):
        """Gets the final_tokenization_decision of this Token.

        Final decision related to the digitization of the Account PAN for this token. Valid values:<br />    \"D\" - Digitization was declined<br />    \"A\" - Digitization was approved<br />    \"R\" - Digitization was approved but required authentication prior to activation.<br />Conditional field, not present for CoF tokens.<br><br>_Note:_this information is currently subject to archival processes and will be present for only 1 year following digitization.

        :return: The final_tokenization_decision of this Token.
        :rtype: str
        """
        return self._final_tokenization_decision

    @final_tokenization_decision.setter
    def final_tokenization_decision(self, final_tokenization_decision):
        """Sets the final_tokenization_decision of this Token.

        Final decision related to the digitization of the Account PAN for this token. Valid values:<br />    \"D\" - Digitization was declined<br />    \"A\" - Digitization was approved<br />    \"R\" - Digitization was approved but required authentication prior to activation.<br />Conditional field, not present for CoF tokens.<br><br>_Note:_this information is currently subject to archival processes and will be present for only 1 year following digitization.

        :param final_tokenization_decision: The final_tokenization_decision of this Token.
        :type final_tokenization_decision: str
        """
        if final_tokenization_decision is not None and len(final_tokenization_decision) > 1:
            raise ValueError("Invalid value for `final_tokenization_decision`, length must be less than or equal to `1`")

        self._final_tokenization_decision = final_tokenization_decision

    @property
    def last_comment_id(self):
        """Gets the last_comment_id of this Token.

        Identifier of the last comment associated with the token.

        :return: The last_comment_id of this Token.
        :rtype: str
        """
        return self._last_comment_id

    @last_comment_id.setter
    def last_comment_id(self, last_comment_id):
        """Sets the last_comment_id of this Token.

        Identifier of the last comment associated with the token.

        :param last_comment_id: The last_comment_id of this Token.
        :type last_comment_id: str
        """
        if last_comment_id is not None and len(last_comment_id) > 0:
            raise ValueError("Invalid value for `last_comment_id`, length must be less than or equal to `0`")

        self._last_comment_id = last_comment_id

    @property
    def payment_app_instance_id(self):
        """Gets the payment_app_instance_id of this Token.

        Identifier of the Payment App instance within a device that will be provisioned with a token.<br><br>_Note:_ This may contain the identifier of the Secure Element or a mobile device for some programs. Optional, not present for CoF tokens, and only present when supplied by the Payment App Provider.

        :return: The payment_app_instance_id of this Token.
        :rtype: str
        """
        return self._payment_app_instance_id

    @payment_app_instance_id.setter
    def payment_app_instance_id(self, payment_app_instance_id):
        """Sets the payment_app_instance_id of this Token.

        Identifier of the Payment App instance within a device that will be provisioned with a token.<br><br>_Note:_ This may contain the identifier of the Secure Element or a mobile device for some programs. Optional, not present for CoF tokens, and only present when supplied by the Payment App Provider.

        :param payment_app_instance_id: The payment_app_instance_id of this Token.
        :type payment_app_instance_id: str
        """
        if payment_app_instance_id is not None and len(payment_app_instance_id) > 48:
            raise ValueError("Invalid value for `payment_app_instance_id`, length must be less than or equal to `48`")

        self._payment_app_instance_id = payment_app_instance_id

    @property
    def primary_account_number_unique_reference(self):
        """Gets the primary_account_number_unique_reference of this Token.

        Unique reference to the Account PAN originally digitized. Conditional field, present when successfully assigned.

        :return: The primary_account_number_unique_reference of this Token.
        :rtype: str
        """
        return self._primary_account_number_unique_reference

    @primary_account_number_unique_reference.setter
    def primary_account_number_unique_reference(self, primary_account_number_unique_reference):
        """Sets the primary_account_number_unique_reference of this Token.

        Unique reference to the Account PAN originally digitized. Conditional field, present when successfully assigned.

        :param primary_account_number_unique_reference: The primary_account_number_unique_reference of this Token.
        :type primary_account_number_unique_reference: str
        """
        if primary_account_number_unique_reference is not None and len(primary_account_number_unique_reference) > 48:
            raise ValueError("Invalid value for `primary_account_number_unique_reference`, length must be less than or equal to `48`")

        self._primary_account_number_unique_reference = primary_account_number_unique_reference

    @property
    def provisioning_status_code(self):
        """Gets the provisioning_status_code of this Token.

        Current provisioning status of the token. Valid values:<br />    \"P\" - Token being prepared<br />    \"T\" - Awaiting cardholder acceptance of Terms and Conditions<br />    \"D\" - Token being delivered to Wallet Provider or Device<br />    \"A\" - Awaiting Activation<br />    \"S\" - Provisioning successful<br />    \"F\" - Provisioning failed.<br /><br><br>_Note:_ The order of the statuses above does not indicate any order of status transitions. Conditional field, not present for CoF tokens.

        :return: The provisioning_status_code of this Token.
        :rtype: str
        """
        return self._provisioning_status_code

    @provisioning_status_code.setter
    def provisioning_status_code(self, provisioning_status_code):
        """Sets the provisioning_status_code of this Token.

        Current provisioning status of the token. Valid values:<br />    \"P\" - Token being prepared<br />    \"T\" - Awaiting cardholder acceptance of Terms and Conditions<br />    \"D\" - Token being delivered to Wallet Provider or Device<br />    \"A\" - Awaiting Activation<br />    \"S\" - Provisioning successful<br />    \"F\" - Provisioning failed.<br /><br><br>_Note:_ The order of the statuses above does not indicate any order of status transitions. Conditional field, not present for CoF tokens.

        :param provisioning_status_code: The provisioning_status_code of this Token.
        :type provisioning_status_code: str
        """
        if provisioning_status_code is not None and len(provisioning_status_code) > 1:
            raise ValueError("Invalid value for `provisioning_status_code`, length must be less than or equal to `1`")

        self._provisioning_status_code = provisioning_status_code

    @property
    def provisioning_status_description(self):
        """Gets the provisioning_status_description of this Token.

        Description of the provisioning status. Conditional field, not present for CoF tokens.

        :return: The provisioning_status_description of this Token.
        :rtype: str
        """
        return self._provisioning_status_description

    @provisioning_status_description.setter
    def provisioning_status_description(self, provisioning_status_description):
        """Sets the provisioning_status_description of this Token.

        Description of the provisioning status. Conditional field, not present for CoF tokens.

        :param provisioning_status_description: The provisioning_status_description of this Token.
        :type provisioning_status_description: str
        """
        if provisioning_status_description is not None and len(provisioning_status_description) > 0:
            raise ValueError("Invalid value for `provisioning_status_description`, length must be less than or equal to `0`")

        self._provisioning_status_description = provisioning_status_description

    @property
    def storage_technology(self):
        """Gets the storage_technology of this Token.

        The architecture or technology used for token storage. Valid values:<br />    \"D\" - Device memory<br />    \"P\" - Device memory protected by Trusted Platform Module (TPM)<br />    \"H\" - Server<br />    \"E\" - Trusted Execution Environment (TEE)<br />    \"S\" - Secure Element (SE)<br />    \"V\" - Virtual Execution Environment (VEE).

        :return: The storage_technology of this Token.
        :rtype: str
        """
        return self._storage_technology

    @storage_technology.setter
    def storage_technology(self, storage_technology):
        """Sets the storage_technology of this Token.

        The architecture or technology used for token storage. Valid values:<br />    \"D\" - Device memory<br />    \"P\" - Device memory protected by Trusted Platform Module (TPM)<br />    \"H\" - Server<br />    \"E\" - Trusted Execution Environment (TEE)<br />    \"S\" - Secure Element (SE)<br />    \"V\" - Virtual Execution Environment (VEE).

        :param storage_technology: The storage_technology of this Token.
        :type storage_technology: str
        """
        if storage_technology is not None and len(storage_technology) > 1:
            raise ValueError("Invalid value for `storage_technology`, length must be less than or equal to `1`")

        self._storage_technology = storage_technology

    @property
    def suspenders(self):
        """Gets the suspenders of this Token.


        :return: The suspenders of this Token.
        :rtype: Suspenders
        """
        return self._suspenders

    @suspenders.setter
    def suspenders(self, suspenders):
        """Sets the suspenders of this Token.


        :param suspenders: The suspenders of this Token.
        :type suspenders: Suspenders
        """

        self._suspenders = suspenders

    @property
    def token_activated_date_time(self):
        """Gets the token_activated_date_time of this Token.

        Date and time that the token was activated. Conditional field, present only once the Token has been activated. string in ISO 8601 format ? YYYY-MM-DDThh:mm:ssTZD .

        :return: The token_activated_date_time of this Token.
        :rtype: str
        """
        return self._token_activated_date_time

    @token_activated_date_time.setter
    def token_activated_date_time(self, token_activated_date_time):
        """Sets the token_activated_date_time of this Token.

        Date and time that the token was activated. Conditional field, present only once the Token has been activated. string in ISO 8601 format ? YYYY-MM-DDThh:mm:ssTZD .

        :param token_activated_date_time: The token_activated_date_time of this Token.
        :type token_activated_date_time: str
        """

        self._token_activated_date_time = token_activated_date_time

    @property
    def token_assurance_level(self):
        """Gets the token_assurance_level of this Token.

        Indicates the level of Identification and Verification performed to validate the Cardholder and the Cardholder's account at the time the Token was issued (or at any subsquent time post-issuance).  Only present when a token has a Token Assurance Level assigned.  Supported values are 0 (Not Authenticated) and non-zero (Authenticated).

        :return: The token_assurance_level of this Token.
        :rtype: str
        """
        return self._token_assurance_level

    @token_assurance_level.setter
    def token_assurance_level(self, token_assurance_level):
        """Sets the token_assurance_level of this Token.

        Indicates the level of Identification and Verification performed to validate the Cardholder and the Cardholder's account at the time the Token was issued (or at any subsquent time post-issuance).  Only present when a token has a Token Assurance Level assigned.  Supported values are 0 (Not Authenticated) and non-zero (Authenticated).

        :param token_assurance_level: The token_assurance_level of this Token.
        :type token_assurance_level: str
        """
        if token_assurance_level is not None and len(token_assurance_level) > 1:
            raise ValueError("Invalid value for `token_assurance_level`, length must be less than or equal to `1`")

        self._token_assurance_level = token_assurance_level

    @property
    def token_deleted_from_consumer_app(self):
        """Gets the token_deleted_from_consumer_app of this Token.

        Indicates whether or not a token has been deleted from the consumer app by the token requestor.<br><br>_Note:_ This is a \"soft delete\" that does not affect the actual Token Status. The token may still be active in the system. Supported values - true, false.

        :return: The token_deleted_from_consumer_app of this Token.
        :rtype: str
        """
        return self._token_deleted_from_consumer_app

    @token_deleted_from_consumer_app.setter
    def token_deleted_from_consumer_app(self, token_deleted_from_consumer_app):
        """Sets the token_deleted_from_consumer_app of this Token.

        Indicates whether or not a token has been deleted from the consumer app by the token requestor.<br><br>_Note:_ This is a \"soft delete\" that does not affect the actual Token Status. The token may still be active in the system. Supported values - true, false.

        :param token_deleted_from_consumer_app: The token_deleted_from_consumer_app of this Token.
        :type token_deleted_from_consumer_app: str
        """
        if token_deleted_from_consumer_app is not None and len(token_deleted_from_consumer_app) > 5:
            raise ValueError("Invalid value for `token_deleted_from_consumer_app`, length must be less than or equal to `5`")
        if token_deleted_from_consumer_app is not None and len(token_deleted_from_consumer_app) < 4:
            raise ValueError("Invalid value for `token_deleted_from_consumer_app`, length must be greater than or equal to `4`")

        self._token_deleted_from_consumer_app = token_deleted_from_consumer_app

    @property
    def token_requestor_consumer_facing_entity_name(self):
        """Gets the token_requestor_consumer_facing_entity_name of this Token.

        The Token Service Provider name to be displayed to the consumer (consumer-facing name).

        :return: The token_requestor_consumer_facing_entity_name of this Token.
        :rtype: str
        """
        return self._token_requestor_consumer_facing_entity_name

    @token_requestor_consumer_facing_entity_name.setter
    def token_requestor_consumer_facing_entity_name(self, token_requestor_consumer_facing_entity_name):
        """Sets the token_requestor_consumer_facing_entity_name of this Token.

        The Token Service Provider name to be displayed to the consumer (consumer-facing name).

        :param token_requestor_consumer_facing_entity_name: The token_requestor_consumer_facing_entity_name of this Token.
        :type token_requestor_consumer_facing_entity_name: str
        """
        if token_requestor_consumer_facing_entity_name is not None and len(token_requestor_consumer_facing_entity_name) > 100:
            raise ValueError("Invalid value for `token_requestor_consumer_facing_entity_name`, length must be less than or equal to `100`")

        self._token_requestor_consumer_facing_entity_name = token_requestor_consumer_facing_entity_name

    @property
    def token_requestor_id(self):
        """Gets the token_requestor_id of this Token.

        Per EMV Co, the entity uniquely recognized by Mastercard as the Token Service Provider.

        :return: The token_requestor_id of this Token.
        :rtype: str
        """
        return self._token_requestor_id

    @token_requestor_id.setter
    def token_requestor_id(self, token_requestor_id):
        """Sets the token_requestor_id of this Token.

        Per EMV Co, the entity uniquely recognized by Mastercard as the Token Service Provider.

        :param token_requestor_id: The token_requestor_id of this Token.
        :type token_requestor_id: str
        """
        if token_requestor_id is not None and len(token_requestor_id) > 11:
            raise ValueError("Invalid value for `token_requestor_id`, length must be less than or equal to `11`")

        self._token_requestor_id = token_requestor_id

    @property
    def token_requestor_name(self):
        """Gets the token_requestor_name of this Token.

        The legal name of the token requestor. There can be more than one Token Requestor Id per Token Requester Name (legal name). So it is important to use both parameters to uniquely identify a token requestor.

        :return: The token_requestor_name of this Token.
        :rtype: str
        """
        return self._token_requestor_name

    @token_requestor_name.setter
    def token_requestor_name(self, token_requestor_name):
        """Sets the token_requestor_name of this Token.

        The legal name of the token requestor. There can be more than one Token Requestor Id per Token Requester Name (legal name). So it is important to use both parameters to uniquely identify a token requestor.

        :param token_requestor_name: The token_requestor_name of this Token.
        :type token_requestor_name: str
        """
        if token_requestor_name is not None and len(token_requestor_name) > 100:
            raise ValueError("Invalid value for `token_requestor_name`, length must be less than or equal to `100`")

        self._token_requestor_name = token_requestor_name

    @property
    def token_suffix(self):
        """Gets the token_suffix of this Token.

        Last 4 digits of token in a 4 character string. Conditional field, present once the token has been designated for the digitization.

        :return: The token_suffix of this Token.
        :rtype: str
        """
        return self._token_suffix

    @token_suffix.setter
    def token_suffix(self, token_suffix):
        """Sets the token_suffix of this Token.

        Last 4 digits of token in a 4 character string. Conditional field, present once the token has been designated for the digitization.

        :param token_suffix: The token_suffix of this Token.
        :type token_suffix: str
        """
        if token_suffix is not None and len(token_suffix) > 4:
            raise ValueError("Invalid value for `token_suffix`, length must be less than or equal to `4`")

        self._token_suffix = token_suffix

    @property
    def token_type(self):
        """Gets the token_type of this Token.

        Type of token. Valid values:<br />    \"S\" - Embedded Secure Element Token<br />    \"C\" - Mastercard Cloud-Based Payments token.<br />   F = Static token (deprecated)

        :return: The token_type of this Token.
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this Token.

        Type of token. Valid values:<br />    \"S\" - Embedded Secure Element Token<br />    \"C\" - Mastercard Cloud-Based Payments token.<br />   F = Static token (deprecated)

        :param token_type: The token_type of this Token.
        :type token_type: str
        """
        if token_type is not None and len(token_type) > 1:
            raise ValueError("Invalid value for `token_type`, length must be less than or equal to `1`")

        self._token_type = token_type

    @property
    def token_unique_reference(self):
        """Gets the token_unique_reference of this Token.

        Unique reference to the token. Conditional field, present when successfully assigned.

        :return: The token_unique_reference of this Token.
        :rtype: str
        """
        return self._token_unique_reference

    @token_unique_reference.setter
    def token_unique_reference(self, token_unique_reference):
        """Sets the token_unique_reference of this Token.

        Unique reference to the token. Conditional field, present when successfully assigned.

        :param token_unique_reference: The token_unique_reference of this Token.
        :type token_unique_reference: str
        """
        if token_unique_reference is not None and len(token_unique_reference) > 48:
            raise ValueError("Invalid value for `token_unique_reference`, length must be less than or equal to `48`")

        self._token_unique_reference = token_unique_reference

    @property
    def wallet_id(self):
        """Gets the wallet_id of this Token.

        Identifier of the Wallet Provider who requested the digitization or tokenization. Conditional field, not present for CoF tokens, and only present when supplied by the Payment App Provider.

        :return: The wallet_id of this Token.
        :rtype: str
        """
        return self._wallet_id

    @wallet_id.setter
    def wallet_id(self, wallet_id):
        """Sets the wallet_id of this Token.

        Identifier of the Wallet Provider who requested the digitization or tokenization. Conditional field, not present for CoF tokens, and only present when supplied by the Payment App Provider.

        :param wallet_id: The wallet_id of this Token.
        :type wallet_id: str
        """
        if wallet_id is not None and len(wallet_id) > 3:
            raise ValueError("Invalid value for `wallet_id`, length must be less than or equal to `3`")

        self._wallet_id = wallet_id
