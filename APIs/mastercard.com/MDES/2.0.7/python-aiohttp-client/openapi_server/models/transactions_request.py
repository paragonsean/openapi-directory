# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audit_info import AuditInfo
from openapi_server import util


class TransactionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audit_info: AuditInfo=None, token_unique_reference: str=None):
        """TransactionsRequest - a model defined in OpenAPI

        :param audit_info: The audit_info of this TransactionsRequest.
        :param token_unique_reference: The token_unique_reference of this TransactionsRequest.
        """
        self.openapi_types = {
            'audit_info': AuditInfo,
            'token_unique_reference': str
        }

        self.attribute_map = {
            'audit_info': 'AuditInfo',
            'token_unique_reference': 'TokenUniqueReference'
        }

        self._audit_info = audit_info
        self._token_unique_reference = token_unique_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransactionsRequest of this TransactionsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audit_info(self):
        """Gets the audit_info of this TransactionsRequest.


        :return: The audit_info of this TransactionsRequest.
        :rtype: AuditInfo
        """
        return self._audit_info

    @audit_info.setter
    def audit_info(self, audit_info):
        """Sets the audit_info of this TransactionsRequest.


        :param audit_info: The audit_info of this TransactionsRequest.
        :type audit_info: AuditInfo
        """
        if audit_info is None:
            raise ValueError("Invalid value for `audit_info`, must not be `None`")

        self._audit_info = audit_info

    @property
    def token_unique_reference(self):
        """Gets the token_unique_reference of this TransactionsRequest.

        The TokenUniqueReference of the token.

        :return: The token_unique_reference of this TransactionsRequest.
        :rtype: str
        """
        return self._token_unique_reference

    @token_unique_reference.setter
    def token_unique_reference(self, token_unique_reference):
        """Sets the token_unique_reference of this TransactionsRequest.

        The TokenUniqueReference of the token.

        :param token_unique_reference: The token_unique_reference of this TransactionsRequest.
        :type token_unique_reference: str
        """
        if token_unique_reference is None:
            raise ValueError("Invalid value for `token_unique_reference`, must not be `None`")
        if token_unique_reference is not None and len(token_unique_reference) > 48:
            raise ValueError("Invalid value for `token_unique_reference`, length must be less than or equal to `48`")

        self._token_unique_reference = token_unique_reference
