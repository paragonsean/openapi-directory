# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audit_info import AuditInfo
from openapi_server import util


class Comment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audit_info: AuditInfo=None, comment_date_time: str=None, comment_id: str=None, comment_text: str=None):
        """Comment - a model defined in OpenAPI

        :param audit_info: The audit_info of this Comment.
        :param comment_date_time: The comment_date_time of this Comment.
        :param comment_id: The comment_id of this Comment.
        :param comment_text: The comment_text of this Comment.
        """
        self.openapi_types = {
            'audit_info': AuditInfo,
            'comment_date_time': str,
            'comment_id': str,
            'comment_text': str
        }

        self.attribute_map = {
            'audit_info': 'AuditInfo',
            'comment_date_time': 'CommentDateTime',
            'comment_id': 'CommentId',
            'comment_text': 'CommentText'
        }

        self._audit_info = audit_info
        self._comment_date_time = comment_date_time
        self._comment_id = comment_id
        self._comment_text = comment_text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Comment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Comment of this Comment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audit_info(self):
        """Gets the audit_info of this Comment.


        :return: The audit_info of this Comment.
        :rtype: AuditInfo
        """
        return self._audit_info

    @audit_info.setter
    def audit_info(self, audit_info):
        """Sets the audit_info of this Comment.


        :param audit_info: The audit_info of this Comment.
        :type audit_info: AuditInfo
        """

        self._audit_info = audit_info

    @property
    def comment_date_time(self):
        """Gets the comment_date_time of this Comment.

        Date and time that the comment was updated. Format - YYYY-MM-DDThh:mm:ssTZD .

        :return: The comment_date_time of this Comment.
        :rtype: str
        """
        return self._comment_date_time

    @comment_date_time.setter
    def comment_date_time(self, comment_date_time):
        """Sets the comment_date_time of this Comment.

        Date and time that the comment was updated. Format - YYYY-MM-DDThh:mm:ssTZD .

        :param comment_date_time: The comment_date_time of this Comment.
        :type comment_date_time: str
        """

        self._comment_date_time = comment_date_time

    @property
    def comment_id(self):
        """Gets the comment_id of this Comment.

        Identifier for the comment.

        :return: The comment_id of this Comment.
        :rtype: str
        """
        return self._comment_id

    @comment_id.setter
    def comment_id(self, comment_id):
        """Sets the comment_id of this Comment.

        Identifier for the comment.

        :param comment_id: The comment_id of this Comment.
        :type comment_id: str
        """
        if comment_id is not None and len(comment_id) > 0:
            raise ValueError("Invalid value for `comment_id`, length must be less than or equal to `0`")

        self._comment_id = comment_id

    @property
    def comment_text(self):
        """Gets the comment_text of this Comment.

        Comment text.

        :return: The comment_text of this Comment.
        :rtype: str
        """
        return self._comment_text

    @comment_text.setter
    def comment_text(self, comment_text):
        """Sets the comment_text of this Comment.

        Comment text.

        :param comment_text: The comment_text of this Comment.
        :type comment_text: str
        """
        if comment_text is not None and len(comment_text) > 500:
            raise ValueError("Invalid value for `comment_text`, length must be less than or equal to `500`")

        self._comment_text = comment_text
