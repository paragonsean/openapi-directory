# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audit_info import AuditInfo
from openapi_server import util


class TokenActivateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_pan: int=None, audit_info: AuditInfo=None, comment_text: int=None, payment_app_instance_id: int=None, reason_code: str=None, token_unique_reference: str=None):
        """TokenActivateRequest - a model defined in OpenAPI

        :param account_pan: The account_pan of this TokenActivateRequest.
        :param audit_info: The audit_info of this TokenActivateRequest.
        :param comment_text: The comment_text of this TokenActivateRequest.
        :param payment_app_instance_id: The payment_app_instance_id of this TokenActivateRequest.
        :param reason_code: The reason_code of this TokenActivateRequest.
        :param token_unique_reference: The token_unique_reference of this TokenActivateRequest.
        """
        self.openapi_types = {
            'account_pan': int,
            'audit_info': AuditInfo,
            'comment_text': int,
            'payment_app_instance_id': int,
            'reason_code': str,
            'token_unique_reference': str
        }

        self.attribute_map = {
            'account_pan': 'AccountPan',
            'audit_info': 'AuditInfo',
            'comment_text': 'CommentText',
            'payment_app_instance_id': 'PaymentAppInstanceId',
            'reason_code': 'ReasonCode',
            'token_unique_reference': 'TokenUniqueReference'
        }

        self._account_pan = account_pan
        self._audit_info = audit_info
        self._comment_text = comment_text
        self._payment_app_instance_id = payment_app_instance_id
        self._reason_code = reason_code
        self._token_unique_reference = token_unique_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TokenActivateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TokenActivateRequest of this TokenActivateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_pan(self):
        """Gets the account_pan of this TokenActivateRequest.

        The Account PAN of the token to be activated. Conditional field, must be present when PaymentAppInstanceId is present, must not be present when TokenUniqueReference is present.

        :return: The account_pan of this TokenActivateRequest.
        :rtype: int
        """
        return self._account_pan

    @account_pan.setter
    def account_pan(self, account_pan):
        """Sets the account_pan of this TokenActivateRequest.

        The Account PAN of the token to be activated. Conditional field, must be present when PaymentAppInstanceId is present, must not be present when TokenUniqueReference is present.

        :param account_pan: The account_pan of this TokenActivateRequest.
        :type account_pan: int
        """
        if account_pan is not None and len(account_pan) > 19:
            raise ValueError("Invalid value for `account_pan`, length must be less than or equal to `19`")
        if account_pan is not None and len(account_pan) < 9:
            raise ValueError("Invalid value for `account_pan`, length must be greater than or equal to `9`")

        self._account_pan = account_pan

    @property
    def audit_info(self):
        """Gets the audit_info of this TokenActivateRequest.


        :return: The audit_info of this TokenActivateRequest.
        :rtype: AuditInfo
        """
        return self._audit_info

    @audit_info.setter
    def audit_info(self, audit_info):
        """Sets the audit_info of this TokenActivateRequest.


        :param audit_info: The audit_info of this TokenActivateRequest.
        :type audit_info: AuditInfo
        """
        if audit_info is None:
            raise ValueError("Invalid value for `audit_info`, must not be `None`")

        self._audit_info = audit_info

    @property
    def comment_text(self):
        """Gets the comment_text of this TokenActivateRequest.

        Comment related to activating this token.

        :return: The comment_text of this TokenActivateRequest.
        :rtype: int
        """
        return self._comment_text

    @comment_text.setter
    def comment_text(self, comment_text):
        """Sets the comment_text of this TokenActivateRequest.

        Comment related to activating this token.

        :param comment_text: The comment_text of this TokenActivateRequest.
        :type comment_text: int
        """
        if comment_text is not None and len(comment_text) > 500:
            raise ValueError("Invalid value for `comment_text`, length must be less than or equal to `500`")

        self._comment_text = comment_text

    @property
    def payment_app_instance_id(self):
        """Gets the payment_app_instance_id of this TokenActivateRequest.

        Identifier of the Payment App instance within a device that will be provisioned with a token. <br><br>_Note:_ This may contain the identifier of the Secure Element or a mobile device for some programs. Conditional field, must be present when AccountPan is present. Must not be present when TokenUniqueReference is present.

        :return: The payment_app_instance_id of this TokenActivateRequest.
        :rtype: int
        """
        return self._payment_app_instance_id

    @payment_app_instance_id.setter
    def payment_app_instance_id(self, payment_app_instance_id):
        """Sets the payment_app_instance_id of this TokenActivateRequest.

        Identifier of the Payment App instance within a device that will be provisioned with a token. <br><br>_Note:_ This may contain the identifier of the Secure Element or a mobile device for some programs. Conditional field, must be present when AccountPan is present. Must not be present when TokenUniqueReference is present.

        :param payment_app_instance_id: The payment_app_instance_id of this TokenActivateRequest.
        :type payment_app_instance_id: int
        """
        if payment_app_instance_id is not None and len(payment_app_instance_id) > 48:
            raise ValueError("Invalid value for `payment_app_instance_id`, length must be less than or equal to `48`")

        self._payment_app_instance_id = payment_app_instance_id

    @property
    def reason_code(self):
        """Gets the reason_code of this TokenActivateRequest.

        Reason for the activation. Valid values:<br />    \"A\" = Cardholder successfully authenticated prior to activation.<br />    \"C\" = Cardholder successfully authenticated with a customer service agent prior to activation.

        :return: The reason_code of this TokenActivateRequest.
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this TokenActivateRequest.

        Reason for the activation. Valid values:<br />    \"A\" = Cardholder successfully authenticated prior to activation.<br />    \"C\" = Cardholder successfully authenticated with a customer service agent prior to activation.

        :param reason_code: The reason_code of this TokenActivateRequest.
        :type reason_code: str
        """
        if reason_code is None:
            raise ValueError("Invalid value for `reason_code`, must not be `None`")
        if reason_code is not None and len(reason_code) > 1:
            raise ValueError("Invalid value for `reason_code`, length must be less than or equal to `1`")

        self._reason_code = reason_code

    @property
    def token_unique_reference(self):
        """Gets the token_unique_reference of this TokenActivateRequest.

        TokenUniqueReference for the token to be activated. Conditional field, present when AccountPan and PaymentAppInstanceId are not present.

        :return: The token_unique_reference of this TokenActivateRequest.
        :rtype: str
        """
        return self._token_unique_reference

    @token_unique_reference.setter
    def token_unique_reference(self, token_unique_reference):
        """Sets the token_unique_reference of this TokenActivateRequest.

        TokenUniqueReference for the token to be activated. Conditional field, present when AccountPan and PaymentAppInstanceId are not present.

        :param token_unique_reference: The token_unique_reference of this TokenActivateRequest.
        :type token_unique_reference: str
        """
        if token_unique_reference is not None and len(token_unique_reference) > 48:
            raise ValueError("Invalid value for `token_unique_reference`, length must be less than or equal to `48`")
        if token_unique_reference is not None and len(token_unique_reference) < 9:
            raise ValueError("Invalid value for `token_unique_reference`, length must be greater than or equal to `9`")

        self._token_unique_reference = token_unique_reference
