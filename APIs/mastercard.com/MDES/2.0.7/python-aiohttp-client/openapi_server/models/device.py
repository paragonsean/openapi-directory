# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Device(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_id: str=None, device_name: str=None, device_type: str=None, secure_element_id: str=None):
        """Device - a model defined in OpenAPI

        :param device_id: The device_id of this Device.
        :param device_name: The device_name of this Device.
        :param device_type: The device_type of this Device.
        :param secure_element_id: The secure_element_id of this Device.
        """
        self.openapi_types = {
            'device_id': str,
            'device_name': str,
            'device_type': str,
            'secure_element_id': str
        }

        self.attribute_map = {
            'device_id': 'DeviceId',
            'device_name': 'DeviceName',
            'device_type': 'DeviceType',
            'secure_element_id': 'SecureElementId'
        }

        self._device_id = device_id
        self._device_name = device_name
        self._device_type = device_type
        self._secure_element_id = secure_element_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Device':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Device of this Device.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_id(self):
        """Gets the device_id of this Device.

        Serial number of the device provisioned with the token. May be masked. Conditional field, not present for CoF tokens, and only present when provided by a Wallet Provider. May be masked (by the Wallet Provider).<br />Example (unmasked) \"C2ZBY14310005664\". Example (masked) \"xxxxY1431xxxxxxx\".

        :return: The device_id of this Device.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this Device.

        Serial number of the device provisioned with the token. May be masked. Conditional field, not present for CoF tokens, and only present when provided by a Wallet Provider. May be masked (by the Wallet Provider).<br />Example (unmasked) \"C2ZBY14310005664\". Example (masked) \"xxxxY1431xxxxxxx\".

        :param device_id: The device_id of this Device.
        :type device_id: str
        """
        if device_id is not None and len(device_id) > 0:
            raise ValueError("Invalid value for `device_id`, length must be less than or equal to `0`")

        self._device_id = device_id

    @property
    def device_name(self):
        """Gets the device_name of this Device.

        Nickname of the device provisioned with the token. Conditional field, not present for CoF tokens, and only present when the Payment App Provider has implemented the 'Get Device Info' MDES API.

        :return: The device_name of this Device.
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this Device.

        Nickname of the device provisioned with the token. Conditional field, not present for CoF tokens, and only present when the Payment App Provider has implemented the 'Get Device Info' MDES API.

        :param device_name: The device_name of this Device.
        :type device_name: str
        """
        if device_name is not None and len(device_name) > 0:
            raise ValueError("Invalid value for `device_name`, length must be less than or equal to `0`")

        self._device_name = device_name

    @property
    def device_type(self):
        """Gets the device_type of this Device.

        Type of the device provisioned with the token. Valid values:<br />    \"03\" - Watch<br />    \"09\" - Mobile Phone or Smartphone with a fixed (non-removable) secure element not controlled by the mobile network operator<br />    \"13\" - Tablet or e-reader with a fixed (non-removable) secure element not controlled by the mobile network operator<br />    \"14\" - Mobile phone or Smartphone with a payment application running in a host processor<br />    \"15\" - Tablet or E-Book with a payment application running in a host processor<br />    \"16\" ? Mobile Phone or Smartphone with a payment application running in the TEE of a host processor<br />    \"17\" ? Tablet or E-Book with a payment application running in the TEE of a host processor<br />    \"18\" ? Watch with a payment application running in the TEE of a host processor<br />    \"19\" ? Watch with a payment application running in a host processor.<br />    \"21\" ? Phone.<br />    \"22\" ? Tablet. <br />    \"23\" ? Watch.<br />    \"24\" ? Sticker.<br />    \"25\" ? Personal Computer.<br />    \"26\" ? Device Peripheral.<br />    \"27\" ? Tag.<br />    \"28\" ? Jewelry.<br />    \"29\" ?  Fashion Accessory.<br />    \"30\" ?  Garment.<br />    \"31\" ?  Domestic Appliance.<br />    \"32\" ?  Vehicle.<br />    \"33\" ?  Media or Gaming Device.<br />    \"99\" ?  Undefined.<br />Conditional field, not present for CoF tokens, and only present when supplied by the Payment App Provider.

        :return: The device_type of this Device.
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this Device.

        Type of the device provisioned with the token. Valid values:<br />    \"03\" - Watch<br />    \"09\" - Mobile Phone or Smartphone with a fixed (non-removable) secure element not controlled by the mobile network operator<br />    \"13\" - Tablet or e-reader with a fixed (non-removable) secure element not controlled by the mobile network operator<br />    \"14\" - Mobile phone or Smartphone with a payment application running in a host processor<br />    \"15\" - Tablet or E-Book with a payment application running in a host processor<br />    \"16\" ? Mobile Phone or Smartphone with a payment application running in the TEE of a host processor<br />    \"17\" ? Tablet or E-Book with a payment application running in the TEE of a host processor<br />    \"18\" ? Watch with a payment application running in the TEE of a host processor<br />    \"19\" ? Watch with a payment application running in a host processor.<br />    \"21\" ? Phone.<br />    \"22\" ? Tablet. <br />    \"23\" ? Watch.<br />    \"24\" ? Sticker.<br />    \"25\" ? Personal Computer.<br />    \"26\" ? Device Peripheral.<br />    \"27\" ? Tag.<br />    \"28\" ? Jewelry.<br />    \"29\" ?  Fashion Accessory.<br />    \"30\" ?  Garment.<br />    \"31\" ?  Domestic Appliance.<br />    \"32\" ?  Vehicle.<br />    \"33\" ?  Media or Gaming Device.<br />    \"99\" ?  Undefined.<br />Conditional field, not present for CoF tokens, and only present when supplied by the Payment App Provider.

        :param device_type: The device_type of this Device.
        :type device_type: str
        """
        if device_type is not None and len(device_type) > 2:
            raise ValueError("Invalid value for `device_type`, length must be less than or equal to `2`")

        self._device_type = device_type

    @property
    def secure_element_id(self):
        """Gets the secure_element_id of this Device.

        Identifier of the secure element provisioned with the token. Conditional field, not present for CoF tokens, and only present when the token is provisioned to a secure element.

        :return: The secure_element_id of this Device.
        :rtype: str
        """
        return self._secure_element_id

    @secure_element_id.setter
    def secure_element_id(self, secure_element_id):
        """Sets the secure_element_id of this Device.

        Identifier of the secure element provisioned with the token. Conditional field, not present for CoF tokens, and only present when the token is provisioned to a secure element.

        :param secure_element_id: The secure_element_id of this Device.
        :type secure_element_id: str
        """
        if secure_element_id is not None and len(secure_element_id) > 128:
            raise ValueError("Invalid value for `secure_element_id`, length must be less than or equal to `128`")

        self._secure_element_id = secure_element_id
