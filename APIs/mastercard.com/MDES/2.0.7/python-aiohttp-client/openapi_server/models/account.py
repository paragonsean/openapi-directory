# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tokens import Tokens
from openapi_server import util


class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_pan_suffix: str=None, alternate_account_identifier_suffix: str=None, expiration_date: str=None, tokens: Tokens=None):
        """Account - a model defined in OpenAPI

        :param account_pan_suffix: The account_pan_suffix of this Account.
        :param alternate_account_identifier_suffix: The alternate_account_identifier_suffix of this Account.
        :param expiration_date: The expiration_date of this Account.
        :param tokens: The tokens of this Account.
        """
        self.openapi_types = {
            'account_pan_suffix': str,
            'alternate_account_identifier_suffix': str,
            'expiration_date': str,
            'tokens': Tokens
        }

        self.attribute_map = {
            'account_pan_suffix': 'AccountPanSuffix',
            'alternate_account_identifier_suffix': 'AlternateAccountIdentifierSuffix',
            'expiration_date': 'ExpirationDate',
            'tokens': 'Tokens'
        }

        self._account_pan_suffix = account_pan_suffix
        self._alternate_account_identifier_suffix = alternate_account_identifier_suffix
        self._expiration_date = expiration_date
        self._tokens = tokens

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Account of this Account.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_pan_suffix(self):
        """Gets the account_pan_suffix of this Account.

        Last 4 digits of Account PAN mapped (or to be mapped) to Token(s).

        :return: The account_pan_suffix of this Account.
        :rtype: str
        """
        return self._account_pan_suffix

    @account_pan_suffix.setter
    def account_pan_suffix(self, account_pan_suffix):
        """Sets the account_pan_suffix of this Account.

        Last 4 digits of Account PAN mapped (or to be mapped) to Token(s).

        :param account_pan_suffix: The account_pan_suffix of this Account.
        :type account_pan_suffix: str
        """
        if account_pan_suffix is not None and len(account_pan_suffix) > 4:
            raise ValueError("Invalid value for `account_pan_suffix`, length must be less than or equal to `4`")

        self._account_pan_suffix = account_pan_suffix

    @property
    def alternate_account_identifier_suffix(self):
        """Gets the alternate_account_identifier_suffix of this Account.

        Alternate Account Identifier is a cardholder friendly reference to a bank account. It is typically used to identify associated tokens when the cardholder is unaware of their Account PAN. The Alternate Account Identifier Suffix exposes just the last few characters of the full identifier in order to protect the full identifier from possible fraud.

        :return: The alternate_account_identifier_suffix of this Account.
        :rtype: str
        """
        return self._alternate_account_identifier_suffix

    @alternate_account_identifier_suffix.setter
    def alternate_account_identifier_suffix(self, alternate_account_identifier_suffix):
        """Sets the alternate_account_identifier_suffix of this Account.

        Alternate Account Identifier is a cardholder friendly reference to a bank account. It is typically used to identify associated tokens when the cardholder is unaware of their Account PAN. The Alternate Account Identifier Suffix exposes just the last few characters of the full identifier in order to protect the full identifier from possible fraud.

        :param alternate_account_identifier_suffix: The alternate_account_identifier_suffix of this Account.
        :type alternate_account_identifier_suffix: str
        """
        if alternate_account_identifier_suffix is not None and len(alternate_account_identifier_suffix) > 4:
            raise ValueError("Invalid value for `alternate_account_identifier_suffix`, length must be less than or equal to `4`")

        self._alternate_account_identifier_suffix = alternate_account_identifier_suffix

    @property
    def expiration_date(self):
        """Gets the expiration_date of this Account.

        Expiration date of Account PAN mapped (or to be mapped) to Token(s). 'MMYY' Format.

        :return: The expiration_date of this Account.
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this Account.

        Expiration date of Account PAN mapped (or to be mapped) to Token(s). 'MMYY' Format.

        :param expiration_date: The expiration_date of this Account.
        :type expiration_date: str
        """
        if expiration_date is not None and len(expiration_date) > 4:
            raise ValueError("Invalid value for `expiration_date`, length must be less than or equal to `4`")

        self._expiration_date = expiration_date

    @property
    def tokens(self):
        """Gets the tokens of this Account.


        :return: The tokens of this Account.
        :rtype: Tokens
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens):
        """Sets the tokens of this Account.


        :param tokens: The tokens of this Account.
        :type tokens: Tokens
        """

        self._tokens = tokens
