# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audit_info import AuditInfo
from openapi_server import util


class TokenUpdateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_pan_sequence_number: str=None, audit_info: AuditInfo=None, comment_text: str=None, current_account_pan: str=None, expiration_date: str=None, issuer_product_configuration_id: str=None, new_account_pan: str=None, token_unique_reference: str=None, update_wallet_provider_indicator: str=None):
        """TokenUpdateRequest - a model defined in OpenAPI

        :param account_pan_sequence_number: The account_pan_sequence_number of this TokenUpdateRequest.
        :param audit_info: The audit_info of this TokenUpdateRequest.
        :param comment_text: The comment_text of this TokenUpdateRequest.
        :param current_account_pan: The current_account_pan of this TokenUpdateRequest.
        :param expiration_date: The expiration_date of this TokenUpdateRequest.
        :param issuer_product_configuration_id: The issuer_product_configuration_id of this TokenUpdateRequest.
        :param new_account_pan: The new_account_pan of this TokenUpdateRequest.
        :param token_unique_reference: The token_unique_reference of this TokenUpdateRequest.
        :param update_wallet_provider_indicator: The update_wallet_provider_indicator of this TokenUpdateRequest.
        """
        self.openapi_types = {
            'account_pan_sequence_number': str,
            'audit_info': AuditInfo,
            'comment_text': str,
            'current_account_pan': str,
            'expiration_date': str,
            'issuer_product_configuration_id': str,
            'new_account_pan': str,
            'token_unique_reference': str,
            'update_wallet_provider_indicator': str
        }

        self.attribute_map = {
            'account_pan_sequence_number': 'AccountPanSequenceNumber',
            'audit_info': 'AuditInfo',
            'comment_text': 'CommentText',
            'current_account_pan': 'CurrentAccountPan',
            'expiration_date': 'ExpirationDate',
            'issuer_product_configuration_id': 'IssuerProductConfigurationId',
            'new_account_pan': 'NewAccountPan',
            'token_unique_reference': 'TokenUniqueReference',
            'update_wallet_provider_indicator': 'UpdateWalletProviderIndicator'
        }

        self._account_pan_sequence_number = account_pan_sequence_number
        self._audit_info = audit_info
        self._comment_text = comment_text
        self._current_account_pan = current_account_pan
        self._expiration_date = expiration_date
        self._issuer_product_configuration_id = issuer_product_configuration_id
        self._new_account_pan = new_account_pan
        self._token_unique_reference = token_unique_reference
        self._update_wallet_provider_indicator = update_wallet_provider_indicator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TokenUpdateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TokenUpdateRequest of this TokenUpdateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_pan_sequence_number(self):
        """Gets the account_pan_sequence_number of this TokenUpdateRequest.

        New PAN sequence number to be applied to the updated token(s). Conditional field, must not be present when IssuerProductConfigurationId is present. Optional if updating PAN mapping or Expiration Date.

        :return: The account_pan_sequence_number of this TokenUpdateRequest.
        :rtype: str
        """
        return self._account_pan_sequence_number

    @account_pan_sequence_number.setter
    def account_pan_sequence_number(self, account_pan_sequence_number):
        """Sets the account_pan_sequence_number of this TokenUpdateRequest.

        New PAN sequence number to be applied to the updated token(s). Conditional field, must not be present when IssuerProductConfigurationId is present. Optional if updating PAN mapping or Expiration Date.

        :param account_pan_sequence_number: The account_pan_sequence_number of this TokenUpdateRequest.
        :type account_pan_sequence_number: str
        """
        if account_pan_sequence_number is not None and len(account_pan_sequence_number) > 2:
            raise ValueError("Invalid value for `account_pan_sequence_number`, length must be less than or equal to `2`")

        self._account_pan_sequence_number = account_pan_sequence_number

    @property
    def audit_info(self):
        """Gets the audit_info of this TokenUpdateRequest.


        :return: The audit_info of this TokenUpdateRequest.
        :rtype: AuditInfo
        """
        return self._audit_info

    @audit_info.setter
    def audit_info(self, audit_info):
        """Sets the audit_info of this TokenUpdateRequest.


        :param audit_info: The audit_info of this TokenUpdateRequest.
        :type audit_info: AuditInfo
        """
        if audit_info is None:
            raise ValueError("Invalid value for `audit_info`, must not be `None`")

        self._audit_info = audit_info

    @property
    def comment_text(self):
        """Gets the comment_text of this TokenUpdateRequest.

        Comment related to the updated token(s).

        :return: The comment_text of this TokenUpdateRequest.
        :rtype: str
        """
        return self._comment_text

    @comment_text.setter
    def comment_text(self, comment_text):
        """Sets the comment_text of this TokenUpdateRequest.

        Comment related to the updated token(s).

        :param comment_text: The comment_text of this TokenUpdateRequest.
        :type comment_text: str
        """
        if comment_text is not None and len(comment_text) > 500:
            raise ValueError("Invalid value for `comment_text`, length must be less than or equal to `500`")

        self._comment_text = comment_text

    @property
    def current_account_pan(self):
        """Gets the current_account_pan of this TokenUpdateRequest.

        Current Account PAN of the token(s) to be updated. Conditional field, used for updating all tokens mapped to a single Account PAN and must not be present when TokenUniqueReference is present.

        :return: The current_account_pan of this TokenUpdateRequest.
        :rtype: str
        """
        return self._current_account_pan

    @current_account_pan.setter
    def current_account_pan(self, current_account_pan):
        """Sets the current_account_pan of this TokenUpdateRequest.

        Current Account PAN of the token(s) to be updated. Conditional field, used for updating all tokens mapped to a single Account PAN and must not be present when TokenUniqueReference is present.

        :param current_account_pan: The current_account_pan of this TokenUpdateRequest.
        :type current_account_pan: str
        """
        if current_account_pan is not None and len(current_account_pan) > 19:
            raise ValueError("Invalid value for `current_account_pan`, length must be less than or equal to `19`")
        if current_account_pan is not None and len(current_account_pan) < 9:
            raise ValueError("Invalid value for `current_account_pan`, length must be greater than or equal to `9`")

        self._current_account_pan = current_account_pan

    @property
    def expiration_date(self):
        """Gets the expiration_date of this TokenUpdateRequest.

        New expiration date to be applied to the updated token(s). Conditional field, must not be present when IssuerProductConfigurationId is present. Optional if updating PAN mapping or PAN Sequence Number.

        :return: The expiration_date of this TokenUpdateRequest.
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this TokenUpdateRequest.

        New expiration date to be applied to the updated token(s). Conditional field, must not be present when IssuerProductConfigurationId is present. Optional if updating PAN mapping or PAN Sequence Number.

        :param expiration_date: The expiration_date of this TokenUpdateRequest.
        :type expiration_date: str
        """
        if expiration_date is not None and len(expiration_date) > 4:
            raise ValueError("Invalid value for `expiration_date`, length must be less than or equal to `4`")

        self._expiration_date = expiration_date

    @property
    def issuer_product_configuration_id(self):
        """Gets the issuer_product_configuration_id of this TokenUpdateRequest.

        New product configuration ID to be applied to the updated token(s). Conditional field, must not be present if any of the following are present; NewAccountPan, ExpirationDate, AccountPanSequenceNumber.

        :return: The issuer_product_configuration_id of this TokenUpdateRequest.
        :rtype: str
        """
        return self._issuer_product_configuration_id

    @issuer_product_configuration_id.setter
    def issuer_product_configuration_id(self, issuer_product_configuration_id):
        """Sets the issuer_product_configuration_id of this TokenUpdateRequest.

        New product configuration ID to be applied to the updated token(s). Conditional field, must not be present if any of the following are present; NewAccountPan, ExpirationDate, AccountPanSequenceNumber.

        :param issuer_product_configuration_id: The issuer_product_configuration_id of this TokenUpdateRequest.
        :type issuer_product_configuration_id: str
        """
        if issuer_product_configuration_id is not None and len(issuer_product_configuration_id) > 10:
            raise ValueError("Invalid value for `issuer_product_configuration_id`, length must be less than or equal to `10`")

        self._issuer_product_configuration_id = issuer_product_configuration_id

    @property
    def new_account_pan(self):
        """Gets the new_account_pan of this TokenUpdateRequest.

        New Account PAN to be applied to the updated token(s) if there is in fact a new Account PAN. Optional if updating Expiration Date or PAN Sequence Number.

        :return: The new_account_pan of this TokenUpdateRequest.
        :rtype: str
        """
        return self._new_account_pan

    @new_account_pan.setter
    def new_account_pan(self, new_account_pan):
        """Sets the new_account_pan of this TokenUpdateRequest.

        New Account PAN to be applied to the updated token(s) if there is in fact a new Account PAN. Optional if updating Expiration Date or PAN Sequence Number.

        :param new_account_pan: The new_account_pan of this TokenUpdateRequest.
        :type new_account_pan: str
        """
        if new_account_pan is not None and len(new_account_pan) > 19:
            raise ValueError("Invalid value for `new_account_pan`, length must be less than or equal to `19`")
        if new_account_pan is not None and len(new_account_pan) < 9:
            raise ValueError("Invalid value for `new_account_pan`, length must be greater than or equal to `9`")

        self._new_account_pan = new_account_pan

    @property
    def token_unique_reference(self):
        """Gets the token_unique_reference of this TokenUpdateRequest.

        Unique reference of the token to be updated. Conditional field, used for updating a single token and not used when CurrentAccountPan is present.

        :return: The token_unique_reference of this TokenUpdateRequest.
        :rtype: str
        """
        return self._token_unique_reference

    @token_unique_reference.setter
    def token_unique_reference(self, token_unique_reference):
        """Sets the token_unique_reference of this TokenUpdateRequest.

        Unique reference of the token to be updated. Conditional field, used for updating a single token and not used when CurrentAccountPan is present.

        :param token_unique_reference: The token_unique_reference of this TokenUpdateRequest.
        :type token_unique_reference: str
        """
        if token_unique_reference is not None and len(token_unique_reference) > 48:
            raise ValueError("Invalid value for `token_unique_reference`, length must be less than or equal to `48`")

        self._token_unique_reference = token_unique_reference

    @property
    def update_wallet_provider_indicator(self):
        """Gets the update_wallet_provider_indicator of this TokenUpdateRequest.

        Indicates whether the updated token information should be provided to the Wallet Provider. Valid values:<br />    \"0\" - Pass the updated information to the Wallet Provider<br />    \"1\" - Do not pass the updated information to the Wallet Provider.<br />Optional parameter. The default is 1 if not present.

        :return: The update_wallet_provider_indicator of this TokenUpdateRequest.
        :rtype: str
        """
        return self._update_wallet_provider_indicator

    @update_wallet_provider_indicator.setter
    def update_wallet_provider_indicator(self, update_wallet_provider_indicator):
        """Sets the update_wallet_provider_indicator of this TokenUpdateRequest.

        Indicates whether the updated token information should be provided to the Wallet Provider. Valid values:<br />    \"0\" - Pass the updated information to the Wallet Provider<br />    \"1\" - Do not pass the updated information to the Wallet Provider.<br />Optional parameter. The default is 1 if not present.

        :param update_wallet_provider_indicator: The update_wallet_provider_indicator of this TokenUpdateRequest.
        :type update_wallet_provider_indicator: str
        """
        if update_wallet_provider_indicator is not None and len(update_wallet_provider_indicator) > 1:
            raise ValueError("Invalid value for `update_wallet_provider_indicator`, length must be less than or equal to `1`")

        self._update_wallet_provider_indicator = update_wallet_provider_indicator
