# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActivationMethod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation_method_id: str=None, activation_method_type: str=None, activation_method_value: str=None, resend_indicator: str=None):
        """ActivationMethod - a model defined in OpenAPI

        :param activation_method_id: The activation_method_id of this ActivationMethod.
        :param activation_method_type: The activation_method_type of this ActivationMethod.
        :param activation_method_value: The activation_method_value of this ActivationMethod.
        :param resend_indicator: The resend_indicator of this ActivationMethod.
        """
        self.openapi_types = {
            'activation_method_id': str,
            'activation_method_type': str,
            'activation_method_value': str,
            'resend_indicator': str
        }

        self.attribute_map = {
            'activation_method_id': 'ActivationMethodId',
            'activation_method_type': 'ActivationMethodType',
            'activation_method_value': 'ActivationMethodValue',
            'resend_indicator': 'ResendIndicator'
        }

        self._activation_method_id = activation_method_id
        self._activation_method_type = activation_method_type
        self._activation_method_value = activation_method_value
        self._resend_indicator = resend_indicator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivationMethod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivationMethod of this ActivationMethod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation_method_id(self):
        """Gets the activation_method_id of this ActivationMethod.

        Unique identifier of the activation method.

        :return: The activation_method_id of this ActivationMethod.
        :rtype: str
        """
        return self._activation_method_id

    @activation_method_id.setter
    def activation_method_id(self, activation_method_id):
        """Sets the activation_method_id of this ActivationMethod.

        Unique identifier of the activation method.

        :param activation_method_id: The activation_method_id of this ActivationMethod.
        :type activation_method_id: str
        """
        if activation_method_id is not None and len(activation_method_id) > 0:
            raise ValueError("Invalid value for `activation_method_id`, length must be less than or equal to `0`")

        self._activation_method_id = activation_method_id

    @property
    def activation_method_type(self):
        """Gets the activation_method_type of this ActivationMethod.

        Type of activation method. Valid values:<br />    \"SMS\" ? Activation code sent in text message to masked mobile phone number<br />    \"EMA\" ? Activation code sent in email to masked email address<br />    \"ACC\" ? Cardholder to call automated call center phone number<br />    \"CLC\" ? Cardholder to call Call Center phone number<br />    \"WEB\" ? Website<br />    \"BAP\" ? Mobile application<br />    \"OBC\" ? Activation code spoken via call to cardholder on masked voice call phone number.

        :return: The activation_method_type of this ActivationMethod.
        :rtype: str
        """
        return self._activation_method_type

    @activation_method_type.setter
    def activation_method_type(self, activation_method_type):
        """Sets the activation_method_type of this ActivationMethod.

        Type of activation method. Valid values:<br />    \"SMS\" ? Activation code sent in text message to masked mobile phone number<br />    \"EMA\" ? Activation code sent in email to masked email address<br />    \"ACC\" ? Cardholder to call automated call center phone number<br />    \"CLC\" ? Cardholder to call Call Center phone number<br />    \"WEB\" ? Website<br />    \"BAP\" ? Mobile application<br />    \"OBC\" ? Activation code spoken via call to cardholder on masked voice call phone number.

        :param activation_method_type: The activation_method_type of this ActivationMethod.
        :type activation_method_type: str
        """
        if activation_method_type is not None and len(activation_method_type) > 3:
            raise ValueError("Invalid value for `activation_method_type`, length must be less than or equal to `3`")

        self._activation_method_type = activation_method_type

    @property
    def activation_method_value(self):
        """Gets the activation_method_value of this ActivationMethod.

        Activation method details value.

        :return: The activation_method_value of this ActivationMethod.
        :rtype: str
        """
        return self._activation_method_value

    @activation_method_value.setter
    def activation_method_value(self, activation_method_value):
        """Sets the activation_method_value of this ActivationMethod.

        Activation method details value.

        :param activation_method_value: The activation_method_value of this ActivationMethod.
        :type activation_method_value: str
        """
        if activation_method_value is not None and len(activation_method_value) > 0:
            raise ValueError("Invalid value for `activation_method_value`, length must be less than or equal to `0`")

        self._activation_method_value = activation_method_value

    @property
    def resend_indicator(self):
        """Gets the resend_indicator of this ActivationMethod.

        Whether the activation method can be used to re-send an activation code. Valid values are TRUE and FALSE.

        :return: The resend_indicator of this ActivationMethod.
        :rtype: str
        """
        return self._resend_indicator

    @resend_indicator.setter
    def resend_indicator(self, resend_indicator):
        """Sets the resend_indicator of this ActivationMethod.

        Whether the activation method can be used to re-send an activation code. Valid values are TRUE and FALSE.

        :param resend_indicator: The resend_indicator of this ActivationMethod.
        :type resend_indicator: str
        """
        if resend_indicator is not None and len(resend_indicator) > 5:
            raise ValueError("Invalid value for `resend_indicator`, length must be less than or equal to `5`")
        if resend_indicator is not None and len(resend_indicator) < 4:
            raise ValueError("Invalid value for `resend_indicator`, length must be greater than or equal to `4`")

        self._resend_indicator = resend_indicator
