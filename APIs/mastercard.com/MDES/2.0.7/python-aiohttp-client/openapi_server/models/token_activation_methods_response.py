# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.activation_methods import ActivationMethods
from openapi_server import util


class TokenActivationMethodsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation_methods: ActivationMethods=None):
        """TokenActivationMethodsResponse - a model defined in OpenAPI

        :param activation_methods: The activation_methods of this TokenActivationMethodsResponse.
        """
        self.openapi_types = {
            'activation_methods': ActivationMethods
        }

        self.attribute_map = {
            'activation_methods': 'ActivationMethods'
        }

        self._activation_methods = activation_methods

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TokenActivationMethodsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TokenActivationMethodsResponse of this TokenActivationMethodsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation_methods(self):
        """Gets the activation_methods of this TokenActivationMethodsResponse.


        :return: The activation_methods of this TokenActivationMethodsResponse.
        :rtype: ActivationMethods
        """
        return self._activation_methods

    @activation_methods.setter
    def activation_methods(self, activation_methods):
        """Sets the activation_methods of this TokenActivationMethodsResponse.


        :param activation_methods: The activation_methods of this TokenActivationMethodsResponse.
        :type activation_methods: ActivationMethods
        """

        self._activation_methods = activation_methods
