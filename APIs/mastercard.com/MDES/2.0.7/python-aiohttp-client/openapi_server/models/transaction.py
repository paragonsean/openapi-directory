# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Transaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_code: str=None, merchant_category_code: str=None, merchant_category_description: str=None, merchant_name: str=None, pos_entry_mode: str=None, transaction_amount: str=None, transaction_date_time: str=None, transaction_status_code: str=None, transaction_type_code: str=None, transaction_type_description: str=None):
        """Transaction - a model defined in OpenAPI

        :param currency_code: The currency_code of this Transaction.
        :param merchant_category_code: The merchant_category_code of this Transaction.
        :param merchant_category_description: The merchant_category_description of this Transaction.
        :param merchant_name: The merchant_name of this Transaction.
        :param pos_entry_mode: The pos_entry_mode of this Transaction.
        :param transaction_amount: The transaction_amount of this Transaction.
        :param transaction_date_time: The transaction_date_time of this Transaction.
        :param transaction_status_code: The transaction_status_code of this Transaction.
        :param transaction_type_code: The transaction_type_code of this Transaction.
        :param transaction_type_description: The transaction_type_description of this Transaction.
        """
        self.openapi_types = {
            'currency_code': str,
            'merchant_category_code': str,
            'merchant_category_description': str,
            'merchant_name': str,
            'pos_entry_mode': str,
            'transaction_amount': str,
            'transaction_date_time': str,
            'transaction_status_code': str,
            'transaction_type_code': str,
            'transaction_type_description': str
        }

        self.attribute_map = {
            'currency_code': 'CurrencyCode',
            'merchant_category_code': 'MerchantCategoryCode',
            'merchant_category_description': 'MerchantCategoryDescription',
            'merchant_name': 'MerchantName',
            'pos_entry_mode': 'POSEntryMode',
            'transaction_amount': 'TransactionAmount',
            'transaction_date_time': 'TransactionDateTime',
            'transaction_status_code': 'TransactionStatusCode',
            'transaction_type_code': 'TransactionTypeCode',
            'transaction_type_description': 'TransactionTypeDescription'
        }

        self._currency_code = currency_code
        self._merchant_category_code = merchant_category_code
        self._merchant_category_description = merchant_category_description
        self._merchant_name = merchant_name
        self._pos_entry_mode = pos_entry_mode
        self._transaction_amount = transaction_amount
        self._transaction_date_time = transaction_date_time
        self._transaction_status_code = transaction_status_code
        self._transaction_type_code = transaction_type_code
        self._transaction_type_description = transaction_type_description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transaction of this Transaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_code(self):
        """Gets the currency_code of this Transaction.

        ISO-4217 currency code (3-letter alphabetic currency code).

        :return: The currency_code of this Transaction.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Transaction.

        ISO-4217 currency code (3-letter alphabetic currency code).

        :param currency_code: The currency_code of this Transaction.
        :type currency_code: str
        """
        if currency_code is not None and len(currency_code) > 3:
            raise ValueError("Invalid value for `currency_code`, length must be less than or equal to `3`")

        self._currency_code = currency_code

    @property
    def merchant_category_code(self):
        """Gets the merchant_category_code of this Transaction.

        Merchant category of the merchant. Conditional field. When available, it must be included in the response.

        :return: The merchant_category_code of this Transaction.
        :rtype: str
        """
        return self._merchant_category_code

    @merchant_category_code.setter
    def merchant_category_code(self, merchant_category_code):
        """Sets the merchant_category_code of this Transaction.

        Merchant category of the merchant. Conditional field. When available, it must be included in the response.

        :param merchant_category_code: The merchant_category_code of this Transaction.
        :type merchant_category_code: str
        """
        if merchant_category_code is not None and len(merchant_category_code) > 0:
            raise ValueError("Invalid value for `merchant_category_code`, length must be less than or equal to `0`")

        self._merchant_category_code = merchant_category_code

    @property
    def merchant_category_description(self):
        """Gets the merchant_category_description of this Transaction.

        Description of the merchant category.

        :return: The merchant_category_description of this Transaction.
        :rtype: str
        """
        return self._merchant_category_description

    @merchant_category_description.setter
    def merchant_category_description(self, merchant_category_description):
        """Sets the merchant_category_description of this Transaction.

        Description of the merchant category.

        :param merchant_category_description: The merchant_category_description of this Transaction.
        :type merchant_category_description: str
        """
        if merchant_category_description is not None and len(merchant_category_description) > 0:
            raise ValueError("Invalid value for `merchant_category_description`, length must be less than or equal to `0`")

        self._merchant_category_description = merchant_category_description

    @property
    def merchant_name(self):
        """Gets the merchant_name of this Transaction.

        Name of the merchant. Conditional field. When available, it must be included in the response.

        :return: The merchant_name of this Transaction.
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """Sets the merchant_name of this Transaction.

        Name of the merchant. Conditional field. When available, it must be included in the response.

        :param merchant_name: The merchant_name of this Transaction.
        :type merchant_name: str
        """
        if merchant_name is not None and len(merchant_name) > 0:
            raise ValueError("Invalid value for `merchant_name`, length must be less than or equal to `0`")

        self._merchant_name = merchant_name

    @property
    def pos_entry_mode(self):
        """Gets the pos_entry_mode of this Transaction.

        Indicates the mode by which transaction data was collected at the merchant. Conditional field. When available, it must be included in the response.  Valid values:<br />    \"07\" - Contactless M/Chip transaction<br />    \"09\" - Digital Secure Remote Payment containing EMV data<br />    \"81\" - Digital Secure Remote Payment containing UCAF data or CoF<br />    \"82\" - CoF - PAN auto entry via server<br />    \"90\" - Dynamic Magnetic Strip Data<br />    \"91\" - Contactless magnetic stripe

        :return: The pos_entry_mode of this Transaction.
        :rtype: str
        """
        return self._pos_entry_mode

    @pos_entry_mode.setter
    def pos_entry_mode(self, pos_entry_mode):
        """Sets the pos_entry_mode of this Transaction.

        Indicates the mode by which transaction data was collected at the merchant. Conditional field. When available, it must be included in the response.  Valid values:<br />    \"07\" - Contactless M/Chip transaction<br />    \"09\" - Digital Secure Remote Payment containing EMV data<br />    \"81\" - Digital Secure Remote Payment containing UCAF data or CoF<br />    \"82\" - CoF - PAN auto entry via server<br />    \"90\" - Dynamic Magnetic Strip Data<br />    \"91\" - Contactless magnetic stripe

        :param pos_entry_mode: The pos_entry_mode of this Transaction.
        :type pos_entry_mode: str
        """
        if pos_entry_mode is not None and len(pos_entry_mode) > 2:
            raise ValueError("Invalid value for `pos_entry_mode`, length must be less than or equal to `2`")

        self._pos_entry_mode = pos_entry_mode

    @property
    def transaction_amount(self):
        """Gets the transaction_amount of this Transaction.

        Amount of the transaction formatted with decimal places.

        :return: The transaction_amount of this Transaction.
        :rtype: str
        """
        return self._transaction_amount

    @transaction_amount.setter
    def transaction_amount(self, transaction_amount):
        """Sets the transaction_amount of this Transaction.

        Amount of the transaction formatted with decimal places.

        :param transaction_amount: The transaction_amount of this Transaction.
        :type transaction_amount: str
        """
        if transaction_amount is not None and len(transaction_amount) > 0:
            raise ValueError("Invalid value for `transaction_amount`, length must be less than or equal to `0`")

        self._transaction_amount = transaction_amount

    @property
    def transaction_date_time(self):
        """Gets the transaction_date_time of this Transaction.

        Date and time the comment was updated. String, YYYY-MM-DDThh:mm:ssTZD.

        :return: The transaction_date_time of this Transaction.
        :rtype: str
        """
        return self._transaction_date_time

    @transaction_date_time.setter
    def transaction_date_time(self, transaction_date_time):
        """Sets the transaction_date_time of this Transaction.

        Date and time the comment was updated. String, YYYY-MM-DDThh:mm:ssTZD.

        :param transaction_date_time: The transaction_date_time of this Transaction.
        :type transaction_date_time: str
        """

        self._transaction_date_time = transaction_date_time

    @property
    def transaction_status_code(self):
        """Gets the transaction_status_code of this Transaction.

        Transaction status. Valid values:<br />    \"AUTH\" = Authorized<br />    \"COMP\" = Completed<br />    \"DCLN\" = Declined<br />    \"PAUTH\" = Pre-Authorized<br />    \"PAUTC\" = Pre-Authorization Completed<br />    \"PAUTD\" = Pre-Authorization Declined<br />    \"REFND\" = Refunded

        :return: The transaction_status_code of this Transaction.
        :rtype: str
        """
        return self._transaction_status_code

    @transaction_status_code.setter
    def transaction_status_code(self, transaction_status_code):
        """Sets the transaction_status_code of this Transaction.

        Transaction status. Valid values:<br />    \"AUTH\" = Authorized<br />    \"COMP\" = Completed<br />    \"DCLN\" = Declined<br />    \"PAUTH\" = Pre-Authorized<br />    \"PAUTC\" = Pre-Authorization Completed<br />    \"PAUTD\" = Pre-Authorization Declined<br />    \"REFND\" = Refunded

        :param transaction_status_code: The transaction_status_code of this Transaction.
        :type transaction_status_code: str
        """
        if transaction_status_code is not None and len(transaction_status_code) > 0:
            raise ValueError("Invalid value for `transaction_status_code`, length must be less than or equal to `0`")

        self._transaction_status_code = transaction_status_code

    @property
    def transaction_type_code(self):
        """Gets the transaction_type_code of this Transaction.

        Type of transaction. Valid values:<br />    \"PURCH\" = Purchase<br />    \"PURCB\" = Purchase with Cashback<br />    \"REFND\" = Refund<br />    \"AFD\" = Purchase Pre-Auth AFD<br />    \"CLRRF\" = Clearing Refund<br />    \"NAFD\" = Purchase Pre-Auth Non-AFD<br />    \"PYMT\" = Push Payments.

        :return: The transaction_type_code of this Transaction.
        :rtype: str
        """
        return self._transaction_type_code

    @transaction_type_code.setter
    def transaction_type_code(self, transaction_type_code):
        """Sets the transaction_type_code of this Transaction.

        Type of transaction. Valid values:<br />    \"PURCH\" = Purchase<br />    \"PURCB\" = Purchase with Cashback<br />    \"REFND\" = Refund<br />    \"AFD\" = Purchase Pre-Auth AFD<br />    \"CLRRF\" = Clearing Refund<br />    \"NAFD\" = Purchase Pre-Auth Non-AFD<br />    \"PYMT\" = Push Payments.

        :param transaction_type_code: The transaction_type_code of this Transaction.
        :type transaction_type_code: str
        """
        if transaction_type_code is not None and len(transaction_type_code) > 0:
            raise ValueError("Invalid value for `transaction_type_code`, length must be less than or equal to `0`")

        self._transaction_type_code = transaction_type_code

    @property
    def transaction_type_description(self):
        """Gets the transaction_type_description of this Transaction.

        Description of the transaction type.

        :return: The transaction_type_description of this Transaction.
        :rtype: str
        """
        return self._transaction_type_description

    @transaction_type_description.setter
    def transaction_type_description(self, transaction_type_description):
        """Sets the transaction_type_description of this Transaction.

        Description of the transaction type.

        :param transaction_type_description: The transaction_type_description of this Transaction.
        :type transaction_type_description: str
        """
        if transaction_type_description is not None and len(transaction_type_description) > 0:
            raise ValueError("Invalid value for `transaction_type_description`, length must be less than or equal to `0`")

        self._transaction_type_description = transaction_type_description
