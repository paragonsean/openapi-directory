# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuditInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, organization: str=None, phone: str=None, user_id: str=None, user_name: str=None):
        """AuditInfo - a model defined in OpenAPI

        :param organization: The organization of this AuditInfo.
        :param phone: The phone of this AuditInfo.
        :param user_id: The user_id of this AuditInfo.
        :param user_name: The user_name of this AuditInfo.
        """
        self.openapi_types = {
            'organization': str,
            'phone': str,
            'user_id': str,
            'user_name': str
        }

        self.attribute_map = {
            'organization': 'Organization',
            'phone': 'Phone',
            'user_id': 'UserId',
            'user_name': 'UserName'
        }

        self._organization = organization
        self._phone = phone
        self._user_id = user_id
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuditInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuditInfo of this AuditInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def organization(self):
        """Gets the organization of this AuditInfo.

        Name of the Issuer or Processor to which the Customer Service Representative who triggered the API request belongs.

        :return: The organization of this AuditInfo.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this AuditInfo.

        Name of the Issuer or Processor to which the Customer Service Representative who triggered the API request belongs.

        :param organization: The organization of this AuditInfo.
        :type organization: str
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")
        if organization is not None and len(organization) > 200:
            raise ValueError("Invalid value for `organization`, length must be less than or equal to `200`")

        self._organization = organization

    @property
    def phone(self):
        """Gets the phone of this AuditInfo.

        Phone Number of the Customer Service Representative who triggered the API request.

        :return: The phone of this AuditInfo.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this AuditInfo.

        Phone Number of the Customer Service Representative who triggered the API request.

        :param phone: The phone of this AuditInfo.
        :type phone: str
        """
        if phone is not None and len(phone) > 20:
            raise ValueError("Invalid value for `phone`, length must be less than or equal to `20`")

        self._phone = phone

    @property
    def user_id(self):
        """Gets the user_id of this AuditInfo.

        User ID (as assigned by the Issuer/Processor) of the Customer Service Representative who triggered the API request.

        :return: The user_id of this AuditInfo.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AuditInfo.

        User ID (as assigned by the Issuer/Processor) of the Customer Service Representative who triggered the API request.

        :param user_id: The user_id of this AuditInfo.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")
        if user_id is not None and len(user_id) > 50:
            raise ValueError("Invalid value for `user_id`, length must be less than or equal to `50`")

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this AuditInfo.

        User Name of the Customer Service Representative who triggered the API request.

        :return: The user_name of this AuditInfo.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this AuditInfo.

        User Name of the Customer Service Representative who triggered the API request.

        :param user_name: The user_name of this AuditInfo.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")
        if user_name is not None and len(user_name) > 200:
            raise ValueError("Invalid value for `user_name`, length must be less than or equal to `200`")

        self._user_name = user_name
