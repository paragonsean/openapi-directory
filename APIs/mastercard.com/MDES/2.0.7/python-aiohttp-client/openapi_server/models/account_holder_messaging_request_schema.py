# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audit_info import AuditInfo
from openapi_server import util


class AccountHolderMessagingRequestSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audit_info: AuditInfo=None, issuer_application_message_display: str=None, message_expiration: str=None, message_identifier: str=None, message_language_code: str=None, message_text: str=None, token_unique_reference: str=None):
        """AccountHolderMessagingRequestSchema - a model defined in OpenAPI

        :param audit_info: The audit_info of this AccountHolderMessagingRequestSchema.
        :param issuer_application_message_display: The issuer_application_message_display of this AccountHolderMessagingRequestSchema.
        :param message_expiration: The message_expiration of this AccountHolderMessagingRequestSchema.
        :param message_identifier: The message_identifier of this AccountHolderMessagingRequestSchema.
        :param message_language_code: The message_language_code of this AccountHolderMessagingRequestSchema.
        :param message_text: The message_text of this AccountHolderMessagingRequestSchema.
        :param token_unique_reference: The token_unique_reference of this AccountHolderMessagingRequestSchema.
        """
        self.openapi_types = {
            'audit_info': AuditInfo,
            'issuer_application_message_display': str,
            'message_expiration': str,
            'message_identifier': str,
            'message_language_code': str,
            'message_text': str,
            'token_unique_reference': str
        }

        self.attribute_map = {
            'audit_info': 'AuditInfo',
            'issuer_application_message_display': 'IssuerApplicationMessageDisplay',
            'message_expiration': 'MessageExpiration',
            'message_identifier': 'MessageIdentifier',
            'message_language_code': 'MessageLanguageCode',
            'message_text': 'MessageText',
            'token_unique_reference': 'TokenUniqueReference'
        }

        self._audit_info = audit_info
        self._issuer_application_message_display = issuer_application_message_display
        self._message_expiration = message_expiration
        self._message_identifier = message_identifier
        self._message_language_code = message_language_code
        self._message_text = message_text
        self._token_unique_reference = token_unique_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountHolderMessagingRequestSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountHolderMessagingRequestSchema of this AccountHolderMessagingRequestSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audit_info(self):
        """Gets the audit_info of this AccountHolderMessagingRequestSchema.


        :return: The audit_info of this AccountHolderMessagingRequestSchema.
        :rtype: AuditInfo
        """
        return self._audit_info

    @audit_info.setter
    def audit_info(self, audit_info):
        """Sets the audit_info of this AccountHolderMessagingRequestSchema.


        :param audit_info: The audit_info of this AccountHolderMessagingRequestSchema.
        :type audit_info: AuditInfo
        """
        if audit_info is None:
            raise ValueError("Invalid value for `audit_info`, must not be `None`")

        self._audit_info = audit_info

    @property
    def issuer_application_message_display(self):
        """Gets the issuer_application_message_display of this AccountHolderMessagingRequestSchema.

        This is the indicator if the message can be viewed in the Issuer Application using the MessageIdentifier. <br>Please refer to the Apple Card Notification Specification for Notification Deep Linking. Mandatory field.  Valid values are;<br>TRUE ? The message can be viewed in the issuer application<br>FALSE ? The message cannot be viewed in the issuer application.

        :return: The issuer_application_message_display of this AccountHolderMessagingRequestSchema.
        :rtype: str
        """
        return self._issuer_application_message_display

    @issuer_application_message_display.setter
    def issuer_application_message_display(self, issuer_application_message_display):
        """Sets the issuer_application_message_display of this AccountHolderMessagingRequestSchema.

        This is the indicator if the message can be viewed in the Issuer Application using the MessageIdentifier. <br>Please refer to the Apple Card Notification Specification for Notification Deep Linking. Mandatory field.  Valid values are;<br>TRUE ? The message can be viewed in the issuer application<br>FALSE ? The message cannot be viewed in the issuer application.

        :param issuer_application_message_display: The issuer_application_message_display of this AccountHolderMessagingRequestSchema.
        :type issuer_application_message_display: str
        """
        if issuer_application_message_display is None:
            raise ValueError("Invalid value for `issuer_application_message_display`, must not be `None`")
        if issuer_application_message_display is not None and len(issuer_application_message_display) > 5:
            raise ValueError("Invalid value for `issuer_application_message_display`, length must be less than or equal to `5`")
        if issuer_application_message_display is not None and len(issuer_application_message_display) < 4:
            raise ValueError("Invalid value for `issuer_application_message_display`, length must be greater than or equal to `4`")

        self._issuer_application_message_display = issuer_application_message_display

    @property
    def message_expiration(self):
        """Gets the message_expiration of this AccountHolderMessagingRequestSchema.

        Date and time after which the message is no longer valid.  Maximum value of 30 days in the future. Mandatory field.  __ISO 8601 format ? YYYY-MM-DDThh:mm:ssTZD__

        :return: The message_expiration of this AccountHolderMessagingRequestSchema.
        :rtype: str
        """
        return self._message_expiration

    @message_expiration.setter
    def message_expiration(self, message_expiration):
        """Sets the message_expiration of this AccountHolderMessagingRequestSchema.

        Date and time after which the message is no longer valid.  Maximum value of 30 days in the future. Mandatory field.  __ISO 8601 format ? YYYY-MM-DDThh:mm:ssTZD__

        :param message_expiration: The message_expiration of this AccountHolderMessagingRequestSchema.
        :type message_expiration: str
        """
        if message_expiration is None:
            raise ValueError("Invalid value for `message_expiration`, must not be `None`")

        self._message_expiration = message_expiration

    @property
    def message_identifier(self):
        """Gets the message_identifier of this AccountHolderMessagingRequestSchema.

        This is the message identifier. This could be used for linking into the issuer application. Mandatory field.

        :return: The message_identifier of this AccountHolderMessagingRequestSchema.
        :rtype: str
        """
        return self._message_identifier

    @message_identifier.setter
    def message_identifier(self, message_identifier):
        """Sets the message_identifier of this AccountHolderMessagingRequestSchema.

        This is the message identifier. This could be used for linking into the issuer application. Mandatory field.

        :param message_identifier: The message_identifier of this AccountHolderMessagingRequestSchema.
        :type message_identifier: str
        """
        if message_identifier is None:
            raise ValueError("Invalid value for `message_identifier`, must not be `None`")
        if message_identifier is not None and len(message_identifier) > 64:
            raise ValueError("Invalid value for `message_identifier`, length must be less than or equal to `64`")

        self._message_identifier = message_identifier

    @property
    def message_language_code(self):
        """Gets the message_language_code of this AccountHolderMessagingRequestSchema.

        The language of the message.  Only messages with the requested language code will be presented to the account holder. Mandatory field.  <br>__ISO 639-1 format__

        :return: The message_language_code of this AccountHolderMessagingRequestSchema.
        :rtype: str
        """
        return self._message_language_code

    @message_language_code.setter
    def message_language_code(self, message_language_code):
        """Sets the message_language_code of this AccountHolderMessagingRequestSchema.

        The language of the message.  Only messages with the requested language code will be presented to the account holder. Mandatory field.  <br>__ISO 639-1 format__

        :param message_language_code: The message_language_code of this AccountHolderMessagingRequestSchema.
        :type message_language_code: str
        """
        if message_language_code is None:
            raise ValueError("Invalid value for `message_language_code`, must not be `None`")
        if message_language_code is not None and len(message_language_code) > 3:
            raise ValueError("Invalid value for `message_language_code`, length must be less than or equal to `3`")

        self._message_language_code = message_language_code

    @property
    def message_text(self):
        """Gets the message_text of this AccountHolderMessagingRequestSchema.

        This is the message which will be displayed to the cardholder. Mandatory field.

        :return: The message_text of this AccountHolderMessagingRequestSchema.
        :rtype: str
        """
        return self._message_text

    @message_text.setter
    def message_text(self, message_text):
        """Sets the message_text of this AccountHolderMessagingRequestSchema.

        This is the message which will be displayed to the cardholder. Mandatory field.

        :param message_text: The message_text of this AccountHolderMessagingRequestSchema.
        :type message_text: str
        """
        if message_text is None:
            raise ValueError("Invalid value for `message_text`, must not be `None`")
        if message_text is not None and len(message_text) > 128:
            raise ValueError("Invalid value for `message_text`, length must be less than or equal to `128`")

        self._message_text = message_text

    @property
    def token_unique_reference(self):
        """Gets the token_unique_reference of this AccountHolderMessagingRequestSchema.

        When present, the search will return one specific matching token. Cannot be used together with any of the following search request parameters; AccountPan, Token, PaymentAppInstanceId, CommentId, or AlternateAccountIdentifier. Mandatory field.

        :return: The token_unique_reference of this AccountHolderMessagingRequestSchema.
        :rtype: str
        """
        return self._token_unique_reference

    @token_unique_reference.setter
    def token_unique_reference(self, token_unique_reference):
        """Sets the token_unique_reference of this AccountHolderMessagingRequestSchema.

        When present, the search will return one specific matching token. Cannot be used together with any of the following search request parameters; AccountPan, Token, PaymentAppInstanceId, CommentId, or AlternateAccountIdentifier. Mandatory field.

        :param token_unique_reference: The token_unique_reference of this AccountHolderMessagingRequestSchema.
        :type token_unique_reference: str
        """
        if token_unique_reference is None:
            raise ValueError("Invalid value for `token_unique_reference`, must not be `None`")
        if token_unique_reference is not None and len(token_unique_reference) > 48:
            raise ValueError("Invalid value for `token_unique_reference`, length must be less than or equal to `48`")

        self._token_unique_reference = token_unique_reference
