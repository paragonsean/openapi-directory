# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audit_info import AuditInfo
from openapi_server import util


class Status(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audit_info: AuditInfo=None, comment_id: str=None, initiator: str=None, reason_code: str=None, status_code: str=None, status_date_time: str=None, status_description: str=None):
        """Status - a model defined in OpenAPI

        :param audit_info: The audit_info of this Status.
        :param comment_id: The comment_id of this Status.
        :param initiator: The initiator of this Status.
        :param reason_code: The reason_code of this Status.
        :param status_code: The status_code of this Status.
        :param status_date_time: The status_date_time of this Status.
        :param status_description: The status_description of this Status.
        """
        self.openapi_types = {
            'audit_info': AuditInfo,
            'comment_id': str,
            'initiator': str,
            'reason_code': str,
            'status_code': str,
            'status_date_time': str,
            'status_description': str
        }

        self.attribute_map = {
            'audit_info': 'AuditInfo',
            'comment_id': 'CommentId',
            'initiator': 'Initiator',
            'reason_code': 'ReasonCode',
            'status_code': 'StatusCode',
            'status_date_time': 'StatusDateTime',
            'status_description': 'StatusDescription'
        }

        self._audit_info = audit_info
        self._comment_id = comment_id
        self._initiator = initiator
        self._reason_code = reason_code
        self._status_code = status_code
        self._status_date_time = status_date_time
        self._status_description = status_description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Status':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Status of this Status.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audit_info(self):
        """Gets the audit_info of this Status.


        :return: The audit_info of this Status.
        :rtype: AuditInfo
        """
        return self._audit_info

    @audit_info.setter
    def audit_info(self, audit_info):
        """Sets the audit_info of this Status.


        :param audit_info: The audit_info of this Status.
        :type audit_info: AuditInfo
        """

        self._audit_info = audit_info

    @property
    def comment_id(self):
        """Gets the comment_id of this Status.

        Identifier of the comment added.  Conditional field, only present when comment text was provided in the request.

        :return: The comment_id of this Status.
        :rtype: str
        """
        return self._comment_id

    @comment_id.setter
    def comment_id(self, comment_id):
        """Sets the comment_id of this Status.

        Identifier of the comment added.  Conditional field, only present when comment text was provided in the request.

        :param comment_id: The comment_id of this Status.
        :type comment_id: str
        """
        if comment_id is not None and len(comment_id) > 0:
            raise ValueError("Invalid value for `comment_id`, length must be less than or equal to `0`")

        self._comment_id = comment_id

    @property
    def initiator(self):
        """Gets the initiator of this Status.

        Party that initiated the status update. Valid values:<br />    \"I\" - Issuer.<br />    \"W\" - Token Requestor (including Wallet Provider).<br />    \"C\" - Cardholder.<br />    \"P\" - Mobile PIN Validation service.<br />    \"M\" - Mobile PIN Change Validation service.

        :return: The initiator of this Status.
        :rtype: str
        """
        return self._initiator

    @initiator.setter
    def initiator(self, initiator):
        """Sets the initiator of this Status.

        Party that initiated the status update. Valid values:<br />    \"I\" - Issuer.<br />    \"W\" - Token Requestor (including Wallet Provider).<br />    \"C\" - Cardholder.<br />    \"P\" - Mobile PIN Validation service.<br />    \"M\" - Mobile PIN Change Validation service.

        :param initiator: The initiator of this Status.
        :type initiator: str
        """
        if initiator is not None and len(initiator) > 1:
            raise ValueError("Invalid value for `initiator`, length must be less than or equal to `1`")

        self._initiator = initiator

    @property
    def reason_code(self):
        """Gets the reason_code of this Status.

        Reason for the status update.  Valid values:<br />    \"A\" ? Cardholder successfully authenticated using a mobile App prior to activation.<br />    \"C\" ? Cardholder successfully authenticated with a customer service agent prior to activation. (For 'Token Activate').<br />    \"C\" ? Account closed. (For 'Token Delete').<br />    \"F\" ? Cardholder reported token device found or not stolen.<br />    \"L\" ? Cardholder reported/confirmed token device lost.<br />    \"S\" ? Cardholder reported/confirmed token device stolen.<br />    \"T\" ? Issuer or cardholder reported fraudulent/then confirmed no fraudulent token transactions.<br />    \"Z\" ? Other.

        :return: The reason_code of this Status.
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this Status.

        Reason for the status update.  Valid values:<br />    \"A\" ? Cardholder successfully authenticated using a mobile App prior to activation.<br />    \"C\" ? Cardholder successfully authenticated with a customer service agent prior to activation. (For 'Token Activate').<br />    \"C\" ? Account closed. (For 'Token Delete').<br />    \"F\" ? Cardholder reported token device found or not stolen.<br />    \"L\" ? Cardholder reported/confirmed token device lost.<br />    \"S\" ? Cardholder reported/confirmed token device stolen.<br />    \"T\" ? Issuer or cardholder reported fraudulent/then confirmed no fraudulent token transactions.<br />    \"Z\" ? Other.

        :param reason_code: The reason_code of this Status.
        :type reason_code: str
        """
        if reason_code is not None and len(reason_code) > 1:
            raise ValueError("Invalid value for `reason_code`, length must be less than or equal to `1`")

        self._reason_code = reason_code

    @property
    def status_code(self):
        """Gets the status_code of this Status.

        The status of the Token. Valid values:<br />    \"U\" - Unmapped. The token has not yet been linked to the Account PAN. The process of tokenization is ?In Progress?.<br />    \"A\" - Active. The token is linked to the Account PAN and may initiate new transactions to be authorized.<br />    \"S\" - Suspended. The token is linked to the Account PAN but may not perform transactions at the request of one or more suspenders.<br />    \"D\" - Deleted. The token is logically deleted but is still linked to the Account PAN for the purposes of post-authorization transaction processing.

        :return: The status_code of this Status.
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this Status.

        The status of the Token. Valid values:<br />    \"U\" - Unmapped. The token has not yet been linked to the Account PAN. The process of tokenization is ?In Progress?.<br />    \"A\" - Active. The token is linked to the Account PAN and may initiate new transactions to be authorized.<br />    \"S\" - Suspended. The token is linked to the Account PAN but may not perform transactions at the request of one or more suspenders.<br />    \"D\" - Deleted. The token is logically deleted but is still linked to the Account PAN for the purposes of post-authorization transaction processing.

        :param status_code: The status_code of this Status.
        :type status_code: str
        """
        if status_code is not None and len(status_code) > 1:
            raise ValueError("Invalid value for `status_code`, length must be less than or equal to `1`")

        self._status_code = status_code

    @property
    def status_date_time(self):
        """Gets the status_date_time of this Status.

        Date and time the status was updated. String, ISO 8691 format - YYYY-MM-DDThh:mm:ssTZD .

        :return: The status_date_time of this Status.
        :rtype: str
        """
        return self._status_date_time

    @status_date_time.setter
    def status_date_time(self, status_date_time):
        """Sets the status_date_time of this Status.

        Date and time the status was updated. String, ISO 8691 format - YYYY-MM-DDThh:mm:ssTZD .

        :param status_date_time: The status_date_time of this Status.
        :type status_date_time: str
        """

        self._status_date_time = status_date_time

    @property
    def status_description(self):
        """Gets the status_description of this Status.

        Description of the current status.

        :return: The status_description of this Status.
        :rtype: str
        """
        return self._status_description

    @status_description.setter
    def status_description(self, status_description):
        """Sets the status_description of this Status.

        Description of the current status.

        :param status_description: The status_description of this Status.
        :type status_description: str
        """
        if status_description is not None and len(status_description) > 0:
            raise ValueError("Invalid value for `status_description`, length must be less than or equal to `0`")

        self._status_description = status_description
