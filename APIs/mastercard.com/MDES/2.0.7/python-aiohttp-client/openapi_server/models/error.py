# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Error(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, error_code: str=None, reason_code: str=None, recoverable: str=None, source: str=None):
        """Error - a model defined in OpenAPI

        :param description: The description of this Error.
        :param error_code: The error_code of this Error.
        :param reason_code: The reason_code of this Error.
        :param recoverable: The recoverable of this Error.
        :param source: The source of this Error.
        """
        self.openapi_types = {
            'description': str,
            'error_code': str,
            'reason_code': str,
            'recoverable': str,
            'source': str
        }

        self.attribute_map = {
            'description': 'Description',
            'error_code': 'ErrorCode',
            'reason_code': 'ReasonCode',
            'recoverable': 'Recoverable',
            'source': 'Source'
        }

        self._description = description
        self._error_code = error_code
        self._reason_code = reason_code
        self._recoverable = recoverable
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Error of this Error.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Error.

        A textual description of the error that is appropriate for logging and may communicate additional details related to the reason code.

        :return: The description of this Error.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Error.

        A textual description of the error that is appropriate for logging and may communicate additional details related to the reason code.

        :param description: The description of this Error.
        :type description: str
        """

        self._description = description

    @property
    def error_code(self):
        """Gets the error_code of this Error.

        An identifier that represents additional detail for the reason of the error.

        :return: The error_code of this Error.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this Error.

        An identifier that represents additional detail for the reason of the error.

        :param error_code: The error_code of this Error.
        :type error_code: str
        """
        if error_code is not None and len(error_code) > 0:
            raise ValueError("Invalid value for `error_code`, length must be less than or equal to `0`")

        self._error_code = error_code

    @property
    def reason_code(self):
        """Gets the reason_code of this Error.

        Indicator that identifies the reason for the error.

        :return: The reason_code of this Error.
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this Error.

        Indicator that identifies the reason for the error.

        :param reason_code: The reason_code of this Error.
        :type reason_code: str
        """
        if reason_code is not None and len(reason_code) > 0:
            raise ValueError("Invalid value for `reason_code`, length must be less than or equal to `0`")

        self._reason_code = reason_code

    @property
    def recoverable(self):
        """Gets the recoverable of this Error.

        An indicator stating whether it is reasonable to retry a failed request.

        :return: The recoverable of this Error.
        :rtype: str
        """
        return self._recoverable

    @recoverable.setter
    def recoverable(self, recoverable):
        """Sets the recoverable of this Error.

        An indicator stating whether it is reasonable to retry a failed request.

        :param recoverable: The recoverable of this Error.
        :type recoverable: str
        """
        if recoverable is not None and len(recoverable) > 5:
            raise ValueError("Invalid value for `recoverable`, length must be less than or equal to `5`")
        if recoverable is not None and len(recoverable) < 4:
            raise ValueError("Invalid value for `recoverable`, length must be greater than or equal to `4`")

        self._recoverable = recoverable

    @property
    def source(self):
        """Gets the source of this Error.

        Unique identifier that attempts to define the field in error when available.  If a specific field can't be identified, \"System\" will be returned.

        :return: The source of this Error.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Error.

        Unique identifier that attempts to define the field in error when available.  If a specific field can't be identified, \"System\" will be returned.

        :param source: The source of this Error.
        :type source: str
        """
        if source is not None and len(source) > 0:
            raise ValueError("Invalid value for `source`, length must be less than or equal to `0`")

        self._source = source
