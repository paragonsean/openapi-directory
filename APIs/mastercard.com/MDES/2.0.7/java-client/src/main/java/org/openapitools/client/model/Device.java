/*
 * MDES Customer Service
 * This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.
 *
 * The version of the OpenAPI document: 2.0.7
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Device
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:16.587349-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Device {
  public static final String SERIALIZED_NAME_DEVICE_ID = "DeviceId";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private String deviceId;

  public static final String SERIALIZED_NAME_DEVICE_NAME = "DeviceName";
  @SerializedName(SERIALIZED_NAME_DEVICE_NAME)
  private String deviceName;

  public static final String SERIALIZED_NAME_DEVICE_TYPE = "DeviceType";
  @SerializedName(SERIALIZED_NAME_DEVICE_TYPE)
  private String deviceType;

  public static final String SERIALIZED_NAME_SECURE_ELEMENT_ID = "SecureElementId";
  @SerializedName(SERIALIZED_NAME_SECURE_ELEMENT_ID)
  private String secureElementId;

  public Device() {
  }

  public Device deviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * Serial number of the device provisioned with the token. May be masked. Conditional field, not present for CoF tokens, and only present when provided by a Wallet Provider. May be masked (by the Wallet Provider).&lt;br /&gt;Example (unmasked) \&quot;C2ZBY14310005664\&quot;. Example (masked) \&quot;xxxxY1431xxxxxxx\&quot;.
   * @return deviceId
   */
  @javax.annotation.Nullable
  public String getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(String deviceId) {
    this.deviceId = deviceId;
  }


  public Device deviceName(String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  /**
   * Nickname of the device provisioned with the token. Conditional field, not present for CoF tokens, and only present when the Payment App Provider has implemented the &#39;Get Device Info&#39; MDES API.
   * @return deviceName
   */
  @javax.annotation.Nullable
  public String getDeviceName() {
    return deviceName;
  }

  public void setDeviceName(String deviceName) {
    this.deviceName = deviceName;
  }


  public Device deviceType(String deviceType) {
    this.deviceType = deviceType;
    return this;
  }

  /**
   * Type of the device provisioned with the token. Valid values:&lt;br /&gt;    \&quot;03\&quot; - Watch&lt;br /&gt;    \&quot;09\&quot; - Mobile Phone or Smartphone with a fixed (non-removable) secure element not controlled by the mobile network operator&lt;br /&gt;    \&quot;13\&quot; - Tablet or e-reader with a fixed (non-removable) secure element not controlled by the mobile network operator&lt;br /&gt;    \&quot;14\&quot; - Mobile phone or Smartphone with a payment application running in a host processor&lt;br /&gt;    \&quot;15\&quot; - Tablet or E-Book with a payment application running in a host processor&lt;br /&gt;    \&quot;16\&quot; ? Mobile Phone or Smartphone with a payment application running in the TEE of a host processor&lt;br /&gt;    \&quot;17\&quot; ? Tablet or E-Book with a payment application running in the TEE of a host processor&lt;br /&gt;    \&quot;18\&quot; ? Watch with a payment application running in the TEE of a host processor&lt;br /&gt;    \&quot;19\&quot; ? Watch with a payment application running in a host processor.&lt;br /&gt;    \&quot;21\&quot; ? Phone.&lt;br /&gt;    \&quot;22\&quot; ? Tablet. &lt;br /&gt;    \&quot;23\&quot; ? Watch.&lt;br /&gt;    \&quot;24\&quot; ? Sticker.&lt;br /&gt;    \&quot;25\&quot; ? Personal Computer.&lt;br /&gt;    \&quot;26\&quot; ? Device Peripheral.&lt;br /&gt;    \&quot;27\&quot; ? Tag.&lt;br /&gt;    \&quot;28\&quot; ? Jewelry.&lt;br /&gt;    \&quot;29\&quot; ?  Fashion Accessory.&lt;br /&gt;    \&quot;30\&quot; ?  Garment.&lt;br /&gt;    \&quot;31\&quot; ?  Domestic Appliance.&lt;br /&gt;    \&quot;32\&quot; ?  Vehicle.&lt;br /&gt;    \&quot;33\&quot; ?  Media or Gaming Device.&lt;br /&gt;    \&quot;99\&quot; ?  Undefined.&lt;br /&gt;Conditional field, not present for CoF tokens, and only present when supplied by the Payment App Provider.
   * @return deviceType
   */
  @javax.annotation.Nullable
  public String getDeviceType() {
    return deviceType;
  }

  public void setDeviceType(String deviceType) {
    this.deviceType = deviceType;
  }


  public Device secureElementId(String secureElementId) {
    this.secureElementId = secureElementId;
    return this;
  }

  /**
   * Identifier of the secure element provisioned with the token. Conditional field, not present for CoF tokens, and only present when the token is provisioned to a secure element.
   * @return secureElementId
   */
  @javax.annotation.Nullable
  public String getSecureElementId() {
    return secureElementId;
  }

  public void setSecureElementId(String secureElementId) {
    this.secureElementId = secureElementId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Device device = (Device) o;
    return Objects.equals(this.deviceId, device.deviceId) &&
        Objects.equals(this.deviceName, device.deviceName) &&
        Objects.equals(this.deviceType, device.deviceType) &&
        Objects.equals(this.secureElementId, device.secureElementId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceId, deviceName, deviceType, secureElementId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Device {\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    secureElementId: ").append(toIndentedString(secureElementId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DeviceId");
    openapiFields.add("DeviceName");
    openapiFields.add("DeviceType");
    openapiFields.add("SecureElementId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Device
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Device.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Device is not found in the empty JSON string", Device.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Device.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Device` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DeviceId") != null && !jsonObj.get("DeviceId").isJsonNull()) && !jsonObj.get("DeviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeviceId").toString()));
      }
      if ((jsonObj.get("DeviceName") != null && !jsonObj.get("DeviceName").isJsonNull()) && !jsonObj.get("DeviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeviceName").toString()));
      }
      if ((jsonObj.get("DeviceType") != null && !jsonObj.get("DeviceType").isJsonNull()) && !jsonObj.get("DeviceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeviceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeviceType").toString()));
      }
      if ((jsonObj.get("SecureElementId") != null && !jsonObj.get("SecureElementId").isJsonNull()) && !jsonObj.get("SecureElementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SecureElementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SecureElementId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Device.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Device' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Device> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Device.class));

       return (TypeAdapter<T>) new TypeAdapter<Device>() {
           @Override
           public void write(JsonWriter out, Device value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Device read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Device given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Device
   * @throws IOException if the JSON string is invalid with respect to Device
   */
  public static Device fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Device.class);
  }

  /**
   * Convert an instance of Device to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

