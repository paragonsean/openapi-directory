/*
 * MDES Customer Service
 * This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.
 *
 * The version of the OpenAPI document: 2.0.7
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AuditInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Status
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:16.587349-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Status {
  public static final String SERIALIZED_NAME_AUDIT_INFO = "AuditInfo";
  @SerializedName(SERIALIZED_NAME_AUDIT_INFO)
  private AuditInfo auditInfo;

  public static final String SERIALIZED_NAME_COMMENT_ID = "CommentId";
  @SerializedName(SERIALIZED_NAME_COMMENT_ID)
  private String commentId;

  public static final String SERIALIZED_NAME_INITIATOR = "Initiator";
  @SerializedName(SERIALIZED_NAME_INITIATOR)
  private String initiator;

  public static final String SERIALIZED_NAME_REASON_CODE = "ReasonCode";
  @SerializedName(SERIALIZED_NAME_REASON_CODE)
  private String reasonCode;

  public static final String SERIALIZED_NAME_STATUS_CODE = "StatusCode";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private String statusCode;

  public static final String SERIALIZED_NAME_STATUS_DATE_TIME = "StatusDateTime";
  @SerializedName(SERIALIZED_NAME_STATUS_DATE_TIME)
  private String statusDateTime;

  public static final String SERIALIZED_NAME_STATUS_DESCRIPTION = "StatusDescription";
  @SerializedName(SERIALIZED_NAME_STATUS_DESCRIPTION)
  private String statusDescription;

  public Status() {
  }

  public Status auditInfo(AuditInfo auditInfo) {
    this.auditInfo = auditInfo;
    return this;
  }

  /**
   * Get auditInfo
   * @return auditInfo
   */
  @javax.annotation.Nullable
  public AuditInfo getAuditInfo() {
    return auditInfo;
  }

  public void setAuditInfo(AuditInfo auditInfo) {
    this.auditInfo = auditInfo;
  }


  public Status commentId(String commentId) {
    this.commentId = commentId;
    return this;
  }

  /**
   * Identifier of the comment added.  Conditional field, only present when comment text was provided in the request.
   * @return commentId
   */
  @javax.annotation.Nullable
  public String getCommentId() {
    return commentId;
  }

  public void setCommentId(String commentId) {
    this.commentId = commentId;
  }


  public Status initiator(String initiator) {
    this.initiator = initiator;
    return this;
  }

  /**
   * Party that initiated the status update. Valid values:&lt;br /&gt;    \&quot;I\&quot; - Issuer.&lt;br /&gt;    \&quot;W\&quot; - Token Requestor (including Wallet Provider).&lt;br /&gt;    \&quot;C\&quot; - Cardholder.&lt;br /&gt;    \&quot;P\&quot; - Mobile PIN Validation service.&lt;br /&gt;    \&quot;M\&quot; - Mobile PIN Change Validation service.
   * @return initiator
   */
  @javax.annotation.Nullable
  public String getInitiator() {
    return initiator;
  }

  public void setInitiator(String initiator) {
    this.initiator = initiator;
  }


  public Status reasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
    return this;
  }

  /**
   * Reason for the status update.  Valid values:&lt;br /&gt;    \&quot;A\&quot; ? Cardholder successfully authenticated using a mobile App prior to activation.&lt;br /&gt;    \&quot;C\&quot; ? Cardholder successfully authenticated with a customer service agent prior to activation. (For &#39;Token Activate&#39;).&lt;br /&gt;    \&quot;C\&quot; ? Account closed. (For &#39;Token Delete&#39;).&lt;br /&gt;    \&quot;F\&quot; ? Cardholder reported token device found or not stolen.&lt;br /&gt;    \&quot;L\&quot; ? Cardholder reported/confirmed token device lost.&lt;br /&gt;    \&quot;S\&quot; ? Cardholder reported/confirmed token device stolen.&lt;br /&gt;    \&quot;T\&quot; ? Issuer or cardholder reported fraudulent/then confirmed no fraudulent token transactions.&lt;br /&gt;    \&quot;Z\&quot; ? Other.
   * @return reasonCode
   */
  @javax.annotation.Nullable
  public String getReasonCode() {
    return reasonCode;
  }

  public void setReasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
  }


  public Status statusCode(String statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  /**
   * The status of the Token. Valid values:&lt;br /&gt;    \&quot;U\&quot; - Unmapped. The token has not yet been linked to the Account PAN. The process of tokenization is ?In Progress?.&lt;br /&gt;    \&quot;A\&quot; - Active. The token is linked to the Account PAN and may initiate new transactions to be authorized.&lt;br /&gt;    \&quot;S\&quot; - Suspended. The token is linked to the Account PAN but may not perform transactions at the request of one or more suspenders.&lt;br /&gt;    \&quot;D\&quot; - Deleted. The token is logically deleted but is still linked to the Account PAN for the purposes of post-authorization transaction processing.
   * @return statusCode
   */
  @javax.annotation.Nullable
  public String getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(String statusCode) {
    this.statusCode = statusCode;
  }


  public Status statusDateTime(String statusDateTime) {
    this.statusDateTime = statusDateTime;
    return this;
  }

  /**
   * Date and time the status was updated. String, ISO 8691 format - YYYY-MM-DDThh:mm:ssTZD .
   * @return statusDateTime
   */
  @javax.annotation.Nullable
  public String getStatusDateTime() {
    return statusDateTime;
  }

  public void setStatusDateTime(String statusDateTime) {
    this.statusDateTime = statusDateTime;
  }


  public Status statusDescription(String statusDescription) {
    this.statusDescription = statusDescription;
    return this;
  }

  /**
   * Description of the current status.
   * @return statusDescription
   */
  @javax.annotation.Nullable
  public String getStatusDescription() {
    return statusDescription;
  }

  public void setStatusDescription(String statusDescription) {
    this.statusDescription = statusDescription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Status status = (Status) o;
    return Objects.equals(this.auditInfo, status.auditInfo) &&
        Objects.equals(this.commentId, status.commentId) &&
        Objects.equals(this.initiator, status.initiator) &&
        Objects.equals(this.reasonCode, status.reasonCode) &&
        Objects.equals(this.statusCode, status.statusCode) &&
        Objects.equals(this.statusDateTime, status.statusDateTime) &&
        Objects.equals(this.statusDescription, status.statusDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(auditInfo, commentId, initiator, reasonCode, statusCode, statusDateTime, statusDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Status {\n");
    sb.append("    auditInfo: ").append(toIndentedString(auditInfo)).append("\n");
    sb.append("    commentId: ").append(toIndentedString(commentId)).append("\n");
    sb.append("    initiator: ").append(toIndentedString(initiator)).append("\n");
    sb.append("    reasonCode: ").append(toIndentedString(reasonCode)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    statusDateTime: ").append(toIndentedString(statusDateTime)).append("\n");
    sb.append("    statusDescription: ").append(toIndentedString(statusDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AuditInfo");
    openapiFields.add("CommentId");
    openapiFields.add("Initiator");
    openapiFields.add("ReasonCode");
    openapiFields.add("StatusCode");
    openapiFields.add("StatusDateTime");
    openapiFields.add("StatusDescription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Status
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Status.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Status is not found in the empty JSON string", Status.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Status.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Status` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AuditInfo`
      if (jsonObj.get("AuditInfo") != null && !jsonObj.get("AuditInfo").isJsonNull()) {
        AuditInfo.validateJsonElement(jsonObj.get("AuditInfo"));
      }
      if ((jsonObj.get("CommentId") != null && !jsonObj.get("CommentId").isJsonNull()) && !jsonObj.get("CommentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CommentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CommentId").toString()));
      }
      if ((jsonObj.get("Initiator") != null && !jsonObj.get("Initiator").isJsonNull()) && !jsonObj.get("Initiator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Initiator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Initiator").toString()));
      }
      if ((jsonObj.get("ReasonCode") != null && !jsonObj.get("ReasonCode").isJsonNull()) && !jsonObj.get("ReasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReasonCode").toString()));
      }
      if ((jsonObj.get("StatusCode") != null && !jsonObj.get("StatusCode").isJsonNull()) && !jsonObj.get("StatusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatusCode").toString()));
      }
      if ((jsonObj.get("StatusDateTime") != null && !jsonObj.get("StatusDateTime").isJsonNull()) && !jsonObj.get("StatusDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatusDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatusDateTime").toString()));
      }
      if ((jsonObj.get("StatusDescription") != null && !jsonObj.get("StatusDescription").isJsonNull()) && !jsonObj.get("StatusDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatusDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatusDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Status.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Status' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Status> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Status.class));

       return (TypeAdapter<T>) new TypeAdapter<Status>() {
           @Override
           public void write(JsonWriter out, Status value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Status read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Status given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Status
   * @throws IOException if the JSON string is invalid with respect to Status
   */
  public static Status fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Status.class);
  }

  /**
   * Convert an instance of Status to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

