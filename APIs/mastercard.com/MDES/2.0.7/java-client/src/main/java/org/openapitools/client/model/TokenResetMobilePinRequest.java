/*
 * MDES Customer Service
 * This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.
 *
 * The version of the OpenAPI document: 2.0.7
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AuditInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TokenResetMobilePinRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:16.587349-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TokenResetMobilePinRequest {
  public static final String SERIALIZED_NAME_AUDIT_INFO = "AuditInfo";
  @SerializedName(SERIALIZED_NAME_AUDIT_INFO)
  private AuditInfo auditInfo;

  public static final String SERIALIZED_NAME_COMMENT_TEXT = "CommentText";
  @SerializedName(SERIALIZED_NAME_COMMENT_TEXT)
  private String commentText;

  public static final String SERIALIZED_NAME_REASON_CODE = "ReasonCode";
  @SerializedName(SERIALIZED_NAME_REASON_CODE)
  private String reasonCode;

  public static final String SERIALIZED_NAME_TOKEN_UNIQUE_REFERENCE = "TokenUniqueReference";
  @SerializedName(SERIALIZED_NAME_TOKEN_UNIQUE_REFERENCE)
  private String tokenUniqueReference;

  public TokenResetMobilePinRequest() {
  }

  public TokenResetMobilePinRequest auditInfo(AuditInfo auditInfo) {
    this.auditInfo = auditInfo;
    return this;
  }

  /**
   * Get auditInfo
   * @return auditInfo
   */
  @javax.annotation.Nonnull
  public AuditInfo getAuditInfo() {
    return auditInfo;
  }

  public void setAuditInfo(AuditInfo auditInfo) {
    this.auditInfo = auditInfo;
  }


  public TokenResetMobilePinRequest commentText(String commentText) {
    this.commentText = commentText;
    return this;
  }

  /**
   * Comment related to the token mobile PIN reset.
   * @return commentText
   */
  @javax.annotation.Nullable
  public String getCommentText() {
    return commentText;
  }

  public void setCommentText(String commentText) {
    this.commentText = commentText;
  }


  public TokenResetMobilePinRequest reasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
    return this;
  }

  /**
   * The reason for the action. Valid values:&lt;br /&gt;    \&quot;N\&quot; - Cardholder requested new Mobile PIN&lt;br /&gt;    \&quot;R\&quot; ? Mobile PIN try counter violation
   * @return reasonCode
   */
  @javax.annotation.Nonnull
  public String getReasonCode() {
    return reasonCode;
  }

  public void setReasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
  }


  public TokenResetMobilePinRequest tokenUniqueReference(String tokenUniqueReference) {
    this.tokenUniqueReference = tokenUniqueReference;
    return this;
  }

  /**
   * The TokenUniqueReference of the token.
   * @return tokenUniqueReference
   */
  @javax.annotation.Nonnull
  public String getTokenUniqueReference() {
    return tokenUniqueReference;
  }

  public void setTokenUniqueReference(String tokenUniqueReference) {
    this.tokenUniqueReference = tokenUniqueReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokenResetMobilePinRequest tokenResetMobilePinRequest = (TokenResetMobilePinRequest) o;
    return Objects.equals(this.auditInfo, tokenResetMobilePinRequest.auditInfo) &&
        Objects.equals(this.commentText, tokenResetMobilePinRequest.commentText) &&
        Objects.equals(this.reasonCode, tokenResetMobilePinRequest.reasonCode) &&
        Objects.equals(this.tokenUniqueReference, tokenResetMobilePinRequest.tokenUniqueReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(auditInfo, commentText, reasonCode, tokenUniqueReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokenResetMobilePinRequest {\n");
    sb.append("    auditInfo: ").append(toIndentedString(auditInfo)).append("\n");
    sb.append("    commentText: ").append(toIndentedString(commentText)).append("\n");
    sb.append("    reasonCode: ").append(toIndentedString(reasonCode)).append("\n");
    sb.append("    tokenUniqueReference: ").append(toIndentedString(tokenUniqueReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AuditInfo");
    openapiFields.add("CommentText");
    openapiFields.add("ReasonCode");
    openapiFields.add("TokenUniqueReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AuditInfo");
    openapiRequiredFields.add("ReasonCode");
    openapiRequiredFields.add("TokenUniqueReference");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TokenResetMobilePinRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TokenResetMobilePinRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TokenResetMobilePinRequest is not found in the empty JSON string", TokenResetMobilePinRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TokenResetMobilePinRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TokenResetMobilePinRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TokenResetMobilePinRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `AuditInfo`
      AuditInfo.validateJsonElement(jsonObj.get("AuditInfo"));
      if ((jsonObj.get("CommentText") != null && !jsonObj.get("CommentText").isJsonNull()) && !jsonObj.get("CommentText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CommentText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CommentText").toString()));
      }
      if (!jsonObj.get("ReasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReasonCode").toString()));
      }
      if (!jsonObj.get("TokenUniqueReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TokenUniqueReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TokenUniqueReference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TokenResetMobilePinRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TokenResetMobilePinRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TokenResetMobilePinRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TokenResetMobilePinRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TokenResetMobilePinRequest>() {
           @Override
           public void write(JsonWriter out, TokenResetMobilePinRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TokenResetMobilePinRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TokenResetMobilePinRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TokenResetMobilePinRequest
   * @throws IOException if the JSON string is invalid with respect to TokenResetMobilePinRequest
   */
  public static TokenResetMobilePinRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TokenResetMobilePinRequest.class);
  }

  /**
   * Convert an instance of TokenResetMobilePinRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

