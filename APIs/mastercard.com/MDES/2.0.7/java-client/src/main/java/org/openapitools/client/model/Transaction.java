/*
 * MDES Customer Service
 * This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.
 *
 * The version of the OpenAPI document: 2.0.7
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Transaction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:16.587349-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Transaction {
  public static final String SERIALIZED_NAME_CURRENCY_CODE = "CurrencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_MERCHANT_CATEGORY_CODE = "MerchantCategoryCode";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CATEGORY_CODE)
  private String merchantCategoryCode;

  public static final String SERIALIZED_NAME_MERCHANT_CATEGORY_DESCRIPTION = "MerchantCategoryDescription";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CATEGORY_DESCRIPTION)
  private String merchantCategoryDescription;

  public static final String SERIALIZED_NAME_MERCHANT_NAME = "MerchantName";
  @SerializedName(SERIALIZED_NAME_MERCHANT_NAME)
  private String merchantName;

  public static final String SERIALIZED_NAME_PO_S_ENTRY_MODE = "POSEntryMode";
  @SerializedName(SERIALIZED_NAME_PO_S_ENTRY_MODE)
  private String poSEntryMode;

  public static final String SERIALIZED_NAME_TRANSACTION_AMOUNT = "TransactionAmount";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_AMOUNT)
  private String transactionAmount;

  public static final String SERIALIZED_NAME_TRANSACTION_DATE_TIME = "TransactionDateTime";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_DATE_TIME)
  private String transactionDateTime;

  public static final String SERIALIZED_NAME_TRANSACTION_STATUS_CODE = "TransactionStatusCode";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_STATUS_CODE)
  private String transactionStatusCode;

  public static final String SERIALIZED_NAME_TRANSACTION_TYPE_CODE = "TransactionTypeCode";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TYPE_CODE)
  private String transactionTypeCode;

  public static final String SERIALIZED_NAME_TRANSACTION_TYPE_DESCRIPTION = "TransactionTypeDescription";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TYPE_DESCRIPTION)
  private String transactionTypeDescription;

  public Transaction() {
  }

  public Transaction currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * ISO-4217 currency code (3-letter alphabetic currency code).
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public Transaction merchantCategoryCode(String merchantCategoryCode) {
    this.merchantCategoryCode = merchantCategoryCode;
    return this;
  }

  /**
   * Merchant category of the merchant. Conditional field. When available, it must be included in the response.
   * @return merchantCategoryCode
   */
  @javax.annotation.Nullable
  public String getMerchantCategoryCode() {
    return merchantCategoryCode;
  }

  public void setMerchantCategoryCode(String merchantCategoryCode) {
    this.merchantCategoryCode = merchantCategoryCode;
  }


  public Transaction merchantCategoryDescription(String merchantCategoryDescription) {
    this.merchantCategoryDescription = merchantCategoryDescription;
    return this;
  }

  /**
   * Description of the merchant category.
   * @return merchantCategoryDescription
   */
  @javax.annotation.Nullable
  public String getMerchantCategoryDescription() {
    return merchantCategoryDescription;
  }

  public void setMerchantCategoryDescription(String merchantCategoryDescription) {
    this.merchantCategoryDescription = merchantCategoryDescription;
  }


  public Transaction merchantName(String merchantName) {
    this.merchantName = merchantName;
    return this;
  }

  /**
   * Name of the merchant. Conditional field. When available, it must be included in the response.
   * @return merchantName
   */
  @javax.annotation.Nullable
  public String getMerchantName() {
    return merchantName;
  }

  public void setMerchantName(String merchantName) {
    this.merchantName = merchantName;
  }


  public Transaction poSEntryMode(String poSEntryMode) {
    this.poSEntryMode = poSEntryMode;
    return this;
  }

  /**
   * Indicates the mode by which transaction data was collected at the merchant. Conditional field. When available, it must be included in the response.  Valid values:&lt;br /&gt;    \&quot;07\&quot; - Contactless M/Chip transaction&lt;br /&gt;    \&quot;09\&quot; - Digital Secure Remote Payment containing EMV data&lt;br /&gt;    \&quot;81\&quot; - Digital Secure Remote Payment containing UCAF data or CoF&lt;br /&gt;    \&quot;82\&quot; - CoF - PAN auto entry via server&lt;br /&gt;    \&quot;90\&quot; - Dynamic Magnetic Strip Data&lt;br /&gt;    \&quot;91\&quot; - Contactless magnetic stripe
   * @return poSEntryMode
   */
  @javax.annotation.Nullable
  public String getPoSEntryMode() {
    return poSEntryMode;
  }

  public void setPoSEntryMode(String poSEntryMode) {
    this.poSEntryMode = poSEntryMode;
  }


  public Transaction transactionAmount(String transactionAmount) {
    this.transactionAmount = transactionAmount;
    return this;
  }

  /**
   * Amount of the transaction formatted with decimal places.
   * @return transactionAmount
   */
  @javax.annotation.Nullable
  public String getTransactionAmount() {
    return transactionAmount;
  }

  public void setTransactionAmount(String transactionAmount) {
    this.transactionAmount = transactionAmount;
  }


  public Transaction transactionDateTime(String transactionDateTime) {
    this.transactionDateTime = transactionDateTime;
    return this;
  }

  /**
   * Date and time the comment was updated. String, YYYY-MM-DDThh:mm:ssTZD.
   * @return transactionDateTime
   */
  @javax.annotation.Nullable
  public String getTransactionDateTime() {
    return transactionDateTime;
  }

  public void setTransactionDateTime(String transactionDateTime) {
    this.transactionDateTime = transactionDateTime;
  }


  public Transaction transactionStatusCode(String transactionStatusCode) {
    this.transactionStatusCode = transactionStatusCode;
    return this;
  }

  /**
   * Transaction status. Valid values:&lt;br /&gt;    \&quot;AUTH\&quot; &#x3D; Authorized&lt;br /&gt;    \&quot;COMP\&quot; &#x3D; Completed&lt;br /&gt;    \&quot;DCLN\&quot; &#x3D; Declined&lt;br /&gt;    \&quot;PAUTH\&quot; &#x3D; Pre-Authorized&lt;br /&gt;    \&quot;PAUTC\&quot; &#x3D; Pre-Authorization Completed&lt;br /&gt;    \&quot;PAUTD\&quot; &#x3D; Pre-Authorization Declined&lt;br /&gt;    \&quot;REFND\&quot; &#x3D; Refunded
   * @return transactionStatusCode
   */
  @javax.annotation.Nullable
  public String getTransactionStatusCode() {
    return transactionStatusCode;
  }

  public void setTransactionStatusCode(String transactionStatusCode) {
    this.transactionStatusCode = transactionStatusCode;
  }


  public Transaction transactionTypeCode(String transactionTypeCode) {
    this.transactionTypeCode = transactionTypeCode;
    return this;
  }

  /**
   * Type of transaction. Valid values:&lt;br /&gt;    \&quot;PURCH\&quot; &#x3D; Purchase&lt;br /&gt;    \&quot;PURCB\&quot; &#x3D; Purchase with Cashback&lt;br /&gt;    \&quot;REFND\&quot; &#x3D; Refund&lt;br /&gt;    \&quot;AFD\&quot; &#x3D; Purchase Pre-Auth AFD&lt;br /&gt;    \&quot;CLRRF\&quot; &#x3D; Clearing Refund&lt;br /&gt;    \&quot;NAFD\&quot; &#x3D; Purchase Pre-Auth Non-AFD&lt;br /&gt;    \&quot;PYMT\&quot; &#x3D; Push Payments.
   * @return transactionTypeCode
   */
  @javax.annotation.Nullable
  public String getTransactionTypeCode() {
    return transactionTypeCode;
  }

  public void setTransactionTypeCode(String transactionTypeCode) {
    this.transactionTypeCode = transactionTypeCode;
  }


  public Transaction transactionTypeDescription(String transactionTypeDescription) {
    this.transactionTypeDescription = transactionTypeDescription;
    return this;
  }

  /**
   * Description of the transaction type.
   * @return transactionTypeDescription
   */
  @javax.annotation.Nullable
  public String getTransactionTypeDescription() {
    return transactionTypeDescription;
  }

  public void setTransactionTypeDescription(String transactionTypeDescription) {
    this.transactionTypeDescription = transactionTypeDescription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transaction transaction = (Transaction) o;
    return Objects.equals(this.currencyCode, transaction.currencyCode) &&
        Objects.equals(this.merchantCategoryCode, transaction.merchantCategoryCode) &&
        Objects.equals(this.merchantCategoryDescription, transaction.merchantCategoryDescription) &&
        Objects.equals(this.merchantName, transaction.merchantName) &&
        Objects.equals(this.poSEntryMode, transaction.poSEntryMode) &&
        Objects.equals(this.transactionAmount, transaction.transactionAmount) &&
        Objects.equals(this.transactionDateTime, transaction.transactionDateTime) &&
        Objects.equals(this.transactionStatusCode, transaction.transactionStatusCode) &&
        Objects.equals(this.transactionTypeCode, transaction.transactionTypeCode) &&
        Objects.equals(this.transactionTypeDescription, transaction.transactionTypeDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencyCode, merchantCategoryCode, merchantCategoryDescription, merchantName, poSEntryMode, transactionAmount, transactionDateTime, transactionStatusCode, transactionTypeCode, transactionTypeDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transaction {\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    merchantCategoryCode: ").append(toIndentedString(merchantCategoryCode)).append("\n");
    sb.append("    merchantCategoryDescription: ").append(toIndentedString(merchantCategoryDescription)).append("\n");
    sb.append("    merchantName: ").append(toIndentedString(merchantName)).append("\n");
    sb.append("    poSEntryMode: ").append(toIndentedString(poSEntryMode)).append("\n");
    sb.append("    transactionAmount: ").append(toIndentedString(transactionAmount)).append("\n");
    sb.append("    transactionDateTime: ").append(toIndentedString(transactionDateTime)).append("\n");
    sb.append("    transactionStatusCode: ").append(toIndentedString(transactionStatusCode)).append("\n");
    sb.append("    transactionTypeCode: ").append(toIndentedString(transactionTypeCode)).append("\n");
    sb.append("    transactionTypeDescription: ").append(toIndentedString(transactionTypeDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CurrencyCode");
    openapiFields.add("MerchantCategoryCode");
    openapiFields.add("MerchantCategoryDescription");
    openapiFields.add("MerchantName");
    openapiFields.add("POSEntryMode");
    openapiFields.add("TransactionAmount");
    openapiFields.add("TransactionDateTime");
    openapiFields.add("TransactionStatusCode");
    openapiFields.add("TransactionTypeCode");
    openapiFields.add("TransactionTypeDescription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Transaction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Transaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Transaction is not found in the empty JSON string", Transaction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Transaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Transaction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) && !jsonObj.get("CurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrencyCode").toString()));
      }
      if ((jsonObj.get("MerchantCategoryCode") != null && !jsonObj.get("MerchantCategoryCode").isJsonNull()) && !jsonObj.get("MerchantCategoryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MerchantCategoryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MerchantCategoryCode").toString()));
      }
      if ((jsonObj.get("MerchantCategoryDescription") != null && !jsonObj.get("MerchantCategoryDescription").isJsonNull()) && !jsonObj.get("MerchantCategoryDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MerchantCategoryDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MerchantCategoryDescription").toString()));
      }
      if ((jsonObj.get("MerchantName") != null && !jsonObj.get("MerchantName").isJsonNull()) && !jsonObj.get("MerchantName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MerchantName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MerchantName").toString()));
      }
      if ((jsonObj.get("POSEntryMode") != null && !jsonObj.get("POSEntryMode").isJsonNull()) && !jsonObj.get("POSEntryMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `POSEntryMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("POSEntryMode").toString()));
      }
      if ((jsonObj.get("TransactionAmount") != null && !jsonObj.get("TransactionAmount").isJsonNull()) && !jsonObj.get("TransactionAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransactionAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TransactionAmount").toString()));
      }
      if ((jsonObj.get("TransactionDateTime") != null && !jsonObj.get("TransactionDateTime").isJsonNull()) && !jsonObj.get("TransactionDateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransactionDateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TransactionDateTime").toString()));
      }
      if ((jsonObj.get("TransactionStatusCode") != null && !jsonObj.get("TransactionStatusCode").isJsonNull()) && !jsonObj.get("TransactionStatusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransactionStatusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TransactionStatusCode").toString()));
      }
      if ((jsonObj.get("TransactionTypeCode") != null && !jsonObj.get("TransactionTypeCode").isJsonNull()) && !jsonObj.get("TransactionTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransactionTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TransactionTypeCode").toString()));
      }
      if ((jsonObj.get("TransactionTypeDescription") != null && !jsonObj.get("TransactionTypeDescription").isJsonNull()) && !jsonObj.get("TransactionTypeDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransactionTypeDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TransactionTypeDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Transaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Transaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Transaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Transaction.class));

       return (TypeAdapter<T>) new TypeAdapter<Transaction>() {
           @Override
           public void write(JsonWriter out, Transaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Transaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Transaction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Transaction
   * @throws IOException if the JSON string is invalid with respect to Transaction
   */
  public static Transaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Transaction.class);
  }

  /**
   * Convert an instance of Transaction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

