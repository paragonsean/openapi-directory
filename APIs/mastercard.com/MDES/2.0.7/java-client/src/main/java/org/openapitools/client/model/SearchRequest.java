/*
 * MDES Customer Service
 * This API provides our Issuer partners with resources to help resolve consumer queries about payment accounts enabled through our digitization platform.
 *
 * The version of the OpenAPI document: 2.0.7
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AuditInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:16.587349-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchRequest {
  public static final String SERIALIZED_NAME_ACCOUNT_PAN = "AccountPan";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_PAN)
  private String accountPan;

  public static final String SERIALIZED_NAME_ALTERNATE_ACCOUNT_IDENTIFIER = "AlternateAccountIdentifier";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_ACCOUNT_IDENTIFIER)
  private String alternateAccountIdentifier;

  public static final String SERIALIZED_NAME_AUDIT_INFO = "AuditInfo";
  @SerializedName(SERIALIZED_NAME_AUDIT_INFO)
  private AuditInfo auditInfo;

  public static final String SERIALIZED_NAME_COMMENT_ID = "CommentId";
  @SerializedName(SERIALIZED_NAME_COMMENT_ID)
  private String commentId;

  /**
   * Indicates whether deleted tokens should be excluded from the search results. When omitted, deleted tokens are included in the results. \&quot;true\&quot; indicates deleted tokens are excluded from the search results. \&quot;false\&quot; means deleted tokens are included in the search results.
   */
  @JsonAdapter(ExcludeDeletedIndicatorEnum.Adapter.class)
  public enum ExcludeDeletedIndicatorEnum {
    TRUE("true"),
    
    FALSE("false");

    private String value;

    ExcludeDeletedIndicatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExcludeDeletedIndicatorEnum fromValue(String value) {
      for (ExcludeDeletedIndicatorEnum b : ExcludeDeletedIndicatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExcludeDeletedIndicatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExcludeDeletedIndicatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExcludeDeletedIndicatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExcludeDeletedIndicatorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExcludeDeletedIndicatorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXCLUDE_DELETED_INDICATOR = "ExcludeDeletedIndicator";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_DELETED_INDICATOR)
  private ExcludeDeletedIndicatorEnum excludeDeletedIndicator;

  public static final String SERIALIZED_NAME_PAYMENT_APP_INSTANCE_ID = "PaymentAppInstanceId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_APP_INSTANCE_ID)
  private String paymentAppInstanceId;

  public static final String SERIALIZED_NAME_TOKEN = "Token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_TOKEN_UNIQUE_REFERENCE = "TokenUniqueReference";
  @SerializedName(SERIALIZED_NAME_TOKEN_UNIQUE_REFERENCE)
  private String tokenUniqueReference;

  public SearchRequest() {
  }

  public SearchRequest accountPan(String accountPan) {
    this.accountPan = accountPan;
    return this;
  }

  /**
   * When present, the search will return tokens for the Account matching this Primary Account Number (PAN), for any Wallet Provider or device. Cannot be used together with any of the following search request.  parameters:TokenUniqueReference, Token, PaymentAppInstanceId, CommentId, or AlternateAccountIdentifier.
   * @return accountPan
   */
  @javax.annotation.Nullable
  public String getAccountPan() {
    return accountPan;
  }

  public void setAccountPan(String accountPan) {
    this.accountPan = accountPan;
  }


  public SearchRequest alternateAccountIdentifier(String alternateAccountIdentifier) {
    this.alternateAccountIdentifier = alternateAccountIdentifier;
    return this;
  }

  /**
   * When present, the search will return tokens matching this Alternate Account Identifier, for any Wallet Provider or device. Space characters are not allowed. Cannot be used together with any of the following search request parameters; AccountPan, TokenUniqueReference, Token, PaymentAppInstanceId, or CommentId.
   * @return alternateAccountIdentifier
   */
  @javax.annotation.Nullable
  public String getAlternateAccountIdentifier() {
    return alternateAccountIdentifier;
  }

  public void setAlternateAccountIdentifier(String alternateAccountIdentifier) {
    this.alternateAccountIdentifier = alternateAccountIdentifier;
  }


  public SearchRequest auditInfo(AuditInfo auditInfo) {
    this.auditInfo = auditInfo;
    return this;
  }

  /**
   * Get auditInfo
   * @return auditInfo
   */
  @javax.annotation.Nonnull
  public AuditInfo getAuditInfo() {
    return auditInfo;
  }

  public void setAuditInfo(AuditInfo auditInfo) {
    this.auditInfo = auditInfo;
  }


  public SearchRequest commentId(String commentId) {
    this.commentId = commentId;
    return this;
  }

  /**
   * When present, the search will return one specific token linked to the comment. Cannot be used together with any of the following search request parameters; AccountPan, TokenUniqueReference, Token, PaymentAppInstanceId, or AlternateAccountIdentifier.
   * @return commentId
   */
  @javax.annotation.Nullable
  public String getCommentId() {
    return commentId;
  }

  public void setCommentId(String commentId) {
    this.commentId = commentId;
  }


  public SearchRequest excludeDeletedIndicator(ExcludeDeletedIndicatorEnum excludeDeletedIndicator) {
    this.excludeDeletedIndicator = excludeDeletedIndicator;
    return this;
  }

  /**
   * Indicates whether deleted tokens should be excluded from the search results. When omitted, deleted tokens are included in the results. \&quot;true\&quot; indicates deleted tokens are excluded from the search results. \&quot;false\&quot; means deleted tokens are included in the search results.
   * @return excludeDeletedIndicator
   */
  @javax.annotation.Nullable
  public ExcludeDeletedIndicatorEnum getExcludeDeletedIndicator() {
    return excludeDeletedIndicator;
  }

  public void setExcludeDeletedIndicator(ExcludeDeletedIndicatorEnum excludeDeletedIndicator) {
    this.excludeDeletedIndicator = excludeDeletedIndicator;
  }


  public SearchRequest paymentAppInstanceId(String paymentAppInstanceId) {
    this.paymentAppInstanceId = paymentAppInstanceId;
    return this;
  }

  /**
   * When present, the search will return tokens already present or to be provisioned to the specified Payment App instance.&lt;br&gt;&lt;br&gt;_Note:_ This may contain the identifier of the Secure Element or a mobile device for some programs. Cannot be used together with any of the following search request parameters; AccountPan, TokenUniqueReference, Token, CommentId, or AlternateAccountIdentifier.
   * @return paymentAppInstanceId
   */
  @javax.annotation.Nullable
  public String getPaymentAppInstanceId() {
    return paymentAppInstanceId;
  }

  public void setPaymentAppInstanceId(String paymentAppInstanceId) {
    this.paymentAppInstanceId = paymentAppInstanceId;
  }


  public SearchRequest token(String token) {
    this.token = token;
    return this;
  }

  /**
   * When present, the search will return one specific token. Cannot be used together with any of the following search request parameters; AccountPan, TokenUniqueReference, PaymentAppInstanceId, CommentId, or AlternateAccountIdentifier.
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }


  public SearchRequest tokenUniqueReference(String tokenUniqueReference) {
    this.tokenUniqueReference = tokenUniqueReference;
    return this;
  }

  /**
   * When present, the search will return one specific matching token. Cannot be used together with any of the following search request parameters; AccountPan, Token, PaymentAppInstanceId, CommentId, or AlternateAccountIdentifier.
   * @return tokenUniqueReference
   */
  @javax.annotation.Nullable
  public String getTokenUniqueReference() {
    return tokenUniqueReference;
  }

  public void setTokenUniqueReference(String tokenUniqueReference) {
    this.tokenUniqueReference = tokenUniqueReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchRequest searchRequest = (SearchRequest) o;
    return Objects.equals(this.accountPan, searchRequest.accountPan) &&
        Objects.equals(this.alternateAccountIdentifier, searchRequest.alternateAccountIdentifier) &&
        Objects.equals(this.auditInfo, searchRequest.auditInfo) &&
        Objects.equals(this.commentId, searchRequest.commentId) &&
        Objects.equals(this.excludeDeletedIndicator, searchRequest.excludeDeletedIndicator) &&
        Objects.equals(this.paymentAppInstanceId, searchRequest.paymentAppInstanceId) &&
        Objects.equals(this.token, searchRequest.token) &&
        Objects.equals(this.tokenUniqueReference, searchRequest.tokenUniqueReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountPan, alternateAccountIdentifier, auditInfo, commentId, excludeDeletedIndicator, paymentAppInstanceId, token, tokenUniqueReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchRequest {\n");
    sb.append("    accountPan: ").append(toIndentedString(accountPan)).append("\n");
    sb.append("    alternateAccountIdentifier: ").append(toIndentedString(alternateAccountIdentifier)).append("\n");
    sb.append("    auditInfo: ").append(toIndentedString(auditInfo)).append("\n");
    sb.append("    commentId: ").append(toIndentedString(commentId)).append("\n");
    sb.append("    excludeDeletedIndicator: ").append(toIndentedString(excludeDeletedIndicator)).append("\n");
    sb.append("    paymentAppInstanceId: ").append(toIndentedString(paymentAppInstanceId)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    tokenUniqueReference: ").append(toIndentedString(tokenUniqueReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountPan");
    openapiFields.add("AlternateAccountIdentifier");
    openapiFields.add("AuditInfo");
    openapiFields.add("CommentId");
    openapiFields.add("ExcludeDeletedIndicator");
    openapiFields.add("PaymentAppInstanceId");
    openapiFields.add("Token");
    openapiFields.add("TokenUniqueReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AuditInfo");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchRequest is not found in the empty JSON string", SearchRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AccountPan") != null && !jsonObj.get("AccountPan").isJsonNull()) && !jsonObj.get("AccountPan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountPan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountPan").toString()));
      }
      if ((jsonObj.get("AlternateAccountIdentifier") != null && !jsonObj.get("AlternateAccountIdentifier").isJsonNull()) && !jsonObj.get("AlternateAccountIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AlternateAccountIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AlternateAccountIdentifier").toString()));
      }
      // validate the required field `AuditInfo`
      AuditInfo.validateJsonElement(jsonObj.get("AuditInfo"));
      if ((jsonObj.get("CommentId") != null && !jsonObj.get("CommentId").isJsonNull()) && !jsonObj.get("CommentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CommentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CommentId").toString()));
      }
      if ((jsonObj.get("ExcludeDeletedIndicator") != null && !jsonObj.get("ExcludeDeletedIndicator").isJsonNull()) && !jsonObj.get("ExcludeDeletedIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExcludeDeletedIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExcludeDeletedIndicator").toString()));
      }
      // validate the optional field `ExcludeDeletedIndicator`
      if (jsonObj.get("ExcludeDeletedIndicator") != null && !jsonObj.get("ExcludeDeletedIndicator").isJsonNull()) {
        ExcludeDeletedIndicatorEnum.validateJsonElement(jsonObj.get("ExcludeDeletedIndicator"));
      }
      if ((jsonObj.get("PaymentAppInstanceId") != null && !jsonObj.get("PaymentAppInstanceId").isJsonNull()) && !jsonObj.get("PaymentAppInstanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PaymentAppInstanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PaymentAppInstanceId").toString()));
      }
      if ((jsonObj.get("Token") != null && !jsonObj.get("Token").isJsonNull()) && !jsonObj.get("Token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Token").toString()));
      }
      if ((jsonObj.get("TokenUniqueReference") != null && !jsonObj.get("TokenUniqueReference").isJsonNull()) && !jsonObj.get("TokenUniqueReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TokenUniqueReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TokenUniqueReference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchRequest>() {
           @Override
           public void write(JsonWriter out, SearchRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchRequest
   * @throws IOException if the JSON string is invalid with respect to SearchRequest
   */
  public static SearchRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchRequest.class);
  }

  /**
   * Convert an instance of SearchRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

