/**
 * Spending Pulse
 * This API will provide monthly data which includes metrics such as sales volume and growth rate.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SpendingPulse);
  }
}(this, function(expect, SpendingPulse) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SpendingPulse.GasWeeklyRecord();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GasWeeklyRecord', function() {
    it('should create an instance of GasWeeklyRecord', function() {
      // uncomment below and update the code to test GasWeeklyRecord
      //var instance = new SpendingPulse.GasWeeklyRecord();
      //expect(instance).to.be.a(SpendingPulse.GasWeeklyRecord);
    });

    it('should have the property averagePricePerGalRegularGasoline (base name: "AveragePricePerGalRegularGasoline")', function() {
      // uncomment below and update the code to test the property averagePricePerGalRegularGasoline
      //var instance = new SpendingPulse.GasWeeklyRecord();
      //expect(instance).to.be();
    });

    it('should have the property country (base name: "Country")', function() {
      // uncomment below and update the code to test the property country
      //var instance = new SpendingPulse.GasWeeklyRecord();
      //expect(instance).to.be();
    });

    it('should have the property pADDCode (base name: "PADDCode")', function() {
      // uncomment below and update the code to test the property pADDCode
      //var instance = new SpendingPulse.GasWeeklyRecord();
      //expect(instance).to.be();
    });

    it('should have the property pADDMillionsofBarrelsSold (base name: "PADDMillionsofBarrelsSold")', function() {
      // uncomment below and update the code to test the property pADDMillionsofBarrelsSold
      //var instance = new SpendingPulse.GasWeeklyRecord();
      //expect(instance).to.be();
    });

    it('should have the property pADDPercentChangeInBarrelsFromPriorWeek (base name: "PADDPercentChangeInBarrelsFromPriorWeek")', function() {
      // uncomment below and update the code to test the property pADDPercentChangeInBarrelsFromPriorWeek
      //var instance = new SpendingPulse.GasWeeklyRecord();
      //expect(instance).to.be();
    });

    it('should have the property pADDPercentChangeinBarrelsfrom52WeeksAgo (base name: "PADDPercentChangeinBarrelsfrom52WeeksAgo")', function() {
      // uncomment below and update the code to test the property pADDPercentChangeinBarrelsfrom52WeeksAgo
      //var instance = new SpendingPulse.GasWeeklyRecord();
      //expect(instance).to.be();
    });

    it('should have the property period (base name: "Period")', function() {
      // uncomment below and update the code to test the property period
      //var instance = new SpendingPulse.GasWeeklyRecord();
      //expect(instance).to.be();
    });

    it('should have the property productLine (base name: "ProductLine")', function() {
      // uncomment below and update the code to test the property productLine
      //var instance = new SpendingPulse.GasWeeklyRecord();
      //expect(instance).to.be();
    });

    it('should have the property publicationCoveragePeriod (base name: "PublicationCoveragePeriod")', function() {
      // uncomment below and update the code to test the property publicationCoveragePeriod
      //var instance = new SpendingPulse.GasWeeklyRecord();
      //expect(instance).to.be();
    });

    it('should have the property reportType (base name: "ReportType")', function() {
      // uncomment below and update the code to test the property reportType
      //var instance = new SpendingPulse.GasWeeklyRecord();
      //expect(instance).to.be();
    });

    it('should have the property sector (base name: "Sector")', function() {
      // uncomment below and update the code to test the property sector
      //var instance = new SpendingPulse.GasWeeklyRecord();
      //expect(instance).to.be();
    });

    it('should have the property segment (base name: "Segment")', function() {
      // uncomment below and update the code to test the property segment
      //var instance = new SpendingPulse.GasWeeklyRecord();
      //expect(instance).to.be();
    });

    it('should have the property subSector (base name: "SubSector")', function() {
      // uncomment below and update the code to test the property subSector
      //var instance = new SpendingPulse.GasWeeklyRecord();
      //expect(instance).to.be();
    });

    it('should have the property totalBarrelsChangeFromPriorWeek (base name: "TotalBarrelsChangeFromPriorWeek")', function() {
      // uncomment below and update the code to test the property totalBarrelsChangeFromPriorWeek
      //var instance = new SpendingPulse.GasWeeklyRecord();
      //expect(instance).to.be();
    });

    it('should have the property totalMillionsOfBarrels4WeekAverage (base name: "TotalMillionsOfBarrels4WeekAverage")', function() {
      // uncomment below and update the code to test the property totalMillionsOfBarrels4WeekAverage
      //var instance = new SpendingPulse.GasWeeklyRecord();
      //expect(instance).to.be();
    });

    it('should have the property totalMillionsOfBarrelsDailyAverage (base name: "TotalMillionsOfBarrelsDailyAverage")', function() {
      // uncomment below and update the code to test the property totalMillionsOfBarrelsDailyAverage
      //var instance = new SpendingPulse.GasWeeklyRecord();
      //expect(instance).to.be();
    });

    it('should have the property totalMillionsOfBarrelsSold (base name: "TotalMillionsOfBarrelsSold")', function() {
      // uncomment below and update the code to test the property totalMillionsOfBarrelsSold
      //var instance = new SpendingPulse.GasWeeklyRecord();
      //expect(instance).to.be();
    });

    it('should have the property totalPercentChangeInBarrelsFrom52WeeksAgo (base name: "TotalPercentChangeInBarrelsFrom52WeeksAgo")', function() {
      // uncomment below and update the code to test the property totalPercentChangeInBarrelsFrom52WeeksAgo
      //var instance = new SpendingPulse.GasWeeklyRecord();
      //expect(instance).to.be();
    });

    it('should have the property totalPercentChangeInBarrelsFromPriorWeek (base name: "TotalPercentChangeInBarrelsFromPriorWeek")', function() {
      // uncomment below and update the code to test the property totalPercentChangeInBarrelsFromPriorWeek
      //var instance = new SpendingPulse.GasWeeklyRecord();
      //expect(instance).to.be();
    });

    it('should have the property totalPercentChangeInThe4WeekAverageFrom52WeeksAgo (base name: "TotalPercentChangeInThe4WeekAverageFrom52WeeksAgo")', function() {
      // uncomment below and update the code to test the property totalPercentChangeInThe4WeekAverageFrom52WeeksAgo
      //var instance = new SpendingPulse.GasWeeklyRecord();
      //expect(instance).to.be();
    });

    it('should have the property weekEndDate (base name: "WeekEndDate")', function() {
      // uncomment below and update the code to test the property weekEndDate
      //var instance = new SpendingPulse.GasWeeklyRecord();
      //expect(instance).to.be();
    });

  });

}));
