/**
 * Spending Pulse
 * This API will provide monthly data which includes metrics such as sales volume and growth rate.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ParameterArray from './ParameterArray';

/**
 * The ParameterList model module.
 * @module model/ParameterList
 * @version 1.0
 */
class ParameterList {
    /**
     * Constructs a new <code>ParameterList</code>.
     * @alias module:model/ParameterList
     */
    constructor() { 
        
        ParameterList.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ParameterList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ParameterList} obj Optional instance to populate.
     * @return {module:model/ParameterList} The populated <code>ParameterList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ParameterList();

            if (data.hasOwnProperty('Count')) {
                obj['Count'] = ApiClient.convertToType(data['Count'], 'String');
            }
            if (data.hasOwnProperty('Message')) {
                obj['Message'] = ApiClient.convertToType(data['Message'], 'String');
            }
            if (data.hasOwnProperty('ParameterArray')) {
                obj['ParameterArray'] = ParameterArray.constructFromObject(data['ParameterArray']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ParameterList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ParameterList</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Count'] && !(typeof data['Count'] === 'string' || data['Count'] instanceof String)) {
            throw new Error("Expected the field `Count` to be a primitive type in the JSON string but got " + data['Count']);
        }
        // ensure the json data is a string
        if (data['Message'] && !(typeof data['Message'] === 'string' || data['Message'] instanceof String)) {
            throw new Error("Expected the field `Message` to be a primitive type in the JSON string but got " + data['Message']);
        }
        // validate the optional field `ParameterArray`
        if (data['ParameterArray']) { // data not null
          ParameterArray.validateJSON(data['ParameterArray']);
        }

        return true;
    }


}



/**
 * Total number of records returned from the query.
 * @member {String} Count
 */
ParameterList.prototype['Count'] = undefined;

/**
 * Success/Failure.
 * @member {String} Message
 */
ParameterList.prototype['Message'] = undefined;

/**
 * @member {module:model/ParameterArray} ParameterArray
 */
ParameterList.prototype['ParameterArray'] = undefined;






export default ParameterList;

