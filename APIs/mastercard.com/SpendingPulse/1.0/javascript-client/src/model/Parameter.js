/**
 * Spending Pulse
 * This API will provide monthly data which includes metrics such as sales volume and growth rate.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Parameter model module.
 * @module model/Parameter
 * @version 1.0
 */
class Parameter {
    /**
     * Constructs a new <code>Parameter</code>.
     * @alias module:model/Parameter
     */
    constructor() { 
        
        Parameter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Parameter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Parameter} obj Optional instance to populate.
     * @return {module:model/Parameter} The populated <code>Parameter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Parameter();

            if (data.hasOwnProperty('Country')) {
                obj['Country'] = ApiClient.convertToType(data['Country'], 'String');
            }
            if (data.hasOwnProperty('Ecomm')) {
                obj['Ecomm'] = ApiClient.convertToType(data['Ecomm'], 'String');
            }
            if (data.hasOwnProperty('Period')) {
                obj['Period'] = ApiClient.convertToType(data['Period'], 'String');
            }
            if (data.hasOwnProperty('ProductLine')) {
                obj['ProductLine'] = ApiClient.convertToType(data['ProductLine'], 'String');
            }
            if (data.hasOwnProperty('PublicationCoveragePeriod')) {
                obj['PublicationCoveragePeriod'] = ApiClient.convertToType(data['PublicationCoveragePeriod'], 'String');
            }
            if (data.hasOwnProperty('ReportType')) {
                obj['ReportType'] = ApiClient.convertToType(data['ReportType'], 'String');
            }
            if (data.hasOwnProperty('Sector')) {
                obj['Sector'] = ApiClient.convertToType(data['Sector'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Parameter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Parameter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Country'] && !(typeof data['Country'] === 'string' || data['Country'] instanceof String)) {
            throw new Error("Expected the field `Country` to be a primitive type in the JSON string but got " + data['Country']);
        }
        // ensure the json data is a string
        if (data['Ecomm'] && !(typeof data['Ecomm'] === 'string' || data['Ecomm'] instanceof String)) {
            throw new Error("Expected the field `Ecomm` to be a primitive type in the JSON string but got " + data['Ecomm']);
        }
        // ensure the json data is a string
        if (data['Period'] && !(typeof data['Period'] === 'string' || data['Period'] instanceof String)) {
            throw new Error("Expected the field `Period` to be a primitive type in the JSON string but got " + data['Period']);
        }
        // ensure the json data is a string
        if (data['ProductLine'] && !(typeof data['ProductLine'] === 'string' || data['ProductLine'] instanceof String)) {
            throw new Error("Expected the field `ProductLine` to be a primitive type in the JSON string but got " + data['ProductLine']);
        }
        // ensure the json data is a string
        if (data['PublicationCoveragePeriod'] && !(typeof data['PublicationCoveragePeriod'] === 'string' || data['PublicationCoveragePeriod'] instanceof String)) {
            throw new Error("Expected the field `PublicationCoveragePeriod` to be a primitive type in the JSON string but got " + data['PublicationCoveragePeriod']);
        }
        // ensure the json data is a string
        if (data['ReportType'] && !(typeof data['ReportType'] === 'string' || data['ReportType'] instanceof String)) {
            throw new Error("Expected the field `ReportType` to be a primitive type in the JSON string but got " + data['ReportType']);
        }
        // ensure the json data is a string
        if (data['Sector'] && !(typeof data['Sector'] === 'string' || data['Sector'] instanceof String)) {
            throw new Error("Expected the field `Sector` to be a primitive type in the JSON string but got " + data['Sector']);
        }

        return true;
    }


}



/**
 * Country Code.
 * @member {String} Country
 */
Parameter.prototype['Country'] = undefined;

/**
 * Ecommerce indicator. \"yes\" or \"no\" are the options.
 * @member {String} Ecomm
 */
Parameter.prototype['Ecomm'] = undefined;

/**
 * Indicates the period covered by the data with possible values of - day, week, month, quarter, annual
 * @member {String} Period
 */
Parameter.prototype['Period'] = undefined;

/**
 * Product lines available for the consumer ?US Executive Report? and/or ?US Weekly Gasoline Report?.
 * @member {String} ProductLine
 */
Parameter.prototype['ProductLine'] = undefined;

/**
 * Publication Coverage Period indicates what period is to be covered by the current report.
 * @member {String} PublicationCoveragePeriod
 */
Parameter.prototype['PublicationCoveragePeriod'] = undefined;

/**
 * Report type name, today the only report supported is \"monitor\".
 * @member {String} ReportType
 */
Parameter.prototype['ReportType'] = undefined;

/**
 * Sector name/id.
 * @member {String} Sector
 */
Parameter.prototype['Sector'] = undefined;






export default Parameter;

