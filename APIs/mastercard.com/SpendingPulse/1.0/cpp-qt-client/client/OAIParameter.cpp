/**
 * Spending Pulse
 * This API will provide monthly data which includes metrics such as sales volume and growth rate.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParameter::OAIParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParameter::OAIParameter() {
    this->initializeModel();
}

OAIParameter::~OAIParameter() {}

void OAIParameter::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_ecomm_isSet = false;
    m_ecomm_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_product_line_isSet = false;
    m_product_line_isValid = false;

    m_publication_coverage_period_isSet = false;
    m_publication_coverage_period_isValid = false;

    m_report_type_isSet = false;
    m_report_type_isValid = false;

    m_sector_isSet = false;
    m_sector_isValid = false;
}

void OAIParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParameter::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("Country")]);
    m_country_isSet = !json[QString("Country")].isNull() && m_country_isValid;

    m_ecomm_isValid = ::OpenAPI::fromJsonValue(m_ecomm, json[QString("Ecomm")]);
    m_ecomm_isSet = !json[QString("Ecomm")].isNull() && m_ecomm_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("Period")]);
    m_period_isSet = !json[QString("Period")].isNull() && m_period_isValid;

    m_product_line_isValid = ::OpenAPI::fromJsonValue(m_product_line, json[QString("ProductLine")]);
    m_product_line_isSet = !json[QString("ProductLine")].isNull() && m_product_line_isValid;

    m_publication_coverage_period_isValid = ::OpenAPI::fromJsonValue(m_publication_coverage_period, json[QString("PublicationCoveragePeriod")]);
    m_publication_coverage_period_isSet = !json[QString("PublicationCoveragePeriod")].isNull() && m_publication_coverage_period_isValid;

    m_report_type_isValid = ::OpenAPI::fromJsonValue(m_report_type, json[QString("ReportType")]);
    m_report_type_isSet = !json[QString("ReportType")].isNull() && m_report_type_isValid;

    m_sector_isValid = ::OpenAPI::fromJsonValue(m_sector, json[QString("Sector")]);
    m_sector_isSet = !json[QString("Sector")].isNull() && m_sector_isValid;
}

QString OAIParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("Country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_ecomm_isSet) {
        obj.insert(QString("Ecomm"), ::OpenAPI::toJsonValue(m_ecomm));
    }
    if (m_period_isSet) {
        obj.insert(QString("Period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_product_line_isSet) {
        obj.insert(QString("ProductLine"), ::OpenAPI::toJsonValue(m_product_line));
    }
    if (m_publication_coverage_period_isSet) {
        obj.insert(QString("PublicationCoveragePeriod"), ::OpenAPI::toJsonValue(m_publication_coverage_period));
    }
    if (m_report_type_isSet) {
        obj.insert(QString("ReportType"), ::OpenAPI::toJsonValue(m_report_type));
    }
    if (m_sector_isSet) {
        obj.insert(QString("Sector"), ::OpenAPI::toJsonValue(m_sector));
    }
    return obj;
}

QString OAIParameter::getCountry() const {
    return m_country;
}
void OAIParameter::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIParameter::is_country_Set() const{
    return m_country_isSet;
}

bool OAIParameter::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIParameter::getEcomm() const {
    return m_ecomm;
}
void OAIParameter::setEcomm(const QString &ecomm) {
    m_ecomm = ecomm;
    m_ecomm_isSet = true;
}

bool OAIParameter::is_ecomm_Set() const{
    return m_ecomm_isSet;
}

bool OAIParameter::is_ecomm_Valid() const{
    return m_ecomm_isValid;
}

QString OAIParameter::getPeriod() const {
    return m_period;
}
void OAIParameter::setPeriod(const QString &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIParameter::is_period_Set() const{
    return m_period_isSet;
}

bool OAIParameter::is_period_Valid() const{
    return m_period_isValid;
}

QString OAIParameter::getProductLine() const {
    return m_product_line;
}
void OAIParameter::setProductLine(const QString &product_line) {
    m_product_line = product_line;
    m_product_line_isSet = true;
}

bool OAIParameter::is_product_line_Set() const{
    return m_product_line_isSet;
}

bool OAIParameter::is_product_line_Valid() const{
    return m_product_line_isValid;
}

QString OAIParameter::getPublicationCoveragePeriod() const {
    return m_publication_coverage_period;
}
void OAIParameter::setPublicationCoveragePeriod(const QString &publication_coverage_period) {
    m_publication_coverage_period = publication_coverage_period;
    m_publication_coverage_period_isSet = true;
}

bool OAIParameter::is_publication_coverage_period_Set() const{
    return m_publication_coverage_period_isSet;
}

bool OAIParameter::is_publication_coverage_period_Valid() const{
    return m_publication_coverage_period_isValid;
}

QString OAIParameter::getReportType() const {
    return m_report_type;
}
void OAIParameter::setReportType(const QString &report_type) {
    m_report_type = report_type;
    m_report_type_isSet = true;
}

bool OAIParameter::is_report_type_Set() const{
    return m_report_type_isSet;
}

bool OAIParameter::is_report_type_Valid() const{
    return m_report_type_isValid;
}

QString OAIParameter::getSector() const {
    return m_sector;
}
void OAIParameter::setSector(const QString &sector) {
    m_sector = sector;
    m_sector_isSet = true;
}

bool OAIParameter::is_sector_Set() const{
    return m_sector_isSet;
}

bool OAIParameter::is_sector_Valid() const{
    return m_sector_isValid;
}

bool OAIParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ecomm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publication_coverage_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sector_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
