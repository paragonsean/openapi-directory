/**
 * Spending Pulse
 * This API will provide monthly data which includes metrics such as sales volume and growth rate.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpendingPulseRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpendingPulseRecord::OAISpendingPulseRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpendingPulseRecord::OAISpendingPulseRecord() {
    this->initializeModel();
}

OAISpendingPulseRecord::~OAISpendingPulseRecord() {}

void OAISpendingPulseRecord::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_currency_of_for_sales_value_isSet = false;
    m_currency_of_for_sales_value_isValid = false;

    m_ecomm_isSet = false;
    m_ecomm_isValid = false;

    m_implied_deflator_month_over_month_change_isSet = false;
    m_implied_deflator_month_over_month_change_isValid = false;

    m_implied_deflator_year_over_year_change_isSet = false;
    m_implied_deflator_year_over_year_change_isValid = false;

    m_non_gregorian_reporting_period_isSet = false;
    m_non_gregorian_reporting_period_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_period_end_date_isSet = false;
    m_period_end_date_isValid = false;

    m_period_start_date_isSet = false;
    m_period_start_date_isValid = false;

    m_price_adjustment_flag_isSet = false;
    m_price_adjustment_flag_isValid = false;

    m_price_index3_month_moving_average_change_isSet = false;
    m_price_index3_month_moving_average_change_isValid = false;

    m_price_index_month_over_month_change_isSet = false;
    m_price_index_month_over_month_change_isValid = false;

    m_price_index_value_isSet = false;
    m_price_index_value_isValid = false;

    m_price_index_year_over_year_change_isSet = false;
    m_price_index_year_over_year_change_isValid = false;

    m_product_line_isSet = false;
    m_product_line_isValid = false;

    m_publication_coverage_period_isSet = false;
    m_publication_coverage_period_isValid = false;

    m_report_type_isSet = false;
    m_report_type_isValid = false;

    m_reporting_calender_isSet = false;
    m_reporting_calender_isValid = false;

    m_sales3_month_moving_average_change_isSet = false;
    m_sales3_month_moving_average_change_isValid = false;

    m_sales_month_over_month_change_isSet = false;
    m_sales_month_over_month_change_isValid = false;

    m_sales_value_index_isSet = false;
    m_sales_value_index_isValid = false;

    m_sales_year_over_year_change_isSet = false;
    m_sales_year_over_year_change_isValid = false;

    m_sales_year_to_date_change_isSet = false;
    m_sales_year_to_date_change_isValid = false;

    m_same_store_sales_index3_month_moving_average_change_isSet = false;
    m_same_store_sales_index3_month_moving_average_change_isValid = false;

    m_same_store_sales_index_year_over_year_change_isSet = false;
    m_same_store_sales_index_year_over_year_change_isValid = false;

    m_seasonal_adjustment_flag_isSet = false;
    m_seasonal_adjustment_flag_isValid = false;

    m_sector_isSet = false;
    m_sector_isValid = false;

    m_segment_isSet = false;
    m_segment_isValid = false;

    m_sub_geography_value_isSet = false;
    m_sub_geography_value_isValid = false;

    m_sub_sector_isSet = false;
    m_sub_sector_isValid = false;

    m_transaction_index3_month_moving_average_change_isSet = false;
    m_transaction_index3_month_moving_average_change_isValid = false;

    m_transaction_index_month_over_month_change_isSet = false;
    m_transaction_index_month_over_month_change_isValid = false;

    m_transaction_index_value_isSet = false;
    m_transaction_index_value_isValid = false;

    m_transaction_index_year_over_year_change_isSet = false;
    m_transaction_index_year_over_year_change_isValid = false;
}

void OAISpendingPulseRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpendingPulseRecord::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("Country")]);
    m_country_isSet = !json[QString("Country")].isNull() && m_country_isValid;

    m_currency_of_for_sales_value_isValid = ::OpenAPI::fromJsonValue(m_currency_of_for_sales_value, json[QString("CurrencyOfForSalesValue")]);
    m_currency_of_for_sales_value_isSet = !json[QString("CurrencyOfForSalesValue")].isNull() && m_currency_of_for_sales_value_isValid;

    m_ecomm_isValid = ::OpenAPI::fromJsonValue(m_ecomm, json[QString("Ecomm")]);
    m_ecomm_isSet = !json[QString("Ecomm")].isNull() && m_ecomm_isValid;

    m_implied_deflator_month_over_month_change_isValid = ::OpenAPI::fromJsonValue(m_implied_deflator_month_over_month_change, json[QString("ImpliedDeflatorMonthOverMonthChange")]);
    m_implied_deflator_month_over_month_change_isSet = !json[QString("ImpliedDeflatorMonthOverMonthChange")].isNull() && m_implied_deflator_month_over_month_change_isValid;

    m_implied_deflator_year_over_year_change_isValid = ::OpenAPI::fromJsonValue(m_implied_deflator_year_over_year_change, json[QString("ImpliedDeflatorYearOverYearChange")]);
    m_implied_deflator_year_over_year_change_isSet = !json[QString("ImpliedDeflatorYearOverYearChange")].isNull() && m_implied_deflator_year_over_year_change_isValid;

    m_non_gregorian_reporting_period_isValid = ::OpenAPI::fromJsonValue(m_non_gregorian_reporting_period, json[QString("NonGregorianReportingPeriod")]);
    m_non_gregorian_reporting_period_isSet = !json[QString("NonGregorianReportingPeriod")].isNull() && m_non_gregorian_reporting_period_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("Period")]);
    m_period_isSet = !json[QString("Period")].isNull() && m_period_isValid;

    m_period_end_date_isValid = ::OpenAPI::fromJsonValue(m_period_end_date, json[QString("PeriodEndDate")]);
    m_period_end_date_isSet = !json[QString("PeriodEndDate")].isNull() && m_period_end_date_isValid;

    m_period_start_date_isValid = ::OpenAPI::fromJsonValue(m_period_start_date, json[QString("PeriodStartDate")]);
    m_period_start_date_isSet = !json[QString("PeriodStartDate")].isNull() && m_period_start_date_isValid;

    m_price_adjustment_flag_isValid = ::OpenAPI::fromJsonValue(m_price_adjustment_flag, json[QString("PriceAdjustmentFlag")]);
    m_price_adjustment_flag_isSet = !json[QString("PriceAdjustmentFlag")].isNull() && m_price_adjustment_flag_isValid;

    m_price_index3_month_moving_average_change_isValid = ::OpenAPI::fromJsonValue(m_price_index3_month_moving_average_change, json[QString("PriceIndex3MonthMovingAverageChange")]);
    m_price_index3_month_moving_average_change_isSet = !json[QString("PriceIndex3MonthMovingAverageChange")].isNull() && m_price_index3_month_moving_average_change_isValid;

    m_price_index_month_over_month_change_isValid = ::OpenAPI::fromJsonValue(m_price_index_month_over_month_change, json[QString("PriceIndexMonthOverMonthChange")]);
    m_price_index_month_over_month_change_isSet = !json[QString("PriceIndexMonthOverMonthChange")].isNull() && m_price_index_month_over_month_change_isValid;

    m_price_index_value_isValid = ::OpenAPI::fromJsonValue(m_price_index_value, json[QString("PriceIndexValue")]);
    m_price_index_value_isSet = !json[QString("PriceIndexValue")].isNull() && m_price_index_value_isValid;

    m_price_index_year_over_year_change_isValid = ::OpenAPI::fromJsonValue(m_price_index_year_over_year_change, json[QString("PriceIndexYearOverYearChange")]);
    m_price_index_year_over_year_change_isSet = !json[QString("PriceIndexYearOverYearChange")].isNull() && m_price_index_year_over_year_change_isValid;

    m_product_line_isValid = ::OpenAPI::fromJsonValue(m_product_line, json[QString("ProductLine")]);
    m_product_line_isSet = !json[QString("ProductLine")].isNull() && m_product_line_isValid;

    m_publication_coverage_period_isValid = ::OpenAPI::fromJsonValue(m_publication_coverage_period, json[QString("PublicationCoveragePeriod")]);
    m_publication_coverage_period_isSet = !json[QString("PublicationCoveragePeriod")].isNull() && m_publication_coverage_period_isValid;

    m_report_type_isValid = ::OpenAPI::fromJsonValue(m_report_type, json[QString("ReportType")]);
    m_report_type_isSet = !json[QString("ReportType")].isNull() && m_report_type_isValid;

    m_reporting_calender_isValid = ::OpenAPI::fromJsonValue(m_reporting_calender, json[QString("ReportingCalender")]);
    m_reporting_calender_isSet = !json[QString("ReportingCalender")].isNull() && m_reporting_calender_isValid;

    m_sales3_month_moving_average_change_isValid = ::OpenAPI::fromJsonValue(m_sales3_month_moving_average_change, json[QString("Sales3MonthMovingAverageChange")]);
    m_sales3_month_moving_average_change_isSet = !json[QString("Sales3MonthMovingAverageChange")].isNull() && m_sales3_month_moving_average_change_isValid;

    m_sales_month_over_month_change_isValid = ::OpenAPI::fromJsonValue(m_sales_month_over_month_change, json[QString("SalesMonthOverMonthChange")]);
    m_sales_month_over_month_change_isSet = !json[QString("SalesMonthOverMonthChange")].isNull() && m_sales_month_over_month_change_isValid;

    m_sales_value_index_isValid = ::OpenAPI::fromJsonValue(m_sales_value_index, json[QString("SalesValueIndex")]);
    m_sales_value_index_isSet = !json[QString("SalesValueIndex")].isNull() && m_sales_value_index_isValid;

    m_sales_year_over_year_change_isValid = ::OpenAPI::fromJsonValue(m_sales_year_over_year_change, json[QString("SalesYearOverYearChange")]);
    m_sales_year_over_year_change_isSet = !json[QString("SalesYearOverYearChange")].isNull() && m_sales_year_over_year_change_isValid;

    m_sales_year_to_date_change_isValid = ::OpenAPI::fromJsonValue(m_sales_year_to_date_change, json[QString("SalesYearToDateChange")]);
    m_sales_year_to_date_change_isSet = !json[QString("SalesYearToDateChange")].isNull() && m_sales_year_to_date_change_isValid;

    m_same_store_sales_index3_month_moving_average_change_isValid = ::OpenAPI::fromJsonValue(m_same_store_sales_index3_month_moving_average_change, json[QString("SameStoreSalesIndex3MonthMovingAverageChange")]);
    m_same_store_sales_index3_month_moving_average_change_isSet = !json[QString("SameStoreSalesIndex3MonthMovingAverageChange")].isNull() && m_same_store_sales_index3_month_moving_average_change_isValid;

    m_same_store_sales_index_year_over_year_change_isValid = ::OpenAPI::fromJsonValue(m_same_store_sales_index_year_over_year_change, json[QString("SameStoreSalesIndexYearOverYearChange")]);
    m_same_store_sales_index_year_over_year_change_isSet = !json[QString("SameStoreSalesIndexYearOverYearChange")].isNull() && m_same_store_sales_index_year_over_year_change_isValid;

    m_seasonal_adjustment_flag_isValid = ::OpenAPI::fromJsonValue(m_seasonal_adjustment_flag, json[QString("SeasonalAdjustmentFlag")]);
    m_seasonal_adjustment_flag_isSet = !json[QString("SeasonalAdjustmentFlag")].isNull() && m_seasonal_adjustment_flag_isValid;

    m_sector_isValid = ::OpenAPI::fromJsonValue(m_sector, json[QString("Sector")]);
    m_sector_isSet = !json[QString("Sector")].isNull() && m_sector_isValid;

    m_segment_isValid = ::OpenAPI::fromJsonValue(m_segment, json[QString("Segment")]);
    m_segment_isSet = !json[QString("Segment")].isNull() && m_segment_isValid;

    m_sub_geography_value_isValid = ::OpenAPI::fromJsonValue(m_sub_geography_value, json[QString("SubGeographyValue")]);
    m_sub_geography_value_isSet = !json[QString("SubGeographyValue")].isNull() && m_sub_geography_value_isValid;

    m_sub_sector_isValid = ::OpenAPI::fromJsonValue(m_sub_sector, json[QString("SubSector")]);
    m_sub_sector_isSet = !json[QString("SubSector")].isNull() && m_sub_sector_isValid;

    m_transaction_index3_month_moving_average_change_isValid = ::OpenAPI::fromJsonValue(m_transaction_index3_month_moving_average_change, json[QString("TransactionIndex3MonthMovingAverageChange")]);
    m_transaction_index3_month_moving_average_change_isSet = !json[QString("TransactionIndex3MonthMovingAverageChange")].isNull() && m_transaction_index3_month_moving_average_change_isValid;

    m_transaction_index_month_over_month_change_isValid = ::OpenAPI::fromJsonValue(m_transaction_index_month_over_month_change, json[QString("TransactionIndexMonthOverMonthChange")]);
    m_transaction_index_month_over_month_change_isSet = !json[QString("TransactionIndexMonthOverMonthChange")].isNull() && m_transaction_index_month_over_month_change_isValid;

    m_transaction_index_value_isValid = ::OpenAPI::fromJsonValue(m_transaction_index_value, json[QString("TransactionIndexValue")]);
    m_transaction_index_value_isSet = !json[QString("TransactionIndexValue")].isNull() && m_transaction_index_value_isValid;

    m_transaction_index_year_over_year_change_isValid = ::OpenAPI::fromJsonValue(m_transaction_index_year_over_year_change, json[QString("TransactionIndexYearOverYearChange")]);
    m_transaction_index_year_over_year_change_isSet = !json[QString("TransactionIndexYearOverYearChange")].isNull() && m_transaction_index_year_over_year_change_isValid;
}

QString OAISpendingPulseRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpendingPulseRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("Country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_currency_of_for_sales_value_isSet) {
        obj.insert(QString("CurrencyOfForSalesValue"), ::OpenAPI::toJsonValue(m_currency_of_for_sales_value));
    }
    if (m_ecomm_isSet) {
        obj.insert(QString("Ecomm"), ::OpenAPI::toJsonValue(m_ecomm));
    }
    if (m_implied_deflator_month_over_month_change_isSet) {
        obj.insert(QString("ImpliedDeflatorMonthOverMonthChange"), ::OpenAPI::toJsonValue(m_implied_deflator_month_over_month_change));
    }
    if (m_implied_deflator_year_over_year_change_isSet) {
        obj.insert(QString("ImpliedDeflatorYearOverYearChange"), ::OpenAPI::toJsonValue(m_implied_deflator_year_over_year_change));
    }
    if (m_non_gregorian_reporting_period_isSet) {
        obj.insert(QString("NonGregorianReportingPeriod"), ::OpenAPI::toJsonValue(m_non_gregorian_reporting_period));
    }
    if (m_period_isSet) {
        obj.insert(QString("Period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_period_end_date_isSet) {
        obj.insert(QString("PeriodEndDate"), ::OpenAPI::toJsonValue(m_period_end_date));
    }
    if (m_period_start_date_isSet) {
        obj.insert(QString("PeriodStartDate"), ::OpenAPI::toJsonValue(m_period_start_date));
    }
    if (m_price_adjustment_flag_isSet) {
        obj.insert(QString("PriceAdjustmentFlag"), ::OpenAPI::toJsonValue(m_price_adjustment_flag));
    }
    if (m_price_index3_month_moving_average_change_isSet) {
        obj.insert(QString("PriceIndex3MonthMovingAverageChange"), ::OpenAPI::toJsonValue(m_price_index3_month_moving_average_change));
    }
    if (m_price_index_month_over_month_change_isSet) {
        obj.insert(QString("PriceIndexMonthOverMonthChange"), ::OpenAPI::toJsonValue(m_price_index_month_over_month_change));
    }
    if (m_price_index_value_isSet) {
        obj.insert(QString("PriceIndexValue"), ::OpenAPI::toJsonValue(m_price_index_value));
    }
    if (m_price_index_year_over_year_change_isSet) {
        obj.insert(QString("PriceIndexYearOverYearChange"), ::OpenAPI::toJsonValue(m_price_index_year_over_year_change));
    }
    if (m_product_line_isSet) {
        obj.insert(QString("ProductLine"), ::OpenAPI::toJsonValue(m_product_line));
    }
    if (m_publication_coverage_period_isSet) {
        obj.insert(QString("PublicationCoveragePeriod"), ::OpenAPI::toJsonValue(m_publication_coverage_period));
    }
    if (m_report_type_isSet) {
        obj.insert(QString("ReportType"), ::OpenAPI::toJsonValue(m_report_type));
    }
    if (m_reporting_calender_isSet) {
        obj.insert(QString("ReportingCalender"), ::OpenAPI::toJsonValue(m_reporting_calender));
    }
    if (m_sales3_month_moving_average_change_isSet) {
        obj.insert(QString("Sales3MonthMovingAverageChange"), ::OpenAPI::toJsonValue(m_sales3_month_moving_average_change));
    }
    if (m_sales_month_over_month_change_isSet) {
        obj.insert(QString("SalesMonthOverMonthChange"), ::OpenAPI::toJsonValue(m_sales_month_over_month_change));
    }
    if (m_sales_value_index_isSet) {
        obj.insert(QString("SalesValueIndex"), ::OpenAPI::toJsonValue(m_sales_value_index));
    }
    if (m_sales_year_over_year_change_isSet) {
        obj.insert(QString("SalesYearOverYearChange"), ::OpenAPI::toJsonValue(m_sales_year_over_year_change));
    }
    if (m_sales_year_to_date_change_isSet) {
        obj.insert(QString("SalesYearToDateChange"), ::OpenAPI::toJsonValue(m_sales_year_to_date_change));
    }
    if (m_same_store_sales_index3_month_moving_average_change_isSet) {
        obj.insert(QString("SameStoreSalesIndex3MonthMovingAverageChange"), ::OpenAPI::toJsonValue(m_same_store_sales_index3_month_moving_average_change));
    }
    if (m_same_store_sales_index_year_over_year_change_isSet) {
        obj.insert(QString("SameStoreSalesIndexYearOverYearChange"), ::OpenAPI::toJsonValue(m_same_store_sales_index_year_over_year_change));
    }
    if (m_seasonal_adjustment_flag_isSet) {
        obj.insert(QString("SeasonalAdjustmentFlag"), ::OpenAPI::toJsonValue(m_seasonal_adjustment_flag));
    }
    if (m_sector_isSet) {
        obj.insert(QString("Sector"), ::OpenAPI::toJsonValue(m_sector));
    }
    if (m_segment_isSet) {
        obj.insert(QString("Segment"), ::OpenAPI::toJsonValue(m_segment));
    }
    if (m_sub_geography_value_isSet) {
        obj.insert(QString("SubGeographyValue"), ::OpenAPI::toJsonValue(m_sub_geography_value));
    }
    if (m_sub_sector_isSet) {
        obj.insert(QString("SubSector"), ::OpenAPI::toJsonValue(m_sub_sector));
    }
    if (m_transaction_index3_month_moving_average_change_isSet) {
        obj.insert(QString("TransactionIndex3MonthMovingAverageChange"), ::OpenAPI::toJsonValue(m_transaction_index3_month_moving_average_change));
    }
    if (m_transaction_index_month_over_month_change_isSet) {
        obj.insert(QString("TransactionIndexMonthOverMonthChange"), ::OpenAPI::toJsonValue(m_transaction_index_month_over_month_change));
    }
    if (m_transaction_index_value_isSet) {
        obj.insert(QString("TransactionIndexValue"), ::OpenAPI::toJsonValue(m_transaction_index_value));
    }
    if (m_transaction_index_year_over_year_change_isSet) {
        obj.insert(QString("TransactionIndexYearOverYearChange"), ::OpenAPI::toJsonValue(m_transaction_index_year_over_year_change));
    }
    return obj;
}

QString OAISpendingPulseRecord::getCountry() const {
    return m_country;
}
void OAISpendingPulseRecord::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAISpendingPulseRecord::is_country_Set() const{
    return m_country_isSet;
}

bool OAISpendingPulseRecord::is_country_Valid() const{
    return m_country_isValid;
}

QString OAISpendingPulseRecord::getCurrencyOfForSalesValue() const {
    return m_currency_of_for_sales_value;
}
void OAISpendingPulseRecord::setCurrencyOfForSalesValue(const QString &currency_of_for_sales_value) {
    m_currency_of_for_sales_value = currency_of_for_sales_value;
    m_currency_of_for_sales_value_isSet = true;
}

bool OAISpendingPulseRecord::is_currency_of_for_sales_value_Set() const{
    return m_currency_of_for_sales_value_isSet;
}

bool OAISpendingPulseRecord::is_currency_of_for_sales_value_Valid() const{
    return m_currency_of_for_sales_value_isValid;
}

QString OAISpendingPulseRecord::getEcomm() const {
    return m_ecomm;
}
void OAISpendingPulseRecord::setEcomm(const QString &ecomm) {
    m_ecomm = ecomm;
    m_ecomm_isSet = true;
}

bool OAISpendingPulseRecord::is_ecomm_Set() const{
    return m_ecomm_isSet;
}

bool OAISpendingPulseRecord::is_ecomm_Valid() const{
    return m_ecomm_isValid;
}

QString OAISpendingPulseRecord::getImpliedDeflatorMonthOverMonthChange() const {
    return m_implied_deflator_month_over_month_change;
}
void OAISpendingPulseRecord::setImpliedDeflatorMonthOverMonthChange(const QString &implied_deflator_month_over_month_change) {
    m_implied_deflator_month_over_month_change = implied_deflator_month_over_month_change;
    m_implied_deflator_month_over_month_change_isSet = true;
}

bool OAISpendingPulseRecord::is_implied_deflator_month_over_month_change_Set() const{
    return m_implied_deflator_month_over_month_change_isSet;
}

bool OAISpendingPulseRecord::is_implied_deflator_month_over_month_change_Valid() const{
    return m_implied_deflator_month_over_month_change_isValid;
}

QString OAISpendingPulseRecord::getImpliedDeflatorYearOverYearChange() const {
    return m_implied_deflator_year_over_year_change;
}
void OAISpendingPulseRecord::setImpliedDeflatorYearOverYearChange(const QString &implied_deflator_year_over_year_change) {
    m_implied_deflator_year_over_year_change = implied_deflator_year_over_year_change;
    m_implied_deflator_year_over_year_change_isSet = true;
}

bool OAISpendingPulseRecord::is_implied_deflator_year_over_year_change_Set() const{
    return m_implied_deflator_year_over_year_change_isSet;
}

bool OAISpendingPulseRecord::is_implied_deflator_year_over_year_change_Valid() const{
    return m_implied_deflator_year_over_year_change_isValid;
}

QString OAISpendingPulseRecord::getNonGregorianReportingPeriod() const {
    return m_non_gregorian_reporting_period;
}
void OAISpendingPulseRecord::setNonGregorianReportingPeriod(const QString &non_gregorian_reporting_period) {
    m_non_gregorian_reporting_period = non_gregorian_reporting_period;
    m_non_gregorian_reporting_period_isSet = true;
}

bool OAISpendingPulseRecord::is_non_gregorian_reporting_period_Set() const{
    return m_non_gregorian_reporting_period_isSet;
}

bool OAISpendingPulseRecord::is_non_gregorian_reporting_period_Valid() const{
    return m_non_gregorian_reporting_period_isValid;
}

QString OAISpendingPulseRecord::getPeriod() const {
    return m_period;
}
void OAISpendingPulseRecord::setPeriod(const QString &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAISpendingPulseRecord::is_period_Set() const{
    return m_period_isSet;
}

bool OAISpendingPulseRecord::is_period_Valid() const{
    return m_period_isValid;
}

QString OAISpendingPulseRecord::getPeriodEndDate() const {
    return m_period_end_date;
}
void OAISpendingPulseRecord::setPeriodEndDate(const QString &period_end_date) {
    m_period_end_date = period_end_date;
    m_period_end_date_isSet = true;
}

bool OAISpendingPulseRecord::is_period_end_date_Set() const{
    return m_period_end_date_isSet;
}

bool OAISpendingPulseRecord::is_period_end_date_Valid() const{
    return m_period_end_date_isValid;
}

QString OAISpendingPulseRecord::getPeriodStartDate() const {
    return m_period_start_date;
}
void OAISpendingPulseRecord::setPeriodStartDate(const QString &period_start_date) {
    m_period_start_date = period_start_date;
    m_period_start_date_isSet = true;
}

bool OAISpendingPulseRecord::is_period_start_date_Set() const{
    return m_period_start_date_isSet;
}

bool OAISpendingPulseRecord::is_period_start_date_Valid() const{
    return m_period_start_date_isValid;
}

QString OAISpendingPulseRecord::getPriceAdjustmentFlag() const {
    return m_price_adjustment_flag;
}
void OAISpendingPulseRecord::setPriceAdjustmentFlag(const QString &price_adjustment_flag) {
    m_price_adjustment_flag = price_adjustment_flag;
    m_price_adjustment_flag_isSet = true;
}

bool OAISpendingPulseRecord::is_price_adjustment_flag_Set() const{
    return m_price_adjustment_flag_isSet;
}

bool OAISpendingPulseRecord::is_price_adjustment_flag_Valid() const{
    return m_price_adjustment_flag_isValid;
}

QString OAISpendingPulseRecord::getPriceIndex3MonthMovingAverageChange() const {
    return m_price_index3_month_moving_average_change;
}
void OAISpendingPulseRecord::setPriceIndex3MonthMovingAverageChange(const QString &price_index3_month_moving_average_change) {
    m_price_index3_month_moving_average_change = price_index3_month_moving_average_change;
    m_price_index3_month_moving_average_change_isSet = true;
}

bool OAISpendingPulseRecord::is_price_index3_month_moving_average_change_Set() const{
    return m_price_index3_month_moving_average_change_isSet;
}

bool OAISpendingPulseRecord::is_price_index3_month_moving_average_change_Valid() const{
    return m_price_index3_month_moving_average_change_isValid;
}

QString OAISpendingPulseRecord::getPriceIndexMonthOverMonthChange() const {
    return m_price_index_month_over_month_change;
}
void OAISpendingPulseRecord::setPriceIndexMonthOverMonthChange(const QString &price_index_month_over_month_change) {
    m_price_index_month_over_month_change = price_index_month_over_month_change;
    m_price_index_month_over_month_change_isSet = true;
}

bool OAISpendingPulseRecord::is_price_index_month_over_month_change_Set() const{
    return m_price_index_month_over_month_change_isSet;
}

bool OAISpendingPulseRecord::is_price_index_month_over_month_change_Valid() const{
    return m_price_index_month_over_month_change_isValid;
}

QString OAISpendingPulseRecord::getPriceIndexValue() const {
    return m_price_index_value;
}
void OAISpendingPulseRecord::setPriceIndexValue(const QString &price_index_value) {
    m_price_index_value = price_index_value;
    m_price_index_value_isSet = true;
}

bool OAISpendingPulseRecord::is_price_index_value_Set() const{
    return m_price_index_value_isSet;
}

bool OAISpendingPulseRecord::is_price_index_value_Valid() const{
    return m_price_index_value_isValid;
}

QString OAISpendingPulseRecord::getPriceIndexYearOverYearChange() const {
    return m_price_index_year_over_year_change;
}
void OAISpendingPulseRecord::setPriceIndexYearOverYearChange(const QString &price_index_year_over_year_change) {
    m_price_index_year_over_year_change = price_index_year_over_year_change;
    m_price_index_year_over_year_change_isSet = true;
}

bool OAISpendingPulseRecord::is_price_index_year_over_year_change_Set() const{
    return m_price_index_year_over_year_change_isSet;
}

bool OAISpendingPulseRecord::is_price_index_year_over_year_change_Valid() const{
    return m_price_index_year_over_year_change_isValid;
}

QString OAISpendingPulseRecord::getProductLine() const {
    return m_product_line;
}
void OAISpendingPulseRecord::setProductLine(const QString &product_line) {
    m_product_line = product_line;
    m_product_line_isSet = true;
}

bool OAISpendingPulseRecord::is_product_line_Set() const{
    return m_product_line_isSet;
}

bool OAISpendingPulseRecord::is_product_line_Valid() const{
    return m_product_line_isValid;
}

QString OAISpendingPulseRecord::getPublicationCoveragePeriod() const {
    return m_publication_coverage_period;
}
void OAISpendingPulseRecord::setPublicationCoveragePeriod(const QString &publication_coverage_period) {
    m_publication_coverage_period = publication_coverage_period;
    m_publication_coverage_period_isSet = true;
}

bool OAISpendingPulseRecord::is_publication_coverage_period_Set() const{
    return m_publication_coverage_period_isSet;
}

bool OAISpendingPulseRecord::is_publication_coverage_period_Valid() const{
    return m_publication_coverage_period_isValid;
}

QString OAISpendingPulseRecord::getReportType() const {
    return m_report_type;
}
void OAISpendingPulseRecord::setReportType(const QString &report_type) {
    m_report_type = report_type;
    m_report_type_isSet = true;
}

bool OAISpendingPulseRecord::is_report_type_Set() const{
    return m_report_type_isSet;
}

bool OAISpendingPulseRecord::is_report_type_Valid() const{
    return m_report_type_isValid;
}

QString OAISpendingPulseRecord::getReportingCalender() const {
    return m_reporting_calender;
}
void OAISpendingPulseRecord::setReportingCalender(const QString &reporting_calender) {
    m_reporting_calender = reporting_calender;
    m_reporting_calender_isSet = true;
}

bool OAISpendingPulseRecord::is_reporting_calender_Set() const{
    return m_reporting_calender_isSet;
}

bool OAISpendingPulseRecord::is_reporting_calender_Valid() const{
    return m_reporting_calender_isValid;
}

QString OAISpendingPulseRecord::getSales3MonthMovingAverageChange() const {
    return m_sales3_month_moving_average_change;
}
void OAISpendingPulseRecord::setSales3MonthMovingAverageChange(const QString &sales3_month_moving_average_change) {
    m_sales3_month_moving_average_change = sales3_month_moving_average_change;
    m_sales3_month_moving_average_change_isSet = true;
}

bool OAISpendingPulseRecord::is_sales3_month_moving_average_change_Set() const{
    return m_sales3_month_moving_average_change_isSet;
}

bool OAISpendingPulseRecord::is_sales3_month_moving_average_change_Valid() const{
    return m_sales3_month_moving_average_change_isValid;
}

QString OAISpendingPulseRecord::getSalesMonthOverMonthChange() const {
    return m_sales_month_over_month_change;
}
void OAISpendingPulseRecord::setSalesMonthOverMonthChange(const QString &sales_month_over_month_change) {
    m_sales_month_over_month_change = sales_month_over_month_change;
    m_sales_month_over_month_change_isSet = true;
}

bool OAISpendingPulseRecord::is_sales_month_over_month_change_Set() const{
    return m_sales_month_over_month_change_isSet;
}

bool OAISpendingPulseRecord::is_sales_month_over_month_change_Valid() const{
    return m_sales_month_over_month_change_isValid;
}

QString OAISpendingPulseRecord::getSalesValueIndex() const {
    return m_sales_value_index;
}
void OAISpendingPulseRecord::setSalesValueIndex(const QString &sales_value_index) {
    m_sales_value_index = sales_value_index;
    m_sales_value_index_isSet = true;
}

bool OAISpendingPulseRecord::is_sales_value_index_Set() const{
    return m_sales_value_index_isSet;
}

bool OAISpendingPulseRecord::is_sales_value_index_Valid() const{
    return m_sales_value_index_isValid;
}

QString OAISpendingPulseRecord::getSalesYearOverYearChange() const {
    return m_sales_year_over_year_change;
}
void OAISpendingPulseRecord::setSalesYearOverYearChange(const QString &sales_year_over_year_change) {
    m_sales_year_over_year_change = sales_year_over_year_change;
    m_sales_year_over_year_change_isSet = true;
}

bool OAISpendingPulseRecord::is_sales_year_over_year_change_Set() const{
    return m_sales_year_over_year_change_isSet;
}

bool OAISpendingPulseRecord::is_sales_year_over_year_change_Valid() const{
    return m_sales_year_over_year_change_isValid;
}

QString OAISpendingPulseRecord::getSalesYearToDateChange() const {
    return m_sales_year_to_date_change;
}
void OAISpendingPulseRecord::setSalesYearToDateChange(const QString &sales_year_to_date_change) {
    m_sales_year_to_date_change = sales_year_to_date_change;
    m_sales_year_to_date_change_isSet = true;
}

bool OAISpendingPulseRecord::is_sales_year_to_date_change_Set() const{
    return m_sales_year_to_date_change_isSet;
}

bool OAISpendingPulseRecord::is_sales_year_to_date_change_Valid() const{
    return m_sales_year_to_date_change_isValid;
}

QString OAISpendingPulseRecord::getSameStoreSalesIndex3MonthMovingAverageChange() const {
    return m_same_store_sales_index3_month_moving_average_change;
}
void OAISpendingPulseRecord::setSameStoreSalesIndex3MonthMovingAverageChange(const QString &same_store_sales_index3_month_moving_average_change) {
    m_same_store_sales_index3_month_moving_average_change = same_store_sales_index3_month_moving_average_change;
    m_same_store_sales_index3_month_moving_average_change_isSet = true;
}

bool OAISpendingPulseRecord::is_same_store_sales_index3_month_moving_average_change_Set() const{
    return m_same_store_sales_index3_month_moving_average_change_isSet;
}

bool OAISpendingPulseRecord::is_same_store_sales_index3_month_moving_average_change_Valid() const{
    return m_same_store_sales_index3_month_moving_average_change_isValid;
}

QString OAISpendingPulseRecord::getSameStoreSalesIndexYearOverYearChange() const {
    return m_same_store_sales_index_year_over_year_change;
}
void OAISpendingPulseRecord::setSameStoreSalesIndexYearOverYearChange(const QString &same_store_sales_index_year_over_year_change) {
    m_same_store_sales_index_year_over_year_change = same_store_sales_index_year_over_year_change;
    m_same_store_sales_index_year_over_year_change_isSet = true;
}

bool OAISpendingPulseRecord::is_same_store_sales_index_year_over_year_change_Set() const{
    return m_same_store_sales_index_year_over_year_change_isSet;
}

bool OAISpendingPulseRecord::is_same_store_sales_index_year_over_year_change_Valid() const{
    return m_same_store_sales_index_year_over_year_change_isValid;
}

QString OAISpendingPulseRecord::getSeasonalAdjustmentFlag() const {
    return m_seasonal_adjustment_flag;
}
void OAISpendingPulseRecord::setSeasonalAdjustmentFlag(const QString &seasonal_adjustment_flag) {
    m_seasonal_adjustment_flag = seasonal_adjustment_flag;
    m_seasonal_adjustment_flag_isSet = true;
}

bool OAISpendingPulseRecord::is_seasonal_adjustment_flag_Set() const{
    return m_seasonal_adjustment_flag_isSet;
}

bool OAISpendingPulseRecord::is_seasonal_adjustment_flag_Valid() const{
    return m_seasonal_adjustment_flag_isValid;
}

QString OAISpendingPulseRecord::getSector() const {
    return m_sector;
}
void OAISpendingPulseRecord::setSector(const QString &sector) {
    m_sector = sector;
    m_sector_isSet = true;
}

bool OAISpendingPulseRecord::is_sector_Set() const{
    return m_sector_isSet;
}

bool OAISpendingPulseRecord::is_sector_Valid() const{
    return m_sector_isValid;
}

QString OAISpendingPulseRecord::getSegment() const {
    return m_segment;
}
void OAISpendingPulseRecord::setSegment(const QString &segment) {
    m_segment = segment;
    m_segment_isSet = true;
}

bool OAISpendingPulseRecord::is_segment_Set() const{
    return m_segment_isSet;
}

bool OAISpendingPulseRecord::is_segment_Valid() const{
    return m_segment_isValid;
}

QString OAISpendingPulseRecord::getSubGeographyValue() const {
    return m_sub_geography_value;
}
void OAISpendingPulseRecord::setSubGeographyValue(const QString &sub_geography_value) {
    m_sub_geography_value = sub_geography_value;
    m_sub_geography_value_isSet = true;
}

bool OAISpendingPulseRecord::is_sub_geography_value_Set() const{
    return m_sub_geography_value_isSet;
}

bool OAISpendingPulseRecord::is_sub_geography_value_Valid() const{
    return m_sub_geography_value_isValid;
}

QString OAISpendingPulseRecord::getSubSector() const {
    return m_sub_sector;
}
void OAISpendingPulseRecord::setSubSector(const QString &sub_sector) {
    m_sub_sector = sub_sector;
    m_sub_sector_isSet = true;
}

bool OAISpendingPulseRecord::is_sub_sector_Set() const{
    return m_sub_sector_isSet;
}

bool OAISpendingPulseRecord::is_sub_sector_Valid() const{
    return m_sub_sector_isValid;
}

QString OAISpendingPulseRecord::getTransactionIndex3MonthMovingAverageChange() const {
    return m_transaction_index3_month_moving_average_change;
}
void OAISpendingPulseRecord::setTransactionIndex3MonthMovingAverageChange(const QString &transaction_index3_month_moving_average_change) {
    m_transaction_index3_month_moving_average_change = transaction_index3_month_moving_average_change;
    m_transaction_index3_month_moving_average_change_isSet = true;
}

bool OAISpendingPulseRecord::is_transaction_index3_month_moving_average_change_Set() const{
    return m_transaction_index3_month_moving_average_change_isSet;
}

bool OAISpendingPulseRecord::is_transaction_index3_month_moving_average_change_Valid() const{
    return m_transaction_index3_month_moving_average_change_isValid;
}

QString OAISpendingPulseRecord::getTransactionIndexMonthOverMonthChange() const {
    return m_transaction_index_month_over_month_change;
}
void OAISpendingPulseRecord::setTransactionIndexMonthOverMonthChange(const QString &transaction_index_month_over_month_change) {
    m_transaction_index_month_over_month_change = transaction_index_month_over_month_change;
    m_transaction_index_month_over_month_change_isSet = true;
}

bool OAISpendingPulseRecord::is_transaction_index_month_over_month_change_Set() const{
    return m_transaction_index_month_over_month_change_isSet;
}

bool OAISpendingPulseRecord::is_transaction_index_month_over_month_change_Valid() const{
    return m_transaction_index_month_over_month_change_isValid;
}

QString OAISpendingPulseRecord::getTransactionIndexValue() const {
    return m_transaction_index_value;
}
void OAISpendingPulseRecord::setTransactionIndexValue(const QString &transaction_index_value) {
    m_transaction_index_value = transaction_index_value;
    m_transaction_index_value_isSet = true;
}

bool OAISpendingPulseRecord::is_transaction_index_value_Set() const{
    return m_transaction_index_value_isSet;
}

bool OAISpendingPulseRecord::is_transaction_index_value_Valid() const{
    return m_transaction_index_value_isValid;
}

QString OAISpendingPulseRecord::getTransactionIndexYearOverYearChange() const {
    return m_transaction_index_year_over_year_change;
}
void OAISpendingPulseRecord::setTransactionIndexYearOverYearChange(const QString &transaction_index_year_over_year_change) {
    m_transaction_index_year_over_year_change = transaction_index_year_over_year_change;
    m_transaction_index_year_over_year_change_isSet = true;
}

bool OAISpendingPulseRecord::is_transaction_index_year_over_year_change_Set() const{
    return m_transaction_index_year_over_year_change_isSet;
}

bool OAISpendingPulseRecord::is_transaction_index_year_over_year_change_Valid() const{
    return m_transaction_index_year_over_year_change_isValid;
}

bool OAISpendingPulseRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_of_for_sales_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ecomm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_implied_deflator_month_over_month_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_implied_deflator_year_over_year_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_gregorian_reporting_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_adjustment_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_index3_month_moving_average_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_index_month_over_month_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_index_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_index_year_over_year_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publication_coverage_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reporting_calender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales3_month_moving_average_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_month_over_month_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_value_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_year_over_year_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_year_to_date_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_same_store_sales_index3_month_moving_average_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_same_store_sales_index_year_over_year_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seasonal_adjustment_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_geography_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_sector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_index3_month_moving_average_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_index_month_over_month_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_index_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_index_year_over_year_change_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpendingPulseRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
