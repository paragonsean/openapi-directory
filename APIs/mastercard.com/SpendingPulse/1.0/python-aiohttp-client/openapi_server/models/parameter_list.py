# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parameter_array import ParameterArray
from openapi_server import util


class ParameterList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: str=None, message: str=None, parameter_array: ParameterArray=None):
        """ParameterList - a model defined in OpenAPI

        :param count: The count of this ParameterList.
        :param message: The message of this ParameterList.
        :param parameter_array: The parameter_array of this ParameterList.
        """
        self.openapi_types = {
            'count': str,
            'message': str,
            'parameter_array': ParameterArray
        }

        self.attribute_map = {
            'count': 'Count',
            'message': 'Message',
            'parameter_array': 'ParameterArray'
        }

        self._count = count
        self._message = message
        self._parameter_array = parameter_array

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParameterList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParameterList of this ParameterList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this ParameterList.

        Total number of records returned from the query.

        :return: The count of this ParameterList.
        :rtype: str
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ParameterList.

        Total number of records returned from the query.

        :param count: The count of this ParameterList.
        :type count: str
        """

        self._count = count

    @property
    def message(self):
        """Gets the message of this ParameterList.

        Success/Failure.

        :return: The message of this ParameterList.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ParameterList.

        Success/Failure.

        :param message: The message of this ParameterList.
        :type message: str
        """

        self._message = message

    @property
    def parameter_array(self):
        """Gets the parameter_array of this ParameterList.


        :return: The parameter_array of this ParameterList.
        :rtype: ParameterArray
        """
        return self._parameter_array

    @parameter_array.setter
    def parameter_array(self, parameter_array):
        """Sets the parameter_array of this ParameterList.


        :param parameter_array: The parameter_array of this ParameterList.
        :type parameter_array: ParameterArray
        """

        self._parameter_array = parameter_array
