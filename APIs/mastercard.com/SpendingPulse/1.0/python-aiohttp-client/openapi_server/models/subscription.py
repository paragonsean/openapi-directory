# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, ecomm: str=None, period: str=None, report_type: str=None, sector: str=None):
        """Subscription - a model defined in OpenAPI

        :param country: The country of this Subscription.
        :param ecomm: The ecomm of this Subscription.
        :param period: The period of this Subscription.
        :param report_type: The report_type of this Subscription.
        :param sector: The sector of this Subscription.
        """
        self.openapi_types = {
            'country': str,
            'ecomm': str,
            'period': str,
            'report_type': str,
            'sector': str
        }

        self.attribute_map = {
            'country': 'Country',
            'ecomm': 'Ecomm',
            'period': 'Period',
            'report_type': 'ReportType',
            'sector': 'Sector'
        }

        self._country = country
        self._ecomm = ecomm
        self._period = period
        self._report_type = report_type
        self._sector = sector

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscription of this Subscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this Subscription.

        Country Code.

        :return: The country of this Subscription.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Subscription.

        Country Code.

        :param country: The country of this Subscription.
        :type country: str
        """

        self._country = country

    @property
    def ecomm(self):
        """Gets the ecomm of this Subscription.

        Ecommerce indicator. \"yes\" or \"no\" are the options.

        :return: The ecomm of this Subscription.
        :rtype: str
        """
        return self._ecomm

    @ecomm.setter
    def ecomm(self, ecomm):
        """Sets the ecomm of this Subscription.

        Ecommerce indicator. \"yes\" or \"no\" are the options.

        :param ecomm: The ecomm of this Subscription.
        :type ecomm: str
        """

        self._ecomm = ecomm

    @property
    def period(self):
        """Gets the period of this Subscription.

        Indicates the period covered by the data with possible values of - day, week, month, quarter, annual

        :return: The period of this Subscription.
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this Subscription.

        Indicates the period covered by the data with possible values of - day, week, month, quarter, annual

        :param period: The period of this Subscription.
        :type period: str
        """

        self._period = period

    @property
    def report_type(self):
        """Gets the report_type of this Subscription.

        Report type name, today the only report supported is \"monitor\".

        :return: The report_type of this Subscription.
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this Subscription.

        Report type name, today the only report supported is \"monitor\".

        :param report_type: The report_type of this Subscription.
        :type report_type: str
        """

        self._report_type = report_type

    @property
    def sector(self):
        """Gets the sector of this Subscription.

        Sector name.

        :return: The sector of this Subscription.
        :rtype: str
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """Sets the sector of this Subscription.

        Sector name.

        :param sector: The sector of this Subscription.
        :type sector: str
        """

        self._sector = sector
