# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SpendingPulseRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, currency_of_for_sales_value: str=None, ecomm: str=None, implied_deflator_month_over_month_change: str=None, implied_deflator_year_over_year_change: str=None, non_gregorian_reporting_period: str=None, period: str=None, period_end_date: str=None, period_start_date: str=None, price_adjustment_flag: str=None, price_index3_month_moving_average_change: str=None, price_index_month_over_month_change: str=None, price_index_value: str=None, price_index_year_over_year_change: str=None, product_line: str=None, publication_coverage_period: str=None, report_type: str=None, reporting_calender: str=None, sales3_month_moving_average_change: str=None, sales_month_over_month_change: str=None, sales_value_index: str=None, sales_year_over_year_change: str=None, sales_year_to_date_change: str=None, same_store_sales_index3_month_moving_average_change: str=None, same_store_sales_index_year_over_year_change: str=None, seasonal_adjustment_flag: str=None, sector: str=None, segment: str=None, sub_geography_value: str=None, sub_sector: str=None, transaction_index3_month_moving_average_change: str=None, transaction_index_month_over_month_change: str=None, transaction_index_value: str=None, transaction_index_year_over_year_change: str=None):
        """SpendingPulseRecord - a model defined in OpenAPI

        :param country: The country of this SpendingPulseRecord.
        :param currency_of_for_sales_value: The currency_of_for_sales_value of this SpendingPulseRecord.
        :param ecomm: The ecomm of this SpendingPulseRecord.
        :param implied_deflator_month_over_month_change: The implied_deflator_month_over_month_change of this SpendingPulseRecord.
        :param implied_deflator_year_over_year_change: The implied_deflator_year_over_year_change of this SpendingPulseRecord.
        :param non_gregorian_reporting_period: The non_gregorian_reporting_period of this SpendingPulseRecord.
        :param period: The period of this SpendingPulseRecord.
        :param period_end_date: The period_end_date of this SpendingPulseRecord.
        :param period_start_date: The period_start_date of this SpendingPulseRecord.
        :param price_adjustment_flag: The price_adjustment_flag of this SpendingPulseRecord.
        :param price_index3_month_moving_average_change: The price_index3_month_moving_average_change of this SpendingPulseRecord.
        :param price_index_month_over_month_change: The price_index_month_over_month_change of this SpendingPulseRecord.
        :param price_index_value: The price_index_value of this SpendingPulseRecord.
        :param price_index_year_over_year_change: The price_index_year_over_year_change of this SpendingPulseRecord.
        :param product_line: The product_line of this SpendingPulseRecord.
        :param publication_coverage_period: The publication_coverage_period of this SpendingPulseRecord.
        :param report_type: The report_type of this SpendingPulseRecord.
        :param reporting_calender: The reporting_calender of this SpendingPulseRecord.
        :param sales3_month_moving_average_change: The sales3_month_moving_average_change of this SpendingPulseRecord.
        :param sales_month_over_month_change: The sales_month_over_month_change of this SpendingPulseRecord.
        :param sales_value_index: The sales_value_index of this SpendingPulseRecord.
        :param sales_year_over_year_change: The sales_year_over_year_change of this SpendingPulseRecord.
        :param sales_year_to_date_change: The sales_year_to_date_change of this SpendingPulseRecord.
        :param same_store_sales_index3_month_moving_average_change: The same_store_sales_index3_month_moving_average_change of this SpendingPulseRecord.
        :param same_store_sales_index_year_over_year_change: The same_store_sales_index_year_over_year_change of this SpendingPulseRecord.
        :param seasonal_adjustment_flag: The seasonal_adjustment_flag of this SpendingPulseRecord.
        :param sector: The sector of this SpendingPulseRecord.
        :param segment: The segment of this SpendingPulseRecord.
        :param sub_geography_value: The sub_geography_value of this SpendingPulseRecord.
        :param sub_sector: The sub_sector of this SpendingPulseRecord.
        :param transaction_index3_month_moving_average_change: The transaction_index3_month_moving_average_change of this SpendingPulseRecord.
        :param transaction_index_month_over_month_change: The transaction_index_month_over_month_change of this SpendingPulseRecord.
        :param transaction_index_value: The transaction_index_value of this SpendingPulseRecord.
        :param transaction_index_year_over_year_change: The transaction_index_year_over_year_change of this SpendingPulseRecord.
        """
        self.openapi_types = {
            'country': str,
            'currency_of_for_sales_value': str,
            'ecomm': str,
            'implied_deflator_month_over_month_change': str,
            'implied_deflator_year_over_year_change': str,
            'non_gregorian_reporting_period': str,
            'period': str,
            'period_end_date': str,
            'period_start_date': str,
            'price_adjustment_flag': str,
            'price_index3_month_moving_average_change': str,
            'price_index_month_over_month_change': str,
            'price_index_value': str,
            'price_index_year_over_year_change': str,
            'product_line': str,
            'publication_coverage_period': str,
            'report_type': str,
            'reporting_calender': str,
            'sales3_month_moving_average_change': str,
            'sales_month_over_month_change': str,
            'sales_value_index': str,
            'sales_year_over_year_change': str,
            'sales_year_to_date_change': str,
            'same_store_sales_index3_month_moving_average_change': str,
            'same_store_sales_index_year_over_year_change': str,
            'seasonal_adjustment_flag': str,
            'sector': str,
            'segment': str,
            'sub_geography_value': str,
            'sub_sector': str,
            'transaction_index3_month_moving_average_change': str,
            'transaction_index_month_over_month_change': str,
            'transaction_index_value': str,
            'transaction_index_year_over_year_change': str
        }

        self.attribute_map = {
            'country': 'Country',
            'currency_of_for_sales_value': 'CurrencyOfForSalesValue',
            'ecomm': 'Ecomm',
            'implied_deflator_month_over_month_change': 'ImpliedDeflatorMonthOverMonthChange',
            'implied_deflator_year_over_year_change': 'ImpliedDeflatorYearOverYearChange',
            'non_gregorian_reporting_period': 'NonGregorianReportingPeriod',
            'period': 'Period',
            'period_end_date': 'PeriodEndDate',
            'period_start_date': 'PeriodStartDate',
            'price_adjustment_flag': 'PriceAdjustmentFlag',
            'price_index3_month_moving_average_change': 'PriceIndex3MonthMovingAverageChange',
            'price_index_month_over_month_change': 'PriceIndexMonthOverMonthChange',
            'price_index_value': 'PriceIndexValue',
            'price_index_year_over_year_change': 'PriceIndexYearOverYearChange',
            'product_line': 'ProductLine',
            'publication_coverage_period': 'PublicationCoveragePeriod',
            'report_type': 'ReportType',
            'reporting_calender': 'ReportingCalender',
            'sales3_month_moving_average_change': 'Sales3MonthMovingAverageChange',
            'sales_month_over_month_change': 'SalesMonthOverMonthChange',
            'sales_value_index': 'SalesValueIndex',
            'sales_year_over_year_change': 'SalesYearOverYearChange',
            'sales_year_to_date_change': 'SalesYearToDateChange',
            'same_store_sales_index3_month_moving_average_change': 'SameStoreSalesIndex3MonthMovingAverageChange',
            'same_store_sales_index_year_over_year_change': 'SameStoreSalesIndexYearOverYearChange',
            'seasonal_adjustment_flag': 'SeasonalAdjustmentFlag',
            'sector': 'Sector',
            'segment': 'Segment',
            'sub_geography_value': 'SubGeographyValue',
            'sub_sector': 'SubSector',
            'transaction_index3_month_moving_average_change': 'TransactionIndex3MonthMovingAverageChange',
            'transaction_index_month_over_month_change': 'TransactionIndexMonthOverMonthChange',
            'transaction_index_value': 'TransactionIndexValue',
            'transaction_index_year_over_year_change': 'TransactionIndexYearOverYearChange'
        }

        self._country = country
        self._currency_of_for_sales_value = currency_of_for_sales_value
        self._ecomm = ecomm
        self._implied_deflator_month_over_month_change = implied_deflator_month_over_month_change
        self._implied_deflator_year_over_year_change = implied_deflator_year_over_year_change
        self._non_gregorian_reporting_period = non_gregorian_reporting_period
        self._period = period
        self._period_end_date = period_end_date
        self._period_start_date = period_start_date
        self._price_adjustment_flag = price_adjustment_flag
        self._price_index3_month_moving_average_change = price_index3_month_moving_average_change
        self._price_index_month_over_month_change = price_index_month_over_month_change
        self._price_index_value = price_index_value
        self._price_index_year_over_year_change = price_index_year_over_year_change
        self._product_line = product_line
        self._publication_coverage_period = publication_coverage_period
        self._report_type = report_type
        self._reporting_calender = reporting_calender
        self._sales3_month_moving_average_change = sales3_month_moving_average_change
        self._sales_month_over_month_change = sales_month_over_month_change
        self._sales_value_index = sales_value_index
        self._sales_year_over_year_change = sales_year_over_year_change
        self._sales_year_to_date_change = sales_year_to_date_change
        self._same_store_sales_index3_month_moving_average_change = same_store_sales_index3_month_moving_average_change
        self._same_store_sales_index_year_over_year_change = same_store_sales_index_year_over_year_change
        self._seasonal_adjustment_flag = seasonal_adjustment_flag
        self._sector = sector
        self._segment = segment
        self._sub_geography_value = sub_geography_value
        self._sub_sector = sub_sector
        self._transaction_index3_month_moving_average_change = transaction_index3_month_moving_average_change
        self._transaction_index_month_over_month_change = transaction_index_month_over_month_change
        self._transaction_index_value = transaction_index_value
        self._transaction_index_year_over_year_change = transaction_index_year_over_year_change

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SpendingPulseRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SpendingPulseRecord of this SpendingPulseRecord.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this SpendingPulseRecord.

        Country Code.

        :return: The country of this SpendingPulseRecord.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this SpendingPulseRecord.

        Country Code.

        :param country: The country of this SpendingPulseRecord.
        :type country: str
        """

        self._country = country

    @property
    def currency_of_for_sales_value(self):
        """Gets the currency_of_for_sales_value of this SpendingPulseRecord.

        A value to indicate the currency in which the sales value is being reported. For sales index values, this field is not used.

        :return: The currency_of_for_sales_value of this SpendingPulseRecord.
        :rtype: str
        """
        return self._currency_of_for_sales_value

    @currency_of_for_sales_value.setter
    def currency_of_for_sales_value(self, currency_of_for_sales_value):
        """Sets the currency_of_for_sales_value of this SpendingPulseRecord.

        A value to indicate the currency in which the sales value is being reported. For sales index values, this field is not used.

        :param currency_of_for_sales_value: The currency_of_for_sales_value of this SpendingPulseRecord.
        :type currency_of_for_sales_value: str
        """

        self._currency_of_for_sales_value = currency_of_for_sales_value

    @property
    def ecomm(self):
        """Gets the ecomm of this SpendingPulseRecord.

        Ecommerce indicator. \"yes\" or \"no\" are the options.

        :return: The ecomm of this SpendingPulseRecord.
        :rtype: str
        """
        return self._ecomm

    @ecomm.setter
    def ecomm(self, ecomm):
        """Sets the ecomm of this SpendingPulseRecord.

        Ecommerce indicator. \"yes\" or \"no\" are the options.

        :param ecomm: The ecomm of this SpendingPulseRecord.
        :type ecomm: str
        """

        self._ecomm = ecomm

    @property
    def implied_deflator_month_over_month_change(self):
        """Gets the implied_deflator_month_over_month_change of this SpendingPulseRecord.

        Percent change from one month ago in the implied deflator (the deflator is used in seasonal adjustment calculation).

        :return: The implied_deflator_month_over_month_change of this SpendingPulseRecord.
        :rtype: str
        """
        return self._implied_deflator_month_over_month_change

    @implied_deflator_month_over_month_change.setter
    def implied_deflator_month_over_month_change(self, implied_deflator_month_over_month_change):
        """Sets the implied_deflator_month_over_month_change of this SpendingPulseRecord.

        Percent change from one month ago in the implied deflator (the deflator is used in seasonal adjustment calculation).

        :param implied_deflator_month_over_month_change: The implied_deflator_month_over_month_change of this SpendingPulseRecord.
        :type implied_deflator_month_over_month_change: str
        """

        self._implied_deflator_month_over_month_change = implied_deflator_month_over_month_change

    @property
    def implied_deflator_year_over_year_change(self):
        """Gets the implied_deflator_year_over_year_change of this SpendingPulseRecord.

        Percent change from one year ago in the implied deflator (the deflator is used in seasonal adjustment calculation).

        :return: The implied_deflator_year_over_year_change of this SpendingPulseRecord.
        :rtype: str
        """
        return self._implied_deflator_year_over_year_change

    @implied_deflator_year_over_year_change.setter
    def implied_deflator_year_over_year_change(self, implied_deflator_year_over_year_change):
        """Sets the implied_deflator_year_over_year_change of this SpendingPulseRecord.

        Percent change from one year ago in the implied deflator (the deflator is used in seasonal adjustment calculation).

        :param implied_deflator_year_over_year_change: The implied_deflator_year_over_year_change of this SpendingPulseRecord.
        :type implied_deflator_year_over_year_change: str
        """

        self._implied_deflator_year_over_year_change = implied_deflator_year_over_year_change

    @property
    def non_gregorian_reporting_period(self):
        """Gets the non_gregorian_reporting_period of this SpendingPulseRecord.

        For only those data reported by a non-Gregorian calendar (e.g. US Sectors which are reported based on the National Retail Federation 4-5-4 calendar) this value designates the retail period being reported. As an example, for the US apparel sector, for Period Date = February 2015, the reporting period is 2015-01 (February is the first month of US retail year 2015).

        :return: The non_gregorian_reporting_period of this SpendingPulseRecord.
        :rtype: str
        """
        return self._non_gregorian_reporting_period

    @non_gregorian_reporting_period.setter
    def non_gregorian_reporting_period(self, non_gregorian_reporting_period):
        """Sets the non_gregorian_reporting_period of this SpendingPulseRecord.

        For only those data reported by a non-Gregorian calendar (e.g. US Sectors which are reported based on the National Retail Federation 4-5-4 calendar) this value designates the retail period being reported. As an example, for the US apparel sector, for Period Date = February 2015, the reporting period is 2015-01 (February is the first month of US retail year 2015).

        :param non_gregorian_reporting_period: The non_gregorian_reporting_period of this SpendingPulseRecord.
        :type non_gregorian_reporting_period: str
        """

        self._non_gregorian_reporting_period = non_gregorian_reporting_period

    @property
    def period(self):
        """Gets the period of this SpendingPulseRecord.

        Indicates the period covered by the data with possible values of - day, week, month, quarter, annual

        :return: The period of this SpendingPulseRecord.
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this SpendingPulseRecord.

        Indicates the period covered by the data with possible values of - day, week, month, quarter, annual

        :param period: The period of this SpendingPulseRecord.
        :type period: str
        """

        self._period = period

    @property
    def period_end_date(self):
        """Gets the period_end_date of this SpendingPulseRecord.

        Date indicating the end of the period covered by ensuing data.

        :return: The period_end_date of this SpendingPulseRecord.
        :rtype: str
        """
        return self._period_end_date

    @period_end_date.setter
    def period_end_date(self, period_end_date):
        """Sets the period_end_date of this SpendingPulseRecord.

        Date indicating the end of the period covered by ensuing data.

        :param period_end_date: The period_end_date of this SpendingPulseRecord.
        :type period_end_date: str
        """

        self._period_end_date = period_end_date

    @property
    def period_start_date(self):
        """Gets the period_start_date of this SpendingPulseRecord.

        Date indicating the beginning of the period covered by ensuing data.

        :return: The period_start_date of this SpendingPulseRecord.
        :rtype: str
        """
        return self._period_start_date

    @period_start_date.setter
    def period_start_date(self, period_start_date):
        """Sets the period_start_date of this SpendingPulseRecord.

        Date indicating the beginning of the period covered by ensuing data.

        :param period_start_date: The period_start_date of this SpendingPulseRecord.
        :type period_start_date: str
        """

        self._period_start_date = period_start_date

    @property
    def price_adjustment_flag(self):
        """Gets the price_adjustment_flag of this SpendingPulseRecord.

        Price adjustment indicator.

        :return: The price_adjustment_flag of this SpendingPulseRecord.
        :rtype: str
        """
        return self._price_adjustment_flag

    @price_adjustment_flag.setter
    def price_adjustment_flag(self, price_adjustment_flag):
        """Sets the price_adjustment_flag of this SpendingPulseRecord.

        Price adjustment indicator.

        :param price_adjustment_flag: The price_adjustment_flag of this SpendingPulseRecord.
        :type price_adjustment_flag: str
        """

        self._price_adjustment_flag = price_adjustment_flag

    @property
    def price_index3_month_moving_average_change(self):
        """Gets the price_index3_month_moving_average_change of this SpendingPulseRecord.

        Percent change from one year ago in the three-month moving PriceIndexValue average.

        :return: The price_index3_month_moving_average_change of this SpendingPulseRecord.
        :rtype: str
        """
        return self._price_index3_month_moving_average_change

    @price_index3_month_moving_average_change.setter
    def price_index3_month_moving_average_change(self, price_index3_month_moving_average_change):
        """Sets the price_index3_month_moving_average_change of this SpendingPulseRecord.

        Percent change from one year ago in the three-month moving PriceIndexValue average.

        :param price_index3_month_moving_average_change: The price_index3_month_moving_average_change of this SpendingPulseRecord.
        :type price_index3_month_moving_average_change: str
        """

        self._price_index3_month_moving_average_change = price_index3_month_moving_average_change

    @property
    def price_index_month_over_month_change(self):
        """Gets the price_index_month_over_month_change of this SpendingPulseRecord.

        Percent change from one month ago in the PriceIndexValue.

        :return: The price_index_month_over_month_change of this SpendingPulseRecord.
        :rtype: str
        """
        return self._price_index_month_over_month_change

    @price_index_month_over_month_change.setter
    def price_index_month_over_month_change(self, price_index_month_over_month_change):
        """Sets the price_index_month_over_month_change of this SpendingPulseRecord.

        Percent change from one month ago in the PriceIndexValue.

        :param price_index_month_over_month_change: The price_index_month_over_month_change of this SpendingPulseRecord.
        :type price_index_month_over_month_change: str
        """

        self._price_index_month_over_month_change = price_index_month_over_month_change

    @property
    def price_index_value(self):
        """Gets the price_index_value of this SpendingPulseRecord.

        Published price index value for the period being reported. Not a currency value - a decimal index value. The price index takes into account both the average ticket value and the size of the basket. Changes in either will be reflected in the price index changes.

        :return: The price_index_value of this SpendingPulseRecord.
        :rtype: str
        """
        return self._price_index_value

    @price_index_value.setter
    def price_index_value(self, price_index_value):
        """Sets the price_index_value of this SpendingPulseRecord.

        Published price index value for the period being reported. Not a currency value - a decimal index value. The price index takes into account both the average ticket value and the size of the basket. Changes in either will be reflected in the price index changes.

        :param price_index_value: The price_index_value of this SpendingPulseRecord.
        :type price_index_value: str
        """

        self._price_index_value = price_index_value

    @property
    def price_index_year_over_year_change(self):
        """Gets the price_index_year_over_year_change of this SpendingPulseRecord.

        Percent change from one year ago in the PriceIndexValue.

        :return: The price_index_year_over_year_change of this SpendingPulseRecord.
        :rtype: str
        """
        return self._price_index_year_over_year_change

    @price_index_year_over_year_change.setter
    def price_index_year_over_year_change(self, price_index_year_over_year_change):
        """Sets the price_index_year_over_year_change of this SpendingPulseRecord.

        Percent change from one year ago in the PriceIndexValue.

        :param price_index_year_over_year_change: The price_index_year_over_year_change of this SpendingPulseRecord.
        :type price_index_year_over_year_change: str
        """

        self._price_index_year_over_year_change = price_index_year_over_year_change

    @property
    def product_line(self):
        """Gets the product_line of this SpendingPulseRecord.

        Product line, either for this resource it will be ?US Executive\".

        :return: The product_line of this SpendingPulseRecord.
        :rtype: str
        """
        return self._product_line

    @product_line.setter
    def product_line(self, product_line):
        """Sets the product_line of this SpendingPulseRecord.

        Product line, either for this resource it will be ?US Executive\".

        :param product_line: The product_line of this SpendingPulseRecord.
        :type product_line: str
        """

        self._product_line = product_line

    @property
    def publication_coverage_period(self):
        """Gets the publication_coverage_period of this SpendingPulseRecord.

        Publication Coverage Period indicates what period is to be covered, often the current report will include the month prior.

        :return: The publication_coverage_period of this SpendingPulseRecord.
        :rtype: str
        """
        return self._publication_coverage_period

    @publication_coverage_period.setter
    def publication_coverage_period(self, publication_coverage_period):
        """Sets the publication_coverage_period of this SpendingPulseRecord.

        Publication Coverage Period indicates what period is to be covered, often the current report will include the month prior.

        :param publication_coverage_period: The publication_coverage_period of this SpendingPulseRecord.
        :type publication_coverage_period: str
        """

        self._publication_coverage_period = publication_coverage_period

    @property
    def report_type(self):
        """Gets the report_type of this SpendingPulseRecord.

        Report type name, today the only report supported is \"monitor\".

        :return: The report_type of this SpendingPulseRecord.
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this SpendingPulseRecord.

        Report type name, today the only report supported is \"monitor\".

        :param report_type: The report_type of this SpendingPulseRecord.
        :type report_type: str
        """

        self._report_type = report_type

    @property
    def reporting_calender(self):
        """Gets the reporting_calender of this SpendingPulseRecord.

        Value indicates calendar used for periodic aggregation (e.g. \"G\" = Gregorian, \"454\" = US Retail, \"445\" = UK ONS, etc.) Please note that some data are reported under more than one calendar. As a result, in order to uniquely identify the data being reported, the reporting calendar must be included.

        :return: The reporting_calender of this SpendingPulseRecord.
        :rtype: str
        """
        return self._reporting_calender

    @reporting_calender.setter
    def reporting_calender(self, reporting_calender):
        """Sets the reporting_calender of this SpendingPulseRecord.

        Value indicates calendar used for periodic aggregation (e.g. \"G\" = Gregorian, \"454\" = US Retail, \"445\" = UK ONS, etc.) Please note that some data are reported under more than one calendar. As a result, in order to uniquely identify the data being reported, the reporting calendar must be included.

        :param reporting_calender: The reporting_calender of this SpendingPulseRecord.
        :type reporting_calender: str
        """

        self._reporting_calender = reporting_calender

    @property
    def sales3_month_moving_average_change(self):
        """Gets the sales3_month_moving_average_change of this SpendingPulseRecord.

        Percent change from one year ago in the three-month moving SalesIndexValue average.

        :return: The sales3_month_moving_average_change of this SpendingPulseRecord.
        :rtype: str
        """
        return self._sales3_month_moving_average_change

    @sales3_month_moving_average_change.setter
    def sales3_month_moving_average_change(self, sales3_month_moving_average_change):
        """Sets the sales3_month_moving_average_change of this SpendingPulseRecord.

        Percent change from one year ago in the three-month moving SalesIndexValue average.

        :param sales3_month_moving_average_change: The sales3_month_moving_average_change of this SpendingPulseRecord.
        :type sales3_month_moving_average_change: str
        """

        self._sales3_month_moving_average_change = sales3_month_moving_average_change

    @property
    def sales_month_over_month_change(self):
        """Gets the sales_month_over_month_change of this SpendingPulseRecord.

        Percent change from one month ago in the SalesValueIndex.

        :return: The sales_month_over_month_change of this SpendingPulseRecord.
        :rtype: str
        """
        return self._sales_month_over_month_change

    @sales_month_over_month_change.setter
    def sales_month_over_month_change(self, sales_month_over_month_change):
        """Sets the sales_month_over_month_change of this SpendingPulseRecord.

        Percent change from one month ago in the SalesValueIndex.

        :param sales_month_over_month_change: The sales_month_over_month_change of this SpendingPulseRecord.
        :type sales_month_over_month_change: str
        """

        self._sales_month_over_month_change = sales_month_over_month_change

    @property
    def sales_value_index(self):
        """Gets the sales_value_index of this SpendingPulseRecord.

        Aggregated/computed value of sales for the period being reported. This may be an index value (not a currency value - just a decimal value) or it may be a currency value that would typically be in local currency (dollar, pound, yen, etc.)

        :return: The sales_value_index of this SpendingPulseRecord.
        :rtype: str
        """
        return self._sales_value_index

    @sales_value_index.setter
    def sales_value_index(self, sales_value_index):
        """Sets the sales_value_index of this SpendingPulseRecord.

        Aggregated/computed value of sales for the period being reported. This may be an index value (not a currency value - just a decimal value) or it may be a currency value that would typically be in local currency (dollar, pound, yen, etc.)

        :param sales_value_index: The sales_value_index of this SpendingPulseRecord.
        :type sales_value_index: str
        """

        self._sales_value_index = sales_value_index

    @property
    def sales_year_over_year_change(self):
        """Gets the sales_year_over_year_change of this SpendingPulseRecord.

        Percent change from one year ago in the SalesValueIndex.

        :return: The sales_year_over_year_change of this SpendingPulseRecord.
        :rtype: str
        """
        return self._sales_year_over_year_change

    @sales_year_over_year_change.setter
    def sales_year_over_year_change(self, sales_year_over_year_change):
        """Sets the sales_year_over_year_change of this SpendingPulseRecord.

        Percent change from one year ago in the SalesValueIndex.

        :param sales_year_over_year_change: The sales_year_over_year_change of this SpendingPulseRecord.
        :type sales_year_over_year_change: str
        """

        self._sales_year_over_year_change = sales_year_over_year_change

    @property
    def sales_year_to_date_change(self):
        """Gets the sales_year_to_date_change of this SpendingPulseRecord.

        Percent change from year ago.

        :return: The sales_year_to_date_change of this SpendingPulseRecord.
        :rtype: str
        """
        return self._sales_year_to_date_change

    @sales_year_to_date_change.setter
    def sales_year_to_date_change(self, sales_year_to_date_change):
        """Sets the sales_year_to_date_change of this SpendingPulseRecord.

        Percent change from year ago.

        :param sales_year_to_date_change: The sales_year_to_date_change of this SpendingPulseRecord.
        :type sales_year_to_date_change: str
        """

        self._sales_year_to_date_change = sales_year_to_date_change

    @property
    def same_store_sales_index3_month_moving_average_change(self):
        """Gets the same_store_sales_index3_month_moving_average_change of this SpendingPulseRecord.

        Percent change from one month ago in the SameStoreSalesIndex.

        :return: The same_store_sales_index3_month_moving_average_change of this SpendingPulseRecord.
        :rtype: str
        """
        return self._same_store_sales_index3_month_moving_average_change

    @same_store_sales_index3_month_moving_average_change.setter
    def same_store_sales_index3_month_moving_average_change(self, same_store_sales_index3_month_moving_average_change):
        """Sets the same_store_sales_index3_month_moving_average_change of this SpendingPulseRecord.

        Percent change from one month ago in the SameStoreSalesIndex.

        :param same_store_sales_index3_month_moving_average_change: The same_store_sales_index3_month_moving_average_change of this SpendingPulseRecord.
        :type same_store_sales_index3_month_moving_average_change: str
        """

        self._same_store_sales_index3_month_moving_average_change = same_store_sales_index3_month_moving_average_change

    @property
    def same_store_sales_index_year_over_year_change(self):
        """Gets the same_store_sales_index_year_over_year_change of this SpendingPulseRecord.

        Percent change from one year ago in the SameStoreSalesIndex.

        :return: The same_store_sales_index_year_over_year_change of this SpendingPulseRecord.
        :rtype: str
        """
        return self._same_store_sales_index_year_over_year_change

    @same_store_sales_index_year_over_year_change.setter
    def same_store_sales_index_year_over_year_change(self, same_store_sales_index_year_over_year_change):
        """Sets the same_store_sales_index_year_over_year_change of this SpendingPulseRecord.

        Percent change from one year ago in the SameStoreSalesIndex.

        :param same_store_sales_index_year_over_year_change: The same_store_sales_index_year_over_year_change of this SpendingPulseRecord.
        :type same_store_sales_index_year_over_year_change: str
        """

        self._same_store_sales_index_year_over_year_change = same_store_sales_index_year_over_year_change

    @property
    def seasonal_adjustment_flag(self):
        """Gets the seasonal_adjustment_flag of this SpendingPulseRecord.

        Seasonal data adjustment indicator.

        :return: The seasonal_adjustment_flag of this SpendingPulseRecord.
        :rtype: str
        """
        return self._seasonal_adjustment_flag

    @seasonal_adjustment_flag.setter
    def seasonal_adjustment_flag(self, seasonal_adjustment_flag):
        """Sets the seasonal_adjustment_flag of this SpendingPulseRecord.

        Seasonal data adjustment indicator.

        :param seasonal_adjustment_flag: The seasonal_adjustment_flag of this SpendingPulseRecord.
        :type seasonal_adjustment_flag: str
        """

        self._seasonal_adjustment_flag = seasonal_adjustment_flag

    @property
    def sector(self):
        """Gets the sector of this SpendingPulseRecord.

        Sector name/id.

        :return: The sector of this SpendingPulseRecord.
        :rtype: str
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """Sets the sector of this SpendingPulseRecord.

        Sector name/id.

        :param sector: The sector of this SpendingPulseRecord.
        :type sector: str
        """

        self._sector = sector

    @property
    def segment(self):
        """Gets the segment of this SpendingPulseRecord.

        Sub unit within a sector e.g. Sector = restaurant; SubSector = Full Service; Segment = Fine Dining.

        :return: The segment of this SpendingPulseRecord.
        :rtype: str
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """Sets the segment of this SpendingPulseRecord.

        Sub unit within a sector e.g. Sector = restaurant; SubSector = Full Service; Segment = Fine Dining.

        :param segment: The segment of this SpendingPulseRecord.
        :type segment: str
        """

        self._segment = segment

    @property
    def sub_geography_value(self):
        """Gets the sub_geography_value of this SpendingPulseRecord.

        For those data reported by sub-geographies (e.g. regions, states, etc.) the sub-geography being reported.

        :return: The sub_geography_value of this SpendingPulseRecord.
        :rtype: str
        """
        return self._sub_geography_value

    @sub_geography_value.setter
    def sub_geography_value(self, sub_geography_value):
        """Sets the sub_geography_value of this SpendingPulseRecord.

        For those data reported by sub-geographies (e.g. regions, states, etc.) the sub-geography being reported.

        :param sub_geography_value: The sub_geography_value of this SpendingPulseRecord.
        :type sub_geography_value: str
        """

        self._sub_geography_value = sub_geography_value

    @property
    def sub_sector(self):
        """Gets the sub_sector of this SpendingPulseRecord.

        Sub unit within a sector e.g. Sector = Electronics & Appliances; SubSector = Electronics.

        :return: The sub_sector of this SpendingPulseRecord.
        :rtype: str
        """
        return self._sub_sector

    @sub_sector.setter
    def sub_sector(self, sub_sector):
        """Sets the sub_sector of this SpendingPulseRecord.

        Sub unit within a sector e.g. Sector = Electronics & Appliances; SubSector = Electronics.

        :param sub_sector: The sub_sector of this SpendingPulseRecord.
        :type sub_sector: str
        """

        self._sub_sector = sub_sector

    @property
    def transaction_index3_month_moving_average_change(self):
        """Gets the transaction_index3_month_moving_average_change of this SpendingPulseRecord.

        Percent change from one year ago in the three-month moving TransactionIndexValue average.

        :return: The transaction_index3_month_moving_average_change of this SpendingPulseRecord.
        :rtype: str
        """
        return self._transaction_index3_month_moving_average_change

    @transaction_index3_month_moving_average_change.setter
    def transaction_index3_month_moving_average_change(self, transaction_index3_month_moving_average_change):
        """Sets the transaction_index3_month_moving_average_change of this SpendingPulseRecord.

        Percent change from one year ago in the three-month moving TransactionIndexValue average.

        :param transaction_index3_month_moving_average_change: The transaction_index3_month_moving_average_change of this SpendingPulseRecord.
        :type transaction_index3_month_moving_average_change: str
        """

        self._transaction_index3_month_moving_average_change = transaction_index3_month_moving_average_change

    @property
    def transaction_index_month_over_month_change(self):
        """Gets the transaction_index_month_over_month_change of this SpendingPulseRecord.

        Percent change from one month ago in the TransactionIndexValue.

        :return: The transaction_index_month_over_month_change of this SpendingPulseRecord.
        :rtype: str
        """
        return self._transaction_index_month_over_month_change

    @transaction_index_month_over_month_change.setter
    def transaction_index_month_over_month_change(self, transaction_index_month_over_month_change):
        """Sets the transaction_index_month_over_month_change of this SpendingPulseRecord.

        Percent change from one month ago in the TransactionIndexValue.

        :param transaction_index_month_over_month_change: The transaction_index_month_over_month_change of this SpendingPulseRecord.
        :type transaction_index_month_over_month_change: str
        """

        self._transaction_index_month_over_month_change = transaction_index_month_over_month_change

    @property
    def transaction_index_value(self):
        """Gets the transaction_index_value of this SpendingPulseRecord.

        Published transaction index value for the period being reported. Not a currency value - a decimal index value. The transaction index is a relative indication of transactions volume in the sector/sub-sector/segment being reported.

        :return: The transaction_index_value of this SpendingPulseRecord.
        :rtype: str
        """
        return self._transaction_index_value

    @transaction_index_value.setter
    def transaction_index_value(self, transaction_index_value):
        """Sets the transaction_index_value of this SpendingPulseRecord.

        Published transaction index value for the period being reported. Not a currency value - a decimal index value. The transaction index is a relative indication of transactions volume in the sector/sub-sector/segment being reported.

        :param transaction_index_value: The transaction_index_value of this SpendingPulseRecord.
        :type transaction_index_value: str
        """

        self._transaction_index_value = transaction_index_value

    @property
    def transaction_index_year_over_year_change(self):
        """Gets the transaction_index_year_over_year_change of this SpendingPulseRecord.

        Percent change from one year ago in the TransactionIndexValue.

        :return: The transaction_index_year_over_year_change of this SpendingPulseRecord.
        :rtype: str
        """
        return self._transaction_index_year_over_year_change

    @transaction_index_year_over_year_change.setter
    def transaction_index_year_over_year_change(self, transaction_index_year_over_year_change):
        """Sets the transaction_index_year_over_year_change of this SpendingPulseRecord.

        Percent change from one year ago in the TransactionIndexValue.

        :param transaction_index_year_over_year_change: The transaction_index_year_over_year_change of this SpendingPulseRecord.
        :type transaction_index_year_over_year_change: str
        """

        self._transaction_index_year_over_year_change = transaction_index_year_over_year_change
