/*
 * Spending Pulse
 * This API will provide monthly data which includes metrics such as sales volume and growth rate.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorSchema;
import org.openapitools.client.model.SpendingPulseListResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SpendingPulseReportApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SpendingPulseReportApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SpendingPulseReportApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for spendingpulseGet
     * @param currentRow Starting record number to return. (optional)
     * @param offset Used to restrict the number of records returned if needed to be less than max. (optional)
     * @param productLine Product Line.  Either ?US Executive Report? or ?Weekly Sales? (optional)
     * @param publicationCoveragePeriod Publication Coverage Period indicates what period is to be covered, often the current report will include the month prior. (optional)
     * @param country Country code. (optional)
     * @param reportType Report type name, today the only report supported is \&quot;monitor\&quot;. (optional)
     * @param period Indicates the period covered by the data with possible values of - day, week, month, quarter, annual (optional)
     * @param sector Sector name. (optional)
     * @param ecomm Ecommerce indicator. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A List of Spending Pulse Reports. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spendingpulseGetCall(String currentRow, String offset, String productLine, String publicationCoveragePeriod, String country, String reportType, String period, String sector, String ecomm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spendingpulse";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currentRow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CurrentRow", currentRow));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Offset", offset));
        }

        if (productLine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ProductLine", productLine));
        }

        if (publicationCoveragePeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PublicationCoveragePeriod", publicationCoveragePeriod));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Country", country));
        }

        if (reportType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReportType", reportType));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Period", period));
        }

        if (sector != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Sector", sector));
        }

        if (ecomm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Ecomm", ecomm));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call spendingpulseGetValidateBeforeCall(String currentRow, String offset, String productLine, String publicationCoveragePeriod, String country, String reportType, String period, String sector, String ecomm, final ApiCallback _callback) throws ApiException {
        return spendingpulseGetCall(currentRow, offset, productLine, publicationCoveragePeriod, country, reportType, period, sector, ecomm, _callback);

    }

    /**
     * Returns all Spending Pulse reports (with the exception of the gasoline weekly report, which has its own resource), that one is subscribed to.
     * Returns all Spending Pulse reports (with the exception of the gasoline weekly report, which has its own resource), that one is subscribed to. 
     * @param currentRow Starting record number to return. (optional)
     * @param offset Used to restrict the number of records returned if needed to be less than max. (optional)
     * @param productLine Product Line.  Either ?US Executive Report? or ?Weekly Sales? (optional)
     * @param publicationCoveragePeriod Publication Coverage Period indicates what period is to be covered, often the current report will include the month prior. (optional)
     * @param country Country code. (optional)
     * @param reportType Report type name, today the only report supported is \&quot;monitor\&quot;. (optional)
     * @param period Indicates the period covered by the data with possible values of - day, week, month, quarter, annual (optional)
     * @param sector Sector name. (optional)
     * @param ecomm Ecommerce indicator. (optional)
     * @return SpendingPulseListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A List of Spending Pulse Reports. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected errors </td><td>  -  </td></tr>
     </table>
     */
    public SpendingPulseListResponse spendingpulseGet(String currentRow, String offset, String productLine, String publicationCoveragePeriod, String country, String reportType, String period, String sector, String ecomm) throws ApiException {
        ApiResponse<SpendingPulseListResponse> localVarResp = spendingpulseGetWithHttpInfo(currentRow, offset, productLine, publicationCoveragePeriod, country, reportType, period, sector, ecomm);
        return localVarResp.getData();
    }

    /**
     * Returns all Spending Pulse reports (with the exception of the gasoline weekly report, which has its own resource), that one is subscribed to.
     * Returns all Spending Pulse reports (with the exception of the gasoline weekly report, which has its own resource), that one is subscribed to. 
     * @param currentRow Starting record number to return. (optional)
     * @param offset Used to restrict the number of records returned if needed to be less than max. (optional)
     * @param productLine Product Line.  Either ?US Executive Report? or ?Weekly Sales? (optional)
     * @param publicationCoveragePeriod Publication Coverage Period indicates what period is to be covered, often the current report will include the month prior. (optional)
     * @param country Country code. (optional)
     * @param reportType Report type name, today the only report supported is \&quot;monitor\&quot;. (optional)
     * @param period Indicates the period covered by the data with possible values of - day, week, month, quarter, annual (optional)
     * @param sector Sector name. (optional)
     * @param ecomm Ecommerce indicator. (optional)
     * @return ApiResponse&lt;SpendingPulseListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A List of Spending Pulse Reports. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected errors </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SpendingPulseListResponse> spendingpulseGetWithHttpInfo(String currentRow, String offset, String productLine, String publicationCoveragePeriod, String country, String reportType, String period, String sector, String ecomm) throws ApiException {
        okhttp3.Call localVarCall = spendingpulseGetValidateBeforeCall(currentRow, offset, productLine, publicationCoveragePeriod, country, reportType, period, sector, ecomm, null);
        Type localVarReturnType = new TypeToken<SpendingPulseListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all Spending Pulse reports (with the exception of the gasoline weekly report, which has its own resource), that one is subscribed to. (asynchronously)
     * Returns all Spending Pulse reports (with the exception of the gasoline weekly report, which has its own resource), that one is subscribed to. 
     * @param currentRow Starting record number to return. (optional)
     * @param offset Used to restrict the number of records returned if needed to be less than max. (optional)
     * @param productLine Product Line.  Either ?US Executive Report? or ?Weekly Sales? (optional)
     * @param publicationCoveragePeriod Publication Coverage Period indicates what period is to be covered, often the current report will include the month prior. (optional)
     * @param country Country code. (optional)
     * @param reportType Report type name, today the only report supported is \&quot;monitor\&quot;. (optional)
     * @param period Indicates the period covered by the data with possible values of - day, week, month, quarter, annual (optional)
     * @param sector Sector name. (optional)
     * @param ecomm Ecommerce indicator. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A List of Spending Pulse Reports. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected errors </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call spendingpulseGetAsync(String currentRow, String offset, String productLine, String publicationCoveragePeriod, String country, String reportType, String period, String sector, String ecomm, final ApiCallback<SpendingPulseListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = spendingpulseGetValidateBeforeCall(currentRow, offset, productLine, publicationCoveragePeriod, country, reportType, period, sector, ecomm, _callback);
        Type localVarReturnType = new TypeToken<SpendingPulseListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
