/*
 * Spending Pulse
 * This API will provide monthly data which includes metrics such as sales volume and growth rate.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Subscription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:06.762469-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Subscription {
  public static final String SERIALIZED_NAME_COUNTRY = "Country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_ECOMM = "Ecomm";
  @SerializedName(SERIALIZED_NAME_ECOMM)
  private String ecomm;

  public static final String SERIALIZED_NAME_PERIOD = "Period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private String period;

  public static final String SERIALIZED_NAME_REPORT_TYPE = "ReportType";
  @SerializedName(SERIALIZED_NAME_REPORT_TYPE)
  private String reportType;

  public static final String SERIALIZED_NAME_SECTOR = "Sector";
  @SerializedName(SERIALIZED_NAME_SECTOR)
  private String sector;

  public Subscription() {
  }

  public Subscription country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Country Code.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public Subscription ecomm(String ecomm) {
    this.ecomm = ecomm;
    return this;
  }

  /**
   * Ecommerce indicator. \&quot;yes\&quot; or \&quot;no\&quot; are the options.
   * @return ecomm
   */
  @javax.annotation.Nullable
  public String getEcomm() {
    return ecomm;
  }

  public void setEcomm(String ecomm) {
    this.ecomm = ecomm;
  }


  public Subscription period(String period) {
    this.period = period;
    return this;
  }

  /**
   * Indicates the period covered by the data with possible values of - day, week, month, quarter, annual
   * @return period
   */
  @javax.annotation.Nullable
  public String getPeriod() {
    return period;
  }

  public void setPeriod(String period) {
    this.period = period;
  }


  public Subscription reportType(String reportType) {
    this.reportType = reportType;
    return this;
  }

  /**
   * Report type name, today the only report supported is \&quot;monitor\&quot;.
   * @return reportType
   */
  @javax.annotation.Nullable
  public String getReportType() {
    return reportType;
  }

  public void setReportType(String reportType) {
    this.reportType = reportType;
  }


  public Subscription sector(String sector) {
    this.sector = sector;
    return this;
  }

  /**
   * Sector name.
   * @return sector
   */
  @javax.annotation.Nullable
  public String getSector() {
    return sector;
  }

  public void setSector(String sector) {
    this.sector = sector;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Subscription subscription = (Subscription) o;
    return Objects.equals(this.country, subscription.country) &&
        Objects.equals(this.ecomm, subscription.ecomm) &&
        Objects.equals(this.period, subscription.period) &&
        Objects.equals(this.reportType, subscription.reportType) &&
        Objects.equals(this.sector, subscription.sector);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, ecomm, period, reportType, sector);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Subscription {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    ecomm: ").append(toIndentedString(ecomm)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    reportType: ").append(toIndentedString(reportType)).append("\n");
    sb.append("    sector: ").append(toIndentedString(sector)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Country");
    openapiFields.add("Ecomm");
    openapiFields.add("Period");
    openapiFields.add("ReportType");
    openapiFields.add("Sector");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Subscription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Subscription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Subscription is not found in the empty JSON string", Subscription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Subscription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Subscription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Country") != null && !jsonObj.get("Country").isJsonNull()) && !jsonObj.get("Country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Country").toString()));
      }
      if ((jsonObj.get("Ecomm") != null && !jsonObj.get("Ecomm").isJsonNull()) && !jsonObj.get("Ecomm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Ecomm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Ecomm").toString()));
      }
      if ((jsonObj.get("Period") != null && !jsonObj.get("Period").isJsonNull()) && !jsonObj.get("Period").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Period` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Period").toString()));
      }
      if ((jsonObj.get("ReportType") != null && !jsonObj.get("ReportType").isJsonNull()) && !jsonObj.get("ReportType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReportType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReportType").toString()));
      }
      if ((jsonObj.get("Sector") != null && !jsonObj.get("Sector").isJsonNull()) && !jsonObj.get("Sector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Sector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Sector").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Subscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Subscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Subscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Subscription.class));

       return (TypeAdapter<T>) new TypeAdapter<Subscription>() {
           @Override
           public void write(JsonWriter out, Subscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Subscription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Subscription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Subscription
   * @throws IOException if the JSON string is invalid with respect to Subscription
   */
  public static Subscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Subscription.class);
  }

  /**
   * Convert an instance of Subscription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

