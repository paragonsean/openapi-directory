/*
 * Spending Pulse
 * This API will provide monthly data which includes metrics such as sales volume and growth rate.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GasWeeklyRecord
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:06.762469-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GasWeeklyRecord {
  public static final String SERIALIZED_NAME_AVERAGE_PRICE_PER_GAL_REGULAR_GASOLINE = "AveragePricePerGalRegularGasoline";
  @SerializedName(SERIALIZED_NAME_AVERAGE_PRICE_PER_GAL_REGULAR_GASOLINE)
  private String averagePricePerGalRegularGasoline;

  public static final String SERIALIZED_NAME_COUNTRY = "Country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_PA_D_D_CODE = "PADDCode";
  @SerializedName(SERIALIZED_NAME_PA_D_D_CODE)
  private String paDDCode;

  public static final String SERIALIZED_NAME_PA_D_D_MILLIONSOF_BARRELS_SOLD = "PADDMillionsofBarrelsSold";
  @SerializedName(SERIALIZED_NAME_PA_D_D_MILLIONSOF_BARRELS_SOLD)
  private String paDDMillionsofBarrelsSold;

  public static final String SERIALIZED_NAME_PA_D_D_PERCENT_CHANGE_IN_BARRELS_FROM_PRIOR_WEEK = "PADDPercentChangeInBarrelsFromPriorWeek";
  @SerializedName(SERIALIZED_NAME_PA_D_D_PERCENT_CHANGE_IN_BARRELS_FROM_PRIOR_WEEK)
  private String paDDPercentChangeInBarrelsFromPriorWeek;

  public static final String SERIALIZED_NAME_PA_D_D_PERCENT_CHANGEIN_BARRELSFROM52_WEEKS_AGO = "PADDPercentChangeinBarrelsfrom52WeeksAgo";
  @SerializedName(SERIALIZED_NAME_PA_D_D_PERCENT_CHANGEIN_BARRELSFROM52_WEEKS_AGO)
  private String paDDPercentChangeinBarrelsfrom52WeeksAgo;

  public static final String SERIALIZED_NAME_PERIOD = "Period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private String period;

  public static final String SERIALIZED_NAME_PRODUCT_LINE = "ProductLine";
  @SerializedName(SERIALIZED_NAME_PRODUCT_LINE)
  private String productLine;

  public static final String SERIALIZED_NAME_PUBLICATION_COVERAGE_PERIOD = "PublicationCoveragePeriod";
  @SerializedName(SERIALIZED_NAME_PUBLICATION_COVERAGE_PERIOD)
  private String publicationCoveragePeriod;

  public static final String SERIALIZED_NAME_REPORT_TYPE = "ReportType";
  @SerializedName(SERIALIZED_NAME_REPORT_TYPE)
  private String reportType;

  public static final String SERIALIZED_NAME_SECTOR = "Sector";
  @SerializedName(SERIALIZED_NAME_SECTOR)
  private String sector;

  public static final String SERIALIZED_NAME_SEGMENT = "Segment";
  @SerializedName(SERIALIZED_NAME_SEGMENT)
  private String segment;

  public static final String SERIALIZED_NAME_SUB_SECTOR = "SubSector";
  @SerializedName(SERIALIZED_NAME_SUB_SECTOR)
  private String subSector;

  public static final String SERIALIZED_NAME_TOTAL_BARRELS_CHANGE_FROM_PRIOR_WEEK = "TotalBarrelsChangeFromPriorWeek";
  @SerializedName(SERIALIZED_NAME_TOTAL_BARRELS_CHANGE_FROM_PRIOR_WEEK)
  private String totalBarrelsChangeFromPriorWeek;

  public static final String SERIALIZED_NAME_TOTAL_MILLIONS_OF_BARRELS4_WEEK_AVERAGE = "TotalMillionsOfBarrels4WeekAverage";
  @SerializedName(SERIALIZED_NAME_TOTAL_MILLIONS_OF_BARRELS4_WEEK_AVERAGE)
  private String totalMillionsOfBarrels4WeekAverage;

  public static final String SERIALIZED_NAME_TOTAL_MILLIONS_OF_BARRELS_DAILY_AVERAGE = "TotalMillionsOfBarrelsDailyAverage";
  @SerializedName(SERIALIZED_NAME_TOTAL_MILLIONS_OF_BARRELS_DAILY_AVERAGE)
  private String totalMillionsOfBarrelsDailyAverage;

  public static final String SERIALIZED_NAME_TOTAL_MILLIONS_OF_BARRELS_SOLD = "TotalMillionsOfBarrelsSold";
  @SerializedName(SERIALIZED_NAME_TOTAL_MILLIONS_OF_BARRELS_SOLD)
  private String totalMillionsOfBarrelsSold;

  public static final String SERIALIZED_NAME_TOTAL_PERCENT_CHANGE_IN_BARRELS_FROM52_WEEKS_AGO = "TotalPercentChangeInBarrelsFrom52WeeksAgo";
  @SerializedName(SERIALIZED_NAME_TOTAL_PERCENT_CHANGE_IN_BARRELS_FROM52_WEEKS_AGO)
  private String totalPercentChangeInBarrelsFrom52WeeksAgo;

  public static final String SERIALIZED_NAME_TOTAL_PERCENT_CHANGE_IN_BARRELS_FROM_PRIOR_WEEK = "TotalPercentChangeInBarrelsFromPriorWeek";
  @SerializedName(SERIALIZED_NAME_TOTAL_PERCENT_CHANGE_IN_BARRELS_FROM_PRIOR_WEEK)
  private String totalPercentChangeInBarrelsFromPriorWeek;

  public static final String SERIALIZED_NAME_TOTAL_PERCENT_CHANGE_IN_THE4_WEEK_AVERAGE_FROM52_WEEKS_AGO = "TotalPercentChangeInThe4WeekAverageFrom52WeeksAgo";
  @SerializedName(SERIALIZED_NAME_TOTAL_PERCENT_CHANGE_IN_THE4_WEEK_AVERAGE_FROM52_WEEKS_AGO)
  private String totalPercentChangeInThe4WeekAverageFrom52WeeksAgo;

  public static final String SERIALIZED_NAME_WEEK_END_DATE = "WeekEndDate";
  @SerializedName(SERIALIZED_NAME_WEEK_END_DATE)
  private String weekEndDate;

  public GasWeeklyRecord() {
  }

  public GasWeeklyRecord averagePricePerGalRegularGasoline(String averagePricePerGalRegularGasoline) {
    this.averagePricePerGalRegularGasoline = averagePricePerGalRegularGasoline;
    return this;
  }

  /**
   * Average price at the pump for all gallons sold during the reporting week.
   * @return averagePricePerGalRegularGasoline
   */
  @javax.annotation.Nullable
  public String getAveragePricePerGalRegularGasoline() {
    return averagePricePerGalRegularGasoline;
  }

  public void setAveragePricePerGalRegularGasoline(String averagePricePerGalRegularGasoline) {
    this.averagePricePerGalRegularGasoline = averagePricePerGalRegularGasoline;
  }


  public GasWeeklyRecord country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Country Code.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public GasWeeklyRecord paDDCode(String paDDCode) {
    this.paDDCode = paDDCode;
    return this;
  }

  /**
   * PADD (Petroleum Administration for Defense Districts) are defined by the U.S. Energy Information Administration. The PADD Districts are New England, Central Atlantic, Lower Atlantic, Midwest, Gulf Coast, Rocky Mountain, West Coast.
   * @return paDDCode
   */
  @javax.annotation.Nullable
  public String getPaDDCode() {
    return paDDCode;
  }

  public void setPaDDCode(String paDDCode) {
    this.paDDCode = paDDCode;
  }


  public GasWeeklyRecord paDDMillionsofBarrelsSold(String paDDMillionsofBarrelsSold) {
    this.paDDMillionsofBarrelsSold = paDDMillionsofBarrelsSold;
    return this;
  }

  /**
   * For the PADD being reported, the estimated number of barrels (42 U.S. gallons) of regular motor gasoline (includes all finished motor gasoline grades and formulations or blends . It does not contain diesel nor aviation fuel.) sold during the week.
   * @return paDDMillionsofBarrelsSold
   */
  @javax.annotation.Nullable
  public String getPaDDMillionsofBarrelsSold() {
    return paDDMillionsofBarrelsSold;
  }

  public void setPaDDMillionsofBarrelsSold(String paDDMillionsofBarrelsSold) {
    this.paDDMillionsofBarrelsSold = paDDMillionsofBarrelsSold;
  }


  public GasWeeklyRecord paDDPercentChangeInBarrelsFromPriorWeek(String paDDPercentChangeInBarrelsFromPriorWeek) {
    this.paDDPercentChangeInBarrelsFromPriorWeek = paDDPercentChangeInBarrelsFromPriorWeek;
    return this;
  }

  /**
   * The percent change from one week ago in the PADDMillionsofBarrelsSold.
   * @return paDDPercentChangeInBarrelsFromPriorWeek
   */
  @javax.annotation.Nullable
  public String getPaDDPercentChangeInBarrelsFromPriorWeek() {
    return paDDPercentChangeInBarrelsFromPriorWeek;
  }

  public void setPaDDPercentChangeInBarrelsFromPriorWeek(String paDDPercentChangeInBarrelsFromPriorWeek) {
    this.paDDPercentChangeInBarrelsFromPriorWeek = paDDPercentChangeInBarrelsFromPriorWeek;
  }


  public GasWeeklyRecord paDDPercentChangeinBarrelsfrom52WeeksAgo(String paDDPercentChangeinBarrelsfrom52WeeksAgo) {
    this.paDDPercentChangeinBarrelsfrom52WeeksAgo = paDDPercentChangeinBarrelsfrom52WeeksAgo;
    return this;
  }

  /**
   * The percent change from 52 weeks ago in the PADDMillionsofBarrelsSold.
   * @return paDDPercentChangeinBarrelsfrom52WeeksAgo
   */
  @javax.annotation.Nullable
  public String getPaDDPercentChangeinBarrelsfrom52WeeksAgo() {
    return paDDPercentChangeinBarrelsfrom52WeeksAgo;
  }

  public void setPaDDPercentChangeinBarrelsfrom52WeeksAgo(String paDDPercentChangeinBarrelsfrom52WeeksAgo) {
    this.paDDPercentChangeinBarrelsfrom52WeeksAgo = paDDPercentChangeinBarrelsfrom52WeeksAgo;
  }


  public GasWeeklyRecord period(String period) {
    this.period = period;
    return this;
  }

  /**
   * Indicates the period covered by the data with possible values of - day, week, month, quarter, annual
   * @return period
   */
  @javax.annotation.Nullable
  public String getPeriod() {
    return period;
  }

  public void setPeriod(String period) {
    this.period = period;
  }


  public GasWeeklyRecord productLine(String productLine) {
    this.productLine = productLine;
    return this;
  }

  /**
   * Overall product line that the report belongs to, the only report for this resource is US Weekly Gasoline Demand Report.
   * @return productLine
   */
  @javax.annotation.Nullable
  public String getProductLine() {
    return productLine;
  }

  public void setProductLine(String productLine) {
    this.productLine = productLine;
  }


  public GasWeeklyRecord publicationCoveragePeriod(String publicationCoveragePeriod) {
    this.publicationCoveragePeriod = publicationCoveragePeriod;
    return this;
  }

  /**
   * Publication Coverage Period indicates what period is to be covered.  For this report it will include the gasoline week ending date which will always be a Friday.
   * @return publicationCoveragePeriod
   */
  @javax.annotation.Nullable
  public String getPublicationCoveragePeriod() {
    return publicationCoveragePeriod;
  }

  public void setPublicationCoveragePeriod(String publicationCoveragePeriod) {
    this.publicationCoveragePeriod = publicationCoveragePeriod;
  }


  public GasWeeklyRecord reportType(String reportType) {
    this.reportType = reportType;
    return this;
  }

  /**
   * Report type name, today the only report supported is \&quot;monitor\&quot;.
   * @return reportType
   */
  @javax.annotation.Nullable
  public String getReportType() {
    return reportType;
  }

  public void setReportType(String reportType) {
    this.reportType = reportType;
  }


  public GasWeeklyRecord sector(String sector) {
    this.sector = sector;
    return this;
  }

  /**
   * Gas
   * @return sector
   */
  @javax.annotation.Nullable
  public String getSector() {
    return sector;
  }

  public void setSector(String sector) {
    this.sector = sector;
  }


  public GasWeeklyRecord segment(String segment) {
    this.segment = segment;
    return this;
  }

  /**
   * Not used.
   * @return segment
   */
  @javax.annotation.Nullable
  public String getSegment() {
    return segment;
  }

  public void setSegment(String segment) {
    this.segment = segment;
  }


  public GasWeeklyRecord subSector(String subSector) {
    this.subSector = subSector;
    return this;
  }

  /**
   * Not used.
   * @return subSector
   */
  @javax.annotation.Nullable
  public String getSubSector() {
    return subSector;
  }

  public void setSubSector(String subSector) {
    this.subSector = subSector;
  }


  public GasWeeklyRecord totalBarrelsChangeFromPriorWeek(String totalBarrelsChangeFromPriorWeek) {
    this.totalBarrelsChangeFromPriorWeek = totalBarrelsChangeFromPriorWeek;
    return this;
  }

  /**
   * Change in TotalMillionsOfBarrelsSold from one week ago.
   * @return totalBarrelsChangeFromPriorWeek
   */
  @javax.annotation.Nullable
  public String getTotalBarrelsChangeFromPriorWeek() {
    return totalBarrelsChangeFromPriorWeek;
  }

  public void setTotalBarrelsChangeFromPriorWeek(String totalBarrelsChangeFromPriorWeek) {
    this.totalBarrelsChangeFromPriorWeek = totalBarrelsChangeFromPriorWeek;
  }


  public GasWeeklyRecord totalMillionsOfBarrels4WeekAverage(String totalMillionsOfBarrels4WeekAverage) {
    this.totalMillionsOfBarrels4WeekAverage = totalMillionsOfBarrels4WeekAverage;
    return this;
  }

  /**
   * Average millions of barrels of gasoline sold per week during the prior 4 weeks.
   * @return totalMillionsOfBarrels4WeekAverage
   */
  @javax.annotation.Nullable
  public String getTotalMillionsOfBarrels4WeekAverage() {
    return totalMillionsOfBarrels4WeekAverage;
  }

  public void setTotalMillionsOfBarrels4WeekAverage(String totalMillionsOfBarrels4WeekAverage) {
    this.totalMillionsOfBarrels4WeekAverage = totalMillionsOfBarrels4WeekAverage;
  }


  public GasWeeklyRecord totalMillionsOfBarrelsDailyAverage(String totalMillionsOfBarrelsDailyAverage) {
    this.totalMillionsOfBarrelsDailyAverage = totalMillionsOfBarrelsDailyAverage;
    return this;
  }

  /**
   * Average millions of barrels of gasoline sold per day during the week being reported.
   * @return totalMillionsOfBarrelsDailyAverage
   */
  @javax.annotation.Nullable
  public String getTotalMillionsOfBarrelsDailyAverage() {
    return totalMillionsOfBarrelsDailyAverage;
  }

  public void setTotalMillionsOfBarrelsDailyAverage(String totalMillionsOfBarrelsDailyAverage) {
    this.totalMillionsOfBarrelsDailyAverage = totalMillionsOfBarrelsDailyAverage;
  }


  public GasWeeklyRecord totalMillionsOfBarrelsSold(String totalMillionsOfBarrelsSold) {
    this.totalMillionsOfBarrelsSold = totalMillionsOfBarrelsSold;
    return this;
  }

  /**
   * Estimated number of barrels (42 U.S. Gallons) of regular motor gasoline (includes all finished motor gasoline grades and formulations or blends . IT does not contain diesel nor aviation fuel).
   * @return totalMillionsOfBarrelsSold
   */
  @javax.annotation.Nullable
  public String getTotalMillionsOfBarrelsSold() {
    return totalMillionsOfBarrelsSold;
  }

  public void setTotalMillionsOfBarrelsSold(String totalMillionsOfBarrelsSold) {
    this.totalMillionsOfBarrelsSold = totalMillionsOfBarrelsSold;
  }


  public GasWeeklyRecord totalPercentChangeInBarrelsFrom52WeeksAgo(String totalPercentChangeInBarrelsFrom52WeeksAgo) {
    this.totalPercentChangeInBarrelsFrom52WeeksAgo = totalPercentChangeInBarrelsFrom52WeeksAgo;
    return this;
  }

  /**
   * Percent change from 52 weeks ago in the TotalMillionsOfBarrelsSold.
   * @return totalPercentChangeInBarrelsFrom52WeeksAgo
   */
  @javax.annotation.Nullable
  public String getTotalPercentChangeInBarrelsFrom52WeeksAgo() {
    return totalPercentChangeInBarrelsFrom52WeeksAgo;
  }

  public void setTotalPercentChangeInBarrelsFrom52WeeksAgo(String totalPercentChangeInBarrelsFrom52WeeksAgo) {
    this.totalPercentChangeInBarrelsFrom52WeeksAgo = totalPercentChangeInBarrelsFrom52WeeksAgo;
  }


  public GasWeeklyRecord totalPercentChangeInBarrelsFromPriorWeek(String totalPercentChangeInBarrelsFromPriorWeek) {
    this.totalPercentChangeInBarrelsFromPriorWeek = totalPercentChangeInBarrelsFromPriorWeek;
    return this;
  }

  /**
   * Percent change from one week ago in the TotalMillionsOfBarrelsSold.
   * @return totalPercentChangeInBarrelsFromPriorWeek
   */
  @javax.annotation.Nullable
  public String getTotalPercentChangeInBarrelsFromPriorWeek() {
    return totalPercentChangeInBarrelsFromPriorWeek;
  }

  public void setTotalPercentChangeInBarrelsFromPriorWeek(String totalPercentChangeInBarrelsFromPriorWeek) {
    this.totalPercentChangeInBarrelsFromPriorWeek = totalPercentChangeInBarrelsFromPriorWeek;
  }


  public GasWeeklyRecord totalPercentChangeInThe4WeekAverageFrom52WeeksAgo(String totalPercentChangeInThe4WeekAverageFrom52WeeksAgo) {
    this.totalPercentChangeInThe4WeekAverageFrom52WeeksAgo = totalPercentChangeInThe4WeekAverageFrom52WeeksAgo;
    return this;
  }

  /**
   * Percent change from 52 weeks ago in the TotalMillionsOfBarrels4WeekAverage.
   * @return totalPercentChangeInThe4WeekAverageFrom52WeeksAgo
   */
  @javax.annotation.Nullable
  public String getTotalPercentChangeInThe4WeekAverageFrom52WeeksAgo() {
    return totalPercentChangeInThe4WeekAverageFrom52WeeksAgo;
  }

  public void setTotalPercentChangeInThe4WeekAverageFrom52WeeksAgo(String totalPercentChangeInThe4WeekAverageFrom52WeeksAgo) {
    this.totalPercentChangeInThe4WeekAverageFrom52WeeksAgo = totalPercentChangeInThe4WeekAverageFrom52WeeksAgo;
  }


  public GasWeeklyRecord weekEndDate(String weekEndDate) {
    this.weekEndDate = weekEndDate;
    return this;
  }

  /**
   * End of week date.
   * @return weekEndDate
   */
  @javax.annotation.Nullable
  public String getWeekEndDate() {
    return weekEndDate;
  }

  public void setWeekEndDate(String weekEndDate) {
    this.weekEndDate = weekEndDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GasWeeklyRecord gasWeeklyRecord = (GasWeeklyRecord) o;
    return Objects.equals(this.averagePricePerGalRegularGasoline, gasWeeklyRecord.averagePricePerGalRegularGasoline) &&
        Objects.equals(this.country, gasWeeklyRecord.country) &&
        Objects.equals(this.paDDCode, gasWeeklyRecord.paDDCode) &&
        Objects.equals(this.paDDMillionsofBarrelsSold, gasWeeklyRecord.paDDMillionsofBarrelsSold) &&
        Objects.equals(this.paDDPercentChangeInBarrelsFromPriorWeek, gasWeeklyRecord.paDDPercentChangeInBarrelsFromPriorWeek) &&
        Objects.equals(this.paDDPercentChangeinBarrelsfrom52WeeksAgo, gasWeeklyRecord.paDDPercentChangeinBarrelsfrom52WeeksAgo) &&
        Objects.equals(this.period, gasWeeklyRecord.period) &&
        Objects.equals(this.productLine, gasWeeklyRecord.productLine) &&
        Objects.equals(this.publicationCoveragePeriod, gasWeeklyRecord.publicationCoveragePeriod) &&
        Objects.equals(this.reportType, gasWeeklyRecord.reportType) &&
        Objects.equals(this.sector, gasWeeklyRecord.sector) &&
        Objects.equals(this.segment, gasWeeklyRecord.segment) &&
        Objects.equals(this.subSector, gasWeeklyRecord.subSector) &&
        Objects.equals(this.totalBarrelsChangeFromPriorWeek, gasWeeklyRecord.totalBarrelsChangeFromPriorWeek) &&
        Objects.equals(this.totalMillionsOfBarrels4WeekAverage, gasWeeklyRecord.totalMillionsOfBarrels4WeekAverage) &&
        Objects.equals(this.totalMillionsOfBarrelsDailyAverage, gasWeeklyRecord.totalMillionsOfBarrelsDailyAverage) &&
        Objects.equals(this.totalMillionsOfBarrelsSold, gasWeeklyRecord.totalMillionsOfBarrelsSold) &&
        Objects.equals(this.totalPercentChangeInBarrelsFrom52WeeksAgo, gasWeeklyRecord.totalPercentChangeInBarrelsFrom52WeeksAgo) &&
        Objects.equals(this.totalPercentChangeInBarrelsFromPriorWeek, gasWeeklyRecord.totalPercentChangeInBarrelsFromPriorWeek) &&
        Objects.equals(this.totalPercentChangeInThe4WeekAverageFrom52WeeksAgo, gasWeeklyRecord.totalPercentChangeInThe4WeekAverageFrom52WeeksAgo) &&
        Objects.equals(this.weekEndDate, gasWeeklyRecord.weekEndDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(averagePricePerGalRegularGasoline, country, paDDCode, paDDMillionsofBarrelsSold, paDDPercentChangeInBarrelsFromPriorWeek, paDDPercentChangeinBarrelsfrom52WeeksAgo, period, productLine, publicationCoveragePeriod, reportType, sector, segment, subSector, totalBarrelsChangeFromPriorWeek, totalMillionsOfBarrels4WeekAverage, totalMillionsOfBarrelsDailyAverage, totalMillionsOfBarrelsSold, totalPercentChangeInBarrelsFrom52WeeksAgo, totalPercentChangeInBarrelsFromPriorWeek, totalPercentChangeInThe4WeekAverageFrom52WeeksAgo, weekEndDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GasWeeklyRecord {\n");
    sb.append("    averagePricePerGalRegularGasoline: ").append(toIndentedString(averagePricePerGalRegularGasoline)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    paDDCode: ").append(toIndentedString(paDDCode)).append("\n");
    sb.append("    paDDMillionsofBarrelsSold: ").append(toIndentedString(paDDMillionsofBarrelsSold)).append("\n");
    sb.append("    paDDPercentChangeInBarrelsFromPriorWeek: ").append(toIndentedString(paDDPercentChangeInBarrelsFromPriorWeek)).append("\n");
    sb.append("    paDDPercentChangeinBarrelsfrom52WeeksAgo: ").append(toIndentedString(paDDPercentChangeinBarrelsfrom52WeeksAgo)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    productLine: ").append(toIndentedString(productLine)).append("\n");
    sb.append("    publicationCoveragePeriod: ").append(toIndentedString(publicationCoveragePeriod)).append("\n");
    sb.append("    reportType: ").append(toIndentedString(reportType)).append("\n");
    sb.append("    sector: ").append(toIndentedString(sector)).append("\n");
    sb.append("    segment: ").append(toIndentedString(segment)).append("\n");
    sb.append("    subSector: ").append(toIndentedString(subSector)).append("\n");
    sb.append("    totalBarrelsChangeFromPriorWeek: ").append(toIndentedString(totalBarrelsChangeFromPriorWeek)).append("\n");
    sb.append("    totalMillionsOfBarrels4WeekAverage: ").append(toIndentedString(totalMillionsOfBarrels4WeekAverage)).append("\n");
    sb.append("    totalMillionsOfBarrelsDailyAverage: ").append(toIndentedString(totalMillionsOfBarrelsDailyAverage)).append("\n");
    sb.append("    totalMillionsOfBarrelsSold: ").append(toIndentedString(totalMillionsOfBarrelsSold)).append("\n");
    sb.append("    totalPercentChangeInBarrelsFrom52WeeksAgo: ").append(toIndentedString(totalPercentChangeInBarrelsFrom52WeeksAgo)).append("\n");
    sb.append("    totalPercentChangeInBarrelsFromPriorWeek: ").append(toIndentedString(totalPercentChangeInBarrelsFromPriorWeek)).append("\n");
    sb.append("    totalPercentChangeInThe4WeekAverageFrom52WeeksAgo: ").append(toIndentedString(totalPercentChangeInThe4WeekAverageFrom52WeeksAgo)).append("\n");
    sb.append("    weekEndDate: ").append(toIndentedString(weekEndDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AveragePricePerGalRegularGasoline");
    openapiFields.add("Country");
    openapiFields.add("PADDCode");
    openapiFields.add("PADDMillionsofBarrelsSold");
    openapiFields.add("PADDPercentChangeInBarrelsFromPriorWeek");
    openapiFields.add("PADDPercentChangeinBarrelsfrom52WeeksAgo");
    openapiFields.add("Period");
    openapiFields.add("ProductLine");
    openapiFields.add("PublicationCoveragePeriod");
    openapiFields.add("ReportType");
    openapiFields.add("Sector");
    openapiFields.add("Segment");
    openapiFields.add("SubSector");
    openapiFields.add("TotalBarrelsChangeFromPriorWeek");
    openapiFields.add("TotalMillionsOfBarrels4WeekAverage");
    openapiFields.add("TotalMillionsOfBarrelsDailyAverage");
    openapiFields.add("TotalMillionsOfBarrelsSold");
    openapiFields.add("TotalPercentChangeInBarrelsFrom52WeeksAgo");
    openapiFields.add("TotalPercentChangeInBarrelsFromPriorWeek");
    openapiFields.add("TotalPercentChangeInThe4WeekAverageFrom52WeeksAgo");
    openapiFields.add("WeekEndDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GasWeeklyRecord
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GasWeeklyRecord.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GasWeeklyRecord is not found in the empty JSON string", GasWeeklyRecord.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GasWeeklyRecord.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GasWeeklyRecord` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AveragePricePerGalRegularGasoline") != null && !jsonObj.get("AveragePricePerGalRegularGasoline").isJsonNull()) && !jsonObj.get("AveragePricePerGalRegularGasoline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AveragePricePerGalRegularGasoline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AveragePricePerGalRegularGasoline").toString()));
      }
      if ((jsonObj.get("Country") != null && !jsonObj.get("Country").isJsonNull()) && !jsonObj.get("Country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Country").toString()));
      }
      if ((jsonObj.get("PADDCode") != null && !jsonObj.get("PADDCode").isJsonNull()) && !jsonObj.get("PADDCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PADDCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PADDCode").toString()));
      }
      if ((jsonObj.get("PADDMillionsofBarrelsSold") != null && !jsonObj.get("PADDMillionsofBarrelsSold").isJsonNull()) && !jsonObj.get("PADDMillionsofBarrelsSold").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PADDMillionsofBarrelsSold` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PADDMillionsofBarrelsSold").toString()));
      }
      if ((jsonObj.get("PADDPercentChangeInBarrelsFromPriorWeek") != null && !jsonObj.get("PADDPercentChangeInBarrelsFromPriorWeek").isJsonNull()) && !jsonObj.get("PADDPercentChangeInBarrelsFromPriorWeek").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PADDPercentChangeInBarrelsFromPriorWeek` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PADDPercentChangeInBarrelsFromPriorWeek").toString()));
      }
      if ((jsonObj.get("PADDPercentChangeinBarrelsfrom52WeeksAgo") != null && !jsonObj.get("PADDPercentChangeinBarrelsfrom52WeeksAgo").isJsonNull()) && !jsonObj.get("PADDPercentChangeinBarrelsfrom52WeeksAgo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PADDPercentChangeinBarrelsfrom52WeeksAgo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PADDPercentChangeinBarrelsfrom52WeeksAgo").toString()));
      }
      if ((jsonObj.get("Period") != null && !jsonObj.get("Period").isJsonNull()) && !jsonObj.get("Period").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Period` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Period").toString()));
      }
      if ((jsonObj.get("ProductLine") != null && !jsonObj.get("ProductLine").isJsonNull()) && !jsonObj.get("ProductLine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProductLine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProductLine").toString()));
      }
      if ((jsonObj.get("PublicationCoveragePeriod") != null && !jsonObj.get("PublicationCoveragePeriod").isJsonNull()) && !jsonObj.get("PublicationCoveragePeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PublicationCoveragePeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PublicationCoveragePeriod").toString()));
      }
      if ((jsonObj.get("ReportType") != null && !jsonObj.get("ReportType").isJsonNull()) && !jsonObj.get("ReportType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReportType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReportType").toString()));
      }
      if ((jsonObj.get("Sector") != null && !jsonObj.get("Sector").isJsonNull()) && !jsonObj.get("Sector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Sector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Sector").toString()));
      }
      if ((jsonObj.get("Segment") != null && !jsonObj.get("Segment").isJsonNull()) && !jsonObj.get("Segment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Segment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Segment").toString()));
      }
      if ((jsonObj.get("SubSector") != null && !jsonObj.get("SubSector").isJsonNull()) && !jsonObj.get("SubSector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SubSector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SubSector").toString()));
      }
      if ((jsonObj.get("TotalBarrelsChangeFromPriorWeek") != null && !jsonObj.get("TotalBarrelsChangeFromPriorWeek").isJsonNull()) && !jsonObj.get("TotalBarrelsChangeFromPriorWeek").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalBarrelsChangeFromPriorWeek` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalBarrelsChangeFromPriorWeek").toString()));
      }
      if ((jsonObj.get("TotalMillionsOfBarrels4WeekAverage") != null && !jsonObj.get("TotalMillionsOfBarrels4WeekAverage").isJsonNull()) && !jsonObj.get("TotalMillionsOfBarrels4WeekAverage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalMillionsOfBarrels4WeekAverage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalMillionsOfBarrels4WeekAverage").toString()));
      }
      if ((jsonObj.get("TotalMillionsOfBarrelsDailyAverage") != null && !jsonObj.get("TotalMillionsOfBarrelsDailyAverage").isJsonNull()) && !jsonObj.get("TotalMillionsOfBarrelsDailyAverage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalMillionsOfBarrelsDailyAverage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalMillionsOfBarrelsDailyAverage").toString()));
      }
      if ((jsonObj.get("TotalMillionsOfBarrelsSold") != null && !jsonObj.get("TotalMillionsOfBarrelsSold").isJsonNull()) && !jsonObj.get("TotalMillionsOfBarrelsSold").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalMillionsOfBarrelsSold` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalMillionsOfBarrelsSold").toString()));
      }
      if ((jsonObj.get("TotalPercentChangeInBarrelsFrom52WeeksAgo") != null && !jsonObj.get("TotalPercentChangeInBarrelsFrom52WeeksAgo").isJsonNull()) && !jsonObj.get("TotalPercentChangeInBarrelsFrom52WeeksAgo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalPercentChangeInBarrelsFrom52WeeksAgo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalPercentChangeInBarrelsFrom52WeeksAgo").toString()));
      }
      if ((jsonObj.get("TotalPercentChangeInBarrelsFromPriorWeek") != null && !jsonObj.get("TotalPercentChangeInBarrelsFromPriorWeek").isJsonNull()) && !jsonObj.get("TotalPercentChangeInBarrelsFromPriorWeek").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalPercentChangeInBarrelsFromPriorWeek` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalPercentChangeInBarrelsFromPriorWeek").toString()));
      }
      if ((jsonObj.get("TotalPercentChangeInThe4WeekAverageFrom52WeeksAgo") != null && !jsonObj.get("TotalPercentChangeInThe4WeekAverageFrom52WeeksAgo").isJsonNull()) && !jsonObj.get("TotalPercentChangeInThe4WeekAverageFrom52WeeksAgo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalPercentChangeInThe4WeekAverageFrom52WeeksAgo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalPercentChangeInThe4WeekAverageFrom52WeeksAgo").toString()));
      }
      if ((jsonObj.get("WeekEndDate") != null && !jsonObj.get("WeekEndDate").isJsonNull()) && !jsonObj.get("WeekEndDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WeekEndDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WeekEndDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GasWeeklyRecord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GasWeeklyRecord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GasWeeklyRecord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GasWeeklyRecord.class));

       return (TypeAdapter<T>) new TypeAdapter<GasWeeklyRecord>() {
           @Override
           public void write(JsonWriter out, GasWeeklyRecord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GasWeeklyRecord read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GasWeeklyRecord given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GasWeeklyRecord
   * @throws IOException if the JSON string is invalid with respect to GasWeeklyRecord
   */
  public static GasWeeklyRecord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GasWeeklyRecord.class);
  }

  /**
   * Convert an instance of GasWeeklyRecord to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

