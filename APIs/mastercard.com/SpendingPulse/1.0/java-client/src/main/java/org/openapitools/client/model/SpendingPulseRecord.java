/*
 * Spending Pulse
 * This API will provide monthly data which includes metrics such as sales volume and growth rate.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SpendingPulseRecord
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:06.762469-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SpendingPulseRecord {
  public static final String SERIALIZED_NAME_COUNTRY = "Country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_CURRENCY_OF_FOR_SALES_VALUE = "CurrencyOfForSalesValue";
  @SerializedName(SERIALIZED_NAME_CURRENCY_OF_FOR_SALES_VALUE)
  private String currencyOfForSalesValue;

  public static final String SERIALIZED_NAME_ECOMM = "Ecomm";
  @SerializedName(SERIALIZED_NAME_ECOMM)
  private String ecomm;

  public static final String SERIALIZED_NAME_IMPLIED_DEFLATOR_MONTH_OVER_MONTH_CHANGE = "ImpliedDeflatorMonthOverMonthChange";
  @SerializedName(SERIALIZED_NAME_IMPLIED_DEFLATOR_MONTH_OVER_MONTH_CHANGE)
  private String impliedDeflatorMonthOverMonthChange;

  public static final String SERIALIZED_NAME_IMPLIED_DEFLATOR_YEAR_OVER_YEAR_CHANGE = "ImpliedDeflatorYearOverYearChange";
  @SerializedName(SERIALIZED_NAME_IMPLIED_DEFLATOR_YEAR_OVER_YEAR_CHANGE)
  private String impliedDeflatorYearOverYearChange;

  public static final String SERIALIZED_NAME_NON_GREGORIAN_REPORTING_PERIOD = "NonGregorianReportingPeriod";
  @SerializedName(SERIALIZED_NAME_NON_GREGORIAN_REPORTING_PERIOD)
  private String nonGregorianReportingPeriod;

  public static final String SERIALIZED_NAME_PERIOD = "Period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private String period;

  public static final String SERIALIZED_NAME_PERIOD_END_DATE = "PeriodEndDate";
  @SerializedName(SERIALIZED_NAME_PERIOD_END_DATE)
  private String periodEndDate;

  public static final String SERIALIZED_NAME_PERIOD_START_DATE = "PeriodStartDate";
  @SerializedName(SERIALIZED_NAME_PERIOD_START_DATE)
  private String periodStartDate;

  public static final String SERIALIZED_NAME_PRICE_ADJUSTMENT_FLAG = "PriceAdjustmentFlag";
  @SerializedName(SERIALIZED_NAME_PRICE_ADJUSTMENT_FLAG)
  private String priceAdjustmentFlag;

  public static final String SERIALIZED_NAME_PRICE_INDEX3_MONTH_MOVING_AVERAGE_CHANGE = "PriceIndex3MonthMovingAverageChange";
  @SerializedName(SERIALIZED_NAME_PRICE_INDEX3_MONTH_MOVING_AVERAGE_CHANGE)
  private String priceIndex3MonthMovingAverageChange;

  public static final String SERIALIZED_NAME_PRICE_INDEX_MONTH_OVER_MONTH_CHANGE = "PriceIndexMonthOverMonthChange";
  @SerializedName(SERIALIZED_NAME_PRICE_INDEX_MONTH_OVER_MONTH_CHANGE)
  private String priceIndexMonthOverMonthChange;

  public static final String SERIALIZED_NAME_PRICE_INDEX_VALUE = "PriceIndexValue";
  @SerializedName(SERIALIZED_NAME_PRICE_INDEX_VALUE)
  private String priceIndexValue;

  public static final String SERIALIZED_NAME_PRICE_INDEX_YEAR_OVER_YEAR_CHANGE = "PriceIndexYearOverYearChange";
  @SerializedName(SERIALIZED_NAME_PRICE_INDEX_YEAR_OVER_YEAR_CHANGE)
  private String priceIndexYearOverYearChange;

  public static final String SERIALIZED_NAME_PRODUCT_LINE = "ProductLine";
  @SerializedName(SERIALIZED_NAME_PRODUCT_LINE)
  private String productLine;

  public static final String SERIALIZED_NAME_PUBLICATION_COVERAGE_PERIOD = "PublicationCoveragePeriod";
  @SerializedName(SERIALIZED_NAME_PUBLICATION_COVERAGE_PERIOD)
  private String publicationCoveragePeriod;

  public static final String SERIALIZED_NAME_REPORT_TYPE = "ReportType";
  @SerializedName(SERIALIZED_NAME_REPORT_TYPE)
  private String reportType;

  public static final String SERIALIZED_NAME_REPORTING_CALENDER = "ReportingCalender";
  @SerializedName(SERIALIZED_NAME_REPORTING_CALENDER)
  private String reportingCalender;

  public static final String SERIALIZED_NAME_SALES3_MONTH_MOVING_AVERAGE_CHANGE = "Sales3MonthMovingAverageChange";
  @SerializedName(SERIALIZED_NAME_SALES3_MONTH_MOVING_AVERAGE_CHANGE)
  private String sales3MonthMovingAverageChange;

  public static final String SERIALIZED_NAME_SALES_MONTH_OVER_MONTH_CHANGE = "SalesMonthOverMonthChange";
  @SerializedName(SERIALIZED_NAME_SALES_MONTH_OVER_MONTH_CHANGE)
  private String salesMonthOverMonthChange;

  public static final String SERIALIZED_NAME_SALES_VALUE_INDEX = "SalesValueIndex";
  @SerializedName(SERIALIZED_NAME_SALES_VALUE_INDEX)
  private String salesValueIndex;

  public static final String SERIALIZED_NAME_SALES_YEAR_OVER_YEAR_CHANGE = "SalesYearOverYearChange";
  @SerializedName(SERIALIZED_NAME_SALES_YEAR_OVER_YEAR_CHANGE)
  private String salesYearOverYearChange;

  public static final String SERIALIZED_NAME_SALES_YEAR_TO_DATE_CHANGE = "SalesYearToDateChange";
  @SerializedName(SERIALIZED_NAME_SALES_YEAR_TO_DATE_CHANGE)
  private String salesYearToDateChange;

  public static final String SERIALIZED_NAME_SAME_STORE_SALES_INDEX3_MONTH_MOVING_AVERAGE_CHANGE = "SameStoreSalesIndex3MonthMovingAverageChange";
  @SerializedName(SERIALIZED_NAME_SAME_STORE_SALES_INDEX3_MONTH_MOVING_AVERAGE_CHANGE)
  private String sameStoreSalesIndex3MonthMovingAverageChange;

  public static final String SERIALIZED_NAME_SAME_STORE_SALES_INDEX_YEAR_OVER_YEAR_CHANGE = "SameStoreSalesIndexYearOverYearChange";
  @SerializedName(SERIALIZED_NAME_SAME_STORE_SALES_INDEX_YEAR_OVER_YEAR_CHANGE)
  private String sameStoreSalesIndexYearOverYearChange;

  public static final String SERIALIZED_NAME_SEASONAL_ADJUSTMENT_FLAG = "SeasonalAdjustmentFlag";
  @SerializedName(SERIALIZED_NAME_SEASONAL_ADJUSTMENT_FLAG)
  private String seasonalAdjustmentFlag;

  public static final String SERIALIZED_NAME_SECTOR = "Sector";
  @SerializedName(SERIALIZED_NAME_SECTOR)
  private String sector;

  public static final String SERIALIZED_NAME_SEGMENT = "Segment";
  @SerializedName(SERIALIZED_NAME_SEGMENT)
  private String segment;

  public static final String SERIALIZED_NAME_SUB_GEOGRAPHY_VALUE = "SubGeographyValue";
  @SerializedName(SERIALIZED_NAME_SUB_GEOGRAPHY_VALUE)
  private String subGeographyValue;

  public static final String SERIALIZED_NAME_SUB_SECTOR = "SubSector";
  @SerializedName(SERIALIZED_NAME_SUB_SECTOR)
  private String subSector;

  public static final String SERIALIZED_NAME_TRANSACTION_INDEX3_MONTH_MOVING_AVERAGE_CHANGE = "TransactionIndex3MonthMovingAverageChange";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_INDEX3_MONTH_MOVING_AVERAGE_CHANGE)
  private String transactionIndex3MonthMovingAverageChange;

  public static final String SERIALIZED_NAME_TRANSACTION_INDEX_MONTH_OVER_MONTH_CHANGE = "TransactionIndexMonthOverMonthChange";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_INDEX_MONTH_OVER_MONTH_CHANGE)
  private String transactionIndexMonthOverMonthChange;

  public static final String SERIALIZED_NAME_TRANSACTION_INDEX_VALUE = "TransactionIndexValue";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_INDEX_VALUE)
  private String transactionIndexValue;

  public static final String SERIALIZED_NAME_TRANSACTION_INDEX_YEAR_OVER_YEAR_CHANGE = "TransactionIndexYearOverYearChange";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_INDEX_YEAR_OVER_YEAR_CHANGE)
  private String transactionIndexYearOverYearChange;

  public SpendingPulseRecord() {
  }

  public SpendingPulseRecord country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Country Code.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public SpendingPulseRecord currencyOfForSalesValue(String currencyOfForSalesValue) {
    this.currencyOfForSalesValue = currencyOfForSalesValue;
    return this;
  }

  /**
   * A value to indicate the currency in which the sales value is being reported. For sales index values, this field is not used.
   * @return currencyOfForSalesValue
   */
  @javax.annotation.Nullable
  public String getCurrencyOfForSalesValue() {
    return currencyOfForSalesValue;
  }

  public void setCurrencyOfForSalesValue(String currencyOfForSalesValue) {
    this.currencyOfForSalesValue = currencyOfForSalesValue;
  }


  public SpendingPulseRecord ecomm(String ecomm) {
    this.ecomm = ecomm;
    return this;
  }

  /**
   * Ecommerce indicator. \&quot;yes\&quot; or \&quot;no\&quot; are the options.
   * @return ecomm
   */
  @javax.annotation.Nullable
  public String getEcomm() {
    return ecomm;
  }

  public void setEcomm(String ecomm) {
    this.ecomm = ecomm;
  }


  public SpendingPulseRecord impliedDeflatorMonthOverMonthChange(String impliedDeflatorMonthOverMonthChange) {
    this.impliedDeflatorMonthOverMonthChange = impliedDeflatorMonthOverMonthChange;
    return this;
  }

  /**
   * Percent change from one month ago in the implied deflator (the deflator is used in seasonal adjustment calculation).
   * @return impliedDeflatorMonthOverMonthChange
   */
  @javax.annotation.Nullable
  public String getImpliedDeflatorMonthOverMonthChange() {
    return impliedDeflatorMonthOverMonthChange;
  }

  public void setImpliedDeflatorMonthOverMonthChange(String impliedDeflatorMonthOverMonthChange) {
    this.impliedDeflatorMonthOverMonthChange = impliedDeflatorMonthOverMonthChange;
  }


  public SpendingPulseRecord impliedDeflatorYearOverYearChange(String impliedDeflatorYearOverYearChange) {
    this.impliedDeflatorYearOverYearChange = impliedDeflatorYearOverYearChange;
    return this;
  }

  /**
   * Percent change from one year ago in the implied deflator (the deflator is used in seasonal adjustment calculation).
   * @return impliedDeflatorYearOverYearChange
   */
  @javax.annotation.Nullable
  public String getImpliedDeflatorYearOverYearChange() {
    return impliedDeflatorYearOverYearChange;
  }

  public void setImpliedDeflatorYearOverYearChange(String impliedDeflatorYearOverYearChange) {
    this.impliedDeflatorYearOverYearChange = impliedDeflatorYearOverYearChange;
  }


  public SpendingPulseRecord nonGregorianReportingPeriod(String nonGregorianReportingPeriod) {
    this.nonGregorianReportingPeriod = nonGregorianReportingPeriod;
    return this;
  }

  /**
   * For only those data reported by a non-Gregorian calendar (e.g. US Sectors which are reported based on the National Retail Federation 4-5-4 calendar) this value designates the retail period being reported. As an example, for the US apparel sector, for Period Date &#x3D; February 2015, the reporting period is 2015-01 (February is the first month of US retail year 2015).
   * @return nonGregorianReportingPeriod
   */
  @javax.annotation.Nullable
  public String getNonGregorianReportingPeriod() {
    return nonGregorianReportingPeriod;
  }

  public void setNonGregorianReportingPeriod(String nonGregorianReportingPeriod) {
    this.nonGregorianReportingPeriod = nonGregorianReportingPeriod;
  }


  public SpendingPulseRecord period(String period) {
    this.period = period;
    return this;
  }

  /**
   * Indicates the period covered by the data with possible values of - day, week, month, quarter, annual
   * @return period
   */
  @javax.annotation.Nullable
  public String getPeriod() {
    return period;
  }

  public void setPeriod(String period) {
    this.period = period;
  }


  public SpendingPulseRecord periodEndDate(String periodEndDate) {
    this.periodEndDate = periodEndDate;
    return this;
  }

  /**
   * Date indicating the end of the period covered by ensuing data.
   * @return periodEndDate
   */
  @javax.annotation.Nullable
  public String getPeriodEndDate() {
    return periodEndDate;
  }

  public void setPeriodEndDate(String periodEndDate) {
    this.periodEndDate = periodEndDate;
  }


  public SpendingPulseRecord periodStartDate(String periodStartDate) {
    this.periodStartDate = periodStartDate;
    return this;
  }

  /**
   * Date indicating the beginning of the period covered by ensuing data.
   * @return periodStartDate
   */
  @javax.annotation.Nullable
  public String getPeriodStartDate() {
    return periodStartDate;
  }

  public void setPeriodStartDate(String periodStartDate) {
    this.periodStartDate = periodStartDate;
  }


  public SpendingPulseRecord priceAdjustmentFlag(String priceAdjustmentFlag) {
    this.priceAdjustmentFlag = priceAdjustmentFlag;
    return this;
  }

  /**
   * Price adjustment indicator.
   * @return priceAdjustmentFlag
   */
  @javax.annotation.Nullable
  public String getPriceAdjustmentFlag() {
    return priceAdjustmentFlag;
  }

  public void setPriceAdjustmentFlag(String priceAdjustmentFlag) {
    this.priceAdjustmentFlag = priceAdjustmentFlag;
  }


  public SpendingPulseRecord priceIndex3MonthMovingAverageChange(String priceIndex3MonthMovingAverageChange) {
    this.priceIndex3MonthMovingAverageChange = priceIndex3MonthMovingAverageChange;
    return this;
  }

  /**
   * Percent change from one year ago in the three-month moving PriceIndexValue average.
   * @return priceIndex3MonthMovingAverageChange
   */
  @javax.annotation.Nullable
  public String getPriceIndex3MonthMovingAverageChange() {
    return priceIndex3MonthMovingAverageChange;
  }

  public void setPriceIndex3MonthMovingAverageChange(String priceIndex3MonthMovingAverageChange) {
    this.priceIndex3MonthMovingAverageChange = priceIndex3MonthMovingAverageChange;
  }


  public SpendingPulseRecord priceIndexMonthOverMonthChange(String priceIndexMonthOverMonthChange) {
    this.priceIndexMonthOverMonthChange = priceIndexMonthOverMonthChange;
    return this;
  }

  /**
   * Percent change from one month ago in the PriceIndexValue.
   * @return priceIndexMonthOverMonthChange
   */
  @javax.annotation.Nullable
  public String getPriceIndexMonthOverMonthChange() {
    return priceIndexMonthOverMonthChange;
  }

  public void setPriceIndexMonthOverMonthChange(String priceIndexMonthOverMonthChange) {
    this.priceIndexMonthOverMonthChange = priceIndexMonthOverMonthChange;
  }


  public SpendingPulseRecord priceIndexValue(String priceIndexValue) {
    this.priceIndexValue = priceIndexValue;
    return this;
  }

  /**
   * Published price index value for the period being reported. Not a currency value - a decimal index value. The price index takes into account both the average ticket value and the size of the basket. Changes in either will be reflected in the price index changes.
   * @return priceIndexValue
   */
  @javax.annotation.Nullable
  public String getPriceIndexValue() {
    return priceIndexValue;
  }

  public void setPriceIndexValue(String priceIndexValue) {
    this.priceIndexValue = priceIndexValue;
  }


  public SpendingPulseRecord priceIndexYearOverYearChange(String priceIndexYearOverYearChange) {
    this.priceIndexYearOverYearChange = priceIndexYearOverYearChange;
    return this;
  }

  /**
   * Percent change from one year ago in the PriceIndexValue.
   * @return priceIndexYearOverYearChange
   */
  @javax.annotation.Nullable
  public String getPriceIndexYearOverYearChange() {
    return priceIndexYearOverYearChange;
  }

  public void setPriceIndexYearOverYearChange(String priceIndexYearOverYearChange) {
    this.priceIndexYearOverYearChange = priceIndexYearOverYearChange;
  }


  public SpendingPulseRecord productLine(String productLine) {
    this.productLine = productLine;
    return this;
  }

  /**
   * Product line, either for this resource it will be ?US Executive\&quot;.
   * @return productLine
   */
  @javax.annotation.Nullable
  public String getProductLine() {
    return productLine;
  }

  public void setProductLine(String productLine) {
    this.productLine = productLine;
  }


  public SpendingPulseRecord publicationCoveragePeriod(String publicationCoveragePeriod) {
    this.publicationCoveragePeriod = publicationCoveragePeriod;
    return this;
  }

  /**
   * Publication Coverage Period indicates what period is to be covered, often the current report will include the month prior.
   * @return publicationCoveragePeriod
   */
  @javax.annotation.Nullable
  public String getPublicationCoveragePeriod() {
    return publicationCoveragePeriod;
  }

  public void setPublicationCoveragePeriod(String publicationCoveragePeriod) {
    this.publicationCoveragePeriod = publicationCoveragePeriod;
  }


  public SpendingPulseRecord reportType(String reportType) {
    this.reportType = reportType;
    return this;
  }

  /**
   * Report type name, today the only report supported is \&quot;monitor\&quot;.
   * @return reportType
   */
  @javax.annotation.Nullable
  public String getReportType() {
    return reportType;
  }

  public void setReportType(String reportType) {
    this.reportType = reportType;
  }


  public SpendingPulseRecord reportingCalender(String reportingCalender) {
    this.reportingCalender = reportingCalender;
    return this;
  }

  /**
   * Value indicates calendar used for periodic aggregation (e.g. \&quot;G\&quot; &#x3D; Gregorian, \&quot;454\&quot; &#x3D; US Retail, \&quot;445\&quot; &#x3D; UK ONS, etc.) Please note that some data are reported under more than one calendar. As a result, in order to uniquely identify the data being reported, the reporting calendar must be included.
   * @return reportingCalender
   */
  @javax.annotation.Nullable
  public String getReportingCalender() {
    return reportingCalender;
  }

  public void setReportingCalender(String reportingCalender) {
    this.reportingCalender = reportingCalender;
  }


  public SpendingPulseRecord sales3MonthMovingAverageChange(String sales3MonthMovingAverageChange) {
    this.sales3MonthMovingAverageChange = sales3MonthMovingAverageChange;
    return this;
  }

  /**
   * Percent change from one year ago in the three-month moving SalesIndexValue average.
   * @return sales3MonthMovingAverageChange
   */
  @javax.annotation.Nullable
  public String getSales3MonthMovingAverageChange() {
    return sales3MonthMovingAverageChange;
  }

  public void setSales3MonthMovingAverageChange(String sales3MonthMovingAverageChange) {
    this.sales3MonthMovingAverageChange = sales3MonthMovingAverageChange;
  }


  public SpendingPulseRecord salesMonthOverMonthChange(String salesMonthOverMonthChange) {
    this.salesMonthOverMonthChange = salesMonthOverMonthChange;
    return this;
  }

  /**
   * Percent change from one month ago in the SalesValueIndex.
   * @return salesMonthOverMonthChange
   */
  @javax.annotation.Nullable
  public String getSalesMonthOverMonthChange() {
    return salesMonthOverMonthChange;
  }

  public void setSalesMonthOverMonthChange(String salesMonthOverMonthChange) {
    this.salesMonthOverMonthChange = salesMonthOverMonthChange;
  }


  public SpendingPulseRecord salesValueIndex(String salesValueIndex) {
    this.salesValueIndex = salesValueIndex;
    return this;
  }

  /**
   * Aggregated/computed value of sales for the period being reported. This may be an index value (not a currency value - just a decimal value) or it may be a currency value that would typically be in local currency (dollar, pound, yen, etc.)
   * @return salesValueIndex
   */
  @javax.annotation.Nullable
  public String getSalesValueIndex() {
    return salesValueIndex;
  }

  public void setSalesValueIndex(String salesValueIndex) {
    this.salesValueIndex = salesValueIndex;
  }


  public SpendingPulseRecord salesYearOverYearChange(String salesYearOverYearChange) {
    this.salesYearOverYearChange = salesYearOverYearChange;
    return this;
  }

  /**
   * Percent change from one year ago in the SalesValueIndex.
   * @return salesYearOverYearChange
   */
  @javax.annotation.Nullable
  public String getSalesYearOverYearChange() {
    return salesYearOverYearChange;
  }

  public void setSalesYearOverYearChange(String salesYearOverYearChange) {
    this.salesYearOverYearChange = salesYearOverYearChange;
  }


  public SpendingPulseRecord salesYearToDateChange(String salesYearToDateChange) {
    this.salesYearToDateChange = salesYearToDateChange;
    return this;
  }

  /**
   * Percent change from year ago.
   * @return salesYearToDateChange
   */
  @javax.annotation.Nullable
  public String getSalesYearToDateChange() {
    return salesYearToDateChange;
  }

  public void setSalesYearToDateChange(String salesYearToDateChange) {
    this.salesYearToDateChange = salesYearToDateChange;
  }


  public SpendingPulseRecord sameStoreSalesIndex3MonthMovingAverageChange(String sameStoreSalesIndex3MonthMovingAverageChange) {
    this.sameStoreSalesIndex3MonthMovingAverageChange = sameStoreSalesIndex3MonthMovingAverageChange;
    return this;
  }

  /**
   * Percent change from one month ago in the SameStoreSalesIndex.
   * @return sameStoreSalesIndex3MonthMovingAverageChange
   */
  @javax.annotation.Nullable
  public String getSameStoreSalesIndex3MonthMovingAverageChange() {
    return sameStoreSalesIndex3MonthMovingAverageChange;
  }

  public void setSameStoreSalesIndex3MonthMovingAverageChange(String sameStoreSalesIndex3MonthMovingAverageChange) {
    this.sameStoreSalesIndex3MonthMovingAverageChange = sameStoreSalesIndex3MonthMovingAverageChange;
  }


  public SpendingPulseRecord sameStoreSalesIndexYearOverYearChange(String sameStoreSalesIndexYearOverYearChange) {
    this.sameStoreSalesIndexYearOverYearChange = sameStoreSalesIndexYearOverYearChange;
    return this;
  }

  /**
   * Percent change from one year ago in the SameStoreSalesIndex.
   * @return sameStoreSalesIndexYearOverYearChange
   */
  @javax.annotation.Nullable
  public String getSameStoreSalesIndexYearOverYearChange() {
    return sameStoreSalesIndexYearOverYearChange;
  }

  public void setSameStoreSalesIndexYearOverYearChange(String sameStoreSalesIndexYearOverYearChange) {
    this.sameStoreSalesIndexYearOverYearChange = sameStoreSalesIndexYearOverYearChange;
  }


  public SpendingPulseRecord seasonalAdjustmentFlag(String seasonalAdjustmentFlag) {
    this.seasonalAdjustmentFlag = seasonalAdjustmentFlag;
    return this;
  }

  /**
   * Seasonal data adjustment indicator.
   * @return seasonalAdjustmentFlag
   */
  @javax.annotation.Nullable
  public String getSeasonalAdjustmentFlag() {
    return seasonalAdjustmentFlag;
  }

  public void setSeasonalAdjustmentFlag(String seasonalAdjustmentFlag) {
    this.seasonalAdjustmentFlag = seasonalAdjustmentFlag;
  }


  public SpendingPulseRecord sector(String sector) {
    this.sector = sector;
    return this;
  }

  /**
   * Sector name/id.
   * @return sector
   */
  @javax.annotation.Nullable
  public String getSector() {
    return sector;
  }

  public void setSector(String sector) {
    this.sector = sector;
  }


  public SpendingPulseRecord segment(String segment) {
    this.segment = segment;
    return this;
  }

  /**
   * Sub unit within a sector e.g. Sector &#x3D; restaurant; SubSector &#x3D; Full Service; Segment &#x3D; Fine Dining.
   * @return segment
   */
  @javax.annotation.Nullable
  public String getSegment() {
    return segment;
  }

  public void setSegment(String segment) {
    this.segment = segment;
  }


  public SpendingPulseRecord subGeographyValue(String subGeographyValue) {
    this.subGeographyValue = subGeographyValue;
    return this;
  }

  /**
   * For those data reported by sub-geographies (e.g. regions, states, etc.) the sub-geography being reported.
   * @return subGeographyValue
   */
  @javax.annotation.Nullable
  public String getSubGeographyValue() {
    return subGeographyValue;
  }

  public void setSubGeographyValue(String subGeographyValue) {
    this.subGeographyValue = subGeographyValue;
  }


  public SpendingPulseRecord subSector(String subSector) {
    this.subSector = subSector;
    return this;
  }

  /**
   * Sub unit within a sector e.g. Sector &#x3D; Electronics &amp; Appliances; SubSector &#x3D; Electronics.
   * @return subSector
   */
  @javax.annotation.Nullable
  public String getSubSector() {
    return subSector;
  }

  public void setSubSector(String subSector) {
    this.subSector = subSector;
  }


  public SpendingPulseRecord transactionIndex3MonthMovingAverageChange(String transactionIndex3MonthMovingAverageChange) {
    this.transactionIndex3MonthMovingAverageChange = transactionIndex3MonthMovingAverageChange;
    return this;
  }

  /**
   * Percent change from one year ago in the three-month moving TransactionIndexValue average.
   * @return transactionIndex3MonthMovingAverageChange
   */
  @javax.annotation.Nullable
  public String getTransactionIndex3MonthMovingAverageChange() {
    return transactionIndex3MonthMovingAverageChange;
  }

  public void setTransactionIndex3MonthMovingAverageChange(String transactionIndex3MonthMovingAverageChange) {
    this.transactionIndex3MonthMovingAverageChange = transactionIndex3MonthMovingAverageChange;
  }


  public SpendingPulseRecord transactionIndexMonthOverMonthChange(String transactionIndexMonthOverMonthChange) {
    this.transactionIndexMonthOverMonthChange = transactionIndexMonthOverMonthChange;
    return this;
  }

  /**
   * Percent change from one month ago in the TransactionIndexValue.
   * @return transactionIndexMonthOverMonthChange
   */
  @javax.annotation.Nullable
  public String getTransactionIndexMonthOverMonthChange() {
    return transactionIndexMonthOverMonthChange;
  }

  public void setTransactionIndexMonthOverMonthChange(String transactionIndexMonthOverMonthChange) {
    this.transactionIndexMonthOverMonthChange = transactionIndexMonthOverMonthChange;
  }


  public SpendingPulseRecord transactionIndexValue(String transactionIndexValue) {
    this.transactionIndexValue = transactionIndexValue;
    return this;
  }

  /**
   * Published transaction index value for the period being reported. Not a currency value - a decimal index value. The transaction index is a relative indication of transactions volume in the sector/sub-sector/segment being reported.
   * @return transactionIndexValue
   */
  @javax.annotation.Nullable
  public String getTransactionIndexValue() {
    return transactionIndexValue;
  }

  public void setTransactionIndexValue(String transactionIndexValue) {
    this.transactionIndexValue = transactionIndexValue;
  }


  public SpendingPulseRecord transactionIndexYearOverYearChange(String transactionIndexYearOverYearChange) {
    this.transactionIndexYearOverYearChange = transactionIndexYearOverYearChange;
    return this;
  }

  /**
   * Percent change from one year ago in the TransactionIndexValue.
   * @return transactionIndexYearOverYearChange
   */
  @javax.annotation.Nullable
  public String getTransactionIndexYearOverYearChange() {
    return transactionIndexYearOverYearChange;
  }

  public void setTransactionIndexYearOverYearChange(String transactionIndexYearOverYearChange) {
    this.transactionIndexYearOverYearChange = transactionIndexYearOverYearChange;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpendingPulseRecord spendingPulseRecord = (SpendingPulseRecord) o;
    return Objects.equals(this.country, spendingPulseRecord.country) &&
        Objects.equals(this.currencyOfForSalesValue, spendingPulseRecord.currencyOfForSalesValue) &&
        Objects.equals(this.ecomm, spendingPulseRecord.ecomm) &&
        Objects.equals(this.impliedDeflatorMonthOverMonthChange, spendingPulseRecord.impliedDeflatorMonthOverMonthChange) &&
        Objects.equals(this.impliedDeflatorYearOverYearChange, spendingPulseRecord.impliedDeflatorYearOverYearChange) &&
        Objects.equals(this.nonGregorianReportingPeriod, spendingPulseRecord.nonGregorianReportingPeriod) &&
        Objects.equals(this.period, spendingPulseRecord.period) &&
        Objects.equals(this.periodEndDate, spendingPulseRecord.periodEndDate) &&
        Objects.equals(this.periodStartDate, spendingPulseRecord.periodStartDate) &&
        Objects.equals(this.priceAdjustmentFlag, spendingPulseRecord.priceAdjustmentFlag) &&
        Objects.equals(this.priceIndex3MonthMovingAverageChange, spendingPulseRecord.priceIndex3MonthMovingAverageChange) &&
        Objects.equals(this.priceIndexMonthOverMonthChange, spendingPulseRecord.priceIndexMonthOverMonthChange) &&
        Objects.equals(this.priceIndexValue, spendingPulseRecord.priceIndexValue) &&
        Objects.equals(this.priceIndexYearOverYearChange, spendingPulseRecord.priceIndexYearOverYearChange) &&
        Objects.equals(this.productLine, spendingPulseRecord.productLine) &&
        Objects.equals(this.publicationCoveragePeriod, spendingPulseRecord.publicationCoveragePeriod) &&
        Objects.equals(this.reportType, spendingPulseRecord.reportType) &&
        Objects.equals(this.reportingCalender, spendingPulseRecord.reportingCalender) &&
        Objects.equals(this.sales3MonthMovingAverageChange, spendingPulseRecord.sales3MonthMovingAverageChange) &&
        Objects.equals(this.salesMonthOverMonthChange, spendingPulseRecord.salesMonthOverMonthChange) &&
        Objects.equals(this.salesValueIndex, spendingPulseRecord.salesValueIndex) &&
        Objects.equals(this.salesYearOverYearChange, spendingPulseRecord.salesYearOverYearChange) &&
        Objects.equals(this.salesYearToDateChange, spendingPulseRecord.salesYearToDateChange) &&
        Objects.equals(this.sameStoreSalesIndex3MonthMovingAverageChange, spendingPulseRecord.sameStoreSalesIndex3MonthMovingAverageChange) &&
        Objects.equals(this.sameStoreSalesIndexYearOverYearChange, spendingPulseRecord.sameStoreSalesIndexYearOverYearChange) &&
        Objects.equals(this.seasonalAdjustmentFlag, spendingPulseRecord.seasonalAdjustmentFlag) &&
        Objects.equals(this.sector, spendingPulseRecord.sector) &&
        Objects.equals(this.segment, spendingPulseRecord.segment) &&
        Objects.equals(this.subGeographyValue, spendingPulseRecord.subGeographyValue) &&
        Objects.equals(this.subSector, spendingPulseRecord.subSector) &&
        Objects.equals(this.transactionIndex3MonthMovingAverageChange, spendingPulseRecord.transactionIndex3MonthMovingAverageChange) &&
        Objects.equals(this.transactionIndexMonthOverMonthChange, spendingPulseRecord.transactionIndexMonthOverMonthChange) &&
        Objects.equals(this.transactionIndexValue, spendingPulseRecord.transactionIndexValue) &&
        Objects.equals(this.transactionIndexYearOverYearChange, spendingPulseRecord.transactionIndexYearOverYearChange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, currencyOfForSalesValue, ecomm, impliedDeflatorMonthOverMonthChange, impliedDeflatorYearOverYearChange, nonGregorianReportingPeriod, period, periodEndDate, periodStartDate, priceAdjustmentFlag, priceIndex3MonthMovingAverageChange, priceIndexMonthOverMonthChange, priceIndexValue, priceIndexYearOverYearChange, productLine, publicationCoveragePeriod, reportType, reportingCalender, sales3MonthMovingAverageChange, salesMonthOverMonthChange, salesValueIndex, salesYearOverYearChange, salesYearToDateChange, sameStoreSalesIndex3MonthMovingAverageChange, sameStoreSalesIndexYearOverYearChange, seasonalAdjustmentFlag, sector, segment, subGeographyValue, subSector, transactionIndex3MonthMovingAverageChange, transactionIndexMonthOverMonthChange, transactionIndexValue, transactionIndexYearOverYearChange);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpendingPulseRecord {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    currencyOfForSalesValue: ").append(toIndentedString(currencyOfForSalesValue)).append("\n");
    sb.append("    ecomm: ").append(toIndentedString(ecomm)).append("\n");
    sb.append("    impliedDeflatorMonthOverMonthChange: ").append(toIndentedString(impliedDeflatorMonthOverMonthChange)).append("\n");
    sb.append("    impliedDeflatorYearOverYearChange: ").append(toIndentedString(impliedDeflatorYearOverYearChange)).append("\n");
    sb.append("    nonGregorianReportingPeriod: ").append(toIndentedString(nonGregorianReportingPeriod)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    periodEndDate: ").append(toIndentedString(periodEndDate)).append("\n");
    sb.append("    periodStartDate: ").append(toIndentedString(periodStartDate)).append("\n");
    sb.append("    priceAdjustmentFlag: ").append(toIndentedString(priceAdjustmentFlag)).append("\n");
    sb.append("    priceIndex3MonthMovingAverageChange: ").append(toIndentedString(priceIndex3MonthMovingAverageChange)).append("\n");
    sb.append("    priceIndexMonthOverMonthChange: ").append(toIndentedString(priceIndexMonthOverMonthChange)).append("\n");
    sb.append("    priceIndexValue: ").append(toIndentedString(priceIndexValue)).append("\n");
    sb.append("    priceIndexYearOverYearChange: ").append(toIndentedString(priceIndexYearOverYearChange)).append("\n");
    sb.append("    productLine: ").append(toIndentedString(productLine)).append("\n");
    sb.append("    publicationCoveragePeriod: ").append(toIndentedString(publicationCoveragePeriod)).append("\n");
    sb.append("    reportType: ").append(toIndentedString(reportType)).append("\n");
    sb.append("    reportingCalender: ").append(toIndentedString(reportingCalender)).append("\n");
    sb.append("    sales3MonthMovingAverageChange: ").append(toIndentedString(sales3MonthMovingAverageChange)).append("\n");
    sb.append("    salesMonthOverMonthChange: ").append(toIndentedString(salesMonthOverMonthChange)).append("\n");
    sb.append("    salesValueIndex: ").append(toIndentedString(salesValueIndex)).append("\n");
    sb.append("    salesYearOverYearChange: ").append(toIndentedString(salesYearOverYearChange)).append("\n");
    sb.append("    salesYearToDateChange: ").append(toIndentedString(salesYearToDateChange)).append("\n");
    sb.append("    sameStoreSalesIndex3MonthMovingAverageChange: ").append(toIndentedString(sameStoreSalesIndex3MonthMovingAverageChange)).append("\n");
    sb.append("    sameStoreSalesIndexYearOverYearChange: ").append(toIndentedString(sameStoreSalesIndexYearOverYearChange)).append("\n");
    sb.append("    seasonalAdjustmentFlag: ").append(toIndentedString(seasonalAdjustmentFlag)).append("\n");
    sb.append("    sector: ").append(toIndentedString(sector)).append("\n");
    sb.append("    segment: ").append(toIndentedString(segment)).append("\n");
    sb.append("    subGeographyValue: ").append(toIndentedString(subGeographyValue)).append("\n");
    sb.append("    subSector: ").append(toIndentedString(subSector)).append("\n");
    sb.append("    transactionIndex3MonthMovingAverageChange: ").append(toIndentedString(transactionIndex3MonthMovingAverageChange)).append("\n");
    sb.append("    transactionIndexMonthOverMonthChange: ").append(toIndentedString(transactionIndexMonthOverMonthChange)).append("\n");
    sb.append("    transactionIndexValue: ").append(toIndentedString(transactionIndexValue)).append("\n");
    sb.append("    transactionIndexYearOverYearChange: ").append(toIndentedString(transactionIndexYearOverYearChange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Country");
    openapiFields.add("CurrencyOfForSalesValue");
    openapiFields.add("Ecomm");
    openapiFields.add("ImpliedDeflatorMonthOverMonthChange");
    openapiFields.add("ImpliedDeflatorYearOverYearChange");
    openapiFields.add("NonGregorianReportingPeriod");
    openapiFields.add("Period");
    openapiFields.add("PeriodEndDate");
    openapiFields.add("PeriodStartDate");
    openapiFields.add("PriceAdjustmentFlag");
    openapiFields.add("PriceIndex3MonthMovingAverageChange");
    openapiFields.add("PriceIndexMonthOverMonthChange");
    openapiFields.add("PriceIndexValue");
    openapiFields.add("PriceIndexYearOverYearChange");
    openapiFields.add("ProductLine");
    openapiFields.add("PublicationCoveragePeriod");
    openapiFields.add("ReportType");
    openapiFields.add("ReportingCalender");
    openapiFields.add("Sales3MonthMovingAverageChange");
    openapiFields.add("SalesMonthOverMonthChange");
    openapiFields.add("SalesValueIndex");
    openapiFields.add("SalesYearOverYearChange");
    openapiFields.add("SalesYearToDateChange");
    openapiFields.add("SameStoreSalesIndex3MonthMovingAverageChange");
    openapiFields.add("SameStoreSalesIndexYearOverYearChange");
    openapiFields.add("SeasonalAdjustmentFlag");
    openapiFields.add("Sector");
    openapiFields.add("Segment");
    openapiFields.add("SubGeographyValue");
    openapiFields.add("SubSector");
    openapiFields.add("TransactionIndex3MonthMovingAverageChange");
    openapiFields.add("TransactionIndexMonthOverMonthChange");
    openapiFields.add("TransactionIndexValue");
    openapiFields.add("TransactionIndexYearOverYearChange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SpendingPulseRecord
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SpendingPulseRecord.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SpendingPulseRecord is not found in the empty JSON string", SpendingPulseRecord.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SpendingPulseRecord.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SpendingPulseRecord` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Country") != null && !jsonObj.get("Country").isJsonNull()) && !jsonObj.get("Country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Country").toString()));
      }
      if ((jsonObj.get("CurrencyOfForSalesValue") != null && !jsonObj.get("CurrencyOfForSalesValue").isJsonNull()) && !jsonObj.get("CurrencyOfForSalesValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrencyOfForSalesValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrencyOfForSalesValue").toString()));
      }
      if ((jsonObj.get("Ecomm") != null && !jsonObj.get("Ecomm").isJsonNull()) && !jsonObj.get("Ecomm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Ecomm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Ecomm").toString()));
      }
      if ((jsonObj.get("ImpliedDeflatorMonthOverMonthChange") != null && !jsonObj.get("ImpliedDeflatorMonthOverMonthChange").isJsonNull()) && !jsonObj.get("ImpliedDeflatorMonthOverMonthChange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImpliedDeflatorMonthOverMonthChange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ImpliedDeflatorMonthOverMonthChange").toString()));
      }
      if ((jsonObj.get("ImpliedDeflatorYearOverYearChange") != null && !jsonObj.get("ImpliedDeflatorYearOverYearChange").isJsonNull()) && !jsonObj.get("ImpliedDeflatorYearOverYearChange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImpliedDeflatorYearOverYearChange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ImpliedDeflatorYearOverYearChange").toString()));
      }
      if ((jsonObj.get("NonGregorianReportingPeriod") != null && !jsonObj.get("NonGregorianReportingPeriod").isJsonNull()) && !jsonObj.get("NonGregorianReportingPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NonGregorianReportingPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NonGregorianReportingPeriod").toString()));
      }
      if ((jsonObj.get("Period") != null && !jsonObj.get("Period").isJsonNull()) && !jsonObj.get("Period").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Period` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Period").toString()));
      }
      if ((jsonObj.get("PeriodEndDate") != null && !jsonObj.get("PeriodEndDate").isJsonNull()) && !jsonObj.get("PeriodEndDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PeriodEndDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PeriodEndDate").toString()));
      }
      if ((jsonObj.get("PeriodStartDate") != null && !jsonObj.get("PeriodStartDate").isJsonNull()) && !jsonObj.get("PeriodStartDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PeriodStartDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PeriodStartDate").toString()));
      }
      if ((jsonObj.get("PriceAdjustmentFlag") != null && !jsonObj.get("PriceAdjustmentFlag").isJsonNull()) && !jsonObj.get("PriceAdjustmentFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PriceAdjustmentFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PriceAdjustmentFlag").toString()));
      }
      if ((jsonObj.get("PriceIndex3MonthMovingAverageChange") != null && !jsonObj.get("PriceIndex3MonthMovingAverageChange").isJsonNull()) && !jsonObj.get("PriceIndex3MonthMovingAverageChange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PriceIndex3MonthMovingAverageChange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PriceIndex3MonthMovingAverageChange").toString()));
      }
      if ((jsonObj.get("PriceIndexMonthOverMonthChange") != null && !jsonObj.get("PriceIndexMonthOverMonthChange").isJsonNull()) && !jsonObj.get("PriceIndexMonthOverMonthChange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PriceIndexMonthOverMonthChange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PriceIndexMonthOverMonthChange").toString()));
      }
      if ((jsonObj.get("PriceIndexValue") != null && !jsonObj.get("PriceIndexValue").isJsonNull()) && !jsonObj.get("PriceIndexValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PriceIndexValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PriceIndexValue").toString()));
      }
      if ((jsonObj.get("PriceIndexYearOverYearChange") != null && !jsonObj.get("PriceIndexYearOverYearChange").isJsonNull()) && !jsonObj.get("PriceIndexYearOverYearChange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PriceIndexYearOverYearChange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PriceIndexYearOverYearChange").toString()));
      }
      if ((jsonObj.get("ProductLine") != null && !jsonObj.get("ProductLine").isJsonNull()) && !jsonObj.get("ProductLine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProductLine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProductLine").toString()));
      }
      if ((jsonObj.get("PublicationCoveragePeriod") != null && !jsonObj.get("PublicationCoveragePeriod").isJsonNull()) && !jsonObj.get("PublicationCoveragePeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PublicationCoveragePeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PublicationCoveragePeriod").toString()));
      }
      if ((jsonObj.get("ReportType") != null && !jsonObj.get("ReportType").isJsonNull()) && !jsonObj.get("ReportType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReportType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReportType").toString()));
      }
      if ((jsonObj.get("ReportingCalender") != null && !jsonObj.get("ReportingCalender").isJsonNull()) && !jsonObj.get("ReportingCalender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReportingCalender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReportingCalender").toString()));
      }
      if ((jsonObj.get("Sales3MonthMovingAverageChange") != null && !jsonObj.get("Sales3MonthMovingAverageChange").isJsonNull()) && !jsonObj.get("Sales3MonthMovingAverageChange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Sales3MonthMovingAverageChange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Sales3MonthMovingAverageChange").toString()));
      }
      if ((jsonObj.get("SalesMonthOverMonthChange") != null && !jsonObj.get("SalesMonthOverMonthChange").isJsonNull()) && !jsonObj.get("SalesMonthOverMonthChange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SalesMonthOverMonthChange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SalesMonthOverMonthChange").toString()));
      }
      if ((jsonObj.get("SalesValueIndex") != null && !jsonObj.get("SalesValueIndex").isJsonNull()) && !jsonObj.get("SalesValueIndex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SalesValueIndex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SalesValueIndex").toString()));
      }
      if ((jsonObj.get("SalesYearOverYearChange") != null && !jsonObj.get("SalesYearOverYearChange").isJsonNull()) && !jsonObj.get("SalesYearOverYearChange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SalesYearOverYearChange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SalesYearOverYearChange").toString()));
      }
      if ((jsonObj.get("SalesYearToDateChange") != null && !jsonObj.get("SalesYearToDateChange").isJsonNull()) && !jsonObj.get("SalesYearToDateChange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SalesYearToDateChange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SalesYearToDateChange").toString()));
      }
      if ((jsonObj.get("SameStoreSalesIndex3MonthMovingAverageChange") != null && !jsonObj.get("SameStoreSalesIndex3MonthMovingAverageChange").isJsonNull()) && !jsonObj.get("SameStoreSalesIndex3MonthMovingAverageChange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SameStoreSalesIndex3MonthMovingAverageChange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SameStoreSalesIndex3MonthMovingAverageChange").toString()));
      }
      if ((jsonObj.get("SameStoreSalesIndexYearOverYearChange") != null && !jsonObj.get("SameStoreSalesIndexYearOverYearChange").isJsonNull()) && !jsonObj.get("SameStoreSalesIndexYearOverYearChange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SameStoreSalesIndexYearOverYearChange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SameStoreSalesIndexYearOverYearChange").toString()));
      }
      if ((jsonObj.get("SeasonalAdjustmentFlag") != null && !jsonObj.get("SeasonalAdjustmentFlag").isJsonNull()) && !jsonObj.get("SeasonalAdjustmentFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SeasonalAdjustmentFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SeasonalAdjustmentFlag").toString()));
      }
      if ((jsonObj.get("Sector") != null && !jsonObj.get("Sector").isJsonNull()) && !jsonObj.get("Sector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Sector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Sector").toString()));
      }
      if ((jsonObj.get("Segment") != null && !jsonObj.get("Segment").isJsonNull()) && !jsonObj.get("Segment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Segment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Segment").toString()));
      }
      if ((jsonObj.get("SubGeographyValue") != null && !jsonObj.get("SubGeographyValue").isJsonNull()) && !jsonObj.get("SubGeographyValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SubGeographyValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SubGeographyValue").toString()));
      }
      if ((jsonObj.get("SubSector") != null && !jsonObj.get("SubSector").isJsonNull()) && !jsonObj.get("SubSector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SubSector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SubSector").toString()));
      }
      if ((jsonObj.get("TransactionIndex3MonthMovingAverageChange") != null && !jsonObj.get("TransactionIndex3MonthMovingAverageChange").isJsonNull()) && !jsonObj.get("TransactionIndex3MonthMovingAverageChange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransactionIndex3MonthMovingAverageChange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TransactionIndex3MonthMovingAverageChange").toString()));
      }
      if ((jsonObj.get("TransactionIndexMonthOverMonthChange") != null && !jsonObj.get("TransactionIndexMonthOverMonthChange").isJsonNull()) && !jsonObj.get("TransactionIndexMonthOverMonthChange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransactionIndexMonthOverMonthChange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TransactionIndexMonthOverMonthChange").toString()));
      }
      if ((jsonObj.get("TransactionIndexValue") != null && !jsonObj.get("TransactionIndexValue").isJsonNull()) && !jsonObj.get("TransactionIndexValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransactionIndexValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TransactionIndexValue").toString()));
      }
      if ((jsonObj.get("TransactionIndexYearOverYearChange") != null && !jsonObj.get("TransactionIndexYearOverYearChange").isJsonNull()) && !jsonObj.get("TransactionIndexYearOverYearChange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransactionIndexYearOverYearChange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TransactionIndexYearOverYearChange").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SpendingPulseRecord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SpendingPulseRecord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SpendingPulseRecord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SpendingPulseRecord.class));

       return (TypeAdapter<T>) new TypeAdapter<SpendingPulseRecord>() {
           @Override
           public void write(JsonWriter out, SpendingPulseRecord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SpendingPulseRecord read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SpendingPulseRecord given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SpendingPulseRecord
   * @throws IOException if the JSON string is invalid with respect to SpendingPulseRecord
   */
  public static SpendingPulseRecord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SpendingPulseRecord.class);
  }

  /**
   * Convert an instance of SpendingPulseRecord to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

