/**
 * MATCH API
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrincipalMatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrincipalMatch::OAIPrincipalMatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrincipalMatch::OAIPrincipalMatch() {
    this->initializeModel();
}

OAIPrincipalMatch::~OAIPrincipalMatch() {}

void OAIPrincipalMatch::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_alt_phone_number_isSet = false;
    m_alt_phone_number_isValid = false;

    m_drivers_license_isSet = false;
    m_drivers_license_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_middle_initial_isSet = false;
    m_middle_initial_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_national_id_isSet = false;
    m_national_id_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_search_criteria_isSet = false;
    m_search_criteria_isValid = false;
}

void OAIPrincipalMatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrincipalMatch::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("Address")]);
    m_address_isSet = !json[QString("Address")].isNull() && m_address_isValid;

    m_alt_phone_number_isValid = ::OpenAPI::fromJsonValue(m_alt_phone_number, json[QString("AltPhoneNumber")]);
    m_alt_phone_number_isSet = !json[QString("AltPhoneNumber")].isNull() && m_alt_phone_number_isValid;

    m_drivers_license_isValid = ::OpenAPI::fromJsonValue(m_drivers_license, json[QString("DriversLicense")]);
    m_drivers_license_isSet = !json[QString("DriversLicense")].isNull() && m_drivers_license_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("FirstName")]);
    m_first_name_isSet = !json[QString("FirstName")].isNull() && m_first_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("LastName")]);
    m_last_name_isSet = !json[QString("LastName")].isNull() && m_last_name_isValid;

    m_middle_initial_isValid = ::OpenAPI::fromJsonValue(m_middle_initial, json[QString("MiddleInitial")]);
    m_middle_initial_isSet = !json[QString("MiddleInitial")].isNull() && m_middle_initial_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_national_id_isValid = ::OpenAPI::fromJsonValue(m_national_id, json[QString("NationalId")]);
    m_national_id_isSet = !json[QString("NationalId")].isNull() && m_national_id_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("PhoneNumber")]);
    m_phone_number_isSet = !json[QString("PhoneNumber")].isNull() && m_phone_number_isValid;

    m_search_criteria_isValid = ::OpenAPI::fromJsonValue(m_search_criteria, json[QString("SearchCriteria")]);
    m_search_criteria_isSet = !json[QString("SearchCriteria")].isNull() && m_search_criteria_isValid;
}

QString OAIPrincipalMatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrincipalMatch::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("Address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_alt_phone_number_isSet) {
        obj.insert(QString("AltPhoneNumber"), ::OpenAPI::toJsonValue(m_alt_phone_number));
    }
    if (m_drivers_license.isSet()) {
        obj.insert(QString("DriversLicense"), ::OpenAPI::toJsonValue(m_drivers_license));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("FirstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("LastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_middle_initial_isSet) {
        obj.insert(QString("MiddleInitial"), ::OpenAPI::toJsonValue(m_middle_initial));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_national_id_isSet) {
        obj.insert(QString("NationalId"), ::OpenAPI::toJsonValue(m_national_id));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("PhoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_search_criteria.isSet()) {
        obj.insert(QString("SearchCriteria"), ::OpenAPI::toJsonValue(m_search_criteria));
    }
    return obj;
}

OAIAddress OAIPrincipalMatch::getAddress() const {
    return m_address;
}
void OAIPrincipalMatch::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIPrincipalMatch::is_address_Set() const{
    return m_address_isSet;
}

bool OAIPrincipalMatch::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIPrincipalMatch::getAltPhoneNumber() const {
    return m_alt_phone_number;
}
void OAIPrincipalMatch::setAltPhoneNumber(const QString &alt_phone_number) {
    m_alt_phone_number = alt_phone_number;
    m_alt_phone_number_isSet = true;
}

bool OAIPrincipalMatch::is_alt_phone_number_Set() const{
    return m_alt_phone_number_isSet;
}

bool OAIPrincipalMatch::is_alt_phone_number_Valid() const{
    return m_alt_phone_number_isValid;
}

OAIDriversLicense OAIPrincipalMatch::getDriversLicense() const {
    return m_drivers_license;
}
void OAIPrincipalMatch::setDriversLicense(const OAIDriversLicense &drivers_license) {
    m_drivers_license = drivers_license;
    m_drivers_license_isSet = true;
}

bool OAIPrincipalMatch::is_drivers_license_Set() const{
    return m_drivers_license_isSet;
}

bool OAIPrincipalMatch::is_drivers_license_Valid() const{
    return m_drivers_license_isValid;
}

QString OAIPrincipalMatch::getFirstName() const {
    return m_first_name;
}
void OAIPrincipalMatch::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIPrincipalMatch::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIPrincipalMatch::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIPrincipalMatch::getLastName() const {
    return m_last_name;
}
void OAIPrincipalMatch::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIPrincipalMatch::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIPrincipalMatch::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIPrincipalMatch::getMiddleInitial() const {
    return m_middle_initial;
}
void OAIPrincipalMatch::setMiddleInitial(const QString &middle_initial) {
    m_middle_initial = middle_initial;
    m_middle_initial_isSet = true;
}

bool OAIPrincipalMatch::is_middle_initial_Set() const{
    return m_middle_initial_isSet;
}

bool OAIPrincipalMatch::is_middle_initial_Valid() const{
    return m_middle_initial_isValid;
}

QString OAIPrincipalMatch::getName() const {
    return m_name;
}
void OAIPrincipalMatch::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPrincipalMatch::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPrincipalMatch::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPrincipalMatch::getNationalId() const {
    return m_national_id;
}
void OAIPrincipalMatch::setNationalId(const QString &national_id) {
    m_national_id = national_id;
    m_national_id_isSet = true;
}

bool OAIPrincipalMatch::is_national_id_Set() const{
    return m_national_id_isSet;
}

bool OAIPrincipalMatch::is_national_id_Valid() const{
    return m_national_id_isValid;
}

QString OAIPrincipalMatch::getPhoneNumber() const {
    return m_phone_number;
}
void OAIPrincipalMatch::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIPrincipalMatch::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIPrincipalMatch::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

OAISearchCriteria OAIPrincipalMatch::getSearchCriteria() const {
    return m_search_criteria;
}
void OAIPrincipalMatch::setSearchCriteria(const OAISearchCriteria &search_criteria) {
    m_search_criteria = search_criteria;
    m_search_criteria_isSet = true;
}

bool OAIPrincipalMatch::is_search_criteria_Set() const{
    return m_search_criteria_isSet;
}

bool OAIPrincipalMatch::is_search_criteria_Valid() const{
    return m_search_criteria_isValid;
}

bool OAIPrincipalMatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alt_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drivers_license.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_middle_initial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_national_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrincipalMatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
