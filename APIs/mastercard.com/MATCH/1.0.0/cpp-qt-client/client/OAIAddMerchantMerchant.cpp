/**
 * MATCH API
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddMerchantMerchant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddMerchantMerchant::OAIAddMerchantMerchant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddMerchantMerchant::OAIAddMerchantMerchant() {
    this->initializeModel();
}

OAIAddMerchantMerchant::~OAIAddMerchantMerchant() {}

void OAIAddMerchantMerchant::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_alt_phone_number_isSet = false;
    m_alt_phone_number_isValid = false;

    m_cat_flag_isSet = false;
    m_cat_flag_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_country_subdivision_tax_id_isSet = false;
    m_country_subdivision_tax_id_isValid = false;

    m_date_closed_isSet = false;
    m_date_closed_isValid = false;

    m_date_opened_isSet = false;
    m_date_opened_isValid = false;

    m_doing_business_as_name_isSet = false;
    m_doing_business_as_name_isValid = false;

    m_merchant_category_isSet = false;
    m_merchant_category_isValid = false;

    m_merchant_id_isSet = false;
    m_merchant_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_national_tax_id_isSet = false;
    m_national_tax_id_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_principal_isSet = false;
    m_principal_isValid = false;

    m_reason_code_isSet = false;
    m_reason_code_isValid = false;

    m_service_prov_dba_isSet = false;
    m_service_prov_dba_isValid = false;

    m_service_prov_legal_isSet = false;
    m_service_prov_legal_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIAddMerchantMerchant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddMerchantMerchant::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("Address")]);
    m_address_isSet = !json[QString("Address")].isNull() && m_address_isValid;

    m_alt_phone_number_isValid = ::OpenAPI::fromJsonValue(m_alt_phone_number, json[QString("AltPhoneNumber")]);
    m_alt_phone_number_isSet = !json[QString("AltPhoneNumber")].isNull() && m_alt_phone_number_isValid;

    m_cat_flag_isValid = ::OpenAPI::fromJsonValue(m_cat_flag, json[QString("CATFlag")]);
    m_cat_flag_isSet = !json[QString("CATFlag")].isNull() && m_cat_flag_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("Comments")]);
    m_comments_isSet = !json[QString("Comments")].isNull() && m_comments_isValid;

    m_country_subdivision_tax_id_isValid = ::OpenAPI::fromJsonValue(m_country_subdivision_tax_id, json[QString("CountrySubdivisionTaxId")]);
    m_country_subdivision_tax_id_isSet = !json[QString("CountrySubdivisionTaxId")].isNull() && m_country_subdivision_tax_id_isValid;

    m_date_closed_isValid = ::OpenAPI::fromJsonValue(m_date_closed, json[QString("DateClosed")]);
    m_date_closed_isSet = !json[QString("DateClosed")].isNull() && m_date_closed_isValid;

    m_date_opened_isValid = ::OpenAPI::fromJsonValue(m_date_opened, json[QString("DateOpened")]);
    m_date_opened_isSet = !json[QString("DateOpened")].isNull() && m_date_opened_isValid;

    m_doing_business_as_name_isValid = ::OpenAPI::fromJsonValue(m_doing_business_as_name, json[QString("DoingBusinessAsName")]);
    m_doing_business_as_name_isSet = !json[QString("DoingBusinessAsName")].isNull() && m_doing_business_as_name_isValid;

    m_merchant_category_isValid = ::OpenAPI::fromJsonValue(m_merchant_category, json[QString("MerchantCategory")]);
    m_merchant_category_isSet = !json[QString("MerchantCategory")].isNull() && m_merchant_category_isValid;

    m_merchant_id_isValid = ::OpenAPI::fromJsonValue(m_merchant_id, json[QString("MerchantId")]);
    m_merchant_id_isSet = !json[QString("MerchantId")].isNull() && m_merchant_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_national_tax_id_isValid = ::OpenAPI::fromJsonValue(m_national_tax_id, json[QString("NationalTaxId")]);
    m_national_tax_id_isSet = !json[QString("NationalTaxId")].isNull() && m_national_tax_id_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("PhoneNumber")]);
    m_phone_number_isSet = !json[QString("PhoneNumber")].isNull() && m_phone_number_isValid;

    m_principal_isValid = ::OpenAPI::fromJsonValue(m_principal, json[QString("Principal")]);
    m_principal_isSet = !json[QString("Principal")].isNull() && m_principal_isValid;

    m_reason_code_isValid = ::OpenAPI::fromJsonValue(m_reason_code, json[QString("ReasonCode")]);
    m_reason_code_isSet = !json[QString("ReasonCode")].isNull() && m_reason_code_isValid;

    m_service_prov_dba_isValid = ::OpenAPI::fromJsonValue(m_service_prov_dba, json[QString("ServiceProvDBA")]);
    m_service_prov_dba_isSet = !json[QString("ServiceProvDBA")].isNull() && m_service_prov_dba_isValid;

    m_service_prov_legal_isValid = ::OpenAPI::fromJsonValue(m_service_prov_legal, json[QString("ServiceProvLegal")]);
    m_service_prov_legal_isSet = !json[QString("ServiceProvLegal")].isNull() && m_service_prov_legal_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("Url")]);
    m_url_isSet = !json[QString("Url")].isNull() && m_url_isValid;
}

QString OAIAddMerchantMerchant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddMerchantMerchant::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("Address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_alt_phone_number_isSet) {
        obj.insert(QString("AltPhoneNumber"), ::OpenAPI::toJsonValue(m_alt_phone_number));
    }
    if (m_cat_flag_isSet) {
        obj.insert(QString("CATFlag"), ::OpenAPI::toJsonValue(m_cat_flag));
    }
    if (m_comments_isSet) {
        obj.insert(QString("Comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_country_subdivision_tax_id_isSet) {
        obj.insert(QString("CountrySubdivisionTaxId"), ::OpenAPI::toJsonValue(m_country_subdivision_tax_id));
    }
    if (m_date_closed_isSet) {
        obj.insert(QString("DateClosed"), ::OpenAPI::toJsonValue(m_date_closed));
    }
    if (m_date_opened_isSet) {
        obj.insert(QString("DateOpened"), ::OpenAPI::toJsonValue(m_date_opened));
    }
    if (m_doing_business_as_name_isSet) {
        obj.insert(QString("DoingBusinessAsName"), ::OpenAPI::toJsonValue(m_doing_business_as_name));
    }
    if (m_merchant_category_isSet) {
        obj.insert(QString("MerchantCategory"), ::OpenAPI::toJsonValue(m_merchant_category));
    }
    if (m_merchant_id_isSet) {
        obj.insert(QString("MerchantId"), ::OpenAPI::toJsonValue(m_merchant_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_national_tax_id_isSet) {
        obj.insert(QString("NationalTaxId"), ::OpenAPI::toJsonValue(m_national_tax_id));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("PhoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_principal.isSet()) {
        obj.insert(QString("Principal"), ::OpenAPI::toJsonValue(m_principal));
    }
    if (m_reason_code_isSet) {
        obj.insert(QString("ReasonCode"), ::OpenAPI::toJsonValue(m_reason_code));
    }
    if (m_service_prov_dba_isSet) {
        obj.insert(QString("ServiceProvDBA"), ::OpenAPI::toJsonValue(m_service_prov_dba));
    }
    if (m_service_prov_legal_isSet) {
        obj.insert(QString("ServiceProvLegal"), ::OpenAPI::toJsonValue(m_service_prov_legal));
    }
    if (m_url.size() > 0) {
        obj.insert(QString("Url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIAddress OAIAddMerchantMerchant::getAddress() const {
    return m_address;
}
void OAIAddMerchantMerchant::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIAddMerchantMerchant::is_address_Set() const{
    return m_address_isSet;
}

bool OAIAddMerchantMerchant::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIAddMerchantMerchant::getAltPhoneNumber() const {
    return m_alt_phone_number;
}
void OAIAddMerchantMerchant::setAltPhoneNumber(const QString &alt_phone_number) {
    m_alt_phone_number = alt_phone_number;
    m_alt_phone_number_isSet = true;
}

bool OAIAddMerchantMerchant::is_alt_phone_number_Set() const{
    return m_alt_phone_number_isSet;
}

bool OAIAddMerchantMerchant::is_alt_phone_number_Valid() const{
    return m_alt_phone_number_isValid;
}

QString OAIAddMerchantMerchant::getCatFlag() const {
    return m_cat_flag;
}
void OAIAddMerchantMerchant::setCatFlag(const QString &cat_flag) {
    m_cat_flag = cat_flag;
    m_cat_flag_isSet = true;
}

bool OAIAddMerchantMerchant::is_cat_flag_Set() const{
    return m_cat_flag_isSet;
}

bool OAIAddMerchantMerchant::is_cat_flag_Valid() const{
    return m_cat_flag_isValid;
}

QString OAIAddMerchantMerchant::getComments() const {
    return m_comments;
}
void OAIAddMerchantMerchant::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIAddMerchantMerchant::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIAddMerchantMerchant::is_comments_Valid() const{
    return m_comments_isValid;
}

QString OAIAddMerchantMerchant::getCountrySubdivisionTaxId() const {
    return m_country_subdivision_tax_id;
}
void OAIAddMerchantMerchant::setCountrySubdivisionTaxId(const QString &country_subdivision_tax_id) {
    m_country_subdivision_tax_id = country_subdivision_tax_id;
    m_country_subdivision_tax_id_isSet = true;
}

bool OAIAddMerchantMerchant::is_country_subdivision_tax_id_Set() const{
    return m_country_subdivision_tax_id_isSet;
}

bool OAIAddMerchantMerchant::is_country_subdivision_tax_id_Valid() const{
    return m_country_subdivision_tax_id_isValid;
}

QString OAIAddMerchantMerchant::getDateClosed() const {
    return m_date_closed;
}
void OAIAddMerchantMerchant::setDateClosed(const QString &date_closed) {
    m_date_closed = date_closed;
    m_date_closed_isSet = true;
}

bool OAIAddMerchantMerchant::is_date_closed_Set() const{
    return m_date_closed_isSet;
}

bool OAIAddMerchantMerchant::is_date_closed_Valid() const{
    return m_date_closed_isValid;
}

QString OAIAddMerchantMerchant::getDateOpened() const {
    return m_date_opened;
}
void OAIAddMerchantMerchant::setDateOpened(const QString &date_opened) {
    m_date_opened = date_opened;
    m_date_opened_isSet = true;
}

bool OAIAddMerchantMerchant::is_date_opened_Set() const{
    return m_date_opened_isSet;
}

bool OAIAddMerchantMerchant::is_date_opened_Valid() const{
    return m_date_opened_isValid;
}

QString OAIAddMerchantMerchant::getDoingBusinessAsName() const {
    return m_doing_business_as_name;
}
void OAIAddMerchantMerchant::setDoingBusinessAsName(const QString &doing_business_as_name) {
    m_doing_business_as_name = doing_business_as_name;
    m_doing_business_as_name_isSet = true;
}

bool OAIAddMerchantMerchant::is_doing_business_as_name_Set() const{
    return m_doing_business_as_name_isSet;
}

bool OAIAddMerchantMerchant::is_doing_business_as_name_Valid() const{
    return m_doing_business_as_name_isValid;
}

QString OAIAddMerchantMerchant::getMerchantCategory() const {
    return m_merchant_category;
}
void OAIAddMerchantMerchant::setMerchantCategory(const QString &merchant_category) {
    m_merchant_category = merchant_category;
    m_merchant_category_isSet = true;
}

bool OAIAddMerchantMerchant::is_merchant_category_Set() const{
    return m_merchant_category_isSet;
}

bool OAIAddMerchantMerchant::is_merchant_category_Valid() const{
    return m_merchant_category_isValid;
}

QString OAIAddMerchantMerchant::getMerchantId() const {
    return m_merchant_id;
}
void OAIAddMerchantMerchant::setMerchantId(const QString &merchant_id) {
    m_merchant_id = merchant_id;
    m_merchant_id_isSet = true;
}

bool OAIAddMerchantMerchant::is_merchant_id_Set() const{
    return m_merchant_id_isSet;
}

bool OAIAddMerchantMerchant::is_merchant_id_Valid() const{
    return m_merchant_id_isValid;
}

QString OAIAddMerchantMerchant::getName() const {
    return m_name;
}
void OAIAddMerchantMerchant::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAddMerchantMerchant::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAddMerchantMerchant::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAddMerchantMerchant::getNationalTaxId() const {
    return m_national_tax_id;
}
void OAIAddMerchantMerchant::setNationalTaxId(const QString &national_tax_id) {
    m_national_tax_id = national_tax_id;
    m_national_tax_id_isSet = true;
}

bool OAIAddMerchantMerchant::is_national_tax_id_Set() const{
    return m_national_tax_id_isSet;
}

bool OAIAddMerchantMerchant::is_national_tax_id_Valid() const{
    return m_national_tax_id_isValid;
}

QString OAIAddMerchantMerchant::getPhoneNumber() const {
    return m_phone_number;
}
void OAIAddMerchantMerchant::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIAddMerchantMerchant::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIAddMerchantMerchant::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

OAIPrincipal OAIAddMerchantMerchant::getPrincipal() const {
    return m_principal;
}
void OAIAddMerchantMerchant::setPrincipal(const OAIPrincipal &principal) {
    m_principal = principal;
    m_principal_isSet = true;
}

bool OAIAddMerchantMerchant::is_principal_Set() const{
    return m_principal_isSet;
}

bool OAIAddMerchantMerchant::is_principal_Valid() const{
    return m_principal_isValid;
}

QString OAIAddMerchantMerchant::getReasonCode() const {
    return m_reason_code;
}
void OAIAddMerchantMerchant::setReasonCode(const QString &reason_code) {
    m_reason_code = reason_code;
    m_reason_code_isSet = true;
}

bool OAIAddMerchantMerchant::is_reason_code_Set() const{
    return m_reason_code_isSet;
}

bool OAIAddMerchantMerchant::is_reason_code_Valid() const{
    return m_reason_code_isValid;
}

QString OAIAddMerchantMerchant::getServiceProvDba() const {
    return m_service_prov_dba;
}
void OAIAddMerchantMerchant::setServiceProvDba(const QString &service_prov_dba) {
    m_service_prov_dba = service_prov_dba;
    m_service_prov_dba_isSet = true;
}

bool OAIAddMerchantMerchant::is_service_prov_dba_Set() const{
    return m_service_prov_dba_isSet;
}

bool OAIAddMerchantMerchant::is_service_prov_dba_Valid() const{
    return m_service_prov_dba_isValid;
}

QString OAIAddMerchantMerchant::getServiceProvLegal() const {
    return m_service_prov_legal;
}
void OAIAddMerchantMerchant::setServiceProvLegal(const QString &service_prov_legal) {
    m_service_prov_legal = service_prov_legal;
    m_service_prov_legal_isSet = true;
}

bool OAIAddMerchantMerchant::is_service_prov_legal_Set() const{
    return m_service_prov_legal_isSet;
}

bool OAIAddMerchantMerchant::is_service_prov_legal_Valid() const{
    return m_service_prov_legal_isValid;
}

QList<QString> OAIAddMerchantMerchant::getUrl() const {
    return m_url;
}
void OAIAddMerchantMerchant::setUrl(const QList<QString> &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAddMerchantMerchant::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAddMerchantMerchant::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIAddMerchantMerchant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alt_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cat_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_subdivision_tax_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_opened_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doing_business_as_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_national_tax_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_prov_dba_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_prov_legal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddMerchantMerchant::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cat_flag_isValid && m_country_subdivision_tax_id_isValid && m_date_closed_isValid && m_date_opened_isValid && m_merchant_category_isValid && m_merchant_id_isValid && m_name_isValid && m_phone_number_isValid && m_reason_code_isValid && true;
}

} // namespace OpenAPI
