/**
 * MATCH API
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchCriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchCriteria::OAISearchCriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchCriteria::OAISearchCriteria() {
    this->initializeModel();
}

OAISearchCriteria::~OAISearchCriteria() {}

void OAISearchCriteria::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_min_possible_match_count_isSet = false;
    m_min_possible_match_count_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_search_all_isSet = false;
    m_search_all_isValid = false;
}

void OAISearchCriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchCriteria::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("Country")]);
    m_country_isSet = !json[QString("Country")].isNull() && m_country_isValid;

    m_min_possible_match_count_isValid = ::OpenAPI::fromJsonValue(m_min_possible_match_count, json[QString("MinPossibleMatchCount")]);
    m_min_possible_match_count_isSet = !json[QString("MinPossibleMatchCount")].isNull() && m_min_possible_match_count_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;

    m_search_all_isValid = ::OpenAPI::fromJsonValue(m_search_all, json[QString("SearchAll")]);
    m_search_all_isSet = !json[QString("SearchAll")].isNull() && m_search_all_isValid;
}

QString OAISearchCriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchCriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_country.size() > 0) {
        obj.insert(QString("Country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_min_possible_match_count_isSet) {
        obj.insert(QString("MinPossibleMatchCount"), ::OpenAPI::toJsonValue(m_min_possible_match_count));
    }
    if (m_region.size() > 0) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_search_all_isSet) {
        obj.insert(QString("SearchAll"), ::OpenAPI::toJsonValue(m_search_all));
    }
    return obj;
}

QList<QString> OAISearchCriteria::getCountry() const {
    return m_country;
}
void OAISearchCriteria::setCountry(const QList<QString> &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAISearchCriteria::is_country_Set() const{
    return m_country_isSet;
}

bool OAISearchCriteria::is_country_Valid() const{
    return m_country_isValid;
}

QString OAISearchCriteria::getMinPossibleMatchCount() const {
    return m_min_possible_match_count;
}
void OAISearchCriteria::setMinPossibleMatchCount(const QString &min_possible_match_count) {
    m_min_possible_match_count = min_possible_match_count;
    m_min_possible_match_count_isSet = true;
}

bool OAISearchCriteria::is_min_possible_match_count_Set() const{
    return m_min_possible_match_count_isSet;
}

bool OAISearchCriteria::is_min_possible_match_count_Valid() const{
    return m_min_possible_match_count_isValid;
}

QList<QString> OAISearchCriteria::getRegion() const {
    return m_region;
}
void OAISearchCriteria::setRegion(const QList<QString> &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAISearchCriteria::is_region_Set() const{
    return m_region_isSet;
}

bool OAISearchCriteria::is_region_Valid() const{
    return m_region_isValid;
}

QString OAISearchCriteria::getSearchAll() const {
    return m_search_all;
}
void OAISearchCriteria::setSearchAll(const QString &search_all) {
    m_search_all = search_all;
    m_search_all_isSet = true;
}

bool OAISearchCriteria::is_search_all_Set() const{
    return m_search_all_isSet;
}

bool OAISearchCriteria::is_search_all_Valid() const{
    return m_search_all_isValid;
}

bool OAISearchCriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_possible_match_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_all_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchCriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_search_all_isValid && true;
}

} // namespace OpenAPI
