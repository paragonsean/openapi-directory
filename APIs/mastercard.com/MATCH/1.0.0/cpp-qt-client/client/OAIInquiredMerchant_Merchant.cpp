/**
 * MATCH API
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInquiredMerchant_Merchant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInquiredMerchant_Merchant::OAIInquiredMerchant_Merchant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInquiredMerchant_Merchant::OAIInquiredMerchant_Merchant() {
    this->initializeModel();
}

OAIInquiredMerchant_Merchant::~OAIInquiredMerchant_Merchant() {}

void OAIInquiredMerchant_Merchant::initializeModel() {

    m_added_by_acquirer_id_isSet = false;
    m_added_by_acquirer_id_isValid = false;

    m_added_on_date_isSet = false;
    m_added_on_date_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_alt_phone_number_isSet = false;
    m_alt_phone_number_isValid = false;

    m_country_subdivision_tax_id_isSet = false;
    m_country_subdivision_tax_id_isValid = false;

    m_doing_business_as_name_isSet = false;
    m_doing_business_as_name_isValid = false;

    m_merchant_match_isSet = false;
    m_merchant_match_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_national_tax_id_isSet = false;
    m_national_tax_id_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_principal_isSet = false;
    m_principal_isValid = false;

    m_service_prov_dba_isSet = false;
    m_service_prov_dba_isValid = false;

    m_service_prov_legal_isSet = false;
    m_service_prov_legal_isValid = false;

    m_termination_reason_code_isSet = false;
    m_termination_reason_code_isValid = false;

    m_url_group_isSet = false;
    m_url_group_isValid = false;
}

void OAIInquiredMerchant_Merchant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInquiredMerchant_Merchant::fromJsonObject(QJsonObject json) {

    m_added_by_acquirer_id_isValid = ::OpenAPI::fromJsonValue(m_added_by_acquirer_id, json[QString("AddedByAcquirerID")]);
    m_added_by_acquirer_id_isSet = !json[QString("AddedByAcquirerID")].isNull() && m_added_by_acquirer_id_isValid;

    m_added_on_date_isValid = ::OpenAPI::fromJsonValue(m_added_on_date, json[QString("AddedOnDate")]);
    m_added_on_date_isSet = !json[QString("AddedOnDate")].isNull() && m_added_on_date_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("Address")]);
    m_address_isSet = !json[QString("Address")].isNull() && m_address_isValid;

    m_alt_phone_number_isValid = ::OpenAPI::fromJsonValue(m_alt_phone_number, json[QString("AltPhoneNumber")]);
    m_alt_phone_number_isSet = !json[QString("AltPhoneNumber")].isNull() && m_alt_phone_number_isValid;

    m_country_subdivision_tax_id_isValid = ::OpenAPI::fromJsonValue(m_country_subdivision_tax_id, json[QString("CountrySubdivisionTaxId")]);
    m_country_subdivision_tax_id_isSet = !json[QString("CountrySubdivisionTaxId")].isNull() && m_country_subdivision_tax_id_isValid;

    m_doing_business_as_name_isValid = ::OpenAPI::fromJsonValue(m_doing_business_as_name, json[QString("DoingBusinessAsName")]);
    m_doing_business_as_name_isSet = !json[QString("DoingBusinessAsName")].isNull() && m_doing_business_as_name_isValid;

    m_merchant_match_isValid = ::OpenAPI::fromJsonValue(m_merchant_match, json[QString("MerchantMatch")]);
    m_merchant_match_isSet = !json[QString("MerchantMatch")].isNull() && m_merchant_match_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_national_tax_id_isValid = ::OpenAPI::fromJsonValue(m_national_tax_id, json[QString("NationalTaxId")]);
    m_national_tax_id_isSet = !json[QString("NationalTaxId")].isNull() && m_national_tax_id_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("PhoneNumber")]);
    m_phone_number_isSet = !json[QString("PhoneNumber")].isNull() && m_phone_number_isValid;

    m_principal_isValid = ::OpenAPI::fromJsonValue(m_principal, json[QString("Principal")]);
    m_principal_isSet = !json[QString("Principal")].isNull() && m_principal_isValid;

    m_service_prov_dba_isValid = ::OpenAPI::fromJsonValue(m_service_prov_dba, json[QString("ServiceProvDBA")]);
    m_service_prov_dba_isSet = !json[QString("ServiceProvDBA")].isNull() && m_service_prov_dba_isValid;

    m_service_prov_legal_isValid = ::OpenAPI::fromJsonValue(m_service_prov_legal, json[QString("ServiceProvLegal")]);
    m_service_prov_legal_isSet = !json[QString("ServiceProvLegal")].isNull() && m_service_prov_legal_isValid;

    m_termination_reason_code_isValid = ::OpenAPI::fromJsonValue(m_termination_reason_code, json[QString("TerminationReasonCode")]);
    m_termination_reason_code_isSet = !json[QString("TerminationReasonCode")].isNull() && m_termination_reason_code_isValid;

    m_url_group_isValid = ::OpenAPI::fromJsonValue(m_url_group, json[QString("UrlGroup")]);
    m_url_group_isSet = !json[QString("UrlGroup")].isNull() && m_url_group_isValid;
}

QString OAIInquiredMerchant_Merchant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInquiredMerchant_Merchant::asJsonObject() const {
    QJsonObject obj;
    if (m_added_by_acquirer_id_isSet) {
        obj.insert(QString("AddedByAcquirerID"), ::OpenAPI::toJsonValue(m_added_by_acquirer_id));
    }
    if (m_added_on_date_isSet) {
        obj.insert(QString("AddedOnDate"), ::OpenAPI::toJsonValue(m_added_on_date));
    }
    if (m_address.isSet()) {
        obj.insert(QString("Address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_alt_phone_number_isSet) {
        obj.insert(QString("AltPhoneNumber"), ::OpenAPI::toJsonValue(m_alt_phone_number));
    }
    if (m_country_subdivision_tax_id_isSet) {
        obj.insert(QString("CountrySubdivisionTaxId"), ::OpenAPI::toJsonValue(m_country_subdivision_tax_id));
    }
    if (m_doing_business_as_name_isSet) {
        obj.insert(QString("DoingBusinessAsName"), ::OpenAPI::toJsonValue(m_doing_business_as_name));
    }
    if (m_merchant_match.isSet()) {
        obj.insert(QString("MerchantMatch"), ::OpenAPI::toJsonValue(m_merchant_match));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_national_tax_id_isSet) {
        obj.insert(QString("NationalTaxId"), ::OpenAPI::toJsonValue(m_national_tax_id));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("PhoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_principal.isSet()) {
        obj.insert(QString("Principal"), ::OpenAPI::toJsonValue(m_principal));
    }
    if (m_service_prov_dba_isSet) {
        obj.insert(QString("ServiceProvDBA"), ::OpenAPI::toJsonValue(m_service_prov_dba));
    }
    if (m_service_prov_legal_isSet) {
        obj.insert(QString("ServiceProvLegal"), ::OpenAPI::toJsonValue(m_service_prov_legal));
    }
    if (m_termination_reason_code_isSet) {
        obj.insert(QString("TerminationReasonCode"), ::OpenAPI::toJsonValue(m_termination_reason_code));
    }
    if (m_url_group.isSet()) {
        obj.insert(QString("UrlGroup"), ::OpenAPI::toJsonValue(m_url_group));
    }
    return obj;
}

QString OAIInquiredMerchant_Merchant::getAddedByAcquirerId() const {
    return m_added_by_acquirer_id;
}
void OAIInquiredMerchant_Merchant::setAddedByAcquirerId(const QString &added_by_acquirer_id) {
    m_added_by_acquirer_id = added_by_acquirer_id;
    m_added_by_acquirer_id_isSet = true;
}

bool OAIInquiredMerchant_Merchant::is_added_by_acquirer_id_Set() const{
    return m_added_by_acquirer_id_isSet;
}

bool OAIInquiredMerchant_Merchant::is_added_by_acquirer_id_Valid() const{
    return m_added_by_acquirer_id_isValid;
}

QString OAIInquiredMerchant_Merchant::getAddedOnDate() const {
    return m_added_on_date;
}
void OAIInquiredMerchant_Merchant::setAddedOnDate(const QString &added_on_date) {
    m_added_on_date = added_on_date;
    m_added_on_date_isSet = true;
}

bool OAIInquiredMerchant_Merchant::is_added_on_date_Set() const{
    return m_added_on_date_isSet;
}

bool OAIInquiredMerchant_Merchant::is_added_on_date_Valid() const{
    return m_added_on_date_isValid;
}

OAIAddress OAIInquiredMerchant_Merchant::getAddress() const {
    return m_address;
}
void OAIInquiredMerchant_Merchant::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIInquiredMerchant_Merchant::is_address_Set() const{
    return m_address_isSet;
}

bool OAIInquiredMerchant_Merchant::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIInquiredMerchant_Merchant::getAltPhoneNumber() const {
    return m_alt_phone_number;
}
void OAIInquiredMerchant_Merchant::setAltPhoneNumber(const QString &alt_phone_number) {
    m_alt_phone_number = alt_phone_number;
    m_alt_phone_number_isSet = true;
}

bool OAIInquiredMerchant_Merchant::is_alt_phone_number_Set() const{
    return m_alt_phone_number_isSet;
}

bool OAIInquiredMerchant_Merchant::is_alt_phone_number_Valid() const{
    return m_alt_phone_number_isValid;
}

QString OAIInquiredMerchant_Merchant::getCountrySubdivisionTaxId() const {
    return m_country_subdivision_tax_id;
}
void OAIInquiredMerchant_Merchant::setCountrySubdivisionTaxId(const QString &country_subdivision_tax_id) {
    m_country_subdivision_tax_id = country_subdivision_tax_id;
    m_country_subdivision_tax_id_isSet = true;
}

bool OAIInquiredMerchant_Merchant::is_country_subdivision_tax_id_Set() const{
    return m_country_subdivision_tax_id_isSet;
}

bool OAIInquiredMerchant_Merchant::is_country_subdivision_tax_id_Valid() const{
    return m_country_subdivision_tax_id_isValid;
}

QString OAIInquiredMerchant_Merchant::getDoingBusinessAsName() const {
    return m_doing_business_as_name;
}
void OAIInquiredMerchant_Merchant::setDoingBusinessAsName(const QString &doing_business_as_name) {
    m_doing_business_as_name = doing_business_as_name;
    m_doing_business_as_name_isSet = true;
}

bool OAIInquiredMerchant_Merchant::is_doing_business_as_name_Set() const{
    return m_doing_business_as_name_isSet;
}

bool OAIInquiredMerchant_Merchant::is_doing_business_as_name_Valid() const{
    return m_doing_business_as_name_isValid;
}

OAIMerchantMatch OAIInquiredMerchant_Merchant::getMerchantMatch() const {
    return m_merchant_match;
}
void OAIInquiredMerchant_Merchant::setMerchantMatch(const OAIMerchantMatch &merchant_match) {
    m_merchant_match = merchant_match;
    m_merchant_match_isSet = true;
}

bool OAIInquiredMerchant_Merchant::is_merchant_match_Set() const{
    return m_merchant_match_isSet;
}

bool OAIInquiredMerchant_Merchant::is_merchant_match_Valid() const{
    return m_merchant_match_isValid;
}

QString OAIInquiredMerchant_Merchant::getName() const {
    return m_name;
}
void OAIInquiredMerchant_Merchant::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInquiredMerchant_Merchant::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInquiredMerchant_Merchant::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIInquiredMerchant_Merchant::getNationalTaxId() const {
    return m_national_tax_id;
}
void OAIInquiredMerchant_Merchant::setNationalTaxId(const QString &national_tax_id) {
    m_national_tax_id = national_tax_id;
    m_national_tax_id_isSet = true;
}

bool OAIInquiredMerchant_Merchant::is_national_tax_id_Set() const{
    return m_national_tax_id_isSet;
}

bool OAIInquiredMerchant_Merchant::is_national_tax_id_Valid() const{
    return m_national_tax_id_isValid;
}

QString OAIInquiredMerchant_Merchant::getPhoneNumber() const {
    return m_phone_number;
}
void OAIInquiredMerchant_Merchant::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIInquiredMerchant_Merchant::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIInquiredMerchant_Merchant::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

OAIPrincipal OAIInquiredMerchant_Merchant::getPrincipal() const {
    return m_principal;
}
void OAIInquiredMerchant_Merchant::setPrincipal(const OAIPrincipal &principal) {
    m_principal = principal;
    m_principal_isSet = true;
}

bool OAIInquiredMerchant_Merchant::is_principal_Set() const{
    return m_principal_isSet;
}

bool OAIInquiredMerchant_Merchant::is_principal_Valid() const{
    return m_principal_isValid;
}

QString OAIInquiredMerchant_Merchant::getServiceProvDba() const {
    return m_service_prov_dba;
}
void OAIInquiredMerchant_Merchant::setServiceProvDba(const QString &service_prov_dba) {
    m_service_prov_dba = service_prov_dba;
    m_service_prov_dba_isSet = true;
}

bool OAIInquiredMerchant_Merchant::is_service_prov_dba_Set() const{
    return m_service_prov_dba_isSet;
}

bool OAIInquiredMerchant_Merchant::is_service_prov_dba_Valid() const{
    return m_service_prov_dba_isValid;
}

QString OAIInquiredMerchant_Merchant::getServiceProvLegal() const {
    return m_service_prov_legal;
}
void OAIInquiredMerchant_Merchant::setServiceProvLegal(const QString &service_prov_legal) {
    m_service_prov_legal = service_prov_legal;
    m_service_prov_legal_isSet = true;
}

bool OAIInquiredMerchant_Merchant::is_service_prov_legal_Set() const{
    return m_service_prov_legal_isSet;
}

bool OAIInquiredMerchant_Merchant::is_service_prov_legal_Valid() const{
    return m_service_prov_legal_isValid;
}

QString OAIInquiredMerchant_Merchant::getTerminationReasonCode() const {
    return m_termination_reason_code;
}
void OAIInquiredMerchant_Merchant::setTerminationReasonCode(const QString &termination_reason_code) {
    m_termination_reason_code = termination_reason_code;
    m_termination_reason_code_isSet = true;
}

bool OAIInquiredMerchant_Merchant::is_termination_reason_code_Set() const{
    return m_termination_reason_code_isSet;
}

bool OAIInquiredMerchant_Merchant::is_termination_reason_code_Valid() const{
    return m_termination_reason_code_isValid;
}

OAIUrlGroup OAIInquiredMerchant_Merchant::getUrlGroup() const {
    return m_url_group;
}
void OAIInquiredMerchant_Merchant::setUrlGroup(const OAIUrlGroup &url_group) {
    m_url_group = url_group;
    m_url_group_isSet = true;
}

bool OAIInquiredMerchant_Merchant::is_url_group_Set() const{
    return m_url_group_isSet;
}

bool OAIInquiredMerchant_Merchant::is_url_group_Valid() const{
    return m_url_group_isValid;
}

bool OAIInquiredMerchant_Merchant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_by_acquirer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_added_on_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alt_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_subdivision_tax_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doing_business_as_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_match.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_national_tax_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_prov_dba_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_prov_legal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_reason_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_group.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInquiredMerchant_Merchant::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
