/**
 * MATCH API
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUrlGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUrlGroup::OAIUrlGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUrlGroup::OAIUrlGroup() {
    this->initializeModel();
}

OAIUrlGroup::~OAIUrlGroup() {}

void OAIUrlGroup::initializeModel() {

    m_close_match_urls_isSet = false;
    m_close_match_urls_isValid = false;

    m_exact_match_urls_isSet = false;
    m_exact_match_urls_isValid = false;

    m_no_match_urls_isSet = false;
    m_no_match_urls_isValid = false;
}

void OAIUrlGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUrlGroup::fromJsonObject(QJsonObject json) {

    m_close_match_urls_isValid = ::OpenAPI::fromJsonValue(m_close_match_urls, json[QString("CloseMatchUrls")]);
    m_close_match_urls_isSet = !json[QString("CloseMatchUrls")].isNull() && m_close_match_urls_isValid;

    m_exact_match_urls_isValid = ::OpenAPI::fromJsonValue(m_exact_match_urls, json[QString("ExactMatchUrls")]);
    m_exact_match_urls_isSet = !json[QString("ExactMatchUrls")].isNull() && m_exact_match_urls_isValid;

    m_no_match_urls_isValid = ::OpenAPI::fromJsonValue(m_no_match_urls, json[QString("NoMatchUrls")]);
    m_no_match_urls_isSet = !json[QString("NoMatchUrls")].isNull() && m_no_match_urls_isValid;
}

QString OAIUrlGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUrlGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_close_match_urls.size() > 0) {
        obj.insert(QString("CloseMatchUrls"), ::OpenAPI::toJsonValue(m_close_match_urls));
    }
    if (m_exact_match_urls.size() > 0) {
        obj.insert(QString("ExactMatchUrls"), ::OpenAPI::toJsonValue(m_exact_match_urls));
    }
    if (m_no_match_urls.isSet()) {
        obj.insert(QString("NoMatchUrls"), ::OpenAPI::toJsonValue(m_no_match_urls));
    }
    return obj;
}

QList<OAIUrl> OAIUrlGroup::getCloseMatchUrls() const {
    return m_close_match_urls;
}
void OAIUrlGroup::setCloseMatchUrls(const QList<OAIUrl> &close_match_urls) {
    m_close_match_urls = close_match_urls;
    m_close_match_urls_isSet = true;
}

bool OAIUrlGroup::is_close_match_urls_Set() const{
    return m_close_match_urls_isSet;
}

bool OAIUrlGroup::is_close_match_urls_Valid() const{
    return m_close_match_urls_isValid;
}

QList<OAIUrl> OAIUrlGroup::getExactMatchUrls() const {
    return m_exact_match_urls;
}
void OAIUrlGroup::setExactMatchUrls(const QList<OAIUrl> &exact_match_urls) {
    m_exact_match_urls = exact_match_urls;
    m_exact_match_urls_isSet = true;
}

bool OAIUrlGroup::is_exact_match_urls_Set() const{
    return m_exact_match_urls_isSet;
}

bool OAIUrlGroup::is_exact_match_urls_Valid() const{
    return m_exact_match_urls_isValid;
}

OAIUrl OAIUrlGroup::getNoMatchUrls() const {
    return m_no_match_urls;
}
void OAIUrlGroup::setNoMatchUrls(const OAIUrl &no_match_urls) {
    m_no_match_urls = no_match_urls;
    m_no_match_urls_isSet = true;
}

bool OAIUrlGroup::is_no_match_urls_Set() const{
    return m_no_match_urls_isSet;
}

bool OAIUrlGroup::is_no_match_urls_Valid() const{
    return m_no_match_urls_isValid;
}

bool OAIUrlGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_close_match_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exact_match_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_match_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUrlGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
