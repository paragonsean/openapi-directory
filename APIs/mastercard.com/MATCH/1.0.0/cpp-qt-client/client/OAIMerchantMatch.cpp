/**
 * MATCH API
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMerchantMatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMerchantMatch::OAIMerchantMatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMerchantMatch::OAIMerchantMatch() {
    this->initializeModel();
}

OAIMerchantMatch::~OAIMerchantMatch() {}

void OAIMerchantMatch::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_alt_phone_number_isSet = false;
    m_alt_phone_number_isValid = false;

    m_country_subdivision_tax_id_isSet = false;
    m_country_subdivision_tax_id_isValid = false;

    m_doing_business_as_name_isSet = false;
    m_doing_business_as_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_national_tax_id_isSet = false;
    m_national_tax_id_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_principal_match_isSet = false;
    m_principal_match_isValid = false;

    m_service_prov_dba_isSet = false;
    m_service_prov_dba_isValid = false;

    m_service_prov_legal_isSet = false;
    m_service_prov_legal_isValid = false;
}

void OAIMerchantMatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMerchantMatch::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("Address")]);
    m_address_isSet = !json[QString("Address")].isNull() && m_address_isValid;

    m_alt_phone_number_isValid = ::OpenAPI::fromJsonValue(m_alt_phone_number, json[QString("AltPhoneNumber")]);
    m_alt_phone_number_isSet = !json[QString("AltPhoneNumber")].isNull() && m_alt_phone_number_isValid;

    m_country_subdivision_tax_id_isValid = ::OpenAPI::fromJsonValue(m_country_subdivision_tax_id, json[QString("CountrySubdivisionTaxId")]);
    m_country_subdivision_tax_id_isSet = !json[QString("CountrySubdivisionTaxId")].isNull() && m_country_subdivision_tax_id_isValid;

    m_doing_business_as_name_isValid = ::OpenAPI::fromJsonValue(m_doing_business_as_name, json[QString("DoingBusinessAsName")]);
    m_doing_business_as_name_isSet = !json[QString("DoingBusinessAsName")].isNull() && m_doing_business_as_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_national_tax_id_isValid = ::OpenAPI::fromJsonValue(m_national_tax_id, json[QString("NationalTaxId")]);
    m_national_tax_id_isSet = !json[QString("NationalTaxId")].isNull() && m_national_tax_id_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("PhoneNumber")]);
    m_phone_number_isSet = !json[QString("PhoneNumber")].isNull() && m_phone_number_isValid;

    m_principal_match_isValid = ::OpenAPI::fromJsonValue(m_principal_match, json[QString("PrincipalMatch")]);
    m_principal_match_isSet = !json[QString("PrincipalMatch")].isNull() && m_principal_match_isValid;

    m_service_prov_dba_isValid = ::OpenAPI::fromJsonValue(m_service_prov_dba, json[QString("ServiceProvDBA")]);
    m_service_prov_dba_isSet = !json[QString("ServiceProvDBA")].isNull() && m_service_prov_dba_isValid;

    m_service_prov_legal_isValid = ::OpenAPI::fromJsonValue(m_service_prov_legal, json[QString("ServiceProvLegal")]);
    m_service_prov_legal_isSet = !json[QString("ServiceProvLegal")].isNull() && m_service_prov_legal_isValid;
}

QString OAIMerchantMatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMerchantMatch::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("Address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_alt_phone_number_isSet) {
        obj.insert(QString("AltPhoneNumber"), ::OpenAPI::toJsonValue(m_alt_phone_number));
    }
    if (m_country_subdivision_tax_id_isSet) {
        obj.insert(QString("CountrySubdivisionTaxId"), ::OpenAPI::toJsonValue(m_country_subdivision_tax_id));
    }
    if (m_doing_business_as_name_isSet) {
        obj.insert(QString("DoingBusinessAsName"), ::OpenAPI::toJsonValue(m_doing_business_as_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_national_tax_id_isSet) {
        obj.insert(QString("NationalTaxId"), ::OpenAPI::toJsonValue(m_national_tax_id));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("PhoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_principal_match.size() > 0) {
        obj.insert(QString("PrincipalMatch"), ::OpenAPI::toJsonValue(m_principal_match));
    }
    if (m_service_prov_dba_isSet) {
        obj.insert(QString("ServiceProvDBA"), ::OpenAPI::toJsonValue(m_service_prov_dba));
    }
    if (m_service_prov_legal_isSet) {
        obj.insert(QString("ServiceProvLegal"), ::OpenAPI::toJsonValue(m_service_prov_legal));
    }
    return obj;
}

OAIAddress OAIMerchantMatch::getAddress() const {
    return m_address;
}
void OAIMerchantMatch::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIMerchantMatch::is_address_Set() const{
    return m_address_isSet;
}

bool OAIMerchantMatch::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIMerchantMatch::getAltPhoneNumber() const {
    return m_alt_phone_number;
}
void OAIMerchantMatch::setAltPhoneNumber(const QString &alt_phone_number) {
    m_alt_phone_number = alt_phone_number;
    m_alt_phone_number_isSet = true;
}

bool OAIMerchantMatch::is_alt_phone_number_Set() const{
    return m_alt_phone_number_isSet;
}

bool OAIMerchantMatch::is_alt_phone_number_Valid() const{
    return m_alt_phone_number_isValid;
}

QString OAIMerchantMatch::getCountrySubdivisionTaxId() const {
    return m_country_subdivision_tax_id;
}
void OAIMerchantMatch::setCountrySubdivisionTaxId(const QString &country_subdivision_tax_id) {
    m_country_subdivision_tax_id = country_subdivision_tax_id;
    m_country_subdivision_tax_id_isSet = true;
}

bool OAIMerchantMatch::is_country_subdivision_tax_id_Set() const{
    return m_country_subdivision_tax_id_isSet;
}

bool OAIMerchantMatch::is_country_subdivision_tax_id_Valid() const{
    return m_country_subdivision_tax_id_isValid;
}

QString OAIMerchantMatch::getDoingBusinessAsName() const {
    return m_doing_business_as_name;
}
void OAIMerchantMatch::setDoingBusinessAsName(const QString &doing_business_as_name) {
    m_doing_business_as_name = doing_business_as_name;
    m_doing_business_as_name_isSet = true;
}

bool OAIMerchantMatch::is_doing_business_as_name_Set() const{
    return m_doing_business_as_name_isSet;
}

bool OAIMerchantMatch::is_doing_business_as_name_Valid() const{
    return m_doing_business_as_name_isValid;
}

QString OAIMerchantMatch::getName() const {
    return m_name;
}
void OAIMerchantMatch::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMerchantMatch::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMerchantMatch::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMerchantMatch::getNationalTaxId() const {
    return m_national_tax_id;
}
void OAIMerchantMatch::setNationalTaxId(const QString &national_tax_id) {
    m_national_tax_id = national_tax_id;
    m_national_tax_id_isSet = true;
}

bool OAIMerchantMatch::is_national_tax_id_Set() const{
    return m_national_tax_id_isSet;
}

bool OAIMerchantMatch::is_national_tax_id_Valid() const{
    return m_national_tax_id_isValid;
}

QString OAIMerchantMatch::getPhoneNumber() const {
    return m_phone_number;
}
void OAIMerchantMatch::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIMerchantMatch::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIMerchantMatch::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QList<OAIPrincipalMatch> OAIMerchantMatch::getPrincipalMatch() const {
    return m_principal_match;
}
void OAIMerchantMatch::setPrincipalMatch(const QList<OAIPrincipalMatch> &principal_match) {
    m_principal_match = principal_match;
    m_principal_match_isSet = true;
}

bool OAIMerchantMatch::is_principal_match_Set() const{
    return m_principal_match_isSet;
}

bool OAIMerchantMatch::is_principal_match_Valid() const{
    return m_principal_match_isValid;
}

QString OAIMerchantMatch::getServiceProvDba() const {
    return m_service_prov_dba;
}
void OAIMerchantMatch::setServiceProvDba(const QString &service_prov_dba) {
    m_service_prov_dba = service_prov_dba;
    m_service_prov_dba_isSet = true;
}

bool OAIMerchantMatch::is_service_prov_dba_Set() const{
    return m_service_prov_dba_isSet;
}

bool OAIMerchantMatch::is_service_prov_dba_Valid() const{
    return m_service_prov_dba_isValid;
}

QString OAIMerchantMatch::getServiceProvLegal() const {
    return m_service_prov_legal;
}
void OAIMerchantMatch::setServiceProvLegal(const QString &service_prov_legal) {
    m_service_prov_legal = service_prov_legal;
    m_service_prov_legal_isSet = true;
}

bool OAIMerchantMatch::is_service_prov_legal_Set() const{
    return m_service_prov_legal_isSet;
}

bool OAIMerchantMatch::is_service_prov_legal_Valid() const{
    return m_service_prov_legal_isValid;
}

bool OAIMerchantMatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alt_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_subdivision_tax_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doing_business_as_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_national_tax_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_match.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_prov_dba_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_prov_legal_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMerchantMatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
