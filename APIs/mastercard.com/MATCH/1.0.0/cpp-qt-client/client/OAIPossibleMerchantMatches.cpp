/**
 * MATCH API
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPossibleMerchantMatches.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPossibleMerchantMatches::OAIPossibleMerchantMatches(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPossibleMerchantMatches::OAIPossibleMerchantMatches() {
    this->initializeModel();
}

OAIPossibleMerchantMatches::~OAIPossibleMerchantMatches() {}

void OAIPossibleMerchantMatches::initializeModel() {

    m_terminated_merchant_isSet = false;
    m_terminated_merchant_isValid = false;

    m_total_length_isSet = false;
    m_total_length_isValid = false;
}

void OAIPossibleMerchantMatches::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPossibleMerchantMatches::fromJsonObject(QJsonObject json) {

    m_terminated_merchant_isValid = ::OpenAPI::fromJsonValue(m_terminated_merchant, json[QString("TerminatedMerchant")]);
    m_terminated_merchant_isSet = !json[QString("TerminatedMerchant")].isNull() && m_terminated_merchant_isValid;

    m_total_length_isValid = ::OpenAPI::fromJsonValue(m_total_length, json[QString("TotalLength")]);
    m_total_length_isSet = !json[QString("TotalLength")].isNull() && m_total_length_isValid;
}

QString OAIPossibleMerchantMatches::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPossibleMerchantMatches::asJsonObject() const {
    QJsonObject obj;
    if (m_terminated_merchant.size() > 0) {
        obj.insert(QString("TerminatedMerchant"), ::OpenAPI::toJsonValue(m_terminated_merchant));
    }
    if (m_total_length_isSet) {
        obj.insert(QString("TotalLength"), ::OpenAPI::toJsonValue(m_total_length));
    }
    return obj;
}

QList<OAITerminatedMerchant> OAIPossibleMerchantMatches::getTerminatedMerchant() const {
    return m_terminated_merchant;
}
void OAIPossibleMerchantMatches::setTerminatedMerchant(const QList<OAITerminatedMerchant> &terminated_merchant) {
    m_terminated_merchant = terminated_merchant;
    m_terminated_merchant_isSet = true;
}

bool OAIPossibleMerchantMatches::is_terminated_merchant_Set() const{
    return m_terminated_merchant_isSet;
}

bool OAIPossibleMerchantMatches::is_terminated_merchant_Valid() const{
    return m_terminated_merchant_isValid;
}

QString OAIPossibleMerchantMatches::getTotalLength() const {
    return m_total_length;
}
void OAIPossibleMerchantMatches::setTotalLength(const QString &total_length) {
    m_total_length = total_length;
    m_total_length_isSet = true;
}

bool OAIPossibleMerchantMatches::is_total_length_Set() const{
    return m_total_length_isSet;
}

bool OAIPossibleMerchantMatches::is_total_length_Valid() const{
    return m_total_length_isValid;
}

bool OAIPossibleMerchantMatches::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_terminated_merchant.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_length_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPossibleMerchantMatches::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
