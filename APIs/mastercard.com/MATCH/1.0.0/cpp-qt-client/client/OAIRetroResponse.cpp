/**
 * MATCH API
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetroResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRetroResponse::OAIRetroResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRetroResponse::OAIRetroResponse() {
    this->initializeModel();
}

OAIRetroResponse::~OAIRetroResponse() {}

void OAIRetroResponse::initializeModel() {

    m_business_name_isSet = false;
    m_business_name_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_ref_num_isSet = false;
    m_ref_num_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIRetroResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRetroResponse::fromJsonObject(QJsonObject json) {

    m_business_name_isValid = ::OpenAPI::fromJsonValue(m_business_name, json[QString("BusinessName")]);
    m_business_name_isSet = !json[QString("BusinessName")].isNull() && m_business_name_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("City")]);
    m_city_isSet = !json[QString("City")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("Country")]);
    m_country_isSet = !json[QString("Country")].isNull() && m_country_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_ref_num_isValid = ::OpenAPI::fromJsonValue(m_ref_num, json[QString("RefNum")]);
    m_ref_num_isSet = !json[QString("RefNum")].isNull() && m_ref_num_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;
}

QString OAIRetroResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRetroResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_business_name_isSet) {
        obj.insert(QString("BusinessName"), ::OpenAPI::toJsonValue(m_business_name));
    }
    if (m_city_isSet) {
        obj.insert(QString("City"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("Country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_ref_num_isSet) {
        obj.insert(QString("RefNum"), ::OpenAPI::toJsonValue(m_ref_num));
    }
    if (m_state_isSet) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIRetroResponse::getBusinessName() const {
    return m_business_name;
}
void OAIRetroResponse::setBusinessName(const QString &business_name) {
    m_business_name = business_name;
    m_business_name_isSet = true;
}

bool OAIRetroResponse::is_business_name_Set() const{
    return m_business_name_isSet;
}

bool OAIRetroResponse::is_business_name_Valid() const{
    return m_business_name_isValid;
}

QString OAIRetroResponse::getCity() const {
    return m_city;
}
void OAIRetroResponse::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIRetroResponse::is_city_Set() const{
    return m_city_isSet;
}

bool OAIRetroResponse::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIRetroResponse::getCountry() const {
    return m_country;
}
void OAIRetroResponse::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIRetroResponse::is_country_Set() const{
    return m_country_isSet;
}

bool OAIRetroResponse::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIRetroResponse::getDate() const {
    return m_date;
}
void OAIRetroResponse::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIRetroResponse::is_date_Set() const{
    return m_date_isSet;
}

bool OAIRetroResponse::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIRetroResponse::getRefNum() const {
    return m_ref_num;
}
void OAIRetroResponse::setRefNum(const QString &ref_num) {
    m_ref_num = ref_num;
    m_ref_num_isSet = true;
}

bool OAIRetroResponse::is_ref_num_Set() const{
    return m_ref_num_isSet;
}

bool OAIRetroResponse::is_ref_num_Valid() const{
    return m_ref_num_isValid;
}

QString OAIRetroResponse::getState() const {
    return m_state;
}
void OAIRetroResponse::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIRetroResponse::is_state_Set() const{
    return m_state_isSet;
}

bool OAIRetroResponse::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIRetroResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_business_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRetroResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
