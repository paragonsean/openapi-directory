/**
 * MATCH API
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Address model module.
 * @module model/Address
 * @version 1.0.0
 */
class Address {
    /**
     * Constructs a new <code>Address</code>.
     * @alias module:model/Address
     * @param city {String} The name of the city for a merchant location.
     * @param country {String} The three digit country code of the principal owner. Valid values are Three digit alpha country codes as defined in ISO 3166-1.
     * @param countrySubdivision {String} The abbreviated state or province code for a merchant location (only supported for US and Canada merchants).
     * @param line1 {String} Line 1 of the street address for the merchant location. Usually includes street number and name.
     * @param postalCode {String} The postal code for a merchant location (only supported for US and Canada merchants).
     */
    constructor(city, country, countrySubdivision, line1, postalCode) { 
        
        Address.initialize(this, city, country, countrySubdivision, line1, postalCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, city, country, countrySubdivision, line1, postalCode) { 
        obj['City'] = city;
        obj['Country'] = country;
        obj['CountrySubdivision'] = countrySubdivision;
        obj['Line1'] = line1;
        obj['PostalCode'] = postalCode;
    }

    /**
     * Constructs a <code>Address</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Address} obj Optional instance to populate.
     * @return {module:model/Address} The populated <code>Address</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Address();

            if (data.hasOwnProperty('City')) {
                obj['City'] = ApiClient.convertToType(data['City'], 'String');
            }
            if (data.hasOwnProperty('Country')) {
                obj['Country'] = ApiClient.convertToType(data['Country'], 'String');
            }
            if (data.hasOwnProperty('CountrySubdivision')) {
                obj['CountrySubdivision'] = ApiClient.convertToType(data['CountrySubdivision'], 'String');
            }
            if (data.hasOwnProperty('Line1')) {
                obj['Line1'] = ApiClient.convertToType(data['Line1'], 'String');
            }
            if (data.hasOwnProperty('Line2')) {
                obj['Line2'] = ApiClient.convertToType(data['Line2'], 'String');
            }
            if (data.hasOwnProperty('PostalCode')) {
                obj['PostalCode'] = ApiClient.convertToType(data['PostalCode'], 'String');
            }
            if (data.hasOwnProperty('Province')) {
                obj['Province'] = ApiClient.convertToType(data['Province'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Address</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Address</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Address.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['City'] && !(typeof data['City'] === 'string' || data['City'] instanceof String)) {
            throw new Error("Expected the field `City` to be a primitive type in the JSON string but got " + data['City']);
        }
        // ensure the json data is a string
        if (data['Country'] && !(typeof data['Country'] === 'string' || data['Country'] instanceof String)) {
            throw new Error("Expected the field `Country` to be a primitive type in the JSON string but got " + data['Country']);
        }
        // ensure the json data is a string
        if (data['CountrySubdivision'] && !(typeof data['CountrySubdivision'] === 'string' || data['CountrySubdivision'] instanceof String)) {
            throw new Error("Expected the field `CountrySubdivision` to be a primitive type in the JSON string but got " + data['CountrySubdivision']);
        }
        // ensure the json data is a string
        if (data['Line1'] && !(typeof data['Line1'] === 'string' || data['Line1'] instanceof String)) {
            throw new Error("Expected the field `Line1` to be a primitive type in the JSON string but got " + data['Line1']);
        }
        // ensure the json data is a string
        if (data['Line2'] && !(typeof data['Line2'] === 'string' || data['Line2'] instanceof String)) {
            throw new Error("Expected the field `Line2` to be a primitive type in the JSON string but got " + data['Line2']);
        }
        // ensure the json data is a string
        if (data['PostalCode'] && !(typeof data['PostalCode'] === 'string' || data['PostalCode'] instanceof String)) {
            throw new Error("Expected the field `PostalCode` to be a primitive type in the JSON string but got " + data['PostalCode']);
        }
        // ensure the json data is a string
        if (data['Province'] && !(typeof data['Province'] === 'string' || data['Province'] instanceof String)) {
            throw new Error("Expected the field `Province` to be a primitive type in the JSON string but got " + data['Province']);
        }

        return true;
    }


}

Address.RequiredProperties = ["City", "Country", "CountrySubdivision", "Line1", "PostalCode"];

/**
 * The name of the city for a merchant location.
 * @member {String} City
 */
Address.prototype['City'] = undefined;

/**
 * The three digit country code of the principal owner. Valid values are Three digit alpha country codes as defined in ISO 3166-1.
 * @member {String} Country
 */
Address.prototype['Country'] = undefined;

/**
 * The abbreviated state or province code for a merchant location (only supported for US and Canada merchants).
 * @member {String} CountrySubdivision
 */
Address.prototype['CountrySubdivision'] = undefined;

/**
 * Line 1 of the street address for the merchant location. Usually includes street number and name.
 * @member {String} Line1
 */
Address.prototype['Line1'] = undefined;

/**
 * Line 2 of the street address,usually an apartment number or suite number.
 * @member {String} Line2
 */
Address.prototype['Line2'] = undefined;

/**
 * The postal code for a merchant location (only supported for US and Canada merchants).
 * @member {String} PostalCode
 */
Address.prototype['PostalCode'] = undefined;

/**
 * The name of the province for the location.
 * @member {String} Province
 */
Address.prototype['Province'] = undefined;






export default Address;

