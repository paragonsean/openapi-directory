/**
 * MATCH API
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Contact model module.
 * @module model/Contact
 * @version 1.0.0
 */
class Contact {
    /**
     * Constructs a new <code>Contact</code>.
     * @alias module:model/Contact
     */
    constructor() { 
        
        Contact.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Contact</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Contact} obj Optional instance to populate.
     * @return {module:model/Contact} The populated <code>Contact</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Contact();

            if (data.hasOwnProperty('BankName')) {
                obj['BankName'] = ApiClient.convertToType(data['BankName'], 'String');
            }
            if (data.hasOwnProperty('EmailAddress')) {
                obj['EmailAddress'] = ApiClient.convertToType(data['EmailAddress'], 'String');
            }
            if (data.hasOwnProperty('FaxNumber')) {
                obj['FaxNumber'] = ApiClient.convertToType(data['FaxNumber'], 'String');
            }
            if (data.hasOwnProperty('FirstName')) {
                obj['FirstName'] = ApiClient.convertToType(data['FirstName'], 'String');
            }
            if (data.hasOwnProperty('LastName')) {
                obj['LastName'] = ApiClient.convertToType(data['LastName'], 'String');
            }
            if (data.hasOwnProperty('PhoneNumber')) {
                obj['PhoneNumber'] = ApiClient.convertToType(data['PhoneNumber'], 'String');
            }
            if (data.hasOwnProperty('Region')) {
                obj['Region'] = ApiClient.convertToType(data['Region'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Contact</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Contact</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['BankName'] && !(typeof data['BankName'] === 'string' || data['BankName'] instanceof String)) {
            throw new Error("Expected the field `BankName` to be a primitive type in the JSON string but got " + data['BankName']);
        }
        // ensure the json data is a string
        if (data['EmailAddress'] && !(typeof data['EmailAddress'] === 'string' || data['EmailAddress'] instanceof String)) {
            throw new Error("Expected the field `EmailAddress` to be a primitive type in the JSON string but got " + data['EmailAddress']);
        }
        // ensure the json data is a string
        if (data['FaxNumber'] && !(typeof data['FaxNumber'] === 'string' || data['FaxNumber'] instanceof String)) {
            throw new Error("Expected the field `FaxNumber` to be a primitive type in the JSON string but got " + data['FaxNumber']);
        }
        // ensure the json data is a string
        if (data['FirstName'] && !(typeof data['FirstName'] === 'string' || data['FirstName'] instanceof String)) {
            throw new Error("Expected the field `FirstName` to be a primitive type in the JSON string but got " + data['FirstName']);
        }
        // ensure the json data is a string
        if (data['LastName'] && !(typeof data['LastName'] === 'string' || data['LastName'] instanceof String)) {
            throw new Error("Expected the field `LastName` to be a primitive type in the JSON string but got " + data['LastName']);
        }
        // ensure the json data is a string
        if (data['PhoneNumber'] && !(typeof data['PhoneNumber'] === 'string' || data['PhoneNumber'] instanceof String)) {
            throw new Error("Expected the field `PhoneNumber` to be a primitive type in the JSON string but got " + data['PhoneNumber']);
        }
        // ensure the json data is a string
        if (data['Region'] && !(typeof data['Region'] === 'string' || data['Region'] instanceof String)) {
            throw new Error("Expected the field `Region` to be a primitive type in the JSON string but got " + data['Region']);
        }

        return true;
    }


}



/**
 * The name of acquiring bank.
 * @member {String} BankName
 */
Contact.prototype['BankName'] = undefined;

/**
 * The Email address of primary contact of acquiring bank. The results may return information for more than one Contact.
 * @member {String} EmailAddress
 */
Contact.prototype['EmailAddress'] = undefined;

/**
 * The Fax Number of primary contact of acquiring bank. The results may return information for more than one Contact.
 * @member {String} FaxNumber
 */
Contact.prototype['FaxNumber'] = undefined;

/**
 * The first name of primary contact of acquiring bank. The results may return information for more than one Contact.
 * @member {String} FirstName
 */
Contact.prototype['FirstName'] = undefined;

/**
 * The last name of primary contact of acquiring bank. The results may return information for more than one Contact.
 * @member {String} LastName
 */
Contact.prototype['LastName'] = undefined;

/**
 * The Phone Number of primary contact of acquiring bank. The results may return information for more than one Contact.
 * @member {String} PhoneNumber
 */
Contact.prototype['PhoneNumber'] = undefined;

/**
 * The region of acquiring bank. The results may return information for more than one Contact.
 * @member {String} Region
 */
Contact.prototype['Region'] = undefined;






export default Contact;

