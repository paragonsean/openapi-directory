/**
 * MATCH API
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import DriversLicense from './DriversLicense';
import SearchCriteria from './SearchCriteria';

/**
 * The PrincipalMatch model module.
 * @module model/PrincipalMatch
 * @version 1.0.0
 */
class PrincipalMatch {
    /**
     * Constructs a new <code>PrincipalMatch</code>.
     * @alias module:model/PrincipalMatch
     */
    constructor() { 
        
        PrincipalMatch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PrincipalMatch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PrincipalMatch} obj Optional instance to populate.
     * @return {module:model/PrincipalMatch} The populated <code>PrincipalMatch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PrincipalMatch();

            if (data.hasOwnProperty('Address')) {
                obj['Address'] = Address.constructFromObject(data['Address']);
            }
            if (data.hasOwnProperty('AltPhoneNumber')) {
                obj['AltPhoneNumber'] = ApiClient.convertToType(data['AltPhoneNumber'], 'String');
            }
            if (data.hasOwnProperty('DriversLicense')) {
                obj['DriversLicense'] = DriversLicense.constructFromObject(data['DriversLicense']);
            }
            if (data.hasOwnProperty('FirstName')) {
                obj['FirstName'] = ApiClient.convertToType(data['FirstName'], 'String');
            }
            if (data.hasOwnProperty('LastName')) {
                obj['LastName'] = ApiClient.convertToType(data['LastName'], 'String');
            }
            if (data.hasOwnProperty('MiddleInitial')) {
                obj['MiddleInitial'] = ApiClient.convertToType(data['MiddleInitial'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('NationalId')) {
                obj['NationalId'] = ApiClient.convertToType(data['NationalId'], 'String');
            }
            if (data.hasOwnProperty('PhoneNumber')) {
                obj['PhoneNumber'] = ApiClient.convertToType(data['PhoneNumber'], 'String');
            }
            if (data.hasOwnProperty('SearchCriteria')) {
                obj['SearchCriteria'] = SearchCriteria.constructFromObject(data['SearchCriteria']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PrincipalMatch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PrincipalMatch</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Address`
        if (data['Address']) { // data not null
          Address.validateJSON(data['Address']);
        }
        // ensure the json data is a string
        if (data['AltPhoneNumber'] && !(typeof data['AltPhoneNumber'] === 'string' || data['AltPhoneNumber'] instanceof String)) {
            throw new Error("Expected the field `AltPhoneNumber` to be a primitive type in the JSON string but got " + data['AltPhoneNumber']);
        }
        // validate the optional field `DriversLicense`
        if (data['DriversLicense']) { // data not null
          DriversLicense.validateJSON(data['DriversLicense']);
        }
        // ensure the json data is a string
        if (data['FirstName'] && !(typeof data['FirstName'] === 'string' || data['FirstName'] instanceof String)) {
            throw new Error("Expected the field `FirstName` to be a primitive type in the JSON string but got " + data['FirstName']);
        }
        // ensure the json data is a string
        if (data['LastName'] && !(typeof data['LastName'] === 'string' || data['LastName'] instanceof String)) {
            throw new Error("Expected the field `LastName` to be a primitive type in the JSON string but got " + data['LastName']);
        }
        // ensure the json data is a string
        if (data['MiddleInitial'] && !(typeof data['MiddleInitial'] === 'string' || data['MiddleInitial'] instanceof String)) {
            throw new Error("Expected the field `MiddleInitial` to be a primitive type in the JSON string but got " + data['MiddleInitial']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['NationalId'] && !(typeof data['NationalId'] === 'string' || data['NationalId'] instanceof String)) {
            throw new Error("Expected the field `NationalId` to be a primitive type in the JSON string but got " + data['NationalId']);
        }
        // ensure the json data is a string
        if (data['PhoneNumber'] && !(typeof data['PhoneNumber'] === 'string' || data['PhoneNumber'] instanceof String)) {
            throw new Error("Expected the field `PhoneNumber` to be a primitive type in the JSON string but got " + data['PhoneNumber']);
        }
        // validate the optional field `SearchCriteria`
        if (data['SearchCriteria']) { // data not null
          SearchCriteria.validateJSON(data['SearchCriteria']);
        }

        return true;
    }


}



/**
 * @member {module:model/Address} Address
 */
PrincipalMatch.prototype['Address'] = undefined;

/**
 * The Business or Merchant's alternate phone number, including the area code. Within the USA, phone numbers have a length of 10, and for out outside the US, a max length of 25. Within the U.S. phone numbers can not start with 0 or 1. If the number is outside the U.S. region; do not include the country code. The number must be digits only, with no format characters such as parenthesis or dashes.
 * @member {String} AltPhoneNumber
 */
PrincipalMatch.prototype['AltPhoneNumber'] = undefined;

/**
 * @member {module:model/DriversLicense} DriversLicense
 */
PrincipalMatch.prototype['DriversLicense'] = undefined;

/**
 * The first name of the principal owner of the business.
 * @member {String} FirstName
 */
PrincipalMatch.prototype['FirstName'] = undefined;

/**
 * The last name of the principal owner of the business.
 * @member {String} LastName
 */
PrincipalMatch.prototype['LastName'] = undefined;

/**
 * THe middle initial of the name of the principal owner of the business.
 * @member {String} MiddleInitial
 */
PrincipalMatch.prototype['MiddleInitial'] = undefined;

/**
 * The name of the Business which has been terminated.
 * @member {String} Name
 */
PrincipalMatch.prototype['Name'] = undefined;

/**
 * The Social Security number of a principal owner. If the principal owner is not from the U.S. Region, then use their national ID card number.
 * @member {String} NationalId
 */
PrincipalMatch.prototype['NationalId'] = undefined;

/**
 * The Business or Merchant's phone number, including the area code. Within the USA, phone numbers have a length of 10, and for outside the US, it can be any length with a maximum of 12 digits. Within the U.S. phone numbers can not start with 0 or 1. If the number is outside the U.S. region; do not include the country code. The phone number must be digits only, with no format characters such as parenthesis or dashes.
 * @member {String} PhoneNumber
 */
PrincipalMatch.prototype['PhoneNumber'] = undefined;

/**
 * @member {module:model/SearchCriteria} SearchCriteria
 */
PrincipalMatch.prototype['SearchCriteria'] = undefined;






export default PrincipalMatch;

