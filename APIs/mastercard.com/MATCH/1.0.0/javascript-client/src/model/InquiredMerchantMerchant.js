/**
 * MATCH API
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import MerchantMatch from './MerchantMatch';
import Principal from './Principal';
import UrlGroup from './UrlGroup';

/**
 * The InquiredMerchantMerchant model module.
 * @module model/InquiredMerchantMerchant
 * @version 1.0.0
 */
class InquiredMerchantMerchant {
    /**
     * Constructs a new <code>InquiredMerchantMerchant</code>.
     * @alias module:model/InquiredMerchantMerchant
     */
    constructor() { 
        
        InquiredMerchantMerchant.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InquiredMerchantMerchant</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InquiredMerchantMerchant} obj Optional instance to populate.
     * @return {module:model/InquiredMerchantMerchant} The populated <code>InquiredMerchantMerchant</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InquiredMerchantMerchant();

            if (data.hasOwnProperty('AddedByAcquirerID')) {
                obj['AddedByAcquirerID'] = ApiClient.convertToType(data['AddedByAcquirerID'], 'String');
            }
            if (data.hasOwnProperty('AddedOnDate')) {
                obj['AddedOnDate'] = ApiClient.convertToType(data['AddedOnDate'], 'String');
            }
            if (data.hasOwnProperty('Address')) {
                obj['Address'] = Address.constructFromObject(data['Address']);
            }
            if (data.hasOwnProperty('AltPhoneNumber')) {
                obj['AltPhoneNumber'] = ApiClient.convertToType(data['AltPhoneNumber'], 'String');
            }
            if (data.hasOwnProperty('CountrySubdivisionTaxId')) {
                obj['CountrySubdivisionTaxId'] = ApiClient.convertToType(data['CountrySubdivisionTaxId'], 'String');
            }
            if (data.hasOwnProperty('DoingBusinessAsName')) {
                obj['DoingBusinessAsName'] = ApiClient.convertToType(data['DoingBusinessAsName'], 'String');
            }
            if (data.hasOwnProperty('MerchantMatch')) {
                obj['MerchantMatch'] = MerchantMatch.constructFromObject(data['MerchantMatch']);
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('NationalTaxId')) {
                obj['NationalTaxId'] = ApiClient.convertToType(data['NationalTaxId'], 'String');
            }
            if (data.hasOwnProperty('PhoneNumber')) {
                obj['PhoneNumber'] = ApiClient.convertToType(data['PhoneNumber'], 'String');
            }
            if (data.hasOwnProperty('Principal')) {
                obj['Principal'] = Principal.constructFromObject(data['Principal']);
            }
            if (data.hasOwnProperty('ServiceProvDBA')) {
                obj['ServiceProvDBA'] = ApiClient.convertToType(data['ServiceProvDBA'], 'String');
            }
            if (data.hasOwnProperty('ServiceProvLegal')) {
                obj['ServiceProvLegal'] = ApiClient.convertToType(data['ServiceProvLegal'], 'String');
            }
            if (data.hasOwnProperty('TerminationReasonCode')) {
                obj['TerminationReasonCode'] = ApiClient.convertToType(data['TerminationReasonCode'], 'String');
            }
            if (data.hasOwnProperty('UrlGroup')) {
                obj['UrlGroup'] = UrlGroup.constructFromObject(data['UrlGroup']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InquiredMerchantMerchant</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InquiredMerchantMerchant</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AddedByAcquirerID'] && !(typeof data['AddedByAcquirerID'] === 'string' || data['AddedByAcquirerID'] instanceof String)) {
            throw new Error("Expected the field `AddedByAcquirerID` to be a primitive type in the JSON string but got " + data['AddedByAcquirerID']);
        }
        // ensure the json data is a string
        if (data['AddedOnDate'] && !(typeof data['AddedOnDate'] === 'string' || data['AddedOnDate'] instanceof String)) {
            throw new Error("Expected the field `AddedOnDate` to be a primitive type in the JSON string but got " + data['AddedOnDate']);
        }
        // validate the optional field `Address`
        if (data['Address']) { // data not null
          Address.validateJSON(data['Address']);
        }
        // ensure the json data is a string
        if (data['AltPhoneNumber'] && !(typeof data['AltPhoneNumber'] === 'string' || data['AltPhoneNumber'] instanceof String)) {
            throw new Error("Expected the field `AltPhoneNumber` to be a primitive type in the JSON string but got " + data['AltPhoneNumber']);
        }
        // ensure the json data is a string
        if (data['CountrySubdivisionTaxId'] && !(typeof data['CountrySubdivisionTaxId'] === 'string' || data['CountrySubdivisionTaxId'] instanceof String)) {
            throw new Error("Expected the field `CountrySubdivisionTaxId` to be a primitive type in the JSON string but got " + data['CountrySubdivisionTaxId']);
        }
        // ensure the json data is a string
        if (data['DoingBusinessAsName'] && !(typeof data['DoingBusinessAsName'] === 'string' || data['DoingBusinessAsName'] instanceof String)) {
            throw new Error("Expected the field `DoingBusinessAsName` to be a primitive type in the JSON string but got " + data['DoingBusinessAsName']);
        }
        // validate the optional field `MerchantMatch`
        if (data['MerchantMatch']) { // data not null
          MerchantMatch.validateJSON(data['MerchantMatch']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['NationalTaxId'] && !(typeof data['NationalTaxId'] === 'string' || data['NationalTaxId'] instanceof String)) {
            throw new Error("Expected the field `NationalTaxId` to be a primitive type in the JSON string but got " + data['NationalTaxId']);
        }
        // ensure the json data is a string
        if (data['PhoneNumber'] && !(typeof data['PhoneNumber'] === 'string' || data['PhoneNumber'] instanceof String)) {
            throw new Error("Expected the field `PhoneNumber` to be a primitive type in the JSON string but got " + data['PhoneNumber']);
        }
        // validate the optional field `Principal`
        if (data['Principal']) { // data not null
          Principal.validateJSON(data['Principal']);
        }
        // ensure the json data is a string
        if (data['ServiceProvDBA'] && !(typeof data['ServiceProvDBA'] === 'string' || data['ServiceProvDBA'] instanceof String)) {
            throw new Error("Expected the field `ServiceProvDBA` to be a primitive type in the JSON string but got " + data['ServiceProvDBA']);
        }
        // ensure the json data is a string
        if (data['ServiceProvLegal'] && !(typeof data['ServiceProvLegal'] === 'string' || data['ServiceProvLegal'] instanceof String)) {
            throw new Error("Expected the field `ServiceProvLegal` to be a primitive type in the JSON string but got " + data['ServiceProvLegal']);
        }
        // ensure the json data is a string
        if (data['TerminationReasonCode'] && !(typeof data['TerminationReasonCode'] === 'string' || data['TerminationReasonCode'] instanceof String)) {
            throw new Error("Expected the field `TerminationReasonCode` to be a primitive type in the JSON string but got " + data['TerminationReasonCode']);
        }
        // validate the optional field `UrlGroup`
        if (data['UrlGroup']) { // data not null
          UrlGroup.validateJSON(data['UrlGroup']);
        }

        return true;
    }


}



/**
 * The Member ICA that has added the merchant to the MATCH system
 * @member {String} AddedByAcquirerID
 */
InquiredMerchantMerchant.prototype['AddedByAcquirerID'] = undefined;

/**
 * The date on which the merchant was added to the MATCH system. Format MM/DD/YYYY
 * @member {String} AddedOnDate
 */
InquiredMerchantMerchant.prototype['AddedOnDate'] = undefined;

/**
 * @member {module:model/Address} Address
 */
InquiredMerchantMerchant.prototype['Address'] = undefined;

/**
 * The Business or Merchant's alternate phone number.
 * @member {String} AltPhoneNumber
 */
InquiredMerchantMerchant.prototype['AltPhoneNumber'] = undefined;

/**
 * The Merchant's state tax ID; for the U.S region only. Return value will be hidden.
 * @member {String} CountrySubdivisionTaxId
 */
InquiredMerchantMerchant.prototype['CountrySubdivisionTaxId'] = undefined;

/**
 * The name used by a merchant that could be different from the legal name of the business. Such as Bait R Us instead of the legal name, The Bait Shop
 * @member {String} DoingBusinessAsName
 */
InquiredMerchantMerchant.prototype['DoingBusinessAsName'] = undefined;

/**
 * @member {module:model/MerchantMatch} MerchantMatch
 */
InquiredMerchantMerchant.prototype['MerchantMatch'] = undefined;

/**
 * The name of the Business which has been terminated.
 * @member {String} Name
 */
InquiredMerchantMerchant.prototype['Name'] = undefined;

/**
 * The National tax ID or business registration number. Return value will be hidden.
 * @member {String} NationalTaxId
 */
InquiredMerchantMerchant.prototype['NationalTaxId'] = undefined;

/**
 * The Business or Merchant's phone number.
 * @member {String} PhoneNumber
 */
InquiredMerchantMerchant.prototype['PhoneNumber'] = undefined;

/**
 * @member {module:model/Principal} Principal
 */
InquiredMerchantMerchant.prototype['Principal'] = undefined;

/**
 * The name of the service provider associated with the merchant listed in the MATCH.
 * @member {String} ServiceProvDBA
 */
InquiredMerchantMerchant.prototype['ServiceProvDBA'] = undefined;

/**
 * The name of the service provider associated with the merchant listed in the MATCH.
 * @member {String} ServiceProvLegal
 */
InquiredMerchantMerchant.prototype['ServiceProvLegal'] = undefined;

/**
 * A two digit numeric code indication why a particular merchant was terminated.  01   Account Data Compromise, 02   Common Points of Purchase, 03   Laundering, 04   Excessive Chargebacks, 05   Excessive Fraud, 06   Reserved for Future Use, 07   Fraud Conviction, 08   MasterCard Questionable Merchant Audit Program, 09   Bankruptcy/Liquidation/Insolvency, 10   Violation of MasterCard Standards, 11   Merchant collusion, 12   PCI Data Security Standard, Noncompliance, 13   Illegal Transactions, 14   Identity Theft
 * @member {String} TerminationReasonCode
 */
InquiredMerchantMerchant.prototype['TerminationReasonCode'] = undefined;

/**
 * @member {module:model/UrlGroup} UrlGroup
 */
InquiredMerchantMerchant.prototype['UrlGroup'] = undefined;






export default InquiredMerchantMerchant;

