/**
 * MATCH API
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import PrincipalMatch from './PrincipalMatch';

/**
 * The MerchantMatch model module.
 * @module model/MerchantMatch
 * @version 1.0.0
 */
class MerchantMatch {
    /**
     * Constructs a new <code>MerchantMatch</code>.
     * @alias module:model/MerchantMatch
     */
    constructor() { 
        
        MerchantMatch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MerchantMatch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MerchantMatch} obj Optional instance to populate.
     * @return {module:model/MerchantMatch} The populated <code>MerchantMatch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MerchantMatch();

            if (data.hasOwnProperty('Address')) {
                obj['Address'] = Address.constructFromObject(data['Address']);
            }
            if (data.hasOwnProperty('AltPhoneNumber')) {
                obj['AltPhoneNumber'] = ApiClient.convertToType(data['AltPhoneNumber'], 'String');
            }
            if (data.hasOwnProperty('CountrySubdivisionTaxId')) {
                obj['CountrySubdivisionTaxId'] = ApiClient.convertToType(data['CountrySubdivisionTaxId'], 'String');
            }
            if (data.hasOwnProperty('DoingBusinessAsName')) {
                obj['DoingBusinessAsName'] = ApiClient.convertToType(data['DoingBusinessAsName'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('NationalTaxId')) {
                obj['NationalTaxId'] = ApiClient.convertToType(data['NationalTaxId'], 'String');
            }
            if (data.hasOwnProperty('PhoneNumber')) {
                obj['PhoneNumber'] = ApiClient.convertToType(data['PhoneNumber'], 'String');
            }
            if (data.hasOwnProperty('PrincipalMatch')) {
                obj['PrincipalMatch'] = ApiClient.convertToType(data['PrincipalMatch'], [PrincipalMatch]);
            }
            if (data.hasOwnProperty('ServiceProvDBA')) {
                obj['ServiceProvDBA'] = ApiClient.convertToType(data['ServiceProvDBA'], 'String');
            }
            if (data.hasOwnProperty('ServiceProvLegal')) {
                obj['ServiceProvLegal'] = ApiClient.convertToType(data['ServiceProvLegal'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MerchantMatch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MerchantMatch</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Address`
        if (data['Address']) { // data not null
          Address.validateJSON(data['Address']);
        }
        // ensure the json data is a string
        if (data['AltPhoneNumber'] && !(typeof data['AltPhoneNumber'] === 'string' || data['AltPhoneNumber'] instanceof String)) {
            throw new Error("Expected the field `AltPhoneNumber` to be a primitive type in the JSON string but got " + data['AltPhoneNumber']);
        }
        // ensure the json data is a string
        if (data['CountrySubdivisionTaxId'] && !(typeof data['CountrySubdivisionTaxId'] === 'string' || data['CountrySubdivisionTaxId'] instanceof String)) {
            throw new Error("Expected the field `CountrySubdivisionTaxId` to be a primitive type in the JSON string but got " + data['CountrySubdivisionTaxId']);
        }
        // ensure the json data is a string
        if (data['DoingBusinessAsName'] && !(typeof data['DoingBusinessAsName'] === 'string' || data['DoingBusinessAsName'] instanceof String)) {
            throw new Error("Expected the field `DoingBusinessAsName` to be a primitive type in the JSON string but got " + data['DoingBusinessAsName']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['NationalTaxId'] && !(typeof data['NationalTaxId'] === 'string' || data['NationalTaxId'] instanceof String)) {
            throw new Error("Expected the field `NationalTaxId` to be a primitive type in the JSON string but got " + data['NationalTaxId']);
        }
        // ensure the json data is a string
        if (data['PhoneNumber'] && !(typeof data['PhoneNumber'] === 'string' || data['PhoneNumber'] instanceof String)) {
            throw new Error("Expected the field `PhoneNumber` to be a primitive type in the JSON string but got " + data['PhoneNumber']);
        }
        if (data['PrincipalMatch']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['PrincipalMatch'])) {
                throw new Error("Expected the field `PrincipalMatch` to be an array in the JSON data but got " + data['PrincipalMatch']);
            }
            // validate the optional field `PrincipalMatch` (array)
            for (const item of data['PrincipalMatch']) {
                PrincipalMatch.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ServiceProvDBA'] && !(typeof data['ServiceProvDBA'] === 'string' || data['ServiceProvDBA'] instanceof String)) {
            throw new Error("Expected the field `ServiceProvDBA` to be a primitive type in the JSON string but got " + data['ServiceProvDBA']);
        }
        // ensure the json data is a string
        if (data['ServiceProvLegal'] && !(typeof data['ServiceProvLegal'] === 'string' || data['ServiceProvLegal'] instanceof String)) {
            throw new Error("Expected the field `ServiceProvLegal` to be a primitive type in the JSON string but got " + data['ServiceProvLegal']);
        }

        return true;
    }


}



/**
 * @member {module:model/Address} Address
 */
MerchantMatch.prototype['Address'] = undefined;

/**
 * The Business or Merchant's alternate phone number.
 * @member {String} AltPhoneNumber
 */
MerchantMatch.prototype['AltPhoneNumber'] = undefined;

/**
 * The Merchant's state tax ID; for the U.S region only. Return value will be hidden.
 * @member {String} CountrySubdivisionTaxId
 */
MerchantMatch.prototype['CountrySubdivisionTaxId'] = undefined;

/**
 * The name used by a merchant that could be different from the legal name of the business. Such as Bait R Us instead of the legal name, The Bait Shop
 * @member {String} DoingBusinessAsName
 */
MerchantMatch.prototype['DoingBusinessAsName'] = undefined;

/**
 * The name of the Business which has been terminated.
 * @member {String} Name
 */
MerchantMatch.prototype['Name'] = undefined;

/**
 * The National tax ID or business registration number. Return value will be hidden.
 * @member {String} NationalTaxId
 */
MerchantMatch.prototype['NationalTaxId'] = undefined;

/**
 * The Business or Merchant's phone number.
 * @member {String} PhoneNumber
 */
MerchantMatch.prototype['PhoneNumber'] = undefined;

/**
 * @member {Array.<module:model/PrincipalMatch>} PrincipalMatch
 */
MerchantMatch.prototype['PrincipalMatch'] = undefined;

/**
 * The name of the service provider associated with the merchant listed in the MATCH.
 * @member {String} ServiceProvDBA
 */
MerchantMatch.prototype['ServiceProvDBA'] = undefined;

/**
 * The name of the service provider associated with the merchant listed in the MATCH.
 * @member {String} ServiceProvLegal
 */
MerchantMatch.prototype['ServiceProvLegal'] = undefined;






export default MerchantMatch;

