/**
 * MATCH API
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import Principal from './Principal';
import SearchCriteria from './SearchCriteria';
import UrlGroup from './UrlGroup';

/**
 * The Merchant model module.
 * @module model/Merchant
 * @version 1.0.0
 */
class Merchant {
    /**
     * Constructs a new <code>Merchant</code>.
     * @alias module:model/Merchant
     * @param name {String} The name of the business assigned by the principal owner(s)
     */
    constructor(name) { 
        
        Merchant.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['Name'] = name;
    }

    /**
     * Constructs a <code>Merchant</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Merchant} obj Optional instance to populate.
     * @return {module:model/Merchant} The populated <code>Merchant</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Merchant();

            if (data.hasOwnProperty('AddedByAcquirerID')) {
                obj['AddedByAcquirerID'] = ApiClient.convertToType(data['AddedByAcquirerID'], 'String');
            }
            if (data.hasOwnProperty('AddedOnDate')) {
                obj['AddedOnDate'] = ApiClient.convertToType(data['AddedOnDate'], 'String');
            }
            if (data.hasOwnProperty('Address')) {
                obj['Address'] = Address.constructFromObject(data['Address']);
            }
            if (data.hasOwnProperty('AltPhoneNumber')) {
                obj['AltPhoneNumber'] = ApiClient.convertToType(data['AltPhoneNumber'], 'String');
            }
            if (data.hasOwnProperty('CountrySubdivisionTaxId')) {
                obj['CountrySubdivisionTaxId'] = ApiClient.convertToType(data['CountrySubdivisionTaxId'], 'String');
            }
            if (data.hasOwnProperty('DoingBusinessAsName')) {
                obj['DoingBusinessAsName'] = ApiClient.convertToType(data['DoingBusinessAsName'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('NationalTaxId')) {
                obj['NationalTaxId'] = ApiClient.convertToType(data['NationalTaxId'], 'String');
            }
            if (data.hasOwnProperty('PhoneNumber')) {
                obj['PhoneNumber'] = ApiClient.convertToType(data['PhoneNumber'], 'String');
            }
            if (data.hasOwnProperty('Principal')) {
                obj['Principal'] = ApiClient.convertToType(data['Principal'], [Principal]);
            }
            if (data.hasOwnProperty('SearchCriteria')) {
                obj['SearchCriteria'] = SearchCriteria.constructFromObject(data['SearchCriteria']);
            }
            if (data.hasOwnProperty('ServiceProvDBA')) {
                obj['ServiceProvDBA'] = ApiClient.convertToType(data['ServiceProvDBA'], 'String');
            }
            if (data.hasOwnProperty('ServiceProvLegal')) {
                obj['ServiceProvLegal'] = ApiClient.convertToType(data['ServiceProvLegal'], 'String');
            }
            if (data.hasOwnProperty('TerminationReasonCode')) {
                obj['TerminationReasonCode'] = ApiClient.convertToType(data['TerminationReasonCode'], 'String');
            }
            if (data.hasOwnProperty('Url')) {
                obj['Url'] = ApiClient.convertToType(data['Url'], 'String');
            }
            if (data.hasOwnProperty('UrlGroup')) {
                obj['UrlGroup'] = ApiClient.convertToType(data['UrlGroup'], [UrlGroup]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Merchant</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Merchant</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Merchant.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['AddedByAcquirerID'] && !(typeof data['AddedByAcquirerID'] === 'string' || data['AddedByAcquirerID'] instanceof String)) {
            throw new Error("Expected the field `AddedByAcquirerID` to be a primitive type in the JSON string but got " + data['AddedByAcquirerID']);
        }
        // ensure the json data is a string
        if (data['AddedOnDate'] && !(typeof data['AddedOnDate'] === 'string' || data['AddedOnDate'] instanceof String)) {
            throw new Error("Expected the field `AddedOnDate` to be a primitive type in the JSON string but got " + data['AddedOnDate']);
        }
        // validate the optional field `Address`
        if (data['Address']) { // data not null
          Address.validateJSON(data['Address']);
        }
        // ensure the json data is a string
        if (data['AltPhoneNumber'] && !(typeof data['AltPhoneNumber'] === 'string' || data['AltPhoneNumber'] instanceof String)) {
            throw new Error("Expected the field `AltPhoneNumber` to be a primitive type in the JSON string but got " + data['AltPhoneNumber']);
        }
        // ensure the json data is a string
        if (data['CountrySubdivisionTaxId'] && !(typeof data['CountrySubdivisionTaxId'] === 'string' || data['CountrySubdivisionTaxId'] instanceof String)) {
            throw new Error("Expected the field `CountrySubdivisionTaxId` to be a primitive type in the JSON string but got " + data['CountrySubdivisionTaxId']);
        }
        // ensure the json data is a string
        if (data['DoingBusinessAsName'] && !(typeof data['DoingBusinessAsName'] === 'string' || data['DoingBusinessAsName'] instanceof String)) {
            throw new Error("Expected the field `DoingBusinessAsName` to be a primitive type in the JSON string but got " + data['DoingBusinessAsName']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['NationalTaxId'] && !(typeof data['NationalTaxId'] === 'string' || data['NationalTaxId'] instanceof String)) {
            throw new Error("Expected the field `NationalTaxId` to be a primitive type in the JSON string but got " + data['NationalTaxId']);
        }
        // ensure the json data is a string
        if (data['PhoneNumber'] && !(typeof data['PhoneNumber'] === 'string' || data['PhoneNumber'] instanceof String)) {
            throw new Error("Expected the field `PhoneNumber` to be a primitive type in the JSON string but got " + data['PhoneNumber']);
        }
        if (data['Principal']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Principal'])) {
                throw new Error("Expected the field `Principal` to be an array in the JSON data but got " + data['Principal']);
            }
            // validate the optional field `Principal` (array)
            for (const item of data['Principal']) {
                Principal.validateJSON(item);
            };
        }
        // validate the optional field `SearchCriteria`
        if (data['SearchCriteria']) { // data not null
          SearchCriteria.validateJSON(data['SearchCriteria']);
        }
        // ensure the json data is a string
        if (data['ServiceProvDBA'] && !(typeof data['ServiceProvDBA'] === 'string' || data['ServiceProvDBA'] instanceof String)) {
            throw new Error("Expected the field `ServiceProvDBA` to be a primitive type in the JSON string but got " + data['ServiceProvDBA']);
        }
        // ensure the json data is a string
        if (data['ServiceProvLegal'] && !(typeof data['ServiceProvLegal'] === 'string' || data['ServiceProvLegal'] instanceof String)) {
            throw new Error("Expected the field `ServiceProvLegal` to be a primitive type in the JSON string but got " + data['ServiceProvLegal']);
        }
        // ensure the json data is a string
        if (data['TerminationReasonCode'] && !(typeof data['TerminationReasonCode'] === 'string' || data['TerminationReasonCode'] instanceof String)) {
            throw new Error("Expected the field `TerminationReasonCode` to be a primitive type in the JSON string but got " + data['TerminationReasonCode']);
        }
        // ensure the json data is a string
        if (data['Url'] && !(typeof data['Url'] === 'string' || data['Url'] instanceof String)) {
            throw new Error("Expected the field `Url` to be a primitive type in the JSON string but got " + data['Url']);
        }
        if (data['UrlGroup']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['UrlGroup'])) {
                throw new Error("Expected the field `UrlGroup` to be an array in the JSON data but got " + data['UrlGroup']);
            }
            // validate the optional field `UrlGroup` (array)
            for (const item of data['UrlGroup']) {
                UrlGroup.validateJSON(item);
            };
        }

        return true;
    }


}

Merchant.RequiredProperties = ["Name"];

/**
 * The Member ICA that has added the merchant to the MATCH system
 * @member {String} AddedByAcquirerID
 */
Merchant.prototype['AddedByAcquirerID'] = undefined;

/**
 * Date the merchant was added to the MATCH database.
 * @member {String} AddedOnDate
 */
Merchant.prototype['AddedOnDate'] = undefined;

/**
 * @member {module:model/Address} Address
 */
Merchant.prototype['Address'] = undefined;

/**
 * The Business or Merchant's alternate phone number, including the area code. Within the USA, phone numbers have a length of 10, and for out outside the US, a max length of 25. Within the U.S. phone numbers can not start with 0 or 1. If the number is outside the U.S. region; do not include the country code. The number must be digits only, with no format characters such as parenthesis or dashes.
 * @member {String} AltPhoneNumber
 */
Merchant.prototype['AltPhoneNumber'] = undefined;

/**
 * The Merchant Country Subdivision tax ID, leave blank if not in the U.S region.
 * @member {String} CountrySubdivisionTaxId
 */
Merchant.prototype['CountrySubdivisionTaxId'] = undefined;

/**
 * The name used by a merchant that could be different from the legal name of the business. Such as Bait R Us instead of the legal name, The Bait Shop.
 * @member {String} DoingBusinessAsName
 */
Merchant.prototype['DoingBusinessAsName'] = undefined;

/**
 * The name of the business assigned by the principal owner(s)
 * @member {String} Name
 */
Merchant.prototype['Name'] = undefined;

/**
 * The Merchant national tax ID, leave blank if not in the U.S region.
 * @member {String} NationalTaxId
 */
Merchant.prototype['NationalTaxId'] = undefined;

/**
 * The Business or Merchant's phone number, including the area code. Within the USA, phone numbers have a length of 10, and for outside the US, it can be any length with a maximum of 12 digits. Within the U.S. phone numbers can not start with 0 or 1. If the number is outside the U.S. region; do not include the country code. The phone number must be digits only, with no format characters such as parenthesis or dashes.
 * @member {String} PhoneNumber
 */
Merchant.prototype['PhoneNumber'] = undefined;

/**
 * The details for the principal owner of the business.  A maximum of 5 principals may be submitted.
 * @member {Array.<module:model/Principal>} Principal
 */
Merchant.prototype['Principal'] = undefined;

/**
 * @member {module:model/SearchCriteria} SearchCriteria
 */
Merchant.prototype['SearchCriteria'] = undefined;

/**
 * The name of the service provider associated with the merchant listed in the MATCH
 * @member {String} ServiceProvDBA
 */
Merchant.prototype['ServiceProvDBA'] = undefined;

/**
 * The name of the service provider associated with the merchant listed in the MATCH
 * @member {String} ServiceProvLegal
 */
Merchant.prototype['ServiceProvLegal'] = undefined;

/**
 * A two digit numeric code indication why a particular merchant was terminated.  01   Account Data Compromise, 02   Common Points of Purchase, 03   Laundering, 04   Excessive Chargebacks, 05   Excessive Fraud, 06   Reserved for Future Use, 07   Fraud Conviction, 08   MasterCard Questionable Merchant Audit Program, 09   Bankruptcy/Liquidation/Insolvency, 10   Violation of MasterCard Standards, 11   Merchant collusion, 12   PCI Data Security Standard, Noncompliance, 13   Illegal Transactions, 14   Identity Theft
 * @member {String} TerminationReasonCode
 */
Merchant.prototype['TerminationReasonCode'] = undefined;

/**
 * Website address of the merchant. A request may include multiple URLs. The total cumulative size of the URLs cannot exceed 20,000 bytes.
 * @member {String} Url
 */
Merchant.prototype['Url'] = undefined;

/**
 * @member {Array.<module:model/UrlGroup>} UrlGroup
 */
Merchant.prototype['UrlGroup'] = undefined;






export default Merchant;

