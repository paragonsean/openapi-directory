/**
 * MATCH API
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DriversLicense model module.
 * @module model/DriversLicense
 * @version 1.0.0
 */
class DriversLicense {
    /**
     * Constructs a new <code>DriversLicense</code>.
     * @alias module:model/DriversLicense
     */
    constructor() { 
        
        DriversLicense.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DriversLicense</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DriversLicense} obj Optional instance to populate.
     * @return {module:model/DriversLicense} The populated <code>DriversLicense</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DriversLicense();

            if (data.hasOwnProperty('Country')) {
                obj['Country'] = ApiClient.convertToType(data['Country'], 'String');
            }
            if (data.hasOwnProperty('CountrySubdivision')) {
                obj['CountrySubdivision'] = ApiClient.convertToType(data['CountrySubdivision'], 'String');
            }
            if (data.hasOwnProperty('Number')) {
                obj['Number'] = ApiClient.convertToType(data['Number'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DriversLicense</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DriversLicense</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Country'] && !(typeof data['Country'] === 'string' || data['Country'] instanceof String)) {
            throw new Error("Expected the field `Country` to be a primitive type in the JSON string but got " + data['Country']);
        }
        // ensure the json data is a string
        if (data['CountrySubdivision'] && !(typeof data['CountrySubdivision'] === 'string' || data['CountrySubdivision'] instanceof String)) {
            throw new Error("Expected the field `CountrySubdivision` to be a primitive type in the JSON string but got " + data['CountrySubdivision']);
        }
        // ensure the json data is a string
        if (data['Number'] && !(typeof data['Number'] === 'string' || data['Number'] instanceof String)) {
            throw new Error("Expected the field `Number` to be a primitive type in the JSON string but got " + data['Number']);
        }

        return true;
    }


}



/**
 * The three digit country code of the principal owner. Valid values are Three digit alpha country codes as defined in ISO 3166-1. Required when Drivers License Number is provided. Should not be provided if Drivers License Number is not provided.
 * @member {String} Country
 */
DriversLicense.prototype['Country'] = undefined;

/**
 * The abbreviated state or province code for a merchant location (only supported for US and Canada merchants).  Required when Drivers License Country is 'USA' . Should not be provided for non-US Drivers License Country.
 * @member {String} CountrySubdivision
 */
DriversLicense.prototype['CountrySubdivision'] = undefined;

/**
 * The drivers license number of a principal owner.
 * @member {String} Number
 */
DriversLicense.prototype['Number'] = undefined;






export default DriversLicense;

