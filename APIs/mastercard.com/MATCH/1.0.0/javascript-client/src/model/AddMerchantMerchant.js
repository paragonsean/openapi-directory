/**
 * MATCH API
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import Principal from './Principal';

/**
 * The AddMerchantMerchant model module.
 * @module model/AddMerchantMerchant
 * @version 1.0.0
 */
class AddMerchantMerchant {
    /**
     * Constructs a new <code>AddMerchantMerchant</code>.
     * @alias module:model/AddMerchantMerchant
     * @param cATFlag {String} Cardholder-activated terminal indicator.
     * @param countrySubdivisionTaxId {String} The Merchant's state tax ID; for the U.S region only. Return value will be hidden.
     * @param dateClosed {String} Date the agreement was terminated with the merchant
     * @param dateOpened {String} Date the merchant entered into agreement with the acquirer
     * @param merchantCategory {String} A classification code used in authorization, clearing, and other transactions or reports to identify the type of merchant.
     * @param merchantId {String} The identifier assigned to a merchant by an Acquirer. An Acquirer Id and Merchant Id combination must be unique.
     * @param name {String} The name of the Business which has been terminated.
     * @param phoneNumber {String} The Business or Merchant's phone number.
     * @param reasonCode {String} A two digit numeric code indication why a particular merchant was terminated.  01   Account Data Compromise, 02   Common Points of Purchase, 03   Laundering, 04   Excessive Chargebacks, 05   Excessive Fraud, 06   Reserved for Future Use, 07   Fraud Conviction, 08   MasterCard Questionable Merchant Audit Program, 09   Bankruptcy/Liquidation/Insolvency, 10   Violation of MasterCard Standards, 11   Merchant collusion, 12   PCI Data Security Standard, Noncompliance, 13   Illegal Transactions, 14   Identity Theft
     */
    constructor(cATFlag, countrySubdivisionTaxId, dateClosed, dateOpened, merchantCategory, merchantId, name, phoneNumber, reasonCode) { 
        
        AddMerchantMerchant.initialize(this, cATFlag, countrySubdivisionTaxId, dateClosed, dateOpened, merchantCategory, merchantId, name, phoneNumber, reasonCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cATFlag, countrySubdivisionTaxId, dateClosed, dateOpened, merchantCategory, merchantId, name, phoneNumber, reasonCode) { 
        obj['CATFlag'] = cATFlag;
        obj['CountrySubdivisionTaxId'] = countrySubdivisionTaxId;
        obj['DateClosed'] = dateClosed;
        obj['DateOpened'] = dateOpened;
        obj['MerchantCategory'] = merchantCategory;
        obj['MerchantId'] = merchantId;
        obj['Name'] = name;
        obj['PhoneNumber'] = phoneNumber;
        obj['ReasonCode'] = reasonCode;
    }

    /**
     * Constructs a <code>AddMerchantMerchant</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddMerchantMerchant} obj Optional instance to populate.
     * @return {module:model/AddMerchantMerchant} The populated <code>AddMerchantMerchant</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddMerchantMerchant();

            if (data.hasOwnProperty('Address')) {
                obj['Address'] = Address.constructFromObject(data['Address']);
            }
            if (data.hasOwnProperty('AltPhoneNumber')) {
                obj['AltPhoneNumber'] = ApiClient.convertToType(data['AltPhoneNumber'], 'String');
            }
            if (data.hasOwnProperty('CATFlag')) {
                obj['CATFlag'] = ApiClient.convertToType(data['CATFlag'], 'String');
            }
            if (data.hasOwnProperty('Comments')) {
                obj['Comments'] = ApiClient.convertToType(data['Comments'], 'String');
            }
            if (data.hasOwnProperty('CountrySubdivisionTaxId')) {
                obj['CountrySubdivisionTaxId'] = ApiClient.convertToType(data['CountrySubdivisionTaxId'], 'String');
            }
            if (data.hasOwnProperty('DateClosed')) {
                obj['DateClosed'] = ApiClient.convertToType(data['DateClosed'], 'String');
            }
            if (data.hasOwnProperty('DateOpened')) {
                obj['DateOpened'] = ApiClient.convertToType(data['DateOpened'], 'String');
            }
            if (data.hasOwnProperty('DoingBusinessAsName')) {
                obj['DoingBusinessAsName'] = ApiClient.convertToType(data['DoingBusinessAsName'], 'String');
            }
            if (data.hasOwnProperty('MerchantCategory')) {
                obj['MerchantCategory'] = ApiClient.convertToType(data['MerchantCategory'], 'String');
            }
            if (data.hasOwnProperty('MerchantId')) {
                obj['MerchantId'] = ApiClient.convertToType(data['MerchantId'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('NationalTaxId')) {
                obj['NationalTaxId'] = ApiClient.convertToType(data['NationalTaxId'], 'String');
            }
            if (data.hasOwnProperty('PhoneNumber')) {
                obj['PhoneNumber'] = ApiClient.convertToType(data['PhoneNumber'], 'String');
            }
            if (data.hasOwnProperty('Principal')) {
                obj['Principal'] = Principal.constructFromObject(data['Principal']);
            }
            if (data.hasOwnProperty('ReasonCode')) {
                obj['ReasonCode'] = ApiClient.convertToType(data['ReasonCode'], 'String');
            }
            if (data.hasOwnProperty('ServiceProvDBA')) {
                obj['ServiceProvDBA'] = ApiClient.convertToType(data['ServiceProvDBA'], 'String');
            }
            if (data.hasOwnProperty('ServiceProvLegal')) {
                obj['ServiceProvLegal'] = ApiClient.convertToType(data['ServiceProvLegal'], 'String');
            }
            if (data.hasOwnProperty('Url')) {
                obj['Url'] = ApiClient.convertToType(data['Url'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddMerchantMerchant</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddMerchantMerchant</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AddMerchantMerchant.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Address`
        if (data['Address']) { // data not null
          Address.validateJSON(data['Address']);
        }
        // ensure the json data is a string
        if (data['AltPhoneNumber'] && !(typeof data['AltPhoneNumber'] === 'string' || data['AltPhoneNumber'] instanceof String)) {
            throw new Error("Expected the field `AltPhoneNumber` to be a primitive type in the JSON string but got " + data['AltPhoneNumber']);
        }
        // ensure the json data is a string
        if (data['CATFlag'] && !(typeof data['CATFlag'] === 'string' || data['CATFlag'] instanceof String)) {
            throw new Error("Expected the field `CATFlag` to be a primitive type in the JSON string but got " + data['CATFlag']);
        }
        // ensure the json data is a string
        if (data['Comments'] && !(typeof data['Comments'] === 'string' || data['Comments'] instanceof String)) {
            throw new Error("Expected the field `Comments` to be a primitive type in the JSON string but got " + data['Comments']);
        }
        // ensure the json data is a string
        if (data['CountrySubdivisionTaxId'] && !(typeof data['CountrySubdivisionTaxId'] === 'string' || data['CountrySubdivisionTaxId'] instanceof String)) {
            throw new Error("Expected the field `CountrySubdivisionTaxId` to be a primitive type in the JSON string but got " + data['CountrySubdivisionTaxId']);
        }
        // ensure the json data is a string
        if (data['DateClosed'] && !(typeof data['DateClosed'] === 'string' || data['DateClosed'] instanceof String)) {
            throw new Error("Expected the field `DateClosed` to be a primitive type in the JSON string but got " + data['DateClosed']);
        }
        // ensure the json data is a string
        if (data['DateOpened'] && !(typeof data['DateOpened'] === 'string' || data['DateOpened'] instanceof String)) {
            throw new Error("Expected the field `DateOpened` to be a primitive type in the JSON string but got " + data['DateOpened']);
        }
        // ensure the json data is a string
        if (data['DoingBusinessAsName'] && !(typeof data['DoingBusinessAsName'] === 'string' || data['DoingBusinessAsName'] instanceof String)) {
            throw new Error("Expected the field `DoingBusinessAsName` to be a primitive type in the JSON string but got " + data['DoingBusinessAsName']);
        }
        // ensure the json data is a string
        if (data['MerchantCategory'] && !(typeof data['MerchantCategory'] === 'string' || data['MerchantCategory'] instanceof String)) {
            throw new Error("Expected the field `MerchantCategory` to be a primitive type in the JSON string but got " + data['MerchantCategory']);
        }
        // ensure the json data is a string
        if (data['MerchantId'] && !(typeof data['MerchantId'] === 'string' || data['MerchantId'] instanceof String)) {
            throw new Error("Expected the field `MerchantId` to be a primitive type in the JSON string but got " + data['MerchantId']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['NationalTaxId'] && !(typeof data['NationalTaxId'] === 'string' || data['NationalTaxId'] instanceof String)) {
            throw new Error("Expected the field `NationalTaxId` to be a primitive type in the JSON string but got " + data['NationalTaxId']);
        }
        // ensure the json data is a string
        if (data['PhoneNumber'] && !(typeof data['PhoneNumber'] === 'string' || data['PhoneNumber'] instanceof String)) {
            throw new Error("Expected the field `PhoneNumber` to be a primitive type in the JSON string but got " + data['PhoneNumber']);
        }
        // validate the optional field `Principal`
        if (data['Principal']) { // data not null
          Principal.validateJSON(data['Principal']);
        }
        // ensure the json data is a string
        if (data['ReasonCode'] && !(typeof data['ReasonCode'] === 'string' || data['ReasonCode'] instanceof String)) {
            throw new Error("Expected the field `ReasonCode` to be a primitive type in the JSON string but got " + data['ReasonCode']);
        }
        // ensure the json data is a string
        if (data['ServiceProvDBA'] && !(typeof data['ServiceProvDBA'] === 'string' || data['ServiceProvDBA'] instanceof String)) {
            throw new Error("Expected the field `ServiceProvDBA` to be a primitive type in the JSON string but got " + data['ServiceProvDBA']);
        }
        // ensure the json data is a string
        if (data['ServiceProvLegal'] && !(typeof data['ServiceProvLegal'] === 'string' || data['ServiceProvLegal'] instanceof String)) {
            throw new Error("Expected the field `ServiceProvLegal` to be a primitive type in the JSON string but got " + data['ServiceProvLegal']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Url'])) {
            throw new Error("Expected the field `Url` to be an array in the JSON data but got " + data['Url']);
        }

        return true;
    }


}

AddMerchantMerchant.RequiredProperties = ["CATFlag", "CountrySubdivisionTaxId", "DateClosed", "DateOpened", "MerchantCategory", "MerchantId", "Name", "PhoneNumber", "ReasonCode"];

/**
 * @member {module:model/Address} Address
 */
AddMerchantMerchant.prototype['Address'] = undefined;

/**
 * The Business or Merchant's alternate phone number.
 * @member {String} AltPhoneNumber
 */
AddMerchantMerchant.prototype['AltPhoneNumber'] = undefined;

/**
 * Cardholder-activated terminal indicator.
 * @member {String} CATFlag
 */
AddMerchantMerchant.prototype['CATFlag'] = undefined;

/**
 * Brief comments on why Merchant is added
 * @member {String} Comments
 */
AddMerchantMerchant.prototype['Comments'] = undefined;

/**
 * The Merchant's state tax ID; for the U.S region only. Return value will be hidden.
 * @member {String} CountrySubdivisionTaxId
 */
AddMerchantMerchant.prototype['CountrySubdivisionTaxId'] = undefined;

/**
 * Date the agreement was terminated with the merchant
 * @member {String} DateClosed
 */
AddMerchantMerchant.prototype['DateClosed'] = undefined;

/**
 * Date the merchant entered into agreement with the acquirer
 * @member {String} DateOpened
 */
AddMerchantMerchant.prototype['DateOpened'] = undefined;

/**
 * The name used by a merchant that could be different from the legal name of the business. Such as Bait R Us instead of the legal name, The Bait Shop
 * @member {String} DoingBusinessAsName
 */
AddMerchantMerchant.prototype['DoingBusinessAsName'] = undefined;

/**
 * A classification code used in authorization, clearing, and other transactions or reports to identify the type of merchant.
 * @member {String} MerchantCategory
 */
AddMerchantMerchant.prototype['MerchantCategory'] = undefined;

/**
 * The identifier assigned to a merchant by an Acquirer. An Acquirer Id and Merchant Id combination must be unique.
 * @member {String} MerchantId
 */
AddMerchantMerchant.prototype['MerchantId'] = undefined;

/**
 * The name of the Business which has been terminated.
 * @member {String} Name
 */
AddMerchantMerchant.prototype['Name'] = undefined;

/**
 * The National tax ID or business registration number. Return value will be hidden.
 * @member {String} NationalTaxId
 */
AddMerchantMerchant.prototype['NationalTaxId'] = undefined;

/**
 * The Business or Merchant's phone number.
 * @member {String} PhoneNumber
 */
AddMerchantMerchant.prototype['PhoneNumber'] = undefined;

/**
 * @member {module:model/Principal} Principal
 */
AddMerchantMerchant.prototype['Principal'] = undefined;

/**
 * A two digit numeric code indication why a particular merchant was terminated.  01   Account Data Compromise, 02   Common Points of Purchase, 03   Laundering, 04   Excessive Chargebacks, 05   Excessive Fraud, 06   Reserved for Future Use, 07   Fraud Conviction, 08   MasterCard Questionable Merchant Audit Program, 09   Bankruptcy/Liquidation/Insolvency, 10   Violation of MasterCard Standards, 11   Merchant collusion, 12   PCI Data Security Standard, Noncompliance, 13   Illegal Transactions, 14   Identity Theft
 * @member {String} ReasonCode
 */
AddMerchantMerchant.prototype['ReasonCode'] = undefined;

/**
 * The name of the service provider associated with the merchant listed in the MATCH.
 * @member {String} ServiceProvDBA
 */
AddMerchantMerchant.prototype['ServiceProvDBA'] = undefined;

/**
 * The name of the service provider associated with the merchant listed in the MATCH.
 * @member {String} ServiceProvLegal
 */
AddMerchantMerchant.prototype['ServiceProvLegal'] = undefined;

/**
 * @member {Array.<String>} Url
 */
AddMerchantMerchant.prototype['Url'] = undefined;






export default AddMerchantMerchant;

