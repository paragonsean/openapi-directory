/**
 * MATCH API
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RetroResponse model module.
 * @module model/RetroResponse
 * @version 1.0.0
 */
class RetroResponse {
    /**
     * Constructs a new <code>RetroResponse</code>.
     * @alias module:model/RetroResponse
     */
    constructor() { 
        
        RetroResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RetroResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RetroResponse} obj Optional instance to populate.
     * @return {module:model/RetroResponse} The populated <code>RetroResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RetroResponse();

            if (data.hasOwnProperty('BusinessName')) {
                obj['BusinessName'] = ApiClient.convertToType(data['BusinessName'], 'String');
            }
            if (data.hasOwnProperty('City')) {
                obj['City'] = ApiClient.convertToType(data['City'], 'String');
            }
            if (data.hasOwnProperty('Country')) {
                obj['Country'] = ApiClient.convertToType(data['Country'], 'String');
            }
            if (data.hasOwnProperty('Date')) {
                obj['Date'] = ApiClient.convertToType(data['Date'], 'String');
            }
            if (data.hasOwnProperty('RefNum')) {
                obj['RefNum'] = ApiClient.convertToType(data['RefNum'], 'String');
            }
            if (data.hasOwnProperty('State')) {
                obj['State'] = ApiClient.convertToType(data['State'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RetroResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RetroResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['BusinessName'] && !(typeof data['BusinessName'] === 'string' || data['BusinessName'] instanceof String)) {
            throw new Error("Expected the field `BusinessName` to be a primitive type in the JSON string but got " + data['BusinessName']);
        }
        // ensure the json data is a string
        if (data['City'] && !(typeof data['City'] === 'string' || data['City'] instanceof String)) {
            throw new Error("Expected the field `City` to be a primitive type in the JSON string but got " + data['City']);
        }
        // ensure the json data is a string
        if (data['Country'] && !(typeof data['Country'] === 'string' || data['Country'] instanceof String)) {
            throw new Error("Expected the field `Country` to be a primitive type in the JSON string but got " + data['Country']);
        }
        // ensure the json data is a string
        if (data['Date'] && !(typeof data['Date'] === 'string' || data['Date'] instanceof String)) {
            throw new Error("Expected the field `Date` to be a primitive type in the JSON string but got " + data['Date']);
        }
        // ensure the json data is a string
        if (data['RefNum'] && !(typeof data['RefNum'] === 'string' || data['RefNum'] instanceof String)) {
            throw new Error("Expected the field `RefNum` to be a primitive type in the JSON string but got " + data['RefNum']);
        }
        // ensure the json data is a string
        if (data['State'] && !(typeof data['State'] === 'string' || data['State'] instanceof String)) {
            throw new Error("Expected the field `State` to be a primitive type in the JSON string but got " + data['State']);
        }

        return true;
    }


}



/**
 * Name of Merchant or Business corresponds to retro inquiry.
 * @member {String} BusinessName
 */
RetroResponse.prototype['BusinessName'] = undefined;

/**
 * The name of the city for the merchant location corresponds to retro inquiry.
 * @member {String} City
 */
RetroResponse.prototype['City'] = undefined;

/**
 * The three digit country code corresponds to retro inquiry. Valid values are Three digit alpha country codes as defined in ISO 3166-1.
 * @member {String} Country
 */
RetroResponse.prototype['Country'] = undefined;

/**
 * Date on which the retro inquiry was made. This will be in MM/DD/YYYY format.
 * @member {String} Date
 */
RetroResponse.prototype['Date'] = undefined;

/**
 * The reference number of retroactive inquiry. Using this reference number, the details can be obtained.
 * @member {String} RefNum
 */
RetroResponse.prototype['RefNum'] = undefined;

/**
 * The abbreviated state for a merchant location corresponds to retro inquiry.
 * @member {String} State
 */
RetroResponse.prototype['State'] = undefined;






export default RetroResponse;

