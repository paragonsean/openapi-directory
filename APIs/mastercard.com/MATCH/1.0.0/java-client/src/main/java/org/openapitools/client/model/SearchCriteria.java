/*
 * MATCH API
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchCriteria
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:23.990905-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchCriteria {
  public static final String SERIALIZED_NAME_COUNTRY = "Country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private List<String> country = new ArrayList<>();

  public static final String SERIALIZED_NAME_MIN_POSSIBLE_MATCH_COUNT = "MinPossibleMatchCount";
  @SerializedName(SERIALIZED_NAME_MIN_POSSIBLE_MATCH_COUNT)
  private String minPossibleMatchCount;

  public static final String SERIALIZED_NAME_REGION = "Region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private List<String> region = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEARCH_ALL = "SearchAll";
  @SerializedName(SERIALIZED_NAME_SEARCH_ALL)
  private String searchAll;

  public SearchCriteria() {
  }

  public SearchCriteria country(List<String> country) {
    this.country = country;
    return this;
  }

  public SearchCriteria addCountryItem(String countryItem) {
    if (this.country == null) {
      this.country = new ArrayList<>();
    }
    this.country.add(countryItem);
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public List<String> getCountry() {
    return country;
  }

  public void setCountry(List<String> country) {
    this.country = country;
  }


  public SearchCriteria minPossibleMatchCount(String minPossibleMatchCount) {
    this.minPossibleMatchCount = minPossibleMatchCount;
    return this;
  }

  /**
   * Determines how many minimum matches present for a merchant or inquiry to appear in the results.
   * @return minPossibleMatchCount
   */
  @javax.annotation.Nullable
  public String getMinPossibleMatchCount() {
    return minPossibleMatchCount;
  }

  public void setMinPossibleMatchCount(String minPossibleMatchCount) {
    this.minPossibleMatchCount = minPossibleMatchCount;
  }


  public SearchCriteria region(List<String> region) {
    this.region = region;
    return this;
  }

  public SearchCriteria addRegionItem(String regionItem) {
    if (this.region == null) {
      this.region = new ArrayList<>();
    }
    this.region.add(regionItem);
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public List<String> getRegion() {
    return region;
  }

  public void setRegion(List<String> region) {
    this.region = region;
  }


  public SearchCriteria searchAll(String searchAll) {
    this.searchAll = searchAll;
    return this;
  }

  /**
   * Determines if the inquiry is worldwide or not.
   * @return searchAll
   */
  @javax.annotation.Nonnull
  public String getSearchAll() {
    return searchAll;
  }

  public void setSearchAll(String searchAll) {
    this.searchAll = searchAll;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchCriteria searchCriteria = (SearchCriteria) o;
    return Objects.equals(this.country, searchCriteria.country) &&
        Objects.equals(this.minPossibleMatchCount, searchCriteria.minPossibleMatchCount) &&
        Objects.equals(this.region, searchCriteria.region) &&
        Objects.equals(this.searchAll, searchCriteria.searchAll);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, minPossibleMatchCount, region, searchAll);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchCriteria {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    minPossibleMatchCount: ").append(toIndentedString(minPossibleMatchCount)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    searchAll: ").append(toIndentedString(searchAll)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Country");
    openapiFields.add("MinPossibleMatchCount");
    openapiFields.add("Region");
    openapiFields.add("SearchAll");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SearchAll");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchCriteria
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchCriteria.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchCriteria is not found in the empty JSON string", SearchCriteria.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchCriteria.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchCriteria` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchCriteria.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("Country") != null && !jsonObj.get("Country").isJsonNull() && !jsonObj.get("Country").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Country` to be an array in the JSON string but got `%s`", jsonObj.get("Country").toString()));
      }
      if ((jsonObj.get("MinPossibleMatchCount") != null && !jsonObj.get("MinPossibleMatchCount").isJsonNull()) && !jsonObj.get("MinPossibleMatchCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MinPossibleMatchCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MinPossibleMatchCount").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Region") != null && !jsonObj.get("Region").isJsonNull() && !jsonObj.get("Region").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Region` to be an array in the JSON string but got `%s`", jsonObj.get("Region").toString()));
      }
      if (!jsonObj.get("SearchAll").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SearchAll` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SearchAll").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchCriteria.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchCriteria' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchCriteria> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchCriteria.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchCriteria>() {
           @Override
           public void write(JsonWriter out, SearchCriteria value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchCriteria read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchCriteria given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchCriteria
   * @throws IOException if the JSON string is invalid with respect to SearchCriteria
   */
  public static SearchCriteria fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchCriteria.class);
  }

  /**
   * Convert an instance of SearchCriteria to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

