/*
 * MATCH API
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.MerchantMatch;
import org.openapitools.client.model.Principal;
import org.openapitools.client.model.UrlGroup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InquiredMerchantMerchant
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:23.990905-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InquiredMerchantMerchant {
  public static final String SERIALIZED_NAME_ADDED_BY_ACQUIRER_I_D = "AddedByAcquirerID";
  @SerializedName(SERIALIZED_NAME_ADDED_BY_ACQUIRER_I_D)
  private String addedByAcquirerID;

  public static final String SERIALIZED_NAME_ADDED_ON_DATE = "AddedOnDate";
  @SerializedName(SERIALIZED_NAME_ADDED_ON_DATE)
  private String addedOnDate;

  public static final String SERIALIZED_NAME_ADDRESS = "Address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_ALT_PHONE_NUMBER = "AltPhoneNumber";
  @SerializedName(SERIALIZED_NAME_ALT_PHONE_NUMBER)
  private String altPhoneNumber;

  public static final String SERIALIZED_NAME_COUNTRY_SUBDIVISION_TAX_ID = "CountrySubdivisionTaxId";
  @SerializedName(SERIALIZED_NAME_COUNTRY_SUBDIVISION_TAX_ID)
  private String countrySubdivisionTaxId;

  public static final String SERIALIZED_NAME_DOING_BUSINESS_AS_NAME = "DoingBusinessAsName";
  @SerializedName(SERIALIZED_NAME_DOING_BUSINESS_AS_NAME)
  private String doingBusinessAsName;

  public static final String SERIALIZED_NAME_MERCHANT_MATCH = "MerchantMatch";
  @SerializedName(SERIALIZED_NAME_MERCHANT_MATCH)
  private MerchantMatch merchantMatch;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NATIONAL_TAX_ID = "NationalTaxId";
  @SerializedName(SERIALIZED_NAME_NATIONAL_TAX_ID)
  private String nationalTaxId;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "PhoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_PRINCIPAL = "Principal";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL)
  private Principal principal;

  public static final String SERIALIZED_NAME_SERVICE_PROV_D_B_A = "ServiceProvDBA";
  @SerializedName(SERIALIZED_NAME_SERVICE_PROV_D_B_A)
  private String serviceProvDBA;

  public static final String SERIALIZED_NAME_SERVICE_PROV_LEGAL = "ServiceProvLegal";
  @SerializedName(SERIALIZED_NAME_SERVICE_PROV_LEGAL)
  private String serviceProvLegal;

  public static final String SERIALIZED_NAME_TERMINATION_REASON_CODE = "TerminationReasonCode";
  @SerializedName(SERIALIZED_NAME_TERMINATION_REASON_CODE)
  private String terminationReasonCode;

  public static final String SERIALIZED_NAME_URL_GROUP = "UrlGroup";
  @SerializedName(SERIALIZED_NAME_URL_GROUP)
  private UrlGroup urlGroup;

  public InquiredMerchantMerchant() {
  }

  public InquiredMerchantMerchant addedByAcquirerID(String addedByAcquirerID) {
    this.addedByAcquirerID = addedByAcquirerID;
    return this;
  }

  /**
   * The Member ICA that has added the merchant to the MATCH system
   * @return addedByAcquirerID
   */
  @javax.annotation.Nullable
  public String getAddedByAcquirerID() {
    return addedByAcquirerID;
  }

  public void setAddedByAcquirerID(String addedByAcquirerID) {
    this.addedByAcquirerID = addedByAcquirerID;
  }


  public InquiredMerchantMerchant addedOnDate(String addedOnDate) {
    this.addedOnDate = addedOnDate;
    return this;
  }

  /**
   * The date on which the merchant was added to the MATCH system. Format MM/DD/YYYY
   * @return addedOnDate
   */
  @javax.annotation.Nullable
  public String getAddedOnDate() {
    return addedOnDate;
  }

  public void setAddedOnDate(String addedOnDate) {
    this.addedOnDate = addedOnDate;
  }


  public InquiredMerchantMerchant address(Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public Address getAddress() {
    return address;
  }

  public void setAddress(Address address) {
    this.address = address;
  }


  public InquiredMerchantMerchant altPhoneNumber(String altPhoneNumber) {
    this.altPhoneNumber = altPhoneNumber;
    return this;
  }

  /**
   * The Business or Merchant&#39;s alternate phone number.
   * @return altPhoneNumber
   */
  @javax.annotation.Nullable
  public String getAltPhoneNumber() {
    return altPhoneNumber;
  }

  public void setAltPhoneNumber(String altPhoneNumber) {
    this.altPhoneNumber = altPhoneNumber;
  }


  public InquiredMerchantMerchant countrySubdivisionTaxId(String countrySubdivisionTaxId) {
    this.countrySubdivisionTaxId = countrySubdivisionTaxId;
    return this;
  }

  /**
   * The Merchant&#39;s state tax ID; for the U.S region only. Return value will be hidden.
   * @return countrySubdivisionTaxId
   */
  @javax.annotation.Nullable
  public String getCountrySubdivisionTaxId() {
    return countrySubdivisionTaxId;
  }

  public void setCountrySubdivisionTaxId(String countrySubdivisionTaxId) {
    this.countrySubdivisionTaxId = countrySubdivisionTaxId;
  }


  public InquiredMerchantMerchant doingBusinessAsName(String doingBusinessAsName) {
    this.doingBusinessAsName = doingBusinessAsName;
    return this;
  }

  /**
   * The name used by a merchant that could be different from the legal name of the business. Such as Bait R Us instead of the legal name, The Bait Shop
   * @return doingBusinessAsName
   */
  @javax.annotation.Nullable
  public String getDoingBusinessAsName() {
    return doingBusinessAsName;
  }

  public void setDoingBusinessAsName(String doingBusinessAsName) {
    this.doingBusinessAsName = doingBusinessAsName;
  }


  public InquiredMerchantMerchant merchantMatch(MerchantMatch merchantMatch) {
    this.merchantMatch = merchantMatch;
    return this;
  }

  /**
   * Get merchantMatch
   * @return merchantMatch
   */
  @javax.annotation.Nullable
  public MerchantMatch getMerchantMatch() {
    return merchantMatch;
  }

  public void setMerchantMatch(MerchantMatch merchantMatch) {
    this.merchantMatch = merchantMatch;
  }


  public InquiredMerchantMerchant name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the Business which has been terminated.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public InquiredMerchantMerchant nationalTaxId(String nationalTaxId) {
    this.nationalTaxId = nationalTaxId;
    return this;
  }

  /**
   * The National tax ID or business registration number. Return value will be hidden.
   * @return nationalTaxId
   */
  @javax.annotation.Nullable
  public String getNationalTaxId() {
    return nationalTaxId;
  }

  public void setNationalTaxId(String nationalTaxId) {
    this.nationalTaxId = nationalTaxId;
  }


  public InquiredMerchantMerchant phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * The Business or Merchant&#39;s phone number.
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public InquiredMerchantMerchant principal(Principal principal) {
    this.principal = principal;
    return this;
  }

  /**
   * Get principal
   * @return principal
   */
  @javax.annotation.Nullable
  public Principal getPrincipal() {
    return principal;
  }

  public void setPrincipal(Principal principal) {
    this.principal = principal;
  }


  public InquiredMerchantMerchant serviceProvDBA(String serviceProvDBA) {
    this.serviceProvDBA = serviceProvDBA;
    return this;
  }

  /**
   * The name of the service provider associated with the merchant listed in the MATCH.
   * @return serviceProvDBA
   */
  @javax.annotation.Nullable
  public String getServiceProvDBA() {
    return serviceProvDBA;
  }

  public void setServiceProvDBA(String serviceProvDBA) {
    this.serviceProvDBA = serviceProvDBA;
  }


  public InquiredMerchantMerchant serviceProvLegal(String serviceProvLegal) {
    this.serviceProvLegal = serviceProvLegal;
    return this;
  }

  /**
   * The name of the service provider associated with the merchant listed in the MATCH.
   * @return serviceProvLegal
   */
  @javax.annotation.Nullable
  public String getServiceProvLegal() {
    return serviceProvLegal;
  }

  public void setServiceProvLegal(String serviceProvLegal) {
    this.serviceProvLegal = serviceProvLegal;
  }


  public InquiredMerchantMerchant terminationReasonCode(String terminationReasonCode) {
    this.terminationReasonCode = terminationReasonCode;
    return this;
  }

  /**
   * A two digit numeric code indication why a particular merchant was terminated.  01   Account Data Compromise, 02   Common Points of Purchase, 03   Laundering, 04   Excessive Chargebacks, 05   Excessive Fraud, 06   Reserved for Future Use, 07   Fraud Conviction, 08   MasterCard Questionable Merchant Audit Program, 09   Bankruptcy/Liquidation/Insolvency, 10   Violation of MasterCard Standards, 11   Merchant collusion, 12   PCI Data Security Standard, Noncompliance, 13   Illegal Transactions, 14   Identity Theft
   * @return terminationReasonCode
   */
  @javax.annotation.Nullable
  public String getTerminationReasonCode() {
    return terminationReasonCode;
  }

  public void setTerminationReasonCode(String terminationReasonCode) {
    this.terminationReasonCode = terminationReasonCode;
  }


  public InquiredMerchantMerchant urlGroup(UrlGroup urlGroup) {
    this.urlGroup = urlGroup;
    return this;
  }

  /**
   * Get urlGroup
   * @return urlGroup
   */
  @javax.annotation.Nullable
  public UrlGroup getUrlGroup() {
    return urlGroup;
  }

  public void setUrlGroup(UrlGroup urlGroup) {
    this.urlGroup = urlGroup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InquiredMerchantMerchant inquiredMerchantMerchant = (InquiredMerchantMerchant) o;
    return Objects.equals(this.addedByAcquirerID, inquiredMerchantMerchant.addedByAcquirerID) &&
        Objects.equals(this.addedOnDate, inquiredMerchantMerchant.addedOnDate) &&
        Objects.equals(this.address, inquiredMerchantMerchant.address) &&
        Objects.equals(this.altPhoneNumber, inquiredMerchantMerchant.altPhoneNumber) &&
        Objects.equals(this.countrySubdivisionTaxId, inquiredMerchantMerchant.countrySubdivisionTaxId) &&
        Objects.equals(this.doingBusinessAsName, inquiredMerchantMerchant.doingBusinessAsName) &&
        Objects.equals(this.merchantMatch, inquiredMerchantMerchant.merchantMatch) &&
        Objects.equals(this.name, inquiredMerchantMerchant.name) &&
        Objects.equals(this.nationalTaxId, inquiredMerchantMerchant.nationalTaxId) &&
        Objects.equals(this.phoneNumber, inquiredMerchantMerchant.phoneNumber) &&
        Objects.equals(this.principal, inquiredMerchantMerchant.principal) &&
        Objects.equals(this.serviceProvDBA, inquiredMerchantMerchant.serviceProvDBA) &&
        Objects.equals(this.serviceProvLegal, inquiredMerchantMerchant.serviceProvLegal) &&
        Objects.equals(this.terminationReasonCode, inquiredMerchantMerchant.terminationReasonCode) &&
        Objects.equals(this.urlGroup, inquiredMerchantMerchant.urlGroup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addedByAcquirerID, addedOnDate, address, altPhoneNumber, countrySubdivisionTaxId, doingBusinessAsName, merchantMatch, name, nationalTaxId, phoneNumber, principal, serviceProvDBA, serviceProvLegal, terminationReasonCode, urlGroup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InquiredMerchantMerchant {\n");
    sb.append("    addedByAcquirerID: ").append(toIndentedString(addedByAcquirerID)).append("\n");
    sb.append("    addedOnDate: ").append(toIndentedString(addedOnDate)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    altPhoneNumber: ").append(toIndentedString(altPhoneNumber)).append("\n");
    sb.append("    countrySubdivisionTaxId: ").append(toIndentedString(countrySubdivisionTaxId)).append("\n");
    sb.append("    doingBusinessAsName: ").append(toIndentedString(doingBusinessAsName)).append("\n");
    sb.append("    merchantMatch: ").append(toIndentedString(merchantMatch)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nationalTaxId: ").append(toIndentedString(nationalTaxId)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    principal: ").append(toIndentedString(principal)).append("\n");
    sb.append("    serviceProvDBA: ").append(toIndentedString(serviceProvDBA)).append("\n");
    sb.append("    serviceProvLegal: ").append(toIndentedString(serviceProvLegal)).append("\n");
    sb.append("    terminationReasonCode: ").append(toIndentedString(terminationReasonCode)).append("\n");
    sb.append("    urlGroup: ").append(toIndentedString(urlGroup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AddedByAcquirerID");
    openapiFields.add("AddedOnDate");
    openapiFields.add("Address");
    openapiFields.add("AltPhoneNumber");
    openapiFields.add("CountrySubdivisionTaxId");
    openapiFields.add("DoingBusinessAsName");
    openapiFields.add("MerchantMatch");
    openapiFields.add("Name");
    openapiFields.add("NationalTaxId");
    openapiFields.add("PhoneNumber");
    openapiFields.add("Principal");
    openapiFields.add("ServiceProvDBA");
    openapiFields.add("ServiceProvLegal");
    openapiFields.add("TerminationReasonCode");
    openapiFields.add("UrlGroup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InquiredMerchantMerchant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InquiredMerchantMerchant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InquiredMerchantMerchant is not found in the empty JSON string", InquiredMerchantMerchant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InquiredMerchantMerchant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InquiredMerchantMerchant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AddedByAcquirerID") != null && !jsonObj.get("AddedByAcquirerID").isJsonNull()) && !jsonObj.get("AddedByAcquirerID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AddedByAcquirerID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AddedByAcquirerID").toString()));
      }
      if ((jsonObj.get("AddedOnDate") != null && !jsonObj.get("AddedOnDate").isJsonNull()) && !jsonObj.get("AddedOnDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AddedOnDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AddedOnDate").toString()));
      }
      // validate the optional field `Address`
      if (jsonObj.get("Address") != null && !jsonObj.get("Address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("Address"));
      }
      if ((jsonObj.get("AltPhoneNumber") != null && !jsonObj.get("AltPhoneNumber").isJsonNull()) && !jsonObj.get("AltPhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AltPhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AltPhoneNumber").toString()));
      }
      if ((jsonObj.get("CountrySubdivisionTaxId") != null && !jsonObj.get("CountrySubdivisionTaxId").isJsonNull()) && !jsonObj.get("CountrySubdivisionTaxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CountrySubdivisionTaxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CountrySubdivisionTaxId").toString()));
      }
      if ((jsonObj.get("DoingBusinessAsName") != null && !jsonObj.get("DoingBusinessAsName").isJsonNull()) && !jsonObj.get("DoingBusinessAsName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DoingBusinessAsName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DoingBusinessAsName").toString()));
      }
      // validate the optional field `MerchantMatch`
      if (jsonObj.get("MerchantMatch") != null && !jsonObj.get("MerchantMatch").isJsonNull()) {
        MerchantMatch.validateJsonElement(jsonObj.get("MerchantMatch"));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("NationalTaxId") != null && !jsonObj.get("NationalTaxId").isJsonNull()) && !jsonObj.get("NationalTaxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NationalTaxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NationalTaxId").toString()));
      }
      if ((jsonObj.get("PhoneNumber") != null && !jsonObj.get("PhoneNumber").isJsonNull()) && !jsonObj.get("PhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PhoneNumber").toString()));
      }
      // validate the optional field `Principal`
      if (jsonObj.get("Principal") != null && !jsonObj.get("Principal").isJsonNull()) {
        Principal.validateJsonElement(jsonObj.get("Principal"));
      }
      if ((jsonObj.get("ServiceProvDBA") != null && !jsonObj.get("ServiceProvDBA").isJsonNull()) && !jsonObj.get("ServiceProvDBA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceProvDBA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceProvDBA").toString()));
      }
      if ((jsonObj.get("ServiceProvLegal") != null && !jsonObj.get("ServiceProvLegal").isJsonNull()) && !jsonObj.get("ServiceProvLegal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceProvLegal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceProvLegal").toString()));
      }
      if ((jsonObj.get("TerminationReasonCode") != null && !jsonObj.get("TerminationReasonCode").isJsonNull()) && !jsonObj.get("TerminationReasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TerminationReasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TerminationReasonCode").toString()));
      }
      // validate the optional field `UrlGroup`
      if (jsonObj.get("UrlGroup") != null && !jsonObj.get("UrlGroup").isJsonNull()) {
        UrlGroup.validateJsonElement(jsonObj.get("UrlGroup"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InquiredMerchantMerchant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InquiredMerchantMerchant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InquiredMerchantMerchant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InquiredMerchantMerchant.class));

       return (TypeAdapter<T>) new TypeAdapter<InquiredMerchantMerchant>() {
           @Override
           public void write(JsonWriter out, InquiredMerchantMerchant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InquiredMerchantMerchant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InquiredMerchantMerchant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InquiredMerchantMerchant
   * @throws IOException if the JSON string is invalid with respect to InquiredMerchantMerchant
   */
  public static InquiredMerchantMerchant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InquiredMerchantMerchant.class);
  }

  /**
   * Convert an instance of InquiredMerchantMerchant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

