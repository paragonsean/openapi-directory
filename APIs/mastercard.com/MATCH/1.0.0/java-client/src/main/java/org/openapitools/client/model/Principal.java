/*
 * MATCH API
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.DriversLicense;
import org.openapitools.client.model.SearchCriteria;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Principal
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:23.990905-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Principal {
  public static final String SERIALIZED_NAME_ADDRESS = "Address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_ALT_PHONE_NUMBER = "AltPhoneNumber";
  @SerializedName(SERIALIZED_NAME_ALT_PHONE_NUMBER)
  private String altPhoneNumber;

  public static final String SERIALIZED_NAME_DRIVERS_LICENSE = "DriversLicense";
  @SerializedName(SERIALIZED_NAME_DRIVERS_LICENSE)
  private DriversLicense driversLicense;

  public static final String SERIALIZED_NAME_FIRST_NAME = "FirstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "LastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_MIDDLE_INITIAL = "MiddleInitial";
  @SerializedName(SERIALIZED_NAME_MIDDLE_INITIAL)
  private String middleInitial;

  public static final String SERIALIZED_NAME_NATIONAL_ID = "NationalId";
  @SerializedName(SERIALIZED_NAME_NATIONAL_ID)
  private String nationalId;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "PhoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_SEARCH_CRITERIA = "SearchCriteria";
  @SerializedName(SERIALIZED_NAME_SEARCH_CRITERIA)
  private SearchCriteria searchCriteria;

  public Principal() {
  }

  public Principal address(Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public Address getAddress() {
    return address;
  }

  public void setAddress(Address address) {
    this.address = address;
  }


  public Principal altPhoneNumber(String altPhoneNumber) {
    this.altPhoneNumber = altPhoneNumber;
    return this;
  }

  /**
   * The Business or Merchant&#39;s alternate phone number, including the area code. Within the USA, phone numbers have a length of 10, and for out outside the US, a max length of 25. Within the U.S. phone numbers can not start with 0 or 1. If the number is outside the U.S. region; do not include the country code. The number must be digits only, with no format characters such as parenthesis or dashes.
   * @return altPhoneNumber
   */
  @javax.annotation.Nullable
  public String getAltPhoneNumber() {
    return altPhoneNumber;
  }

  public void setAltPhoneNumber(String altPhoneNumber) {
    this.altPhoneNumber = altPhoneNumber;
  }


  public Principal driversLicense(DriversLicense driversLicense) {
    this.driversLicense = driversLicense;
    return this;
  }

  /**
   * Get driversLicense
   * @return driversLicense
   */
  @javax.annotation.Nullable
  public DriversLicense getDriversLicense() {
    return driversLicense;
  }

  public void setDriversLicense(DriversLicense driversLicense) {
    this.driversLicense = driversLicense;
  }


  public Principal firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * The first name of the principal owner of the business.
   * @return firstName
   */
  @javax.annotation.Nonnull
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public Principal lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * The last name of the principal owner of the business.
   * @return lastName
   */
  @javax.annotation.Nonnull
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public Principal middleInitial(String middleInitial) {
    this.middleInitial = middleInitial;
    return this;
  }

  /**
   * THe middle initial of the name of the principal owner of the business.
   * @return middleInitial
   */
  @javax.annotation.Nullable
  public String getMiddleInitial() {
    return middleInitial;
  }

  public void setMiddleInitial(String middleInitial) {
    this.middleInitial = middleInitial;
  }


  public Principal nationalId(String nationalId) {
    this.nationalId = nationalId;
    return this;
  }

  /**
   * The Social Security number of a principal owner. If the principal owner is not from the U.S. Region, then use their national ID card number.
   * @return nationalId
   */
  @javax.annotation.Nullable
  public String getNationalId() {
    return nationalId;
  }

  public void setNationalId(String nationalId) {
    this.nationalId = nationalId;
  }


  public Principal phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * The Business or Merchant&#39;s phone number, including the area code. Within the USA, phone numbers have a length of 10, and for outside the US, it can be any length with a maximum of 12 digits. Within the U.S. phone numbers can not start with 0 or 1. If the number is outside the U.S. region; do not include the country code. The phone number must be digits only, with no format characters such as parenthesis or dashes.
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public Principal searchCriteria(SearchCriteria searchCriteria) {
    this.searchCriteria = searchCriteria;
    return this;
  }

  /**
   * Get searchCriteria
   * @return searchCriteria
   */
  @javax.annotation.Nullable
  public SearchCriteria getSearchCriteria() {
    return searchCriteria;
  }

  public void setSearchCriteria(SearchCriteria searchCriteria) {
    this.searchCriteria = searchCriteria;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Principal principal = (Principal) o;
    return Objects.equals(this.address, principal.address) &&
        Objects.equals(this.altPhoneNumber, principal.altPhoneNumber) &&
        Objects.equals(this.driversLicense, principal.driversLicense) &&
        Objects.equals(this.firstName, principal.firstName) &&
        Objects.equals(this.lastName, principal.lastName) &&
        Objects.equals(this.middleInitial, principal.middleInitial) &&
        Objects.equals(this.nationalId, principal.nationalId) &&
        Objects.equals(this.phoneNumber, principal.phoneNumber) &&
        Objects.equals(this.searchCriteria, principal.searchCriteria);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, altPhoneNumber, driversLicense, firstName, lastName, middleInitial, nationalId, phoneNumber, searchCriteria);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Principal {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    altPhoneNumber: ").append(toIndentedString(altPhoneNumber)).append("\n");
    sb.append("    driversLicense: ").append(toIndentedString(driversLicense)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    middleInitial: ").append(toIndentedString(middleInitial)).append("\n");
    sb.append("    nationalId: ").append(toIndentedString(nationalId)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    searchCriteria: ").append(toIndentedString(searchCriteria)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Address");
    openapiFields.add("AltPhoneNumber");
    openapiFields.add("DriversLicense");
    openapiFields.add("FirstName");
    openapiFields.add("LastName");
    openapiFields.add("MiddleInitial");
    openapiFields.add("NationalId");
    openapiFields.add("PhoneNumber");
    openapiFields.add("SearchCriteria");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("FirstName");
    openapiRequiredFields.add("LastName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Principal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Principal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Principal is not found in the empty JSON string", Principal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Principal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Principal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Principal.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Address`
      if (jsonObj.get("Address") != null && !jsonObj.get("Address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("Address"));
      }
      if ((jsonObj.get("AltPhoneNumber") != null && !jsonObj.get("AltPhoneNumber").isJsonNull()) && !jsonObj.get("AltPhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AltPhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AltPhoneNumber").toString()));
      }
      // validate the optional field `DriversLicense`
      if (jsonObj.get("DriversLicense") != null && !jsonObj.get("DriversLicense").isJsonNull()) {
        DriversLicense.validateJsonElement(jsonObj.get("DriversLicense"));
      }
      if (!jsonObj.get("FirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstName").toString()));
      }
      if (!jsonObj.get("LastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastName").toString()));
      }
      if ((jsonObj.get("MiddleInitial") != null && !jsonObj.get("MiddleInitial").isJsonNull()) && !jsonObj.get("MiddleInitial").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MiddleInitial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MiddleInitial").toString()));
      }
      if ((jsonObj.get("NationalId") != null && !jsonObj.get("NationalId").isJsonNull()) && !jsonObj.get("NationalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NationalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NationalId").toString()));
      }
      if ((jsonObj.get("PhoneNumber") != null && !jsonObj.get("PhoneNumber").isJsonNull()) && !jsonObj.get("PhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PhoneNumber").toString()));
      }
      // validate the optional field `SearchCriteria`
      if (jsonObj.get("SearchCriteria") != null && !jsonObj.get("SearchCriteria").isJsonNull()) {
        SearchCriteria.validateJsonElement(jsonObj.get("SearchCriteria"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Principal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Principal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Principal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Principal.class));

       return (TypeAdapter<T>) new TypeAdapter<Principal>() {
           @Override
           public void write(JsonWriter out, Principal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Principal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Principal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Principal
   * @throws IOException if the JSON string is invalid with respect to Principal
   */
  public static Principal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Principal.class);
  }

  /**
   * Convert an instance of Principal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

