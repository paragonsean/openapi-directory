/*
 * MATCH API
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.Principal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AddMerchantMerchant
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:23.990905-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AddMerchantMerchant {
  public static final String SERIALIZED_NAME_ADDRESS = "Address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_ALT_PHONE_NUMBER = "AltPhoneNumber";
  @SerializedName(SERIALIZED_NAME_ALT_PHONE_NUMBER)
  private String altPhoneNumber;

  public static final String SERIALIZED_NAME_CA_T_FLAG = "CATFlag";
  @SerializedName(SERIALIZED_NAME_CA_T_FLAG)
  private String caTFlag;

  public static final String SERIALIZED_NAME_COMMENTS = "Comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_COUNTRY_SUBDIVISION_TAX_ID = "CountrySubdivisionTaxId";
  @SerializedName(SERIALIZED_NAME_COUNTRY_SUBDIVISION_TAX_ID)
  private String countrySubdivisionTaxId;

  public static final String SERIALIZED_NAME_DATE_CLOSED = "DateClosed";
  @SerializedName(SERIALIZED_NAME_DATE_CLOSED)
  private String dateClosed;

  public static final String SERIALIZED_NAME_DATE_OPENED = "DateOpened";
  @SerializedName(SERIALIZED_NAME_DATE_OPENED)
  private String dateOpened;

  public static final String SERIALIZED_NAME_DOING_BUSINESS_AS_NAME = "DoingBusinessAsName";
  @SerializedName(SERIALIZED_NAME_DOING_BUSINESS_AS_NAME)
  private String doingBusinessAsName;

  public static final String SERIALIZED_NAME_MERCHANT_CATEGORY = "MerchantCategory";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CATEGORY)
  private String merchantCategory;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "MerchantId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NATIONAL_TAX_ID = "NationalTaxId";
  @SerializedName(SERIALIZED_NAME_NATIONAL_TAX_ID)
  private String nationalTaxId;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "PhoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_PRINCIPAL = "Principal";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL)
  private Principal principal;

  public static final String SERIALIZED_NAME_REASON_CODE = "ReasonCode";
  @SerializedName(SERIALIZED_NAME_REASON_CODE)
  private String reasonCode;

  public static final String SERIALIZED_NAME_SERVICE_PROV_D_B_A = "ServiceProvDBA";
  @SerializedName(SERIALIZED_NAME_SERVICE_PROV_D_B_A)
  private String serviceProvDBA;

  public static final String SERIALIZED_NAME_SERVICE_PROV_LEGAL = "ServiceProvLegal";
  @SerializedName(SERIALIZED_NAME_SERVICE_PROV_LEGAL)
  private String serviceProvLegal;

  public static final String SERIALIZED_NAME_URL = "Url";
  @SerializedName(SERIALIZED_NAME_URL)
  private List<String> url = new ArrayList<>();

  public AddMerchantMerchant() {
  }

  public AddMerchantMerchant address(Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public Address getAddress() {
    return address;
  }

  public void setAddress(Address address) {
    this.address = address;
  }


  public AddMerchantMerchant altPhoneNumber(String altPhoneNumber) {
    this.altPhoneNumber = altPhoneNumber;
    return this;
  }

  /**
   * The Business or Merchant&#39;s alternate phone number.
   * @return altPhoneNumber
   */
  @javax.annotation.Nullable
  public String getAltPhoneNumber() {
    return altPhoneNumber;
  }

  public void setAltPhoneNumber(String altPhoneNumber) {
    this.altPhoneNumber = altPhoneNumber;
  }


  public AddMerchantMerchant caTFlag(String caTFlag) {
    this.caTFlag = caTFlag;
    return this;
  }

  /**
   * Cardholder-activated terminal indicator.
   * @return caTFlag
   */
  @javax.annotation.Nonnull
  public String getCaTFlag() {
    return caTFlag;
  }

  public void setCaTFlag(String caTFlag) {
    this.caTFlag = caTFlag;
  }


  public AddMerchantMerchant comments(String comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Brief comments on why Merchant is added
   * @return comments
   */
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }


  public AddMerchantMerchant countrySubdivisionTaxId(String countrySubdivisionTaxId) {
    this.countrySubdivisionTaxId = countrySubdivisionTaxId;
    return this;
  }

  /**
   * The Merchant&#39;s state tax ID; for the U.S region only. Return value will be hidden.
   * @return countrySubdivisionTaxId
   */
  @javax.annotation.Nonnull
  public String getCountrySubdivisionTaxId() {
    return countrySubdivisionTaxId;
  }

  public void setCountrySubdivisionTaxId(String countrySubdivisionTaxId) {
    this.countrySubdivisionTaxId = countrySubdivisionTaxId;
  }


  public AddMerchantMerchant dateClosed(String dateClosed) {
    this.dateClosed = dateClosed;
    return this;
  }

  /**
   * Date the agreement was terminated with the merchant
   * @return dateClosed
   */
  @javax.annotation.Nonnull
  public String getDateClosed() {
    return dateClosed;
  }

  public void setDateClosed(String dateClosed) {
    this.dateClosed = dateClosed;
  }


  public AddMerchantMerchant dateOpened(String dateOpened) {
    this.dateOpened = dateOpened;
    return this;
  }

  /**
   * Date the merchant entered into agreement with the acquirer
   * @return dateOpened
   */
  @javax.annotation.Nonnull
  public String getDateOpened() {
    return dateOpened;
  }

  public void setDateOpened(String dateOpened) {
    this.dateOpened = dateOpened;
  }


  public AddMerchantMerchant doingBusinessAsName(String doingBusinessAsName) {
    this.doingBusinessAsName = doingBusinessAsName;
    return this;
  }

  /**
   * The name used by a merchant that could be different from the legal name of the business. Such as Bait R Us instead of the legal name, The Bait Shop
   * @return doingBusinessAsName
   */
  @javax.annotation.Nullable
  public String getDoingBusinessAsName() {
    return doingBusinessAsName;
  }

  public void setDoingBusinessAsName(String doingBusinessAsName) {
    this.doingBusinessAsName = doingBusinessAsName;
  }


  public AddMerchantMerchant merchantCategory(String merchantCategory) {
    this.merchantCategory = merchantCategory;
    return this;
  }

  /**
   * A classification code used in authorization, clearing, and other transactions or reports to identify the type of merchant.
   * @return merchantCategory
   */
  @javax.annotation.Nonnull
  public String getMerchantCategory() {
    return merchantCategory;
  }

  public void setMerchantCategory(String merchantCategory) {
    this.merchantCategory = merchantCategory;
  }


  public AddMerchantMerchant merchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  /**
   * The identifier assigned to a merchant by an Acquirer. An Acquirer Id and Merchant Id combination must be unique.
   * @return merchantId
   */
  @javax.annotation.Nonnull
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public AddMerchantMerchant name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the Business which has been terminated.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AddMerchantMerchant nationalTaxId(String nationalTaxId) {
    this.nationalTaxId = nationalTaxId;
    return this;
  }

  /**
   * The National tax ID or business registration number. Return value will be hidden.
   * @return nationalTaxId
   */
  @javax.annotation.Nullable
  public String getNationalTaxId() {
    return nationalTaxId;
  }

  public void setNationalTaxId(String nationalTaxId) {
    this.nationalTaxId = nationalTaxId;
  }


  public AddMerchantMerchant phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * The Business or Merchant&#39;s phone number.
   * @return phoneNumber
   */
  @javax.annotation.Nonnull
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public AddMerchantMerchant principal(Principal principal) {
    this.principal = principal;
    return this;
  }

  /**
   * Get principal
   * @return principal
   */
  @javax.annotation.Nullable
  public Principal getPrincipal() {
    return principal;
  }

  public void setPrincipal(Principal principal) {
    this.principal = principal;
  }


  public AddMerchantMerchant reasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
    return this;
  }

  /**
   * A two digit numeric code indication why a particular merchant was terminated.  01   Account Data Compromise, 02   Common Points of Purchase, 03   Laundering, 04   Excessive Chargebacks, 05   Excessive Fraud, 06   Reserved for Future Use, 07   Fraud Conviction, 08   MasterCard Questionable Merchant Audit Program, 09   Bankruptcy/Liquidation/Insolvency, 10   Violation of MasterCard Standards, 11   Merchant collusion, 12   PCI Data Security Standard, Noncompliance, 13   Illegal Transactions, 14   Identity Theft
   * @return reasonCode
   */
  @javax.annotation.Nonnull
  public String getReasonCode() {
    return reasonCode;
  }

  public void setReasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
  }


  public AddMerchantMerchant serviceProvDBA(String serviceProvDBA) {
    this.serviceProvDBA = serviceProvDBA;
    return this;
  }

  /**
   * The name of the service provider associated with the merchant listed in the MATCH.
   * @return serviceProvDBA
   */
  @javax.annotation.Nullable
  public String getServiceProvDBA() {
    return serviceProvDBA;
  }

  public void setServiceProvDBA(String serviceProvDBA) {
    this.serviceProvDBA = serviceProvDBA;
  }


  public AddMerchantMerchant serviceProvLegal(String serviceProvLegal) {
    this.serviceProvLegal = serviceProvLegal;
    return this;
  }

  /**
   * The name of the service provider associated with the merchant listed in the MATCH.
   * @return serviceProvLegal
   */
  @javax.annotation.Nullable
  public String getServiceProvLegal() {
    return serviceProvLegal;
  }

  public void setServiceProvLegal(String serviceProvLegal) {
    this.serviceProvLegal = serviceProvLegal;
  }


  public AddMerchantMerchant url(List<String> url) {
    this.url = url;
    return this;
  }

  public AddMerchantMerchant addUrlItem(String urlItem) {
    if (this.url == null) {
      this.url = new ArrayList<>();
    }
    this.url.add(urlItem);
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public List<String> getUrl() {
    return url;
  }

  public void setUrl(List<String> url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddMerchantMerchant addMerchantMerchant = (AddMerchantMerchant) o;
    return Objects.equals(this.address, addMerchantMerchant.address) &&
        Objects.equals(this.altPhoneNumber, addMerchantMerchant.altPhoneNumber) &&
        Objects.equals(this.caTFlag, addMerchantMerchant.caTFlag) &&
        Objects.equals(this.comments, addMerchantMerchant.comments) &&
        Objects.equals(this.countrySubdivisionTaxId, addMerchantMerchant.countrySubdivisionTaxId) &&
        Objects.equals(this.dateClosed, addMerchantMerchant.dateClosed) &&
        Objects.equals(this.dateOpened, addMerchantMerchant.dateOpened) &&
        Objects.equals(this.doingBusinessAsName, addMerchantMerchant.doingBusinessAsName) &&
        Objects.equals(this.merchantCategory, addMerchantMerchant.merchantCategory) &&
        Objects.equals(this.merchantId, addMerchantMerchant.merchantId) &&
        Objects.equals(this.name, addMerchantMerchant.name) &&
        Objects.equals(this.nationalTaxId, addMerchantMerchant.nationalTaxId) &&
        Objects.equals(this.phoneNumber, addMerchantMerchant.phoneNumber) &&
        Objects.equals(this.principal, addMerchantMerchant.principal) &&
        Objects.equals(this.reasonCode, addMerchantMerchant.reasonCode) &&
        Objects.equals(this.serviceProvDBA, addMerchantMerchant.serviceProvDBA) &&
        Objects.equals(this.serviceProvLegal, addMerchantMerchant.serviceProvLegal) &&
        Objects.equals(this.url, addMerchantMerchant.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, altPhoneNumber, caTFlag, comments, countrySubdivisionTaxId, dateClosed, dateOpened, doingBusinessAsName, merchantCategory, merchantId, name, nationalTaxId, phoneNumber, principal, reasonCode, serviceProvDBA, serviceProvLegal, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddMerchantMerchant {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    altPhoneNumber: ").append(toIndentedString(altPhoneNumber)).append("\n");
    sb.append("    caTFlag: ").append(toIndentedString(caTFlag)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    countrySubdivisionTaxId: ").append(toIndentedString(countrySubdivisionTaxId)).append("\n");
    sb.append("    dateClosed: ").append(toIndentedString(dateClosed)).append("\n");
    sb.append("    dateOpened: ").append(toIndentedString(dateOpened)).append("\n");
    sb.append("    doingBusinessAsName: ").append(toIndentedString(doingBusinessAsName)).append("\n");
    sb.append("    merchantCategory: ").append(toIndentedString(merchantCategory)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nationalTaxId: ").append(toIndentedString(nationalTaxId)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    principal: ").append(toIndentedString(principal)).append("\n");
    sb.append("    reasonCode: ").append(toIndentedString(reasonCode)).append("\n");
    sb.append("    serviceProvDBA: ").append(toIndentedString(serviceProvDBA)).append("\n");
    sb.append("    serviceProvLegal: ").append(toIndentedString(serviceProvLegal)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Address");
    openapiFields.add("AltPhoneNumber");
    openapiFields.add("CATFlag");
    openapiFields.add("Comments");
    openapiFields.add("CountrySubdivisionTaxId");
    openapiFields.add("DateClosed");
    openapiFields.add("DateOpened");
    openapiFields.add("DoingBusinessAsName");
    openapiFields.add("MerchantCategory");
    openapiFields.add("MerchantId");
    openapiFields.add("Name");
    openapiFields.add("NationalTaxId");
    openapiFields.add("PhoneNumber");
    openapiFields.add("Principal");
    openapiFields.add("ReasonCode");
    openapiFields.add("ServiceProvDBA");
    openapiFields.add("ServiceProvLegal");
    openapiFields.add("Url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CATFlag");
    openapiRequiredFields.add("CountrySubdivisionTaxId");
    openapiRequiredFields.add("DateClosed");
    openapiRequiredFields.add("DateOpened");
    openapiRequiredFields.add("MerchantCategory");
    openapiRequiredFields.add("MerchantId");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("PhoneNumber");
    openapiRequiredFields.add("ReasonCode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddMerchantMerchant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddMerchantMerchant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddMerchantMerchant is not found in the empty JSON string", AddMerchantMerchant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddMerchantMerchant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddMerchantMerchant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddMerchantMerchant.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Address`
      if (jsonObj.get("Address") != null && !jsonObj.get("Address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("Address"));
      }
      if ((jsonObj.get("AltPhoneNumber") != null && !jsonObj.get("AltPhoneNumber").isJsonNull()) && !jsonObj.get("AltPhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AltPhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AltPhoneNumber").toString()));
      }
      if (!jsonObj.get("CATFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CATFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CATFlag").toString()));
      }
      if ((jsonObj.get("Comments") != null && !jsonObj.get("Comments").isJsonNull()) && !jsonObj.get("Comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Comments").toString()));
      }
      if (!jsonObj.get("CountrySubdivisionTaxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CountrySubdivisionTaxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CountrySubdivisionTaxId").toString()));
      }
      if (!jsonObj.get("DateClosed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DateClosed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DateClosed").toString()));
      }
      if (!jsonObj.get("DateOpened").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DateOpened` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DateOpened").toString()));
      }
      if ((jsonObj.get("DoingBusinessAsName") != null && !jsonObj.get("DoingBusinessAsName").isJsonNull()) && !jsonObj.get("DoingBusinessAsName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DoingBusinessAsName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DoingBusinessAsName").toString()));
      }
      if (!jsonObj.get("MerchantCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MerchantCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MerchantCategory").toString()));
      }
      if (!jsonObj.get("MerchantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MerchantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MerchantId").toString()));
      }
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("NationalTaxId") != null && !jsonObj.get("NationalTaxId").isJsonNull()) && !jsonObj.get("NationalTaxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NationalTaxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NationalTaxId").toString()));
      }
      if (!jsonObj.get("PhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PhoneNumber").toString()));
      }
      // validate the optional field `Principal`
      if (jsonObj.get("Principal") != null && !jsonObj.get("Principal").isJsonNull()) {
        Principal.validateJsonElement(jsonObj.get("Principal"));
      }
      if (!jsonObj.get("ReasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReasonCode").toString()));
      }
      if ((jsonObj.get("ServiceProvDBA") != null && !jsonObj.get("ServiceProvDBA").isJsonNull()) && !jsonObj.get("ServiceProvDBA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceProvDBA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceProvDBA").toString()));
      }
      if ((jsonObj.get("ServiceProvLegal") != null && !jsonObj.get("ServiceProvLegal").isJsonNull()) && !jsonObj.get("ServiceProvLegal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceProvLegal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceProvLegal").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Url") != null && !jsonObj.get("Url").isJsonNull() && !jsonObj.get("Url").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Url` to be an array in the JSON string but got `%s`", jsonObj.get("Url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddMerchantMerchant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddMerchantMerchant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddMerchantMerchant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddMerchantMerchant.class));

       return (TypeAdapter<T>) new TypeAdapter<AddMerchantMerchant>() {
           @Override
           public void write(JsonWriter out, AddMerchantMerchant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddMerchantMerchant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddMerchantMerchant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddMerchantMerchant
   * @throws IOException if the JSON string is invalid with respect to AddMerchantMerchant
   */
  public static AddMerchantMerchant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddMerchantMerchant.class);
  }

  /**
   * Convert an instance of AddMerchantMerchant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

