/*
 * MATCH API
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.Principal;
import org.openapitools.client.model.SearchCriteria;
import org.openapitools.client.model.UrlGroup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Merchant
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:23.990905-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Merchant {
  public static final String SERIALIZED_NAME_ADDED_BY_ACQUIRER_I_D = "AddedByAcquirerID";
  @SerializedName(SERIALIZED_NAME_ADDED_BY_ACQUIRER_I_D)
  private String addedByAcquirerID;

  public static final String SERIALIZED_NAME_ADDED_ON_DATE = "AddedOnDate";
  @SerializedName(SERIALIZED_NAME_ADDED_ON_DATE)
  private String addedOnDate;

  public static final String SERIALIZED_NAME_ADDRESS = "Address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_ALT_PHONE_NUMBER = "AltPhoneNumber";
  @SerializedName(SERIALIZED_NAME_ALT_PHONE_NUMBER)
  private String altPhoneNumber;

  public static final String SERIALIZED_NAME_COUNTRY_SUBDIVISION_TAX_ID = "CountrySubdivisionTaxId";
  @SerializedName(SERIALIZED_NAME_COUNTRY_SUBDIVISION_TAX_ID)
  private String countrySubdivisionTaxId;

  public static final String SERIALIZED_NAME_DOING_BUSINESS_AS_NAME = "DoingBusinessAsName";
  @SerializedName(SERIALIZED_NAME_DOING_BUSINESS_AS_NAME)
  private String doingBusinessAsName;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NATIONAL_TAX_ID = "NationalTaxId";
  @SerializedName(SERIALIZED_NAME_NATIONAL_TAX_ID)
  private String nationalTaxId;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "PhoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_PRINCIPAL = "Principal";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL)
  private List<Principal> principal = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEARCH_CRITERIA = "SearchCriteria";
  @SerializedName(SERIALIZED_NAME_SEARCH_CRITERIA)
  private SearchCriteria searchCriteria;

  public static final String SERIALIZED_NAME_SERVICE_PROV_D_B_A = "ServiceProvDBA";
  @SerializedName(SERIALIZED_NAME_SERVICE_PROV_D_B_A)
  private String serviceProvDBA;

  public static final String SERIALIZED_NAME_SERVICE_PROV_LEGAL = "ServiceProvLegal";
  @SerializedName(SERIALIZED_NAME_SERVICE_PROV_LEGAL)
  private String serviceProvLegal;

  public static final String SERIALIZED_NAME_TERMINATION_REASON_CODE = "TerminationReasonCode";
  @SerializedName(SERIALIZED_NAME_TERMINATION_REASON_CODE)
  private String terminationReasonCode;

  public static final String SERIALIZED_NAME_URL = "Url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_URL_GROUP = "UrlGroup";
  @SerializedName(SERIALIZED_NAME_URL_GROUP)
  private List<UrlGroup> urlGroup = new ArrayList<>();

  public Merchant() {
  }

  public Merchant addedByAcquirerID(String addedByAcquirerID) {
    this.addedByAcquirerID = addedByAcquirerID;
    return this;
  }

  /**
   * The Member ICA that has added the merchant to the MATCH system
   * @return addedByAcquirerID
   */
  @javax.annotation.Nullable
  public String getAddedByAcquirerID() {
    return addedByAcquirerID;
  }

  public void setAddedByAcquirerID(String addedByAcquirerID) {
    this.addedByAcquirerID = addedByAcquirerID;
  }


  public Merchant addedOnDate(String addedOnDate) {
    this.addedOnDate = addedOnDate;
    return this;
  }

  /**
   * Date the merchant was added to the MATCH database.
   * @return addedOnDate
   */
  @javax.annotation.Nullable
  public String getAddedOnDate() {
    return addedOnDate;
  }

  public void setAddedOnDate(String addedOnDate) {
    this.addedOnDate = addedOnDate;
  }


  public Merchant address(Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public Address getAddress() {
    return address;
  }

  public void setAddress(Address address) {
    this.address = address;
  }


  public Merchant altPhoneNumber(String altPhoneNumber) {
    this.altPhoneNumber = altPhoneNumber;
    return this;
  }

  /**
   * The Business or Merchant&#39;s alternate phone number, including the area code. Within the USA, phone numbers have a length of 10, and for out outside the US, a max length of 25. Within the U.S. phone numbers can not start with 0 or 1. If the number is outside the U.S. region; do not include the country code. The number must be digits only, with no format characters such as parenthesis or dashes.
   * @return altPhoneNumber
   */
  @javax.annotation.Nullable
  public String getAltPhoneNumber() {
    return altPhoneNumber;
  }

  public void setAltPhoneNumber(String altPhoneNumber) {
    this.altPhoneNumber = altPhoneNumber;
  }


  public Merchant countrySubdivisionTaxId(String countrySubdivisionTaxId) {
    this.countrySubdivisionTaxId = countrySubdivisionTaxId;
    return this;
  }

  /**
   * The Merchant Country Subdivision tax ID, leave blank if not in the U.S region.
   * @return countrySubdivisionTaxId
   */
  @javax.annotation.Nullable
  public String getCountrySubdivisionTaxId() {
    return countrySubdivisionTaxId;
  }

  public void setCountrySubdivisionTaxId(String countrySubdivisionTaxId) {
    this.countrySubdivisionTaxId = countrySubdivisionTaxId;
  }


  public Merchant doingBusinessAsName(String doingBusinessAsName) {
    this.doingBusinessAsName = doingBusinessAsName;
    return this;
  }

  /**
   * The name used by a merchant that could be different from the legal name of the business. Such as Bait R Us instead of the legal name, The Bait Shop.
   * @return doingBusinessAsName
   */
  @javax.annotation.Nullable
  public String getDoingBusinessAsName() {
    return doingBusinessAsName;
  }

  public void setDoingBusinessAsName(String doingBusinessAsName) {
    this.doingBusinessAsName = doingBusinessAsName;
  }


  public Merchant name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the business assigned by the principal owner(s)
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Merchant nationalTaxId(String nationalTaxId) {
    this.nationalTaxId = nationalTaxId;
    return this;
  }

  /**
   * The Merchant national tax ID, leave blank if not in the U.S region.
   * @return nationalTaxId
   */
  @javax.annotation.Nullable
  public String getNationalTaxId() {
    return nationalTaxId;
  }

  public void setNationalTaxId(String nationalTaxId) {
    this.nationalTaxId = nationalTaxId;
  }


  public Merchant phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * The Business or Merchant&#39;s phone number, including the area code. Within the USA, phone numbers have a length of 10, and for outside the US, it can be any length with a maximum of 12 digits. Within the U.S. phone numbers can not start with 0 or 1. If the number is outside the U.S. region; do not include the country code. The phone number must be digits only, with no format characters such as parenthesis or dashes.
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public Merchant principal(List<Principal> principal) {
    this.principal = principal;
    return this;
  }

  public Merchant addPrincipalItem(Principal principalItem) {
    if (this.principal == null) {
      this.principal = new ArrayList<>();
    }
    this.principal.add(principalItem);
    return this;
  }

  /**
   * The details for the principal owner of the business.  A maximum of 5 principals may be submitted.
   * @return principal
   */
  @javax.annotation.Nullable
  public List<Principal> getPrincipal() {
    return principal;
  }

  public void setPrincipal(List<Principal> principal) {
    this.principal = principal;
  }


  public Merchant searchCriteria(SearchCriteria searchCriteria) {
    this.searchCriteria = searchCriteria;
    return this;
  }

  /**
   * Get searchCriteria
   * @return searchCriteria
   */
  @javax.annotation.Nullable
  public SearchCriteria getSearchCriteria() {
    return searchCriteria;
  }

  public void setSearchCriteria(SearchCriteria searchCriteria) {
    this.searchCriteria = searchCriteria;
  }


  public Merchant serviceProvDBA(String serviceProvDBA) {
    this.serviceProvDBA = serviceProvDBA;
    return this;
  }

  /**
   * The name of the service provider associated with the merchant listed in the MATCH
   * @return serviceProvDBA
   */
  @javax.annotation.Nullable
  public String getServiceProvDBA() {
    return serviceProvDBA;
  }

  public void setServiceProvDBA(String serviceProvDBA) {
    this.serviceProvDBA = serviceProvDBA;
  }


  public Merchant serviceProvLegal(String serviceProvLegal) {
    this.serviceProvLegal = serviceProvLegal;
    return this;
  }

  /**
   * The name of the service provider associated with the merchant listed in the MATCH
   * @return serviceProvLegal
   */
  @javax.annotation.Nullable
  public String getServiceProvLegal() {
    return serviceProvLegal;
  }

  public void setServiceProvLegal(String serviceProvLegal) {
    this.serviceProvLegal = serviceProvLegal;
  }


  public Merchant terminationReasonCode(String terminationReasonCode) {
    this.terminationReasonCode = terminationReasonCode;
    return this;
  }

  /**
   * A two digit numeric code indication why a particular merchant was terminated.  01   Account Data Compromise, 02   Common Points of Purchase, 03   Laundering, 04   Excessive Chargebacks, 05   Excessive Fraud, 06   Reserved for Future Use, 07   Fraud Conviction, 08   MasterCard Questionable Merchant Audit Program, 09   Bankruptcy/Liquidation/Insolvency, 10   Violation of MasterCard Standards, 11   Merchant collusion, 12   PCI Data Security Standard, Noncompliance, 13   Illegal Transactions, 14   Identity Theft
   * @return terminationReasonCode
   */
  @javax.annotation.Nullable
  public String getTerminationReasonCode() {
    return terminationReasonCode;
  }

  public void setTerminationReasonCode(String terminationReasonCode) {
    this.terminationReasonCode = terminationReasonCode;
  }


  public Merchant url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Website address of the merchant. A request may include multiple URLs. The total cumulative size of the URLs cannot exceed 20,000 bytes.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public Merchant urlGroup(List<UrlGroup> urlGroup) {
    this.urlGroup = urlGroup;
    return this;
  }

  public Merchant addUrlGroupItem(UrlGroup urlGroupItem) {
    if (this.urlGroup == null) {
      this.urlGroup = new ArrayList<>();
    }
    this.urlGroup.add(urlGroupItem);
    return this;
  }

  /**
   * Get urlGroup
   * @return urlGroup
   */
  @javax.annotation.Nullable
  public List<UrlGroup> getUrlGroup() {
    return urlGroup;
  }

  public void setUrlGroup(List<UrlGroup> urlGroup) {
    this.urlGroup = urlGroup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Merchant merchant = (Merchant) o;
    return Objects.equals(this.addedByAcquirerID, merchant.addedByAcquirerID) &&
        Objects.equals(this.addedOnDate, merchant.addedOnDate) &&
        Objects.equals(this.address, merchant.address) &&
        Objects.equals(this.altPhoneNumber, merchant.altPhoneNumber) &&
        Objects.equals(this.countrySubdivisionTaxId, merchant.countrySubdivisionTaxId) &&
        Objects.equals(this.doingBusinessAsName, merchant.doingBusinessAsName) &&
        Objects.equals(this.name, merchant.name) &&
        Objects.equals(this.nationalTaxId, merchant.nationalTaxId) &&
        Objects.equals(this.phoneNumber, merchant.phoneNumber) &&
        Objects.equals(this.principal, merchant.principal) &&
        Objects.equals(this.searchCriteria, merchant.searchCriteria) &&
        Objects.equals(this.serviceProvDBA, merchant.serviceProvDBA) &&
        Objects.equals(this.serviceProvLegal, merchant.serviceProvLegal) &&
        Objects.equals(this.terminationReasonCode, merchant.terminationReasonCode) &&
        Objects.equals(this.url, merchant.url) &&
        Objects.equals(this.urlGroup, merchant.urlGroup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addedByAcquirerID, addedOnDate, address, altPhoneNumber, countrySubdivisionTaxId, doingBusinessAsName, name, nationalTaxId, phoneNumber, principal, searchCriteria, serviceProvDBA, serviceProvLegal, terminationReasonCode, url, urlGroup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Merchant {\n");
    sb.append("    addedByAcquirerID: ").append(toIndentedString(addedByAcquirerID)).append("\n");
    sb.append("    addedOnDate: ").append(toIndentedString(addedOnDate)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    altPhoneNumber: ").append(toIndentedString(altPhoneNumber)).append("\n");
    sb.append("    countrySubdivisionTaxId: ").append(toIndentedString(countrySubdivisionTaxId)).append("\n");
    sb.append("    doingBusinessAsName: ").append(toIndentedString(doingBusinessAsName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nationalTaxId: ").append(toIndentedString(nationalTaxId)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    principal: ").append(toIndentedString(principal)).append("\n");
    sb.append("    searchCriteria: ").append(toIndentedString(searchCriteria)).append("\n");
    sb.append("    serviceProvDBA: ").append(toIndentedString(serviceProvDBA)).append("\n");
    sb.append("    serviceProvLegal: ").append(toIndentedString(serviceProvLegal)).append("\n");
    sb.append("    terminationReasonCode: ").append(toIndentedString(terminationReasonCode)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    urlGroup: ").append(toIndentedString(urlGroup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AddedByAcquirerID");
    openapiFields.add("AddedOnDate");
    openapiFields.add("Address");
    openapiFields.add("AltPhoneNumber");
    openapiFields.add("CountrySubdivisionTaxId");
    openapiFields.add("DoingBusinessAsName");
    openapiFields.add("Name");
    openapiFields.add("NationalTaxId");
    openapiFields.add("PhoneNumber");
    openapiFields.add("Principal");
    openapiFields.add("SearchCriteria");
    openapiFields.add("ServiceProvDBA");
    openapiFields.add("ServiceProvLegal");
    openapiFields.add("TerminationReasonCode");
    openapiFields.add("Url");
    openapiFields.add("UrlGroup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Merchant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Merchant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Merchant is not found in the empty JSON string", Merchant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Merchant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Merchant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Merchant.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AddedByAcquirerID") != null && !jsonObj.get("AddedByAcquirerID").isJsonNull()) && !jsonObj.get("AddedByAcquirerID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AddedByAcquirerID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AddedByAcquirerID").toString()));
      }
      if ((jsonObj.get("AddedOnDate") != null && !jsonObj.get("AddedOnDate").isJsonNull()) && !jsonObj.get("AddedOnDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AddedOnDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AddedOnDate").toString()));
      }
      // validate the optional field `Address`
      if (jsonObj.get("Address") != null && !jsonObj.get("Address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("Address"));
      }
      if ((jsonObj.get("AltPhoneNumber") != null && !jsonObj.get("AltPhoneNumber").isJsonNull()) && !jsonObj.get("AltPhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AltPhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AltPhoneNumber").toString()));
      }
      if ((jsonObj.get("CountrySubdivisionTaxId") != null && !jsonObj.get("CountrySubdivisionTaxId").isJsonNull()) && !jsonObj.get("CountrySubdivisionTaxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CountrySubdivisionTaxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CountrySubdivisionTaxId").toString()));
      }
      if ((jsonObj.get("DoingBusinessAsName") != null && !jsonObj.get("DoingBusinessAsName").isJsonNull()) && !jsonObj.get("DoingBusinessAsName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DoingBusinessAsName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DoingBusinessAsName").toString()));
      }
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("NationalTaxId") != null && !jsonObj.get("NationalTaxId").isJsonNull()) && !jsonObj.get("NationalTaxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NationalTaxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NationalTaxId").toString()));
      }
      if ((jsonObj.get("PhoneNumber") != null && !jsonObj.get("PhoneNumber").isJsonNull()) && !jsonObj.get("PhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PhoneNumber").toString()));
      }
      if (jsonObj.get("Principal") != null && !jsonObj.get("Principal").isJsonNull()) {
        JsonArray jsonArrayprincipal = jsonObj.getAsJsonArray("Principal");
        if (jsonArrayprincipal != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Principal").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Principal` to be an array in the JSON string but got `%s`", jsonObj.get("Principal").toString()));
          }

          // validate the optional field `Principal` (array)
          for (int i = 0; i < jsonArrayprincipal.size(); i++) {
            Principal.validateJsonElement(jsonArrayprincipal.get(i));
          };
        }
      }
      // validate the optional field `SearchCriteria`
      if (jsonObj.get("SearchCriteria") != null && !jsonObj.get("SearchCriteria").isJsonNull()) {
        SearchCriteria.validateJsonElement(jsonObj.get("SearchCriteria"));
      }
      if ((jsonObj.get("ServiceProvDBA") != null && !jsonObj.get("ServiceProvDBA").isJsonNull()) && !jsonObj.get("ServiceProvDBA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceProvDBA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceProvDBA").toString()));
      }
      if ((jsonObj.get("ServiceProvLegal") != null && !jsonObj.get("ServiceProvLegal").isJsonNull()) && !jsonObj.get("ServiceProvLegal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceProvLegal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceProvLegal").toString()));
      }
      if ((jsonObj.get("TerminationReasonCode") != null && !jsonObj.get("TerminationReasonCode").isJsonNull()) && !jsonObj.get("TerminationReasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TerminationReasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TerminationReasonCode").toString()));
      }
      if ((jsonObj.get("Url") != null && !jsonObj.get("Url").isJsonNull()) && !jsonObj.get("Url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Url").toString()));
      }
      if (jsonObj.get("UrlGroup") != null && !jsonObj.get("UrlGroup").isJsonNull()) {
        JsonArray jsonArrayurlGroup = jsonObj.getAsJsonArray("UrlGroup");
        if (jsonArrayurlGroup != null) {
          // ensure the json data is an array
          if (!jsonObj.get("UrlGroup").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `UrlGroup` to be an array in the JSON string but got `%s`", jsonObj.get("UrlGroup").toString()));
          }

          // validate the optional field `UrlGroup` (array)
          for (int i = 0; i < jsonArrayurlGroup.size(); i++) {
            UrlGroup.validateJsonElement(jsonArrayurlGroup.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Merchant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Merchant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Merchant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Merchant.class));

       return (TypeAdapter<T>) new TypeAdapter<Merchant>() {
           @Override
           public void write(JsonWriter out, Merchant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Merchant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Merchant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Merchant
   * @throws IOException if the JSON string is invalid with respect to Merchant
   */
  public static Merchant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Merchant.class);
  }

  /**
   * Convert an instance of Merchant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

