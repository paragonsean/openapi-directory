/*
 * MATCH API
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.PrincipalMatch;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MerchantMatch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:23.990905-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MerchantMatch {
  public static final String SERIALIZED_NAME_ADDRESS = "Address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_ALT_PHONE_NUMBER = "AltPhoneNumber";
  @SerializedName(SERIALIZED_NAME_ALT_PHONE_NUMBER)
  private String altPhoneNumber;

  public static final String SERIALIZED_NAME_COUNTRY_SUBDIVISION_TAX_ID = "CountrySubdivisionTaxId";
  @SerializedName(SERIALIZED_NAME_COUNTRY_SUBDIVISION_TAX_ID)
  private String countrySubdivisionTaxId;

  public static final String SERIALIZED_NAME_DOING_BUSINESS_AS_NAME = "DoingBusinessAsName";
  @SerializedName(SERIALIZED_NAME_DOING_BUSINESS_AS_NAME)
  private String doingBusinessAsName;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NATIONAL_TAX_ID = "NationalTaxId";
  @SerializedName(SERIALIZED_NAME_NATIONAL_TAX_ID)
  private String nationalTaxId;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "PhoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_PRINCIPAL_MATCH = "PrincipalMatch";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_MATCH)
  private List<PrincipalMatch> principalMatch = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_PROV_D_B_A = "ServiceProvDBA";
  @SerializedName(SERIALIZED_NAME_SERVICE_PROV_D_B_A)
  private String serviceProvDBA;

  public static final String SERIALIZED_NAME_SERVICE_PROV_LEGAL = "ServiceProvLegal";
  @SerializedName(SERIALIZED_NAME_SERVICE_PROV_LEGAL)
  private String serviceProvLegal;

  public MerchantMatch() {
  }

  public MerchantMatch address(Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public Address getAddress() {
    return address;
  }

  public void setAddress(Address address) {
    this.address = address;
  }


  public MerchantMatch altPhoneNumber(String altPhoneNumber) {
    this.altPhoneNumber = altPhoneNumber;
    return this;
  }

  /**
   * The Business or Merchant&#39;s alternate phone number.
   * @return altPhoneNumber
   */
  @javax.annotation.Nullable
  public String getAltPhoneNumber() {
    return altPhoneNumber;
  }

  public void setAltPhoneNumber(String altPhoneNumber) {
    this.altPhoneNumber = altPhoneNumber;
  }


  public MerchantMatch countrySubdivisionTaxId(String countrySubdivisionTaxId) {
    this.countrySubdivisionTaxId = countrySubdivisionTaxId;
    return this;
  }

  /**
   * The Merchant&#39;s state tax ID; for the U.S region only. Return value will be hidden.
   * @return countrySubdivisionTaxId
   */
  @javax.annotation.Nullable
  public String getCountrySubdivisionTaxId() {
    return countrySubdivisionTaxId;
  }

  public void setCountrySubdivisionTaxId(String countrySubdivisionTaxId) {
    this.countrySubdivisionTaxId = countrySubdivisionTaxId;
  }


  public MerchantMatch doingBusinessAsName(String doingBusinessAsName) {
    this.doingBusinessAsName = doingBusinessAsName;
    return this;
  }

  /**
   * The name used by a merchant that could be different from the legal name of the business. Such as Bait R Us instead of the legal name, The Bait Shop
   * @return doingBusinessAsName
   */
  @javax.annotation.Nullable
  public String getDoingBusinessAsName() {
    return doingBusinessAsName;
  }

  public void setDoingBusinessAsName(String doingBusinessAsName) {
    this.doingBusinessAsName = doingBusinessAsName;
  }


  public MerchantMatch name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the Business which has been terminated.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MerchantMatch nationalTaxId(String nationalTaxId) {
    this.nationalTaxId = nationalTaxId;
    return this;
  }

  /**
   * The National tax ID or business registration number. Return value will be hidden.
   * @return nationalTaxId
   */
  @javax.annotation.Nullable
  public String getNationalTaxId() {
    return nationalTaxId;
  }

  public void setNationalTaxId(String nationalTaxId) {
    this.nationalTaxId = nationalTaxId;
  }


  public MerchantMatch phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * The Business or Merchant&#39;s phone number.
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public MerchantMatch principalMatch(List<PrincipalMatch> principalMatch) {
    this.principalMatch = principalMatch;
    return this;
  }

  public MerchantMatch addPrincipalMatchItem(PrincipalMatch principalMatchItem) {
    if (this.principalMatch == null) {
      this.principalMatch = new ArrayList<>();
    }
    this.principalMatch.add(principalMatchItem);
    return this;
  }

  /**
   * Get principalMatch
   * @return principalMatch
   */
  @javax.annotation.Nullable
  public List<PrincipalMatch> getPrincipalMatch() {
    return principalMatch;
  }

  public void setPrincipalMatch(List<PrincipalMatch> principalMatch) {
    this.principalMatch = principalMatch;
  }


  public MerchantMatch serviceProvDBA(String serviceProvDBA) {
    this.serviceProvDBA = serviceProvDBA;
    return this;
  }

  /**
   * The name of the service provider associated with the merchant listed in the MATCH.
   * @return serviceProvDBA
   */
  @javax.annotation.Nullable
  public String getServiceProvDBA() {
    return serviceProvDBA;
  }

  public void setServiceProvDBA(String serviceProvDBA) {
    this.serviceProvDBA = serviceProvDBA;
  }


  public MerchantMatch serviceProvLegal(String serviceProvLegal) {
    this.serviceProvLegal = serviceProvLegal;
    return this;
  }

  /**
   * The name of the service provider associated with the merchant listed in the MATCH.
   * @return serviceProvLegal
   */
  @javax.annotation.Nullable
  public String getServiceProvLegal() {
    return serviceProvLegal;
  }

  public void setServiceProvLegal(String serviceProvLegal) {
    this.serviceProvLegal = serviceProvLegal;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MerchantMatch merchantMatch = (MerchantMatch) o;
    return Objects.equals(this.address, merchantMatch.address) &&
        Objects.equals(this.altPhoneNumber, merchantMatch.altPhoneNumber) &&
        Objects.equals(this.countrySubdivisionTaxId, merchantMatch.countrySubdivisionTaxId) &&
        Objects.equals(this.doingBusinessAsName, merchantMatch.doingBusinessAsName) &&
        Objects.equals(this.name, merchantMatch.name) &&
        Objects.equals(this.nationalTaxId, merchantMatch.nationalTaxId) &&
        Objects.equals(this.phoneNumber, merchantMatch.phoneNumber) &&
        Objects.equals(this.principalMatch, merchantMatch.principalMatch) &&
        Objects.equals(this.serviceProvDBA, merchantMatch.serviceProvDBA) &&
        Objects.equals(this.serviceProvLegal, merchantMatch.serviceProvLegal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, altPhoneNumber, countrySubdivisionTaxId, doingBusinessAsName, name, nationalTaxId, phoneNumber, principalMatch, serviceProvDBA, serviceProvLegal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MerchantMatch {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    altPhoneNumber: ").append(toIndentedString(altPhoneNumber)).append("\n");
    sb.append("    countrySubdivisionTaxId: ").append(toIndentedString(countrySubdivisionTaxId)).append("\n");
    sb.append("    doingBusinessAsName: ").append(toIndentedString(doingBusinessAsName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nationalTaxId: ").append(toIndentedString(nationalTaxId)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    principalMatch: ").append(toIndentedString(principalMatch)).append("\n");
    sb.append("    serviceProvDBA: ").append(toIndentedString(serviceProvDBA)).append("\n");
    sb.append("    serviceProvLegal: ").append(toIndentedString(serviceProvLegal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Address");
    openapiFields.add("AltPhoneNumber");
    openapiFields.add("CountrySubdivisionTaxId");
    openapiFields.add("DoingBusinessAsName");
    openapiFields.add("Name");
    openapiFields.add("NationalTaxId");
    openapiFields.add("PhoneNumber");
    openapiFields.add("PrincipalMatch");
    openapiFields.add("ServiceProvDBA");
    openapiFields.add("ServiceProvLegal");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MerchantMatch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MerchantMatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MerchantMatch is not found in the empty JSON string", MerchantMatch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MerchantMatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MerchantMatch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Address`
      if (jsonObj.get("Address") != null && !jsonObj.get("Address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("Address"));
      }
      if ((jsonObj.get("AltPhoneNumber") != null && !jsonObj.get("AltPhoneNumber").isJsonNull()) && !jsonObj.get("AltPhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AltPhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AltPhoneNumber").toString()));
      }
      if ((jsonObj.get("CountrySubdivisionTaxId") != null && !jsonObj.get("CountrySubdivisionTaxId").isJsonNull()) && !jsonObj.get("CountrySubdivisionTaxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CountrySubdivisionTaxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CountrySubdivisionTaxId").toString()));
      }
      if ((jsonObj.get("DoingBusinessAsName") != null && !jsonObj.get("DoingBusinessAsName").isJsonNull()) && !jsonObj.get("DoingBusinessAsName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DoingBusinessAsName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DoingBusinessAsName").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("NationalTaxId") != null && !jsonObj.get("NationalTaxId").isJsonNull()) && !jsonObj.get("NationalTaxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NationalTaxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NationalTaxId").toString()));
      }
      if ((jsonObj.get("PhoneNumber") != null && !jsonObj.get("PhoneNumber").isJsonNull()) && !jsonObj.get("PhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PhoneNumber").toString()));
      }
      if (jsonObj.get("PrincipalMatch") != null && !jsonObj.get("PrincipalMatch").isJsonNull()) {
        JsonArray jsonArrayprincipalMatch = jsonObj.getAsJsonArray("PrincipalMatch");
        if (jsonArrayprincipalMatch != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PrincipalMatch").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PrincipalMatch` to be an array in the JSON string but got `%s`", jsonObj.get("PrincipalMatch").toString()));
          }

          // validate the optional field `PrincipalMatch` (array)
          for (int i = 0; i < jsonArrayprincipalMatch.size(); i++) {
            PrincipalMatch.validateJsonElement(jsonArrayprincipalMatch.get(i));
          };
        }
      }
      if ((jsonObj.get("ServiceProvDBA") != null && !jsonObj.get("ServiceProvDBA").isJsonNull()) && !jsonObj.get("ServiceProvDBA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceProvDBA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceProvDBA").toString()));
      }
      if ((jsonObj.get("ServiceProvLegal") != null && !jsonObj.get("ServiceProvLegal").isJsonNull()) && !jsonObj.get("ServiceProvLegal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceProvLegal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceProvLegal").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MerchantMatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MerchantMatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MerchantMatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MerchantMatch.class));

       return (TypeAdapter<T>) new TypeAdapter<MerchantMatch>() {
           @Override
           public void write(JsonWriter out, MerchantMatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MerchantMatch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MerchantMatch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MerchantMatch
   * @throws IOException if the JSON string is invalid with respect to MerchantMatch
   */
  public static MerchantMatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MerchantMatch.class);
  }

  /**
   * Convert an instance of MerchantMatch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

