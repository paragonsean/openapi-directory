/*
 * MATCH API
 * Helps acquirers identify potentially high-risk merchants before entering to a merchant agreement.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorsResponse;
import org.openapitools.client.model.RetroRequestSchema;
import org.openapitools.client.model.RetroResponseSchema;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RetroactiveInquiryRequestApi
 */
@Disabled
public class RetroactiveInquiryRequestApiTest {

    private final RetroactiveInquiryRequestApi api = new RetroactiveInquiryRequestApi();

    /**
     * Returns the summary of Retro matches for the given Acquirer Id. This resource will return the summary of Retroactive Inquiry matches for the given Acquirer ID/ICA. If an initial inquiry does not result in a possible match, it is still possible that the merchant listing could appear sometime in the next 360 days. This may occur when another acquirer enters the merchant into the MATCH database. The system will automatically continue to search the MATCH system for 360 days. To view these notifications, acquirers must use the Retroactive Inquiry service.
     *
     * Returns the summary of Retro matches for the given Acquirer Id. This resource will return the summary of Retroactive Inquiry matches for the given Acquirer ID/ICA. If an initial inquiry does not result in a possible match, it is still possible that the merchant listing could appear sometime in the next 360 days. This may occur when another acquirer enters the merchant into the MATCH database. The system will automatically continue to search the MATCH system for 360 days. To view these notifications, acquirers must use the Retroactive Inquiry service. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fraudMerchantV3RetroRetroListPostTest() throws ApiException {
        RetroRequestSchema retroRequest = null;
        RetroResponseSchema response = api.fraudMerchantV3RetroRetroListPost(retroRequest);
        // TODO: test validations
    }

}
