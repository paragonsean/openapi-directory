# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DriversLicense(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, country_subdivision: str=None, number: str=None):
        """DriversLicense - a model defined in OpenAPI

        :param country: The country of this DriversLicense.
        :param country_subdivision: The country_subdivision of this DriversLicense.
        :param number: The number of this DriversLicense.
        """
        self.openapi_types = {
            'country': str,
            'country_subdivision': str,
            'number': str
        }

        self.attribute_map = {
            'country': 'Country',
            'country_subdivision': 'CountrySubdivision',
            'number': 'Number'
        }

        self._country = country
        self._country_subdivision = country_subdivision
        self._number = number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DriversLicense':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DriversLicense of this DriversLicense.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this DriversLicense.

        The three digit country code of the principal owner. Valid values are Three digit alpha country codes as defined in ISO 3166-1. Required when Drivers License Number is provided. Should not be provided if Drivers License Number is not provided.

        :return: The country of this DriversLicense.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this DriversLicense.

        The three digit country code of the principal owner. Valid values are Three digit alpha country codes as defined in ISO 3166-1. Required when Drivers License Number is provided. Should not be provided if Drivers License Number is not provided.

        :param country: The country of this DriversLicense.
        :type country: str
        """

        self._country = country

    @property
    def country_subdivision(self):
        """Gets the country_subdivision of this DriversLicense.

        The abbreviated state or province code for a merchant location (only supported for US and Canada merchants).  Required when Drivers License Country is 'USA' . Should not be provided for non-US Drivers License Country.

        :return: The country_subdivision of this DriversLicense.
        :rtype: str
        """
        return self._country_subdivision

    @country_subdivision.setter
    def country_subdivision(self, country_subdivision):
        """Sets the country_subdivision of this DriversLicense.

        The abbreviated state or province code for a merchant location (only supported for US and Canada merchants).  Required when Drivers License Country is 'USA' . Should not be provided for non-US Drivers License Country.

        :param country_subdivision: The country_subdivision of this DriversLicense.
        :type country_subdivision: str
        """

        self._country_subdivision = country_subdivision

    @property
    def number(self):
        """Gets the number of this DriversLicense.

        The drivers license number of a principal owner.

        :return: The number of this DriversLicense.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this DriversLicense.

        The drivers license number of a principal owner.

        :param number: The number of this DriversLicense.
        :type number: str
        """

        self._number = number
