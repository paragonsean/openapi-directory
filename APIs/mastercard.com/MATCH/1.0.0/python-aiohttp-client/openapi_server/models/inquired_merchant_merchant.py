# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.merchant_match import MerchantMatch
from openapi_server.models.principal import Principal
from openapi_server.models.url_group import UrlGroup
from openapi_server import util


class InquiredMerchantMerchant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, added_by_acquirer_id: str=None, added_on_date: str=None, address: Address=None, alt_phone_number: str=None, country_subdivision_tax_id: str=None, doing_business_as_name: str=None, merchant_match: MerchantMatch=None, name: str=None, national_tax_id: str=None, phone_number: str=None, principal: Principal=None, service_prov_dba: str=None, service_prov_legal: str=None, termination_reason_code: str=None, url_group: UrlGroup=None):
        """InquiredMerchantMerchant - a model defined in OpenAPI

        :param added_by_acquirer_id: The added_by_acquirer_id of this InquiredMerchantMerchant.
        :param added_on_date: The added_on_date of this InquiredMerchantMerchant.
        :param address: The address of this InquiredMerchantMerchant.
        :param alt_phone_number: The alt_phone_number of this InquiredMerchantMerchant.
        :param country_subdivision_tax_id: The country_subdivision_tax_id of this InquiredMerchantMerchant.
        :param doing_business_as_name: The doing_business_as_name of this InquiredMerchantMerchant.
        :param merchant_match: The merchant_match of this InquiredMerchantMerchant.
        :param name: The name of this InquiredMerchantMerchant.
        :param national_tax_id: The national_tax_id of this InquiredMerchantMerchant.
        :param phone_number: The phone_number of this InquiredMerchantMerchant.
        :param principal: The principal of this InquiredMerchantMerchant.
        :param service_prov_dba: The service_prov_dba of this InquiredMerchantMerchant.
        :param service_prov_legal: The service_prov_legal of this InquiredMerchantMerchant.
        :param termination_reason_code: The termination_reason_code of this InquiredMerchantMerchant.
        :param url_group: The url_group of this InquiredMerchantMerchant.
        """
        self.openapi_types = {
            'added_by_acquirer_id': str,
            'added_on_date': str,
            'address': Address,
            'alt_phone_number': str,
            'country_subdivision_tax_id': str,
            'doing_business_as_name': str,
            'merchant_match': MerchantMatch,
            'name': str,
            'national_tax_id': str,
            'phone_number': str,
            'principal': Principal,
            'service_prov_dba': str,
            'service_prov_legal': str,
            'termination_reason_code': str,
            'url_group': UrlGroup
        }

        self.attribute_map = {
            'added_by_acquirer_id': 'AddedByAcquirerID',
            'added_on_date': 'AddedOnDate',
            'address': 'Address',
            'alt_phone_number': 'AltPhoneNumber',
            'country_subdivision_tax_id': 'CountrySubdivisionTaxId',
            'doing_business_as_name': 'DoingBusinessAsName',
            'merchant_match': 'MerchantMatch',
            'name': 'Name',
            'national_tax_id': 'NationalTaxId',
            'phone_number': 'PhoneNumber',
            'principal': 'Principal',
            'service_prov_dba': 'ServiceProvDBA',
            'service_prov_legal': 'ServiceProvLegal',
            'termination_reason_code': 'TerminationReasonCode',
            'url_group': 'UrlGroup'
        }

        self._added_by_acquirer_id = added_by_acquirer_id
        self._added_on_date = added_on_date
        self._address = address
        self._alt_phone_number = alt_phone_number
        self._country_subdivision_tax_id = country_subdivision_tax_id
        self._doing_business_as_name = doing_business_as_name
        self._merchant_match = merchant_match
        self._name = name
        self._national_tax_id = national_tax_id
        self._phone_number = phone_number
        self._principal = principal
        self._service_prov_dba = service_prov_dba
        self._service_prov_legal = service_prov_legal
        self._termination_reason_code = termination_reason_code
        self._url_group = url_group

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InquiredMerchantMerchant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InquiredMerchant_Merchant of this InquiredMerchantMerchant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def added_by_acquirer_id(self):
        """Gets the added_by_acquirer_id of this InquiredMerchantMerchant.

        The Member ICA that has added the merchant to the MATCH system

        :return: The added_by_acquirer_id of this InquiredMerchantMerchant.
        :rtype: str
        """
        return self._added_by_acquirer_id

    @added_by_acquirer_id.setter
    def added_by_acquirer_id(self, added_by_acquirer_id):
        """Sets the added_by_acquirer_id of this InquiredMerchantMerchant.

        The Member ICA that has added the merchant to the MATCH system

        :param added_by_acquirer_id: The added_by_acquirer_id of this InquiredMerchantMerchant.
        :type added_by_acquirer_id: str
        """

        self._added_by_acquirer_id = added_by_acquirer_id

    @property
    def added_on_date(self):
        """Gets the added_on_date of this InquiredMerchantMerchant.

        The date on which the merchant was added to the MATCH system. Format MM/DD/YYYY

        :return: The added_on_date of this InquiredMerchantMerchant.
        :rtype: str
        """
        return self._added_on_date

    @added_on_date.setter
    def added_on_date(self, added_on_date):
        """Sets the added_on_date of this InquiredMerchantMerchant.

        The date on which the merchant was added to the MATCH system. Format MM/DD/YYYY

        :param added_on_date: The added_on_date of this InquiredMerchantMerchant.
        :type added_on_date: str
        """

        self._added_on_date = added_on_date

    @property
    def address(self):
        """Gets the address of this InquiredMerchantMerchant.


        :return: The address of this InquiredMerchantMerchant.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this InquiredMerchantMerchant.


        :param address: The address of this InquiredMerchantMerchant.
        :type address: Address
        """

        self._address = address

    @property
    def alt_phone_number(self):
        """Gets the alt_phone_number of this InquiredMerchantMerchant.

        The Business or Merchant's alternate phone number.

        :return: The alt_phone_number of this InquiredMerchantMerchant.
        :rtype: str
        """
        return self._alt_phone_number

    @alt_phone_number.setter
    def alt_phone_number(self, alt_phone_number):
        """Sets the alt_phone_number of this InquiredMerchantMerchant.

        The Business or Merchant's alternate phone number.

        :param alt_phone_number: The alt_phone_number of this InquiredMerchantMerchant.
        :type alt_phone_number: str
        """

        self._alt_phone_number = alt_phone_number

    @property
    def country_subdivision_tax_id(self):
        """Gets the country_subdivision_tax_id of this InquiredMerchantMerchant.

        The Merchant's state tax ID; for the U.S region only. Return value will be hidden.

        :return: The country_subdivision_tax_id of this InquiredMerchantMerchant.
        :rtype: str
        """
        return self._country_subdivision_tax_id

    @country_subdivision_tax_id.setter
    def country_subdivision_tax_id(self, country_subdivision_tax_id):
        """Sets the country_subdivision_tax_id of this InquiredMerchantMerchant.

        The Merchant's state tax ID; for the U.S region only. Return value will be hidden.

        :param country_subdivision_tax_id: The country_subdivision_tax_id of this InquiredMerchantMerchant.
        :type country_subdivision_tax_id: str
        """

        self._country_subdivision_tax_id = country_subdivision_tax_id

    @property
    def doing_business_as_name(self):
        """Gets the doing_business_as_name of this InquiredMerchantMerchant.

        The name used by a merchant that could be different from the legal name of the business. Such as Bait R Us instead of the legal name, The Bait Shop

        :return: The doing_business_as_name of this InquiredMerchantMerchant.
        :rtype: str
        """
        return self._doing_business_as_name

    @doing_business_as_name.setter
    def doing_business_as_name(self, doing_business_as_name):
        """Sets the doing_business_as_name of this InquiredMerchantMerchant.

        The name used by a merchant that could be different from the legal name of the business. Such as Bait R Us instead of the legal name, The Bait Shop

        :param doing_business_as_name: The doing_business_as_name of this InquiredMerchantMerchant.
        :type doing_business_as_name: str
        """

        self._doing_business_as_name = doing_business_as_name

    @property
    def merchant_match(self):
        """Gets the merchant_match of this InquiredMerchantMerchant.


        :return: The merchant_match of this InquiredMerchantMerchant.
        :rtype: MerchantMatch
        """
        return self._merchant_match

    @merchant_match.setter
    def merchant_match(self, merchant_match):
        """Sets the merchant_match of this InquiredMerchantMerchant.


        :param merchant_match: The merchant_match of this InquiredMerchantMerchant.
        :type merchant_match: MerchantMatch
        """

        self._merchant_match = merchant_match

    @property
    def name(self):
        """Gets the name of this InquiredMerchantMerchant.

        The name of the Business which has been terminated.

        :return: The name of this InquiredMerchantMerchant.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InquiredMerchantMerchant.

        The name of the Business which has been terminated.

        :param name: The name of this InquiredMerchantMerchant.
        :type name: str
        """

        self._name = name

    @property
    def national_tax_id(self):
        """Gets the national_tax_id of this InquiredMerchantMerchant.

        The National tax ID or business registration number. Return value will be hidden.

        :return: The national_tax_id of this InquiredMerchantMerchant.
        :rtype: str
        """
        return self._national_tax_id

    @national_tax_id.setter
    def national_tax_id(self, national_tax_id):
        """Sets the national_tax_id of this InquiredMerchantMerchant.

        The National tax ID or business registration number. Return value will be hidden.

        :param national_tax_id: The national_tax_id of this InquiredMerchantMerchant.
        :type national_tax_id: str
        """

        self._national_tax_id = national_tax_id

    @property
    def phone_number(self):
        """Gets the phone_number of this InquiredMerchantMerchant.

        The Business or Merchant's phone number.

        :return: The phone_number of this InquiredMerchantMerchant.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this InquiredMerchantMerchant.

        The Business or Merchant's phone number.

        :param phone_number: The phone_number of this InquiredMerchantMerchant.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def principal(self):
        """Gets the principal of this InquiredMerchantMerchant.


        :return: The principal of this InquiredMerchantMerchant.
        :rtype: Principal
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this InquiredMerchantMerchant.


        :param principal: The principal of this InquiredMerchantMerchant.
        :type principal: Principal
        """

        self._principal = principal

    @property
    def service_prov_dba(self):
        """Gets the service_prov_dba of this InquiredMerchantMerchant.

        The name of the service provider associated with the merchant listed in the MATCH.

        :return: The service_prov_dba of this InquiredMerchantMerchant.
        :rtype: str
        """
        return self._service_prov_dba

    @service_prov_dba.setter
    def service_prov_dba(self, service_prov_dba):
        """Sets the service_prov_dba of this InquiredMerchantMerchant.

        The name of the service provider associated with the merchant listed in the MATCH.

        :param service_prov_dba: The service_prov_dba of this InquiredMerchantMerchant.
        :type service_prov_dba: str
        """

        self._service_prov_dba = service_prov_dba

    @property
    def service_prov_legal(self):
        """Gets the service_prov_legal of this InquiredMerchantMerchant.

        The name of the service provider associated with the merchant listed in the MATCH.

        :return: The service_prov_legal of this InquiredMerchantMerchant.
        :rtype: str
        """
        return self._service_prov_legal

    @service_prov_legal.setter
    def service_prov_legal(self, service_prov_legal):
        """Sets the service_prov_legal of this InquiredMerchantMerchant.

        The name of the service provider associated with the merchant listed in the MATCH.

        :param service_prov_legal: The service_prov_legal of this InquiredMerchantMerchant.
        :type service_prov_legal: str
        """

        self._service_prov_legal = service_prov_legal

    @property
    def termination_reason_code(self):
        """Gets the termination_reason_code of this InquiredMerchantMerchant.

        A two digit numeric code indication why a particular merchant was terminated.  01   Account Data Compromise, 02   Common Points of Purchase, 03   Laundering, 04   Excessive Chargebacks, 05   Excessive Fraud, 06   Reserved for Future Use, 07   Fraud Conviction, 08   MasterCard Questionable Merchant Audit Program, 09   Bankruptcy/Liquidation/Insolvency, 10   Violation of MasterCard Standards, 11   Merchant collusion, 12   PCI Data Security Standard, Noncompliance, 13   Illegal Transactions, 14   Identity Theft

        :return: The termination_reason_code of this InquiredMerchantMerchant.
        :rtype: str
        """
        return self._termination_reason_code

    @termination_reason_code.setter
    def termination_reason_code(self, termination_reason_code):
        """Sets the termination_reason_code of this InquiredMerchantMerchant.

        A two digit numeric code indication why a particular merchant was terminated.  01   Account Data Compromise, 02   Common Points of Purchase, 03   Laundering, 04   Excessive Chargebacks, 05   Excessive Fraud, 06   Reserved for Future Use, 07   Fraud Conviction, 08   MasterCard Questionable Merchant Audit Program, 09   Bankruptcy/Liquidation/Insolvency, 10   Violation of MasterCard Standards, 11   Merchant collusion, 12   PCI Data Security Standard, Noncompliance, 13   Illegal Transactions, 14   Identity Theft

        :param termination_reason_code: The termination_reason_code of this InquiredMerchantMerchant.
        :type termination_reason_code: str
        """

        self._termination_reason_code = termination_reason_code

    @property
    def url_group(self):
        """Gets the url_group of this InquiredMerchantMerchant.


        :return: The url_group of this InquiredMerchantMerchant.
        :rtype: UrlGroup
        """
        return self._url_group

    @url_group.setter
    def url_group(self, url_group):
        """Sets the url_group of this InquiredMerchantMerchant.


        :param url_group: The url_group of this InquiredMerchantMerchant.
        :type url_group: UrlGroup
        """

        self._url_group = url_group
