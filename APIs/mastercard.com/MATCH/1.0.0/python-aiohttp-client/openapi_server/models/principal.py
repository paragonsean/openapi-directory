# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.drivers_license import DriversLicense
from openapi_server.models.search_criteria import SearchCriteria
from openapi_server import util


class Principal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, alt_phone_number: str=None, drivers_license: DriversLicense=None, first_name: str=None, last_name: str=None, middle_initial: str=None, national_id: str=None, phone_number: str=None, search_criteria: SearchCriteria=None):
        """Principal - a model defined in OpenAPI

        :param address: The address of this Principal.
        :param alt_phone_number: The alt_phone_number of this Principal.
        :param drivers_license: The drivers_license of this Principal.
        :param first_name: The first_name of this Principal.
        :param last_name: The last_name of this Principal.
        :param middle_initial: The middle_initial of this Principal.
        :param national_id: The national_id of this Principal.
        :param phone_number: The phone_number of this Principal.
        :param search_criteria: The search_criteria of this Principal.
        """
        self.openapi_types = {
            'address': Address,
            'alt_phone_number': str,
            'drivers_license': DriversLicense,
            'first_name': str,
            'last_name': str,
            'middle_initial': str,
            'national_id': str,
            'phone_number': str,
            'search_criteria': SearchCriteria
        }

        self.attribute_map = {
            'address': 'Address',
            'alt_phone_number': 'AltPhoneNumber',
            'drivers_license': 'DriversLicense',
            'first_name': 'FirstName',
            'last_name': 'LastName',
            'middle_initial': 'MiddleInitial',
            'national_id': 'NationalId',
            'phone_number': 'PhoneNumber',
            'search_criteria': 'SearchCriteria'
        }

        self._address = address
        self._alt_phone_number = alt_phone_number
        self._drivers_license = drivers_license
        self._first_name = first_name
        self._last_name = last_name
        self._middle_initial = middle_initial
        self._national_id = national_id
        self._phone_number = phone_number
        self._search_criteria = search_criteria

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Principal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Principal of this Principal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Principal.


        :return: The address of this Principal.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Principal.


        :param address: The address of this Principal.
        :type address: Address
        """

        self._address = address

    @property
    def alt_phone_number(self):
        """Gets the alt_phone_number of this Principal.

        The Business or Merchant's alternate phone number, including the area code. Within the USA, phone numbers have a length of 10, and for out outside the US, a max length of 25. Within the U.S. phone numbers can not start with 0 or 1. If the number is outside the U.S. region; do not include the country code. The number must be digits only, with no format characters such as parenthesis or dashes.

        :return: The alt_phone_number of this Principal.
        :rtype: str
        """
        return self._alt_phone_number

    @alt_phone_number.setter
    def alt_phone_number(self, alt_phone_number):
        """Sets the alt_phone_number of this Principal.

        The Business or Merchant's alternate phone number, including the area code. Within the USA, phone numbers have a length of 10, and for out outside the US, a max length of 25. Within the U.S. phone numbers can not start with 0 or 1. If the number is outside the U.S. region; do not include the country code. The number must be digits only, with no format characters such as parenthesis or dashes.

        :param alt_phone_number: The alt_phone_number of this Principal.
        :type alt_phone_number: str
        """

        self._alt_phone_number = alt_phone_number

    @property
    def drivers_license(self):
        """Gets the drivers_license of this Principal.


        :return: The drivers_license of this Principal.
        :rtype: DriversLicense
        """
        return self._drivers_license

    @drivers_license.setter
    def drivers_license(self, drivers_license):
        """Sets the drivers_license of this Principal.


        :param drivers_license: The drivers_license of this Principal.
        :type drivers_license: DriversLicense
        """

        self._drivers_license = drivers_license

    @property
    def first_name(self):
        """Gets the first_name of this Principal.

        The first name of the principal owner of the business.

        :return: The first_name of this Principal.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Principal.

        The first name of the principal owner of the business.

        :param first_name: The first_name of this Principal.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Principal.

        The last name of the principal owner of the business.

        :return: The last_name of this Principal.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Principal.

        The last name of the principal owner of the business.

        :param last_name: The last_name of this Principal.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def middle_initial(self):
        """Gets the middle_initial of this Principal.

        THe middle initial of the name of the principal owner of the business.

        :return: The middle_initial of this Principal.
        :rtype: str
        """
        return self._middle_initial

    @middle_initial.setter
    def middle_initial(self, middle_initial):
        """Sets the middle_initial of this Principal.

        THe middle initial of the name of the principal owner of the business.

        :param middle_initial: The middle_initial of this Principal.
        :type middle_initial: str
        """

        self._middle_initial = middle_initial

    @property
    def national_id(self):
        """Gets the national_id of this Principal.

        The Social Security number of a principal owner. If the principal owner is not from the U.S. Region, then use their national ID card number.

        :return: The national_id of this Principal.
        :rtype: str
        """
        return self._national_id

    @national_id.setter
    def national_id(self, national_id):
        """Sets the national_id of this Principal.

        The Social Security number of a principal owner. If the principal owner is not from the U.S. Region, then use their national ID card number.

        :param national_id: The national_id of this Principal.
        :type national_id: str
        """

        self._national_id = national_id

    @property
    def phone_number(self):
        """Gets the phone_number of this Principal.

        The Business or Merchant's phone number, including the area code. Within the USA, phone numbers have a length of 10, and for outside the US, it can be any length with a maximum of 12 digits. Within the U.S. phone numbers can not start with 0 or 1. If the number is outside the U.S. region; do not include the country code. The phone number must be digits only, with no format characters such as parenthesis or dashes.

        :return: The phone_number of this Principal.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Principal.

        The Business or Merchant's phone number, including the area code. Within the USA, phone numbers have a length of 10, and for outside the US, it can be any length with a maximum of 12 digits. Within the U.S. phone numbers can not start with 0 or 1. If the number is outside the U.S. region; do not include the country code. The phone number must be digits only, with no format characters such as parenthesis or dashes.

        :param phone_number: The phone_number of this Principal.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def search_criteria(self):
        """Gets the search_criteria of this Principal.


        :return: The search_criteria of this Principal.
        :rtype: SearchCriteria
        """
        return self._search_criteria

    @search_criteria.setter
    def search_criteria(self, search_criteria):
        """Sets the search_criteria of this Principal.


        :param search_criteria: The search_criteria of this Principal.
        :type search_criteria: SearchCriteria
        """

        self._search_criteria = search_criteria
