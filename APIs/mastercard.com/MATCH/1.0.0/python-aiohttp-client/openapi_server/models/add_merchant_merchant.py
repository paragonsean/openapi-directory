# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.principal import Principal
from openapi_server import util


class AddMerchantMerchant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, alt_phone_number: str=None, cat_flag: str=None, comments: str=None, country_subdivision_tax_id: str=None, date_closed: str=None, date_opened: str=None, doing_business_as_name: str=None, merchant_category: str=None, merchant_id: str=None, name: str=None, national_tax_id: str=None, phone_number: str=None, principal: Principal=None, reason_code: str=None, service_prov_dba: str=None, service_prov_legal: str=None, url: List[str]=None):
        """AddMerchantMerchant - a model defined in OpenAPI

        :param address: The address of this AddMerchantMerchant.
        :param alt_phone_number: The alt_phone_number of this AddMerchantMerchant.
        :param cat_flag: The cat_flag of this AddMerchantMerchant.
        :param comments: The comments of this AddMerchantMerchant.
        :param country_subdivision_tax_id: The country_subdivision_tax_id of this AddMerchantMerchant.
        :param date_closed: The date_closed of this AddMerchantMerchant.
        :param date_opened: The date_opened of this AddMerchantMerchant.
        :param doing_business_as_name: The doing_business_as_name of this AddMerchantMerchant.
        :param merchant_category: The merchant_category of this AddMerchantMerchant.
        :param merchant_id: The merchant_id of this AddMerchantMerchant.
        :param name: The name of this AddMerchantMerchant.
        :param national_tax_id: The national_tax_id of this AddMerchantMerchant.
        :param phone_number: The phone_number of this AddMerchantMerchant.
        :param principal: The principal of this AddMerchantMerchant.
        :param reason_code: The reason_code of this AddMerchantMerchant.
        :param service_prov_dba: The service_prov_dba of this AddMerchantMerchant.
        :param service_prov_legal: The service_prov_legal of this AddMerchantMerchant.
        :param url: The url of this AddMerchantMerchant.
        """
        self.openapi_types = {
            'address': Address,
            'alt_phone_number': str,
            'cat_flag': str,
            'comments': str,
            'country_subdivision_tax_id': str,
            'date_closed': str,
            'date_opened': str,
            'doing_business_as_name': str,
            'merchant_category': str,
            'merchant_id': str,
            'name': str,
            'national_tax_id': str,
            'phone_number': str,
            'principal': Principal,
            'reason_code': str,
            'service_prov_dba': str,
            'service_prov_legal': str,
            'url': List[str]
        }

        self.attribute_map = {
            'address': 'Address',
            'alt_phone_number': 'AltPhoneNumber',
            'cat_flag': 'CATFlag',
            'comments': 'Comments',
            'country_subdivision_tax_id': 'CountrySubdivisionTaxId',
            'date_closed': 'DateClosed',
            'date_opened': 'DateOpened',
            'doing_business_as_name': 'DoingBusinessAsName',
            'merchant_category': 'MerchantCategory',
            'merchant_id': 'MerchantId',
            'name': 'Name',
            'national_tax_id': 'NationalTaxId',
            'phone_number': 'PhoneNumber',
            'principal': 'Principal',
            'reason_code': 'ReasonCode',
            'service_prov_dba': 'ServiceProvDBA',
            'service_prov_legal': 'ServiceProvLegal',
            'url': 'Url'
        }

        self._address = address
        self._alt_phone_number = alt_phone_number
        self._cat_flag = cat_flag
        self._comments = comments
        self._country_subdivision_tax_id = country_subdivision_tax_id
        self._date_closed = date_closed
        self._date_opened = date_opened
        self._doing_business_as_name = doing_business_as_name
        self._merchant_category = merchant_category
        self._merchant_id = merchant_id
        self._name = name
        self._national_tax_id = national_tax_id
        self._phone_number = phone_number
        self._principal = principal
        self._reason_code = reason_code
        self._service_prov_dba = service_prov_dba
        self._service_prov_legal = service_prov_legal
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddMerchantMerchant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddMerchantMerchant of this AddMerchantMerchant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this AddMerchantMerchant.


        :return: The address of this AddMerchantMerchant.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this AddMerchantMerchant.


        :param address: The address of this AddMerchantMerchant.
        :type address: Address
        """

        self._address = address

    @property
    def alt_phone_number(self):
        """Gets the alt_phone_number of this AddMerchantMerchant.

        The Business or Merchant's alternate phone number.

        :return: The alt_phone_number of this AddMerchantMerchant.
        :rtype: str
        """
        return self._alt_phone_number

    @alt_phone_number.setter
    def alt_phone_number(self, alt_phone_number):
        """Sets the alt_phone_number of this AddMerchantMerchant.

        The Business or Merchant's alternate phone number.

        :param alt_phone_number: The alt_phone_number of this AddMerchantMerchant.
        :type alt_phone_number: str
        """

        self._alt_phone_number = alt_phone_number

    @property
    def cat_flag(self):
        """Gets the cat_flag of this AddMerchantMerchant.

        Cardholder-activated terminal indicator.

        :return: The cat_flag of this AddMerchantMerchant.
        :rtype: str
        """
        return self._cat_flag

    @cat_flag.setter
    def cat_flag(self, cat_flag):
        """Sets the cat_flag of this AddMerchantMerchant.

        Cardholder-activated terminal indicator.

        :param cat_flag: The cat_flag of this AddMerchantMerchant.
        :type cat_flag: str
        """
        if cat_flag is None:
            raise ValueError("Invalid value for `cat_flag`, must not be `None`")

        self._cat_flag = cat_flag

    @property
    def comments(self):
        """Gets the comments of this AddMerchantMerchant.

        Brief comments on why Merchant is added

        :return: The comments of this AddMerchantMerchant.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this AddMerchantMerchant.

        Brief comments on why Merchant is added

        :param comments: The comments of this AddMerchantMerchant.
        :type comments: str
        """

        self._comments = comments

    @property
    def country_subdivision_tax_id(self):
        """Gets the country_subdivision_tax_id of this AddMerchantMerchant.

        The Merchant's state tax ID; for the U.S region only. Return value will be hidden.

        :return: The country_subdivision_tax_id of this AddMerchantMerchant.
        :rtype: str
        """
        return self._country_subdivision_tax_id

    @country_subdivision_tax_id.setter
    def country_subdivision_tax_id(self, country_subdivision_tax_id):
        """Sets the country_subdivision_tax_id of this AddMerchantMerchant.

        The Merchant's state tax ID; for the U.S region only. Return value will be hidden.

        :param country_subdivision_tax_id: The country_subdivision_tax_id of this AddMerchantMerchant.
        :type country_subdivision_tax_id: str
        """
        if country_subdivision_tax_id is None:
            raise ValueError("Invalid value for `country_subdivision_tax_id`, must not be `None`")

        self._country_subdivision_tax_id = country_subdivision_tax_id

    @property
    def date_closed(self):
        """Gets the date_closed of this AddMerchantMerchant.

        Date the agreement was terminated with the merchant

        :return: The date_closed of this AddMerchantMerchant.
        :rtype: str
        """
        return self._date_closed

    @date_closed.setter
    def date_closed(self, date_closed):
        """Sets the date_closed of this AddMerchantMerchant.

        Date the agreement was terminated with the merchant

        :param date_closed: The date_closed of this AddMerchantMerchant.
        :type date_closed: str
        """
        if date_closed is None:
            raise ValueError("Invalid value for `date_closed`, must not be `None`")

        self._date_closed = date_closed

    @property
    def date_opened(self):
        """Gets the date_opened of this AddMerchantMerchant.

        Date the merchant entered into agreement with the acquirer

        :return: The date_opened of this AddMerchantMerchant.
        :rtype: str
        """
        return self._date_opened

    @date_opened.setter
    def date_opened(self, date_opened):
        """Sets the date_opened of this AddMerchantMerchant.

        Date the merchant entered into agreement with the acquirer

        :param date_opened: The date_opened of this AddMerchantMerchant.
        :type date_opened: str
        """
        if date_opened is None:
            raise ValueError("Invalid value for `date_opened`, must not be `None`")

        self._date_opened = date_opened

    @property
    def doing_business_as_name(self):
        """Gets the doing_business_as_name of this AddMerchantMerchant.

        The name used by a merchant that could be different from the legal name of the business. Such as Bait R Us instead of the legal name, The Bait Shop

        :return: The doing_business_as_name of this AddMerchantMerchant.
        :rtype: str
        """
        return self._doing_business_as_name

    @doing_business_as_name.setter
    def doing_business_as_name(self, doing_business_as_name):
        """Sets the doing_business_as_name of this AddMerchantMerchant.

        The name used by a merchant that could be different from the legal name of the business. Such as Bait R Us instead of the legal name, The Bait Shop

        :param doing_business_as_name: The doing_business_as_name of this AddMerchantMerchant.
        :type doing_business_as_name: str
        """

        self._doing_business_as_name = doing_business_as_name

    @property
    def merchant_category(self):
        """Gets the merchant_category of this AddMerchantMerchant.

        A classification code used in authorization, clearing, and other transactions or reports to identify the type of merchant.

        :return: The merchant_category of this AddMerchantMerchant.
        :rtype: str
        """
        return self._merchant_category

    @merchant_category.setter
    def merchant_category(self, merchant_category):
        """Sets the merchant_category of this AddMerchantMerchant.

        A classification code used in authorization, clearing, and other transactions or reports to identify the type of merchant.

        :param merchant_category: The merchant_category of this AddMerchantMerchant.
        :type merchant_category: str
        """
        if merchant_category is None:
            raise ValueError("Invalid value for `merchant_category`, must not be `None`")

        self._merchant_category = merchant_category

    @property
    def merchant_id(self):
        """Gets the merchant_id of this AddMerchantMerchant.

        The identifier assigned to a merchant by an Acquirer. An Acquirer Id and Merchant Id combination must be unique.

        :return: The merchant_id of this AddMerchantMerchant.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this AddMerchantMerchant.

        The identifier assigned to a merchant by an Acquirer. An Acquirer Id and Merchant Id combination must be unique.

        :param merchant_id: The merchant_id of this AddMerchantMerchant.
        :type merchant_id: str
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")

        self._merchant_id = merchant_id

    @property
    def name(self):
        """Gets the name of this AddMerchantMerchant.

        The name of the Business which has been terminated.

        :return: The name of this AddMerchantMerchant.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddMerchantMerchant.

        The name of the Business which has been terminated.

        :param name: The name of this AddMerchantMerchant.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def national_tax_id(self):
        """Gets the national_tax_id of this AddMerchantMerchant.

        The National tax ID or business registration number. Return value will be hidden.

        :return: The national_tax_id of this AddMerchantMerchant.
        :rtype: str
        """
        return self._national_tax_id

    @national_tax_id.setter
    def national_tax_id(self, national_tax_id):
        """Sets the national_tax_id of this AddMerchantMerchant.

        The National tax ID or business registration number. Return value will be hidden.

        :param national_tax_id: The national_tax_id of this AddMerchantMerchant.
        :type national_tax_id: str
        """

        self._national_tax_id = national_tax_id

    @property
    def phone_number(self):
        """Gets the phone_number of this AddMerchantMerchant.

        The Business or Merchant's phone number.

        :return: The phone_number of this AddMerchantMerchant.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this AddMerchantMerchant.

        The Business or Merchant's phone number.

        :param phone_number: The phone_number of this AddMerchantMerchant.
        :type phone_number: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")

        self._phone_number = phone_number

    @property
    def principal(self):
        """Gets the principal of this AddMerchantMerchant.


        :return: The principal of this AddMerchantMerchant.
        :rtype: Principal
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this AddMerchantMerchant.


        :param principal: The principal of this AddMerchantMerchant.
        :type principal: Principal
        """

        self._principal = principal

    @property
    def reason_code(self):
        """Gets the reason_code of this AddMerchantMerchant.

        A two digit numeric code indication why a particular merchant was terminated.  01   Account Data Compromise, 02   Common Points of Purchase, 03   Laundering, 04   Excessive Chargebacks, 05   Excessive Fraud, 06   Reserved for Future Use, 07   Fraud Conviction, 08   MasterCard Questionable Merchant Audit Program, 09   Bankruptcy/Liquidation/Insolvency, 10   Violation of MasterCard Standards, 11   Merchant collusion, 12   PCI Data Security Standard, Noncompliance, 13   Illegal Transactions, 14   Identity Theft

        :return: The reason_code of this AddMerchantMerchant.
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this AddMerchantMerchant.

        A two digit numeric code indication why a particular merchant was terminated.  01   Account Data Compromise, 02   Common Points of Purchase, 03   Laundering, 04   Excessive Chargebacks, 05   Excessive Fraud, 06   Reserved for Future Use, 07   Fraud Conviction, 08   MasterCard Questionable Merchant Audit Program, 09   Bankruptcy/Liquidation/Insolvency, 10   Violation of MasterCard Standards, 11   Merchant collusion, 12   PCI Data Security Standard, Noncompliance, 13   Illegal Transactions, 14   Identity Theft

        :param reason_code: The reason_code of this AddMerchantMerchant.
        :type reason_code: str
        """
        if reason_code is None:
            raise ValueError("Invalid value for `reason_code`, must not be `None`")

        self._reason_code = reason_code

    @property
    def service_prov_dba(self):
        """Gets the service_prov_dba of this AddMerchantMerchant.

        The name of the service provider associated with the merchant listed in the MATCH.

        :return: The service_prov_dba of this AddMerchantMerchant.
        :rtype: str
        """
        return self._service_prov_dba

    @service_prov_dba.setter
    def service_prov_dba(self, service_prov_dba):
        """Sets the service_prov_dba of this AddMerchantMerchant.

        The name of the service provider associated with the merchant listed in the MATCH.

        :param service_prov_dba: The service_prov_dba of this AddMerchantMerchant.
        :type service_prov_dba: str
        """

        self._service_prov_dba = service_prov_dba

    @property
    def service_prov_legal(self):
        """Gets the service_prov_legal of this AddMerchantMerchant.

        The name of the service provider associated with the merchant listed in the MATCH.

        :return: The service_prov_legal of this AddMerchantMerchant.
        :rtype: str
        """
        return self._service_prov_legal

    @service_prov_legal.setter
    def service_prov_legal(self, service_prov_legal):
        """Sets the service_prov_legal of this AddMerchantMerchant.

        The name of the service provider associated with the merchant listed in the MATCH.

        :param service_prov_legal: The service_prov_legal of this AddMerchantMerchant.
        :type service_prov_legal: str
        """

        self._service_prov_legal = service_prov_legal

    @property
    def url(self):
        """Gets the url of this AddMerchantMerchant.


        :return: The url of this AddMerchantMerchant.
        :rtype: List[str]
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AddMerchantMerchant.


        :param url: The url of this AddMerchantMerchant.
        :type url: List[str]
        """

        self._url = url
