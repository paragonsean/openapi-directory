# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchCriteria(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: List[str]=None, min_possible_match_count: str=None, region: List[str]=None, search_all: str=None):
        """SearchCriteria - a model defined in OpenAPI

        :param country: The country of this SearchCriteria.
        :param min_possible_match_count: The min_possible_match_count of this SearchCriteria.
        :param region: The region of this SearchCriteria.
        :param search_all: The search_all of this SearchCriteria.
        """
        self.openapi_types = {
            'country': List[str],
            'min_possible_match_count': str,
            'region': List[str],
            'search_all': str
        }

        self.attribute_map = {
            'country': 'Country',
            'min_possible_match_count': 'MinPossibleMatchCount',
            'region': 'Region',
            'search_all': 'SearchAll'
        }

        self._country = country
        self._min_possible_match_count = min_possible_match_count
        self._region = region
        self._search_all = search_all

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchCriteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchCriteria of this SearchCriteria.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this SearchCriteria.


        :return: The country of this SearchCriteria.
        :rtype: List[str]
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this SearchCriteria.


        :param country: The country of this SearchCriteria.
        :type country: List[str]
        """

        self._country = country

    @property
    def min_possible_match_count(self):
        """Gets the min_possible_match_count of this SearchCriteria.

        Determines how many minimum matches present for a merchant or inquiry to appear in the results.

        :return: The min_possible_match_count of this SearchCriteria.
        :rtype: str
        """
        return self._min_possible_match_count

    @min_possible_match_count.setter
    def min_possible_match_count(self, min_possible_match_count):
        """Sets the min_possible_match_count of this SearchCriteria.

        Determines how many minimum matches present for a merchant or inquiry to appear in the results.

        :param min_possible_match_count: The min_possible_match_count of this SearchCriteria.
        :type min_possible_match_count: str
        """

        self._min_possible_match_count = min_possible_match_count

    @property
    def region(self):
        """Gets the region of this SearchCriteria.


        :return: The region of this SearchCriteria.
        :rtype: List[str]
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this SearchCriteria.


        :param region: The region of this SearchCriteria.
        :type region: List[str]
        """

        self._region = region

    @property
    def search_all(self):
        """Gets the search_all of this SearchCriteria.

        Determines if the inquiry is worldwide or not.

        :return: The search_all of this SearchCriteria.
        :rtype: str
        """
        return self._search_all

    @search_all.setter
    def search_all(self, search_all):
        """Sets the search_all of this SearchCriteria.

        Determines if the inquiry is worldwide or not.

        :param search_all: The search_all of this SearchCriteria.
        :type search_all: str
        """
        if search_all is None:
            raise ValueError("Invalid value for `search_all`, must not be `None`")

        self._search_all = search_all
