# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.principal_match import PrincipalMatch
from openapi_server import util


class MerchantMatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, alt_phone_number: str=None, country_subdivision_tax_id: str=None, doing_business_as_name: str=None, name: str=None, national_tax_id: str=None, phone_number: str=None, principal_match: List[PrincipalMatch]=None, service_prov_dba: str=None, service_prov_legal: str=None):
        """MerchantMatch - a model defined in OpenAPI

        :param address: The address of this MerchantMatch.
        :param alt_phone_number: The alt_phone_number of this MerchantMatch.
        :param country_subdivision_tax_id: The country_subdivision_tax_id of this MerchantMatch.
        :param doing_business_as_name: The doing_business_as_name of this MerchantMatch.
        :param name: The name of this MerchantMatch.
        :param national_tax_id: The national_tax_id of this MerchantMatch.
        :param phone_number: The phone_number of this MerchantMatch.
        :param principal_match: The principal_match of this MerchantMatch.
        :param service_prov_dba: The service_prov_dba of this MerchantMatch.
        :param service_prov_legal: The service_prov_legal of this MerchantMatch.
        """
        self.openapi_types = {
            'address': Address,
            'alt_phone_number': str,
            'country_subdivision_tax_id': str,
            'doing_business_as_name': str,
            'name': str,
            'national_tax_id': str,
            'phone_number': str,
            'principal_match': List[PrincipalMatch],
            'service_prov_dba': str,
            'service_prov_legal': str
        }

        self.attribute_map = {
            'address': 'Address',
            'alt_phone_number': 'AltPhoneNumber',
            'country_subdivision_tax_id': 'CountrySubdivisionTaxId',
            'doing_business_as_name': 'DoingBusinessAsName',
            'name': 'Name',
            'national_tax_id': 'NationalTaxId',
            'phone_number': 'PhoneNumber',
            'principal_match': 'PrincipalMatch',
            'service_prov_dba': 'ServiceProvDBA',
            'service_prov_legal': 'ServiceProvLegal'
        }

        self._address = address
        self._alt_phone_number = alt_phone_number
        self._country_subdivision_tax_id = country_subdivision_tax_id
        self._doing_business_as_name = doing_business_as_name
        self._name = name
        self._national_tax_id = national_tax_id
        self._phone_number = phone_number
        self._principal_match = principal_match
        self._service_prov_dba = service_prov_dba
        self._service_prov_legal = service_prov_legal

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MerchantMatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MerchantMatch of this MerchantMatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this MerchantMatch.


        :return: The address of this MerchantMatch.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this MerchantMatch.


        :param address: The address of this MerchantMatch.
        :type address: Address
        """

        self._address = address

    @property
    def alt_phone_number(self):
        """Gets the alt_phone_number of this MerchantMatch.

        The Business or Merchant's alternate phone number.

        :return: The alt_phone_number of this MerchantMatch.
        :rtype: str
        """
        return self._alt_phone_number

    @alt_phone_number.setter
    def alt_phone_number(self, alt_phone_number):
        """Sets the alt_phone_number of this MerchantMatch.

        The Business or Merchant's alternate phone number.

        :param alt_phone_number: The alt_phone_number of this MerchantMatch.
        :type alt_phone_number: str
        """

        self._alt_phone_number = alt_phone_number

    @property
    def country_subdivision_tax_id(self):
        """Gets the country_subdivision_tax_id of this MerchantMatch.

        The Merchant's state tax ID; for the U.S region only. Return value will be hidden.

        :return: The country_subdivision_tax_id of this MerchantMatch.
        :rtype: str
        """
        return self._country_subdivision_tax_id

    @country_subdivision_tax_id.setter
    def country_subdivision_tax_id(self, country_subdivision_tax_id):
        """Sets the country_subdivision_tax_id of this MerchantMatch.

        The Merchant's state tax ID; for the U.S region only. Return value will be hidden.

        :param country_subdivision_tax_id: The country_subdivision_tax_id of this MerchantMatch.
        :type country_subdivision_tax_id: str
        """

        self._country_subdivision_tax_id = country_subdivision_tax_id

    @property
    def doing_business_as_name(self):
        """Gets the doing_business_as_name of this MerchantMatch.

        The name used by a merchant that could be different from the legal name of the business. Such as Bait R Us instead of the legal name, The Bait Shop

        :return: The doing_business_as_name of this MerchantMatch.
        :rtype: str
        """
        return self._doing_business_as_name

    @doing_business_as_name.setter
    def doing_business_as_name(self, doing_business_as_name):
        """Sets the doing_business_as_name of this MerchantMatch.

        The name used by a merchant that could be different from the legal name of the business. Such as Bait R Us instead of the legal name, The Bait Shop

        :param doing_business_as_name: The doing_business_as_name of this MerchantMatch.
        :type doing_business_as_name: str
        """

        self._doing_business_as_name = doing_business_as_name

    @property
    def name(self):
        """Gets the name of this MerchantMatch.

        The name of the Business which has been terminated.

        :return: The name of this MerchantMatch.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MerchantMatch.

        The name of the Business which has been terminated.

        :param name: The name of this MerchantMatch.
        :type name: str
        """

        self._name = name

    @property
    def national_tax_id(self):
        """Gets the national_tax_id of this MerchantMatch.

        The National tax ID or business registration number. Return value will be hidden.

        :return: The national_tax_id of this MerchantMatch.
        :rtype: str
        """
        return self._national_tax_id

    @national_tax_id.setter
    def national_tax_id(self, national_tax_id):
        """Sets the national_tax_id of this MerchantMatch.

        The National tax ID or business registration number. Return value will be hidden.

        :param national_tax_id: The national_tax_id of this MerchantMatch.
        :type national_tax_id: str
        """

        self._national_tax_id = national_tax_id

    @property
    def phone_number(self):
        """Gets the phone_number of this MerchantMatch.

        The Business or Merchant's phone number.

        :return: The phone_number of this MerchantMatch.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this MerchantMatch.

        The Business or Merchant's phone number.

        :param phone_number: The phone_number of this MerchantMatch.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def principal_match(self):
        """Gets the principal_match of this MerchantMatch.


        :return: The principal_match of this MerchantMatch.
        :rtype: List[PrincipalMatch]
        """
        return self._principal_match

    @principal_match.setter
    def principal_match(self, principal_match):
        """Sets the principal_match of this MerchantMatch.


        :param principal_match: The principal_match of this MerchantMatch.
        :type principal_match: List[PrincipalMatch]
        """

        self._principal_match = principal_match

    @property
    def service_prov_dba(self):
        """Gets the service_prov_dba of this MerchantMatch.

        The name of the service provider associated with the merchant listed in the MATCH.

        :return: The service_prov_dba of this MerchantMatch.
        :rtype: str
        """
        return self._service_prov_dba

    @service_prov_dba.setter
    def service_prov_dba(self, service_prov_dba):
        """Sets the service_prov_dba of this MerchantMatch.

        The name of the service provider associated with the merchant listed in the MATCH.

        :param service_prov_dba: The service_prov_dba of this MerchantMatch.
        :type service_prov_dba: str
        """

        self._service_prov_dba = service_prov_dba

    @property
    def service_prov_legal(self):
        """Gets the service_prov_legal of this MerchantMatch.

        The name of the service provider associated with the merchant listed in the MATCH.

        :return: The service_prov_legal of this MerchantMatch.
        :rtype: str
        """
        return self._service_prov_legal

    @service_prov_legal.setter
    def service_prov_legal(self, service_prov_legal):
        """Sets the service_prov_legal of this MerchantMatch.

        The name of the service provider associated with the merchant listed in the MATCH.

        :param service_prov_legal: The service_prov_legal of this MerchantMatch.
        :type service_prov_legal: str
        """

        self._service_prov_legal = service_prov_legal
