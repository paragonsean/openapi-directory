# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Contact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bank_name: str=None, email_address: str=None, fax_number: str=None, first_name: str=None, last_name: str=None, phone_number: str=None, region: str=None):
        """Contact - a model defined in OpenAPI

        :param bank_name: The bank_name of this Contact.
        :param email_address: The email_address of this Contact.
        :param fax_number: The fax_number of this Contact.
        :param first_name: The first_name of this Contact.
        :param last_name: The last_name of this Contact.
        :param phone_number: The phone_number of this Contact.
        :param region: The region of this Contact.
        """
        self.openapi_types = {
            'bank_name': str,
            'email_address': str,
            'fax_number': str,
            'first_name': str,
            'last_name': str,
            'phone_number': str,
            'region': str
        }

        self.attribute_map = {
            'bank_name': 'BankName',
            'email_address': 'EmailAddress',
            'fax_number': 'FaxNumber',
            'first_name': 'FirstName',
            'last_name': 'LastName',
            'phone_number': 'PhoneNumber',
            'region': 'Region'
        }

        self._bank_name = bank_name
        self._email_address = email_address
        self._fax_number = fax_number
        self._first_name = first_name
        self._last_name = last_name
        self._phone_number = phone_number
        self._region = region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Contact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Contact of this Contact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bank_name(self):
        """Gets the bank_name of this Contact.

        The name of acquiring bank.

        :return: The bank_name of this Contact.
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """Sets the bank_name of this Contact.

        The name of acquiring bank.

        :param bank_name: The bank_name of this Contact.
        :type bank_name: str
        """

        self._bank_name = bank_name

    @property
    def email_address(self):
        """Gets the email_address of this Contact.

        The Email address of primary contact of acquiring bank. The results may return information for more than one Contact.

        :return: The email_address of this Contact.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this Contact.

        The Email address of primary contact of acquiring bank. The results may return information for more than one Contact.

        :param email_address: The email_address of this Contact.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def fax_number(self):
        """Gets the fax_number of this Contact.

        The Fax Number of primary contact of acquiring bank. The results may return information for more than one Contact.

        :return: The fax_number of this Contact.
        :rtype: str
        """
        return self._fax_number

    @fax_number.setter
    def fax_number(self, fax_number):
        """Sets the fax_number of this Contact.

        The Fax Number of primary contact of acquiring bank. The results may return information for more than one Contact.

        :param fax_number: The fax_number of this Contact.
        :type fax_number: str
        """

        self._fax_number = fax_number

    @property
    def first_name(self):
        """Gets the first_name of this Contact.

        The first name of primary contact of acquiring bank. The results may return information for more than one Contact.

        :return: The first_name of this Contact.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Contact.

        The first name of primary contact of acquiring bank. The results may return information for more than one Contact.

        :param first_name: The first_name of this Contact.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Contact.

        The last name of primary contact of acquiring bank. The results may return information for more than one Contact.

        :return: The last_name of this Contact.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Contact.

        The last name of primary contact of acquiring bank. The results may return information for more than one Contact.

        :param last_name: The last_name of this Contact.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def phone_number(self):
        """Gets the phone_number of this Contact.

        The Phone Number of primary contact of acquiring bank. The results may return information for more than one Contact.

        :return: The phone_number of this Contact.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Contact.

        The Phone Number of primary contact of acquiring bank. The results may return information for more than one Contact.

        :param phone_number: The phone_number of this Contact.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def region(self):
        """Gets the region of this Contact.

        The region of acquiring bank. The results may return information for more than one Contact.

        :return: The region of this Contact.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Contact.

        The region of acquiring bank. The results may return information for more than one Contact.

        :param region: The region of this Contact.
        :type region: str
        """

        self._region = region
