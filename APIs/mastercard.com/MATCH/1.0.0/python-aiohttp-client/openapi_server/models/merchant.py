# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.principal import Principal
from openapi_server.models.search_criteria import SearchCriteria
from openapi_server.models.url_group import UrlGroup
from openapi_server import util


class Merchant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, added_by_acquirer_id: str=None, added_on_date: str=None, address: Address=None, alt_phone_number: str=None, country_subdivision_tax_id: str=None, doing_business_as_name: str=None, name: str=None, national_tax_id: str=None, phone_number: str=None, principal: List[Principal]=None, search_criteria: SearchCriteria=None, service_prov_dba: str=None, service_prov_legal: str=None, termination_reason_code: str=None, url: str=None, url_group: List[UrlGroup]=None):
        """Merchant - a model defined in OpenAPI

        :param added_by_acquirer_id: The added_by_acquirer_id of this Merchant.
        :param added_on_date: The added_on_date of this Merchant.
        :param address: The address of this Merchant.
        :param alt_phone_number: The alt_phone_number of this Merchant.
        :param country_subdivision_tax_id: The country_subdivision_tax_id of this Merchant.
        :param doing_business_as_name: The doing_business_as_name of this Merchant.
        :param name: The name of this Merchant.
        :param national_tax_id: The national_tax_id of this Merchant.
        :param phone_number: The phone_number of this Merchant.
        :param principal: The principal of this Merchant.
        :param search_criteria: The search_criteria of this Merchant.
        :param service_prov_dba: The service_prov_dba of this Merchant.
        :param service_prov_legal: The service_prov_legal of this Merchant.
        :param termination_reason_code: The termination_reason_code of this Merchant.
        :param url: The url of this Merchant.
        :param url_group: The url_group of this Merchant.
        """
        self.openapi_types = {
            'added_by_acquirer_id': str,
            'added_on_date': str,
            'address': Address,
            'alt_phone_number': str,
            'country_subdivision_tax_id': str,
            'doing_business_as_name': str,
            'name': str,
            'national_tax_id': str,
            'phone_number': str,
            'principal': List[Principal],
            'search_criteria': SearchCriteria,
            'service_prov_dba': str,
            'service_prov_legal': str,
            'termination_reason_code': str,
            'url': str,
            'url_group': List[UrlGroup]
        }

        self.attribute_map = {
            'added_by_acquirer_id': 'AddedByAcquirerID',
            'added_on_date': 'AddedOnDate',
            'address': 'Address',
            'alt_phone_number': 'AltPhoneNumber',
            'country_subdivision_tax_id': 'CountrySubdivisionTaxId',
            'doing_business_as_name': 'DoingBusinessAsName',
            'name': 'Name',
            'national_tax_id': 'NationalTaxId',
            'phone_number': 'PhoneNumber',
            'principal': 'Principal',
            'search_criteria': 'SearchCriteria',
            'service_prov_dba': 'ServiceProvDBA',
            'service_prov_legal': 'ServiceProvLegal',
            'termination_reason_code': 'TerminationReasonCode',
            'url': 'Url',
            'url_group': 'UrlGroup'
        }

        self._added_by_acquirer_id = added_by_acquirer_id
        self._added_on_date = added_on_date
        self._address = address
        self._alt_phone_number = alt_phone_number
        self._country_subdivision_tax_id = country_subdivision_tax_id
        self._doing_business_as_name = doing_business_as_name
        self._name = name
        self._national_tax_id = national_tax_id
        self._phone_number = phone_number
        self._principal = principal
        self._search_criteria = search_criteria
        self._service_prov_dba = service_prov_dba
        self._service_prov_legal = service_prov_legal
        self._termination_reason_code = termination_reason_code
        self._url = url
        self._url_group = url_group

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Merchant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Merchant of this Merchant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def added_by_acquirer_id(self):
        """Gets the added_by_acquirer_id of this Merchant.

        The Member ICA that has added the merchant to the MATCH system

        :return: The added_by_acquirer_id of this Merchant.
        :rtype: str
        """
        return self._added_by_acquirer_id

    @added_by_acquirer_id.setter
    def added_by_acquirer_id(self, added_by_acquirer_id):
        """Sets the added_by_acquirer_id of this Merchant.

        The Member ICA that has added the merchant to the MATCH system

        :param added_by_acquirer_id: The added_by_acquirer_id of this Merchant.
        :type added_by_acquirer_id: str
        """

        self._added_by_acquirer_id = added_by_acquirer_id

    @property
    def added_on_date(self):
        """Gets the added_on_date of this Merchant.

        Date the merchant was added to the MATCH database.

        :return: The added_on_date of this Merchant.
        :rtype: str
        """
        return self._added_on_date

    @added_on_date.setter
    def added_on_date(self, added_on_date):
        """Sets the added_on_date of this Merchant.

        Date the merchant was added to the MATCH database.

        :param added_on_date: The added_on_date of this Merchant.
        :type added_on_date: str
        """

        self._added_on_date = added_on_date

    @property
    def address(self):
        """Gets the address of this Merchant.


        :return: The address of this Merchant.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Merchant.


        :param address: The address of this Merchant.
        :type address: Address
        """

        self._address = address

    @property
    def alt_phone_number(self):
        """Gets the alt_phone_number of this Merchant.

        The Business or Merchant's alternate phone number, including the area code. Within the USA, phone numbers have a length of 10, and for out outside the US, a max length of 25. Within the U.S. phone numbers can not start with 0 or 1. If the number is outside the U.S. region; do not include the country code. The number must be digits only, with no format characters such as parenthesis or dashes.

        :return: The alt_phone_number of this Merchant.
        :rtype: str
        """
        return self._alt_phone_number

    @alt_phone_number.setter
    def alt_phone_number(self, alt_phone_number):
        """Sets the alt_phone_number of this Merchant.

        The Business or Merchant's alternate phone number, including the area code. Within the USA, phone numbers have a length of 10, and for out outside the US, a max length of 25. Within the U.S. phone numbers can not start with 0 or 1. If the number is outside the U.S. region; do not include the country code. The number must be digits only, with no format characters such as parenthesis or dashes.

        :param alt_phone_number: The alt_phone_number of this Merchant.
        :type alt_phone_number: str
        """

        self._alt_phone_number = alt_phone_number

    @property
    def country_subdivision_tax_id(self):
        """Gets the country_subdivision_tax_id of this Merchant.

        The Merchant Country Subdivision tax ID, leave blank if not in the U.S region.

        :return: The country_subdivision_tax_id of this Merchant.
        :rtype: str
        """
        return self._country_subdivision_tax_id

    @country_subdivision_tax_id.setter
    def country_subdivision_tax_id(self, country_subdivision_tax_id):
        """Sets the country_subdivision_tax_id of this Merchant.

        The Merchant Country Subdivision tax ID, leave blank if not in the U.S region.

        :param country_subdivision_tax_id: The country_subdivision_tax_id of this Merchant.
        :type country_subdivision_tax_id: str
        """

        self._country_subdivision_tax_id = country_subdivision_tax_id

    @property
    def doing_business_as_name(self):
        """Gets the doing_business_as_name of this Merchant.

        The name used by a merchant that could be different from the legal name of the business. Such as Bait R Us instead of the legal name, The Bait Shop.

        :return: The doing_business_as_name of this Merchant.
        :rtype: str
        """
        return self._doing_business_as_name

    @doing_business_as_name.setter
    def doing_business_as_name(self, doing_business_as_name):
        """Sets the doing_business_as_name of this Merchant.

        The name used by a merchant that could be different from the legal name of the business. Such as Bait R Us instead of the legal name, The Bait Shop.

        :param doing_business_as_name: The doing_business_as_name of this Merchant.
        :type doing_business_as_name: str
        """

        self._doing_business_as_name = doing_business_as_name

    @property
    def name(self):
        """Gets the name of this Merchant.

        The name of the business assigned by the principal owner(s)

        :return: The name of this Merchant.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Merchant.

        The name of the business assigned by the principal owner(s)

        :param name: The name of this Merchant.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def national_tax_id(self):
        """Gets the national_tax_id of this Merchant.

        The Merchant national tax ID, leave blank if not in the U.S region.

        :return: The national_tax_id of this Merchant.
        :rtype: str
        """
        return self._national_tax_id

    @national_tax_id.setter
    def national_tax_id(self, national_tax_id):
        """Sets the national_tax_id of this Merchant.

        The Merchant national tax ID, leave blank if not in the U.S region.

        :param national_tax_id: The national_tax_id of this Merchant.
        :type national_tax_id: str
        """

        self._national_tax_id = national_tax_id

    @property
    def phone_number(self):
        """Gets the phone_number of this Merchant.

        The Business or Merchant's phone number, including the area code. Within the USA, phone numbers have a length of 10, and for outside the US, it can be any length with a maximum of 12 digits. Within the U.S. phone numbers can not start with 0 or 1. If the number is outside the U.S. region; do not include the country code. The phone number must be digits only, with no format characters such as parenthesis or dashes.

        :return: The phone_number of this Merchant.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Merchant.

        The Business or Merchant's phone number, including the area code. Within the USA, phone numbers have a length of 10, and for outside the US, it can be any length with a maximum of 12 digits. Within the U.S. phone numbers can not start with 0 or 1. If the number is outside the U.S. region; do not include the country code. The phone number must be digits only, with no format characters such as parenthesis or dashes.

        :param phone_number: The phone_number of this Merchant.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def principal(self):
        """Gets the principal of this Merchant.

        The details for the principal owner of the business.  A maximum of 5 principals may be submitted.

        :return: The principal of this Merchant.
        :rtype: List[Principal]
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this Merchant.

        The details for the principal owner of the business.  A maximum of 5 principals may be submitted.

        :param principal: The principal of this Merchant.
        :type principal: List[Principal]
        """

        self._principal = principal

    @property
    def search_criteria(self):
        """Gets the search_criteria of this Merchant.


        :return: The search_criteria of this Merchant.
        :rtype: SearchCriteria
        """
        return self._search_criteria

    @search_criteria.setter
    def search_criteria(self, search_criteria):
        """Sets the search_criteria of this Merchant.


        :param search_criteria: The search_criteria of this Merchant.
        :type search_criteria: SearchCriteria
        """

        self._search_criteria = search_criteria

    @property
    def service_prov_dba(self):
        """Gets the service_prov_dba of this Merchant.

        The name of the service provider associated with the merchant listed in the MATCH

        :return: The service_prov_dba of this Merchant.
        :rtype: str
        """
        return self._service_prov_dba

    @service_prov_dba.setter
    def service_prov_dba(self, service_prov_dba):
        """Sets the service_prov_dba of this Merchant.

        The name of the service provider associated with the merchant listed in the MATCH

        :param service_prov_dba: The service_prov_dba of this Merchant.
        :type service_prov_dba: str
        """

        self._service_prov_dba = service_prov_dba

    @property
    def service_prov_legal(self):
        """Gets the service_prov_legal of this Merchant.

        The name of the service provider associated with the merchant listed in the MATCH

        :return: The service_prov_legal of this Merchant.
        :rtype: str
        """
        return self._service_prov_legal

    @service_prov_legal.setter
    def service_prov_legal(self, service_prov_legal):
        """Sets the service_prov_legal of this Merchant.

        The name of the service provider associated with the merchant listed in the MATCH

        :param service_prov_legal: The service_prov_legal of this Merchant.
        :type service_prov_legal: str
        """

        self._service_prov_legal = service_prov_legal

    @property
    def termination_reason_code(self):
        """Gets the termination_reason_code of this Merchant.

        A two digit numeric code indication why a particular merchant was terminated.  01   Account Data Compromise, 02   Common Points of Purchase, 03   Laundering, 04   Excessive Chargebacks, 05   Excessive Fraud, 06   Reserved for Future Use, 07   Fraud Conviction, 08   MasterCard Questionable Merchant Audit Program, 09   Bankruptcy/Liquidation/Insolvency, 10   Violation of MasterCard Standards, 11   Merchant collusion, 12   PCI Data Security Standard, Noncompliance, 13   Illegal Transactions, 14   Identity Theft

        :return: The termination_reason_code of this Merchant.
        :rtype: str
        """
        return self._termination_reason_code

    @termination_reason_code.setter
    def termination_reason_code(self, termination_reason_code):
        """Sets the termination_reason_code of this Merchant.

        A two digit numeric code indication why a particular merchant was terminated.  01   Account Data Compromise, 02   Common Points of Purchase, 03   Laundering, 04   Excessive Chargebacks, 05   Excessive Fraud, 06   Reserved for Future Use, 07   Fraud Conviction, 08   MasterCard Questionable Merchant Audit Program, 09   Bankruptcy/Liquidation/Insolvency, 10   Violation of MasterCard Standards, 11   Merchant collusion, 12   PCI Data Security Standard, Noncompliance, 13   Illegal Transactions, 14   Identity Theft

        :param termination_reason_code: The termination_reason_code of this Merchant.
        :type termination_reason_code: str
        """

        self._termination_reason_code = termination_reason_code

    @property
    def url(self):
        """Gets the url of this Merchant.

        Website address of the merchant. A request may include multiple URLs. The total cumulative size of the URLs cannot exceed 20,000 bytes.

        :return: The url of this Merchant.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Merchant.

        Website address of the merchant. A request may include multiple URLs. The total cumulative size of the URLs cannot exceed 20,000 bytes.

        :param url: The url of this Merchant.
        :type url: str
        """

        self._url = url

    @property
    def url_group(self):
        """Gets the url_group of this Merchant.


        :return: The url_group of this Merchant.
        :rtype: List[UrlGroup]
        """
        return self._url_group

    @url_group.setter
    def url_group(self, url_group):
        """Sets the url_group of this Merchant.


        :param url_group: The url_group of this Merchant.
        :type url_group: List[UrlGroup]
        """

        self._url_group = url_group
