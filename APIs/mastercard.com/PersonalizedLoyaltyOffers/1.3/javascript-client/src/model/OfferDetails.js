/**
 * Personalized Offers
 * This API provides content for financial instutions participating in Mastercard Personalized Offers to use in online and mobile banking applications for cardholders.
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DetailPostpaidCreditOffer from './DetailPostpaidCreditOffer';
import Merchant from './Merchant';
import OfferDisplay from './OfferDisplay';
import OfferMedia from './OfferMedia';

/**
 * The OfferDetails model module.
 * @module model/OfferDetails
 * @version 1.3
 */
class OfferDetails {
    /**
     * Constructs a new <code>OfferDetails</code>.
     * @alias module:model/OfferDetails
     */
    constructor() { 
        
        OfferDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OfferDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OfferDetails} obj Optional instance to populate.
     * @return {module:model/OfferDetails} The populated <code>OfferDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OfferDetails();

            if (data.hasOwnProperty('CurrencyCode')) {
                obj['CurrencyCode'] = ApiClient.convertToType(data['CurrencyCode'], 'String');
            }
            if (data.hasOwnProperty('DetailPostpaidCreditOffer')) {
                obj['DetailPostpaidCreditOffer'] = DetailPostpaidCreditOffer.constructFromObject(data['DetailPostpaidCreditOffer']);
            }
            if (data.hasOwnProperty('EventEndDate')) {
                obj['EventEndDate'] = ApiClient.convertToType(data['EventEndDate'], 'Date');
            }
            if (data.hasOwnProperty('EventStartDate')) {
                obj['EventStartDate'] = ApiClient.convertToType(data['EventStartDate'], 'Date');
            }
            if (data.hasOwnProperty('Headline')) {
                obj['Headline'] = ApiClient.convertToType(data['Headline'], 'String');
            }
            if (data.hasOwnProperty('Language')) {
                obj['Language'] = ApiClient.convertToType(data['Language'], 'String');
            }
            if (data.hasOwnProperty('LinkOut')) {
                obj['LinkOut'] = ApiClient.convertToType(data['LinkOut'], Object);
            }
            if (data.hasOwnProperty('LongDescription')) {
                obj['LongDescription'] = ApiClient.convertToType(data['LongDescription'], 'String');
            }
            if (data.hasOwnProperty('Merchant')) {
                obj['Merchant'] = Merchant.constructFromObject(data['Merchant']);
            }
            if (data.hasOwnProperty('OfferDisplay')) {
                obj['OfferDisplay'] = OfferDisplay.constructFromObject(data['OfferDisplay']);
            }
            if (data.hasOwnProperty('OfferId')) {
                obj['OfferId'] = ApiClient.convertToType(data['OfferId'], 'String');
            }
            if (data.hasOwnProperty('OfferMedia')) {
                obj['OfferMedia'] = OfferMedia.constructFromObject(data['OfferMedia']);
            }
            if (data.hasOwnProperty('OfferSource')) {
                obj['OfferSource'] = ApiClient.convertToType(data['OfferSource'], 'String');
            }
            if (data.hasOwnProperty('OfferType')) {
                obj['OfferType'] = ApiClient.convertToType(data['OfferType'], 'String');
            }
            if (data.hasOwnProperty('OfferUrl')) {
                obj['OfferUrl'] = ApiClient.convertToType(data['OfferUrl'], Object);
            }
            if (data.hasOwnProperty('RedemptionMode')) {
                obj['RedemptionMode'] = ApiClient.convertToType(data['RedemptionMode'], 'String');
            }
            if (data.hasOwnProperty('RedemptionType')) {
                obj['RedemptionType'] = ApiClient.convertToType(data['RedemptionType'], 'String');
            }
            if (data.hasOwnProperty('ShortDescription')) {
                obj['ShortDescription'] = ApiClient.convertToType(data['ShortDescription'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OfferDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OfferDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['CurrencyCode'] && !(typeof data['CurrencyCode'] === 'string' || data['CurrencyCode'] instanceof String)) {
            throw new Error("Expected the field `CurrencyCode` to be a primitive type in the JSON string but got " + data['CurrencyCode']);
        }
        // validate the optional field `DetailPostpaidCreditOffer`
        if (data['DetailPostpaidCreditOffer']) { // data not null
          DetailPostpaidCreditOffer.validateJSON(data['DetailPostpaidCreditOffer']);
        }
        // ensure the json data is a string
        if (data['Headline'] && !(typeof data['Headline'] === 'string' || data['Headline'] instanceof String)) {
            throw new Error("Expected the field `Headline` to be a primitive type in the JSON string but got " + data['Headline']);
        }
        // ensure the json data is a string
        if (data['Language'] && !(typeof data['Language'] === 'string' || data['Language'] instanceof String)) {
            throw new Error("Expected the field `Language` to be a primitive type in the JSON string but got " + data['Language']);
        }
        // ensure the json data is a string
        if (data['LongDescription'] && !(typeof data['LongDescription'] === 'string' || data['LongDescription'] instanceof String)) {
            throw new Error("Expected the field `LongDescription` to be a primitive type in the JSON string but got " + data['LongDescription']);
        }
        // validate the optional field `Merchant`
        if (data['Merchant']) { // data not null
          Merchant.validateJSON(data['Merchant']);
        }
        // validate the optional field `OfferDisplay`
        if (data['OfferDisplay']) { // data not null
          OfferDisplay.validateJSON(data['OfferDisplay']);
        }
        // ensure the json data is a string
        if (data['OfferId'] && !(typeof data['OfferId'] === 'string' || data['OfferId'] instanceof String)) {
            throw new Error("Expected the field `OfferId` to be a primitive type in the JSON string but got " + data['OfferId']);
        }
        // validate the optional field `OfferMedia`
        if (data['OfferMedia']) { // data not null
          OfferMedia.validateJSON(data['OfferMedia']);
        }
        // ensure the json data is a string
        if (data['OfferSource'] && !(typeof data['OfferSource'] === 'string' || data['OfferSource'] instanceof String)) {
            throw new Error("Expected the field `OfferSource` to be a primitive type in the JSON string but got " + data['OfferSource']);
        }
        // ensure the json data is a string
        if (data['OfferType'] && !(typeof data['OfferType'] === 'string' || data['OfferType'] instanceof String)) {
            throw new Error("Expected the field `OfferType` to be a primitive type in the JSON string but got " + data['OfferType']);
        }
        // ensure the json data is a string
        if (data['RedemptionMode'] && !(typeof data['RedemptionMode'] === 'string' || data['RedemptionMode'] instanceof String)) {
            throw new Error("Expected the field `RedemptionMode` to be a primitive type in the JSON string but got " + data['RedemptionMode']);
        }
        // ensure the json data is a string
        if (data['RedemptionType'] && !(typeof data['RedemptionType'] === 'string' || data['RedemptionType'] instanceof String)) {
            throw new Error("Expected the field `RedemptionType` to be a primitive type in the JSON string but got " + data['RedemptionType']);
        }
        // ensure the json data is a string
        if (data['ShortDescription'] && !(typeof data['ShortDescription'] === 'string' || data['ShortDescription'] instanceof String)) {
            throw new Error("Expected the field `ShortDescription` to be a primitive type in the JSON string but got " + data['ShortDescription']);
        }

        return true;
    }


}



/**
 * ISO 4217 code in which the redeeming transaction must be made to qualify for the offer.
 * @member {String} CurrencyCode
 */
OfferDetails.prototype['CurrencyCode'] = undefined;

/**
 * @member {module:model/DetailPostpaidCreditOffer} DetailPostpaidCreditOffer
 */
OfferDetails.prototype['DetailPostpaidCreditOffer'] = undefined;

/**
 * Last day that redemption can be made.
 * @member {Date} EventEndDate
 */
OfferDetails.prototype['EventEndDate'] = undefined;

/**
 * First day that redemption can be made by any user, may not apply to the specified user.
 * @member {Date} EventStartDate
 */
OfferDetails.prototype['EventStartDate'] = undefined;

/**
 * Brief details about the deal.
 * @member {String} Headline
 */
OfferDetails.prototype['Headline'] = undefined;

/**
 * Tongue of offer display text.
 * @member {String} Language
 */
OfferDetails.prototype['Language'] = undefined;

/**
 * Deprecated.
 * @member {Object} LinkOut
 */
OfferDetails.prototype['LinkOut'] = undefined;

/**
 * Explanation of the deal, typically displayed beneath the headline in a detail view. Often the same as the ShortDescription.
 * @member {String} LongDescription
 */
OfferDetails.prototype['LongDescription'] = undefined;

/**
 * @member {module:model/Merchant} Merchant
 */
OfferDetails.prototype['Merchant'] = undefined;

/**
 * @member {module:model/OfferDisplay} OfferDisplay
 */
OfferDetails.prototype['OfferDisplay'] = undefined;

/**
 * System-wide identifier for the campaign, not intended for end-user display.
 * @member {String} OfferId
 */
OfferDetails.prototype['OfferId'] = undefined;

/**
 * @member {module:model/OfferMedia} OfferMedia
 */
OfferDetails.prototype['OfferMedia'] = undefined;

/**
 * Platform that made the offer available, not intended for end-user display.
 * @member {String} OfferSource
 */
OfferDetails.prototype['OfferSource'] = undefined;

/**
 * The kind of deal. POSTPAIDCREDIT- Statement Credit Offer, which is a discount that is automatically applied to the card linked to the user and utilized to make the purchase.
 * @member {String} OfferType
 */
OfferDetails.prototype['OfferType'] = undefined;

/**
 * Deprecated.
 * @member {Object} OfferUrl
 */
OfferDetails.prototype['OfferUrl'] = undefined;

/**
 * Type of credit made upon redemption of the offer- CASH, POINTS, or EITHER.
 * @member {String} RedemptionMode
 */
OfferDetails.prototype['RedemptionMode'] = undefined;

/**
 * Where a purchase may be made to qualify for the offer- INSTORE, ONLINE, or ONLINE-INSTORE (either).
 * @member {String} RedemptionType
 */
OfferDetails.prototype['RedemptionType'] = undefined;

/**
 * Summary of the deal, typically displayed beneath the headline in a list view.
 * @member {String} ShortDescription
 */
OfferDetails.prototype['ShortDescription'] = undefined;






export default OfferDetails;

