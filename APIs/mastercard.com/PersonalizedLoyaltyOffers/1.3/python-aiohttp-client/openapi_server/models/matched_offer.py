# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.merchant import Merchant
from openapi_server import util


class MatchedOffer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_sc: str=None, currency_code: str=None, discount: str=None, discount_type: str=None, event_end_date: date=None, event_start_date: date=None, headline: str=None, language: str=None, merchant: Merchant=None, merchant_image_url: str=None, offer_id: str=None, offer_source: str=None, offer_type: str=None, price: str=None, redemption_mode: str=None, short_description: str=None):
        """MatchedOffer - a model defined in OpenAPI

        :param active_sc: The active_sc of this MatchedOffer.
        :param currency_code: The currency_code of this MatchedOffer.
        :param discount: The discount of this MatchedOffer.
        :param discount_type: The discount_type of this MatchedOffer.
        :param event_end_date: The event_end_date of this MatchedOffer.
        :param event_start_date: The event_start_date of this MatchedOffer.
        :param headline: The headline of this MatchedOffer.
        :param language: The language of this MatchedOffer.
        :param merchant: The merchant of this MatchedOffer.
        :param merchant_image_url: The merchant_image_url of this MatchedOffer.
        :param offer_id: The offer_id of this MatchedOffer.
        :param offer_source: The offer_source of this MatchedOffer.
        :param offer_type: The offer_type of this MatchedOffer.
        :param price: The price of this MatchedOffer.
        :param redemption_mode: The redemption_mode of this MatchedOffer.
        :param short_description: The short_description of this MatchedOffer.
        """
        self.openapi_types = {
            'active_sc': str,
            'currency_code': str,
            'discount': str,
            'discount_type': str,
            'event_end_date': date,
            'event_start_date': date,
            'headline': str,
            'language': str,
            'merchant': Merchant,
            'merchant_image_url': str,
            'offer_id': str,
            'offer_source': str,
            'offer_type': str,
            'price': str,
            'redemption_mode': str,
            'short_description': str
        }

        self.attribute_map = {
            'active_sc': 'ActiveSc',
            'currency_code': 'CurrencyCode',
            'discount': 'Discount',
            'discount_type': 'DiscountType',
            'event_end_date': 'EventEndDate',
            'event_start_date': 'EventStartDate',
            'headline': 'Headline',
            'language': 'Language',
            'merchant': 'Merchant',
            'merchant_image_url': 'MerchantImageURL',
            'offer_id': 'OfferId',
            'offer_source': 'OfferSource',
            'offer_type': 'OfferType',
            'price': 'Price',
            'redemption_mode': 'RedemptionMode',
            'short_description': 'ShortDescription'
        }

        self._active_sc = active_sc
        self._currency_code = currency_code
        self._discount = discount
        self._discount_type = discount_type
        self._event_end_date = event_end_date
        self._event_start_date = event_start_date
        self._headline = headline
        self._language = language
        self._merchant = merchant
        self._merchant_image_url = merchant_image_url
        self._offer_id = offer_id
        self._offer_source = offer_source
        self._offer_type = offer_type
        self._price = price
        self._redemption_mode = redemption_mode
        self._short_description = short_description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatchedOffer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MatchedOffer of this MatchedOffer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_sc(self):
        """Gets the active_sc of this MatchedOffer.

        ACTIVATED_STATEMENT_CREDIT- ready for redemption by the user. AVAILABLE- requires call to Activate Statement Credit Offer to make ready for redemption.

        :return: The active_sc of this MatchedOffer.
        :rtype: str
        """
        return self._active_sc

    @active_sc.setter
    def active_sc(self, active_sc):
        """Sets the active_sc of this MatchedOffer.

        ACTIVATED_STATEMENT_CREDIT- ready for redemption by the user. AVAILABLE- requires call to Activate Statement Credit Offer to make ready for redemption.

        :param active_sc: The active_sc of this MatchedOffer.
        :type active_sc: str
        """

        self._active_sc = active_sc

    @property
    def currency_code(self):
        """Gets the currency_code of this MatchedOffer.

        ISO 4217 code in which the redeeming transaction must be made to qualify for the offer.

        :return: The currency_code of this MatchedOffer.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this MatchedOffer.

        ISO 4217 code in which the redeeming transaction must be made to qualify for the offer.

        :param currency_code: The currency_code of this MatchedOffer.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def discount(self):
        """Gets the discount of this MatchedOffer.

        The markdown represented by the offer, in absolute value or percentage.

        :return: The discount of this MatchedOffer.
        :rtype: str
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this MatchedOffer.

        The markdown represented by the offer, in absolute value or percentage.

        :param discount: The discount of this MatchedOffer.
        :type discount: str
        """

        self._discount = discount

    @property
    def discount_type(self):
        """Gets the discount_type of this MatchedOffer.

        The kind of markdown represented by the offer. ABSOLUTE- fixed amount. PERCENTAGE- share of purchase.

        :return: The discount_type of this MatchedOffer.
        :rtype: str
        """
        return self._discount_type

    @discount_type.setter
    def discount_type(self, discount_type):
        """Sets the discount_type of this MatchedOffer.

        The kind of markdown represented by the offer. ABSOLUTE- fixed amount. PERCENTAGE- share of purchase.

        :param discount_type: The discount_type of this MatchedOffer.
        :type discount_type: str
        """

        self._discount_type = discount_type

    @property
    def event_end_date(self):
        """Gets the event_end_date of this MatchedOffer.

        Last day that redemption can be made.

        :return: The event_end_date of this MatchedOffer.
        :rtype: date
        """
        return self._event_end_date

    @event_end_date.setter
    def event_end_date(self, event_end_date):
        """Sets the event_end_date of this MatchedOffer.

        Last day that redemption can be made.

        :param event_end_date: The event_end_date of this MatchedOffer.
        :type event_end_date: date
        """

        self._event_end_date = event_end_date

    @property
    def event_start_date(self):
        """Gets the event_start_date of this MatchedOffer.

        First day that redemption can be made by any user, may not apply to the specified user.

        :return: The event_start_date of this MatchedOffer.
        :rtype: date
        """
        return self._event_start_date

    @event_start_date.setter
    def event_start_date(self, event_start_date):
        """Sets the event_start_date of this MatchedOffer.

        First day that redemption can be made by any user, may not apply to the specified user.

        :param event_start_date: The event_start_date of this MatchedOffer.
        :type event_start_date: date
        """

        self._event_start_date = event_start_date

    @property
    def headline(self):
        """Gets the headline of this MatchedOffer.

        Brief details about the deal.

        :return: The headline of this MatchedOffer.
        :rtype: str
        """
        return self._headline

    @headline.setter
    def headline(self, headline):
        """Sets the headline of this MatchedOffer.

        Brief details about the deal.

        :param headline: The headline of this MatchedOffer.
        :type headline: str
        """

        self._headline = headline

    @property
    def language(self):
        """Gets the language of this MatchedOffer.

        Tongue of offer display text.

        :return: The language of this MatchedOffer.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this MatchedOffer.

        Tongue of offer display text.

        :param language: The language of this MatchedOffer.
        :type language: str
        """

        self._language = language

    @property
    def merchant(self):
        """Gets the merchant of this MatchedOffer.


        :return: The merchant of this MatchedOffer.
        :rtype: Merchant
        """
        return self._merchant

    @merchant.setter
    def merchant(self, merchant):
        """Sets the merchant of this MatchedOffer.


        :param merchant: The merchant of this MatchedOffer.
        :type merchant: Merchant
        """

        self._merchant = merchant

    @property
    def merchant_image_url(self):
        """Gets the merchant_image_url of this MatchedOffer.

        Square picture of the retailer logo.

        :return: The merchant_image_url of this MatchedOffer.
        :rtype: str
        """
        return self._merchant_image_url

    @merchant_image_url.setter
    def merchant_image_url(self, merchant_image_url):
        """Sets the merchant_image_url of this MatchedOffer.

        Square picture of the retailer logo.

        :param merchant_image_url: The merchant_image_url of this MatchedOffer.
        :type merchant_image_url: str
        """

        self._merchant_image_url = merchant_image_url

    @property
    def offer_id(self):
        """Gets the offer_id of this MatchedOffer.

        System-wide identifier for the campaign, not intended for end-user display.

        :return: The offer_id of this MatchedOffer.
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this MatchedOffer.

        System-wide identifier for the campaign, not intended for end-user display.

        :param offer_id: The offer_id of this MatchedOffer.
        :type offer_id: str
        """

        self._offer_id = offer_id

    @property
    def offer_source(self):
        """Gets the offer_source of this MatchedOffer.

        Platform that made the offer available, not intended for end-user display.

        :return: The offer_source of this MatchedOffer.
        :rtype: str
        """
        return self._offer_source

    @offer_source.setter
    def offer_source(self, offer_source):
        """Sets the offer_source of this MatchedOffer.

        Platform that made the offer available, not intended for end-user display.

        :param offer_source: The offer_source of this MatchedOffer.
        :type offer_source: str
        """

        self._offer_source = offer_source

    @property
    def offer_type(self):
        """Gets the offer_type of this MatchedOffer.

        The kind of deal. POSTPAIDCREDIT- Statement Credit Offer, which is a discount that is automatically applied to the card linked to the user and utilized to make the purchase.

        :return: The offer_type of this MatchedOffer.
        :rtype: str
        """
        return self._offer_type

    @offer_type.setter
    def offer_type(self, offer_type):
        """Sets the offer_type of this MatchedOffer.

        The kind of deal. POSTPAIDCREDIT- Statement Credit Offer, which is a discount that is automatically applied to the card linked to the user and utilized to make the purchase.

        :param offer_type: The offer_type of this MatchedOffer.
        :type offer_type: str
        """

        self._offer_type = offer_type

    @property
    def price(self):
        """Gets the price of this MatchedOffer.

        Reserved for future use.

        :return: The price of this MatchedOffer.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this MatchedOffer.

        Reserved for future use.

        :param price: The price of this MatchedOffer.
        :type price: str
        """

        self._price = price

    @property
    def redemption_mode(self):
        """Gets the redemption_mode of this MatchedOffer.

        Type of credit made upon redemption of the offer- CASH, POINTS, or EITHER.

        :return: The redemption_mode of this MatchedOffer.
        :rtype: str
        """
        return self._redemption_mode

    @redemption_mode.setter
    def redemption_mode(self, redemption_mode):
        """Sets the redemption_mode of this MatchedOffer.

        Type of credit made upon redemption of the offer- CASH, POINTS, or EITHER.

        :param redemption_mode: The redemption_mode of this MatchedOffer.
        :type redemption_mode: str
        """

        self._redemption_mode = redemption_mode

    @property
    def short_description(self):
        """Gets the short_description of this MatchedOffer.

        Summary of the deal, typically displayed beneath the headline in a list view.

        :return: The short_description of this MatchedOffer.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this MatchedOffer.

        Summary of the deal, typically displayed beneath the headline in a list view.

        :param short_description: The short_description of this MatchedOffer.
        :type short_description: str
        """

        self._short_description = short_description
