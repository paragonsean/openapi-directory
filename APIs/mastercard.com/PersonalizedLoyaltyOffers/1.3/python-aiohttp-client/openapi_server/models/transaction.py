# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Transaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cash_back_earned: str=None, points_earned: str=None, redemption_date: date=None, transaction_amount: str=None):
        """Transaction - a model defined in OpenAPI

        :param cash_back_earned: The cash_back_earned of this Transaction.
        :param points_earned: The points_earned of this Transaction.
        :param redemption_date: The redemption_date of this Transaction.
        :param transaction_amount: The transaction_amount of this Transaction.
        """
        self.openapi_types = {
            'cash_back_earned': str,
            'points_earned': str,
            'redemption_date': date,
            'transaction_amount': str
        }

        self.attribute_map = {
            'cash_back_earned': 'CashBackEarned',
            'points_earned': 'PointsEarned',
            'redemption_date': 'RedemptionDate',
            'transaction_amount': 'TransactionAmount'
        }

        self._cash_back_earned = cash_back_earned
        self._points_earned = points_earned
        self._redemption_date = redemption_date
        self._transaction_amount = transaction_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transaction of this Transaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cash_back_earned(self):
        """Gets the cash_back_earned of this Transaction.

        Value earned upon fulfillment of offer conditions, not applicable to points activations.

        :return: The cash_back_earned of this Transaction.
        :rtype: str
        """
        return self._cash_back_earned

    @cash_back_earned.setter
    def cash_back_earned(self, cash_back_earned):
        """Sets the cash_back_earned of this Transaction.

        Value earned upon fulfillment of offer conditions, not applicable to points activations.

        :param cash_back_earned: The cash_back_earned of this Transaction.
        :type cash_back_earned: str
        """

        self._cash_back_earned = cash_back_earned

    @property
    def points_earned(self):
        """Gets the points_earned of this Transaction.

        Value earned upon fulfillment of offer conditions, not applicable to cash activations.

        :return: The points_earned of this Transaction.
        :rtype: str
        """
        return self._points_earned

    @points_earned.setter
    def points_earned(self, points_earned):
        """Sets the points_earned of this Transaction.

        Value earned upon fulfillment of offer conditions, not applicable to cash activations.

        :param points_earned: The points_earned of this Transaction.
        :type points_earned: str
        """

        self._points_earned = points_earned

    @property
    def redemption_date(self):
        """Gets the redemption_date of this Transaction.

        The day on which a purchase fulfilled the offer.

        :return: The redemption_date of this Transaction.
        :rtype: date
        """
        return self._redemption_date

    @redemption_date.setter
    def redemption_date(self, redemption_date):
        """Sets the redemption_date of this Transaction.

        The day on which a purchase fulfilled the offer.

        :param redemption_date: The redemption_date of this Transaction.
        :type redemption_date: date
        """

        self._redemption_date = redemption_date

    @property
    def transaction_amount(self):
        """Gets the transaction_amount of this Transaction.

        Value of the purchase that fulfilled the offer, decimal is implied.

        :return: The transaction_amount of this Transaction.
        :rtype: str
        """
        return self._transaction_amount

    @transaction_amount.setter
    def transaction_amount(self, transaction_amount):
        """Sets the transaction_amount of this Transaction.

        Value of the purchase that fulfilled the offer, decimal is implied.

        :param transaction_amount: The transaction_amount of this Transaction.
        :type transaction_amount: str
        """

        self._transaction_amount = transaction_amount
