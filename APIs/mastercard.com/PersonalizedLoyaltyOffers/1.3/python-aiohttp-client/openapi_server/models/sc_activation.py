# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScActivation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation_date: date=None, activation_id: str=None, cash_back: str=None, days_remaining: str=None, headline: str=None, merchant: str=None, merchant_logo: str=None, offer_id: str=None, points_earned: str=None, redemption_end_date: date=None, redemption_mode: str=None, remaining_spend: str=None, short_description: str=None, status: str=None, total_spend: str=None):
        """ScActivation - a model defined in OpenAPI

        :param activation_date: The activation_date of this ScActivation.
        :param activation_id: The activation_id of this ScActivation.
        :param cash_back: The cash_back of this ScActivation.
        :param days_remaining: The days_remaining of this ScActivation.
        :param headline: The headline of this ScActivation.
        :param merchant: The merchant of this ScActivation.
        :param merchant_logo: The merchant_logo of this ScActivation.
        :param offer_id: The offer_id of this ScActivation.
        :param points_earned: The points_earned of this ScActivation.
        :param redemption_end_date: The redemption_end_date of this ScActivation.
        :param redemption_mode: The redemption_mode of this ScActivation.
        :param remaining_spend: The remaining_spend of this ScActivation.
        :param short_description: The short_description of this ScActivation.
        :param status: The status of this ScActivation.
        :param total_spend: The total_spend of this ScActivation.
        """
        self.openapi_types = {
            'activation_date': date,
            'activation_id': str,
            'cash_back': str,
            'days_remaining': str,
            'headline': str,
            'merchant': str,
            'merchant_logo': str,
            'offer_id': str,
            'points_earned': str,
            'redemption_end_date': date,
            'redemption_mode': str,
            'remaining_spend': str,
            'short_description': str,
            'status': str,
            'total_spend': str
        }

        self.attribute_map = {
            'activation_date': 'ActivationDate',
            'activation_id': 'ActivationId',
            'cash_back': 'CashBack',
            'days_remaining': 'DaysRemaining',
            'headline': 'Headline',
            'merchant': 'Merchant',
            'merchant_logo': 'MerchantLogo',
            'offer_id': 'OfferId',
            'points_earned': 'PointsEarned',
            'redemption_end_date': 'RedemptionEndDate',
            'redemption_mode': 'RedemptionMode',
            'remaining_spend': 'RemainingSpend',
            'short_description': 'ShortDescription',
            'status': 'Status',
            'total_spend': 'TotalSpend'
        }

        self._activation_date = activation_date
        self._activation_id = activation_id
        self._cash_back = cash_back
        self._days_remaining = days_remaining
        self._headline = headline
        self._merchant = merchant
        self._merchant_logo = merchant_logo
        self._offer_id = offer_id
        self._points_earned = points_earned
        self._redemption_end_date = redemption_end_date
        self._redemption_mode = redemption_mode
        self._remaining_spend = remaining_spend
        self._short_description = short_description
        self._status = status
        self._total_spend = total_spend

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScActivation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScActivation of this ScActivation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation_date(self):
        """Gets the activation_date of this ScActivation.

        Day on which the offer became ready for redemption.

        :return: The activation_date of this ScActivation.
        :rtype: date
        """
        return self._activation_date

    @activation_date.setter
    def activation_date(self, activation_date):
        """Sets the activation_date of this ScActivation.

        Day on which the offer became ready for redemption.

        :param activation_date: The activation_date of this ScActivation.
        :type activation_date: date
        """

        self._activation_date = activation_date

    @property
    def activation_id(self):
        """Gets the activation_id of this ScActivation.

        Distinct identifier for the offer being available for redemption by the user, not intended for end-user display.

        :return: The activation_id of this ScActivation.
        :rtype: str
        """
        return self._activation_id

    @activation_id.setter
    def activation_id(self, activation_id):
        """Sets the activation_id of this ScActivation.

        Distinct identifier for the offer being available for redemption by the user, not intended for end-user display.

        :param activation_id: The activation_id of this ScActivation.
        :type activation_id: str
        """

        self._activation_id = activation_id

    @property
    def cash_back(self):
        """Gets the cash_back of this ScActivation.

        Value earned upon fulfillment of offer conditions, not applicable to points activations.

        :return: The cash_back of this ScActivation.
        :rtype: str
        """
        return self._cash_back

    @cash_back.setter
    def cash_back(self, cash_back):
        """Sets the cash_back of this ScActivation.

        Value earned upon fulfillment of offer conditions, not applicable to points activations.

        :param cash_back: The cash_back of this ScActivation.
        :type cash_back: str
        """

        self._cash_back = cash_back

    @property
    def days_remaining(self):
        """Gets the days_remaining of this ScActivation.

        Number of days until the offer expires.

        :return: The days_remaining of this ScActivation.
        :rtype: str
        """
        return self._days_remaining

    @days_remaining.setter
    def days_remaining(self, days_remaining):
        """Sets the days_remaining of this ScActivation.

        Number of days until the offer expires.

        :param days_remaining: The days_remaining of this ScActivation.
        :type days_remaining: str
        """

        self._days_remaining = days_remaining

    @property
    def headline(self):
        """Gets the headline of this ScActivation.

        Brief details about the deal.

        :return: The headline of this ScActivation.
        :rtype: str
        """
        return self._headline

    @headline.setter
    def headline(self, headline):
        """Sets the headline of this ScActivation.

        Brief details about the deal.

        :param headline: The headline of this ScActivation.
        :type headline: str
        """

        self._headline = headline

    @property
    def merchant(self):
        """Gets the merchant of this ScActivation.

        Display name for the retailer to which the offer applies.

        :return: The merchant of this ScActivation.
        :rtype: str
        """
        return self._merchant

    @merchant.setter
    def merchant(self, merchant):
        """Sets the merchant of this ScActivation.

        Display name for the retailer to which the offer applies.

        :param merchant: The merchant of this ScActivation.
        :type merchant: str
        """

        self._merchant = merchant

    @property
    def merchant_logo(self):
        """Gets the merchant_logo of this ScActivation.

        Square retailer brand image.

        :return: The merchant_logo of this ScActivation.
        :rtype: str
        """
        return self._merchant_logo

    @merchant_logo.setter
    def merchant_logo(self, merchant_logo):
        """Sets the merchant_logo of this ScActivation.

        Square retailer brand image.

        :param merchant_logo: The merchant_logo of this ScActivation.
        :type merchant_logo: str
        """

        self._merchant_logo = merchant_logo

    @property
    def offer_id(self):
        """Gets the offer_id of this ScActivation.

        System-wide identifier for the campaign, not intended for end-user display.

        :return: The offer_id of this ScActivation.
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this ScActivation.

        System-wide identifier for the campaign, not intended for end-user display.

        :param offer_id: The offer_id of this ScActivation.
        :type offer_id: str
        """

        self._offer_id = offer_id

    @property
    def points_earned(self):
        """Gets the points_earned of this ScActivation.

        Value earned upon fulfillment of offer conditions, not applicable to cash activations.

        :return: The points_earned of this ScActivation.
        :rtype: str
        """
        return self._points_earned

    @points_earned.setter
    def points_earned(self, points_earned):
        """Sets the points_earned of this ScActivation.

        Value earned upon fulfillment of offer conditions, not applicable to cash activations.

        :param points_earned: The points_earned of this ScActivation.
        :type points_earned: str
        """

        self._points_earned = points_earned

    @property
    def redemption_end_date(self):
        """Gets the redemption_end_date of this ScActivation.

        Last day on which a purchase will qualify for the offer.

        :return: The redemption_end_date of this ScActivation.
        :rtype: date
        """
        return self._redemption_end_date

    @redemption_end_date.setter
    def redemption_end_date(self, redemption_end_date):
        """Sets the redemption_end_date of this ScActivation.

        Last day on which a purchase will qualify for the offer.

        :param redemption_end_date: The redemption_end_date of this ScActivation.
        :type redemption_end_date: date
        """

        self._redemption_end_date = redemption_end_date

    @property
    def redemption_mode(self):
        """Gets the redemption_mode of this ScActivation.

        Type of credit made upon redemption of the offer- CASH or POINTS.

        :return: The redemption_mode of this ScActivation.
        :rtype: str
        """
        return self._redemption_mode

    @redemption_mode.setter
    def redemption_mode(self, redemption_mode):
        """Sets the redemption_mode of this ScActivation.

        Type of credit made upon redemption of the offer- CASH or POINTS.

        :param redemption_mode: The redemption_mode of this ScActivation.
        :type redemption_mode: str
        """

        self._redemption_mode = redemption_mode

    @property
    def remaining_spend(self):
        """Gets the remaining_spend of this ScActivation.

        Purchase amount still required to redeem the offer.

        :return: The remaining_spend of this ScActivation.
        :rtype: str
        """
        return self._remaining_spend

    @remaining_spend.setter
    def remaining_spend(self, remaining_spend):
        """Sets the remaining_spend of this ScActivation.

        Purchase amount still required to redeem the offer.

        :param remaining_spend: The remaining_spend of this ScActivation.
        :type remaining_spend: str
        """

        self._remaining_spend = remaining_spend

    @property
    def short_description(self):
        """Gets the short_description of this ScActivation.

        Summary of the deal, typically displayed beneath the headline in a list view.

        :return: The short_description of this ScActivation.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this ScActivation.

        Summary of the deal, typically displayed beneath the headline in a list view.

        :param short_description: The short_description of this ScActivation.
        :type short_description: str
        """

        self._short_description = short_description

    @property
    def status(self):
        """Gets the status of this ScActivation.

        Disposition of offer- ACTIVATED, REDEEMED, CREDIT_DECLINED.

        :return: The status of this ScActivation.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ScActivation.

        Disposition of offer- ACTIVATED, REDEEMED, CREDIT_DECLINED.

        :param status: The status of this ScActivation.
        :type status: str
        """

        self._status = status

    @property
    def total_spend(self):
        """Gets the total_spend of this ScActivation.

        Count of purchases user made to redeem the offer.

        :return: The total_spend of this ScActivation.
        :rtype: str
        """
        return self._total_spend

    @total_spend.setter
    def total_spend(self, total_spend):
        """Sets the total_spend of this ScActivation.

        Count of purchases user made to redeem the offer.

        :param total_spend: The total_spend of this ScActivation.
        :type total_spend: str
        """

        self._total_spend = total_spend
