# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.items import Items
from openapi_server.models.status import Status
from openapi_server import util


class MatchedResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_page: int=None, items: Items=None, items_per_page: int=None, number_of_pages: int=None, status: Status=None, total_count: int=None):
        """MatchedResponse - a model defined in OpenAPI

        :param current_page: The current_page of this MatchedResponse.
        :param items: The items of this MatchedResponse.
        :param items_per_page: The items_per_page of this MatchedResponse.
        :param number_of_pages: The number_of_pages of this MatchedResponse.
        :param status: The status of this MatchedResponse.
        :param total_count: The total_count of this MatchedResponse.
        """
        self.openapi_types = {
            'current_page': int,
            'items': Items,
            'items_per_page': int,
            'number_of_pages': int,
            'status': Status,
            'total_count': int
        }

        self.attribute_map = {
            'current_page': 'CurrentPage',
            'items': 'Items',
            'items_per_page': 'ItemsPerPage',
            'number_of_pages': 'NumberOfPages',
            'status': 'Status',
            'total_count': 'TotalCount'
        }

        self._current_page = current_page
        self._items = items
        self._items_per_page = items_per_page
        self._number_of_pages = number_of_pages
        self._status = status
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatchedResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MatchedResponse of this MatchedResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_page(self):
        """Gets the current_page of this MatchedResponse.

        Count of current offer return segment.

        :return: The current_page of this MatchedResponse.
        :rtype: int
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page):
        """Sets the current_page of this MatchedResponse.

        Count of current offer return segment.

        :param current_page: The current_page of this MatchedResponse.
        :type current_page: int
        """

        self._current_page = current_page

    @property
    def items(self):
        """Gets the items of this MatchedResponse.


        :return: The items of this MatchedResponse.
        :rtype: Items
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this MatchedResponse.


        :param items: The items of this MatchedResponse.
        :type items: Items
        """

        self._items = items

    @property
    def items_per_page(self):
        """Gets the items_per_page of this MatchedResponse.

        Count of offers in the returned segment.

        :return: The items_per_page of this MatchedResponse.
        :rtype: int
        """
        return self._items_per_page

    @items_per_page.setter
    def items_per_page(self, items_per_page):
        """Sets the items_per_page of this MatchedResponse.

        Count of offers in the returned segment.

        :param items_per_page: The items_per_page of this MatchedResponse.
        :type items_per_page: int
        """

        self._items_per_page = items_per_page

    @property
    def number_of_pages(self):
        """Gets the number_of_pages of this MatchedResponse.

        Count of offer return segments.

        :return: The number_of_pages of this MatchedResponse.
        :rtype: int
        """
        return self._number_of_pages

    @number_of_pages.setter
    def number_of_pages(self, number_of_pages):
        """Sets the number_of_pages of this MatchedResponse.

        Count of offer return segments.

        :param number_of_pages: The number_of_pages of this MatchedResponse.
        :type number_of_pages: int
        """

        self._number_of_pages = number_of_pages

    @property
    def status(self):
        """Gets the status of this MatchedResponse.


        :return: The status of this MatchedResponse.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MatchedResponse.


        :param status: The status of this MatchedResponse.
        :type status: Status
        """

        self._status = status

    @property
    def total_count(self):
        """Gets the total_count of this MatchedResponse.

        Count of all offers available for criteria.

        :return: The total_count of this MatchedResponse.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this MatchedResponse.

        Count of all offers available for criteria.

        :param total_count: The total_count of this MatchedResponse.
        :type total_count: int
        """

        self._total_count = total_count
