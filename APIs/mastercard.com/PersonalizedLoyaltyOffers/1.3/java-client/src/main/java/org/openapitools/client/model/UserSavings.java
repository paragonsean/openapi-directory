/*
 * Personalized Offers
 * This API provides content for financial instutions participating in Mastercard Personalized Offers to use in online and mobile banking applications for cardholders.
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PrepaidOfferSavings;
import org.openapitools.client.model.StatementCreditOffersSavings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserSavings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:15.199950-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserSavings {
  public static final String SERIALIZED_NAME_PREPAID_OFFER_SAVINGS = "PrepaidOfferSavings";
  @SerializedName(SERIALIZED_NAME_PREPAID_OFFER_SAVINGS)
  private PrepaidOfferSavings prepaidOfferSavings;

  public static final String SERIALIZED_NAME_STATEMENT_CREDIT_OFFERS_SAVINGS = "StatementCreditOffersSavings";
  @SerializedName(SERIALIZED_NAME_STATEMENT_CREDIT_OFFERS_SAVINGS)
  private StatementCreditOffersSavings statementCreditOffersSavings;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT_SAVED = "TotalAmountSaved";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT_SAVED)
  private String totalAmountSaved;

  public static final String SERIALIZED_NAME_TOTAL_OFFERS_USED = "TotalOffersUsed";
  @SerializedName(SERIALIZED_NAME_TOTAL_OFFERS_USED)
  private String totalOffersUsed;

  public UserSavings() {
  }

  public UserSavings prepaidOfferSavings(PrepaidOfferSavings prepaidOfferSavings) {
    this.prepaidOfferSavings = prepaidOfferSavings;
    return this;
  }

  /**
   * Get prepaidOfferSavings
   * @return prepaidOfferSavings
   */
  @javax.annotation.Nullable
  public PrepaidOfferSavings getPrepaidOfferSavings() {
    return prepaidOfferSavings;
  }

  public void setPrepaidOfferSavings(PrepaidOfferSavings prepaidOfferSavings) {
    this.prepaidOfferSavings = prepaidOfferSavings;
  }


  public UserSavings statementCreditOffersSavings(StatementCreditOffersSavings statementCreditOffersSavings) {
    this.statementCreditOffersSavings = statementCreditOffersSavings;
    return this;
  }

  /**
   * Get statementCreditOffersSavings
   * @return statementCreditOffersSavings
   */
  @javax.annotation.Nullable
  public StatementCreditOffersSavings getStatementCreditOffersSavings() {
    return statementCreditOffersSavings;
  }

  public void setStatementCreditOffersSavings(StatementCreditOffersSavings statementCreditOffersSavings) {
    this.statementCreditOffersSavings = statementCreditOffersSavings;
  }


  public UserSavings totalAmountSaved(String totalAmountSaved) {
    this.totalAmountSaved = totalAmountSaved;
    return this;
  }

  /**
   * Combined value of purchased and redeemed deals.
   * @return totalAmountSaved
   */
  @javax.annotation.Nullable
  public String getTotalAmountSaved() {
    return totalAmountSaved;
  }

  public void setTotalAmountSaved(String totalAmountSaved) {
    this.totalAmountSaved = totalAmountSaved;
  }


  public UserSavings totalOffersUsed(String totalOffersUsed) {
    this.totalOffersUsed = totalOffersUsed;
    return this;
  }

  /**
   * Combined count of purchased and redeemed deals.
   * @return totalOffersUsed
   */
  @javax.annotation.Nullable
  public String getTotalOffersUsed() {
    return totalOffersUsed;
  }

  public void setTotalOffersUsed(String totalOffersUsed) {
    this.totalOffersUsed = totalOffersUsed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserSavings userSavings = (UserSavings) o;
    return Objects.equals(this.prepaidOfferSavings, userSavings.prepaidOfferSavings) &&
        Objects.equals(this.statementCreditOffersSavings, userSavings.statementCreditOffersSavings) &&
        Objects.equals(this.totalAmountSaved, userSavings.totalAmountSaved) &&
        Objects.equals(this.totalOffersUsed, userSavings.totalOffersUsed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(prepaidOfferSavings, statementCreditOffersSavings, totalAmountSaved, totalOffersUsed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserSavings {\n");
    sb.append("    prepaidOfferSavings: ").append(toIndentedString(prepaidOfferSavings)).append("\n");
    sb.append("    statementCreditOffersSavings: ").append(toIndentedString(statementCreditOffersSavings)).append("\n");
    sb.append("    totalAmountSaved: ").append(toIndentedString(totalAmountSaved)).append("\n");
    sb.append("    totalOffersUsed: ").append(toIndentedString(totalOffersUsed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PrepaidOfferSavings");
    openapiFields.add("StatementCreditOffersSavings");
    openapiFields.add("TotalAmountSaved");
    openapiFields.add("TotalOffersUsed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserSavings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserSavings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserSavings is not found in the empty JSON string", UserSavings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserSavings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserSavings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `PrepaidOfferSavings`
      if (jsonObj.get("PrepaidOfferSavings") != null && !jsonObj.get("PrepaidOfferSavings").isJsonNull()) {
        PrepaidOfferSavings.validateJsonElement(jsonObj.get("PrepaidOfferSavings"));
      }
      // validate the optional field `StatementCreditOffersSavings`
      if (jsonObj.get("StatementCreditOffersSavings") != null && !jsonObj.get("StatementCreditOffersSavings").isJsonNull()) {
        StatementCreditOffersSavings.validateJsonElement(jsonObj.get("StatementCreditOffersSavings"));
      }
      if ((jsonObj.get("TotalAmountSaved") != null && !jsonObj.get("TotalAmountSaved").isJsonNull()) && !jsonObj.get("TotalAmountSaved").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalAmountSaved` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalAmountSaved").toString()));
      }
      if ((jsonObj.get("TotalOffersUsed") != null && !jsonObj.get("TotalOffersUsed").isJsonNull()) && !jsonObj.get("TotalOffersUsed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalOffersUsed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalOffersUsed").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserSavings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserSavings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserSavings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserSavings.class));

       return (TypeAdapter<T>) new TypeAdapter<UserSavings>() {
           @Override
           public void write(JsonWriter out, UserSavings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserSavings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserSavings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserSavings
   * @throws IOException if the JSON string is invalid with respect to UserSavings
   */
  public static UserSavings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserSavings.class);
  }

  /**
   * Convert an instance of UserSavings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

