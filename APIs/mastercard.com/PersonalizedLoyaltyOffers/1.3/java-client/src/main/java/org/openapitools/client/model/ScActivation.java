/*
 * Personalized Offers
 * This API provides content for financial instutions participating in Mastercard Personalized Offers to use in online and mobile banking applications for cardholders.
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ScActivation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:15.199950-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScActivation {
  public static final String SERIALIZED_NAME_ACTIVATION_DATE = "ActivationDate";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_DATE)
  private LocalDate activationDate;

  public static final String SERIALIZED_NAME_ACTIVATION_ID = "ActivationId";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_ID)
  private String activationId;

  public static final String SERIALIZED_NAME_CASH_BACK = "CashBack";
  @SerializedName(SERIALIZED_NAME_CASH_BACK)
  private String cashBack;

  public static final String SERIALIZED_NAME_DAYS_REMAINING = "DaysRemaining";
  @SerializedName(SERIALIZED_NAME_DAYS_REMAINING)
  private String daysRemaining;

  public static final String SERIALIZED_NAME_HEADLINE = "Headline";
  @SerializedName(SERIALIZED_NAME_HEADLINE)
  private String headline;

  public static final String SERIALIZED_NAME_MERCHANT = "Merchant";
  @SerializedName(SERIALIZED_NAME_MERCHANT)
  private String merchant;

  public static final String SERIALIZED_NAME_MERCHANT_LOGO = "MerchantLogo";
  @SerializedName(SERIALIZED_NAME_MERCHANT_LOGO)
  private String merchantLogo;

  public static final String SERIALIZED_NAME_OFFER_ID = "OfferId";
  @SerializedName(SERIALIZED_NAME_OFFER_ID)
  private String offerId;

  public static final String SERIALIZED_NAME_POINTS_EARNED = "PointsEarned";
  @SerializedName(SERIALIZED_NAME_POINTS_EARNED)
  private String pointsEarned;

  public static final String SERIALIZED_NAME_REDEMPTION_END_DATE = "RedemptionEndDate";
  @SerializedName(SERIALIZED_NAME_REDEMPTION_END_DATE)
  private LocalDate redemptionEndDate;

  public static final String SERIALIZED_NAME_REDEMPTION_MODE = "RedemptionMode";
  @SerializedName(SERIALIZED_NAME_REDEMPTION_MODE)
  private String redemptionMode;

  public static final String SERIALIZED_NAME_REMAINING_SPEND = "RemainingSpend";
  @SerializedName(SERIALIZED_NAME_REMAINING_SPEND)
  private String remainingSpend;

  public static final String SERIALIZED_NAME_SHORT_DESCRIPTION = "ShortDescription";
  @SerializedName(SERIALIZED_NAME_SHORT_DESCRIPTION)
  private String shortDescription;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TOTAL_SPEND = "TotalSpend";
  @SerializedName(SERIALIZED_NAME_TOTAL_SPEND)
  private String totalSpend;

  public ScActivation() {
  }

  public ScActivation activationDate(LocalDate activationDate) {
    this.activationDate = activationDate;
    return this;
  }

  /**
   * Day on which the offer became ready for redemption.
   * @return activationDate
   */
  @javax.annotation.Nullable
  public LocalDate getActivationDate() {
    return activationDate;
  }

  public void setActivationDate(LocalDate activationDate) {
    this.activationDate = activationDate;
  }


  public ScActivation activationId(String activationId) {
    this.activationId = activationId;
    return this;
  }

  /**
   * Distinct identifier for the offer being available for redemption by the user, not intended for end-user display.
   * @return activationId
   */
  @javax.annotation.Nullable
  public String getActivationId() {
    return activationId;
  }

  public void setActivationId(String activationId) {
    this.activationId = activationId;
  }


  public ScActivation cashBack(String cashBack) {
    this.cashBack = cashBack;
    return this;
  }

  /**
   * Value earned upon fulfillment of offer conditions, not applicable to points activations.
   * @return cashBack
   */
  @javax.annotation.Nullable
  public String getCashBack() {
    return cashBack;
  }

  public void setCashBack(String cashBack) {
    this.cashBack = cashBack;
  }


  public ScActivation daysRemaining(String daysRemaining) {
    this.daysRemaining = daysRemaining;
    return this;
  }

  /**
   * Number of days until the offer expires.
   * @return daysRemaining
   */
  @javax.annotation.Nullable
  public String getDaysRemaining() {
    return daysRemaining;
  }

  public void setDaysRemaining(String daysRemaining) {
    this.daysRemaining = daysRemaining;
  }


  public ScActivation headline(String headline) {
    this.headline = headline;
    return this;
  }

  /**
   * Brief details about the deal.
   * @return headline
   */
  @javax.annotation.Nullable
  public String getHeadline() {
    return headline;
  }

  public void setHeadline(String headline) {
    this.headline = headline;
  }


  public ScActivation merchant(String merchant) {
    this.merchant = merchant;
    return this;
  }

  /**
   * Display name for the retailer to which the offer applies.
   * @return merchant
   */
  @javax.annotation.Nullable
  public String getMerchant() {
    return merchant;
  }

  public void setMerchant(String merchant) {
    this.merchant = merchant;
  }


  public ScActivation merchantLogo(String merchantLogo) {
    this.merchantLogo = merchantLogo;
    return this;
  }

  /**
   * Square retailer brand image.
   * @return merchantLogo
   */
  @javax.annotation.Nullable
  public String getMerchantLogo() {
    return merchantLogo;
  }

  public void setMerchantLogo(String merchantLogo) {
    this.merchantLogo = merchantLogo;
  }


  public ScActivation offerId(String offerId) {
    this.offerId = offerId;
    return this;
  }

  /**
   * System-wide identifier for the campaign, not intended for end-user display.
   * @return offerId
   */
  @javax.annotation.Nullable
  public String getOfferId() {
    return offerId;
  }

  public void setOfferId(String offerId) {
    this.offerId = offerId;
  }


  public ScActivation pointsEarned(String pointsEarned) {
    this.pointsEarned = pointsEarned;
    return this;
  }

  /**
   * Value earned upon fulfillment of offer conditions, not applicable to cash activations.
   * @return pointsEarned
   */
  @javax.annotation.Nullable
  public String getPointsEarned() {
    return pointsEarned;
  }

  public void setPointsEarned(String pointsEarned) {
    this.pointsEarned = pointsEarned;
  }


  public ScActivation redemptionEndDate(LocalDate redemptionEndDate) {
    this.redemptionEndDate = redemptionEndDate;
    return this;
  }

  /**
   * Last day on which a purchase will qualify for the offer.
   * @return redemptionEndDate
   */
  @javax.annotation.Nullable
  public LocalDate getRedemptionEndDate() {
    return redemptionEndDate;
  }

  public void setRedemptionEndDate(LocalDate redemptionEndDate) {
    this.redemptionEndDate = redemptionEndDate;
  }


  public ScActivation redemptionMode(String redemptionMode) {
    this.redemptionMode = redemptionMode;
    return this;
  }

  /**
   * Type of credit made upon redemption of the offer- CASH or POINTS.
   * @return redemptionMode
   */
  @javax.annotation.Nullable
  public String getRedemptionMode() {
    return redemptionMode;
  }

  public void setRedemptionMode(String redemptionMode) {
    this.redemptionMode = redemptionMode;
  }


  public ScActivation remainingSpend(String remainingSpend) {
    this.remainingSpend = remainingSpend;
    return this;
  }

  /**
   * Purchase amount still required to redeem the offer.
   * @return remainingSpend
   */
  @javax.annotation.Nullable
  public String getRemainingSpend() {
    return remainingSpend;
  }

  public void setRemainingSpend(String remainingSpend) {
    this.remainingSpend = remainingSpend;
  }


  public ScActivation shortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
    return this;
  }

  /**
   * Summary of the deal, typically displayed beneath the headline in a list view.
   * @return shortDescription
   */
  @javax.annotation.Nullable
  public String getShortDescription() {
    return shortDescription;
  }

  public void setShortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
  }


  public ScActivation status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Disposition of offer- ACTIVATED, REDEEMED, CREDIT_DECLINED.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public ScActivation totalSpend(String totalSpend) {
    this.totalSpend = totalSpend;
    return this;
  }

  /**
   * Count of purchases user made to redeem the offer.
   * @return totalSpend
   */
  @javax.annotation.Nullable
  public String getTotalSpend() {
    return totalSpend;
  }

  public void setTotalSpend(String totalSpend) {
    this.totalSpend = totalSpend;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScActivation scActivation = (ScActivation) o;
    return Objects.equals(this.activationDate, scActivation.activationDate) &&
        Objects.equals(this.activationId, scActivation.activationId) &&
        Objects.equals(this.cashBack, scActivation.cashBack) &&
        Objects.equals(this.daysRemaining, scActivation.daysRemaining) &&
        Objects.equals(this.headline, scActivation.headline) &&
        Objects.equals(this.merchant, scActivation.merchant) &&
        Objects.equals(this.merchantLogo, scActivation.merchantLogo) &&
        Objects.equals(this.offerId, scActivation.offerId) &&
        Objects.equals(this.pointsEarned, scActivation.pointsEarned) &&
        Objects.equals(this.redemptionEndDate, scActivation.redemptionEndDate) &&
        Objects.equals(this.redemptionMode, scActivation.redemptionMode) &&
        Objects.equals(this.remainingSpend, scActivation.remainingSpend) &&
        Objects.equals(this.shortDescription, scActivation.shortDescription) &&
        Objects.equals(this.status, scActivation.status) &&
        Objects.equals(this.totalSpend, scActivation.totalSpend);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activationDate, activationId, cashBack, daysRemaining, headline, merchant, merchantLogo, offerId, pointsEarned, redemptionEndDate, redemptionMode, remainingSpend, shortDescription, status, totalSpend);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScActivation {\n");
    sb.append("    activationDate: ").append(toIndentedString(activationDate)).append("\n");
    sb.append("    activationId: ").append(toIndentedString(activationId)).append("\n");
    sb.append("    cashBack: ").append(toIndentedString(cashBack)).append("\n");
    sb.append("    daysRemaining: ").append(toIndentedString(daysRemaining)).append("\n");
    sb.append("    headline: ").append(toIndentedString(headline)).append("\n");
    sb.append("    merchant: ").append(toIndentedString(merchant)).append("\n");
    sb.append("    merchantLogo: ").append(toIndentedString(merchantLogo)).append("\n");
    sb.append("    offerId: ").append(toIndentedString(offerId)).append("\n");
    sb.append("    pointsEarned: ").append(toIndentedString(pointsEarned)).append("\n");
    sb.append("    redemptionEndDate: ").append(toIndentedString(redemptionEndDate)).append("\n");
    sb.append("    redemptionMode: ").append(toIndentedString(redemptionMode)).append("\n");
    sb.append("    remainingSpend: ").append(toIndentedString(remainingSpend)).append("\n");
    sb.append("    shortDescription: ").append(toIndentedString(shortDescription)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    totalSpend: ").append(toIndentedString(totalSpend)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActivationDate");
    openapiFields.add("ActivationId");
    openapiFields.add("CashBack");
    openapiFields.add("DaysRemaining");
    openapiFields.add("Headline");
    openapiFields.add("Merchant");
    openapiFields.add("MerchantLogo");
    openapiFields.add("OfferId");
    openapiFields.add("PointsEarned");
    openapiFields.add("RedemptionEndDate");
    openapiFields.add("RedemptionMode");
    openapiFields.add("RemainingSpend");
    openapiFields.add("ShortDescription");
    openapiFields.add("Status");
    openapiFields.add("TotalSpend");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScActivation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScActivation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScActivation is not found in the empty JSON string", ScActivation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScActivation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScActivation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ActivationId") != null && !jsonObj.get("ActivationId").isJsonNull()) && !jsonObj.get("ActivationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ActivationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ActivationId").toString()));
      }
      if ((jsonObj.get("CashBack") != null && !jsonObj.get("CashBack").isJsonNull()) && !jsonObj.get("CashBack").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CashBack` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CashBack").toString()));
      }
      if ((jsonObj.get("DaysRemaining") != null && !jsonObj.get("DaysRemaining").isJsonNull()) && !jsonObj.get("DaysRemaining").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DaysRemaining` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DaysRemaining").toString()));
      }
      if ((jsonObj.get("Headline") != null && !jsonObj.get("Headline").isJsonNull()) && !jsonObj.get("Headline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Headline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Headline").toString()));
      }
      if ((jsonObj.get("Merchant") != null && !jsonObj.get("Merchant").isJsonNull()) && !jsonObj.get("Merchant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Merchant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Merchant").toString()));
      }
      if ((jsonObj.get("MerchantLogo") != null && !jsonObj.get("MerchantLogo").isJsonNull()) && !jsonObj.get("MerchantLogo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MerchantLogo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MerchantLogo").toString()));
      }
      if ((jsonObj.get("OfferId") != null && !jsonObj.get("OfferId").isJsonNull()) && !jsonObj.get("OfferId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OfferId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OfferId").toString()));
      }
      if ((jsonObj.get("PointsEarned") != null && !jsonObj.get("PointsEarned").isJsonNull()) && !jsonObj.get("PointsEarned").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PointsEarned` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PointsEarned").toString()));
      }
      if ((jsonObj.get("RedemptionMode") != null && !jsonObj.get("RedemptionMode").isJsonNull()) && !jsonObj.get("RedemptionMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RedemptionMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RedemptionMode").toString()));
      }
      if ((jsonObj.get("RemainingSpend") != null && !jsonObj.get("RemainingSpend").isJsonNull()) && !jsonObj.get("RemainingSpend").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RemainingSpend` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RemainingSpend").toString()));
      }
      if ((jsonObj.get("ShortDescription") != null && !jsonObj.get("ShortDescription").isJsonNull()) && !jsonObj.get("ShortDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShortDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShortDescription").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      if ((jsonObj.get("TotalSpend") != null && !jsonObj.get("TotalSpend").isJsonNull()) && !jsonObj.get("TotalSpend").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalSpend` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalSpend").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScActivation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScActivation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScActivation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScActivation.class));

       return (TypeAdapter<T>) new TypeAdapter<ScActivation>() {
           @Override
           public void write(JsonWriter out, ScActivation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScActivation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScActivation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScActivation
   * @throws IOException if the JSON string is invalid with respect to ScActivation
   */
  public static ScActivation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScActivation.class);
  }

  /**
   * Convert an instance of ScActivation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

