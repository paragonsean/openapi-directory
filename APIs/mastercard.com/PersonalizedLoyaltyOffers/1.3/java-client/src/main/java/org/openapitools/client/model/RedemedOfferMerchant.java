/*
 * Personalized Offers
 * This API provides content for financial instutions participating in Mastercard Personalized Offers to use in online and mobile banking applications for cardholders.
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RedemedOfferMerchant
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:15.199950-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RedemedOfferMerchant {
  public static final String SERIALIZED_NAME_CATEGORY = "Category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_MERCHANT_DISTANCE = "MerchantDistance";
  @SerializedName(SERIALIZED_NAME_MERCHANT_DISTANCE)
  private BigDecimal merchantDistance;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STORE_LOCATOR_URL = "StoreLocatorUrl";
  @SerializedName(SERIALIZED_NAME_STORE_LOCATOR_URL)
  private String storeLocatorUrl;

  public static final String SERIALIZED_NAME_WEBSITE_URL = "WebsiteUrl";
  @SerializedName(SERIALIZED_NAME_WEBSITE_URL)
  private String websiteUrl;

  public RedemedOfferMerchant() {
  }

  public RedemedOfferMerchant category(String category) {
    this.category = category;
    return this;
  }

  /**
   * The type of retailer to which the offer applies, not intended for end-user display.
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public RedemedOfferMerchant merchantDistance(BigDecimal merchantDistance) {
    this.merchantDistance = merchantDistance;
    return this;
  }

  /**
   * Reserved for future use.
   * @return merchantDistance
   */
  @javax.annotation.Nullable
  public BigDecimal getMerchantDistance() {
    return merchantDistance;
  }

  public void setMerchantDistance(BigDecimal merchantDistance) {
    this.merchantDistance = merchantDistance;
  }


  public RedemedOfferMerchant name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Display name for the retailer to which the offer applies.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RedemedOfferMerchant storeLocatorUrl(String storeLocatorUrl) {
    this.storeLocatorUrl = storeLocatorUrl;
    return this;
  }

  /**
   * Web page where retailer outlets can be found.
   * @return storeLocatorUrl
   */
  @javax.annotation.Nullable
  public String getStoreLocatorUrl() {
    return storeLocatorUrl;
  }

  public void setStoreLocatorUrl(String storeLocatorUrl) {
    this.storeLocatorUrl = storeLocatorUrl;
  }


  public RedemedOfferMerchant websiteUrl(String websiteUrl) {
    this.websiteUrl = websiteUrl;
    return this;
  }

  /**
   * The internet address of the retailer.
   * @return websiteUrl
   */
  @javax.annotation.Nullable
  public String getWebsiteUrl() {
    return websiteUrl;
  }

  public void setWebsiteUrl(String websiteUrl) {
    this.websiteUrl = websiteUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RedemedOfferMerchant redemedOfferMerchant = (RedemedOfferMerchant) o;
    return Objects.equals(this.category, redemedOfferMerchant.category) &&
        Objects.equals(this.merchantDistance, redemedOfferMerchant.merchantDistance) &&
        Objects.equals(this.name, redemedOfferMerchant.name) &&
        Objects.equals(this.storeLocatorUrl, redemedOfferMerchant.storeLocatorUrl) &&
        Objects.equals(this.websiteUrl, redemedOfferMerchant.websiteUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, merchantDistance, name, storeLocatorUrl, websiteUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RedemedOfferMerchant {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    merchantDistance: ").append(toIndentedString(merchantDistance)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    storeLocatorUrl: ").append(toIndentedString(storeLocatorUrl)).append("\n");
    sb.append("    websiteUrl: ").append(toIndentedString(websiteUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Category");
    openapiFields.add("MerchantDistance");
    openapiFields.add("Name");
    openapiFields.add("StoreLocatorUrl");
    openapiFields.add("WebsiteUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RedemedOfferMerchant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RedemedOfferMerchant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RedemedOfferMerchant is not found in the empty JSON string", RedemedOfferMerchant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RedemedOfferMerchant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RedemedOfferMerchant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Category") != null && !jsonObj.get("Category").isJsonNull()) && !jsonObj.get("Category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Category").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("StoreLocatorUrl") != null && !jsonObj.get("StoreLocatorUrl").isJsonNull()) && !jsonObj.get("StoreLocatorUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StoreLocatorUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StoreLocatorUrl").toString()));
      }
      if ((jsonObj.get("WebsiteUrl") != null && !jsonObj.get("WebsiteUrl").isJsonNull()) && !jsonObj.get("WebsiteUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WebsiteUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WebsiteUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RedemedOfferMerchant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RedemedOfferMerchant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RedemedOfferMerchant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RedemedOfferMerchant.class));

       return (TypeAdapter<T>) new TypeAdapter<RedemedOfferMerchant>() {
           @Override
           public void write(JsonWriter out, RedemedOfferMerchant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RedemedOfferMerchant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RedemedOfferMerchant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RedemedOfferMerchant
   * @throws IOException if the JSON string is invalid with respect to RedemedOfferMerchant
   */
  public static RedemedOfferMerchant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RedemedOfferMerchant.class);
  }

  /**
   * Convert an instance of RedemedOfferMerchant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

