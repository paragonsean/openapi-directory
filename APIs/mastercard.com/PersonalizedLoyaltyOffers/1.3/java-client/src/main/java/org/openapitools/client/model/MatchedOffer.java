/*
 * Personalized Offers
 * This API provides content for financial instutions participating in Mastercard Personalized Offers to use in online and mobile banking applications for cardholders.
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.Merchant;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MatchedOffer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:15.199950-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MatchedOffer {
  public static final String SERIALIZED_NAME_ACTIVE_SC = "ActiveSc";
  @SerializedName(SERIALIZED_NAME_ACTIVE_SC)
  private String activeSc;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "CurrencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_DISCOUNT = "Discount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT)
  private String discount;

  public static final String SERIALIZED_NAME_DISCOUNT_TYPE = "DiscountType";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_TYPE)
  private String discountType;

  public static final String SERIALIZED_NAME_EVENT_END_DATE = "EventEndDate";
  @SerializedName(SERIALIZED_NAME_EVENT_END_DATE)
  private LocalDate eventEndDate;

  public static final String SERIALIZED_NAME_EVENT_START_DATE = "EventStartDate";
  @SerializedName(SERIALIZED_NAME_EVENT_START_DATE)
  private LocalDate eventStartDate;

  public static final String SERIALIZED_NAME_HEADLINE = "Headline";
  @SerializedName(SERIALIZED_NAME_HEADLINE)
  private String headline;

  public static final String SERIALIZED_NAME_LANGUAGE = "Language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_MERCHANT = "Merchant";
  @SerializedName(SERIALIZED_NAME_MERCHANT)
  private Merchant merchant;

  public static final String SERIALIZED_NAME_MERCHANT_IMAGE_U_R_L = "MerchantImageURL";
  @SerializedName(SERIALIZED_NAME_MERCHANT_IMAGE_U_R_L)
  private String merchantImageURL;

  public static final String SERIALIZED_NAME_OFFER_ID = "OfferId";
  @SerializedName(SERIALIZED_NAME_OFFER_ID)
  private String offerId;

  public static final String SERIALIZED_NAME_OFFER_SOURCE = "OfferSource";
  @SerializedName(SERIALIZED_NAME_OFFER_SOURCE)
  private String offerSource;

  public static final String SERIALIZED_NAME_OFFER_TYPE = "OfferType";
  @SerializedName(SERIALIZED_NAME_OFFER_TYPE)
  private String offerType;

  public static final String SERIALIZED_NAME_PRICE = "Price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private String price;

  public static final String SERIALIZED_NAME_REDEMPTION_MODE = "RedemptionMode";
  @SerializedName(SERIALIZED_NAME_REDEMPTION_MODE)
  private String redemptionMode;

  public static final String SERIALIZED_NAME_SHORT_DESCRIPTION = "ShortDescription";
  @SerializedName(SERIALIZED_NAME_SHORT_DESCRIPTION)
  private String shortDescription;

  public MatchedOffer() {
  }

  public MatchedOffer activeSc(String activeSc) {
    this.activeSc = activeSc;
    return this;
  }

  /**
   * ACTIVATED_STATEMENT_CREDIT- ready for redemption by the user. AVAILABLE- requires call to Activate Statement Credit Offer to make ready for redemption.
   * @return activeSc
   */
  @javax.annotation.Nullable
  public String getActiveSc() {
    return activeSc;
  }

  public void setActiveSc(String activeSc) {
    this.activeSc = activeSc;
  }


  public MatchedOffer currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * ISO 4217 code in which the redeeming transaction must be made to qualify for the offer.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public MatchedOffer discount(String discount) {
    this.discount = discount;
    return this;
  }

  /**
   * The markdown represented by the offer, in absolute value or percentage.
   * @return discount
   */
  @javax.annotation.Nullable
  public String getDiscount() {
    return discount;
  }

  public void setDiscount(String discount) {
    this.discount = discount;
  }


  public MatchedOffer discountType(String discountType) {
    this.discountType = discountType;
    return this;
  }

  /**
   * The kind of markdown represented by the offer. ABSOLUTE- fixed amount. PERCENTAGE- share of purchase.
   * @return discountType
   */
  @javax.annotation.Nullable
  public String getDiscountType() {
    return discountType;
  }

  public void setDiscountType(String discountType) {
    this.discountType = discountType;
  }


  public MatchedOffer eventEndDate(LocalDate eventEndDate) {
    this.eventEndDate = eventEndDate;
    return this;
  }

  /**
   * Last day that redemption can be made.
   * @return eventEndDate
   */
  @javax.annotation.Nullable
  public LocalDate getEventEndDate() {
    return eventEndDate;
  }

  public void setEventEndDate(LocalDate eventEndDate) {
    this.eventEndDate = eventEndDate;
  }


  public MatchedOffer eventStartDate(LocalDate eventStartDate) {
    this.eventStartDate = eventStartDate;
    return this;
  }

  /**
   * First day that redemption can be made by any user, may not apply to the specified user.
   * @return eventStartDate
   */
  @javax.annotation.Nullable
  public LocalDate getEventStartDate() {
    return eventStartDate;
  }

  public void setEventStartDate(LocalDate eventStartDate) {
    this.eventStartDate = eventStartDate;
  }


  public MatchedOffer headline(String headline) {
    this.headline = headline;
    return this;
  }

  /**
   * Brief details about the deal.
   * @return headline
   */
  @javax.annotation.Nullable
  public String getHeadline() {
    return headline;
  }

  public void setHeadline(String headline) {
    this.headline = headline;
  }


  public MatchedOffer language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Tongue of offer display text.
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public MatchedOffer merchant(Merchant merchant) {
    this.merchant = merchant;
    return this;
  }

  /**
   * Get merchant
   * @return merchant
   */
  @javax.annotation.Nullable
  public Merchant getMerchant() {
    return merchant;
  }

  public void setMerchant(Merchant merchant) {
    this.merchant = merchant;
  }


  public MatchedOffer merchantImageURL(String merchantImageURL) {
    this.merchantImageURL = merchantImageURL;
    return this;
  }

  /**
   * Square picture of the retailer logo.
   * @return merchantImageURL
   */
  @javax.annotation.Nullable
  public String getMerchantImageURL() {
    return merchantImageURL;
  }

  public void setMerchantImageURL(String merchantImageURL) {
    this.merchantImageURL = merchantImageURL;
  }


  public MatchedOffer offerId(String offerId) {
    this.offerId = offerId;
    return this;
  }

  /**
   * System-wide identifier for the campaign, not intended for end-user display.
   * @return offerId
   */
  @javax.annotation.Nullable
  public String getOfferId() {
    return offerId;
  }

  public void setOfferId(String offerId) {
    this.offerId = offerId;
  }


  public MatchedOffer offerSource(String offerSource) {
    this.offerSource = offerSource;
    return this;
  }

  /**
   * Platform that made the offer available, not intended for end-user display.
   * @return offerSource
   */
  @javax.annotation.Nullable
  public String getOfferSource() {
    return offerSource;
  }

  public void setOfferSource(String offerSource) {
    this.offerSource = offerSource;
  }


  public MatchedOffer offerType(String offerType) {
    this.offerType = offerType;
    return this;
  }

  /**
   * The kind of deal. POSTPAIDCREDIT- Statement Credit Offer, which is a discount that is automatically applied to the card linked to the user and utilized to make the purchase.
   * @return offerType
   */
  @javax.annotation.Nullable
  public String getOfferType() {
    return offerType;
  }

  public void setOfferType(String offerType) {
    this.offerType = offerType;
  }


  public MatchedOffer price(String price) {
    this.price = price;
    return this;
  }

  /**
   * Reserved for future use.
   * @return price
   */
  @javax.annotation.Nullable
  public String getPrice() {
    return price;
  }

  public void setPrice(String price) {
    this.price = price;
  }


  public MatchedOffer redemptionMode(String redemptionMode) {
    this.redemptionMode = redemptionMode;
    return this;
  }

  /**
   * Type of credit made upon redemption of the offer- CASH, POINTS, or EITHER.
   * @return redemptionMode
   */
  @javax.annotation.Nullable
  public String getRedemptionMode() {
    return redemptionMode;
  }

  public void setRedemptionMode(String redemptionMode) {
    this.redemptionMode = redemptionMode;
  }


  public MatchedOffer shortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
    return this;
  }

  /**
   * Summary of the deal, typically displayed beneath the headline in a list view.
   * @return shortDescription
   */
  @javax.annotation.Nullable
  public String getShortDescription() {
    return shortDescription;
  }

  public void setShortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchedOffer matchedOffer = (MatchedOffer) o;
    return Objects.equals(this.activeSc, matchedOffer.activeSc) &&
        Objects.equals(this.currencyCode, matchedOffer.currencyCode) &&
        Objects.equals(this.discount, matchedOffer.discount) &&
        Objects.equals(this.discountType, matchedOffer.discountType) &&
        Objects.equals(this.eventEndDate, matchedOffer.eventEndDate) &&
        Objects.equals(this.eventStartDate, matchedOffer.eventStartDate) &&
        Objects.equals(this.headline, matchedOffer.headline) &&
        Objects.equals(this.language, matchedOffer.language) &&
        Objects.equals(this.merchant, matchedOffer.merchant) &&
        Objects.equals(this.merchantImageURL, matchedOffer.merchantImageURL) &&
        Objects.equals(this.offerId, matchedOffer.offerId) &&
        Objects.equals(this.offerSource, matchedOffer.offerSource) &&
        Objects.equals(this.offerType, matchedOffer.offerType) &&
        Objects.equals(this.price, matchedOffer.price) &&
        Objects.equals(this.redemptionMode, matchedOffer.redemptionMode) &&
        Objects.equals(this.shortDescription, matchedOffer.shortDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeSc, currencyCode, discount, discountType, eventEndDate, eventStartDate, headline, language, merchant, merchantImageURL, offerId, offerSource, offerType, price, redemptionMode, shortDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchedOffer {\n");
    sb.append("    activeSc: ").append(toIndentedString(activeSc)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    discountType: ").append(toIndentedString(discountType)).append("\n");
    sb.append("    eventEndDate: ").append(toIndentedString(eventEndDate)).append("\n");
    sb.append("    eventStartDate: ").append(toIndentedString(eventStartDate)).append("\n");
    sb.append("    headline: ").append(toIndentedString(headline)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    merchant: ").append(toIndentedString(merchant)).append("\n");
    sb.append("    merchantImageURL: ").append(toIndentedString(merchantImageURL)).append("\n");
    sb.append("    offerId: ").append(toIndentedString(offerId)).append("\n");
    sb.append("    offerSource: ").append(toIndentedString(offerSource)).append("\n");
    sb.append("    offerType: ").append(toIndentedString(offerType)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    redemptionMode: ").append(toIndentedString(redemptionMode)).append("\n");
    sb.append("    shortDescription: ").append(toIndentedString(shortDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActiveSc");
    openapiFields.add("CurrencyCode");
    openapiFields.add("Discount");
    openapiFields.add("DiscountType");
    openapiFields.add("EventEndDate");
    openapiFields.add("EventStartDate");
    openapiFields.add("Headline");
    openapiFields.add("Language");
    openapiFields.add("Merchant");
    openapiFields.add("MerchantImageURL");
    openapiFields.add("OfferId");
    openapiFields.add("OfferSource");
    openapiFields.add("OfferType");
    openapiFields.add("Price");
    openapiFields.add("RedemptionMode");
    openapiFields.add("ShortDescription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MatchedOffer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MatchedOffer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MatchedOffer is not found in the empty JSON string", MatchedOffer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MatchedOffer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MatchedOffer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ActiveSc") != null && !jsonObj.get("ActiveSc").isJsonNull()) && !jsonObj.get("ActiveSc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ActiveSc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ActiveSc").toString()));
      }
      if ((jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) && !jsonObj.get("CurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrencyCode").toString()));
      }
      if ((jsonObj.get("Discount") != null && !jsonObj.get("Discount").isJsonNull()) && !jsonObj.get("Discount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Discount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Discount").toString()));
      }
      if ((jsonObj.get("DiscountType") != null && !jsonObj.get("DiscountType").isJsonNull()) && !jsonObj.get("DiscountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DiscountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DiscountType").toString()));
      }
      if ((jsonObj.get("Headline") != null && !jsonObj.get("Headline").isJsonNull()) && !jsonObj.get("Headline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Headline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Headline").toString()));
      }
      if ((jsonObj.get("Language") != null && !jsonObj.get("Language").isJsonNull()) && !jsonObj.get("Language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Language").toString()));
      }
      // validate the optional field `Merchant`
      if (jsonObj.get("Merchant") != null && !jsonObj.get("Merchant").isJsonNull()) {
        Merchant.validateJsonElement(jsonObj.get("Merchant"));
      }
      if ((jsonObj.get("MerchantImageURL") != null && !jsonObj.get("MerchantImageURL").isJsonNull()) && !jsonObj.get("MerchantImageURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MerchantImageURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MerchantImageURL").toString()));
      }
      if ((jsonObj.get("OfferId") != null && !jsonObj.get("OfferId").isJsonNull()) && !jsonObj.get("OfferId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OfferId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OfferId").toString()));
      }
      if ((jsonObj.get("OfferSource") != null && !jsonObj.get("OfferSource").isJsonNull()) && !jsonObj.get("OfferSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OfferSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OfferSource").toString()));
      }
      if ((jsonObj.get("OfferType") != null && !jsonObj.get("OfferType").isJsonNull()) && !jsonObj.get("OfferType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OfferType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OfferType").toString()));
      }
      if ((jsonObj.get("Price") != null && !jsonObj.get("Price").isJsonNull()) && !jsonObj.get("Price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Price").toString()));
      }
      if ((jsonObj.get("RedemptionMode") != null && !jsonObj.get("RedemptionMode").isJsonNull()) && !jsonObj.get("RedemptionMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RedemptionMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RedemptionMode").toString()));
      }
      if ((jsonObj.get("ShortDescription") != null && !jsonObj.get("ShortDescription").isJsonNull()) && !jsonObj.get("ShortDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShortDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShortDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MatchedOffer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MatchedOffer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MatchedOffer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MatchedOffer.class));

       return (TypeAdapter<T>) new TypeAdapter<MatchedOffer>() {
           @Override
           public void write(JsonWriter out, MatchedOffer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MatchedOffer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MatchedOffer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MatchedOffer
   * @throws IOException if the JSON string is invalid with respect to MatchedOffer
   */
  public static MatchedOffer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MatchedOffer.class);
  }

  /**
   * Convert an instance of MatchedOffer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

