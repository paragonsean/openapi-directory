/*
 * Personalized Offers
 * This API provides content for financial instutions participating in Mastercard Personalized Offers to use in online and mobile banking applications for cardholders.
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Transaction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:15.199950-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Transaction {
  public static final String SERIALIZED_NAME_CASH_BACK_EARNED = "CashBackEarned";
  @SerializedName(SERIALIZED_NAME_CASH_BACK_EARNED)
  private String cashBackEarned;

  public static final String SERIALIZED_NAME_POINTS_EARNED = "PointsEarned";
  @SerializedName(SERIALIZED_NAME_POINTS_EARNED)
  private String pointsEarned;

  public static final String SERIALIZED_NAME_REDEMPTION_DATE = "RedemptionDate";
  @SerializedName(SERIALIZED_NAME_REDEMPTION_DATE)
  private LocalDate redemptionDate;

  public static final String SERIALIZED_NAME_TRANSACTION_AMOUNT = "TransactionAmount";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_AMOUNT)
  private String transactionAmount;

  public Transaction() {
  }

  public Transaction cashBackEarned(String cashBackEarned) {
    this.cashBackEarned = cashBackEarned;
    return this;
  }

  /**
   * Value earned upon fulfillment of offer conditions, not applicable to points activations.
   * @return cashBackEarned
   */
  @javax.annotation.Nullable
  public String getCashBackEarned() {
    return cashBackEarned;
  }

  public void setCashBackEarned(String cashBackEarned) {
    this.cashBackEarned = cashBackEarned;
  }


  public Transaction pointsEarned(String pointsEarned) {
    this.pointsEarned = pointsEarned;
    return this;
  }

  /**
   * Value earned upon fulfillment of offer conditions, not applicable to cash activations.
   * @return pointsEarned
   */
  @javax.annotation.Nullable
  public String getPointsEarned() {
    return pointsEarned;
  }

  public void setPointsEarned(String pointsEarned) {
    this.pointsEarned = pointsEarned;
  }


  public Transaction redemptionDate(LocalDate redemptionDate) {
    this.redemptionDate = redemptionDate;
    return this;
  }

  /**
   * The day on which a purchase fulfilled the offer.
   * @return redemptionDate
   */
  @javax.annotation.Nullable
  public LocalDate getRedemptionDate() {
    return redemptionDate;
  }

  public void setRedemptionDate(LocalDate redemptionDate) {
    this.redemptionDate = redemptionDate;
  }


  public Transaction transactionAmount(String transactionAmount) {
    this.transactionAmount = transactionAmount;
    return this;
  }

  /**
   * Value of the purchase that fulfilled the offer, decimal is implied.
   * @return transactionAmount
   */
  @javax.annotation.Nullable
  public String getTransactionAmount() {
    return transactionAmount;
  }

  public void setTransactionAmount(String transactionAmount) {
    this.transactionAmount = transactionAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transaction transaction = (Transaction) o;
    return Objects.equals(this.cashBackEarned, transaction.cashBackEarned) &&
        Objects.equals(this.pointsEarned, transaction.pointsEarned) &&
        Objects.equals(this.redemptionDate, transaction.redemptionDate) &&
        Objects.equals(this.transactionAmount, transaction.transactionAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cashBackEarned, pointsEarned, redemptionDate, transactionAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transaction {\n");
    sb.append("    cashBackEarned: ").append(toIndentedString(cashBackEarned)).append("\n");
    sb.append("    pointsEarned: ").append(toIndentedString(pointsEarned)).append("\n");
    sb.append("    redemptionDate: ").append(toIndentedString(redemptionDate)).append("\n");
    sb.append("    transactionAmount: ").append(toIndentedString(transactionAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CashBackEarned");
    openapiFields.add("PointsEarned");
    openapiFields.add("RedemptionDate");
    openapiFields.add("TransactionAmount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Transaction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Transaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Transaction is not found in the empty JSON string", Transaction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Transaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Transaction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CashBackEarned") != null && !jsonObj.get("CashBackEarned").isJsonNull()) && !jsonObj.get("CashBackEarned").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CashBackEarned` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CashBackEarned").toString()));
      }
      if ((jsonObj.get("PointsEarned") != null && !jsonObj.get("PointsEarned").isJsonNull()) && !jsonObj.get("PointsEarned").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PointsEarned` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PointsEarned").toString()));
      }
      if ((jsonObj.get("TransactionAmount") != null && !jsonObj.get("TransactionAmount").isJsonNull()) && !jsonObj.get("TransactionAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransactionAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TransactionAmount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Transaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Transaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Transaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Transaction.class));

       return (TypeAdapter<T>) new TypeAdapter<Transaction>() {
           @Override
           public void write(JsonWriter out, Transaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Transaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Transaction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Transaction
   * @throws IOException if the JSON string is invalid with respect to Transaction
   */
  public static Transaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Transaction.class);
  }

  /**
   * Convert an instance of Transaction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

