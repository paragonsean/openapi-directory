/*
 * Personalized Offers
 * This API provides content for financial instutions participating in Mastercard Personalized Offers to use in online and mobile banking applications for cardholders.
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DetailPostpaidCreditOffer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:15.199950-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DetailPostpaidCreditOffer {
  public static final String SERIALIZED_NAME_CASH_BACK = "CashBack";
  @SerializedName(SERIALIZED_NAME_CASH_BACK)
  private String cashBack;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "CurrencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_MAX_CASHBACK = "MaxCashback";
  @SerializedName(SERIALIZED_NAME_MAX_CASHBACK)
  private String maxCashback;

  public static final String SERIALIZED_NAME_MIN_TRANSACTION_AMOUNT_TO_REDEEM = "MinTransactionAmountToRedeem";
  @SerializedName(SERIALIZED_NAME_MIN_TRANSACTION_AMOUNT_TO_REDEEM)
  private String minTransactionAmountToRedeem;

  public static final String SERIALIZED_NAME_STATEMENT_CREDIT_TYPE = "StatementCreditType";
  @SerializedName(SERIALIZED_NAME_STATEMENT_CREDIT_TYPE)
  private String statementCreditType;

  public static final String SERIALIZED_NAME_VISIT_THRESHOLD = "VisitThreshold";
  @SerializedName(SERIALIZED_NAME_VISIT_THRESHOLD)
  private String visitThreshold;

  public DetailPostpaidCreditOffer() {
  }

  public DetailPostpaidCreditOffer cashBack(String cashBack) {
    this.cashBack = cashBack;
    return this;
  }

  /**
   * Value of POSTPAIDCREDIT deal redemption.
   * @return cashBack
   */
  @javax.annotation.Nullable
  public String getCashBack() {
    return cashBack;
  }

  public void setCashBack(String cashBack) {
    this.cashBack = cashBack;
  }


  public DetailPostpaidCreditOffer currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * ISO 4217 code in which the redeeming transaction must be made to qualify for the offer.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public DetailPostpaidCreditOffer maxCashback(String maxCashback) {
    this.maxCashback = maxCashback;
    return this;
  }

  /**
   * The most cash back which a user can earn for the offer.
   * @return maxCashback
   */
  @javax.annotation.Nullable
  public String getMaxCashback() {
    return maxCashback;
  }

  public void setMaxCashback(String maxCashback) {
    this.maxCashback = maxCashback;
  }


  public DetailPostpaidCreditOffer minTransactionAmountToRedeem(String minTransactionAmountToRedeem) {
    this.minTransactionAmountToRedeem = minTransactionAmountToRedeem;
    return this;
  }

  /**
   * The smallest purchase amount that will qualify for redemption.
   * @return minTransactionAmountToRedeem
   */
  @javax.annotation.Nullable
  public String getMinTransactionAmountToRedeem() {
    return minTransactionAmountToRedeem;
  }

  public void setMinTransactionAmountToRedeem(String minTransactionAmountToRedeem) {
    this.minTransactionAmountToRedeem = minTransactionAmountToRedeem;
  }


  public DetailPostpaidCreditOffer statementCreditType(String statementCreditType) {
    this.statementCreditType = statementCreditType;
    return this;
  }

  /**
   * Calculation kind of the redemption value. SPEND_CASH/VISIT_CASH- fixed value. SPEND_PERCENTAGE/VISIT_PERCENTAGE- share value.
   * @return statementCreditType
   */
  @javax.annotation.Nullable
  public String getStatementCreditType() {
    return statementCreditType;
  }

  public void setStatementCreditType(String statementCreditType) {
    this.statementCreditType = statementCreditType;
  }


  public DetailPostpaidCreditOffer visitThreshold(String visitThreshold) {
    this.visitThreshold = visitThreshold;
    return this;
  }

  /**
   * The number of purchases required to qualify for redemption.
   * @return visitThreshold
   */
  @javax.annotation.Nullable
  public String getVisitThreshold() {
    return visitThreshold;
  }

  public void setVisitThreshold(String visitThreshold) {
    this.visitThreshold = visitThreshold;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DetailPostpaidCreditOffer detailPostpaidCreditOffer = (DetailPostpaidCreditOffer) o;
    return Objects.equals(this.cashBack, detailPostpaidCreditOffer.cashBack) &&
        Objects.equals(this.currencyCode, detailPostpaidCreditOffer.currencyCode) &&
        Objects.equals(this.maxCashback, detailPostpaidCreditOffer.maxCashback) &&
        Objects.equals(this.minTransactionAmountToRedeem, detailPostpaidCreditOffer.minTransactionAmountToRedeem) &&
        Objects.equals(this.statementCreditType, detailPostpaidCreditOffer.statementCreditType) &&
        Objects.equals(this.visitThreshold, detailPostpaidCreditOffer.visitThreshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cashBack, currencyCode, maxCashback, minTransactionAmountToRedeem, statementCreditType, visitThreshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DetailPostpaidCreditOffer {\n");
    sb.append("    cashBack: ").append(toIndentedString(cashBack)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    maxCashback: ").append(toIndentedString(maxCashback)).append("\n");
    sb.append("    minTransactionAmountToRedeem: ").append(toIndentedString(minTransactionAmountToRedeem)).append("\n");
    sb.append("    statementCreditType: ").append(toIndentedString(statementCreditType)).append("\n");
    sb.append("    visitThreshold: ").append(toIndentedString(visitThreshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CashBack");
    openapiFields.add("CurrencyCode");
    openapiFields.add("MaxCashback");
    openapiFields.add("MinTransactionAmountToRedeem");
    openapiFields.add("StatementCreditType");
    openapiFields.add("VisitThreshold");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DetailPostpaidCreditOffer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DetailPostpaidCreditOffer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DetailPostpaidCreditOffer is not found in the empty JSON string", DetailPostpaidCreditOffer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DetailPostpaidCreditOffer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DetailPostpaidCreditOffer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CashBack") != null && !jsonObj.get("CashBack").isJsonNull()) && !jsonObj.get("CashBack").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CashBack` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CashBack").toString()));
      }
      if ((jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) && !jsonObj.get("CurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrencyCode").toString()));
      }
      if ((jsonObj.get("MaxCashback") != null && !jsonObj.get("MaxCashback").isJsonNull()) && !jsonObj.get("MaxCashback").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MaxCashback` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MaxCashback").toString()));
      }
      if ((jsonObj.get("MinTransactionAmountToRedeem") != null && !jsonObj.get("MinTransactionAmountToRedeem").isJsonNull()) && !jsonObj.get("MinTransactionAmountToRedeem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MinTransactionAmountToRedeem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MinTransactionAmountToRedeem").toString()));
      }
      if ((jsonObj.get("StatementCreditType") != null && !jsonObj.get("StatementCreditType").isJsonNull()) && !jsonObj.get("StatementCreditType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatementCreditType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatementCreditType").toString()));
      }
      if ((jsonObj.get("VisitThreshold") != null && !jsonObj.get("VisitThreshold").isJsonNull()) && !jsonObj.get("VisitThreshold").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VisitThreshold` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VisitThreshold").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DetailPostpaidCreditOffer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DetailPostpaidCreditOffer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DetailPostpaidCreditOffer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DetailPostpaidCreditOffer.class));

       return (TypeAdapter<T>) new TypeAdapter<DetailPostpaidCreditOffer>() {
           @Override
           public void write(JsonWriter out, DetailPostpaidCreditOffer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DetailPostpaidCreditOffer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DetailPostpaidCreditOffer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DetailPostpaidCreditOffer
   * @throws IOException if the JSON string is invalid with respect to DetailPostpaidCreditOffer
   */
  public static DetailPostpaidCreditOffer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DetailPostpaidCreditOffer.class);
  }

  /**
   * Convert an instance of DetailPostpaidCreditOffer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

