/**
 * Personalized Offers
 * This API provides content for financial instutions participating in Mastercard Personalized Offers to use in online and mobile banking applications for cardholders.
 *
 * The version of the OpenAPI document: 1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetailPostpaidCreditOffer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetailPostpaidCreditOffer::OAIDetailPostpaidCreditOffer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetailPostpaidCreditOffer::OAIDetailPostpaidCreditOffer() {
    this->initializeModel();
}

OAIDetailPostpaidCreditOffer::~OAIDetailPostpaidCreditOffer() {}

void OAIDetailPostpaidCreditOffer::initializeModel() {

    m_cash_back_isSet = false;
    m_cash_back_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_max_cashback_isSet = false;
    m_max_cashback_isValid = false;

    m_min_transaction_amount_to_redeem_isSet = false;
    m_min_transaction_amount_to_redeem_isValid = false;

    m_statement_credit_type_isSet = false;
    m_statement_credit_type_isValid = false;

    m_visit_threshold_isSet = false;
    m_visit_threshold_isValid = false;
}

void OAIDetailPostpaidCreditOffer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetailPostpaidCreditOffer::fromJsonObject(QJsonObject json) {

    m_cash_back_isValid = ::OpenAPI::fromJsonValue(m_cash_back, json[QString("CashBack")]);
    m_cash_back_isSet = !json[QString("CashBack")].isNull() && m_cash_back_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("CurrencyCode")]);
    m_currency_code_isSet = !json[QString("CurrencyCode")].isNull() && m_currency_code_isValid;

    m_max_cashback_isValid = ::OpenAPI::fromJsonValue(m_max_cashback, json[QString("MaxCashback")]);
    m_max_cashback_isSet = !json[QString("MaxCashback")].isNull() && m_max_cashback_isValid;

    m_min_transaction_amount_to_redeem_isValid = ::OpenAPI::fromJsonValue(m_min_transaction_amount_to_redeem, json[QString("MinTransactionAmountToRedeem")]);
    m_min_transaction_amount_to_redeem_isSet = !json[QString("MinTransactionAmountToRedeem")].isNull() && m_min_transaction_amount_to_redeem_isValid;

    m_statement_credit_type_isValid = ::OpenAPI::fromJsonValue(m_statement_credit_type, json[QString("StatementCreditType")]);
    m_statement_credit_type_isSet = !json[QString("StatementCreditType")].isNull() && m_statement_credit_type_isValid;

    m_visit_threshold_isValid = ::OpenAPI::fromJsonValue(m_visit_threshold, json[QString("VisitThreshold")]);
    m_visit_threshold_isSet = !json[QString("VisitThreshold")].isNull() && m_visit_threshold_isValid;
}

QString OAIDetailPostpaidCreditOffer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetailPostpaidCreditOffer::asJsonObject() const {
    QJsonObject obj;
    if (m_cash_back_isSet) {
        obj.insert(QString("CashBack"), ::OpenAPI::toJsonValue(m_cash_back));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("CurrencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_max_cashback_isSet) {
        obj.insert(QString("MaxCashback"), ::OpenAPI::toJsonValue(m_max_cashback));
    }
    if (m_min_transaction_amount_to_redeem_isSet) {
        obj.insert(QString("MinTransactionAmountToRedeem"), ::OpenAPI::toJsonValue(m_min_transaction_amount_to_redeem));
    }
    if (m_statement_credit_type_isSet) {
        obj.insert(QString("StatementCreditType"), ::OpenAPI::toJsonValue(m_statement_credit_type));
    }
    if (m_visit_threshold_isSet) {
        obj.insert(QString("VisitThreshold"), ::OpenAPI::toJsonValue(m_visit_threshold));
    }
    return obj;
}

QString OAIDetailPostpaidCreditOffer::getCashBack() const {
    return m_cash_back;
}
void OAIDetailPostpaidCreditOffer::setCashBack(const QString &cash_back) {
    m_cash_back = cash_back;
    m_cash_back_isSet = true;
}

bool OAIDetailPostpaidCreditOffer::is_cash_back_Set() const{
    return m_cash_back_isSet;
}

bool OAIDetailPostpaidCreditOffer::is_cash_back_Valid() const{
    return m_cash_back_isValid;
}

QString OAIDetailPostpaidCreditOffer::getCurrencyCode() const {
    return m_currency_code;
}
void OAIDetailPostpaidCreditOffer::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIDetailPostpaidCreditOffer::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIDetailPostpaidCreditOffer::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAIDetailPostpaidCreditOffer::getMaxCashback() const {
    return m_max_cashback;
}
void OAIDetailPostpaidCreditOffer::setMaxCashback(const QString &max_cashback) {
    m_max_cashback = max_cashback;
    m_max_cashback_isSet = true;
}

bool OAIDetailPostpaidCreditOffer::is_max_cashback_Set() const{
    return m_max_cashback_isSet;
}

bool OAIDetailPostpaidCreditOffer::is_max_cashback_Valid() const{
    return m_max_cashback_isValid;
}

QString OAIDetailPostpaidCreditOffer::getMinTransactionAmountToRedeem() const {
    return m_min_transaction_amount_to_redeem;
}
void OAIDetailPostpaidCreditOffer::setMinTransactionAmountToRedeem(const QString &min_transaction_amount_to_redeem) {
    m_min_transaction_amount_to_redeem = min_transaction_amount_to_redeem;
    m_min_transaction_amount_to_redeem_isSet = true;
}

bool OAIDetailPostpaidCreditOffer::is_min_transaction_amount_to_redeem_Set() const{
    return m_min_transaction_amount_to_redeem_isSet;
}

bool OAIDetailPostpaidCreditOffer::is_min_transaction_amount_to_redeem_Valid() const{
    return m_min_transaction_amount_to_redeem_isValid;
}

QString OAIDetailPostpaidCreditOffer::getStatementCreditType() const {
    return m_statement_credit_type;
}
void OAIDetailPostpaidCreditOffer::setStatementCreditType(const QString &statement_credit_type) {
    m_statement_credit_type = statement_credit_type;
    m_statement_credit_type_isSet = true;
}

bool OAIDetailPostpaidCreditOffer::is_statement_credit_type_Set() const{
    return m_statement_credit_type_isSet;
}

bool OAIDetailPostpaidCreditOffer::is_statement_credit_type_Valid() const{
    return m_statement_credit_type_isValid;
}

QString OAIDetailPostpaidCreditOffer::getVisitThreshold() const {
    return m_visit_threshold;
}
void OAIDetailPostpaidCreditOffer::setVisitThreshold(const QString &visit_threshold) {
    m_visit_threshold = visit_threshold;
    m_visit_threshold_isSet = true;
}

bool OAIDetailPostpaidCreditOffer::is_visit_threshold_Set() const{
    return m_visit_threshold_isSet;
}

bool OAIDetailPostpaidCreditOffer::is_visit_threshold_Valid() const{
    return m_visit_threshold_isValid;
}

bool OAIDetailPostpaidCreditOffer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cash_back_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_cashback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_transaction_amount_to_redeem_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statement_credit_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visit_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetailPostpaidCreditOffer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
