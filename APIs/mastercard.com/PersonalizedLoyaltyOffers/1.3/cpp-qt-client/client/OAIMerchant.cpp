/**
 * Personalized Offers
 * This API provides content for financial instutions participating in Mastercard Personalized Offers to use in online and mobile banking applications for cardholders.
 *
 * The version of the OpenAPI document: 1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMerchant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMerchant::OAIMerchant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMerchant::OAIMerchant() {
    this->initializeModel();
}

OAIMerchant::~OAIMerchant() {}

void OAIMerchant::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_merchant_distance_isSet = false;
    m_merchant_distance_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_store_locator_url_isSet = false;
    m_store_locator_url_isValid = false;

    m_website_url_isSet = false;
    m_website_url_isValid = false;
}

void OAIMerchant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMerchant::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("Category")]);
    m_category_isSet = !json[QString("Category")].isNull() && m_category_isValid;

    m_merchant_distance_isValid = ::OpenAPI::fromJsonValue(m_merchant_distance, json[QString("MerchantDistance")]);
    m_merchant_distance_isSet = !json[QString("MerchantDistance")].isNull() && m_merchant_distance_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_store_locator_url_isValid = ::OpenAPI::fromJsonValue(m_store_locator_url, json[QString("StoreLocatorUrl")]);
    m_store_locator_url_isSet = !json[QString("StoreLocatorUrl")].isNull() && m_store_locator_url_isValid;

    m_website_url_isValid = ::OpenAPI::fromJsonValue(m_website_url, json[QString("WebsiteUrl")]);
    m_website_url_isSet = !json[QString("WebsiteUrl")].isNull() && m_website_url_isValid;
}

QString OAIMerchant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMerchant::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("Category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_merchant_distance_isSet) {
        obj.insert(QString("MerchantDistance"), ::OpenAPI::toJsonValue(m_merchant_distance));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_store_locator_url_isSet) {
        obj.insert(QString("StoreLocatorUrl"), ::OpenAPI::toJsonValue(m_store_locator_url));
    }
    if (m_website_url_isSet) {
        obj.insert(QString("WebsiteUrl"), ::OpenAPI::toJsonValue(m_website_url));
    }
    return obj;
}

QString OAIMerchant::getCategory() const {
    return m_category;
}
void OAIMerchant::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIMerchant::is_category_Set() const{
    return m_category_isSet;
}

bool OAIMerchant::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIMerchant::getMerchantDistance() const {
    return m_merchant_distance;
}
void OAIMerchant::setMerchantDistance(const QString &merchant_distance) {
    m_merchant_distance = merchant_distance;
    m_merchant_distance_isSet = true;
}

bool OAIMerchant::is_merchant_distance_Set() const{
    return m_merchant_distance_isSet;
}

bool OAIMerchant::is_merchant_distance_Valid() const{
    return m_merchant_distance_isValid;
}

QString OAIMerchant::getName() const {
    return m_name;
}
void OAIMerchant::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMerchant::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMerchant::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMerchant::getStoreLocatorUrl() const {
    return m_store_locator_url;
}
void OAIMerchant::setStoreLocatorUrl(const QString &store_locator_url) {
    m_store_locator_url = store_locator_url;
    m_store_locator_url_isSet = true;
}

bool OAIMerchant::is_store_locator_url_Set() const{
    return m_store_locator_url_isSet;
}

bool OAIMerchant::is_store_locator_url_Valid() const{
    return m_store_locator_url_isValid;
}

QString OAIMerchant::getWebsiteUrl() const {
    return m_website_url;
}
void OAIMerchant::setWebsiteUrl(const QString &website_url) {
    m_website_url = website_url;
    m_website_url_isSet = true;
}

bool OAIMerchant::is_website_url_Set() const{
    return m_website_url_isSet;
}

bool OAIMerchant::is_website_url_Valid() const{
    return m_website_url_isValid;
}

bool OAIMerchant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_locator_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMerchant::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
