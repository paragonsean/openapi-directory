/**
 * Personalized Offers
 * This API provides content for financial instutions participating in Mastercard Personalized Offers to use in online and mobile banking applications for cardholders.
 *
 * The version of the OpenAPI document: 1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRedemedOffer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRedemedOffer::OAIRedemedOffer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRedemedOffer::OAIRedemedOffer() {
    this->initializeModel();
}

OAIRedemedOffer::~OAIRedemedOffer() {}

void OAIRedemedOffer::initializeModel() {

    m_activation_date_isSet = false;
    m_activation_date_isValid = false;

    m_activation_id_isSet = false;
    m_activation_id_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_detail_postpaid_credit_offer_isSet = false;
    m_detail_postpaid_credit_offer_isValid = false;

    m_event_end_date_isSet = false;
    m_event_end_date_isValid = false;

    m_event_start_date_isSet = false;
    m_event_start_date_isValid = false;

    m_headline_isSet = false;
    m_headline_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_linkout_url_isSet = false;
    m_linkout_url_isValid = false;

    m_long_description_isSet = false;
    m_long_description_isValid = false;

    m_max_user_redemptions_isSet = false;
    m_max_user_redemptions_isValid = false;

    m_merchant_isSet = false;
    m_merchant_isValid = false;

    m_offer_display_isSet = false;
    m_offer_display_isValid = false;

    m_offer_id_isSet = false;
    m_offer_id_isValid = false;

    m_offer_media_isSet = false;
    m_offer_media_isValid = false;

    m_offer_source_isSet = false;
    m_offer_source_isValid = false;

    m_offer_type_isSet = false;
    m_offer_type_isValid = false;

    m_offer_url_isSet = false;
    m_offer_url_isValid = false;

    m_redemption_mode_isSet = false;
    m_redemption_mode_isValid = false;

    m_redemption_type_isSet = false;
    m_redemption_type_isValid = false;

    m_short_description_isSet = false;
    m_short_description_isValid = false;

    m_transactions_isSet = false;
    m_transactions_isValid = false;
}

void OAIRedemedOffer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRedemedOffer::fromJsonObject(QJsonObject json) {

    m_activation_date_isValid = ::OpenAPI::fromJsonValue(m_activation_date, json[QString("ActivationDate")]);
    m_activation_date_isSet = !json[QString("ActivationDate")].isNull() && m_activation_date_isValid;

    m_activation_id_isValid = ::OpenAPI::fromJsonValue(m_activation_id, json[QString("ActivationId")]);
    m_activation_id_isSet = !json[QString("ActivationId")].isNull() && m_activation_id_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("CurrencyCode")]);
    m_currency_code_isSet = !json[QString("CurrencyCode")].isNull() && m_currency_code_isValid;

    m_detail_postpaid_credit_offer_isValid = ::OpenAPI::fromJsonValue(m_detail_postpaid_credit_offer, json[QString("DetailPostpaidCreditOffer")]);
    m_detail_postpaid_credit_offer_isSet = !json[QString("DetailPostpaidCreditOffer")].isNull() && m_detail_postpaid_credit_offer_isValid;

    m_event_end_date_isValid = ::OpenAPI::fromJsonValue(m_event_end_date, json[QString("EventEndDate")]);
    m_event_end_date_isSet = !json[QString("EventEndDate")].isNull() && m_event_end_date_isValid;

    m_event_start_date_isValid = ::OpenAPI::fromJsonValue(m_event_start_date, json[QString("EventStartDate")]);
    m_event_start_date_isSet = !json[QString("EventStartDate")].isNull() && m_event_start_date_isValid;

    m_headline_isValid = ::OpenAPI::fromJsonValue(m_headline, json[QString("Headline")]);
    m_headline_isSet = !json[QString("Headline")].isNull() && m_headline_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("Language")]);
    m_language_isSet = !json[QString("Language")].isNull() && m_language_isValid;

    m_linkout_url_isValid = ::OpenAPI::fromJsonValue(m_linkout_url, json[QString("LinkoutUrl")]);
    m_linkout_url_isSet = !json[QString("LinkoutUrl")].isNull() && m_linkout_url_isValid;

    m_long_description_isValid = ::OpenAPI::fromJsonValue(m_long_description, json[QString("LongDescription")]);
    m_long_description_isSet = !json[QString("LongDescription")].isNull() && m_long_description_isValid;

    m_max_user_redemptions_isValid = ::OpenAPI::fromJsonValue(m_max_user_redemptions, json[QString("MaxUserRedemptions")]);
    m_max_user_redemptions_isSet = !json[QString("MaxUserRedemptions")].isNull() && m_max_user_redemptions_isValid;

    m_merchant_isValid = ::OpenAPI::fromJsonValue(m_merchant, json[QString("Merchant")]);
    m_merchant_isSet = !json[QString("Merchant")].isNull() && m_merchant_isValid;

    m_offer_display_isValid = ::OpenAPI::fromJsonValue(m_offer_display, json[QString("OfferDisplay")]);
    m_offer_display_isSet = !json[QString("OfferDisplay")].isNull() && m_offer_display_isValid;

    m_offer_id_isValid = ::OpenAPI::fromJsonValue(m_offer_id, json[QString("OfferId")]);
    m_offer_id_isSet = !json[QString("OfferId")].isNull() && m_offer_id_isValid;

    m_offer_media_isValid = ::OpenAPI::fromJsonValue(m_offer_media, json[QString("OfferMedia")]);
    m_offer_media_isSet = !json[QString("OfferMedia")].isNull() && m_offer_media_isValid;

    m_offer_source_isValid = ::OpenAPI::fromJsonValue(m_offer_source, json[QString("OfferSource")]);
    m_offer_source_isSet = !json[QString("OfferSource")].isNull() && m_offer_source_isValid;

    m_offer_type_isValid = ::OpenAPI::fromJsonValue(m_offer_type, json[QString("OfferType")]);
    m_offer_type_isSet = !json[QString("OfferType")].isNull() && m_offer_type_isValid;

    m_offer_url_isValid = ::OpenAPI::fromJsonValue(m_offer_url, json[QString("OfferUrl")]);
    m_offer_url_isSet = !json[QString("OfferUrl")].isNull() && m_offer_url_isValid;

    m_redemption_mode_isValid = ::OpenAPI::fromJsonValue(m_redemption_mode, json[QString("RedemptionMode")]);
    m_redemption_mode_isSet = !json[QString("RedemptionMode")].isNull() && m_redemption_mode_isValid;

    m_redemption_type_isValid = ::OpenAPI::fromJsonValue(m_redemption_type, json[QString("RedemptionType")]);
    m_redemption_type_isSet = !json[QString("RedemptionType")].isNull() && m_redemption_type_isValid;

    m_short_description_isValid = ::OpenAPI::fromJsonValue(m_short_description, json[QString("ShortDescription")]);
    m_short_description_isSet = !json[QString("ShortDescription")].isNull() && m_short_description_isValid;

    m_transactions_isValid = ::OpenAPI::fromJsonValue(m_transactions, json[QString("Transactions")]);
    m_transactions_isSet = !json[QString("Transactions")].isNull() && m_transactions_isValid;
}

QString OAIRedemedOffer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRedemedOffer::asJsonObject() const {
    QJsonObject obj;
    if (m_activation_date_isSet) {
        obj.insert(QString("ActivationDate"), ::OpenAPI::toJsonValue(m_activation_date));
    }
    if (m_activation_id_isSet) {
        obj.insert(QString("ActivationId"), ::OpenAPI::toJsonValue(m_activation_id));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("CurrencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_detail_postpaid_credit_offer.isSet()) {
        obj.insert(QString("DetailPostpaidCreditOffer"), ::OpenAPI::toJsonValue(m_detail_postpaid_credit_offer));
    }
    if (m_event_end_date_isSet) {
        obj.insert(QString("EventEndDate"), ::OpenAPI::toJsonValue(m_event_end_date));
    }
    if (m_event_start_date_isSet) {
        obj.insert(QString("EventStartDate"), ::OpenAPI::toJsonValue(m_event_start_date));
    }
    if (m_headline_isSet) {
        obj.insert(QString("Headline"), ::OpenAPI::toJsonValue(m_headline));
    }
    if (m_language_isSet) {
        obj.insert(QString("Language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_linkout_url_isSet) {
        obj.insert(QString("LinkoutUrl"), ::OpenAPI::toJsonValue(m_linkout_url));
    }
    if (m_long_description_isSet) {
        obj.insert(QString("LongDescription"), ::OpenAPI::toJsonValue(m_long_description));
    }
    if (m_max_user_redemptions_isSet) {
        obj.insert(QString("MaxUserRedemptions"), ::OpenAPI::toJsonValue(m_max_user_redemptions));
    }
    if (m_merchant.isSet()) {
        obj.insert(QString("Merchant"), ::OpenAPI::toJsonValue(m_merchant));
    }
    if (m_offer_display.isSet()) {
        obj.insert(QString("OfferDisplay"), ::OpenAPI::toJsonValue(m_offer_display));
    }
    if (m_offer_id_isSet) {
        obj.insert(QString("OfferId"), ::OpenAPI::toJsonValue(m_offer_id));
    }
    if (m_offer_media.isSet()) {
        obj.insert(QString("OfferMedia"), ::OpenAPI::toJsonValue(m_offer_media));
    }
    if (m_offer_source_isSet) {
        obj.insert(QString("OfferSource"), ::OpenAPI::toJsonValue(m_offer_source));
    }
    if (m_offer_type_isSet) {
        obj.insert(QString("OfferType"), ::OpenAPI::toJsonValue(m_offer_type));
    }
    if (m_offer_url_isSet) {
        obj.insert(QString("OfferUrl"), ::OpenAPI::toJsonValue(m_offer_url));
    }
    if (m_redemption_mode_isSet) {
        obj.insert(QString("RedemptionMode"), ::OpenAPI::toJsonValue(m_redemption_mode));
    }
    if (m_redemption_type_isSet) {
        obj.insert(QString("RedemptionType"), ::OpenAPI::toJsonValue(m_redemption_type));
    }
    if (m_short_description_isSet) {
        obj.insert(QString("ShortDescription"), ::OpenAPI::toJsonValue(m_short_description));
    }
    if (m_transactions.isSet()) {
        obj.insert(QString("Transactions"), ::OpenAPI::toJsonValue(m_transactions));
    }
    return obj;
}

QDate OAIRedemedOffer::getActivationDate() const {
    return m_activation_date;
}
void OAIRedemedOffer::setActivationDate(const QDate &activation_date) {
    m_activation_date = activation_date;
    m_activation_date_isSet = true;
}

bool OAIRedemedOffer::is_activation_date_Set() const{
    return m_activation_date_isSet;
}

bool OAIRedemedOffer::is_activation_date_Valid() const{
    return m_activation_date_isValid;
}

QString OAIRedemedOffer::getActivationId() const {
    return m_activation_id;
}
void OAIRedemedOffer::setActivationId(const QString &activation_id) {
    m_activation_id = activation_id;
    m_activation_id_isSet = true;
}

bool OAIRedemedOffer::is_activation_id_Set() const{
    return m_activation_id_isSet;
}

bool OAIRedemedOffer::is_activation_id_Valid() const{
    return m_activation_id_isValid;
}

QString OAIRedemedOffer::getCurrencyCode() const {
    return m_currency_code;
}
void OAIRedemedOffer::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIRedemedOffer::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIRedemedOffer::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

OAIDetailPostpaidCreditOffer OAIRedemedOffer::getDetailPostpaidCreditOffer() const {
    return m_detail_postpaid_credit_offer;
}
void OAIRedemedOffer::setDetailPostpaidCreditOffer(const OAIDetailPostpaidCreditOffer &detail_postpaid_credit_offer) {
    m_detail_postpaid_credit_offer = detail_postpaid_credit_offer;
    m_detail_postpaid_credit_offer_isSet = true;
}

bool OAIRedemedOffer::is_detail_postpaid_credit_offer_Set() const{
    return m_detail_postpaid_credit_offer_isSet;
}

bool OAIRedemedOffer::is_detail_postpaid_credit_offer_Valid() const{
    return m_detail_postpaid_credit_offer_isValid;
}

QDate OAIRedemedOffer::getEventEndDate() const {
    return m_event_end_date;
}
void OAIRedemedOffer::setEventEndDate(const QDate &event_end_date) {
    m_event_end_date = event_end_date;
    m_event_end_date_isSet = true;
}

bool OAIRedemedOffer::is_event_end_date_Set() const{
    return m_event_end_date_isSet;
}

bool OAIRedemedOffer::is_event_end_date_Valid() const{
    return m_event_end_date_isValid;
}

QDate OAIRedemedOffer::getEventStartDate() const {
    return m_event_start_date;
}
void OAIRedemedOffer::setEventStartDate(const QDate &event_start_date) {
    m_event_start_date = event_start_date;
    m_event_start_date_isSet = true;
}

bool OAIRedemedOffer::is_event_start_date_Set() const{
    return m_event_start_date_isSet;
}

bool OAIRedemedOffer::is_event_start_date_Valid() const{
    return m_event_start_date_isValid;
}

QString OAIRedemedOffer::getHeadline() const {
    return m_headline;
}
void OAIRedemedOffer::setHeadline(const QString &headline) {
    m_headline = headline;
    m_headline_isSet = true;
}

bool OAIRedemedOffer::is_headline_Set() const{
    return m_headline_isSet;
}

bool OAIRedemedOffer::is_headline_Valid() const{
    return m_headline_isValid;
}

QString OAIRedemedOffer::getLanguage() const {
    return m_language;
}
void OAIRedemedOffer::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIRedemedOffer::is_language_Set() const{
    return m_language_isSet;
}

bool OAIRedemedOffer::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIRedemedOffer::getLinkoutUrl() const {
    return m_linkout_url;
}
void OAIRedemedOffer::setLinkoutUrl(const QString &linkout_url) {
    m_linkout_url = linkout_url;
    m_linkout_url_isSet = true;
}

bool OAIRedemedOffer::is_linkout_url_Set() const{
    return m_linkout_url_isSet;
}

bool OAIRedemedOffer::is_linkout_url_Valid() const{
    return m_linkout_url_isValid;
}

QString OAIRedemedOffer::getLongDescription() const {
    return m_long_description;
}
void OAIRedemedOffer::setLongDescription(const QString &long_description) {
    m_long_description = long_description;
    m_long_description_isSet = true;
}

bool OAIRedemedOffer::is_long_description_Set() const{
    return m_long_description_isSet;
}

bool OAIRedemedOffer::is_long_description_Valid() const{
    return m_long_description_isValid;
}

qint32 OAIRedemedOffer::getMaxUserRedemptions() const {
    return m_max_user_redemptions;
}
void OAIRedemedOffer::setMaxUserRedemptions(const qint32 &max_user_redemptions) {
    m_max_user_redemptions = max_user_redemptions;
    m_max_user_redemptions_isSet = true;
}

bool OAIRedemedOffer::is_max_user_redemptions_Set() const{
    return m_max_user_redemptions_isSet;
}

bool OAIRedemedOffer::is_max_user_redemptions_Valid() const{
    return m_max_user_redemptions_isValid;
}

OAIRedemedOfferMerchant OAIRedemedOffer::getMerchant() const {
    return m_merchant;
}
void OAIRedemedOffer::setMerchant(const OAIRedemedOfferMerchant &merchant) {
    m_merchant = merchant;
    m_merchant_isSet = true;
}

bool OAIRedemedOffer::is_merchant_Set() const{
    return m_merchant_isSet;
}

bool OAIRedemedOffer::is_merchant_Valid() const{
    return m_merchant_isValid;
}

OAIOfferDisplay OAIRedemedOffer::getOfferDisplay() const {
    return m_offer_display;
}
void OAIRedemedOffer::setOfferDisplay(const OAIOfferDisplay &offer_display) {
    m_offer_display = offer_display;
    m_offer_display_isSet = true;
}

bool OAIRedemedOffer::is_offer_display_Set() const{
    return m_offer_display_isSet;
}

bool OAIRedemedOffer::is_offer_display_Valid() const{
    return m_offer_display_isValid;
}

QString OAIRedemedOffer::getOfferId() const {
    return m_offer_id;
}
void OAIRedemedOffer::setOfferId(const QString &offer_id) {
    m_offer_id = offer_id;
    m_offer_id_isSet = true;
}

bool OAIRedemedOffer::is_offer_id_Set() const{
    return m_offer_id_isSet;
}

bool OAIRedemedOffer::is_offer_id_Valid() const{
    return m_offer_id_isValid;
}

OAIOfferMedia OAIRedemedOffer::getOfferMedia() const {
    return m_offer_media;
}
void OAIRedemedOffer::setOfferMedia(const OAIOfferMedia &offer_media) {
    m_offer_media = offer_media;
    m_offer_media_isSet = true;
}

bool OAIRedemedOffer::is_offer_media_Set() const{
    return m_offer_media_isSet;
}

bool OAIRedemedOffer::is_offer_media_Valid() const{
    return m_offer_media_isValid;
}

QString OAIRedemedOffer::getOfferSource() const {
    return m_offer_source;
}
void OAIRedemedOffer::setOfferSource(const QString &offer_source) {
    m_offer_source = offer_source;
    m_offer_source_isSet = true;
}

bool OAIRedemedOffer::is_offer_source_Set() const{
    return m_offer_source_isSet;
}

bool OAIRedemedOffer::is_offer_source_Valid() const{
    return m_offer_source_isValid;
}

QString OAIRedemedOffer::getOfferType() const {
    return m_offer_type;
}
void OAIRedemedOffer::setOfferType(const QString &offer_type) {
    m_offer_type = offer_type;
    m_offer_type_isSet = true;
}

bool OAIRedemedOffer::is_offer_type_Set() const{
    return m_offer_type_isSet;
}

bool OAIRedemedOffer::is_offer_type_Valid() const{
    return m_offer_type_isValid;
}

QString OAIRedemedOffer::getOfferUrl() const {
    return m_offer_url;
}
void OAIRedemedOffer::setOfferUrl(const QString &offer_url) {
    m_offer_url = offer_url;
    m_offer_url_isSet = true;
}

bool OAIRedemedOffer::is_offer_url_Set() const{
    return m_offer_url_isSet;
}

bool OAIRedemedOffer::is_offer_url_Valid() const{
    return m_offer_url_isValid;
}

QString OAIRedemedOffer::getRedemptionMode() const {
    return m_redemption_mode;
}
void OAIRedemedOffer::setRedemptionMode(const QString &redemption_mode) {
    m_redemption_mode = redemption_mode;
    m_redemption_mode_isSet = true;
}

bool OAIRedemedOffer::is_redemption_mode_Set() const{
    return m_redemption_mode_isSet;
}

bool OAIRedemedOffer::is_redemption_mode_Valid() const{
    return m_redemption_mode_isValid;
}

QString OAIRedemedOffer::getRedemptionType() const {
    return m_redemption_type;
}
void OAIRedemedOffer::setRedemptionType(const QString &redemption_type) {
    m_redemption_type = redemption_type;
    m_redemption_type_isSet = true;
}

bool OAIRedemedOffer::is_redemption_type_Set() const{
    return m_redemption_type_isSet;
}

bool OAIRedemedOffer::is_redemption_type_Valid() const{
    return m_redemption_type_isValid;
}

QString OAIRedemedOffer::getShortDescription() const {
    return m_short_description;
}
void OAIRedemedOffer::setShortDescription(const QString &short_description) {
    m_short_description = short_description;
    m_short_description_isSet = true;
}

bool OAIRedemedOffer::is_short_description_Set() const{
    return m_short_description_isSet;
}

bool OAIRedemedOffer::is_short_description_Valid() const{
    return m_short_description_isValid;
}

OAITransaction OAIRedemedOffer::getTransactions() const {
    return m_transactions;
}
void OAIRedemedOffer::setTransactions(const OAITransaction &transactions) {
    m_transactions = transactions;
    m_transactions_isSet = true;
}

bool OAIRedemedOffer::is_transactions_Set() const{
    return m_transactions_isSet;
}

bool OAIRedemedOffer::is_transactions_Valid() const{
    return m_transactions_isValid;
}

bool OAIRedemedOffer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_postpaid_credit_offer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linkout_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_user_redemptions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_display.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_media.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redemption_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redemption_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRedemedOffer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
