/**
 * Personalized Offers
 * This API provides content for financial instutions participating in Mastercard Personalized Offers to use in online and mobile banking applications for cardholders.
 *
 * The version of the OpenAPI document: 1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransaction::OAITransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransaction::OAITransaction() {
    this->initializeModel();
}

OAITransaction::~OAITransaction() {}

void OAITransaction::initializeModel() {

    m_cash_back_earned_isSet = false;
    m_cash_back_earned_isValid = false;

    m_points_earned_isSet = false;
    m_points_earned_isValid = false;

    m_redemption_date_isSet = false;
    m_redemption_date_isValid = false;

    m_transaction_amount_isSet = false;
    m_transaction_amount_isValid = false;
}

void OAITransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransaction::fromJsonObject(QJsonObject json) {

    m_cash_back_earned_isValid = ::OpenAPI::fromJsonValue(m_cash_back_earned, json[QString("CashBackEarned")]);
    m_cash_back_earned_isSet = !json[QString("CashBackEarned")].isNull() && m_cash_back_earned_isValid;

    m_points_earned_isValid = ::OpenAPI::fromJsonValue(m_points_earned, json[QString("PointsEarned")]);
    m_points_earned_isSet = !json[QString("PointsEarned")].isNull() && m_points_earned_isValid;

    m_redemption_date_isValid = ::OpenAPI::fromJsonValue(m_redemption_date, json[QString("RedemptionDate")]);
    m_redemption_date_isSet = !json[QString("RedemptionDate")].isNull() && m_redemption_date_isValid;

    m_transaction_amount_isValid = ::OpenAPI::fromJsonValue(m_transaction_amount, json[QString("TransactionAmount")]);
    m_transaction_amount_isSet = !json[QString("TransactionAmount")].isNull() && m_transaction_amount_isValid;
}

QString OAITransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_cash_back_earned_isSet) {
        obj.insert(QString("CashBackEarned"), ::OpenAPI::toJsonValue(m_cash_back_earned));
    }
    if (m_points_earned_isSet) {
        obj.insert(QString("PointsEarned"), ::OpenAPI::toJsonValue(m_points_earned));
    }
    if (m_redemption_date_isSet) {
        obj.insert(QString("RedemptionDate"), ::OpenAPI::toJsonValue(m_redemption_date));
    }
    if (m_transaction_amount_isSet) {
        obj.insert(QString("TransactionAmount"), ::OpenAPI::toJsonValue(m_transaction_amount));
    }
    return obj;
}

QString OAITransaction::getCashBackEarned() const {
    return m_cash_back_earned;
}
void OAITransaction::setCashBackEarned(const QString &cash_back_earned) {
    m_cash_back_earned = cash_back_earned;
    m_cash_back_earned_isSet = true;
}

bool OAITransaction::is_cash_back_earned_Set() const{
    return m_cash_back_earned_isSet;
}

bool OAITransaction::is_cash_back_earned_Valid() const{
    return m_cash_back_earned_isValid;
}

QString OAITransaction::getPointsEarned() const {
    return m_points_earned;
}
void OAITransaction::setPointsEarned(const QString &points_earned) {
    m_points_earned = points_earned;
    m_points_earned_isSet = true;
}

bool OAITransaction::is_points_earned_Set() const{
    return m_points_earned_isSet;
}

bool OAITransaction::is_points_earned_Valid() const{
    return m_points_earned_isValid;
}

QDate OAITransaction::getRedemptionDate() const {
    return m_redemption_date;
}
void OAITransaction::setRedemptionDate(const QDate &redemption_date) {
    m_redemption_date = redemption_date;
    m_redemption_date_isSet = true;
}

bool OAITransaction::is_redemption_date_Set() const{
    return m_redemption_date_isSet;
}

bool OAITransaction::is_redemption_date_Valid() const{
    return m_redemption_date_isValid;
}

QString OAITransaction::getTransactionAmount() const {
    return m_transaction_amount;
}
void OAITransaction::setTransactionAmount(const QString &transaction_amount) {
    m_transaction_amount = transaction_amount;
    m_transaction_amount_isSet = true;
}

bool OAITransaction::is_transaction_amount_Set() const{
    return m_transaction_amount_isSet;
}

bool OAITransaction::is_transaction_amount_Valid() const{
    return m_transaction_amount_isValid;
}

bool OAITransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cash_back_earned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_earned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redemption_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_amount_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
