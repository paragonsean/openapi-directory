/**
 * Personalized Offers
 * This API provides content for financial instutions participating in Mastercard Personalized Offers to use in online and mobile banking applications for cardholders.
 *
 * The version of the OpenAPI document: 1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserToken::OAIUserToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserToken::OAIUserToken() {
    this->initializeModel();
}

OAIUserToken::~OAIUserToken() {}

void OAIUserToken::initializeModel() {

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAIUserToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserToken::fromJsonObject(QJsonObject json) {

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("Token")]);
    m_token_isSet = !json[QString("Token")].isNull() && m_token_isValid;
}

QString OAIUserToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserToken::asJsonObject() const {
    QJsonObject obj;
    if (m_token_isSet) {
        obj.insert(QString("Token"), ::OpenAPI::toJsonValue(m_token));
    }
    return obj;
}

QString OAIUserToken::getToken() const {
    return m_token;
}
void OAIUserToken::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIUserToken::is_token_Set() const{
    return m_token_isSet;
}

bool OAIUserToken::is_token_Valid() const{
    return m_token_isValid;
}

bool OAIUserToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
