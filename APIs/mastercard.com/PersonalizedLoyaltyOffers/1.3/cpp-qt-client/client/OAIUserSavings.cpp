/**
 * Personalized Offers
 * This API provides content for financial instutions participating in Mastercard Personalized Offers to use in online and mobile banking applications for cardholders.
 *
 * The version of the OpenAPI document: 1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserSavings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserSavings::OAIUserSavings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserSavings::OAIUserSavings() {
    this->initializeModel();
}

OAIUserSavings::~OAIUserSavings() {}

void OAIUserSavings::initializeModel() {

    m_prepaid_offer_savings_isSet = false;
    m_prepaid_offer_savings_isValid = false;

    m_statement_credit_offers_savings_isSet = false;
    m_statement_credit_offers_savings_isValid = false;

    m_total_amount_saved_isSet = false;
    m_total_amount_saved_isValid = false;

    m_total_offers_used_isSet = false;
    m_total_offers_used_isValid = false;
}

void OAIUserSavings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserSavings::fromJsonObject(QJsonObject json) {

    m_prepaid_offer_savings_isValid = ::OpenAPI::fromJsonValue(m_prepaid_offer_savings, json[QString("PrepaidOfferSavings")]);
    m_prepaid_offer_savings_isSet = !json[QString("PrepaidOfferSavings")].isNull() && m_prepaid_offer_savings_isValid;

    m_statement_credit_offers_savings_isValid = ::OpenAPI::fromJsonValue(m_statement_credit_offers_savings, json[QString("StatementCreditOffersSavings")]);
    m_statement_credit_offers_savings_isSet = !json[QString("StatementCreditOffersSavings")].isNull() && m_statement_credit_offers_savings_isValid;

    m_total_amount_saved_isValid = ::OpenAPI::fromJsonValue(m_total_amount_saved, json[QString("TotalAmountSaved")]);
    m_total_amount_saved_isSet = !json[QString("TotalAmountSaved")].isNull() && m_total_amount_saved_isValid;

    m_total_offers_used_isValid = ::OpenAPI::fromJsonValue(m_total_offers_used, json[QString("TotalOffersUsed")]);
    m_total_offers_used_isSet = !json[QString("TotalOffersUsed")].isNull() && m_total_offers_used_isValid;
}

QString OAIUserSavings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserSavings::asJsonObject() const {
    QJsonObject obj;
    if (m_prepaid_offer_savings.isSet()) {
        obj.insert(QString("PrepaidOfferSavings"), ::OpenAPI::toJsonValue(m_prepaid_offer_savings));
    }
    if (m_statement_credit_offers_savings.isSet()) {
        obj.insert(QString("StatementCreditOffersSavings"), ::OpenAPI::toJsonValue(m_statement_credit_offers_savings));
    }
    if (m_total_amount_saved_isSet) {
        obj.insert(QString("TotalAmountSaved"), ::OpenAPI::toJsonValue(m_total_amount_saved));
    }
    if (m_total_offers_used_isSet) {
        obj.insert(QString("TotalOffersUsed"), ::OpenAPI::toJsonValue(m_total_offers_used));
    }
    return obj;
}

OAIPrepaidOfferSavings OAIUserSavings::getPrepaidOfferSavings() const {
    return m_prepaid_offer_savings;
}
void OAIUserSavings::setPrepaidOfferSavings(const OAIPrepaidOfferSavings &prepaid_offer_savings) {
    m_prepaid_offer_savings = prepaid_offer_savings;
    m_prepaid_offer_savings_isSet = true;
}

bool OAIUserSavings::is_prepaid_offer_savings_Set() const{
    return m_prepaid_offer_savings_isSet;
}

bool OAIUserSavings::is_prepaid_offer_savings_Valid() const{
    return m_prepaid_offer_savings_isValid;
}

OAIStatementCreditOffersSavings OAIUserSavings::getStatementCreditOffersSavings() const {
    return m_statement_credit_offers_savings;
}
void OAIUserSavings::setStatementCreditOffersSavings(const OAIStatementCreditOffersSavings &statement_credit_offers_savings) {
    m_statement_credit_offers_savings = statement_credit_offers_savings;
    m_statement_credit_offers_savings_isSet = true;
}

bool OAIUserSavings::is_statement_credit_offers_savings_Set() const{
    return m_statement_credit_offers_savings_isSet;
}

bool OAIUserSavings::is_statement_credit_offers_savings_Valid() const{
    return m_statement_credit_offers_savings_isValid;
}

QString OAIUserSavings::getTotalAmountSaved() const {
    return m_total_amount_saved;
}
void OAIUserSavings::setTotalAmountSaved(const QString &total_amount_saved) {
    m_total_amount_saved = total_amount_saved;
    m_total_amount_saved_isSet = true;
}

bool OAIUserSavings::is_total_amount_saved_Set() const{
    return m_total_amount_saved_isSet;
}

bool OAIUserSavings::is_total_amount_saved_Valid() const{
    return m_total_amount_saved_isValid;
}

QString OAIUserSavings::getTotalOffersUsed() const {
    return m_total_offers_used;
}
void OAIUserSavings::setTotalOffersUsed(const QString &total_offers_used) {
    m_total_offers_used = total_offers_used;
    m_total_offers_used_isSet = true;
}

bool OAIUserSavings::is_total_offers_used_Set() const{
    return m_total_offers_used_isSet;
}

bool OAIUserSavings::is_total_offers_used_Valid() const{
    return m_total_offers_used_isValid;
}

bool OAIUserSavings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_prepaid_offer_savings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_statement_credit_offers_savings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amount_saved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_offers_used_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserSavings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
