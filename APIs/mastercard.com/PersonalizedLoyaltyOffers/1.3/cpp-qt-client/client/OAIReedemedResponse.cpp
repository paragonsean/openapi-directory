/**
 * Personalized Offers
 * This API provides content for financial instutions participating in Mastercard Personalized Offers to use in online and mobile banking applications for cardholders.
 *
 * The version of the OpenAPI document: 1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReedemedResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReedemedResponse::OAIReedemedResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReedemedResponse::OAIReedemedResponse() {
    this->initializeModel();
}

OAIReedemedResponse::~OAIReedemedResponse() {}

void OAIReedemedResponse::initializeModel() {

    m_current_page_isSet = false;
    m_current_page_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_items_per_page_isSet = false;
    m_items_per_page_isValid = false;

    m_number_of_pages_isSet = false;
    m_number_of_pages_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;
}

void OAIReedemedResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReedemedResponse::fromJsonObject(QJsonObject json) {

    m_current_page_isValid = ::OpenAPI::fromJsonValue(m_current_page, json[QString("CurrentPage")]);
    m_current_page_isSet = !json[QString("CurrentPage")].isNull() && m_current_page_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("Items")]);
    m_items_isSet = !json[QString("Items")].isNull() && m_items_isValid;

    m_items_per_page_isValid = ::OpenAPI::fromJsonValue(m_items_per_page, json[QString("ItemsPerPage")]);
    m_items_per_page_isSet = !json[QString("ItemsPerPage")].isNull() && m_items_per_page_isValid;

    m_number_of_pages_isValid = ::OpenAPI::fromJsonValue(m_number_of_pages, json[QString("NumberOfPages")]);
    m_number_of_pages_isSet = !json[QString("NumberOfPages")].isNull() && m_number_of_pages_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("TotalCount")]);
    m_total_count_isSet = !json[QString("TotalCount")].isNull() && m_total_count_isValid;
}

QString OAIReedemedResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReedemedResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_current_page_isSet) {
        obj.insert(QString("CurrentPage"), ::OpenAPI::toJsonValue(m_current_page));
    }
    if (m_items.isSet()) {
        obj.insert(QString("Items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_items_per_page_isSet) {
        obj.insert(QString("ItemsPerPage"), ::OpenAPI::toJsonValue(m_items_per_page));
    }
    if (m_number_of_pages_isSet) {
        obj.insert(QString("NumberOfPages"), ::OpenAPI::toJsonValue(m_number_of_pages));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("TotalCount"), ::OpenAPI::toJsonValue(m_total_count));
    }
    return obj;
}

qint32 OAIReedemedResponse::getCurrentPage() const {
    return m_current_page;
}
void OAIReedemedResponse::setCurrentPage(const qint32 &current_page) {
    m_current_page = current_page;
    m_current_page_isSet = true;
}

bool OAIReedemedResponse::is_current_page_Set() const{
    return m_current_page_isSet;
}

bool OAIReedemedResponse::is_current_page_Valid() const{
    return m_current_page_isValid;
}

OAIRedemedItems OAIReedemedResponse::getItems() const {
    return m_items;
}
void OAIReedemedResponse::setItems(const OAIRedemedItems &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIReedemedResponse::is_items_Set() const{
    return m_items_isSet;
}

bool OAIReedemedResponse::is_items_Valid() const{
    return m_items_isValid;
}

qint32 OAIReedemedResponse::getItemsPerPage() const {
    return m_items_per_page;
}
void OAIReedemedResponse::setItemsPerPage(const qint32 &items_per_page) {
    m_items_per_page = items_per_page;
    m_items_per_page_isSet = true;
}

bool OAIReedemedResponse::is_items_per_page_Set() const{
    return m_items_per_page_isSet;
}

bool OAIReedemedResponse::is_items_per_page_Valid() const{
    return m_items_per_page_isValid;
}

qint32 OAIReedemedResponse::getNumberOfPages() const {
    return m_number_of_pages;
}
void OAIReedemedResponse::setNumberOfPages(const qint32 &number_of_pages) {
    m_number_of_pages = number_of_pages;
    m_number_of_pages_isSet = true;
}

bool OAIReedemedResponse::is_number_of_pages_Set() const{
    return m_number_of_pages_isSet;
}

bool OAIReedemedResponse::is_number_of_pages_Valid() const{
    return m_number_of_pages_isValid;
}

OAIStatus OAIReedemedResponse::getStatus() const {
    return m_status;
}
void OAIReedemedResponse::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIReedemedResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIReedemedResponse::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIReedemedResponse::getTotalCount() const {
    return m_total_count;
}
void OAIReedemedResponse::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIReedemedResponse::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIReedemedResponse::is_total_count_Valid() const{
    return m_total_count_isValid;
}

bool OAIReedemedResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_per_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_pages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReedemedResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
