/**
 * Personalized Offers
 * This API provides content for financial instutions participating in Mastercard Personalized Offers to use in online and mobile banking applications for cardholders.
 *
 * The version of the OpenAPI document: 1.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMatchedOffer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMatchedOffer::OAIMatchedOffer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMatchedOffer::OAIMatchedOffer() {
    this->initializeModel();
}

OAIMatchedOffer::~OAIMatchedOffer() {}

void OAIMatchedOffer::initializeModel() {

    m_active_sc_isSet = false;
    m_active_sc_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_discount_isSet = false;
    m_discount_isValid = false;

    m_discount_type_isSet = false;
    m_discount_type_isValid = false;

    m_event_end_date_isSet = false;
    m_event_end_date_isValid = false;

    m_event_start_date_isSet = false;
    m_event_start_date_isValid = false;

    m_headline_isSet = false;
    m_headline_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_merchant_isSet = false;
    m_merchant_isValid = false;

    m_merchant_image_url_isSet = false;
    m_merchant_image_url_isValid = false;

    m_offer_id_isSet = false;
    m_offer_id_isValid = false;

    m_offer_source_isSet = false;
    m_offer_source_isValid = false;

    m_offer_type_isSet = false;
    m_offer_type_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_redemption_mode_isSet = false;
    m_redemption_mode_isValid = false;

    m_short_description_isSet = false;
    m_short_description_isValid = false;
}

void OAIMatchedOffer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMatchedOffer::fromJsonObject(QJsonObject json) {

    m_active_sc_isValid = ::OpenAPI::fromJsonValue(m_active_sc, json[QString("ActiveSc")]);
    m_active_sc_isSet = !json[QString("ActiveSc")].isNull() && m_active_sc_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("CurrencyCode")]);
    m_currency_code_isSet = !json[QString("CurrencyCode")].isNull() && m_currency_code_isValid;

    m_discount_isValid = ::OpenAPI::fromJsonValue(m_discount, json[QString("Discount")]);
    m_discount_isSet = !json[QString("Discount")].isNull() && m_discount_isValid;

    m_discount_type_isValid = ::OpenAPI::fromJsonValue(m_discount_type, json[QString("DiscountType")]);
    m_discount_type_isSet = !json[QString("DiscountType")].isNull() && m_discount_type_isValid;

    m_event_end_date_isValid = ::OpenAPI::fromJsonValue(m_event_end_date, json[QString("EventEndDate")]);
    m_event_end_date_isSet = !json[QString("EventEndDate")].isNull() && m_event_end_date_isValid;

    m_event_start_date_isValid = ::OpenAPI::fromJsonValue(m_event_start_date, json[QString("EventStartDate")]);
    m_event_start_date_isSet = !json[QString("EventStartDate")].isNull() && m_event_start_date_isValid;

    m_headline_isValid = ::OpenAPI::fromJsonValue(m_headline, json[QString("Headline")]);
    m_headline_isSet = !json[QString("Headline")].isNull() && m_headline_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("Language")]);
    m_language_isSet = !json[QString("Language")].isNull() && m_language_isValid;

    m_merchant_isValid = ::OpenAPI::fromJsonValue(m_merchant, json[QString("Merchant")]);
    m_merchant_isSet = !json[QString("Merchant")].isNull() && m_merchant_isValid;

    m_merchant_image_url_isValid = ::OpenAPI::fromJsonValue(m_merchant_image_url, json[QString("MerchantImageURL")]);
    m_merchant_image_url_isSet = !json[QString("MerchantImageURL")].isNull() && m_merchant_image_url_isValid;

    m_offer_id_isValid = ::OpenAPI::fromJsonValue(m_offer_id, json[QString("OfferId")]);
    m_offer_id_isSet = !json[QString("OfferId")].isNull() && m_offer_id_isValid;

    m_offer_source_isValid = ::OpenAPI::fromJsonValue(m_offer_source, json[QString("OfferSource")]);
    m_offer_source_isSet = !json[QString("OfferSource")].isNull() && m_offer_source_isValid;

    m_offer_type_isValid = ::OpenAPI::fromJsonValue(m_offer_type, json[QString("OfferType")]);
    m_offer_type_isSet = !json[QString("OfferType")].isNull() && m_offer_type_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("Price")]);
    m_price_isSet = !json[QString("Price")].isNull() && m_price_isValid;

    m_redemption_mode_isValid = ::OpenAPI::fromJsonValue(m_redemption_mode, json[QString("RedemptionMode")]);
    m_redemption_mode_isSet = !json[QString("RedemptionMode")].isNull() && m_redemption_mode_isValid;

    m_short_description_isValid = ::OpenAPI::fromJsonValue(m_short_description, json[QString("ShortDescription")]);
    m_short_description_isSet = !json[QString("ShortDescription")].isNull() && m_short_description_isValid;
}

QString OAIMatchedOffer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMatchedOffer::asJsonObject() const {
    QJsonObject obj;
    if (m_active_sc_isSet) {
        obj.insert(QString("ActiveSc"), ::OpenAPI::toJsonValue(m_active_sc));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("CurrencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_discount_isSet) {
        obj.insert(QString("Discount"), ::OpenAPI::toJsonValue(m_discount));
    }
    if (m_discount_type_isSet) {
        obj.insert(QString("DiscountType"), ::OpenAPI::toJsonValue(m_discount_type));
    }
    if (m_event_end_date_isSet) {
        obj.insert(QString("EventEndDate"), ::OpenAPI::toJsonValue(m_event_end_date));
    }
    if (m_event_start_date_isSet) {
        obj.insert(QString("EventStartDate"), ::OpenAPI::toJsonValue(m_event_start_date));
    }
    if (m_headline_isSet) {
        obj.insert(QString("Headline"), ::OpenAPI::toJsonValue(m_headline));
    }
    if (m_language_isSet) {
        obj.insert(QString("Language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_merchant.isSet()) {
        obj.insert(QString("Merchant"), ::OpenAPI::toJsonValue(m_merchant));
    }
    if (m_merchant_image_url_isSet) {
        obj.insert(QString("MerchantImageURL"), ::OpenAPI::toJsonValue(m_merchant_image_url));
    }
    if (m_offer_id_isSet) {
        obj.insert(QString("OfferId"), ::OpenAPI::toJsonValue(m_offer_id));
    }
    if (m_offer_source_isSet) {
        obj.insert(QString("OfferSource"), ::OpenAPI::toJsonValue(m_offer_source));
    }
    if (m_offer_type_isSet) {
        obj.insert(QString("OfferType"), ::OpenAPI::toJsonValue(m_offer_type));
    }
    if (m_price_isSet) {
        obj.insert(QString("Price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_redemption_mode_isSet) {
        obj.insert(QString("RedemptionMode"), ::OpenAPI::toJsonValue(m_redemption_mode));
    }
    if (m_short_description_isSet) {
        obj.insert(QString("ShortDescription"), ::OpenAPI::toJsonValue(m_short_description));
    }
    return obj;
}

QString OAIMatchedOffer::getActiveSc() const {
    return m_active_sc;
}
void OAIMatchedOffer::setActiveSc(const QString &active_sc) {
    m_active_sc = active_sc;
    m_active_sc_isSet = true;
}

bool OAIMatchedOffer::is_active_sc_Set() const{
    return m_active_sc_isSet;
}

bool OAIMatchedOffer::is_active_sc_Valid() const{
    return m_active_sc_isValid;
}

QString OAIMatchedOffer::getCurrencyCode() const {
    return m_currency_code;
}
void OAIMatchedOffer::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIMatchedOffer::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIMatchedOffer::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAIMatchedOffer::getDiscount() const {
    return m_discount;
}
void OAIMatchedOffer::setDiscount(const QString &discount) {
    m_discount = discount;
    m_discount_isSet = true;
}

bool OAIMatchedOffer::is_discount_Set() const{
    return m_discount_isSet;
}

bool OAIMatchedOffer::is_discount_Valid() const{
    return m_discount_isValid;
}

QString OAIMatchedOffer::getDiscountType() const {
    return m_discount_type;
}
void OAIMatchedOffer::setDiscountType(const QString &discount_type) {
    m_discount_type = discount_type;
    m_discount_type_isSet = true;
}

bool OAIMatchedOffer::is_discount_type_Set() const{
    return m_discount_type_isSet;
}

bool OAIMatchedOffer::is_discount_type_Valid() const{
    return m_discount_type_isValid;
}

QDate OAIMatchedOffer::getEventEndDate() const {
    return m_event_end_date;
}
void OAIMatchedOffer::setEventEndDate(const QDate &event_end_date) {
    m_event_end_date = event_end_date;
    m_event_end_date_isSet = true;
}

bool OAIMatchedOffer::is_event_end_date_Set() const{
    return m_event_end_date_isSet;
}

bool OAIMatchedOffer::is_event_end_date_Valid() const{
    return m_event_end_date_isValid;
}

QDate OAIMatchedOffer::getEventStartDate() const {
    return m_event_start_date;
}
void OAIMatchedOffer::setEventStartDate(const QDate &event_start_date) {
    m_event_start_date = event_start_date;
    m_event_start_date_isSet = true;
}

bool OAIMatchedOffer::is_event_start_date_Set() const{
    return m_event_start_date_isSet;
}

bool OAIMatchedOffer::is_event_start_date_Valid() const{
    return m_event_start_date_isValid;
}

QString OAIMatchedOffer::getHeadline() const {
    return m_headline;
}
void OAIMatchedOffer::setHeadline(const QString &headline) {
    m_headline = headline;
    m_headline_isSet = true;
}

bool OAIMatchedOffer::is_headline_Set() const{
    return m_headline_isSet;
}

bool OAIMatchedOffer::is_headline_Valid() const{
    return m_headline_isValid;
}

QString OAIMatchedOffer::getLanguage() const {
    return m_language;
}
void OAIMatchedOffer::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIMatchedOffer::is_language_Set() const{
    return m_language_isSet;
}

bool OAIMatchedOffer::is_language_Valid() const{
    return m_language_isValid;
}

OAIMerchant OAIMatchedOffer::getMerchant() const {
    return m_merchant;
}
void OAIMatchedOffer::setMerchant(const OAIMerchant &merchant) {
    m_merchant = merchant;
    m_merchant_isSet = true;
}

bool OAIMatchedOffer::is_merchant_Set() const{
    return m_merchant_isSet;
}

bool OAIMatchedOffer::is_merchant_Valid() const{
    return m_merchant_isValid;
}

QString OAIMatchedOffer::getMerchantImageUrl() const {
    return m_merchant_image_url;
}
void OAIMatchedOffer::setMerchantImageUrl(const QString &merchant_image_url) {
    m_merchant_image_url = merchant_image_url;
    m_merchant_image_url_isSet = true;
}

bool OAIMatchedOffer::is_merchant_image_url_Set() const{
    return m_merchant_image_url_isSet;
}

bool OAIMatchedOffer::is_merchant_image_url_Valid() const{
    return m_merchant_image_url_isValid;
}

QString OAIMatchedOffer::getOfferId() const {
    return m_offer_id;
}
void OAIMatchedOffer::setOfferId(const QString &offer_id) {
    m_offer_id = offer_id;
    m_offer_id_isSet = true;
}

bool OAIMatchedOffer::is_offer_id_Set() const{
    return m_offer_id_isSet;
}

bool OAIMatchedOffer::is_offer_id_Valid() const{
    return m_offer_id_isValid;
}

QString OAIMatchedOffer::getOfferSource() const {
    return m_offer_source;
}
void OAIMatchedOffer::setOfferSource(const QString &offer_source) {
    m_offer_source = offer_source;
    m_offer_source_isSet = true;
}

bool OAIMatchedOffer::is_offer_source_Set() const{
    return m_offer_source_isSet;
}

bool OAIMatchedOffer::is_offer_source_Valid() const{
    return m_offer_source_isValid;
}

QString OAIMatchedOffer::getOfferType() const {
    return m_offer_type;
}
void OAIMatchedOffer::setOfferType(const QString &offer_type) {
    m_offer_type = offer_type;
    m_offer_type_isSet = true;
}

bool OAIMatchedOffer::is_offer_type_Set() const{
    return m_offer_type_isSet;
}

bool OAIMatchedOffer::is_offer_type_Valid() const{
    return m_offer_type_isValid;
}

QString OAIMatchedOffer::getPrice() const {
    return m_price;
}
void OAIMatchedOffer::setPrice(const QString &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIMatchedOffer::is_price_Set() const{
    return m_price_isSet;
}

bool OAIMatchedOffer::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIMatchedOffer::getRedemptionMode() const {
    return m_redemption_mode;
}
void OAIMatchedOffer::setRedemptionMode(const QString &redemption_mode) {
    m_redemption_mode = redemption_mode;
    m_redemption_mode_isSet = true;
}

bool OAIMatchedOffer::is_redemption_mode_Set() const{
    return m_redemption_mode_isSet;
}

bool OAIMatchedOffer::is_redemption_mode_Valid() const{
    return m_redemption_mode_isValid;
}

QString OAIMatchedOffer::getShortDescription() const {
    return m_short_description;
}
void OAIMatchedOffer::setShortDescription(const QString &short_description) {
    m_short_description = short_description;
    m_short_description_isSet = true;
}

bool OAIMatchedOffer::is_short_description_Set() const{
    return m_short_description_isSet;
}

bool OAIMatchedOffer::is_short_description_Valid() const{
    return m_short_description_isValid;
}

bool OAIMatchedOffer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_sc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redemption_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMatchedOffer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
