/*
 * Payment Account Reference Inquiry API
 * The Payment Account Reference Inquiry API is the unified Mastercard interface for allowing Mastercard Customers involved in payment card acceptance -- whether Merchants, Acquirers, or Digital Activity Customers (DACs) -- to enquire the PAR Vault for getting the PAR, when providing an Account Primary Account Number (PAN) linked to a digitized PAN.
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EncryptedPayloadOut
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:20.502545-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EncryptedPayloadOut {
  public static final String SERIALIZED_NAME_ENCRYPTED_DATA = "encryptedData";
  @SerializedName(SERIALIZED_NAME_ENCRYPTED_DATA)
  private String encryptedData;

  public static final String SERIALIZED_NAME_ENCRYPTED_KEY = "encryptedKey";
  @SerializedName(SERIALIZED_NAME_ENCRYPTED_KEY)
  private String encryptedKey;

  public static final String SERIALIZED_NAME_IV = "iv";
  @SerializedName(SERIALIZED_NAME_IV)
  private String iv;

  public static final String SERIALIZED_NAME_OAEP_HASHING_ALGORITHM = "oaepHashingAlgorithm";
  @SerializedName(SERIALIZED_NAME_OAEP_HASHING_ALGORITHM)
  private String oaepHashingAlgorithm;

  public static final String SERIALIZED_NAME_PUBLIC_KEY_FINGERPRINT = "publicKeyFingerprint";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY_FINGERPRINT)
  private String publicKeyFingerprint;

  public EncryptedPayloadOut() {
  }

  public EncryptedPayloadOut encryptedData(String encryptedData) {
    this.encryptedData = encryptedData;
    return this;
  }

  /**
   * Contains an encrypted JSON object. Encrypted by the ephemeral AES key using CBC mode (IV as provided in &#39;iv&#39;, or zero if none provided) and PKCS#7 padding. The JSON object being encrypted will be defined in the context of the API call. Max length - 256k.  Type - String Hex-encoded Data (case-insensitive). Required - Yes.
   * @return encryptedData
   */
  @javax.annotation.Nonnull
  public String getEncryptedData() {
    return encryptedData;
  }

  public void setEncryptedData(String encryptedData) {
    this.encryptedData = encryptedData;
  }


  public EncryptedPayloadOut encryptedKey(String encryptedKey) {
    this.encryptedKey = encryptedKey;
    return this;
  }

  /**
   * One-time use AES key encrypted by the MasterCard public key (as identified by &#39;publicKeyFingerprint&#39;) using the OAEP or RSA Encryption Standard PKCS 1 v1.5 (depending on the value of &#39;oaepHashingAlgorithm&#39;). Requirement is for a 128-bit key (with 256-bit key supported as an option). Data Type - String. Hex-encoded data (case-insensitive). Max Length - 512. Required - Yes.
   * @return encryptedKey
   */
  @javax.annotation.Nonnull
  public String getEncryptedKey() {
    return encryptedKey;
  }

  public void setEncryptedKey(String encryptedKey) {
    this.encryptedKey = encryptedKey;
  }


  public EncryptedPayloadOut iv(String iv) {
    this.iv = iv;
    return this;
  }

  /**
   * The initialization vector used when encrypting data using the one-time use AES key. Must be exactly 16 bytes (32 character hex string) to match the block size. If not present, an IV of zero is assumed. Length - 32 exactly. Type - String Hex-encoded Data (case-insensitive). Optional.
   * @return iv
   */
  @javax.annotation.Nullable
  public String getIv() {
    return iv;
  }

  public void setIv(String iv) {
    this.iv = iv;
  }


  public EncryptedPayloadOut oaepHashingAlgorithm(String oaepHashingAlgorithm) {
    this.oaepHashingAlgorithm = oaepHashingAlgorithm;
    return this;
  }

  /**
   * Hashing algorithm used with the OAEP scheme. If omitted, then the RSA Encryption Standard PKCS 1 v1.5 will be used. You must use one of the following algorithms; SHA256 - Use the SHA-256 algorithm | SHA512 - Use the SHA-512 algorithm.  Max length - 6. Type - String. Optional.
   * @return oaepHashingAlgorithm
   */
  @javax.annotation.Nullable
  public String getOaepHashingAlgorithm() {
    return oaepHashingAlgorithm;
  }

  public void setOaepHashingAlgorithm(String oaepHashingAlgorithm) {
    this.oaepHashingAlgorithm = oaepHashingAlgorithm;
  }


  public EncryptedPayloadOut publicKeyFingerprint(String publicKeyFingerprint) {
    this.publicKeyFingerprint = publicKeyFingerprint;
    return this;
  }

  /**
   * The fingerprint of the public key used to encrypt the ephemeral AES key. &lt;br&gt;&lt;br&gt; __Max length:__ 64  __Type:__ String Hex-encoded Data (case-insensitive)&lt;br&gt;&lt;br&gt; 
   * @return publicKeyFingerprint
   */
  @javax.annotation.Nonnull
  public String getPublicKeyFingerprint() {
    return publicKeyFingerprint;
  }

  public void setPublicKeyFingerprint(String publicKeyFingerprint) {
    this.publicKeyFingerprint = publicKeyFingerprint;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EncryptedPayloadOut encryptedPayloadOut = (EncryptedPayloadOut) o;
    return Objects.equals(this.encryptedData, encryptedPayloadOut.encryptedData) &&
        Objects.equals(this.encryptedKey, encryptedPayloadOut.encryptedKey) &&
        Objects.equals(this.iv, encryptedPayloadOut.iv) &&
        Objects.equals(this.oaepHashingAlgorithm, encryptedPayloadOut.oaepHashingAlgorithm) &&
        Objects.equals(this.publicKeyFingerprint, encryptedPayloadOut.publicKeyFingerprint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encryptedData, encryptedKey, iv, oaepHashingAlgorithm, publicKeyFingerprint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EncryptedPayloadOut {\n");
    sb.append("    encryptedData: ").append(toIndentedString(encryptedData)).append("\n");
    sb.append("    encryptedKey: ").append(toIndentedString(encryptedKey)).append("\n");
    sb.append("    iv: ").append(toIndentedString(iv)).append("\n");
    sb.append("    oaepHashingAlgorithm: ").append(toIndentedString(oaepHashingAlgorithm)).append("\n");
    sb.append("    publicKeyFingerprint: ").append(toIndentedString(publicKeyFingerprint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("encryptedData");
    openapiFields.add("encryptedKey");
    openapiFields.add("iv");
    openapiFields.add("oaepHashingAlgorithm");
    openapiFields.add("publicKeyFingerprint");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("encryptedData");
    openapiRequiredFields.add("encryptedKey");
    openapiRequiredFields.add("publicKeyFingerprint");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EncryptedPayloadOut
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EncryptedPayloadOut.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EncryptedPayloadOut is not found in the empty JSON string", EncryptedPayloadOut.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EncryptedPayloadOut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EncryptedPayloadOut` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EncryptedPayloadOut.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("encryptedData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptedData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptedData").toString()));
      }
      if (!jsonObj.get("encryptedKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptedKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptedKey").toString()));
      }
      if ((jsonObj.get("iv") != null && !jsonObj.get("iv").isJsonNull()) && !jsonObj.get("iv").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iv` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iv").toString()));
      }
      if ((jsonObj.get("oaepHashingAlgorithm") != null && !jsonObj.get("oaepHashingAlgorithm").isJsonNull()) && !jsonObj.get("oaepHashingAlgorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oaepHashingAlgorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oaepHashingAlgorithm").toString()));
      }
      if (!jsonObj.get("publicKeyFingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicKeyFingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicKeyFingerprint").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EncryptedPayloadOut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EncryptedPayloadOut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EncryptedPayloadOut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EncryptedPayloadOut.class));

       return (TypeAdapter<T>) new TypeAdapter<EncryptedPayloadOut>() {
           @Override
           public void write(JsonWriter out, EncryptedPayloadOut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EncryptedPayloadOut read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EncryptedPayloadOut given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EncryptedPayloadOut
   * @throws IOException if the JSON string is invalid with respect to EncryptedPayloadOut
   */
  public static EncryptedPayloadOut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EncryptedPayloadOut.class);
  }

  /**
   * Convert an instance of EncryptedPayloadOut to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

