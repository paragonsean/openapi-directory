/*
 * Payment Account Reference Inquiry API
 * The Payment Account Reference Inquiry API is the unified Mastercard interface for allowing Mastercard Customers involved in payment card acceptance -- whether Merchants, Acquirers, or Digital Activity Customers (DACs) -- to enquire the PAR Vault for getting the PAR, when providing an Account Primary Account Number (PAN) linked to a digitized PAN.
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetPaymentAccountReferenceRequestSchema;
import org.openapitools.client.model.GetPaymentAccountReferenceResponseSchema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GetPaymentAccountReferenceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GetPaymentAccountReferenceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GetPaymentAccountReferenceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for parPaymentaccountreference10GetPaymentAccountReferencePost
     * @param getPaymentAccountReferenceRequestSchema Contains the details of the get PAR API request message. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains the details of the get PAR API response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call parPaymentaccountreference10GetPaymentAccountReferencePostCall(GetPaymentAccountReferenceRequestSchema getPaymentAccountReferenceRequestSchema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getPaymentAccountReferenceRequestSchema;

        // create path and map variables
        String localVarPath = "/par/paymentaccountreference/1/0/getPaymentAccountReference";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call parPaymentaccountreference10GetPaymentAccountReferencePostValidateBeforeCall(GetPaymentAccountReferenceRequestSchema getPaymentAccountReferenceRequestSchema, final ApiCallback _callback) throws ApiException {
        return parPaymentaccountreference10GetPaymentAccountReferencePostCall(getPaymentAccountReferenceRequestSchema, _callback);

    }

    /**
     * Submit an encrypted PAN to obtain the PAR linked to the account.
     * The API performs a PAR query into the PAR Vault with the supplied PAN. When a PAR is returned from the PAR vault the API will encrypt it using the wrapped encryption method with the  Mastercard Customer?s Encryption Public Key and include it in the API response. 
     * @param getPaymentAccountReferenceRequestSchema Contains the details of the get PAR API request message. (optional)
     * @return GetPaymentAccountReferenceResponseSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains the details of the get PAR API response message. </td><td>  -  </td></tr>
     </table>
     */
    public GetPaymentAccountReferenceResponseSchema parPaymentaccountreference10GetPaymentAccountReferencePost(GetPaymentAccountReferenceRequestSchema getPaymentAccountReferenceRequestSchema) throws ApiException {
        ApiResponse<GetPaymentAccountReferenceResponseSchema> localVarResp = parPaymentaccountreference10GetPaymentAccountReferencePostWithHttpInfo(getPaymentAccountReferenceRequestSchema);
        return localVarResp.getData();
    }

    /**
     * Submit an encrypted PAN to obtain the PAR linked to the account.
     * The API performs a PAR query into the PAR Vault with the supplied PAN. When a PAR is returned from the PAR vault the API will encrypt it using the wrapped encryption method with the  Mastercard Customer?s Encryption Public Key and include it in the API response. 
     * @param getPaymentAccountReferenceRequestSchema Contains the details of the get PAR API request message. (optional)
     * @return ApiResponse&lt;GetPaymentAccountReferenceResponseSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains the details of the get PAR API response message. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPaymentAccountReferenceResponseSchema> parPaymentaccountreference10GetPaymentAccountReferencePostWithHttpInfo(GetPaymentAccountReferenceRequestSchema getPaymentAccountReferenceRequestSchema) throws ApiException {
        okhttp3.Call localVarCall = parPaymentaccountreference10GetPaymentAccountReferencePostValidateBeforeCall(getPaymentAccountReferenceRequestSchema, null);
        Type localVarReturnType = new TypeToken<GetPaymentAccountReferenceResponseSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit an encrypted PAN to obtain the PAR linked to the account. (asynchronously)
     * The API performs a PAR query into the PAR Vault with the supplied PAN. When a PAR is returned from the PAR vault the API will encrypt it using the wrapped encryption method with the  Mastercard Customer?s Encryption Public Key and include it in the API response. 
     * @param getPaymentAccountReferenceRequestSchema Contains the details of the get PAR API request message. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains the details of the get PAR API response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call parPaymentaccountreference10GetPaymentAccountReferencePostAsync(GetPaymentAccountReferenceRequestSchema getPaymentAccountReferenceRequestSchema, final ApiCallback<GetPaymentAccountReferenceResponseSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = parPaymentaccountreference10GetPaymentAccountReferencePostValidateBeforeCall(getPaymentAccountReferenceRequestSchema, _callback);
        Type localVarReturnType = new TypeToken<GetPaymentAccountReferenceResponseSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
