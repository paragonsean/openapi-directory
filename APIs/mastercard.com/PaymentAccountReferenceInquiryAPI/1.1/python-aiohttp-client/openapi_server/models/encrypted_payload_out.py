# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EncryptedPayloadOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encrypted_data: str=None, encrypted_key: str=None, iv: str=None, oaep_hashing_algorithm: str=None, public_key_fingerprint: str=None):
        """EncryptedPayloadOut - a model defined in OpenAPI

        :param encrypted_data: The encrypted_data of this EncryptedPayloadOut.
        :param encrypted_key: The encrypted_key of this EncryptedPayloadOut.
        :param iv: The iv of this EncryptedPayloadOut.
        :param oaep_hashing_algorithm: The oaep_hashing_algorithm of this EncryptedPayloadOut.
        :param public_key_fingerprint: The public_key_fingerprint of this EncryptedPayloadOut.
        """
        self.openapi_types = {
            'encrypted_data': str,
            'encrypted_key': str,
            'iv': str,
            'oaep_hashing_algorithm': str,
            'public_key_fingerprint': str
        }

        self.attribute_map = {
            'encrypted_data': 'encryptedData',
            'encrypted_key': 'encryptedKey',
            'iv': 'iv',
            'oaep_hashing_algorithm': 'oaepHashingAlgorithm',
            'public_key_fingerprint': 'publicKeyFingerprint'
        }

        self._encrypted_data = encrypted_data
        self._encrypted_key = encrypted_key
        self._iv = iv
        self._oaep_hashing_algorithm = oaep_hashing_algorithm
        self._public_key_fingerprint = public_key_fingerprint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EncryptedPayloadOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The encryptedPayloadOut of this EncryptedPayloadOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encrypted_data(self):
        """Gets the encrypted_data of this EncryptedPayloadOut.

        Contains an encrypted JSON object. Encrypted by the ephemeral AES key using CBC mode (IV as provided in 'iv', or zero if none provided) and PKCS#7 padding. The JSON object being encrypted will be defined in the context of the API call. Max length - 256k.  Type - String Hex-encoded Data (case-insensitive). Required - Yes.

        :return: The encrypted_data of this EncryptedPayloadOut.
        :rtype: str
        """
        return self._encrypted_data

    @encrypted_data.setter
    def encrypted_data(self, encrypted_data):
        """Sets the encrypted_data of this EncryptedPayloadOut.

        Contains an encrypted JSON object. Encrypted by the ephemeral AES key using CBC mode (IV as provided in 'iv', or zero if none provided) and PKCS#7 padding. The JSON object being encrypted will be defined in the context of the API call. Max length - 256k.  Type - String Hex-encoded Data (case-insensitive). Required - Yes.

        :param encrypted_data: The encrypted_data of this EncryptedPayloadOut.
        :type encrypted_data: str
        """
        if encrypted_data is None:
            raise ValueError("Invalid value for `encrypted_data`, must not be `None`")

        self._encrypted_data = encrypted_data

    @property
    def encrypted_key(self):
        """Gets the encrypted_key of this EncryptedPayloadOut.

        One-time use AES key encrypted by the MasterCard public key (as identified by 'publicKeyFingerprint') using the OAEP or RSA Encryption Standard PKCS 1 v1.5 (depending on the value of 'oaepHashingAlgorithm'). Requirement is for a 128-bit key (with 256-bit key supported as an option). Data Type - String. Hex-encoded data (case-insensitive). Max Length - 512. Required - Yes.

        :return: The encrypted_key of this EncryptedPayloadOut.
        :rtype: str
        """
        return self._encrypted_key

    @encrypted_key.setter
    def encrypted_key(self, encrypted_key):
        """Sets the encrypted_key of this EncryptedPayloadOut.

        One-time use AES key encrypted by the MasterCard public key (as identified by 'publicKeyFingerprint') using the OAEP or RSA Encryption Standard PKCS 1 v1.5 (depending on the value of 'oaepHashingAlgorithm'). Requirement is for a 128-bit key (with 256-bit key supported as an option). Data Type - String. Hex-encoded data (case-insensitive). Max Length - 512. Required - Yes.

        :param encrypted_key: The encrypted_key of this EncryptedPayloadOut.
        :type encrypted_key: str
        """
        if encrypted_key is None:
            raise ValueError("Invalid value for `encrypted_key`, must not be `None`")

        self._encrypted_key = encrypted_key

    @property
    def iv(self):
        """Gets the iv of this EncryptedPayloadOut.

        The initialization vector used when encrypting data using the one-time use AES key. Must be exactly 16 bytes (32 character hex string) to match the block size. If not present, an IV of zero is assumed. Length - 32 exactly. Type - String Hex-encoded Data (case-insensitive). Optional.

        :return: The iv of this EncryptedPayloadOut.
        :rtype: str
        """
        return self._iv

    @iv.setter
    def iv(self, iv):
        """Sets the iv of this EncryptedPayloadOut.

        The initialization vector used when encrypting data using the one-time use AES key. Must be exactly 16 bytes (32 character hex string) to match the block size. If not present, an IV of zero is assumed. Length - 32 exactly. Type - String Hex-encoded Data (case-insensitive). Optional.

        :param iv: The iv of this EncryptedPayloadOut.
        :type iv: str
        """

        self._iv = iv

    @property
    def oaep_hashing_algorithm(self):
        """Gets the oaep_hashing_algorithm of this EncryptedPayloadOut.

        Hashing algorithm used with the OAEP scheme. If omitted, then the RSA Encryption Standard PKCS 1 v1.5 will be used. You must use one of the following algorithms; SHA256 - Use the SHA-256 algorithm | SHA512 - Use the SHA-512 algorithm.  Max length - 6. Type - String. Optional.

        :return: The oaep_hashing_algorithm of this EncryptedPayloadOut.
        :rtype: str
        """
        return self._oaep_hashing_algorithm

    @oaep_hashing_algorithm.setter
    def oaep_hashing_algorithm(self, oaep_hashing_algorithm):
        """Sets the oaep_hashing_algorithm of this EncryptedPayloadOut.

        Hashing algorithm used with the OAEP scheme. If omitted, then the RSA Encryption Standard PKCS 1 v1.5 will be used. You must use one of the following algorithms; SHA256 - Use the SHA-256 algorithm | SHA512 - Use the SHA-512 algorithm.  Max length - 6. Type - String. Optional.

        :param oaep_hashing_algorithm: The oaep_hashing_algorithm of this EncryptedPayloadOut.
        :type oaep_hashing_algorithm: str
        """

        self._oaep_hashing_algorithm = oaep_hashing_algorithm

    @property
    def public_key_fingerprint(self):
        """Gets the public_key_fingerprint of this EncryptedPayloadOut.

        The fingerprint of the public key used to encrypt the ephemeral AES key. <br><br> __Max length:__ 64  __Type:__ String Hex-encoded Data (case-insensitive)<br><br> 

        :return: The public_key_fingerprint of this EncryptedPayloadOut.
        :rtype: str
        """
        return self._public_key_fingerprint

    @public_key_fingerprint.setter
    def public_key_fingerprint(self, public_key_fingerprint):
        """Sets the public_key_fingerprint of this EncryptedPayloadOut.

        The fingerprint of the public key used to encrypt the ephemeral AES key. <br><br> __Max length:__ 64  __Type:__ String Hex-encoded Data (case-insensitive)<br><br> 

        :param public_key_fingerprint: The public_key_fingerprint of this EncryptedPayloadOut.
        :type public_key_fingerprint: str
        """
        if public_key_fingerprint is None:
            raise ValueError("Invalid value for `public_key_fingerprint`, must not be `None`")

        self._public_key_fingerprint = public_key_fingerprint
