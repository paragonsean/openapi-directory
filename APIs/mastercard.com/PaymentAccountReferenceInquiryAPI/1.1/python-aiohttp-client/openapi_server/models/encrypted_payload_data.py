# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EncryptedPayloadData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encrypted_data: str=None, encrypted_key: str=None, iv: str=None, oaep_hashing_algorithm: str=None, public_key_fingerprint: str=None):
        """EncryptedPayloadData - a model defined in OpenAPI

        :param encrypted_data: The encrypted_data of this EncryptedPayloadData.
        :param encrypted_key: The encrypted_key of this EncryptedPayloadData.
        :param iv: The iv of this EncryptedPayloadData.
        :param oaep_hashing_algorithm: The oaep_hashing_algorithm of this EncryptedPayloadData.
        :param public_key_fingerprint: The public_key_fingerprint of this EncryptedPayloadData.
        """
        self.openapi_types = {
            'encrypted_data': str,
            'encrypted_key': str,
            'iv': str,
            'oaep_hashing_algorithm': str,
            'public_key_fingerprint': str
        }

        self.attribute_map = {
            'encrypted_data': 'encryptedData',
            'encrypted_key': 'encryptedKey',
            'iv': 'iv',
            'oaep_hashing_algorithm': 'oaepHashingAlgorithm',
            'public_key_fingerprint': 'publicKeyFingerprint'
        }

        self._encrypted_data = encrypted_data
        self._encrypted_key = encrypted_key
        self._iv = iv
        self._oaep_hashing_algorithm = oaep_hashing_algorithm
        self._public_key_fingerprint = public_key_fingerprint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EncryptedPayloadData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The encryptedPayloadData of this EncryptedPayloadData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encrypted_data(self):
        """Gets the encrypted_data of this EncryptedPayloadData.

        Encrypted payload that contains the Primary Account Number (PAN). Refer to Encrypted Data Objects section for the format of encrypted data or download the latest OpenAPI YAML  specification. __Max length:__ 256k   __Type:__ String Hex-encoded Data (case-insensitive) </br> </br>  

        :return: The encrypted_data of this EncryptedPayloadData.
        :rtype: str
        """
        return self._encrypted_data

    @encrypted_data.setter
    def encrypted_data(self, encrypted_data):
        """Sets the encrypted_data of this EncryptedPayloadData.

        Encrypted payload that contains the Primary Account Number (PAN). Refer to Encrypted Data Objects section for the format of encrypted data or download the latest OpenAPI YAML  specification. __Max length:__ 256k   __Type:__ String Hex-encoded Data (case-insensitive) </br> </br>  

        :param encrypted_data: The encrypted_data of this EncryptedPayloadData.
        :type encrypted_data: str
        """

        self._encrypted_data = encrypted_data

    @property
    def encrypted_key(self):
        """Gets the encrypted_key of this EncryptedPayloadData.

        One-time use AES key encrypted by the MasterCard public key (as identified by 'publicKeyFingerprint') using the OAEP or RSA Encryption Standard PKCS 1 v1.5 (depending on the value of  'oaepHashingAlgorithm'). Requirement is for a 128-bit key (with 256-bit key supported as an option).  </br><br> __Data Type:__ String. Hex-encoded data (case-insensitive).<br>  __Max Length:__ 512 </br></br> 

        :return: The encrypted_key of this EncryptedPayloadData.
        :rtype: str
        """
        return self._encrypted_key

    @encrypted_key.setter
    def encrypted_key(self, encrypted_key):
        """Sets the encrypted_key of this EncryptedPayloadData.

        One-time use AES key encrypted by the MasterCard public key (as identified by 'publicKeyFingerprint') using the OAEP or RSA Encryption Standard PKCS 1 v1.5 (depending on the value of  'oaepHashingAlgorithm'). Requirement is for a 128-bit key (with 256-bit key supported as an option).  </br><br> __Data Type:__ String. Hex-encoded data (case-insensitive).<br>  __Max Length:__ 512 </br></br> 

        :param encrypted_key: The encrypted_key of this EncryptedPayloadData.
        :type encrypted_key: str
        """

        self._encrypted_key = encrypted_key

    @property
    def iv(self):
        """Gets the iv of this EncryptedPayloadData.

        The initialization vector used when encrypting data using the one-time use AES key. Must be exactly 16 bytes (32 character hex string) to match the block size. If not present, an IV of zero is assumed.<br><br>  __Length:__ 32 (exactly)<br> __Type:__ String Hex-encoded Data (case-insensitive).<br><br> 

        :return: The iv of this EncryptedPayloadData.
        :rtype: str
        """
        return self._iv

    @iv.setter
    def iv(self, iv):
        """Sets the iv of this EncryptedPayloadData.

        The initialization vector used when encrypting data using the one-time use AES key. Must be exactly 16 bytes (32 character hex string) to match the block size. If not present, an IV of zero is assumed.<br><br>  __Length:__ 32 (exactly)<br> __Type:__ String Hex-encoded Data (case-insensitive).<br><br> 

        :param iv: The iv of this EncryptedPayloadData.
        :type iv: str
        """

        self._iv = iv

    @property
    def oaep_hashing_algorithm(self):
        """Gets the oaep_hashing_algorithm of this EncryptedPayloadData.

        Hashing algorithm used with the OAEP scheme. If omitted, then the RSA Encryption Standard PKCS 1 v1.5 will be used. You must use one of the following algorithms; SHA256 - Use the SHA-  256 algorithm | SHA512 - Use the SHA-512 algorithm.<br><br>    __Max length:__ 6<br>  __Type:__ String 

        :return: The oaep_hashing_algorithm of this EncryptedPayloadData.
        :rtype: str
        """
        return self._oaep_hashing_algorithm

    @oaep_hashing_algorithm.setter
    def oaep_hashing_algorithm(self, oaep_hashing_algorithm):
        """Sets the oaep_hashing_algorithm of this EncryptedPayloadData.

        Hashing algorithm used with the OAEP scheme. If omitted, then the RSA Encryption Standard PKCS 1 v1.5 will be used. You must use one of the following algorithms; SHA256 - Use the SHA-  256 algorithm | SHA512 - Use the SHA-512 algorithm.<br><br>    __Max length:__ 6<br>  __Type:__ String 

        :param oaep_hashing_algorithm: The oaep_hashing_algorithm of this EncryptedPayloadData.
        :type oaep_hashing_algorithm: str
        """

        self._oaep_hashing_algorithm = oaep_hashing_algorithm

    @property
    def public_key_fingerprint(self):
        """Gets the public_key_fingerprint of this EncryptedPayloadData.

        The fingerprint of the public key used to encrypt the ephemeral AES key. Max length - 64. Type - String Hex-encoded Data (case-insensitive). 

        :return: The public_key_fingerprint of this EncryptedPayloadData.
        :rtype: str
        """
        return self._public_key_fingerprint

    @public_key_fingerprint.setter
    def public_key_fingerprint(self, public_key_fingerprint):
        """Sets the public_key_fingerprint of this EncryptedPayloadData.

        The fingerprint of the public key used to encrypt the ephemeral AES key. Max length - 64. Type - String Hex-encoded Data (case-insensitive). 

        :param public_key_fingerprint: The public_key_fingerprint of this EncryptedPayloadData.
        :type public_key_fingerprint: str
        """

        self._public_key_fingerprint = public_key_fingerprint
