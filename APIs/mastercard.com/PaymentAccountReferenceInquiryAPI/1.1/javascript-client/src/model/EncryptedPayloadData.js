/**
 * Payment Account Reference Inquiry API
 * The Payment Account Reference Inquiry API is the unified Mastercard interface for allowing Mastercard Customers involved in payment card acceptance -- whether Merchants, Acquirers, or Digital Activity Customers (DACs) -- to enquire the PAR Vault for getting the PAR, when providing an Account Primary Account Number (PAN) linked to a digitized PAN.
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EncryptedPayloadData model module.
 * @module model/EncryptedPayloadData
 * @version 1.1
 */
class EncryptedPayloadData {
    /**
     * Constructs a new <code>EncryptedPayloadData</code>.
     * @alias module:model/EncryptedPayloadData
     */
    constructor() { 
        
        EncryptedPayloadData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EncryptedPayloadData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EncryptedPayloadData} obj Optional instance to populate.
     * @return {module:model/EncryptedPayloadData} The populated <code>EncryptedPayloadData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EncryptedPayloadData();

            if (data.hasOwnProperty('encryptedData')) {
                obj['encryptedData'] = ApiClient.convertToType(data['encryptedData'], 'String');
            }
            if (data.hasOwnProperty('encryptedKey')) {
                obj['encryptedKey'] = ApiClient.convertToType(data['encryptedKey'], 'String');
            }
            if (data.hasOwnProperty('iv')) {
                obj['iv'] = ApiClient.convertToType(data['iv'], 'String');
            }
            if (data.hasOwnProperty('oaepHashingAlgorithm')) {
                obj['oaepHashingAlgorithm'] = ApiClient.convertToType(data['oaepHashingAlgorithm'], 'String');
            }
            if (data.hasOwnProperty('publicKeyFingerprint')) {
                obj['publicKeyFingerprint'] = ApiClient.convertToType(data['publicKeyFingerprint'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EncryptedPayloadData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EncryptedPayloadData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['encryptedData'] && !(typeof data['encryptedData'] === 'string' || data['encryptedData'] instanceof String)) {
            throw new Error("Expected the field `encryptedData` to be a primitive type in the JSON string but got " + data['encryptedData']);
        }
        // ensure the json data is a string
        if (data['encryptedKey'] && !(typeof data['encryptedKey'] === 'string' || data['encryptedKey'] instanceof String)) {
            throw new Error("Expected the field `encryptedKey` to be a primitive type in the JSON string but got " + data['encryptedKey']);
        }
        // ensure the json data is a string
        if (data['iv'] && !(typeof data['iv'] === 'string' || data['iv'] instanceof String)) {
            throw new Error("Expected the field `iv` to be a primitive type in the JSON string but got " + data['iv']);
        }
        // ensure the json data is a string
        if (data['oaepHashingAlgorithm'] && !(typeof data['oaepHashingAlgorithm'] === 'string' || data['oaepHashingAlgorithm'] instanceof String)) {
            throw new Error("Expected the field `oaepHashingAlgorithm` to be a primitive type in the JSON string but got " + data['oaepHashingAlgorithm']);
        }
        // ensure the json data is a string
        if (data['publicKeyFingerprint'] && !(typeof data['publicKeyFingerprint'] === 'string' || data['publicKeyFingerprint'] instanceof String)) {
            throw new Error("Expected the field `publicKeyFingerprint` to be a primitive type in the JSON string but got " + data['publicKeyFingerprint']);
        }

        return true;
    }


}



/**
 * Encrypted payload that contains the Primary Account Number (PAN). Refer to Encrypted Data Objects section for the format of encrypted data or download the latest OpenAPI YAML  specification. __Max length:__ 256k   __Type:__ String Hex-encoded Data (case-insensitive) </br> </br>  
 * @member {String} encryptedData
 */
EncryptedPayloadData.prototype['encryptedData'] = undefined;

/**
 * One-time use AES key encrypted by the MasterCard public key (as identified by 'publicKeyFingerprint') using the OAEP or RSA Encryption Standard PKCS 1 v1.5 (depending on the value of  'oaepHashingAlgorithm'). Requirement is for a 128-bit key (with 256-bit key supported as an option).  </br><br> __Data Type:__ String. Hex-encoded data (case-insensitive).<br>  __Max Length:__ 512 </br></br> 
 * @member {String} encryptedKey
 */
EncryptedPayloadData.prototype['encryptedKey'] = undefined;

/**
 * The initialization vector used when encrypting data using the one-time use AES key. Must be exactly 16 bytes (32 character hex string) to match the block size. If not present, an IV of zero is assumed.<br><br>  __Length:__ 32 (exactly)<br> __Type:__ String Hex-encoded Data (case-insensitive).<br><br> 
 * @member {String} iv
 */
EncryptedPayloadData.prototype['iv'] = undefined;

/**
 * Hashing algorithm used with the OAEP scheme. If omitted, then the RSA Encryption Standard PKCS 1 v1.5 will be used. You must use one of the following algorithms; SHA256 - Use the SHA-  256 algorithm | SHA512 - Use the SHA-512 algorithm.<br><br>    __Max length:__ 6<br>  __Type:__ String 
 * @member {String} oaepHashingAlgorithm
 */
EncryptedPayloadData.prototype['oaepHashingAlgorithm'] = undefined;

/**
 * The fingerprint of the public key used to encrypt the ephemeral AES key. Max length - 64. Type - String Hex-encoded Data (case-insensitive). 
 * @member {String} publicKeyFingerprint
 */
EncryptedPayloadData.prototype['publicKeyFingerprint'] = undefined;






export default EncryptedPayloadData;

