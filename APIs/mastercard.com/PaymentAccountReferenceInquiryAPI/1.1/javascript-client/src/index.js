/**
 * Payment Account Reference Inquiry API
 * The Payment Account Reference Inquiry API is the unified Mastercard interface for allowing Mastercard Customers involved in payment card acceptance -- whether Merchants, Acquirers, or Digital Activity Customers (DACs) -- to enquire the PAR Vault for getting the PAR, when providing an Account Primary Account Number (PAN) linked to a digitized PAN.
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import EncryptedPayloadData from './model/EncryptedPayloadData';
import EncryptedPayloadOut from './model/EncryptedPayloadOut';
import GetPaymentAccountReferenceRequestSchema from './model/GetPaymentAccountReferenceRequestSchema';
import GetPaymentAccountReferenceResponseSchema from './model/GetPaymentAccountReferenceResponseSchema';
import GetPaymentAccountReferenceApi from './api/GetPaymentAccountReferenceApi';


/**
* The Payment Account Reference Inquiry API is the unified Mastercard interface for allowing Mastercard Customers involved in payment card acceptance -- whether Merchants, Acquirers, or Digital Activity Customers (DACs) -- to enquire the PAR Vault for getting the PAR, when providing an Account Primary Account Number (PAN) linked to a digitized PAN..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var PaymentAccountReferenceInquiryApi = require('index'); // See note below*.
* var xxxSvc = new PaymentAccountReferenceInquiryApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new PaymentAccountReferenceInquiryApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new PaymentAccountReferenceInquiryApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new PaymentAccountReferenceInquiryApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The EncryptedPayloadData model constructor.
     * @property {module:model/EncryptedPayloadData}
     */
    EncryptedPayloadData,

    /**
     * The EncryptedPayloadOut model constructor.
     * @property {module:model/EncryptedPayloadOut}
     */
    EncryptedPayloadOut,

    /**
     * The GetPaymentAccountReferenceRequestSchema model constructor.
     * @property {module:model/GetPaymentAccountReferenceRequestSchema}
     */
    GetPaymentAccountReferenceRequestSchema,

    /**
     * The GetPaymentAccountReferenceResponseSchema model constructor.
     * @property {module:model/GetPaymentAccountReferenceResponseSchema}
     */
    GetPaymentAccountReferenceResponseSchema,

    /**
    * The GetPaymentAccountReferenceApi service constructor.
    * @property {module:api/GetPaymentAccountReferenceApi}
    */
    GetPaymentAccountReferenceApi
};
