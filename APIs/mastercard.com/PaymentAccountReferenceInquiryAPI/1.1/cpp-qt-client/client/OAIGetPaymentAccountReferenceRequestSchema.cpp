/**
 * Payment Account Reference Inquiry API
 * The Payment Account Reference Inquiry API is the unified Mastercard interface for allowing Mastercard Customers involved in payment card acceptance -- whether Merchants, Acquirers, or Digital Activity Customers (DACs) -- to enquire the PAR Vault for getting the PAR, when providing an Account Primary Account Number (PAN) linked to a digitized PAN.
 *
 * The version of the OpenAPI document: 1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPaymentAccountReferenceRequestSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPaymentAccountReferenceRequestSchema::OAIGetPaymentAccountReferenceRequestSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPaymentAccountReferenceRequestSchema::OAIGetPaymentAccountReferenceRequestSchema() {
    this->initializeModel();
}

OAIGetPaymentAccountReferenceRequestSchema::~OAIGetPaymentAccountReferenceRequestSchema() {}

void OAIGetPaymentAccountReferenceRequestSchema::initializeModel() {

    m_encrypted_payload_isSet = false;
    m_encrypted_payload_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIGetPaymentAccountReferenceRequestSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPaymentAccountReferenceRequestSchema::fromJsonObject(QJsonObject json) {

    m_encrypted_payload_isValid = ::OpenAPI::fromJsonValue(m_encrypted_payload, json[QString("encryptedPayload")]);
    m_encrypted_payload_isSet = !json[QString("encryptedPayload")].isNull() && m_encrypted_payload_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;
}

QString OAIGetPaymentAccountReferenceRequestSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPaymentAccountReferenceRequestSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_encrypted_payload.isSet()) {
        obj.insert(QString("encryptedPayload"), ::OpenAPI::toJsonValue(m_encrypted_payload));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

OAIEncryptedPayloadData OAIGetPaymentAccountReferenceRequestSchema::getEncryptedPayload() const {
    return m_encrypted_payload;
}
void OAIGetPaymentAccountReferenceRequestSchema::setEncryptedPayload(const OAIEncryptedPayloadData &encrypted_payload) {
    m_encrypted_payload = encrypted_payload;
    m_encrypted_payload_isSet = true;
}

bool OAIGetPaymentAccountReferenceRequestSchema::is_encrypted_payload_Set() const{
    return m_encrypted_payload_isSet;
}

bool OAIGetPaymentAccountReferenceRequestSchema::is_encrypted_payload_Valid() const{
    return m_encrypted_payload_isValid;
}

QString OAIGetPaymentAccountReferenceRequestSchema::getRequestId() const {
    return m_request_id;
}
void OAIGetPaymentAccountReferenceRequestSchema::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIGetPaymentAccountReferenceRequestSchema::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIGetPaymentAccountReferenceRequestSchema::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIGetPaymentAccountReferenceRequestSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encrypted_payload.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPaymentAccountReferenceRequestSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_encrypted_payload_isValid && m_request_id_isValid && true;
}

} // namespace OpenAPI
