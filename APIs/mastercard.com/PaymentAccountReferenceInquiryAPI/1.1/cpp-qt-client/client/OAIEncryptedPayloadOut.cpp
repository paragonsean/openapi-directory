/**
 * Payment Account Reference Inquiry API
 * The Payment Account Reference Inquiry API is the unified Mastercard interface for allowing Mastercard Customers involved in payment card acceptance -- whether Merchants, Acquirers, or Digital Activity Customers (DACs) -- to enquire the PAR Vault for getting the PAR, when providing an Account Primary Account Number (PAN) linked to a digitized PAN.
 *
 * The version of the OpenAPI document: 1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEncryptedPayloadOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEncryptedPayloadOut::OAIEncryptedPayloadOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEncryptedPayloadOut::OAIEncryptedPayloadOut() {
    this->initializeModel();
}

OAIEncryptedPayloadOut::~OAIEncryptedPayloadOut() {}

void OAIEncryptedPayloadOut::initializeModel() {

    m_encrypted_data_isSet = false;
    m_encrypted_data_isValid = false;

    m_encrypted_key_isSet = false;
    m_encrypted_key_isValid = false;

    m_iv_isSet = false;
    m_iv_isValid = false;

    m_oaep_hashing_algorithm_isSet = false;
    m_oaep_hashing_algorithm_isValid = false;

    m_public_key_fingerprint_isSet = false;
    m_public_key_fingerprint_isValid = false;
}

void OAIEncryptedPayloadOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEncryptedPayloadOut::fromJsonObject(QJsonObject json) {

    m_encrypted_data_isValid = ::OpenAPI::fromJsonValue(m_encrypted_data, json[QString("encryptedData")]);
    m_encrypted_data_isSet = !json[QString("encryptedData")].isNull() && m_encrypted_data_isValid;

    m_encrypted_key_isValid = ::OpenAPI::fromJsonValue(m_encrypted_key, json[QString("encryptedKey")]);
    m_encrypted_key_isSet = !json[QString("encryptedKey")].isNull() && m_encrypted_key_isValid;

    m_iv_isValid = ::OpenAPI::fromJsonValue(m_iv, json[QString("iv")]);
    m_iv_isSet = !json[QString("iv")].isNull() && m_iv_isValid;

    m_oaep_hashing_algorithm_isValid = ::OpenAPI::fromJsonValue(m_oaep_hashing_algorithm, json[QString("oaepHashingAlgorithm")]);
    m_oaep_hashing_algorithm_isSet = !json[QString("oaepHashingAlgorithm")].isNull() && m_oaep_hashing_algorithm_isValid;

    m_public_key_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_public_key_fingerprint, json[QString("publicKeyFingerprint")]);
    m_public_key_fingerprint_isSet = !json[QString("publicKeyFingerprint")].isNull() && m_public_key_fingerprint_isValid;
}

QString OAIEncryptedPayloadOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEncryptedPayloadOut::asJsonObject() const {
    QJsonObject obj;
    if (m_encrypted_data_isSet) {
        obj.insert(QString("encryptedData"), ::OpenAPI::toJsonValue(m_encrypted_data));
    }
    if (m_encrypted_key_isSet) {
        obj.insert(QString("encryptedKey"), ::OpenAPI::toJsonValue(m_encrypted_key));
    }
    if (m_iv_isSet) {
        obj.insert(QString("iv"), ::OpenAPI::toJsonValue(m_iv));
    }
    if (m_oaep_hashing_algorithm_isSet) {
        obj.insert(QString("oaepHashingAlgorithm"), ::OpenAPI::toJsonValue(m_oaep_hashing_algorithm));
    }
    if (m_public_key_fingerprint_isSet) {
        obj.insert(QString("publicKeyFingerprint"), ::OpenAPI::toJsonValue(m_public_key_fingerprint));
    }
    return obj;
}

QString OAIEncryptedPayloadOut::getEncryptedData() const {
    return m_encrypted_data;
}
void OAIEncryptedPayloadOut::setEncryptedData(const QString &encrypted_data) {
    m_encrypted_data = encrypted_data;
    m_encrypted_data_isSet = true;
}

bool OAIEncryptedPayloadOut::is_encrypted_data_Set() const{
    return m_encrypted_data_isSet;
}

bool OAIEncryptedPayloadOut::is_encrypted_data_Valid() const{
    return m_encrypted_data_isValid;
}

QString OAIEncryptedPayloadOut::getEncryptedKey() const {
    return m_encrypted_key;
}
void OAIEncryptedPayloadOut::setEncryptedKey(const QString &encrypted_key) {
    m_encrypted_key = encrypted_key;
    m_encrypted_key_isSet = true;
}

bool OAIEncryptedPayloadOut::is_encrypted_key_Set() const{
    return m_encrypted_key_isSet;
}

bool OAIEncryptedPayloadOut::is_encrypted_key_Valid() const{
    return m_encrypted_key_isValid;
}

QString OAIEncryptedPayloadOut::getIv() const {
    return m_iv;
}
void OAIEncryptedPayloadOut::setIv(const QString &iv) {
    m_iv = iv;
    m_iv_isSet = true;
}

bool OAIEncryptedPayloadOut::is_iv_Set() const{
    return m_iv_isSet;
}

bool OAIEncryptedPayloadOut::is_iv_Valid() const{
    return m_iv_isValid;
}

QString OAIEncryptedPayloadOut::getOaepHashingAlgorithm() const {
    return m_oaep_hashing_algorithm;
}
void OAIEncryptedPayloadOut::setOaepHashingAlgorithm(const QString &oaep_hashing_algorithm) {
    m_oaep_hashing_algorithm = oaep_hashing_algorithm;
    m_oaep_hashing_algorithm_isSet = true;
}

bool OAIEncryptedPayloadOut::is_oaep_hashing_algorithm_Set() const{
    return m_oaep_hashing_algorithm_isSet;
}

bool OAIEncryptedPayloadOut::is_oaep_hashing_algorithm_Valid() const{
    return m_oaep_hashing_algorithm_isValid;
}

QString OAIEncryptedPayloadOut::getPublicKeyFingerprint() const {
    return m_public_key_fingerprint;
}
void OAIEncryptedPayloadOut::setPublicKeyFingerprint(const QString &public_key_fingerprint) {
    m_public_key_fingerprint = public_key_fingerprint;
    m_public_key_fingerprint_isSet = true;
}

bool OAIEncryptedPayloadOut::is_public_key_fingerprint_Set() const{
    return m_public_key_fingerprint_isSet;
}

bool OAIEncryptedPayloadOut::is_public_key_fingerprint_Valid() const{
    return m_public_key_fingerprint_isValid;
}

bool OAIEncryptedPayloadOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encrypted_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oaep_hashing_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_key_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEncryptedPayloadOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_encrypted_data_isValid && m_encrypted_key_isValid && m_public_key_fingerprint_isValid && true;
}

} // namespace OpenAPI
