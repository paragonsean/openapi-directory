/**
 * Payment Account Reference Inquiry API
 * The Payment Account Reference Inquiry API is the unified Mastercard interface for allowing Mastercard Customers involved in payment card acceptance -- whether Merchants, Acquirers, or Digital Activity Customers (DACs) -- to enquire the PAR Vault for getting the PAR, when providing an Account Primary Account Number (PAN) linked to a digitized PAN.
 *
 * The version of the OpenAPI document: 1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPaymentAccountReferenceResponseSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPaymentAccountReferenceResponseSchema::OAIGetPaymentAccountReferenceResponseSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPaymentAccountReferenceResponseSchema::OAIGetPaymentAccountReferenceResponseSchema() {
    this->initializeModel();
}

OAIGetPaymentAccountReferenceResponseSchema::~OAIGetPaymentAccountReferenceResponseSchema() {}

void OAIGetPaymentAccountReferenceResponseSchema::initializeModel() {

    m_encrypted_payload_isSet = false;
    m_encrypted_payload_isValid = false;

    m_response_id_isSet = false;
    m_response_id_isValid = false;
}

void OAIGetPaymentAccountReferenceResponseSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPaymentAccountReferenceResponseSchema::fromJsonObject(QJsonObject json) {

    m_encrypted_payload_isValid = ::OpenAPI::fromJsonValue(m_encrypted_payload, json[QString("encryptedPayload")]);
    m_encrypted_payload_isSet = !json[QString("encryptedPayload")].isNull() && m_encrypted_payload_isValid;

    m_response_id_isValid = ::OpenAPI::fromJsonValue(m_response_id, json[QString("responseId")]);
    m_response_id_isSet = !json[QString("responseId")].isNull() && m_response_id_isValid;
}

QString OAIGetPaymentAccountReferenceResponseSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPaymentAccountReferenceResponseSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_encrypted_payload.isSet()) {
        obj.insert(QString("encryptedPayload"), ::OpenAPI::toJsonValue(m_encrypted_payload));
    }
    if (m_response_id_isSet) {
        obj.insert(QString("responseId"), ::OpenAPI::toJsonValue(m_response_id));
    }
    return obj;
}

OAIEncryptedPayloadOut OAIGetPaymentAccountReferenceResponseSchema::getEncryptedPayload() const {
    return m_encrypted_payload;
}
void OAIGetPaymentAccountReferenceResponseSchema::setEncryptedPayload(const OAIEncryptedPayloadOut &encrypted_payload) {
    m_encrypted_payload = encrypted_payload;
    m_encrypted_payload_isSet = true;
}

bool OAIGetPaymentAccountReferenceResponseSchema::is_encrypted_payload_Set() const{
    return m_encrypted_payload_isSet;
}

bool OAIGetPaymentAccountReferenceResponseSchema::is_encrypted_payload_Valid() const{
    return m_encrypted_payload_isValid;
}

QString OAIGetPaymentAccountReferenceResponseSchema::getResponseId() const {
    return m_response_id;
}
void OAIGetPaymentAccountReferenceResponseSchema::setResponseId(const QString &response_id) {
    m_response_id = response_id;
    m_response_id_isSet = true;
}

bool OAIGetPaymentAccountReferenceResponseSchema::is_response_id_Set() const{
    return m_response_id_isSet;
}

bool OAIGetPaymentAccountReferenceResponseSchema::is_response_id_Valid() const{
    return m_response_id_isValid;
}

bool OAIGetPaymentAccountReferenceResponseSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encrypted_payload.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPaymentAccountReferenceResponseSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
