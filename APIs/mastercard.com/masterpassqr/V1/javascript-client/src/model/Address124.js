/**
 * Send Person to Merchant
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Address124 model module.
 * @module model/Address124
 * @version V1
 */
class Address124 {
    /**
     * Constructs a new <code>Address124</code>.
     * Recipient&#39;s home address.
     * @alias module:model/Address124
     * @param city {String} Home city. Details- 1-25
     * @param country {String} The recipient's home country as an ISO 3166-1 alpha-3 country code, in uppercase. Details- alpha-3
     * @param line1 {String} First line of recipient's home address. Details- 1-50
     * @param postalCode {String} Home postal code.  Format in 5 digits or 5 digits hyphen 4 digits.  Details numeric length: 5 or 5-4
     */
    constructor(city, country, line1, postalCode) { 
        
        Address124.initialize(this, city, country, line1, postalCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, city, country, line1, postalCode) { 
        obj['city'] = city;
        obj['country'] = country;
        obj['line1'] = line1;
        obj['postal_code'] = postalCode;
    }

    /**
     * Constructs a <code>Address124</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Address124} obj Optional instance to populate.
     * @return {module:model/Address124} The populated <code>Address124</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Address124();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('country_subdivision')) {
                obj['country_subdivision'] = ApiClient.convertToType(data['country_subdivision'], 'String');
            }
            if (data.hasOwnProperty('line1')) {
                obj['line1'] = ApiClient.convertToType(data['line1'], 'String');
            }
            if (data.hasOwnProperty('line2')) {
                obj['line2'] = ApiClient.convertToType(data['line2'], 'String');
            }
            if (data.hasOwnProperty('postal_code')) {
                obj['postal_code'] = ApiClient.convertToType(data['postal_code'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Address124</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Address124</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Address124.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['country_subdivision'] && !(typeof data['country_subdivision'] === 'string' || data['country_subdivision'] instanceof String)) {
            throw new Error("Expected the field `country_subdivision` to be a primitive type in the JSON string but got " + data['country_subdivision']);
        }
        // ensure the json data is a string
        if (data['line1'] && !(typeof data['line1'] === 'string' || data['line1'] instanceof String)) {
            throw new Error("Expected the field `line1` to be a primitive type in the JSON string but got " + data['line1']);
        }
        // ensure the json data is a string
        if (data['line2'] && !(typeof data['line2'] === 'string' || data['line2'] instanceof String)) {
            throw new Error("Expected the field `line2` to be a primitive type in the JSON string but got " + data['line2']);
        }
        // ensure the json data is a string
        if (data['postal_code'] && !(typeof data['postal_code'] === 'string' || data['postal_code'] instanceof String)) {
            throw new Error("Expected the field `postal_code` to be a primitive type in the JSON string but got " + data['postal_code']);
        }

        return true;
    }


}

Address124.RequiredProperties = ["city", "country", "line1", "postal_code"];

/**
 * Home city. Details- 1-25
 * @member {String} city
 */
Address124.prototype['city'] = undefined;

/**
 * The recipient's home country as an ISO 3166-1 alpha-3 country code, in uppercase. Details- alpha-3
 * @member {String} country
 */
Address124.prototype['country'] = undefined;

/**
 * Home state or province. US or Canada country subdivision code is required. Details- 2-3
 * @member {String} country_subdivision
 */
Address124.prototype['country_subdivision'] = undefined;

/**
 * First line of recipient's home address. Details- 1-50
 * @member {String} line1
 */
Address124.prototype['line1'] = undefined;

/**
 * Second line of recipient's home address. Details- 1-50
 * @member {String} line2
 */
Address124.prototype['line2'] = undefined;

/**
 * Home postal code.  Format in 5 digits or 5 digits hyphen 4 digits.  Details numeric length: 5 or 5-4
 * @member {String} postal_code
 */
Address124.prototype['postal_code'] = undefined;






export default Address124;

