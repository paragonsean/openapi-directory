/**
 * Send Person to Merchant
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Address42 model module.
 * @module model/Address42
 * @version V1
 */
class Address42 {
    /**
     * Constructs a new <code>Address42</code>.
     * Address of the sender.
     * @alias module:model/Address42
     */
    constructor() { 
        
        Address42.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Address42</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Address42} obj Optional instance to populate.
     * @return {module:model/Address42} The populated <code>Address42</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Address42();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('country_subdivision')) {
                obj['country_subdivision'] = ApiClient.convertToType(data['country_subdivision'], 'String');
            }
            if (data.hasOwnProperty('line1')) {
                obj['line1'] = ApiClient.convertToType(data['line1'], 'String');
            }
            if (data.hasOwnProperty('line2')) {
                obj['line2'] = ApiClient.convertToType(data['line2'], 'String');
            }
            if (data.hasOwnProperty('postal_code')) {
                obj['postal_code'] = ApiClient.convertToType(data['postal_code'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Address42</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Address42</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['country_subdivision'] && !(typeof data['country_subdivision'] === 'string' || data['country_subdivision'] instanceof String)) {
            throw new Error("Expected the field `country_subdivision` to be a primitive type in the JSON string but got " + data['country_subdivision']);
        }
        // ensure the json data is a string
        if (data['line1'] && !(typeof data['line1'] === 'string' || data['line1'] instanceof String)) {
            throw new Error("Expected the field `line1` to be a primitive type in the JSON string but got " + data['line1']);
        }
        // ensure the json data is a string
        if (data['line2'] && !(typeof data['line2'] === 'string' || data['line2'] instanceof String)) {
            throw new Error("Expected the field `line2` to be a primitive type in the JSON string but got " + data['line2']);
        }
        // ensure the json data is a string
        if (data['postal_code'] && !(typeof data['postal_code'] === 'string' || data['postal_code'] instanceof String)) {
            throw new Error("Expected the field `postal_code` to be a primitive type in the JSON string but got " + data['postal_code']);
        }

        return true;
    }


}



/**
 * City of the sender. Details- 1-25
 * @member {String} city
 */
Address42.prototype['city'] = undefined;

/**
 * Country of the sender as an ISO alpha country code. Details- Alpha, Length: 3
 * @member {String} country
 */
Address42.prototype['country'] = undefined;

/**
 * State or province of the sender. If the payment_transfer.sender.address.country is USA or CAN, the country subdivision is required. Details- Conditional, Alpha, 2-3
 * @member {String} country_subdivision
 */
Address42.prototype['country_subdivision'] = undefined;

/**
 * First line of the address of the sender. Details- 1-50
 * @member {String} line1
 */
Address42.prototype['line1'] = undefined;

/**
 * Second line of the address of the sender. Details- 1-50
 * @member {String} line2
 */
Address42.prototype['line2'] = undefined;

/**
 * Postal code of the sender. Format in 5 digits or 5 digits hyphen 4 digits.  Details numeric length: 5 or 5-4
 * @member {String} postal_code
 */
Address42.prototype['postal_code'] = undefined;






export default Address42;

