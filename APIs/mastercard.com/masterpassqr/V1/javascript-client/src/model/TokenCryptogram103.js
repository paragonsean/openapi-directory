/**
 * Send Person to Merchant
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TokenCryptogram103 model module.
 * @module model/TokenCryptogram103
 * @version V1
 */
class TokenCryptogram103 {
    /**
     * Constructs a new <code>TokenCryptogram103</code>.
     * Token Cryptogram is a value that needs to be processed along with the token when submitting a transaction.
     * @alias module:model/TokenCryptogram103
     * @param type {String} CONTACTLESS_CHIP: When shared cryptogram in token_cryptogram.value is result of a contactless tap and chip information is read by the terminal, CONTACTLESS_MAGSTRIPE: When shared cryptogram in token_cryptogram.value is result of a contactless tap and the magstripe information is read by the terminal, DSRP_UCAF: When shared cryptogram in token_cryptogram.value is result of an in-app purchase and chip information to be passed in the UCAF field, DSRP_CHIP: When shared cryptogram in token_cryptogram.value is result of an in-app purchase leveraging EMV data. Values - CONTACTLESS_CHIP, CONTACTLESS_MAGSTRIPE, DSRP_UCAF, DSRP_CHIP.
     * @param value {String} Contains formatted chip data. Details- alphanumeric, 1-255.
     */
    constructor(type, value) { 
        
        TokenCryptogram103.initialize(this, type, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, value) { 
        obj['type'] = type;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>TokenCryptogram103</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TokenCryptogram103} obj Optional instance to populate.
     * @return {module:model/TokenCryptogram103} The populated <code>TokenCryptogram103</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TokenCryptogram103();

            if (data.hasOwnProperty('pan_sequence_number')) {
                obj['pan_sequence_number'] = ApiClient.convertToType(data['pan_sequence_number'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TokenCryptogram103</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TokenCryptogram103</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TokenCryptogram103.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['pan_sequence_number'] && !(typeof data['pan_sequence_number'] === 'string' || data['pan_sequence_number'] instanceof String)) {
            throw new Error("Expected the field `pan_sequence_number` to be a primitive type in the JSON string but got " + data['pan_sequence_number']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

TokenCryptogram103.RequiredProperties = ["type", "value"];

/**
 * PAN Sequence Number distinguishes among separate cards having the same PAN. Processors  with chip-reading capability may pass this information for Contactless Chip and Contactless Magstripe transactions. When the token_cryptogram.type contains one the following types CONTACTLESS_CHIP, CONTACTLESS_MAGSTRIPE, DSRP_CHIP, then the pan_sequence_number may be present. Details- Numeric[0-9], Length: 3
 * @member {String} pan_sequence_number
 */
TokenCryptogram103.prototype['pan_sequence_number'] = undefined;

/**
 * CONTACTLESS_CHIP: When shared cryptogram in token_cryptogram.value is result of a contactless tap and chip information is read by the terminal, CONTACTLESS_MAGSTRIPE: When shared cryptogram in token_cryptogram.value is result of a contactless tap and the magstripe information is read by the terminal, DSRP_UCAF: When shared cryptogram in token_cryptogram.value is result of an in-app purchase and chip information to be passed in the UCAF field, DSRP_CHIP: When shared cryptogram in token_cryptogram.value is result of an in-app purchase leveraging EMV data. Values - CONTACTLESS_CHIP, CONTACTLESS_MAGSTRIPE, DSRP_UCAF, DSRP_CHIP.
 * @member {String} type
 */
TokenCryptogram103.prototype['type'] = undefined;

/**
 * Contains formatted chip data. Details- alphanumeric, 1-255.
 * @member {String} value
 */
TokenCryptogram103.prototype['value'] = undefined;






export default TokenCryptogram103;

