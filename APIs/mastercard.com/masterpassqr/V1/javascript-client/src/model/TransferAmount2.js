/**
 * Send Person to Merchant
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TransferAmount2 model module.
 * @module model/TransferAmount2
 * @version V1
 */
class TransferAmount2 {
    /**
     * Constructs a new <code>TransferAmount2</code>.
     * Information about the transfer amount.
     * @alias module:model/TransferAmount2
     * @param currency {String} Currency of the transfer amount as an ISO alpha currency code.   Type: Alpha [A-Z], Length: 3
     * @param value {String} Amount of the transfer in the smallest unit of currency. Decimal implied based on the exponent for the currency.   Example: 100 = $1.00 USD.   Type: Numeric [0-9], Length: 1-12
     */
    constructor(currency, value) { 
        
        TransferAmount2.initialize(this, currency, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currency, value) { 
        obj['currency'] = currency;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>TransferAmount2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransferAmount2} obj Optional instance to populate.
     * @return {module:model/TransferAmount2} The populated <code>TransferAmount2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransferAmount2();

            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransferAmount2</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransferAmount2</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransferAmount2.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

TransferAmount2.RequiredProperties = ["currency", "value"];

/**
 * Currency of the transfer amount as an ISO alpha currency code.   Type: Alpha [A-Z], Length: 3
 * @member {String} currency
 */
TransferAmount2.prototype['currency'] = undefined;

/**
 * Amount of the transfer in the smallest unit of currency. Decimal implied based on the exponent for the currency.   Example: 100 = $1.00 USD.   Type: Numeric [0-9], Length: 1-12
 * @member {String} value
 */
TransferAmount2.prototype['value'] = undefined;






export default TransferAmount2;

