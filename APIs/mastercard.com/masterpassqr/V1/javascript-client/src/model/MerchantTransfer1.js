/**
 * Send Person to Merchant
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Participant13 from './Participant13';
import Recipient7 from './Recipient7';
import ReconciliationData11 from './ReconciliationData11';
import Sender3 from './Sender3';
import TransferAmount2 from './TransferAmount2';

/**
 * The MerchantTransfer1 model module.
 * @module model/MerchantTransfer1
 * @version V1
 */
class MerchantTransfer1 {
    /**
     * Constructs a new <code>MerchantTransfer1</code>.
     * Contains the details of the request message.
     * @alias module:model/MerchantTransfer1
     * @param participant {module:model/Participant13} 
     * @param paymentType {String} Payment type used for transfer. Value - P2M: Person to Merchant.   Type: Alphanumeric [A-Z0-9], Length: 3
     * @param recipient {module:model/Recipient7} 
     * @param recipientAccountUri {String} URI to identify the account of the recipient/merchant. Pan, Manual Entry Alias and Alias are valid schemas. Refer 'Account URIs'
     * @param sender {module:model/Sender3} 
     * @param senderAccountUri {String} URI to identify the account information of the sender. Only PAN is the valid scheme. Refer 'Account URIs'
     * @param transactionLocalDateTime {String} Local date and time when the transaction is submitted as an ISO 8601 format.   Type: Alphanumerical Special [A-Z 0-9-:], Length: 25
     * @param transferAmount {module:model/TransferAmount2} 
     * @param transferReference {String} Provide a unique transaction reference number. It must be a unique value for each request initiated by the partner.   Type: Alphanumeric Special [a-zA-Z0-9 * , - . _ ~], Length: 6-40
     */
    constructor(participant, paymentType, recipient, recipientAccountUri, sender, senderAccountUri, transactionLocalDateTime, transferAmount, transferReference) { 
        
        MerchantTransfer1.initialize(this, participant, paymentType, recipient, recipientAccountUri, sender, senderAccountUri, transactionLocalDateTime, transferAmount, transferReference);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, participant, paymentType, recipient, recipientAccountUri, sender, senderAccountUri, transactionLocalDateTime, transferAmount, transferReference) { 
        obj['participant'] = participant;
        obj['payment_type'] = paymentType;
        obj['recipient'] = recipient;
        obj['recipient_account_uri'] = recipientAccountUri;
        obj['sender'] = sender;
        obj['sender_account_uri'] = senderAccountUri;
        obj['transaction_local_date_time'] = transactionLocalDateTime;
        obj['transfer_amount'] = transferAmount;
        obj['transfer_reference'] = transferReference;
    }

    /**
     * Constructs a <code>MerchantTransfer1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MerchantTransfer1} obj Optional instance to populate.
     * @return {module:model/MerchantTransfer1} The populated <code>MerchantTransfer1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MerchantTransfer1();

            if (data.hasOwnProperty('additional_message')) {
                obj['additional_message'] = ApiClient.convertToType(data['additional_message'], 'String');
            }
            if (data.hasOwnProperty('convenience_amount')) {
                obj['convenience_amount'] = ApiClient.convertToType(data['convenience_amount'], 'String');
            }
            if (data.hasOwnProperty('convenience_indicator')) {
                obj['convenience_indicator'] = ApiClient.convertToType(data['convenience_indicator'], 'String');
            }
            if (data.hasOwnProperty('digital_account_reference_number')) {
                obj['digital_account_reference_number'] = ApiClient.convertToType(data['digital_account_reference_number'], 'String');
            }
            if (data.hasOwnProperty('interchange_rate_designator')) {
                obj['interchange_rate_designator'] = ApiClient.convertToType(data['interchange_rate_designator'], 'String');
            }
            if (data.hasOwnProperty('mastercard_assigned_id')) {
                obj['mastercard_assigned_id'] = ApiClient.convertToType(data['mastercard_assigned_id'], 'String');
            }
            if (data.hasOwnProperty('participant')) {
                obj['participant'] = Participant13.constructFromObject(data['participant']);
            }
            if (data.hasOwnProperty('participation_id')) {
                obj['participation_id'] = ApiClient.convertToType(data['participation_id'], 'String');
            }
            if (data.hasOwnProperty('payment_origination_country')) {
                obj['payment_origination_country'] = ApiClient.convertToType(data['payment_origination_country'], 'String');
            }
            if (data.hasOwnProperty('payment_type')) {
                obj['payment_type'] = ApiClient.convertToType(data['payment_type'], 'String');
            }
            if (data.hasOwnProperty('processor_id')) {
                obj['processor_id'] = ApiClient.convertToType(data['processor_id'], 'String');
            }
            if (data.hasOwnProperty('qr_data')) {
                obj['qr_data'] = ApiClient.convertToType(data['qr_data'], 'String');
            }
            if (data.hasOwnProperty('recipient')) {
                obj['recipient'] = Recipient7.constructFromObject(data['recipient']);
            }
            if (data.hasOwnProperty('recipient_account_uri')) {
                obj['recipient_account_uri'] = ApiClient.convertToType(data['recipient_account_uri'], 'String');
            }
            if (data.hasOwnProperty('reconciliation_data')) {
                obj['reconciliation_data'] = ReconciliationData11.constructFromObject(data['reconciliation_data']);
            }
            if (data.hasOwnProperty('routing_transit_number')) {
                obj['routing_transit_number'] = ApiClient.convertToType(data['routing_transit_number'], 'String');
            }
            if (data.hasOwnProperty('sender')) {
                obj['sender'] = Sender3.constructFromObject(data['sender']);
            }
            if (data.hasOwnProperty('sender_account_uri')) {
                obj['sender_account_uri'] = ApiClient.convertToType(data['sender_account_uri'], 'String');
            }
            if (data.hasOwnProperty('transaction_local_date_time')) {
                obj['transaction_local_date_time'] = ApiClient.convertToType(data['transaction_local_date_time'], 'String');
            }
            if (data.hasOwnProperty('transfer_amount')) {
                obj['transfer_amount'] = TransferAmount2.constructFromObject(data['transfer_amount']);
            }
            if (data.hasOwnProperty('transfer_reference')) {
                obj['transfer_reference'] = ApiClient.convertToType(data['transfer_reference'], 'String');
            }
            if (data.hasOwnProperty('unique_reference_number')) {
                obj['unique_reference_number'] = ApiClient.convertToType(data['unique_reference_number'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MerchantTransfer1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MerchantTransfer1</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MerchantTransfer1.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['additional_message'] && !(typeof data['additional_message'] === 'string' || data['additional_message'] instanceof String)) {
            throw new Error("Expected the field `additional_message` to be a primitive type in the JSON string but got " + data['additional_message']);
        }
        // ensure the json data is a string
        if (data['convenience_amount'] && !(typeof data['convenience_amount'] === 'string' || data['convenience_amount'] instanceof String)) {
            throw new Error("Expected the field `convenience_amount` to be a primitive type in the JSON string but got " + data['convenience_amount']);
        }
        // ensure the json data is a string
        if (data['convenience_indicator'] && !(typeof data['convenience_indicator'] === 'string' || data['convenience_indicator'] instanceof String)) {
            throw new Error("Expected the field `convenience_indicator` to be a primitive type in the JSON string but got " + data['convenience_indicator']);
        }
        // ensure the json data is a string
        if (data['digital_account_reference_number'] && !(typeof data['digital_account_reference_number'] === 'string' || data['digital_account_reference_number'] instanceof String)) {
            throw new Error("Expected the field `digital_account_reference_number` to be a primitive type in the JSON string but got " + data['digital_account_reference_number']);
        }
        // ensure the json data is a string
        if (data['interchange_rate_designator'] && !(typeof data['interchange_rate_designator'] === 'string' || data['interchange_rate_designator'] instanceof String)) {
            throw new Error("Expected the field `interchange_rate_designator` to be a primitive type in the JSON string but got " + data['interchange_rate_designator']);
        }
        // ensure the json data is a string
        if (data['mastercard_assigned_id'] && !(typeof data['mastercard_assigned_id'] === 'string' || data['mastercard_assigned_id'] instanceof String)) {
            throw new Error("Expected the field `mastercard_assigned_id` to be a primitive type in the JSON string but got " + data['mastercard_assigned_id']);
        }
        // validate the optional field `participant`
        if (data['participant']) { // data not null
          Participant13.validateJSON(data['participant']);
        }
        // ensure the json data is a string
        if (data['participation_id'] && !(typeof data['participation_id'] === 'string' || data['participation_id'] instanceof String)) {
            throw new Error("Expected the field `participation_id` to be a primitive type in the JSON string but got " + data['participation_id']);
        }
        // ensure the json data is a string
        if (data['payment_origination_country'] && !(typeof data['payment_origination_country'] === 'string' || data['payment_origination_country'] instanceof String)) {
            throw new Error("Expected the field `payment_origination_country` to be a primitive type in the JSON string but got " + data['payment_origination_country']);
        }
        // ensure the json data is a string
        if (data['payment_type'] && !(typeof data['payment_type'] === 'string' || data['payment_type'] instanceof String)) {
            throw new Error("Expected the field `payment_type` to be a primitive type in the JSON string but got " + data['payment_type']);
        }
        // ensure the json data is a string
        if (data['processor_id'] && !(typeof data['processor_id'] === 'string' || data['processor_id'] instanceof String)) {
            throw new Error("Expected the field `processor_id` to be a primitive type in the JSON string but got " + data['processor_id']);
        }
        // ensure the json data is a string
        if (data['qr_data'] && !(typeof data['qr_data'] === 'string' || data['qr_data'] instanceof String)) {
            throw new Error("Expected the field `qr_data` to be a primitive type in the JSON string but got " + data['qr_data']);
        }
        // validate the optional field `recipient`
        if (data['recipient']) { // data not null
          Recipient7.validateJSON(data['recipient']);
        }
        // ensure the json data is a string
        if (data['recipient_account_uri'] && !(typeof data['recipient_account_uri'] === 'string' || data['recipient_account_uri'] instanceof String)) {
            throw new Error("Expected the field `recipient_account_uri` to be a primitive type in the JSON string but got " + data['recipient_account_uri']);
        }
        // validate the optional field `reconciliation_data`
        if (data['reconciliation_data']) { // data not null
          ReconciliationData11.validateJSON(data['reconciliation_data']);
        }
        // ensure the json data is a string
        if (data['routing_transit_number'] && !(typeof data['routing_transit_number'] === 'string' || data['routing_transit_number'] instanceof String)) {
            throw new Error("Expected the field `routing_transit_number` to be a primitive type in the JSON string but got " + data['routing_transit_number']);
        }
        // validate the optional field `sender`
        if (data['sender']) { // data not null
          Sender3.validateJSON(data['sender']);
        }
        // ensure the json data is a string
        if (data['sender_account_uri'] && !(typeof data['sender_account_uri'] === 'string' || data['sender_account_uri'] instanceof String)) {
            throw new Error("Expected the field `sender_account_uri` to be a primitive type in the JSON string but got " + data['sender_account_uri']);
        }
        // ensure the json data is a string
        if (data['transaction_local_date_time'] && !(typeof data['transaction_local_date_time'] === 'string' || data['transaction_local_date_time'] instanceof String)) {
            throw new Error("Expected the field `transaction_local_date_time` to be a primitive type in the JSON string but got " + data['transaction_local_date_time']);
        }
        // validate the optional field `transfer_amount`
        if (data['transfer_amount']) { // data not null
          TransferAmount2.validateJSON(data['transfer_amount']);
        }
        // ensure the json data is a string
        if (data['transfer_reference'] && !(typeof data['transfer_reference'] === 'string' || data['transfer_reference'] instanceof String)) {
            throw new Error("Expected the field `transfer_reference` to be a primitive type in the JSON string but got " + data['transfer_reference']);
        }
        // ensure the json data is a string
        if (data['unique_reference_number'] && !(typeof data['unique_reference_number'] === 'string' || data['unique_reference_number'] instanceof String)) {
            throw new Error("Expected the field `unique_reference_number` to be a primitive type in the JSON string but got " + data['unique_reference_number']);
        }

        return true;
    }


}

MerchantTransfer1.RequiredProperties = ["participant", "payment_type", "recipient", "recipient_account_uri", "sender", "sender_account_uri", "transaction_local_date_time", "transfer_amount", "transfer_reference"];

/**
 * Message a financial institution will associate to the transfer and may display. \\n\\nType: Alphanumeric Special [a-zA-Z0-9!\\\"#$%&'()*+,-./\\\\:;<=>?@[]_`{|}~], Length: 1-65
 * @member {String} additional_message
 */
MerchantTransfer1.prototype['additional_message'] = undefined;

/**
 * Amount of the convenience fee. The decimal point is implied based on the transaction_amount.currency. \"[0-9]*\". Max Length: 12. Value must be less than payment_transfer.amount.
 * @member {String} convenience_amount
 */
MerchantTransfer1.prototype['convenience_amount'] = undefined;

/**
 * Convenience fee type code. Min length: 2. Max Length: 2. Valid values  (01: Indicates Consumer should be prompted to enter tip 02: Indicates that merchant would mandatorily charge a flat convenience fee 03: Indicates that merchant would charge a percentage convenience fee)
 * @member {String} convenience_indicator
 */
MerchantTransfer1.prototype['convenience_indicator'] = undefined;

/**
 * URI to identify the digital account reference number. URI scheme must be pan. Valid Values- Refer 'Account URIs'. 
 * @member {String} digital_account_reference_number
 */
MerchantTransfer1.prototype['digital_account_reference_number'] = undefined;

/**
 * Indicates the interchange rate and editing rules applied to the transaction. Field is applicable for Europe OIs only.  Type:Alphanumeric [a-zA-Z 0-9], Length: 2
 * @member {String} interchange_rate_designator
 */
MerchantTransfer1.prototype['interchange_rate_designator'] = undefined;

/**
 * Mastercard Assigned ID for tiered interchange calculations.   Type: Numeric [0-9], Length: 6
 * @member {String} mastercard_assigned_id
 */
MerchantTransfer1.prototype['mastercard_assigned_id'] = undefined;

/**
 * @member {module:model/Participant13} participant
 */
MerchantTransfer1.prototype['participant'] = undefined;

/**
 * Participation identifier of the sender. The receiving financial institution will associate the value to the transfer. \\n\\nType: Alphanumeric Special [a-zA-Z0-9!\\\"#$%&'()*+,-./\\\\:;<=>?@[]_`{|}~], Length: 1-30
 * @member {String} participation_id
 */
MerchantTransfer1.prototype['participation_id'] = undefined;

/**
 * Country where the payment originated from as an ISO 3166-1 alpha-3 country code.   Type: Alpha [A-Z], Length: 3
 * @member {String} payment_origination_country
 */
MerchantTransfer1.prototype['payment_origination_country'] = undefined;

/**
 * Payment type used for transfer. Value - P2M: Person to Merchant.   Type: Alphanumeric [A-Z0-9], Length: 3
 * @member {String} payment_type
 */
MerchantTransfer1.prototype['payment_type'] = undefined;

/**
 * The processor ID is a ten-digit number of the form: 9000xxxxxx, where the Single Message System-assigned processor ID will be up to the last six digits xxxxxx. Partner must provide this value only if the program they are enabling requires it. For all other implementations this value must not be provided.   Type: Numeric [0-9], Length: 10
 * @member {String} processor_id
 */
MerchantTransfer1.prototype['processor_id'] = undefined;

/**
 * Encoded QR (Quick Response) code data. Type: Alphanumeric and special characters [a-zA-Z0-9!\"#$%&'()*+,-./\\:;<=>?@[]_`{|}~], Maximum Length: 237
 * @member {String} qr_data
 */
MerchantTransfer1.prototype['qr_data'] = undefined;

/**
 * @member {module:model/Recipient7} recipient
 */
MerchantTransfer1.prototype['recipient'] = undefined;

/**
 * URI to identify the account of the recipient/merchant. Pan, Manual Entry Alias and Alias are valid schemas. Refer 'Account URIs'
 * @member {String} recipient_account_uri
 */
MerchantTransfer1.prototype['recipient_account_uri'] = undefined;

/**
 * @member {module:model/ReconciliationData11} reconciliation_data
 */
MerchantTransfer1.prototype['reconciliation_data'] = undefined;

/**
 * The nine-digit Federal Reserve Routing and Transit (R & T) number of the acquiring institution or the nine-digit pseudo-number assigned to the acquiring institution by Mastercard. Partner must provide this value only if the program they are enabling requires it. For all other implementations this value must not be provided.    Type: Numeric [0-9], Length: 9
 * @member {String} routing_transit_number
 */
MerchantTransfer1.prototype['routing_transit_number'] = undefined;

/**
 * @member {module:model/Sender3} sender
 */
MerchantTransfer1.prototype['sender'] = undefined;

/**
 * URI to identify the account information of the sender. Only PAN is the valid scheme. Refer 'Account URIs'
 * @member {String} sender_account_uri
 */
MerchantTransfer1.prototype['sender_account_uri'] = undefined;

/**
 * Local date and time when the transaction is submitted as an ISO 8601 format.   Type: Alphanumerical Special [A-Z 0-9-:], Length: 25
 * @member {String} transaction_local_date_time
 */
MerchantTransfer1.prototype['transaction_local_date_time'] = undefined;

/**
 * @member {module:model/TransferAmount2} transfer_amount
 */
MerchantTransfer1.prototype['transfer_amount'] = undefined;

/**
 * Provide a unique transaction reference number. It must be a unique value for each request initiated by the partner.   Type: Alphanumeric Special [a-zA-Z0-9 * , - . _ ~], Length: 6-40
 * @member {String} transfer_reference
 */
MerchantTransfer1.prototype['transfer_reference'] = undefined;

/**
 * Unique reference number for the transaction.    Type: Alphanumeric [a-zA-Z 0-9], Maximum Length: 19
 * @member {String} unique_reference_number
 */
MerchantTransfer1.prototype['unique_reference_number'] = undefined;






export default MerchantTransfer1;

