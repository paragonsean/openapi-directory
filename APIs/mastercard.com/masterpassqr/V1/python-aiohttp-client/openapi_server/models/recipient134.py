# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address135 import Address135
from openapi_server.models.government_ids136 import GovernmentIds136
from openapi_server import util


class Recipient134(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address135=None, date_of_birth: str=None, email: str=None, first_name: str=None, government_ids: GovernmentIds136=None, last_name: str=None, merchant_category_code: str=None, middle_name: str=None, nationality: str=None, phone: str=None, sanction_score: str=None):
        """Recipient134 - a model defined in OpenAPI

        :param address: The address of this Recipient134.
        :param date_of_birth: The date_of_birth of this Recipient134.
        :param email: The email of this Recipient134.
        :param first_name: The first_name of this Recipient134.
        :param government_ids: The government_ids of this Recipient134.
        :param last_name: The last_name of this Recipient134.
        :param merchant_category_code: The merchant_category_code of this Recipient134.
        :param middle_name: The middle_name of this Recipient134.
        :param nationality: The nationality of this Recipient134.
        :param phone: The phone of this Recipient134.
        :param sanction_score: The sanction_score of this Recipient134.
        """
        self.openapi_types = {
            'address': Address135,
            'date_of_birth': str,
            'email': str,
            'first_name': str,
            'government_ids': GovernmentIds136,
            'last_name': str,
            'merchant_category_code': str,
            'middle_name': str,
            'nationality': str,
            'phone': str,
            'sanction_score': str
        }

        self.attribute_map = {
            'address': 'address',
            'date_of_birth': 'date_of_birth',
            'email': 'email',
            'first_name': 'first_name',
            'government_ids': 'government_ids',
            'last_name': 'last_name',
            'merchant_category_code': 'merchant_category_code',
            'middle_name': 'middle_name',
            'nationality': 'nationality',
            'phone': 'phone',
            'sanction_score': 'sanction_score'
        }

        self._address = address
        self._date_of_birth = date_of_birth
        self._email = email
        self._first_name = first_name
        self._government_ids = government_ids
        self._last_name = last_name
        self._merchant_category_code = merchant_category_code
        self._middle_name = middle_name
        self._nationality = nationality
        self._phone = phone
        self._sanction_score = sanction_score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Recipient134':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Recipient_134 of this Recipient134.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Recipient134.


        :return: The address of this Recipient134.
        :rtype: Address135
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Recipient134.


        :param address: The address of this Recipient134.
        :type address: Address135
        """

        self._address = address

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this Recipient134.

        Date of birth of the recipient as an ISO 8601 Full Date. Valid Values- Refer 'Date And Time Formats'

        :return: The date_of_birth of this Recipient134.
        :rtype: str
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this Recipient134.

        Date of birth of the recipient as an ISO 8601 Full Date. Valid Values- Refer 'Date And Time Formats'

        :param date_of_birth: The date_of_birth of this Recipient134.
        :type date_of_birth: str
        """

        self._date_of_birth = date_of_birth

    @property
    def email(self):
        """Gets the email of this Recipient134.

        Email address of the recipient.

        :return: The email of this Recipient134.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Recipient134.

        Email address of the recipient.

        :param email: The email of this Recipient134.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this Recipient134.

        Recipient’s first name.

        :return: The first_name of this Recipient134.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Recipient134.

        Recipient’s first name.

        :param first_name: The first_name of this Recipient134.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def government_ids(self):
        """Gets the government_ids of this Recipient134.


        :return: The government_ids of this Recipient134.
        :rtype: GovernmentIds136
        """
        return self._government_ids

    @government_ids.setter
    def government_ids(self, government_ids):
        """Sets the government_ids of this Recipient134.


        :param government_ids: The government_ids of this Recipient134.
        :type government_ids: GovernmentIds136
        """

        self._government_ids = government_ids

    @property
    def last_name(self):
        """Gets the last_name of this Recipient134.

        Recipient’s last name.

        :return: The last_name of this Recipient134.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Recipient134.

        Recipient’s last name.

        :param last_name: The last_name of this Recipient134.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def merchant_category_code(self):
        """Gets the merchant_category_code of this Recipient134.

        Mastercard defined merchant category code. This identifies the type of business of the recipient/merchant. \\n\\nType: Numeric [0-9], Maximum Length: 4

        :return: The merchant_category_code of this Recipient134.
        :rtype: str
        """
        return self._merchant_category_code

    @merchant_category_code.setter
    def merchant_category_code(self, merchant_category_code):
        """Sets the merchant_category_code of this Recipient134.

        Mastercard defined merchant category code. This identifies the type of business of the recipient/merchant. \\n\\nType: Numeric [0-9], Maximum Length: 4

        :param merchant_category_code: The merchant_category_code of this Recipient134.
        :type merchant_category_code: str
        """

        self._merchant_category_code = merchant_category_code

    @property
    def middle_name(self):
        """Gets the middle_name of this Recipient134.

        Recipient middle_name. Details- alpha, 40

        :return: The middle_name of this Recipient134.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this Recipient134.

        Recipient middle_name. Details- alpha, 40

        :param middle_name: The middle_name of this Recipient134.
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def nationality(self):
        """Gets the nationality of this Recipient134.

        The recipient home country as an ISO 3166-1 alpha-3 country code.

        :return: The nationality of this Recipient134.
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this Recipient134.

        The recipient home country as an ISO 3166-1 alpha-3 country code.

        :param nationality: The nationality of this Recipient134.
        :type nationality: str
        """

        self._nationality = nationality

    @property
    def phone(self):
        """Gets the phone of this Recipient134.

        Phone number of the recipient.

        :return: The phone of this Recipient134.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Recipient134.

        Phone number of the recipient.

        :param phone: The phone of this Recipient134.
        :type phone: str
        """

        self._phone = phone

    @property
    def sanction_score(self):
        """Gets the sanction_score of this Recipient134.

        A value ranging from 0 to 100. A higher score indicates a closer match to names on the applicable screening list, while lower scores indicate a less likely match.  Available in response when partner is enabled for Sanction Screening validation and sanction_screening_override value is “false”.

        :return: The sanction_score of this Recipient134.
        :rtype: str
        """
        return self._sanction_score

    @sanction_score.setter
    def sanction_score(self, sanction_score):
        """Sets the sanction_score of this Recipient134.

        A value ranging from 0 to 100. A higher score indicates a closer match to names on the applicable screening list, while lower scores indicate a less likely match.  Available in response when partner is enabled for Sanction Screening validation and sanction_screening_override value is “false”.

        :param sanction_score: The sanction_score of this Recipient134.
        :type sanction_score: str
        """

        self._sanction_score = sanction_score
