# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.additional_merchant_data121 import AdditionalMerchantData121
from openapi_server.models.address120 import Address120
from openapi_server.models.government_ids122 import GovernmentIds122
from openapi_server import util


class Sender119(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_merchant_data: AdditionalMerchantData121=None, address: Address120=None, date_of_birth: str=None, email: str=None, first_name: str=None, government_ids: GovernmentIds122=None, last_name: str=None, middle_name: str=None, nationality: str=None, phone: str=None):
        """Sender119 - a model defined in OpenAPI

        :param additional_merchant_data: The additional_merchant_data of this Sender119.
        :param address: The address of this Sender119.
        :param date_of_birth: The date_of_birth of this Sender119.
        :param email: The email of this Sender119.
        :param first_name: The first_name of this Sender119.
        :param government_ids: The government_ids of this Sender119.
        :param last_name: The last_name of this Sender119.
        :param middle_name: The middle_name of this Sender119.
        :param nationality: The nationality of this Sender119.
        :param phone: The phone of this Sender119.
        """
        self.openapi_types = {
            'additional_merchant_data': AdditionalMerchantData121,
            'address': Address120,
            'date_of_birth': str,
            'email': str,
            'first_name': str,
            'government_ids': GovernmentIds122,
            'last_name': str,
            'middle_name': str,
            'nationality': str,
            'phone': str
        }

        self.attribute_map = {
            'additional_merchant_data': 'additional_merchant_data',
            'address': 'address',
            'date_of_birth': 'date_of_birth',
            'email': 'email',
            'first_name': 'first_name',
            'government_ids': 'government_ids',
            'last_name': 'last_name',
            'middle_name': 'middle_name',
            'nationality': 'nationality',
            'phone': 'phone'
        }

        self._additional_merchant_data = additional_merchant_data
        self._address = address
        self._date_of_birth = date_of_birth
        self._email = email
        self._first_name = first_name
        self._government_ids = government_ids
        self._last_name = last_name
        self._middle_name = middle_name
        self._nationality = nationality
        self._phone = phone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sender119':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sender_119 of this Sender119.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_merchant_data(self):
        """Gets the additional_merchant_data of this Sender119.


        :return: The additional_merchant_data of this Sender119.
        :rtype: AdditionalMerchantData121
        """
        return self._additional_merchant_data

    @additional_merchant_data.setter
    def additional_merchant_data(self, additional_merchant_data):
        """Sets the additional_merchant_data of this Sender119.


        :param additional_merchant_data: The additional_merchant_data of this Sender119.
        :type additional_merchant_data: AdditionalMerchantData121
        """

        self._additional_merchant_data = additional_merchant_data

    @property
    def address(self):
        """Gets the address of this Sender119.


        :return: The address of this Sender119.
        :rtype: Address120
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Sender119.


        :param address: The address of this Sender119.
        :type address: Address120
        """

        self._address = address

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this Sender119.

        The consumer's date of birth as an ISO 8601 Full Date. Valid Values- Refer 'Date And Time Formats'

        :return: The date_of_birth of this Sender119.
        :rtype: str
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this Sender119.

        The consumer's date of birth as an ISO 8601 Full Date. Valid Values- Refer 'Date And Time Formats'

        :param date_of_birth: The date_of_birth of this Sender119.
        :type date_of_birth: str
        """

        self._date_of_birth = date_of_birth

    @property
    def email(self):
        """Gets the email of this Sender119.

        Sender's email address. Phone number or Email should be provided if the partner is set up to receive notifications. Details- Conditional

        :return: The email of this Sender119.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Sender119.

        Sender's email address. Phone number or Email should be provided if the partner is set up to receive notifications. Details- Conditional

        :param email: The email of this Sender119.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this Sender119.

        Sender’s first name. Details- alpha, 1-40

        :return: The first_name of this Sender119.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Sender119.

        Sender’s first name. Details- alpha, 1-40

        :param first_name: The first_name of this Sender119.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def government_ids(self):
        """Gets the government_ids of this Sender119.


        :return: The government_ids of this Sender119.
        :rtype: GovernmentIds122
        """
        return self._government_ids

    @government_ids.setter
    def government_ids(self, government_ids):
        """Sets the government_ids of this Sender119.


        :param government_ids: The government_ids of this Sender119.
        :type government_ids: GovernmentIds122
        """

        self._government_ids = government_ids

    @property
    def last_name(self):
        """Gets the last_name of this Sender119.

        Sender’s last name. Details- alpha, 1-40

        :return: The last_name of this Sender119.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Sender119.

        Sender’s last name. Details- alpha, 1-40

        :param last_name: The last_name of this Sender119.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def middle_name(self):
        """Gets the middle_name of this Sender119.

        Middle name of the sender. Details- alpha, 40

        :return: The middle_name of this Sender119.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this Sender119.

        Middle name of the sender. Details- alpha, 40

        :param middle_name: The middle_name of this Sender119.
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def nationality(self):
        """Gets the nationality of this Sender119.

        The senders home country as an ISO 3166-1 alpha-3 country code, In uppercase. Details- alpha, 3

        :return: The nationality of this Sender119.
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this Sender119.

        The senders home country as an ISO 3166-1 alpha-3 country code, In uppercase. Details- alpha, 3

        :param nationality: The nationality of this Sender119.
        :type nationality: str
        """

        self._nationality = nationality

    @property
    def phone(self):
        """Gets the phone of this Sender119.

        Sender's phone number, including country code. Phone number or Email should be provided if the partner is set up to receive notifications. Details- Conditional, 1-15

        :return: The phone of this Sender119.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Sender119.

        Sender's phone number, including country code. Phone number or Email should be provided if the partner is set up to receive notifications. Details- Conditional, 1-15

        :param phone: The phone of this Sender119.
        :type phone: str
        """

        self._phone = phone
