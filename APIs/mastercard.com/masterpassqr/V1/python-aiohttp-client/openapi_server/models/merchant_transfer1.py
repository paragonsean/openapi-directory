# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.participant13 import Participant13
from openapi_server.models.recipient7 import Recipient7
from openapi_server.models.reconciliation_data11 import ReconciliationData11
from openapi_server.models.sender3 import Sender3
from openapi_server.models.transfer_amount2 import TransferAmount2
from openapi_server import util


class MerchantTransfer1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_message: str=None, convenience_amount: str=None, convenience_indicator: str=None, digital_account_reference_number: str=None, interchange_rate_designator: str=None, mastercard_assigned_id: str=None, participant: Participant13=None, participation_id: str=None, payment_origination_country: str=None, payment_type: str=None, processor_id: str=None, qr_data: str=None, recipient: Recipient7=None, recipient_account_uri: str=None, reconciliation_data: ReconciliationData11=None, routing_transit_number: str=None, sender: Sender3=None, sender_account_uri: str=None, transaction_local_date_time: str=None, transfer_amount: TransferAmount2=None, transfer_reference: str=None, unique_reference_number: str=None):
        """MerchantTransfer1 - a model defined in OpenAPI

        :param additional_message: The additional_message of this MerchantTransfer1.
        :param convenience_amount: The convenience_amount of this MerchantTransfer1.
        :param convenience_indicator: The convenience_indicator of this MerchantTransfer1.
        :param digital_account_reference_number: The digital_account_reference_number of this MerchantTransfer1.
        :param interchange_rate_designator: The interchange_rate_designator of this MerchantTransfer1.
        :param mastercard_assigned_id: The mastercard_assigned_id of this MerchantTransfer1.
        :param participant: The participant of this MerchantTransfer1.
        :param participation_id: The participation_id of this MerchantTransfer1.
        :param payment_origination_country: The payment_origination_country of this MerchantTransfer1.
        :param payment_type: The payment_type of this MerchantTransfer1.
        :param processor_id: The processor_id of this MerchantTransfer1.
        :param qr_data: The qr_data of this MerchantTransfer1.
        :param recipient: The recipient of this MerchantTransfer1.
        :param recipient_account_uri: The recipient_account_uri of this MerchantTransfer1.
        :param reconciliation_data: The reconciliation_data of this MerchantTransfer1.
        :param routing_transit_number: The routing_transit_number of this MerchantTransfer1.
        :param sender: The sender of this MerchantTransfer1.
        :param sender_account_uri: The sender_account_uri of this MerchantTransfer1.
        :param transaction_local_date_time: The transaction_local_date_time of this MerchantTransfer1.
        :param transfer_amount: The transfer_amount of this MerchantTransfer1.
        :param transfer_reference: The transfer_reference of this MerchantTransfer1.
        :param unique_reference_number: The unique_reference_number of this MerchantTransfer1.
        """
        self.openapi_types = {
            'additional_message': str,
            'convenience_amount': str,
            'convenience_indicator': str,
            'digital_account_reference_number': str,
            'interchange_rate_designator': str,
            'mastercard_assigned_id': str,
            'participant': Participant13,
            'participation_id': str,
            'payment_origination_country': str,
            'payment_type': str,
            'processor_id': str,
            'qr_data': str,
            'recipient': Recipient7,
            'recipient_account_uri': str,
            'reconciliation_data': ReconciliationData11,
            'routing_transit_number': str,
            'sender': Sender3,
            'sender_account_uri': str,
            'transaction_local_date_time': str,
            'transfer_amount': TransferAmount2,
            'transfer_reference': str,
            'unique_reference_number': str
        }

        self.attribute_map = {
            'additional_message': 'additional_message',
            'convenience_amount': 'convenience_amount',
            'convenience_indicator': 'convenience_indicator',
            'digital_account_reference_number': 'digital_account_reference_number',
            'interchange_rate_designator': 'interchange_rate_designator',
            'mastercard_assigned_id': 'mastercard_assigned_id',
            'participant': 'participant',
            'participation_id': 'participation_id',
            'payment_origination_country': 'payment_origination_country',
            'payment_type': 'payment_type',
            'processor_id': 'processor_id',
            'qr_data': 'qr_data',
            'recipient': 'recipient',
            'recipient_account_uri': 'recipient_account_uri',
            'reconciliation_data': 'reconciliation_data',
            'routing_transit_number': 'routing_transit_number',
            'sender': 'sender',
            'sender_account_uri': 'sender_account_uri',
            'transaction_local_date_time': 'transaction_local_date_time',
            'transfer_amount': 'transfer_amount',
            'transfer_reference': 'transfer_reference',
            'unique_reference_number': 'unique_reference_number'
        }

        self._additional_message = additional_message
        self._convenience_amount = convenience_amount
        self._convenience_indicator = convenience_indicator
        self._digital_account_reference_number = digital_account_reference_number
        self._interchange_rate_designator = interchange_rate_designator
        self._mastercard_assigned_id = mastercard_assigned_id
        self._participant = participant
        self._participation_id = participation_id
        self._payment_origination_country = payment_origination_country
        self._payment_type = payment_type
        self._processor_id = processor_id
        self._qr_data = qr_data
        self._recipient = recipient
        self._recipient_account_uri = recipient_account_uri
        self._reconciliation_data = reconciliation_data
        self._routing_transit_number = routing_transit_number
        self._sender = sender
        self._sender_account_uri = sender_account_uri
        self._transaction_local_date_time = transaction_local_date_time
        self._transfer_amount = transfer_amount
        self._transfer_reference = transfer_reference
        self._unique_reference_number = unique_reference_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MerchantTransfer1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MerchantTransfer_1 of this MerchantTransfer1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_message(self):
        """Gets the additional_message of this MerchantTransfer1.

        Message a financial institution will associate to the transfer and may display. \\n\\nType: Alphanumeric Special [a-zA-Z0-9!\\\"#$%&'()*+,-./\\\\:;<=>?@[]_`{|}~], Length: 1-65

        :return: The additional_message of this MerchantTransfer1.
        :rtype: str
        """
        return self._additional_message

    @additional_message.setter
    def additional_message(self, additional_message):
        """Sets the additional_message of this MerchantTransfer1.

        Message a financial institution will associate to the transfer and may display. \\n\\nType: Alphanumeric Special [a-zA-Z0-9!\\\"#$%&'()*+,-./\\\\:;<=>?@[]_`{|}~], Length: 1-65

        :param additional_message: The additional_message of this MerchantTransfer1.
        :type additional_message: str
        """

        self._additional_message = additional_message

    @property
    def convenience_amount(self):
        """Gets the convenience_amount of this MerchantTransfer1.

        Amount of the convenience fee. The decimal point is implied based on the transaction_amount.currency. \"[0-9]*\". Max Length: 12. Value must be less than payment_transfer.amount.

        :return: The convenience_amount of this MerchantTransfer1.
        :rtype: str
        """
        return self._convenience_amount

    @convenience_amount.setter
    def convenience_amount(self, convenience_amount):
        """Sets the convenience_amount of this MerchantTransfer1.

        Amount of the convenience fee. The decimal point is implied based on the transaction_amount.currency. \"[0-9]*\". Max Length: 12. Value must be less than payment_transfer.amount.

        :param convenience_amount: The convenience_amount of this MerchantTransfer1.
        :type convenience_amount: str
        """

        self._convenience_amount = convenience_amount

    @property
    def convenience_indicator(self):
        """Gets the convenience_indicator of this MerchantTransfer1.

        Convenience fee type code. Min length: 2. Max Length: 2. Valid values  (01: Indicates Consumer should be prompted to enter tip 02: Indicates that merchant would mandatorily charge a flat convenience fee 03: Indicates that merchant would charge a percentage convenience fee)

        :return: The convenience_indicator of this MerchantTransfer1.
        :rtype: str
        """
        return self._convenience_indicator

    @convenience_indicator.setter
    def convenience_indicator(self, convenience_indicator):
        """Sets the convenience_indicator of this MerchantTransfer1.

        Convenience fee type code. Min length: 2. Max Length: 2. Valid values  (01: Indicates Consumer should be prompted to enter tip 02: Indicates that merchant would mandatorily charge a flat convenience fee 03: Indicates that merchant would charge a percentage convenience fee)

        :param convenience_indicator: The convenience_indicator of this MerchantTransfer1.
        :type convenience_indicator: str
        """

        self._convenience_indicator = convenience_indicator

    @property
    def digital_account_reference_number(self):
        """Gets the digital_account_reference_number of this MerchantTransfer1.

        URI to identify the digital account reference number. URI scheme must be pan. Valid Values- Refer 'Account URIs'. 

        :return: The digital_account_reference_number of this MerchantTransfer1.
        :rtype: str
        """
        return self._digital_account_reference_number

    @digital_account_reference_number.setter
    def digital_account_reference_number(self, digital_account_reference_number):
        """Sets the digital_account_reference_number of this MerchantTransfer1.

        URI to identify the digital account reference number. URI scheme must be pan. Valid Values- Refer 'Account URIs'. 

        :param digital_account_reference_number: The digital_account_reference_number of this MerchantTransfer1.
        :type digital_account_reference_number: str
        """

        self._digital_account_reference_number = digital_account_reference_number

    @property
    def interchange_rate_designator(self):
        """Gets the interchange_rate_designator of this MerchantTransfer1.

        Indicates the interchange rate and editing rules applied to the transaction. Field is applicable for Europe OIs only.  Type:Alphanumeric [a-zA-Z 0-9], Length: 2

        :return: The interchange_rate_designator of this MerchantTransfer1.
        :rtype: str
        """
        return self._interchange_rate_designator

    @interchange_rate_designator.setter
    def interchange_rate_designator(self, interchange_rate_designator):
        """Sets the interchange_rate_designator of this MerchantTransfer1.

        Indicates the interchange rate and editing rules applied to the transaction. Field is applicable for Europe OIs only.  Type:Alphanumeric [a-zA-Z 0-9], Length: 2

        :param interchange_rate_designator: The interchange_rate_designator of this MerchantTransfer1.
        :type interchange_rate_designator: str
        """

        self._interchange_rate_designator = interchange_rate_designator

    @property
    def mastercard_assigned_id(self):
        """Gets the mastercard_assigned_id of this MerchantTransfer1.

        Mastercard Assigned ID for tiered interchange calculations.   Type: Numeric [0-9], Length: 6

        :return: The mastercard_assigned_id of this MerchantTransfer1.
        :rtype: str
        """
        return self._mastercard_assigned_id

    @mastercard_assigned_id.setter
    def mastercard_assigned_id(self, mastercard_assigned_id):
        """Sets the mastercard_assigned_id of this MerchantTransfer1.

        Mastercard Assigned ID for tiered interchange calculations.   Type: Numeric [0-9], Length: 6

        :param mastercard_assigned_id: The mastercard_assigned_id of this MerchantTransfer1.
        :type mastercard_assigned_id: str
        """

        self._mastercard_assigned_id = mastercard_assigned_id

    @property
    def participant(self):
        """Gets the participant of this MerchantTransfer1.


        :return: The participant of this MerchantTransfer1.
        :rtype: Participant13
        """
        return self._participant

    @participant.setter
    def participant(self, participant):
        """Sets the participant of this MerchantTransfer1.


        :param participant: The participant of this MerchantTransfer1.
        :type participant: Participant13
        """
        if participant is None:
            raise ValueError("Invalid value for `participant`, must not be `None`")

        self._participant = participant

    @property
    def participation_id(self):
        """Gets the participation_id of this MerchantTransfer1.

        Participation identifier of the sender. The receiving financial institution will associate the value to the transfer. \\n\\nType: Alphanumeric Special [a-zA-Z0-9!\\\"#$%&'()*+,-./\\\\:;<=>?@[]_`{|}~], Length: 1-30

        :return: The participation_id of this MerchantTransfer1.
        :rtype: str
        """
        return self._participation_id

    @participation_id.setter
    def participation_id(self, participation_id):
        """Sets the participation_id of this MerchantTransfer1.

        Participation identifier of the sender. The receiving financial institution will associate the value to the transfer. \\n\\nType: Alphanumeric Special [a-zA-Z0-9!\\\"#$%&'()*+,-./\\\\:;<=>?@[]_`{|}~], Length: 1-30

        :param participation_id: The participation_id of this MerchantTransfer1.
        :type participation_id: str
        """

        self._participation_id = participation_id

    @property
    def payment_origination_country(self):
        """Gets the payment_origination_country of this MerchantTransfer1.

        Country where the payment originated from as an ISO 3166-1 alpha-3 country code.   Type: Alpha [A-Z], Length: 3

        :return: The payment_origination_country of this MerchantTransfer1.
        :rtype: str
        """
        return self._payment_origination_country

    @payment_origination_country.setter
    def payment_origination_country(self, payment_origination_country):
        """Sets the payment_origination_country of this MerchantTransfer1.

        Country where the payment originated from as an ISO 3166-1 alpha-3 country code.   Type: Alpha [A-Z], Length: 3

        :param payment_origination_country: The payment_origination_country of this MerchantTransfer1.
        :type payment_origination_country: str
        """

        self._payment_origination_country = payment_origination_country

    @property
    def payment_type(self):
        """Gets the payment_type of this MerchantTransfer1.

        Payment type used for transfer. Value - P2M: Person to Merchant.   Type: Alphanumeric [A-Z0-9], Length: 3

        :return: The payment_type of this MerchantTransfer1.
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this MerchantTransfer1.

        Payment type used for transfer. Value - P2M: Person to Merchant.   Type: Alphanumeric [A-Z0-9], Length: 3

        :param payment_type: The payment_type of this MerchantTransfer1.
        :type payment_type: str
        """
        if payment_type is None:
            raise ValueError("Invalid value for `payment_type`, must not be `None`")

        self._payment_type = payment_type

    @property
    def processor_id(self):
        """Gets the processor_id of this MerchantTransfer1.

        The processor ID is a ten-digit number of the form: 9000xxxxxx, where the Single Message System-assigned processor ID will be up to the last six digits xxxxxx. Partner must provide this value only if the program they are enabling requires it. For all other implementations this value must not be provided.   Type: Numeric [0-9], Length: 10

        :return: The processor_id of this MerchantTransfer1.
        :rtype: str
        """
        return self._processor_id

    @processor_id.setter
    def processor_id(self, processor_id):
        """Sets the processor_id of this MerchantTransfer1.

        The processor ID is a ten-digit number of the form: 9000xxxxxx, where the Single Message System-assigned processor ID will be up to the last six digits xxxxxx. Partner must provide this value only if the program they are enabling requires it. For all other implementations this value must not be provided.   Type: Numeric [0-9], Length: 10

        :param processor_id: The processor_id of this MerchantTransfer1.
        :type processor_id: str
        """

        self._processor_id = processor_id

    @property
    def qr_data(self):
        """Gets the qr_data of this MerchantTransfer1.

        Encoded QR (Quick Response) code data. Type: Alphanumeric and special characters [a-zA-Z0-9!\"#$%&'()*+,-./\\:;<=>?@[]_`{|}~], Maximum Length: 237

        :return: The qr_data of this MerchantTransfer1.
        :rtype: str
        """
        return self._qr_data

    @qr_data.setter
    def qr_data(self, qr_data):
        """Sets the qr_data of this MerchantTransfer1.

        Encoded QR (Quick Response) code data. Type: Alphanumeric and special characters [a-zA-Z0-9!\"#$%&'()*+,-./\\:;<=>?@[]_`{|}~], Maximum Length: 237

        :param qr_data: The qr_data of this MerchantTransfer1.
        :type qr_data: str
        """

        self._qr_data = qr_data

    @property
    def recipient(self):
        """Gets the recipient of this MerchantTransfer1.


        :return: The recipient of this MerchantTransfer1.
        :rtype: Recipient7
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """Sets the recipient of this MerchantTransfer1.


        :param recipient: The recipient of this MerchantTransfer1.
        :type recipient: Recipient7
        """
        if recipient is None:
            raise ValueError("Invalid value for `recipient`, must not be `None`")

        self._recipient = recipient

    @property
    def recipient_account_uri(self):
        """Gets the recipient_account_uri of this MerchantTransfer1.

        URI to identify the account of the recipient/merchant. Pan, Manual Entry Alias and Alias are valid schemas. Refer 'Account URIs'

        :return: The recipient_account_uri of this MerchantTransfer1.
        :rtype: str
        """
        return self._recipient_account_uri

    @recipient_account_uri.setter
    def recipient_account_uri(self, recipient_account_uri):
        """Sets the recipient_account_uri of this MerchantTransfer1.

        URI to identify the account of the recipient/merchant. Pan, Manual Entry Alias and Alias are valid schemas. Refer 'Account URIs'

        :param recipient_account_uri: The recipient_account_uri of this MerchantTransfer1.
        :type recipient_account_uri: str
        """
        if recipient_account_uri is None:
            raise ValueError("Invalid value for `recipient_account_uri`, must not be `None`")

        self._recipient_account_uri = recipient_account_uri

    @property
    def reconciliation_data(self):
        """Gets the reconciliation_data of this MerchantTransfer1.


        :return: The reconciliation_data of this MerchantTransfer1.
        :rtype: ReconciliationData11
        """
        return self._reconciliation_data

    @reconciliation_data.setter
    def reconciliation_data(self, reconciliation_data):
        """Sets the reconciliation_data of this MerchantTransfer1.


        :param reconciliation_data: The reconciliation_data of this MerchantTransfer1.
        :type reconciliation_data: ReconciliationData11
        """

        self._reconciliation_data = reconciliation_data

    @property
    def routing_transit_number(self):
        """Gets the routing_transit_number of this MerchantTransfer1.

        The nine-digit Federal Reserve Routing and Transit (R & T) number of the acquiring institution or the nine-digit pseudo-number assigned to the acquiring institution by Mastercard. Partner must provide this value only if the program they are enabling requires it. For all other implementations this value must not be provided.    Type: Numeric [0-9], Length: 9

        :return: The routing_transit_number of this MerchantTransfer1.
        :rtype: str
        """
        return self._routing_transit_number

    @routing_transit_number.setter
    def routing_transit_number(self, routing_transit_number):
        """Sets the routing_transit_number of this MerchantTransfer1.

        The nine-digit Federal Reserve Routing and Transit (R & T) number of the acquiring institution or the nine-digit pseudo-number assigned to the acquiring institution by Mastercard. Partner must provide this value only if the program they are enabling requires it. For all other implementations this value must not be provided.    Type: Numeric [0-9], Length: 9

        :param routing_transit_number: The routing_transit_number of this MerchantTransfer1.
        :type routing_transit_number: str
        """

        self._routing_transit_number = routing_transit_number

    @property
    def sender(self):
        """Gets the sender of this MerchantTransfer1.


        :return: The sender of this MerchantTransfer1.
        :rtype: Sender3
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this MerchantTransfer1.


        :param sender: The sender of this MerchantTransfer1.
        :type sender: Sender3
        """
        if sender is None:
            raise ValueError("Invalid value for `sender`, must not be `None`")

        self._sender = sender

    @property
    def sender_account_uri(self):
        """Gets the sender_account_uri of this MerchantTransfer1.

        URI to identify the account information of the sender. Only PAN is the valid scheme. Refer 'Account URIs'

        :return: The sender_account_uri of this MerchantTransfer1.
        :rtype: str
        """
        return self._sender_account_uri

    @sender_account_uri.setter
    def sender_account_uri(self, sender_account_uri):
        """Sets the sender_account_uri of this MerchantTransfer1.

        URI to identify the account information of the sender. Only PAN is the valid scheme. Refer 'Account URIs'

        :param sender_account_uri: The sender_account_uri of this MerchantTransfer1.
        :type sender_account_uri: str
        """
        if sender_account_uri is None:
            raise ValueError("Invalid value for `sender_account_uri`, must not be `None`")

        self._sender_account_uri = sender_account_uri

    @property
    def transaction_local_date_time(self):
        """Gets the transaction_local_date_time of this MerchantTransfer1.

        Local date and time when the transaction is submitted as an ISO 8601 format.   Type: Alphanumerical Special [A-Z 0-9-:], Length: 25

        :return: The transaction_local_date_time of this MerchantTransfer1.
        :rtype: str
        """
        return self._transaction_local_date_time

    @transaction_local_date_time.setter
    def transaction_local_date_time(self, transaction_local_date_time):
        """Sets the transaction_local_date_time of this MerchantTransfer1.

        Local date and time when the transaction is submitted as an ISO 8601 format.   Type: Alphanumerical Special [A-Z 0-9-:], Length: 25

        :param transaction_local_date_time: The transaction_local_date_time of this MerchantTransfer1.
        :type transaction_local_date_time: str
        """
        if transaction_local_date_time is None:
            raise ValueError("Invalid value for `transaction_local_date_time`, must not be `None`")

        self._transaction_local_date_time = transaction_local_date_time

    @property
    def transfer_amount(self):
        """Gets the transfer_amount of this MerchantTransfer1.


        :return: The transfer_amount of this MerchantTransfer1.
        :rtype: TransferAmount2
        """
        return self._transfer_amount

    @transfer_amount.setter
    def transfer_amount(self, transfer_amount):
        """Sets the transfer_amount of this MerchantTransfer1.


        :param transfer_amount: The transfer_amount of this MerchantTransfer1.
        :type transfer_amount: TransferAmount2
        """
        if transfer_amount is None:
            raise ValueError("Invalid value for `transfer_amount`, must not be `None`")

        self._transfer_amount = transfer_amount

    @property
    def transfer_reference(self):
        """Gets the transfer_reference of this MerchantTransfer1.

        Provide a unique transaction reference number. It must be a unique value for each request initiated by the partner.   Type: Alphanumeric Special [a-zA-Z0-9 * , - . _ ~], Length: 6-40

        :return: The transfer_reference of this MerchantTransfer1.
        :rtype: str
        """
        return self._transfer_reference

    @transfer_reference.setter
    def transfer_reference(self, transfer_reference):
        """Sets the transfer_reference of this MerchantTransfer1.

        Provide a unique transaction reference number. It must be a unique value for each request initiated by the partner.   Type: Alphanumeric Special [a-zA-Z0-9 * , - . _ ~], Length: 6-40

        :param transfer_reference: The transfer_reference of this MerchantTransfer1.
        :type transfer_reference: str
        """
        if transfer_reference is None:
            raise ValueError("Invalid value for `transfer_reference`, must not be `None`")

        self._transfer_reference = transfer_reference

    @property
    def unique_reference_number(self):
        """Gets the unique_reference_number of this MerchantTransfer1.

        Unique reference number for the transaction.    Type: Alphanumeric [a-zA-Z 0-9], Maximum Length: 19

        :return: The unique_reference_number of this MerchantTransfer1.
        :rtype: str
        """
        return self._unique_reference_number

    @unique_reference_number.setter
    def unique_reference_number(self, unique_reference_number):
        """Sets the unique_reference_number of this MerchantTransfer1.

        Unique reference number for the transaction.    Type: Alphanumeric [a-zA-Z 0-9], Maximum Length: 19

        :param unique_reference_number: The unique_reference_number of this MerchantTransfer1.
        :type unique_reference_number: str
        """

        self._unique_reference_number = unique_reference_number
