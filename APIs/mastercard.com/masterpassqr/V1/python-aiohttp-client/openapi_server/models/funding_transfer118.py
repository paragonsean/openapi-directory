# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recipient123 import Recipient123
from openapi_server.models.reconciliation_data126 import ReconciliationData126
from openapi_server.models.sender119 import Sender119
from openapi_server.models.token_cryptogram128 import TokenCryptogram128
from openapi_server import util


class FundingTransfer118(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_message: str=None, amount: str=None, authentication_value: str=None, channel: str=None, currency: str=None, device_id: str=None, funding_hints: str=None, interchange_rate_designator: str=None, language_data: str=None, language_identification: str=None, location: str=None, participation_id: str=None, payment_type: str=None, recipient: Recipient123=None, recipient_account_uri: str=None, reconciliation_data: ReconciliationData126=None, sanction_screening_override: bool=None, sender: Sender119=None, sender_account_uri: str=None, statement_descriptor: str=None, token_cryptogram: TokenCryptogram128=None, transfer_reference: str=None):
        """FundingTransfer118 - a model defined in OpenAPI

        :param additional_message: The additional_message of this FundingTransfer118.
        :param amount: The amount of this FundingTransfer118.
        :param authentication_value: The authentication_value of this FundingTransfer118.
        :param channel: The channel of this FundingTransfer118.
        :param currency: The currency of this FundingTransfer118.
        :param device_id: The device_id of this FundingTransfer118.
        :param funding_hints: The funding_hints of this FundingTransfer118.
        :param interchange_rate_designator: The interchange_rate_designator of this FundingTransfer118.
        :param language_data: The language_data of this FundingTransfer118.
        :param language_identification: The language_identification of this FundingTransfer118.
        :param location: The location of this FundingTransfer118.
        :param participation_id: The participation_id of this FundingTransfer118.
        :param payment_type: The payment_type of this FundingTransfer118.
        :param recipient: The recipient of this FundingTransfer118.
        :param recipient_account_uri: The recipient_account_uri of this FundingTransfer118.
        :param reconciliation_data: The reconciliation_data of this FundingTransfer118.
        :param sanction_screening_override: The sanction_screening_override of this FundingTransfer118.
        :param sender: The sender of this FundingTransfer118.
        :param sender_account_uri: The sender_account_uri of this FundingTransfer118.
        :param statement_descriptor: The statement_descriptor of this FundingTransfer118.
        :param token_cryptogram: The token_cryptogram of this FundingTransfer118.
        :param transfer_reference: The transfer_reference of this FundingTransfer118.
        """
        self.openapi_types = {
            'additional_message': str,
            'amount': str,
            'authentication_value': str,
            'channel': str,
            'currency': str,
            'device_id': str,
            'funding_hints': str,
            'interchange_rate_designator': str,
            'language_data': str,
            'language_identification': str,
            'location': str,
            'participation_id': str,
            'payment_type': str,
            'recipient': Recipient123,
            'recipient_account_uri': str,
            'reconciliation_data': ReconciliationData126,
            'sanction_screening_override': bool,
            'sender': Sender119,
            'sender_account_uri': str,
            'statement_descriptor': str,
            'token_cryptogram': TokenCryptogram128,
            'transfer_reference': str
        }

        self.attribute_map = {
            'additional_message': 'additional_message',
            'amount': 'amount',
            'authentication_value': 'authentication_value',
            'channel': 'channel',
            'currency': 'currency',
            'device_id': 'device_id',
            'funding_hints': 'funding_hints',
            'interchange_rate_designator': 'interchange_rate_designator',
            'language_data': 'language_data',
            'language_identification': 'language_identification',
            'location': 'location',
            'participation_id': 'participation_id',
            'payment_type': 'payment_type',
            'recipient': 'recipient',
            'recipient_account_uri': 'recipient_account_uri',
            'reconciliation_data': 'reconciliation_data',
            'sanction_screening_override': 'sanction_screening_override',
            'sender': 'sender',
            'sender_account_uri': 'sender_account_uri',
            'statement_descriptor': 'statement_descriptor',
            'token_cryptogram': 'token_cryptogram',
            'transfer_reference': 'transfer_reference'
        }

        self._additional_message = additional_message
        self._amount = amount
        self._authentication_value = authentication_value
        self._channel = channel
        self._currency = currency
        self._device_id = device_id
        self._funding_hints = funding_hints
        self._interchange_rate_designator = interchange_rate_designator
        self._language_data = language_data
        self._language_identification = language_identification
        self._location = location
        self._participation_id = participation_id
        self._payment_type = payment_type
        self._recipient = recipient
        self._recipient_account_uri = recipient_account_uri
        self._reconciliation_data = reconciliation_data
        self._sanction_screening_override = sanction_screening_override
        self._sender = sender
        self._sender_account_uri = sender_account_uri
        self._statement_descriptor = statement_descriptor
        self._token_cryptogram = token_cryptogram
        self._transfer_reference = transfer_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FundingTransfer118':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FundingTransfer_118 of this FundingTransfer118.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_message(self):
        """Gets the additional_message of this FundingTransfer118.

        Additional Message. Details- alpha-numeric 1-65

        :return: The additional_message of this FundingTransfer118.
        :rtype: str
        """
        return self._additional_message

    @additional_message.setter
    def additional_message(self, additional_message):
        """Sets the additional_message of this FundingTransfer118.

        Additional Message. Details- alpha-numeric 1-65

        :param additional_message: The additional_message of this FundingTransfer118.
        :type additional_message: str
        """

        self._additional_message = additional_message

    @property
    def amount(self):
        """Gets the amount of this FundingTransfer118.

        Amount of the transfer in the smallest unit of currency. Decimal implied before last two positions. Example: 100 = $1.00USD Details- numeric, 1-999999999999

        :return: The amount of this FundingTransfer118.
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this FundingTransfer118.

        Amount of the transfer in the smallest unit of currency. Decimal implied before last two positions. Example: 100 = $1.00USD Details- numeric, 1-999999999999

        :param amount: The amount of this FundingTransfer118.
        :type amount: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def authentication_value(self):
        """Gets the authentication_value of this FundingTransfer118.

        List of name/value pairs containing authentication  values. Refer 'Authentication Value URIs'

        :return: The authentication_value of this FundingTransfer118.
        :rtype: str
        """
        return self._authentication_value

    @authentication_value.setter
    def authentication_value(self, authentication_value):
        """Sets the authentication_value of this FundingTransfer118.

        List of name/value pairs containing authentication  values. Refer 'Authentication Value URIs'

        :param authentication_value: The authentication_value of this FundingTransfer118.
        :type authentication_value: str
        """

        self._authentication_value = authentication_value

    @property
    def channel(self):
        """Gets the channel of this FundingTransfer118.

         Initiation channel of the payment request. This value can be defined in the onboarding process instead of passing in every call One of the WEB, MOBILE, BANK, KIOSK. Details- Conditional

        :return: The channel of this FundingTransfer118.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this FundingTransfer118.

         Initiation channel of the payment request. This value can be defined in the onboarding process instead of passing in every call One of the WEB, MOBILE, BANK, KIOSK. Details- Conditional

        :param channel: The channel of this FundingTransfer118.
        :type channel: str
        """

        self._channel = channel

    @property
    def currency(self):
        """Gets the currency of this FundingTransfer118.

        Three-letter ISO currency code representing the currency of the transfer amount. Details- alpha, length: 3

        :return: The currency of this FundingTransfer118.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this FundingTransfer118.

        Three-letter ISO currency code representing the currency of the transfer amount. Details- alpha, length: 3

        :param currency: The currency of this FundingTransfer118.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def device_id(self):
        """Gets the device_id of this FundingTransfer118.

        The serial number of a device. Details- 1-40

        :return: The device_id of this FundingTransfer118.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this FundingTransfer118.

        The serial number of a device. Details- 1-40

        :param device_id: The device_id of this FundingTransfer118.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def funding_hints(self):
        """Gets the funding_hints of this FundingTransfer118.

        List of name/value pairs containing funding parameter values. Valid Values- Refer 'Funding Hints URIs'

        :return: The funding_hints of this FundingTransfer118.
        :rtype: str
        """
        return self._funding_hints

    @funding_hints.setter
    def funding_hints(self, funding_hints):
        """Sets the funding_hints of this FundingTransfer118.

        List of name/value pairs containing funding parameter values. Valid Values- Refer 'Funding Hints URIs'

        :param funding_hints: The funding_hints of this FundingTransfer118.
        :type funding_hints: str
        """

        self._funding_hints = funding_hints

    @property
    def interchange_rate_designator(self):
        """Gets the interchange_rate_designator of this FundingTransfer118.

        Indicates the interchange rate and editing rules applied to the transaction.  Type:Alphanumeric [a-zA-Z 0-9], Length: 2

        :return: The interchange_rate_designator of this FundingTransfer118.
        :rtype: str
        """
        return self._interchange_rate_designator

    @interchange_rate_designator.setter
    def interchange_rate_designator(self, interchange_rate_designator):
        """Sets the interchange_rate_designator of this FundingTransfer118.

        Indicates the interchange rate and editing rules applied to the transaction.  Type:Alphanumeric [a-zA-Z 0-9], Length: 2

        :param interchange_rate_designator: The interchange_rate_designator of this FundingTransfer118.
        :type interchange_rate_designator: str
        """

        self._interchange_rate_designator = interchange_rate_designator

    @property
    def language_data(self):
        """Gets the language_data of this FundingTransfer118.

        Language Data Details- binary 1-65

        :return: The language_data of this FundingTransfer118.
        :rtype: str
        """
        return self._language_data

    @language_data.setter
    def language_data(self, language_data):
        """Sets the language_data of this FundingTransfer118.

        Language Data Details- binary 1-65

        :param language_data: The language_data of this FundingTransfer118.
        :type language_data: str
        """

        self._language_data = language_data

    @property
    def language_identification(self):
        """Gets the language_identification of this FundingTransfer118.

        Language Identification. Details- alpha - 3

        :return: The language_identification of this FundingTransfer118.
        :rtype: str
        """
        return self._language_identification

    @language_identification.setter
    def language_identification(self, language_identification):
        """Sets the language_identification of this FundingTransfer118.

        Language Identification. Details- alpha - 3

        :param language_identification: The language_identification of this FundingTransfer118.
        :type language_identification: str
        """

        self._language_identification = language_identification

    @property
    def location(self):
        """Gets the location of this FundingTransfer118.

        Location where the transaction is initiated from. Details- 1-40. Valid Values- Refer 'Location URIs'

        :return: The location of this FundingTransfer118.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this FundingTransfer118.

        Location where the transaction is initiated from. Details- 1-40. Valid Values- Refer 'Location URIs'

        :param location: The location of this FundingTransfer118.
        :type location: str
        """

        self._location = location

    @property
    def participation_id(self):
        """Gets the participation_id of this FundingTransfer118.

        Participation Id. An identifier agreed by both the issuing institution and the merchant. Details- alpha-numeric 1-30

        :return: The participation_id of this FundingTransfer118.
        :rtype: str
        """
        return self._participation_id

    @participation_id.setter
    def participation_id(self, participation_id):
        """Sets the participation_id of this FundingTransfer118.

        Participation Id. An identifier agreed by both the issuing institution and the merchant. Details- alpha-numeric 1-30

        :param participation_id: The participation_id of this FundingTransfer118.
        :type participation_id: str
        """

        self._participation_id = participation_id

    @property
    def payment_type(self):
        """Gets the payment_type of this FundingTransfer118.

        Payment type used for transfer. Value - P2M: Person to Merchant.   Type: Alphanumeric [A-Z0-9], Length: 3

        :return: The payment_type of this FundingTransfer118.
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this FundingTransfer118.

        Payment type used for transfer. Value - P2M: Person to Merchant.   Type: Alphanumeric [A-Z0-9], Length: 3

        :param payment_type: The payment_type of this FundingTransfer118.
        :type payment_type: str
        """

        self._payment_type = payment_type

    @property
    def recipient(self):
        """Gets the recipient of this FundingTransfer118.


        :return: The recipient of this FundingTransfer118.
        :rtype: Recipient123
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """Sets the recipient of this FundingTransfer118.


        :param recipient: The recipient of this FundingTransfer118.
        :type recipient: Recipient123
        """

        self._recipient = recipient

    @property
    def recipient_account_uri(self):
        """Gets the recipient_account_uri of this FundingTransfer118.

        URI identifying receiver's account to receive the transfer. Valid Values- Refer 'Account URIs'

        :return: The recipient_account_uri of this FundingTransfer118.
        :rtype: str
        """
        return self._recipient_account_uri

    @recipient_account_uri.setter
    def recipient_account_uri(self, recipient_account_uri):
        """Sets the recipient_account_uri of this FundingTransfer118.

        URI identifying receiver's account to receive the transfer. Valid Values- Refer 'Account URIs'

        :param recipient_account_uri: The recipient_account_uri of this FundingTransfer118.
        :type recipient_account_uri: str
        """
        if recipient_account_uri is None:
            raise ValueError("Invalid value for `recipient_account_uri`, must not be `None`")

        self._recipient_account_uri = recipient_account_uri

    @property
    def reconciliation_data(self):
        """Gets the reconciliation_data of this FundingTransfer118.


        :return: The reconciliation_data of this FundingTransfer118.
        :rtype: ReconciliationData126
        """
        return self._reconciliation_data

    @reconciliation_data.setter
    def reconciliation_data(self, reconciliation_data):
        """Sets the reconciliation_data of this FundingTransfer118.


        :param reconciliation_data: The reconciliation_data of this FundingTransfer118.
        :type reconciliation_data: ReconciliationData126
        """

        self._reconciliation_data = reconciliation_data

    @property
    def sanction_screening_override(self):
        """Gets the sanction_screening_override of this FundingTransfer118.

        Override indicator if partner has opted into Sanction Screening validation as part of transaction processing.  If Sanction Screening score on either sender or receiver is equal to or above threshold configured for partner, the payment will error.  To bypass the Sanction Screening validation and process the payment the value 'true' should be submitted.  Details:  Optional – If partner has not enabled Sanction Screening validation default is 'true'.   Required - If partner has opted into Sanction Screening validation but wants to bypass Sanction Screening validation and process the payment, value should be 'true'. 

        :return: The sanction_screening_override of this FundingTransfer118.
        :rtype: bool
        """
        return self._sanction_screening_override

    @sanction_screening_override.setter
    def sanction_screening_override(self, sanction_screening_override):
        """Sets the sanction_screening_override of this FundingTransfer118.

        Override indicator if partner has opted into Sanction Screening validation as part of transaction processing.  If Sanction Screening score on either sender or receiver is equal to or above threshold configured for partner, the payment will error.  To bypass the Sanction Screening validation and process the payment the value 'true' should be submitted.  Details:  Optional – If partner has not enabled Sanction Screening validation default is 'true'.   Required - If partner has opted into Sanction Screening validation but wants to bypass Sanction Screening validation and process the payment, value should be 'true'. 

        :param sanction_screening_override: The sanction_screening_override of this FundingTransfer118.
        :type sanction_screening_override: bool
        """

        self._sanction_screening_override = sanction_screening_override

    @property
    def sender(self):
        """Gets the sender of this FundingTransfer118.


        :return: The sender of this FundingTransfer118.
        :rtype: Sender119
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this FundingTransfer118.


        :param sender: The sender of this FundingTransfer118.
        :type sender: Sender119
        """

        self._sender = sender

    @property
    def sender_account_uri(self):
        """Gets the sender_account_uri of this FundingTransfer118.

        URI identifying sender's account to fund the transfer. Only a pan based account is valid. Valid Values- Refer 'Account URIs' Details- Conditional

        :return: The sender_account_uri of this FundingTransfer118.
        :rtype: str
        """
        return self._sender_account_uri

    @sender_account_uri.setter
    def sender_account_uri(self, sender_account_uri):
        """Sets the sender_account_uri of this FundingTransfer118.

        URI identifying sender's account to fund the transfer. Only a pan based account is valid. Valid Values- Refer 'Account URIs' Details- Conditional

        :param sender_account_uri: The sender_account_uri of this FundingTransfer118.
        :type sender_account_uri: str
        """

        self._sender_account_uri = sender_account_uri

    @property
    def statement_descriptor(self):
        """Gets the statement_descriptor of this FundingTransfer118.

        The statement descriptor is a string which will be displayed on the recipient's bank or card statement. It consists of one or two parts: the prefix and the content. The prefix is an optional short string typically used to identify the client/merchant. It is defined during client/merchant onboarding and the same value should be used. If not provided in the API call, system will use the value defined in the onboarding process. The content portion of the statement descriptor will be displayed on the recipient's statement. If both the prefix and content portions are defined, they both are appended &lt;prefix&gt;+&lt;content&gt; The overall length may be at most 22 characters, including the prefix (even if not provided in the API call) and the content. Note: While most financial institutions display this information consistently, some may display it incorrectly or not at all. Details- Conditional, 22

        :return: The statement_descriptor of this FundingTransfer118.
        :rtype: str
        """
        return self._statement_descriptor

    @statement_descriptor.setter
    def statement_descriptor(self, statement_descriptor):
        """Sets the statement_descriptor of this FundingTransfer118.

        The statement descriptor is a string which will be displayed on the recipient's bank or card statement. It consists of one or two parts: the prefix and the content. The prefix is an optional short string typically used to identify the client/merchant. It is defined during client/merchant onboarding and the same value should be used. If not provided in the API call, system will use the value defined in the onboarding process. The content portion of the statement descriptor will be displayed on the recipient's statement. If both the prefix and content portions are defined, they both are appended &lt;prefix&gt;+&lt;content&gt; The overall length may be at most 22 characters, including the prefix (even if not provided in the API call) and the content. Note: While most financial institutions display this information consistently, some may display it incorrectly or not at all. Details- Conditional, 22

        :param statement_descriptor: The statement_descriptor of this FundingTransfer118.
        :type statement_descriptor: str
        """

        self._statement_descriptor = statement_descriptor

    @property
    def token_cryptogram(self):
        """Gets the token_cryptogram of this FundingTransfer118.


        :return: The token_cryptogram of this FundingTransfer118.
        :rtype: TokenCryptogram128
        """
        return self._token_cryptogram

    @token_cryptogram.setter
    def token_cryptogram(self, token_cryptogram):
        """Sets the token_cryptogram of this FundingTransfer118.


        :param token_cryptogram: The token_cryptogram of this FundingTransfer118.
        :type token_cryptogram: TokenCryptogram128
        """

        self._token_cryptogram = token_cryptogram

    @property
    def transfer_reference(self):
        """Gets the transfer_reference of this FundingTransfer118.

        Unique transaction reference number. It must be unique within the partner's domain. Allowable characters are alphanumeric and * , - . _ ~. Details- 6-40

        :return: The transfer_reference of this FundingTransfer118.
        :rtype: str
        """
        return self._transfer_reference

    @transfer_reference.setter
    def transfer_reference(self, transfer_reference):
        """Sets the transfer_reference of this FundingTransfer118.

        Unique transaction reference number. It must be unique within the partner's domain. Allowable characters are alphanumeric and * , - . _ ~. Details- 6-40

        :param transfer_reference: The transfer_reference of this FundingTransfer118.
        :type transfer_reference: str
        """
        if transfer_reference is None:
            raise ValueError("Invalid value for `transfer_reference`, must not be `None`")

        self._transfer_reference = transfer_reference
