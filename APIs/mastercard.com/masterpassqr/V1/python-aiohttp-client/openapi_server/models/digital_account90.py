# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.digital_account_reference_numbers91 import DigitalAccountReferenceNumbers91
from openapi_server import util


class DigitalAccount90(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_type: str=None, account_uri: str=None, digital_account_reference_numbers: DigitalAccountReferenceNumbers91=None, reference: str=None):
        """DigitalAccount90 - a model defined in OpenAPI

        :param account_type: The account_type of this DigitalAccount90.
        :param account_uri: The account_uri of this DigitalAccount90.
        :param digital_account_reference_numbers: The digital_account_reference_numbers of this DigitalAccount90.
        :param reference: The reference of this DigitalAccount90.
        """
        self.openapi_types = {
            'account_type': str,
            'account_uri': str,
            'digital_account_reference_numbers': DigitalAccountReferenceNumbers91,
            'reference': str
        }

        self.attribute_map = {
            'account_type': 'account_type',
            'account_uri': 'account_uri',
            'digital_account_reference_numbers': 'digital_account_reference_numbers',
            'reference': 'reference'
        }

        self._account_type = account_type
        self._account_uri = account_uri
        self._digital_account_reference_numbers = digital_account_reference_numbers
        self._reference = reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DigitalAccount90':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DigitalAccount_90 of this DigitalAccount90.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_type(self):
        """Gets the account_type of this DigitalAccount90.

        Account type must contain one of the following: CREDIT, DEBIT, PREPAID, DEPOSIT_ACCOUNT, MOBILE_MONEY_ACCOUNT or CASH.

        :return: The account_type of this DigitalAccount90.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this DigitalAccount90.

        Account type must contain one of the following: CREDIT, DEBIT, PREPAID, DEPOSIT_ACCOUNT, MOBILE_MONEY_ACCOUNT or CASH.

        :param account_type: The account_type of this DigitalAccount90.
        :type account_type: str
        """

        self._account_type = account_type

    @property
    def account_uri(self):
        """Gets the account_uri of this DigitalAccount90.

        URI describing the account. URI scheme must be raw. Valid Values- Refer 'Account URIs'. 

        :return: The account_uri of this DigitalAccount90.
        :rtype: str
        """
        return self._account_uri

    @account_uri.setter
    def account_uri(self, account_uri):
        """Sets the account_uri of this DigitalAccount90.

        URI describing the account. URI scheme must be raw. Valid Values- Refer 'Account URIs'. 

        :param account_uri: The account_uri of this DigitalAccount90.
        :type account_uri: str
        """

        self._account_uri = account_uri

    @property
    def digital_account_reference_numbers(self):
        """Gets the digital_account_reference_numbers of this DigitalAccount90.


        :return: The digital_account_reference_numbers of this DigitalAccount90.
        :rtype: DigitalAccountReferenceNumbers91
        """
        return self._digital_account_reference_numbers

    @digital_account_reference_numbers.setter
    def digital_account_reference_numbers(self, digital_account_reference_numbers):
        """Sets the digital_account_reference_numbers of this DigitalAccount90.


        :param digital_account_reference_numbers: The digital_account_reference_numbers of this DigitalAccount90.
        :type digital_account_reference_numbers: DigitalAccountReferenceNumbers91
        """

        self._digital_account_reference_numbers = digital_account_reference_numbers

    @property
    def reference(self):
        """Gets the reference of this DigitalAccount90.

        Provide a unique reference number. It must be a unique value for the partner. Details- 6-40, Allowable characters are alphanumeric and * , - . _ ~

        :return: The reference of this DigitalAccount90.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this DigitalAccount90.

        Provide a unique reference number. It must be a unique value for the partner. Details- 6-40, Allowable characters are alphanumeric and * , - . _ ~

        :param reference: The reference of this DigitalAccount90.
        :type reference: str
        """

        self._reference = reference
