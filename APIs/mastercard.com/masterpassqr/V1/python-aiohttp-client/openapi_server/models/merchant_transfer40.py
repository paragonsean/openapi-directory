# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.participant53 import Participant53
from openapi_server.models.recipient43 import Recipient43
from openapi_server.models.reconciliation_data51 import ReconciliationData51
from openapi_server.models.sender41 import Sender41
from openapi_server.models.transaction_history47 import TransactionHistory47
from openapi_server.models.transfer_amount46 import TransferAmount46
from openapi_server import util


class MerchantTransfer40(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_message: str=None, channel: str=None, convenience_amount: str=None, convenience_indicator: str=None, created: str=None, device_id: str=None, digital_account_reference_number: str=None, funding_source: str=None, id: str=None, interchange_rate_designator: str=None, location: str=None, original_status: str=None, participant: Participant53=None, participation_id: str=None, payment_origination_country: str=None, payment_type: str=None, processor_id: str=None, qr_data: str=None, recipient: Recipient43=None, recipient_account_uri: str=None, reconciliation_data: ReconciliationData51=None, resource_type: str=None, routing_transit_number: str=None, sender: Sender41=None, sender_account_uri: str=None, status: str=None, status_timestamp: str=None, transaction_history: TransactionHistory47=None, transaction_local_date_time: str=None, transfer_amount: TransferAmount46=None, transfer_reference: str=None):
        """MerchantTransfer40 - a model defined in OpenAPI

        :param additional_message: The additional_message of this MerchantTransfer40.
        :param channel: The channel of this MerchantTransfer40.
        :param convenience_amount: The convenience_amount of this MerchantTransfer40.
        :param convenience_indicator: The convenience_indicator of this MerchantTransfer40.
        :param created: The created of this MerchantTransfer40.
        :param device_id: The device_id of this MerchantTransfer40.
        :param digital_account_reference_number: The digital_account_reference_number of this MerchantTransfer40.
        :param funding_source: The funding_source of this MerchantTransfer40.
        :param id: The id of this MerchantTransfer40.
        :param interchange_rate_designator: The interchange_rate_designator of this MerchantTransfer40.
        :param location: The location of this MerchantTransfer40.
        :param original_status: The original_status of this MerchantTransfer40.
        :param participant: The participant of this MerchantTransfer40.
        :param participation_id: The participation_id of this MerchantTransfer40.
        :param payment_origination_country: The payment_origination_country of this MerchantTransfer40.
        :param payment_type: The payment_type of this MerchantTransfer40.
        :param processor_id: The processor_id of this MerchantTransfer40.
        :param qr_data: The qr_data of this MerchantTransfer40.
        :param recipient: The recipient of this MerchantTransfer40.
        :param recipient_account_uri: The recipient_account_uri of this MerchantTransfer40.
        :param reconciliation_data: The reconciliation_data of this MerchantTransfer40.
        :param resource_type: The resource_type of this MerchantTransfer40.
        :param routing_transit_number: The routing_transit_number of this MerchantTransfer40.
        :param sender: The sender of this MerchantTransfer40.
        :param sender_account_uri: The sender_account_uri of this MerchantTransfer40.
        :param status: The status of this MerchantTransfer40.
        :param status_timestamp: The status_timestamp of this MerchantTransfer40.
        :param transaction_history: The transaction_history of this MerchantTransfer40.
        :param transaction_local_date_time: The transaction_local_date_time of this MerchantTransfer40.
        :param transfer_amount: The transfer_amount of this MerchantTransfer40.
        :param transfer_reference: The transfer_reference of this MerchantTransfer40.
        """
        self.openapi_types = {
            'additional_message': str,
            'channel': str,
            'convenience_amount': str,
            'convenience_indicator': str,
            'created': str,
            'device_id': str,
            'digital_account_reference_number': str,
            'funding_source': str,
            'id': str,
            'interchange_rate_designator': str,
            'location': str,
            'original_status': str,
            'participant': Participant53,
            'participation_id': str,
            'payment_origination_country': str,
            'payment_type': str,
            'processor_id': str,
            'qr_data': str,
            'recipient': Recipient43,
            'recipient_account_uri': str,
            'reconciliation_data': ReconciliationData51,
            'resource_type': str,
            'routing_transit_number': str,
            'sender': Sender41,
            'sender_account_uri': str,
            'status': str,
            'status_timestamp': str,
            'transaction_history': TransactionHistory47,
            'transaction_local_date_time': str,
            'transfer_amount': TransferAmount46,
            'transfer_reference': str
        }

        self.attribute_map = {
            'additional_message': 'additional_message',
            'channel': 'channel',
            'convenience_amount': 'convenience_amount',
            'convenience_indicator': 'convenience_indicator',
            'created': 'created',
            'device_id': 'device_id',
            'digital_account_reference_number': 'digital_account_reference_number',
            'funding_source': 'funding_source',
            'id': 'id',
            'interchange_rate_designator': 'interchange_rate_designator',
            'location': 'location',
            'original_status': 'original_status',
            'participant': 'participant',
            'participation_id': 'participation_id',
            'payment_origination_country': 'payment_origination_country',
            'payment_type': 'payment_type',
            'processor_id': 'processor_id',
            'qr_data': 'qr_data',
            'recipient': 'recipient',
            'recipient_account_uri': 'recipient_account_uri',
            'reconciliation_data': 'reconciliation_data',
            'resource_type': 'resource_type',
            'routing_transit_number': 'routing_transit_number',
            'sender': 'sender',
            'sender_account_uri': 'sender_account_uri',
            'status': 'status',
            'status_timestamp': 'status_timestamp',
            'transaction_history': 'transaction_history',
            'transaction_local_date_time': 'transaction_local_date_time',
            'transfer_amount': 'transfer_amount',
            'transfer_reference': 'transfer_reference'
        }

        self._additional_message = additional_message
        self._channel = channel
        self._convenience_amount = convenience_amount
        self._convenience_indicator = convenience_indicator
        self._created = created
        self._device_id = device_id
        self._digital_account_reference_number = digital_account_reference_number
        self._funding_source = funding_source
        self._id = id
        self._interchange_rate_designator = interchange_rate_designator
        self._location = location
        self._original_status = original_status
        self._participant = participant
        self._participation_id = participation_id
        self._payment_origination_country = payment_origination_country
        self._payment_type = payment_type
        self._processor_id = processor_id
        self._qr_data = qr_data
        self._recipient = recipient
        self._recipient_account_uri = recipient_account_uri
        self._reconciliation_data = reconciliation_data
        self._resource_type = resource_type
        self._routing_transit_number = routing_transit_number
        self._sender = sender
        self._sender_account_uri = sender_account_uri
        self._status = status
        self._status_timestamp = status_timestamp
        self._transaction_history = transaction_history
        self._transaction_local_date_time = transaction_local_date_time
        self._transfer_amount = transfer_amount
        self._transfer_reference = transfer_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MerchantTransfer40':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MerchantTransfer_40 of this MerchantTransfer40.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_message(self):
        """Gets the additional_message of this MerchantTransfer40.

        Message a financial institution will associate to the transfer and may display.\\n\\nType: Alphanumeric Special [a-zA-Z0-9!\\\"#$%&'()*+,-./\\\\:;<=>?@[]_`{|}~], Maximum Length: 65

        :return: The additional_message of this MerchantTransfer40.
        :rtype: str
        """
        return self._additional_message

    @additional_message.setter
    def additional_message(self, additional_message):
        """Sets the additional_message of this MerchantTransfer40.

        Message a financial institution will associate to the transfer and may display.\\n\\nType: Alphanumeric Special [a-zA-Z0-9!\\\"#$%&'()*+,-./\\\\:;<=>?@[]_`{|}~], Maximum Length: 65

        :param additional_message: The additional_message of this MerchantTransfer40.
        :type additional_message: str
        """

        self._additional_message = additional_message

    @property
    def channel(self):
        """Gets the channel of this MerchantTransfer40.

        Initiation channel of the transfer request. Values: WEB, MOBILE, BANK, KIOSK.

        :return: The channel of this MerchantTransfer40.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this MerchantTransfer40.

        Initiation channel of the transfer request. Values: WEB, MOBILE, BANK, KIOSK.

        :param channel: The channel of this MerchantTransfer40.
        :type channel: str
        """

        self._channel = channel

    @property
    def convenience_amount(self):
        """Gets the convenience_amount of this MerchantTransfer40.

        Tip or convenience amount in transaction currency. Length:1-12 numeric. If present, then convenience_indicator is also required.

        :return: The convenience_amount of this MerchantTransfer40.
        :rtype: str
        """
        return self._convenience_amount

    @convenience_amount.setter
    def convenience_amount(self, convenience_amount):
        """Sets the convenience_amount of this MerchantTransfer40.

        Tip or convenience amount in transaction currency. Length:1-12 numeric. If present, then convenience_indicator is also required.

        :param convenience_amount: The convenience_amount of this MerchantTransfer40.
        :type convenience_amount: str
        """

        self._convenience_amount = convenience_amount

    @property
    def convenience_indicator(self):
        """Gets the convenience_indicator of this MerchantTransfer40.

        Convenience fee type code. Min length: 2. Max Length: 2. Valid values are 01,02 or 03. 01:Indicates consumer should be prompted to enter tip. 02:Indicates the merchant would mandatorily charge a flat convenience fee. 03:Indicates that merchant would charge a percentage convenience fee. Required if convenience_amount is provided.

        :return: The convenience_indicator of this MerchantTransfer40.
        :rtype: str
        """
        return self._convenience_indicator

    @convenience_indicator.setter
    def convenience_indicator(self, convenience_indicator):
        """Sets the convenience_indicator of this MerchantTransfer40.

        Convenience fee type code. Min length: 2. Max Length: 2. Valid values are 01,02 or 03. 01:Indicates consumer should be prompted to enter tip. 02:Indicates the merchant would mandatorily charge a flat convenience fee. 03:Indicates that merchant would charge a percentage convenience fee. Required if convenience_amount is provided.

        :param convenience_indicator: The convenience_indicator of this MerchantTransfer40.
        :type convenience_indicator: str
        """

        self._convenience_indicator = convenience_indicator

    @property
    def created(self):
        """Gets the created of this MerchantTransfer40.

        Date and time the original transfer was created as an ISO 8601 Timestamp. Details- YYYY-MM-DDTHH:MM:SS±hh[:mm] Valid Values- Refer 'Date And Time Formats

        :return: The created of this MerchantTransfer40.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this MerchantTransfer40.

        Date and time the original transfer was created as an ISO 8601 Timestamp. Details- YYYY-MM-DDTHH:MM:SS±hh[:mm] Valid Values- Refer 'Date And Time Formats

        :param created: The created of this MerchantTransfer40.
        :type created: str
        """

        self._created = created

    @property
    def device_id(self):
        """Gets the device_id of this MerchantTransfer40.

        The serial number of a device that initiated the transfer.

        :return: The device_id of this MerchantTransfer40.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this MerchantTransfer40.

        The serial number of a device that initiated the transfer.

        :param device_id: The device_id of this MerchantTransfer40.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def digital_account_reference_number(self):
        """Gets the digital_account_reference_number of this MerchantTransfer40.

        URI to identify the digital account reference number. It will include masked account information but will not include security codes (e.g. CVC or expiration date for a card account). 

        :return: The digital_account_reference_number of this MerchantTransfer40.
        :rtype: str
        """
        return self._digital_account_reference_number

    @digital_account_reference_number.setter
    def digital_account_reference_number(self, digital_account_reference_number):
        """Sets the digital_account_reference_number of this MerchantTransfer40.

        URI to identify the digital account reference number. It will include masked account information but will not include security codes (e.g. CVC or expiration date for a card account). 

        :param digital_account_reference_number: The digital_account_reference_number of this MerchantTransfer40.
        :type digital_account_reference_number: str
        """

        self._digital_account_reference_number = digital_account_reference_number

    @property
    def funding_source(self):
        """Gets the funding_source of this MerchantTransfer40.

        Funding source must contain one of the following: CREDIT, DEBIT, PREPAID, DEPOSIT_ACCOUNT, MOBILE_MONEY_ACCOUNT or CASH. 

        :return: The funding_source of this MerchantTransfer40.
        :rtype: str
        """
        return self._funding_source

    @funding_source.setter
    def funding_source(self, funding_source):
        """Sets the funding_source of this MerchantTransfer40.

        Funding source must contain one of the following: CREDIT, DEBIT, PREPAID, DEPOSIT_ACCOUNT, MOBILE_MONEY_ACCOUNT or CASH. 

        :param funding_source: The funding_source of this MerchantTransfer40.
        :type funding_source: str
        """

        self._funding_source = funding_source

    @property
    def id(self):
        """Gets the id of this MerchantTransfer40.

        System generated unique merchant transfer identifier.

        :return: The id of this MerchantTransfer40.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MerchantTransfer40.

        System generated unique merchant transfer identifier.

        :param id: The id of this MerchantTransfer40.
        :type id: str
        """

        self._id = id

    @property
    def interchange_rate_designator(self):
        """Gets the interchange_rate_designator of this MerchantTransfer40.

        Indicates the interchange rate and editing rules applied to the transaction.  Type:Alphanumeric [a-zA-Z 0-9], Length: 2

        :return: The interchange_rate_designator of this MerchantTransfer40.
        :rtype: str
        """
        return self._interchange_rate_designator

    @interchange_rate_designator.setter
    def interchange_rate_designator(self, interchange_rate_designator):
        """Sets the interchange_rate_designator of this MerchantTransfer40.

        Indicates the interchange rate and editing rules applied to the transaction.  Type:Alphanumeric [a-zA-Z 0-9], Length: 2

        :param interchange_rate_designator: The interchange_rate_designator of this MerchantTransfer40.
        :type interchange_rate_designator: str
        """

        self._interchange_rate_designator = interchange_rate_designator

    @property
    def location(self):
        """Gets the location of this MerchantTransfer40.

        Location where the transaction is initiated. Valid Values- Refer 'Location URIs'.

        :return: The location of this MerchantTransfer40.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this MerchantTransfer40.

        Location where the transaction is initiated. Valid Values- Refer 'Location URIs'.

        :param location: The location of this MerchantTransfer40.
        :type location: str
        """

        self._location = location

    @property
    def original_status(self):
        """Gets the original_status of this MerchantTransfer40.

        Original status of the transfer. One of APPROVED, DECLINED, ERROR, PENDING, UNKNOWN.

        :return: The original_status of this MerchantTransfer40.
        :rtype: str
        """
        return self._original_status

    @original_status.setter
    def original_status(self, original_status):
        """Sets the original_status of this MerchantTransfer40.

        Original status of the transfer. One of APPROVED, DECLINED, ERROR, PENDING, UNKNOWN.

        :param original_status: The original_status of this MerchantTransfer40.
        :type original_status: str
        """

        self._original_status = original_status

    @property
    def participant(self):
        """Gets the participant of this MerchantTransfer40.


        :return: The participant of this MerchantTransfer40.
        :rtype: Participant53
        """
        return self._participant

    @participant.setter
    def participant(self, participant):
        """Sets the participant of this MerchantTransfer40.


        :param participant: The participant of this MerchantTransfer40.
        :type participant: Participant53
        """

        self._participant = participant

    @property
    def participation_id(self):
        """Gets the participation_id of this MerchantTransfer40.

        Participation identifier of the sender. The receiving financial institution will associate the value to the transfer.\\n\\nType: Alphanumeric Special [a-zA-Z0-9!\\\"#$%&'()*+,-./\\\\:;<=>?@[]_`{|}~], Maximum Length: 30

        :return: The participation_id of this MerchantTransfer40.
        :rtype: str
        """
        return self._participation_id

    @participation_id.setter
    def participation_id(self, participation_id):
        """Sets the participation_id of this MerchantTransfer40.

        Participation identifier of the sender. The receiving financial institution will associate the value to the transfer.\\n\\nType: Alphanumeric Special [a-zA-Z0-9!\\\"#$%&'()*+,-./\\\\:;<=>?@[]_`{|}~], Maximum Length: 30

        :param participation_id: The participation_id of this MerchantTransfer40.
        :type participation_id: str
        """

        self._participation_id = participation_id

    @property
    def payment_origination_country(self):
        """Gets the payment_origination_country of this MerchantTransfer40.

        Country where the payment originated from as an ISO 3166-1 alpha-3 country code, in upper case.   Type: Alpha [A-Z], Maximum Length: 3

        :return: The payment_origination_country of this MerchantTransfer40.
        :rtype: str
        """
        return self._payment_origination_country

    @payment_origination_country.setter
    def payment_origination_country(self, payment_origination_country):
        """Sets the payment_origination_country of this MerchantTransfer40.

        Country where the payment originated from as an ISO 3166-1 alpha-3 country code, in upper case.   Type: Alpha [A-Z], Maximum Length: 3

        :param payment_origination_country: The payment_origination_country of this MerchantTransfer40.
        :type payment_origination_country: str
        """

        self._payment_origination_country = payment_origination_country

    @property
    def payment_type(self):
        """Gets the payment_type of this MerchantTransfer40.

        P2M: Person to Merchant

        :return: The payment_type of this MerchantTransfer40.
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this MerchantTransfer40.

        P2M: Person to Merchant

        :param payment_type: The payment_type of this MerchantTransfer40.
        :type payment_type: str
        """

        self._payment_type = payment_type

    @property
    def processor_id(self):
        """Gets the processor_id of this MerchantTransfer40.

        The processor ID is a ten-digit number of the form: 9000xxxxxx, where the Single Message System-assigned processor ID will be up to the last six digits xxxxxx. If the partner is enrolled in multiple processorId numbers, the processorId number must be specified. If the partner is only enrolled in a single processorId number then system takes the onboarded value. Please contact your MasterCard Representative to enable the usage of fields in this section. Details- Numeric, 10

        :return: The processor_id of this MerchantTransfer40.
        :rtype: str
        """
        return self._processor_id

    @processor_id.setter
    def processor_id(self, processor_id):
        """Sets the processor_id of this MerchantTransfer40.

        The processor ID is a ten-digit number of the form: 9000xxxxxx, where the Single Message System-assigned processor ID will be up to the last six digits xxxxxx. If the partner is enrolled in multiple processorId numbers, the processorId number must be specified. If the partner is only enrolled in a single processorId number then system takes the onboarded value. Please contact your MasterCard Representative to enable the usage of fields in this section. Details- Numeric, 10

        :param processor_id: The processor_id of this MerchantTransfer40.
        :type processor_id: str
        """

        self._processor_id = processor_id

    @property
    def qr_data(self):
        """Gets the qr_data of this MerchantTransfer40.

        Contains QR data. For future use. Details- alpha numeric special characters 1-237.

        :return: The qr_data of this MerchantTransfer40.
        :rtype: str
        """
        return self._qr_data

    @qr_data.setter
    def qr_data(self, qr_data):
        """Sets the qr_data of this MerchantTransfer40.

        Contains QR data. For future use. Details- alpha numeric special characters 1-237.

        :param qr_data: The qr_data of this MerchantTransfer40.
        :type qr_data: str
        """

        self._qr_data = qr_data

    @property
    def recipient(self):
        """Gets the recipient of this MerchantTransfer40.


        :return: The recipient of this MerchantTransfer40.
        :rtype: Recipient43
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """Sets the recipient of this MerchantTransfer40.


        :param recipient: The recipient of this MerchantTransfer40.
        :type recipient: Recipient43
        """

        self._recipient = recipient

    @property
    def recipient_account_uri(self):
        """Gets the recipient_account_uri of this MerchantTransfer40.

        URI describing the recipient account. It will include masked account information (e.g. \"************1234\" for a card account) but will not include security codes (e.g. CVC or expiration date for a card account).

        :return: The recipient_account_uri of this MerchantTransfer40.
        :rtype: str
        """
        return self._recipient_account_uri

    @recipient_account_uri.setter
    def recipient_account_uri(self, recipient_account_uri):
        """Sets the recipient_account_uri of this MerchantTransfer40.

        URI describing the recipient account. It will include masked account information (e.g. \"************1234\" for a card account) but will not include security codes (e.g. CVC or expiration date for a card account).

        :param recipient_account_uri: The recipient_account_uri of this MerchantTransfer40.
        :type recipient_account_uri: str
        """

        self._recipient_account_uri = recipient_account_uri

    @property
    def reconciliation_data(self):
        """Gets the reconciliation_data of this MerchantTransfer40.


        :return: The reconciliation_data of this MerchantTransfer40.
        :rtype: ReconciliationData51
        """
        return self._reconciliation_data

    @reconciliation_data.setter
    def reconciliation_data(self, reconciliation_data):
        """Sets the reconciliation_data of this MerchantTransfer40.


        :param reconciliation_data: The reconciliation_data of this MerchantTransfer40.
        :type reconciliation_data: ReconciliationData51
        """

        self._reconciliation_data = reconciliation_data

    @property
    def resource_type(self):
        """Gets the resource_type of this MerchantTransfer40.

        Type of the resource that is being returned. Valid value: merchant_transfer

        :return: The resource_type of this MerchantTransfer40.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this MerchantTransfer40.

        Type of the resource that is being returned. Valid value: merchant_transfer

        :param resource_type: The resource_type of this MerchantTransfer40.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def routing_transit_number(self):
        """Gets the routing_transit_number of this MerchantTransfer40.

        The nine-digit Federal Reserve Routing and Transit (R & T) number of the acquiring institution or the nine-digit pseudo-number assigned to the acquiring institution by Mastercard. If the partner is enrolled in multiple routing transit numbers, the routing transit number must be specified. If the partner is only enrolled in a single routing transit number then system takes the onboarded value. Please contact your MasterCard Representative to enable the usage of fields in this section. Details- Numeric, 9

        :return: The routing_transit_number of this MerchantTransfer40.
        :rtype: str
        """
        return self._routing_transit_number

    @routing_transit_number.setter
    def routing_transit_number(self, routing_transit_number):
        """Sets the routing_transit_number of this MerchantTransfer40.

        The nine-digit Federal Reserve Routing and Transit (R & T) number of the acquiring institution or the nine-digit pseudo-number assigned to the acquiring institution by Mastercard. If the partner is enrolled in multiple routing transit numbers, the routing transit number must be specified. If the partner is only enrolled in a single routing transit number then system takes the onboarded value. Please contact your MasterCard Representative to enable the usage of fields in this section. Details- Numeric, 9

        :param routing_transit_number: The routing_transit_number of this MerchantTransfer40.
        :type routing_transit_number: str
        """

        self._routing_transit_number = routing_transit_number

    @property
    def sender(self):
        """Gets the sender of this MerchantTransfer40.


        :return: The sender of this MerchantTransfer40.
        :rtype: Sender41
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this MerchantTransfer40.


        :param sender: The sender of this MerchantTransfer40.
        :type sender: Sender41
        """

        self._sender = sender

    @property
    def sender_account_uri(self):
        """Gets the sender_account_uri of this MerchantTransfer40.

        URI describing the sending account. It will include masked account information (e.g. \"************1234\" for a card account) but will not include security codes (e.g. CVC or expiration date for a card account).

        :return: The sender_account_uri of this MerchantTransfer40.
        :rtype: str
        """
        return self._sender_account_uri

    @sender_account_uri.setter
    def sender_account_uri(self, sender_account_uri):
        """Sets the sender_account_uri of this MerchantTransfer40.

        URI describing the sending account. It will include masked account information (e.g. \"************1234\" for a card account) but will not include security codes (e.g. CVC or expiration date for a card account).

        :param sender_account_uri: The sender_account_uri of this MerchantTransfer40.
        :type sender_account_uri: str
        """

        self._sender_account_uri = sender_account_uri

    @property
    def status(self):
        """Gets the status of this MerchantTransfer40.

        Status of the transfer. Values: APPROVED, DECLINED, ERROR, PENDING, REVERSED, CANCELLED.

        :return: The status of this MerchantTransfer40.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MerchantTransfer40.

        Status of the transfer. Values: APPROVED, DECLINED, ERROR, PENDING, REVERSED, CANCELLED.

        :param status: The status of this MerchantTransfer40.
        :type status: str
        """

        self._status = status

    @property
    def status_timestamp(self):
        """Gets the status_timestamp of this MerchantTransfer40.

        Timestamp of when the status was changed to its current value. Details-YYYY-MM-DDTHH:MM:SS±hh[:mm] Valid Values- Refer 'Date And Time Formats

        :return: The status_timestamp of this MerchantTransfer40.
        :rtype: str
        """
        return self._status_timestamp

    @status_timestamp.setter
    def status_timestamp(self, status_timestamp):
        """Sets the status_timestamp of this MerchantTransfer40.

        Timestamp of when the status was changed to its current value. Details-YYYY-MM-DDTHH:MM:SS±hh[:mm] Valid Values- Refer 'Date And Time Formats

        :param status_timestamp: The status_timestamp of this MerchantTransfer40.
        :type status_timestamp: str
        """

        self._status_timestamp = status_timestamp

    @property
    def transaction_history(self):
        """Gets the transaction_history of this MerchantTransfer40.


        :return: The transaction_history of this MerchantTransfer40.
        :rtype: TransactionHistory47
        """
        return self._transaction_history

    @transaction_history.setter
    def transaction_history(self, transaction_history):
        """Sets the transaction_history of this MerchantTransfer40.


        :param transaction_history: The transaction_history of this MerchantTransfer40.
        :type transaction_history: TransactionHistory47
        """

        self._transaction_history = transaction_history

    @property
    def transaction_local_date_time(self):
        """Gets the transaction_local_date_time of this MerchantTransfer40.

        Local date and time when the transaction is submitted. Details-YYYY-MM-DDTHH:MM:SS±hh[:mm] 

        :return: The transaction_local_date_time of this MerchantTransfer40.
        :rtype: str
        """
        return self._transaction_local_date_time

    @transaction_local_date_time.setter
    def transaction_local_date_time(self, transaction_local_date_time):
        """Sets the transaction_local_date_time of this MerchantTransfer40.

        Local date and time when the transaction is submitted. Details-YYYY-MM-DDTHH:MM:SS±hh[:mm] 

        :param transaction_local_date_time: The transaction_local_date_time of this MerchantTransfer40.
        :type transaction_local_date_time: str
        """

        self._transaction_local_date_time = transaction_local_date_time

    @property
    def transfer_amount(self):
        """Gets the transfer_amount of this MerchantTransfer40.


        :return: The transfer_amount of this MerchantTransfer40.
        :rtype: TransferAmount46
        """
        return self._transfer_amount

    @transfer_amount.setter
    def transfer_amount(self, transfer_amount):
        """Sets the transfer_amount of this MerchantTransfer40.


        :param transfer_amount: The transfer_amount of this MerchantTransfer40.
        :type transfer_amount: TransferAmount46
        """

        self._transfer_amount = transfer_amount

    @property
    def transfer_reference(self):
        """Gets the transfer_reference of this MerchantTransfer40.

        Unique transaction reference number provided when the Transfer was created.

        :return: The transfer_reference of this MerchantTransfer40.
        :rtype: str
        """
        return self._transfer_reference

    @transfer_reference.setter
    def transfer_reference(self, transfer_reference):
        """Sets the transfer_reference of this MerchantTransfer40.

        Unique transaction reference number provided when the Transfer was created.

        :param transfer_reference: The transfer_reference of this MerchantTransfer40.
        :type transfer_reference: str
        """

        self._transfer_reference = transfer_reference
