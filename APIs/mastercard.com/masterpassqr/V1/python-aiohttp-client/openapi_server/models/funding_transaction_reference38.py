# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FundingTransactionReference38(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, network: str=None, reference_number: str=None):
        """FundingTransactionReference38 - a model defined in OpenAPI

        :param network: The network of this FundingTransactionReference38.
        :param reference_number: The reference_number of this FundingTransactionReference38.
        """
        self.openapi_types = {
            'network': str,
            'reference_number': str
        }

        self.attribute_map = {
            'network': 'network',
            'reference_number': 'reference_number'
        }

        self._network = network
        self._reference_number = reference_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FundingTransactionReference38':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FundingTransactionReference_38 of this FundingTransactionReference38.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network(self):
        """Gets the network of this FundingTransactionReference38.

        Network on which funding transaction is processed required. Valid values will be provided during partner onboarding.

        :return: The network of this FundingTransactionReference38.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this FundingTransactionReference38.

        Network on which funding transaction is processed required. Valid values will be provided during partner onboarding.

        :param network: The network of this FundingTransactionReference38.
        :type network: str
        """

        self._network = network

    @property
    def reference_number(self):
        """Gets the reference_number of this FundingTransactionReference38.

        Provide the id from the funding transfer resource.\\n\\nType: Alphanumeric Special [a-zA-Z0-9 * , - . _ ~ ], Length: 1-19

        :return: The reference_number of this FundingTransactionReference38.
        :rtype: str
        """
        return self._reference_number

    @reference_number.setter
    def reference_number(self, reference_number):
        """Sets the reference_number of this FundingTransactionReference38.

        Provide the id from the funding transfer resource.\\n\\nType: Alphanumeric Special [a-zA-Z0-9 * , - . _ ~ ], Length: 1-19

        :param reference_number: The reference_number of this FundingTransactionReference38.
        :type reference_number: str
        """
        if reference_number is None:
            raise ValueError("Invalid value for `reference_number`, must not be `None`")

        self._reference_number = reference_number
