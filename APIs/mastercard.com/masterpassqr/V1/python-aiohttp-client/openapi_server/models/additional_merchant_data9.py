# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdditionalMerchantData9(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, payment_facilitator_id: int=None, sub_merchant_id: str=None):
        """AdditionalMerchantData9 - a model defined in OpenAPI

        :param payment_facilitator_id: The payment_facilitator_id of this AdditionalMerchantData9.
        :param sub_merchant_id: The sub_merchant_id of this AdditionalMerchantData9.
        """
        self.openapi_types = {
            'payment_facilitator_id': int,
            'sub_merchant_id': str
        }

        self.attribute_map = {
            'payment_facilitator_id': 'payment_facilitator_id',
            'sub_merchant_id': 'sub_merchant_id'
        }

        self._payment_facilitator_id = payment_facilitator_id
        self._sub_merchant_id = sub_merchant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdditionalMerchantData9':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdditionalMerchantData_9 of this AdditionalMerchantData9.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def payment_facilitator_id(self):
        """Gets the payment_facilitator_id of this AdditionalMerchantData9.

        This ID is the Company ID that will be assigned during the time of registration with Mastercard for a Service Provider as Payment Facilitator. Type: Numeric [0-9]  Length: 1-11.

        :return: The payment_facilitator_id of this AdditionalMerchantData9.
        :rtype: int
        """
        return self._payment_facilitator_id

    @payment_facilitator_id.setter
    def payment_facilitator_id(self, payment_facilitator_id):
        """Sets the payment_facilitator_id of this AdditionalMerchantData9.

        This ID is the Company ID that will be assigned during the time of registration with Mastercard for a Service Provider as Payment Facilitator. Type: Numeric [0-9]  Length: 1-11.

        :param payment_facilitator_id: The payment_facilitator_id of this AdditionalMerchantData9.
        :type payment_facilitator_id: int
        """
        if payment_facilitator_id is None:
            raise ValueError("Invalid value for `payment_facilitator_id`, must not be `None`")

        self._payment_facilitator_id = payment_facilitator_id

    @property
    def sub_merchant_id(self):
        """Gets the sub_merchant_id of this AdditionalMerchantData9.

        The Sub-Merchant ID must always be the merchant ID of the sub-merchant whenever a payment facilitator is involved in a transaction. Type: Alphanumeric [a-zA-Z 0-9], Length: 1-15.

        :return: The sub_merchant_id of this AdditionalMerchantData9.
        :rtype: str
        """
        return self._sub_merchant_id

    @sub_merchant_id.setter
    def sub_merchant_id(self, sub_merchant_id):
        """Sets the sub_merchant_id of this AdditionalMerchantData9.

        The Sub-Merchant ID must always be the merchant ID of the sub-merchant whenever a payment facilitator is involved in a transaction. Type: Alphanumeric [a-zA-Z 0-9], Length: 1-15.

        :param sub_merchant_id: The sub_merchant_id of this AdditionalMerchantData9.
        :type sub_merchant_id: str
        """
        if sub_merchant_id is None:
            raise ValueError("Invalid value for `sub_merchant_id`, must not be `None`")

        self._sub_merchant_id = sub_merchant_id
