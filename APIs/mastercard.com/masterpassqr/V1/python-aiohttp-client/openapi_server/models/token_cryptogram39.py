# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TokenCryptogram39(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pan_sequence_number: str=None, type: str=None, value: str=None):
        """TokenCryptogram39 - a model defined in OpenAPI

        :param pan_sequence_number: The pan_sequence_number of this TokenCryptogram39.
        :param type: The type of this TokenCryptogram39.
        :param value: The value of this TokenCryptogram39.
        """
        self.openapi_types = {
            'pan_sequence_number': str,
            'type': str,
            'value': str
        }

        self.attribute_map = {
            'pan_sequence_number': 'pan_sequence_number',
            'type': 'type',
            'value': 'value'
        }

        self._pan_sequence_number = pan_sequence_number
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TokenCryptogram39':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TokenCryptogram_39 of this TokenCryptogram39.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pan_sequence_number(self):
        """Gets the pan_sequence_number of this TokenCryptogram39.

        PAN Sequence Number distinguishes among separate cards having the same PAN. Processors  with chip-reading capability may pass this information for Contactless Chip and Contactless Magstripe transactions. When the token_cryptogram.type contains one the following types CONTACTLESS_CHIP, CONTACTLESS_MAGSTRIPE, DSRP_CHIP, then the pan_sequence_number may be present. Details- Numeric[0-9], Length: 3

        :return: The pan_sequence_number of this TokenCryptogram39.
        :rtype: str
        """
        return self._pan_sequence_number

    @pan_sequence_number.setter
    def pan_sequence_number(self, pan_sequence_number):
        """Sets the pan_sequence_number of this TokenCryptogram39.

        PAN Sequence Number distinguishes among separate cards having the same PAN. Processors  with chip-reading capability may pass this information for Contactless Chip and Contactless Magstripe transactions. When the token_cryptogram.type contains one the following types CONTACTLESS_CHIP, CONTACTLESS_MAGSTRIPE, DSRP_CHIP, then the pan_sequence_number may be present. Details- Numeric[0-9], Length: 3

        :param pan_sequence_number: The pan_sequence_number of this TokenCryptogram39.
        :type pan_sequence_number: str
        """

        self._pan_sequence_number = pan_sequence_number

    @property
    def type(self):
        """Gets the type of this TokenCryptogram39.

        CONTACTLESS_CHIP: When shared cryptogram in token_cryptogram.value is result of a contactless tap and chip information is read by the terminal, CONTACTLESS_MAGSTRIPE: When shared cryptogram in token_cryptogram.value is result of a contactless tap and the magstripe information is read by the terminal, DSRP_UCAF: When shared cryptogram in token_cryptogram.value is result of an in-app purchase and chip information to be passed in the UCAF field, DSRP_CHIP: When shared cryptogram in token_cryptogram.value is result of an in-app purchase leveraging EMV data. Values - CONTACTLESS_CHIP, CONTACTLESS_MAGSTRIPE, DSRP_UCAF, DSRP_CHIP.

        :return: The type of this TokenCryptogram39.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TokenCryptogram39.

        CONTACTLESS_CHIP: When shared cryptogram in token_cryptogram.value is result of a contactless tap and chip information is read by the terminal, CONTACTLESS_MAGSTRIPE: When shared cryptogram in token_cryptogram.value is result of a contactless tap and the magstripe information is read by the terminal, DSRP_UCAF: When shared cryptogram in token_cryptogram.value is result of an in-app purchase and chip information to be passed in the UCAF field, DSRP_CHIP: When shared cryptogram in token_cryptogram.value is result of an in-app purchase leveraging EMV data. Values - CONTACTLESS_CHIP, CONTACTLESS_MAGSTRIPE, DSRP_UCAF, DSRP_CHIP.

        :param type: The type of this TokenCryptogram39.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def value(self):
        """Gets the value of this TokenCryptogram39.

        Contains formatted chip data. Details- alphanumeric, 1-255.

        :return: The value of this TokenCryptogram39.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this TokenCryptogram39.

        Contains formatted chip data. Details- alphanumeric, 1-255.

        :param value: The value of this TokenCryptogram39.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
