# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.additional_merchant_data74 import AdditionalMerchantData74
from openapi_server.models.address73 import Address73
from openapi_server import util


class Sender72(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_merchant_data: AdditionalMerchantData74=None, address: Address73=None, date_of_birth: str=None, email: str=None, first_name: str=None, last_name: str=None, middle_name: str=None, phone: str=None):
        """Sender72 - a model defined in OpenAPI

        :param additional_merchant_data: The additional_merchant_data of this Sender72.
        :param address: The address of this Sender72.
        :param date_of_birth: The date_of_birth of this Sender72.
        :param email: The email of this Sender72.
        :param first_name: The first_name of this Sender72.
        :param last_name: The last_name of this Sender72.
        :param middle_name: The middle_name of this Sender72.
        :param phone: The phone of this Sender72.
        """
        self.openapi_types = {
            'additional_merchant_data': AdditionalMerchantData74,
            'address': Address73,
            'date_of_birth': str,
            'email': str,
            'first_name': str,
            'last_name': str,
            'middle_name': str,
            'phone': str
        }

        self.attribute_map = {
            'additional_merchant_data': 'additional_merchant_data',
            'address': 'address',
            'date_of_birth': 'date_of_birth',
            'email': 'email',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'middle_name': 'middle_name',
            'phone': 'phone'
        }

        self._additional_merchant_data = additional_merchant_data
        self._address = address
        self._date_of_birth = date_of_birth
        self._email = email
        self._first_name = first_name
        self._last_name = last_name
        self._middle_name = middle_name
        self._phone = phone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sender72':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sender_72 of this Sender72.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_merchant_data(self):
        """Gets the additional_merchant_data of this Sender72.


        :return: The additional_merchant_data of this Sender72.
        :rtype: AdditionalMerchantData74
        """
        return self._additional_merchant_data

    @additional_merchant_data.setter
    def additional_merchant_data(self, additional_merchant_data):
        """Sets the additional_merchant_data of this Sender72.


        :param additional_merchant_data: The additional_merchant_data of this Sender72.
        :type additional_merchant_data: AdditionalMerchantData74
        """

        self._additional_merchant_data = additional_merchant_data

    @property
    def address(self):
        """Gets the address of this Sender72.


        :return: The address of this Sender72.
        :rtype: Address73
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Sender72.


        :param address: The address of this Sender72.
        :type address: Address73
        """

        self._address = address

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this Sender72.

        Date of birth of the sender as an ISO 8601 Full Date. Valid Values- Refer 'Date And Time Formats'

        :return: The date_of_birth of this Sender72.
        :rtype: str
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this Sender72.

        Date of birth of the sender as an ISO 8601 Full Date. Valid Values- Refer 'Date And Time Formats'

        :param date_of_birth: The date_of_birth of this Sender72.
        :type date_of_birth: str
        """

        self._date_of_birth = date_of_birth

    @property
    def email(self):
        """Gets the email of this Sender72.

        Email address of the sender. Phone number or email address should be provided if the partner is set up to receive notifications. Details- Conditional, 5-254

        :return: The email of this Sender72.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Sender72.

        Email address of the sender. Phone number or email address should be provided if the partner is set up to receive notifications. Details- Conditional, 5-254

        :param email: The email of this Sender72.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this Sender72.

        First name of the sender.

        :return: The first_name of this Sender72.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Sender72.

        First name of the sender.

        :param first_name: The first_name of this Sender72.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Sender72.

        Last name of the sender.

        :return: The last_name of this Sender72.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Sender72.

        Last name of the sender.

        :param last_name: The last_name of this Sender72.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def middle_name(self):
        """Gets the middle_name of this Sender72.

        Middle name of the sender.

        :return: The middle_name of this Sender72.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this Sender72.

        Middle name of the sender.

        :param middle_name: The middle_name of this Sender72.
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def phone(self):
        """Gets the phone of this Sender72.

        Phone number of the sender. Phone number or email address should be provided if the partner is set up to receive notifications. Details- Conditional, 1-15

        :return: The phone of this Sender72.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Sender72.

        Phone number of the sender. Phone number or email address should be provided if the partner is set up to receive notifications. Details- Conditional, 1-15

        :param phone: The phone of this Sender72.
        :type phone: str
        """

        self._phone = phone
