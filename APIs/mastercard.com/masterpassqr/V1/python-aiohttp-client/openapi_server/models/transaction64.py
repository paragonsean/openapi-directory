# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transaction_amount65 import TransactionAmount65
from openapi_server import util


class Transaction64(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_uri: str=None, authorization_id: str=None, convenience_amount: str=None, convenience_indicator: str=None, create_timestamp: str=None, id: str=None, network: str=None, network_status_code: str=None, network_status_description: str=None, payment_account_reference: str=None, qr_data: str=None, resource_type: str=None, retrieval_reference: str=None, status: str=None, status_reason: str=None, status_timestamp: str=None, switch_serial_number: str=None, system_trace_audit_number: str=None, transaction_amount: TransactionAmount65=None, type: str=None, unique_reference_number: str=None):
        """Transaction64 - a model defined in OpenAPI

        :param account_uri: The account_uri of this Transaction64.
        :param authorization_id: The authorization_id of this Transaction64.
        :param convenience_amount: The convenience_amount of this Transaction64.
        :param convenience_indicator: The convenience_indicator of this Transaction64.
        :param create_timestamp: The create_timestamp of this Transaction64.
        :param id: The id of this Transaction64.
        :param network: The network of this Transaction64.
        :param network_status_code: The network_status_code of this Transaction64.
        :param network_status_description: The network_status_description of this Transaction64.
        :param payment_account_reference: The payment_account_reference of this Transaction64.
        :param qr_data: The qr_data of this Transaction64.
        :param resource_type: The resource_type of this Transaction64.
        :param retrieval_reference: The retrieval_reference of this Transaction64.
        :param status: The status of this Transaction64.
        :param status_reason: The status_reason of this Transaction64.
        :param status_timestamp: The status_timestamp of this Transaction64.
        :param switch_serial_number: The switch_serial_number of this Transaction64.
        :param system_trace_audit_number: The system_trace_audit_number of this Transaction64.
        :param transaction_amount: The transaction_amount of this Transaction64.
        :param type: The type of this Transaction64.
        :param unique_reference_number: The unique_reference_number of this Transaction64.
        """
        self.openapi_types = {
            'account_uri': str,
            'authorization_id': str,
            'convenience_amount': str,
            'convenience_indicator': str,
            'create_timestamp': str,
            'id': str,
            'network': str,
            'network_status_code': str,
            'network_status_description': str,
            'payment_account_reference': str,
            'qr_data': str,
            'resource_type': str,
            'retrieval_reference': str,
            'status': str,
            'status_reason': str,
            'status_timestamp': str,
            'switch_serial_number': str,
            'system_trace_audit_number': str,
            'transaction_amount': TransactionAmount65,
            'type': str,
            'unique_reference_number': str
        }

        self.attribute_map = {
            'account_uri': 'account_uri',
            'authorization_id': 'authorization_id',
            'convenience_amount': 'convenience_amount',
            'convenience_indicator': 'convenience_indicator',
            'create_timestamp': 'create_timestamp',
            'id': 'id',
            'network': 'network',
            'network_status_code': 'network_status_code',
            'network_status_description': 'network_status_description',
            'payment_account_reference': 'payment_account_reference',
            'qr_data': 'qr_data',
            'resource_type': 'resource_type',
            'retrieval_reference': 'retrieval_reference',
            'status': 'status',
            'status_reason': 'status_reason',
            'status_timestamp': 'status_timestamp',
            'switch_serial_number': 'switch_serial_number',
            'system_trace_audit_number': 'system_trace_audit_number',
            'transaction_amount': 'transaction_amount',
            'type': 'type',
            'unique_reference_number': 'unique_reference_number'
        }

        self._account_uri = account_uri
        self._authorization_id = authorization_id
        self._convenience_amount = convenience_amount
        self._convenience_indicator = convenience_indicator
        self._create_timestamp = create_timestamp
        self._id = id
        self._network = network
        self._network_status_code = network_status_code
        self._network_status_description = network_status_description
        self._payment_account_reference = payment_account_reference
        self._qr_data = qr_data
        self._resource_type = resource_type
        self._retrieval_reference = retrieval_reference
        self._status = status
        self._status_reason = status_reason
        self._status_timestamp = status_timestamp
        self._switch_serial_number = switch_serial_number
        self._system_trace_audit_number = system_trace_audit_number
        self._transaction_amount = transaction_amount
        self._type = type
        self._unique_reference_number = unique_reference_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transaction64':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transaction_64 of this Transaction64.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_uri(self):
        """Gets the account_uri of this Transaction64.

        Scrubbed URI describing the account. It will include masked account information (e.g. \"************1234\" for a card account) but will not include security codes (e.g. CVC or expiration date for a card account). 

        :return: The account_uri of this Transaction64.
        :rtype: str
        """
        return self._account_uri

    @account_uri.setter
    def account_uri(self, account_uri):
        """Sets the account_uri of this Transaction64.

        Scrubbed URI describing the account. It will include masked account information (e.g. \"************1234\" for a card account) but will not include security codes (e.g. CVC or expiration date for a card account). 

        :param account_uri: The account_uri of this Transaction64.
        :type account_uri: str
        """

        self._account_uri = account_uri

    @property
    def authorization_id(self):
        """Gets the authorization_id of this Transaction64.

        Transaction response ID code that the authorizing institution assigns.    Type: Alphanumeric [a-zA-Z 0-9], Length: 6.

        :return: The authorization_id of this Transaction64.
        :rtype: str
        """
        return self._authorization_id

    @authorization_id.setter
    def authorization_id(self, authorization_id):
        """Sets the authorization_id of this Transaction64.

        Transaction response ID code that the authorizing institution assigns.    Type: Alphanumeric [a-zA-Z 0-9], Length: 6.

        :param authorization_id: The authorization_id of this Transaction64.
        :type authorization_id: str
        """

        self._authorization_id = authorization_id

    @property
    def convenience_amount(self):
        """Gets the convenience_amount of this Transaction64.

        Amount of the convenience fee. The decimal point is implied based on the transaction_amount.currency. \"[0-9]*\". Max Length: 12. Value must be less than payment_transfer.amount.

        :return: The convenience_amount of this Transaction64.
        :rtype: str
        """
        return self._convenience_amount

    @convenience_amount.setter
    def convenience_amount(self, convenience_amount):
        """Sets the convenience_amount of this Transaction64.

        Amount of the convenience fee. The decimal point is implied based on the transaction_amount.currency. \"[0-9]*\". Max Length: 12. Value must be less than payment_transfer.amount.

        :param convenience_amount: The convenience_amount of this Transaction64.
        :type convenience_amount: str
        """

        self._convenience_amount = convenience_amount

    @property
    def convenience_indicator(self):
        """Gets the convenience_indicator of this Transaction64.

        Convenience fee type code. Min length: 2. Max Length: 2. Valid values  (01: Indicates Consumer should be prompted to enter tip 02: Indicates that merchant would mandatorily charge a flat convenience fee 03: Indicates that merchant would charge a percentage convenience fee)

        :return: The convenience_indicator of this Transaction64.
        :rtype: str
        """
        return self._convenience_indicator

    @convenience_indicator.setter
    def convenience_indicator(self, convenience_indicator):
        """Sets the convenience_indicator of this Transaction64.

        Convenience fee type code. Min length: 2. Max Length: 2. Valid values  (01: Indicates Consumer should be prompted to enter tip 02: Indicates that merchant would mandatorily charge a flat convenience fee 03: Indicates that merchant would charge a percentage convenience fee)

        :param convenience_indicator: The convenience_indicator of this Transaction64.
        :type convenience_indicator: str
        """

        self._convenience_indicator = convenience_indicator

    @property
    def create_timestamp(self):
        """Gets the create_timestamp of this Transaction64.

        Date and time the transaction was created as an ISO 8601 Timestamp. [YYYY-MM-DDTHH:MM:SS±hh[:mm]]

        :return: The create_timestamp of this Transaction64.
        :rtype: str
        """
        return self._create_timestamp

    @create_timestamp.setter
    def create_timestamp(self, create_timestamp):
        """Sets the create_timestamp of this Transaction64.

        Date and time the transaction was created as an ISO 8601 Timestamp. [YYYY-MM-DDTHH:MM:SS±hh[:mm]]

        :param create_timestamp: The create_timestamp of this Transaction64.
        :type create_timestamp: str
        """

        self._create_timestamp = create_timestamp

    @property
    def id(self):
        """Gets the id of this Transaction64.

        System generated unique transfer identifier.

        :return: The id of this Transaction64.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Transaction64.

        System generated unique transfer identifier.

        :param id: The id of this Transaction64.
        :type id: str
        """

        self._id = id

    @property
    def network(self):
        """Gets the network of this Transaction64.

        Name of the network that processed this transaction.

        :return: The network of this Transaction64.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this Transaction64.

        Name of the network that processed this transaction.

        :param network: The network of this Transaction64.
        :type network: str
        """

        self._network = network

    @property
    def network_status_code(self):
        """Gets the network_status_code of this Transaction64.

        Network Status Code in case of Decline

        :return: The network_status_code of this Transaction64.
        :rtype: str
        """
        return self._network_status_code

    @network_status_code.setter
    def network_status_code(self, network_status_code):
        """Sets the network_status_code of this Transaction64.

        Network Status Code in case of Decline

        :param network_status_code: The network_status_code of this Transaction64.
        :type network_status_code: str
        """

        self._network_status_code = network_status_code

    @property
    def network_status_description(self):
        """Gets the network_status_description of this Transaction64.

        Network Status Description in case of Decline

        :return: The network_status_description of this Transaction64.
        :rtype: str
        """
        return self._network_status_description

    @network_status_description.setter
    def network_status_description(self, network_status_description):
        """Sets the network_status_description of this Transaction64.

        Network Status Description in case of Decline

        :param network_status_description: The network_status_description of this Transaction64.
        :type network_status_description: str
        """

        self._network_status_description = network_status_description

    @property
    def payment_account_reference(self):
        """Gets the payment_account_reference of this Transaction64.

        A unique value associated with a single PAN and attributed to all tokens associated with that PAN.    Type: Alphanumeric [a-zA-Z 0-9], Length: 29.

        :return: The payment_account_reference of this Transaction64.
        :rtype: str
        """
        return self._payment_account_reference

    @payment_account_reference.setter
    def payment_account_reference(self, payment_account_reference):
        """Sets the payment_account_reference of this Transaction64.

        A unique value associated with a single PAN and attributed to all tokens associated with that PAN.    Type: Alphanumeric [a-zA-Z 0-9], Length: 29.

        :param payment_account_reference: The payment_account_reference of this Transaction64.
        :type payment_account_reference: str
        """

        self._payment_account_reference = payment_account_reference

    @property
    def qr_data(self):
        """Gets the qr_data of this Transaction64.

        Encoded QR (Quick Response) code data. Type: Alphanumeric and special characters [a-zA-Z0-9!\"#$%&'()*+,-./\\:;<=>?@[]_`{|}~], Maximum Length: 237

        :return: The qr_data of this Transaction64.
        :rtype: str
        """
        return self._qr_data

    @qr_data.setter
    def qr_data(self, qr_data):
        """Sets the qr_data of this Transaction64.

        Encoded QR (Quick Response) code data. Type: Alphanumeric and special characters [a-zA-Z0-9!\"#$%&'()*+,-./\\:;<=>?@[]_`{|}~], Maximum Length: 237

        :param qr_data: The qr_data of this Transaction64.
        :type qr_data: str
        """

        self._qr_data = qr_data

    @property
    def resource_type(self):
        """Gets the resource_type of this Transaction64.

        Type of resource. Valid value:  transaction

        :return: The resource_type of this Transaction64.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this Transaction64.

        Type of resource. Valid value:  transaction

        :param resource_type: The resource_type of this Transaction64.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def retrieval_reference(self):
        """Gets the retrieval_reference of this Transaction64.

        Unique reference number that identifies the transaction at the network. Details- maxlength 24

        :return: The retrieval_reference of this Transaction64.
        :rtype: str
        """
        return self._retrieval_reference

    @retrieval_reference.setter
    def retrieval_reference(self, retrieval_reference):
        """Sets the retrieval_reference of this Transaction64.

        Unique reference number that identifies the transaction at the network. Details- maxlength 24

        :param retrieval_reference: The retrieval_reference of this Transaction64.
        :type retrieval_reference: str
        """

        self._retrieval_reference = retrieval_reference

    @property
    def status(self):
        """Gets the status of this Transaction64.

        Status of this transaction. One of APPROVED, DECLINED, UNKNOWN, ERROR, or PENDING.

        :return: The status of this Transaction64.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Transaction64.

        Status of this transaction. One of APPROVED, DECLINED, UNKNOWN, ERROR, or PENDING.

        :param status: The status of this Transaction64.
        :type status: str
        """

        self._status = status

    @property
    def status_reason(self):
        """Gets the status_reason of this Transaction64.

        Reason for status One of [APPROVED, DECLINED, FRAUD, CARD_EXPIRED, LIMIT_EXCEEDED,UNKNOWN, ERROR or PENDING] The following status reason will be provided based on the status APPROVED: APPROVED; UNKNOWN:UNKNOWN, ERROR:ERROR, PENDING: PENDING;DECLINED: DECLINED, FRAUD, CARD_EXPIRED, LIMIT_EXCEEDED;

        :return: The status_reason of this Transaction64.
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """Sets the status_reason of this Transaction64.

        Reason for status One of [APPROVED, DECLINED, FRAUD, CARD_EXPIRED, LIMIT_EXCEEDED,UNKNOWN, ERROR or PENDING] The following status reason will be provided based on the status APPROVED: APPROVED; UNKNOWN:UNKNOWN, ERROR:ERROR, PENDING: PENDING;DECLINED: DECLINED, FRAUD, CARD_EXPIRED, LIMIT_EXCEEDED;

        :param status_reason: The status_reason of this Transaction64.
        :type status_reason: str
        """

        self._status_reason = status_reason

    @property
    def status_timestamp(self):
        """Gets the status_timestamp of this Transaction64.

        Date and time of the status as an ISO 8601 Timestamp. [YYYY-MM-DDTHH:MM:SS±hh[:mm]]

        :return: The status_timestamp of this Transaction64.
        :rtype: str
        """
        return self._status_timestamp

    @status_timestamp.setter
    def status_timestamp(self, status_timestamp):
        """Sets the status_timestamp of this Transaction64.

        Date and time of the status as an ISO 8601 Timestamp. [YYYY-MM-DDTHH:MM:SS±hh[:mm]]

        :param status_timestamp: The status_timestamp of this Transaction64.
        :type status_timestamp: str
        """

        self._status_timestamp = status_timestamp

    @property
    def switch_serial_number(self):
        """Gets the switch_serial_number of this Transaction64.

        Unique transaction identification number (switch serial number) generated (or assigned) by the Single Message System.Type: Numeric [0-9], Maximum Length: 9

        :return: The switch_serial_number of this Transaction64.
        :rtype: str
        """
        return self._switch_serial_number

    @switch_serial_number.setter
    def switch_serial_number(self, switch_serial_number):
        """Sets the switch_serial_number of this Transaction64.

        Unique transaction identification number (switch serial number) generated (or assigned) by the Single Message System.Type: Numeric [0-9], Maximum Length: 9

        :param switch_serial_number: The switch_serial_number of this Transaction64.
        :type switch_serial_number: str
        """

        self._switch_serial_number = switch_serial_number

    @property
    def system_trace_audit_number(self):
        """Gets the system_trace_audit_number of this Transaction64.

        Unique system trace audit number for the transaction, the STAN ( system trace audit number ). Details- maxlength 6

        :return: The system_trace_audit_number of this Transaction64.
        :rtype: str
        """
        return self._system_trace_audit_number

    @system_trace_audit_number.setter
    def system_trace_audit_number(self, system_trace_audit_number):
        """Sets the system_trace_audit_number of this Transaction64.

        Unique system trace audit number for the transaction, the STAN ( system trace audit number ). Details- maxlength 6

        :param system_trace_audit_number: The system_trace_audit_number of this Transaction64.
        :type system_trace_audit_number: str
        """

        self._system_trace_audit_number = system_trace_audit_number

    @property
    def transaction_amount(self):
        """Gets the transaction_amount of this Transaction64.


        :return: The transaction_amount of this Transaction64.
        :rtype: TransactionAmount65
        """
        return self._transaction_amount

    @transaction_amount.setter
    def transaction_amount(self, transaction_amount):
        """Sets the transaction_amount of this Transaction64.


        :param transaction_amount: The transaction_amount of this Transaction64.
        :type transaction_amount: TransactionAmount65
        """

        self._transaction_amount = transaction_amount

    @property
    def type(self):
        """Gets the type of this Transaction64.

        Type of the transaction. One of: FUNDING, PAYMENT, FUNDING_REVERSAL, or PAYMENT_REVERSAL.

        :return: The type of this Transaction64.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Transaction64.

        Type of the transaction. One of: FUNDING, PAYMENT, FUNDING_REVERSAL, or PAYMENT_REVERSAL.

        :param type: The type of this Transaction64.
        :type type: str
        """

        self._type = type

    @property
    def unique_reference_number(self):
        """Gets the unique_reference_number of this Transaction64.

        Unique reference number for the transaction. Type: Alphanumeric Special [a-zA-Z0-9 * , - . _ ~ ], Length: 19

        :return: The unique_reference_number of this Transaction64.
        :rtype: str
        """
        return self._unique_reference_number

    @unique_reference_number.setter
    def unique_reference_number(self, unique_reference_number):
        """Sets the unique_reference_number of this Transaction64.

        Unique reference number for the transaction. Type: Alphanumeric Special [a-zA-Z0-9 * , - . _ ~ ], Length: 19

        :param unique_reference_number: The unique_reference_number of this Transaction64.
        :type unique_reference_number: str
        """

        self._unique_reference_number = unique_reference_number
