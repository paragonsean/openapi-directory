# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.participant85 import Participant85
from openapi_server.models.recipient75 import Recipient75
from openapi_server.models.reconciliation_data83 import ReconciliationData83
from openapi_server.models.sender72 import Sender72
from openapi_server.models.transaction_history79 import TransactionHistory79
from openapi_server.models.transfer_amount78 import TransferAmount78
from openapi_server import util


class MerchantTransfer71(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: str=None, created: str=None, device_id: str=None, digital_account_reference_number: str=None, funding_source: str=None, id: str=None, interchange_rate_designator: str=None, location: str=None, original_status: str=None, participant: Participant85=None, payment_origination_country: str=None, payment_type: str=None, processor_id: str=None, recipient: Recipient75=None, recipient_account_uri: str=None, reconciliation_data: ReconciliationData83=None, resource_type: str=None, routing_transit_number: str=None, sender: Sender72=None, sender_account_uri: str=None, status: str=None, status_timestamp: str=None, transaction_history: TransactionHistory79=None, transaction_local_date_time: str=None, transfer_amount: TransferAmount78=None, transfer_reference: str=None):
        """MerchantTransfer71 - a model defined in OpenAPI

        :param channel: The channel of this MerchantTransfer71.
        :param created: The created of this MerchantTransfer71.
        :param device_id: The device_id of this MerchantTransfer71.
        :param digital_account_reference_number: The digital_account_reference_number of this MerchantTransfer71.
        :param funding_source: The funding_source of this MerchantTransfer71.
        :param id: The id of this MerchantTransfer71.
        :param interchange_rate_designator: The interchange_rate_designator of this MerchantTransfer71.
        :param location: The location of this MerchantTransfer71.
        :param original_status: The original_status of this MerchantTransfer71.
        :param participant: The participant of this MerchantTransfer71.
        :param payment_origination_country: The payment_origination_country of this MerchantTransfer71.
        :param payment_type: The payment_type of this MerchantTransfer71.
        :param processor_id: The processor_id of this MerchantTransfer71.
        :param recipient: The recipient of this MerchantTransfer71.
        :param recipient_account_uri: The recipient_account_uri of this MerchantTransfer71.
        :param reconciliation_data: The reconciliation_data of this MerchantTransfer71.
        :param resource_type: The resource_type of this MerchantTransfer71.
        :param routing_transit_number: The routing_transit_number of this MerchantTransfer71.
        :param sender: The sender of this MerchantTransfer71.
        :param sender_account_uri: The sender_account_uri of this MerchantTransfer71.
        :param status: The status of this MerchantTransfer71.
        :param status_timestamp: The status_timestamp of this MerchantTransfer71.
        :param transaction_history: The transaction_history of this MerchantTransfer71.
        :param transaction_local_date_time: The transaction_local_date_time of this MerchantTransfer71.
        :param transfer_amount: The transfer_amount of this MerchantTransfer71.
        :param transfer_reference: The transfer_reference of this MerchantTransfer71.
        """
        self.openapi_types = {
            'channel': str,
            'created': str,
            'device_id': str,
            'digital_account_reference_number': str,
            'funding_source': str,
            'id': str,
            'interchange_rate_designator': str,
            'location': str,
            'original_status': str,
            'participant': Participant85,
            'payment_origination_country': str,
            'payment_type': str,
            'processor_id': str,
            'recipient': Recipient75,
            'recipient_account_uri': str,
            'reconciliation_data': ReconciliationData83,
            'resource_type': str,
            'routing_transit_number': str,
            'sender': Sender72,
            'sender_account_uri': str,
            'status': str,
            'status_timestamp': str,
            'transaction_history': TransactionHistory79,
            'transaction_local_date_time': str,
            'transfer_amount': TransferAmount78,
            'transfer_reference': str
        }

        self.attribute_map = {
            'channel': 'channel',
            'created': 'created',
            'device_id': 'device_id',
            'digital_account_reference_number': 'digital_account_reference_number',
            'funding_source': 'funding_source',
            'id': 'id',
            'interchange_rate_designator': 'interchange_rate_designator',
            'location': 'location',
            'original_status': 'original_status',
            'participant': 'participant',
            'payment_origination_country': 'payment_origination_country',
            'payment_type': 'payment_type',
            'processor_id': 'processor_id',
            'recipient': 'recipient',
            'recipient_account_uri': 'recipient_account_uri',
            'reconciliation_data': 'reconciliation_data',
            'resource_type': 'resource_type',
            'routing_transit_number': 'routing_transit_number',
            'sender': 'sender',
            'sender_account_uri': 'sender_account_uri',
            'status': 'status',
            'status_timestamp': 'status_timestamp',
            'transaction_history': 'transaction_history',
            'transaction_local_date_time': 'transaction_local_date_time',
            'transfer_amount': 'transfer_amount',
            'transfer_reference': 'transfer_reference'
        }

        self._channel = channel
        self._created = created
        self._device_id = device_id
        self._digital_account_reference_number = digital_account_reference_number
        self._funding_source = funding_source
        self._id = id
        self._interchange_rate_designator = interchange_rate_designator
        self._location = location
        self._original_status = original_status
        self._participant = participant
        self._payment_origination_country = payment_origination_country
        self._payment_type = payment_type
        self._processor_id = processor_id
        self._recipient = recipient
        self._recipient_account_uri = recipient_account_uri
        self._reconciliation_data = reconciliation_data
        self._resource_type = resource_type
        self._routing_transit_number = routing_transit_number
        self._sender = sender
        self._sender_account_uri = sender_account_uri
        self._status = status
        self._status_timestamp = status_timestamp
        self._transaction_history = transaction_history
        self._transaction_local_date_time = transaction_local_date_time
        self._transfer_amount = transfer_amount
        self._transfer_reference = transfer_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MerchantTransfer71':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MerchantTransfer_71 of this MerchantTransfer71.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this MerchantTransfer71.

        Initiation channel of the transfer request. Values: WEB, MOBILE, BANK, KIOSK.

        :return: The channel of this MerchantTransfer71.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this MerchantTransfer71.

        Initiation channel of the transfer request. Values: WEB, MOBILE, BANK, KIOSK.

        :param channel: The channel of this MerchantTransfer71.
        :type channel: str
        """

        self._channel = channel

    @property
    def created(self):
        """Gets the created of this MerchantTransfer71.

        Date and time the original transfer was created as an ISO 8601 Timestamp. Details- YYYY-MM-DDTHH:MM:SS±hh[:mm] Valid Values- Refer 'Date And Time Formats

        :return: The created of this MerchantTransfer71.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this MerchantTransfer71.

        Date and time the original transfer was created as an ISO 8601 Timestamp. Details- YYYY-MM-DDTHH:MM:SS±hh[:mm] Valid Values- Refer 'Date And Time Formats

        :param created: The created of this MerchantTransfer71.
        :type created: str
        """

        self._created = created

    @property
    def device_id(self):
        """Gets the device_id of this MerchantTransfer71.

        The serial number of a device that initiated the transfer.

        :return: The device_id of this MerchantTransfer71.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this MerchantTransfer71.

        The serial number of a device that initiated the transfer.

        :param device_id: The device_id of this MerchantTransfer71.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def digital_account_reference_number(self):
        """Gets the digital_account_reference_number of this MerchantTransfer71.

        Reference number identifying the digital account reference number. Details- Numeric, Length 1-20

        :return: The digital_account_reference_number of this MerchantTransfer71.
        :rtype: str
        """
        return self._digital_account_reference_number

    @digital_account_reference_number.setter
    def digital_account_reference_number(self, digital_account_reference_number):
        """Sets the digital_account_reference_number of this MerchantTransfer71.

        Reference number identifying the digital account reference number. Details- Numeric, Length 1-20

        :param digital_account_reference_number: The digital_account_reference_number of this MerchantTransfer71.
        :type digital_account_reference_number: str
        """

        self._digital_account_reference_number = digital_account_reference_number

    @property
    def funding_source(self):
        """Gets the funding_source of this MerchantTransfer71.

        Funding source must contain one of the following: CREDIT, DEBIT, PREPAID, DEPOSIT_ACCOUNT, MOBILE_MONEY_ACCOUNT, CASH. 

        :return: The funding_source of this MerchantTransfer71.
        :rtype: str
        """
        return self._funding_source

    @funding_source.setter
    def funding_source(self, funding_source):
        """Sets the funding_source of this MerchantTransfer71.

        Funding source must contain one of the following: CREDIT, DEBIT, PREPAID, DEPOSIT_ACCOUNT, MOBILE_MONEY_ACCOUNT, CASH. 

        :param funding_source: The funding_source of this MerchantTransfer71.
        :type funding_source: str
        """

        self._funding_source = funding_source

    @property
    def id(self):
        """Gets the id of this MerchantTransfer71.

        System generated unique merchant transfer identifier.

        :return: The id of this MerchantTransfer71.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MerchantTransfer71.

        System generated unique merchant transfer identifier.

        :param id: The id of this MerchantTransfer71.
        :type id: str
        """

        self._id = id

    @property
    def interchange_rate_designator(self):
        """Gets the interchange_rate_designator of this MerchantTransfer71.

        Indicates the interchange rate and editing rules applied to the transaction. Field is applicable for Europe OIs only.  Type:Alphanumeric [a-zA-Z 0-9], Length: 2

        :return: The interchange_rate_designator of this MerchantTransfer71.
        :rtype: str
        """
        return self._interchange_rate_designator

    @interchange_rate_designator.setter
    def interchange_rate_designator(self, interchange_rate_designator):
        """Sets the interchange_rate_designator of this MerchantTransfer71.

        Indicates the interchange rate and editing rules applied to the transaction. Field is applicable for Europe OIs only.  Type:Alphanumeric [a-zA-Z 0-9], Length: 2

        :param interchange_rate_designator: The interchange_rate_designator of this MerchantTransfer71.
        :type interchange_rate_designator: str
        """

        self._interchange_rate_designator = interchange_rate_designator

    @property
    def location(self):
        """Gets the location of this MerchantTransfer71.

        Location where the transaction is initiated. Valid Values- Refer 'Location URIs'.

        :return: The location of this MerchantTransfer71.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this MerchantTransfer71.

        Location where the transaction is initiated. Valid Values- Refer 'Location URIs'.

        :param location: The location of this MerchantTransfer71.
        :type location: str
        """

        self._location = location

    @property
    def original_status(self):
        """Gets the original_status of this MerchantTransfer71.

        Original status of the transfer. One of APPROVED, DECLINED, ERROR, PENDING, UNKNOWN.

        :return: The original_status of this MerchantTransfer71.
        :rtype: str
        """
        return self._original_status

    @original_status.setter
    def original_status(self, original_status):
        """Sets the original_status of this MerchantTransfer71.

        Original status of the transfer. One of APPROVED, DECLINED, ERROR, PENDING, UNKNOWN.

        :param original_status: The original_status of this MerchantTransfer71.
        :type original_status: str
        """

        self._original_status = original_status

    @property
    def participant(self):
        """Gets the participant of this MerchantTransfer71.


        :return: The participant of this MerchantTransfer71.
        :rtype: Participant85
        """
        return self._participant

    @participant.setter
    def participant(self, participant):
        """Sets the participant of this MerchantTransfer71.


        :param participant: The participant of this MerchantTransfer71.
        :type participant: Participant85
        """

        self._participant = participant

    @property
    def payment_origination_country(self):
        """Gets the payment_origination_country of this MerchantTransfer71.

        Country where the payment originated from as an ISO 3166-1 alpha-3 country code, in uppercase. Details- Alpha, Length: 3

        :return: The payment_origination_country of this MerchantTransfer71.
        :rtype: str
        """
        return self._payment_origination_country

    @payment_origination_country.setter
    def payment_origination_country(self, payment_origination_country):
        """Sets the payment_origination_country of this MerchantTransfer71.

        Country where the payment originated from as an ISO 3166-1 alpha-3 country code, in uppercase. Details- Alpha, Length: 3

        :param payment_origination_country: The payment_origination_country of this MerchantTransfer71.
        :type payment_origination_country: str
        """

        self._payment_origination_country = payment_origination_country

    @property
    def payment_type(self):
        """Gets the payment_type of this MerchantTransfer71.

        P2M: Person to Merchant

        :return: The payment_type of this MerchantTransfer71.
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this MerchantTransfer71.

        P2M: Person to Merchant

        :param payment_type: The payment_type of this MerchantTransfer71.
        :type payment_type: str
        """

        self._payment_type = payment_type

    @property
    def processor_id(self):
        """Gets the processor_id of this MerchantTransfer71.

        The processor ID is a ten-digit number of the form: 9000xxxxxx, where the Single Message System-assigned processor ID will be up to the last six digits xxxxxx. If the partner is enrolled in multiple processorId numbers, the processorId number must be specified. If the partner is only enrolled in a single processorId number then system takes the onboarded value. Please contact your MasterCard Representative to enable the usage of fields in this section. Details- Numeric, 10

        :return: The processor_id of this MerchantTransfer71.
        :rtype: str
        """
        return self._processor_id

    @processor_id.setter
    def processor_id(self, processor_id):
        """Sets the processor_id of this MerchantTransfer71.

        The processor ID is a ten-digit number of the form: 9000xxxxxx, where the Single Message System-assigned processor ID will be up to the last six digits xxxxxx. If the partner is enrolled in multiple processorId numbers, the processorId number must be specified. If the partner is only enrolled in a single processorId number then system takes the onboarded value. Please contact your MasterCard Representative to enable the usage of fields in this section. Details- Numeric, 10

        :param processor_id: The processor_id of this MerchantTransfer71.
        :type processor_id: str
        """

        self._processor_id = processor_id

    @property
    def recipient(self):
        """Gets the recipient of this MerchantTransfer71.


        :return: The recipient of this MerchantTransfer71.
        :rtype: Recipient75
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """Sets the recipient of this MerchantTransfer71.


        :param recipient: The recipient of this MerchantTransfer71.
        :type recipient: Recipient75
        """

        self._recipient = recipient

    @property
    def recipient_account_uri(self):
        """Gets the recipient_account_uri of this MerchantTransfer71.

        URI describing the recipient/merchant account. It will include masked account information (e.g. \"************1234\" for a card account) but will not include security codes (e.g. CVC or expiration date for a card account).

        :return: The recipient_account_uri of this MerchantTransfer71.
        :rtype: str
        """
        return self._recipient_account_uri

    @recipient_account_uri.setter
    def recipient_account_uri(self, recipient_account_uri):
        """Sets the recipient_account_uri of this MerchantTransfer71.

        URI describing the recipient/merchant account. It will include masked account information (e.g. \"************1234\" for a card account) but will not include security codes (e.g. CVC or expiration date for a card account).

        :param recipient_account_uri: The recipient_account_uri of this MerchantTransfer71.
        :type recipient_account_uri: str
        """

        self._recipient_account_uri = recipient_account_uri

    @property
    def reconciliation_data(self):
        """Gets the reconciliation_data of this MerchantTransfer71.


        :return: The reconciliation_data of this MerchantTransfer71.
        :rtype: ReconciliationData83
        """
        return self._reconciliation_data

    @reconciliation_data.setter
    def reconciliation_data(self, reconciliation_data):
        """Sets the reconciliation_data of this MerchantTransfer71.


        :param reconciliation_data: The reconciliation_data of this MerchantTransfer71.
        :type reconciliation_data: ReconciliationData83
        """

        self._reconciliation_data = reconciliation_data

    @property
    def resource_type(self):
        """Gets the resource_type of this MerchantTransfer71.

        Type of the resource that is being returned. Valid value: merchant_transfer

        :return: The resource_type of this MerchantTransfer71.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this MerchantTransfer71.

        Type of the resource that is being returned. Valid value: merchant_transfer

        :param resource_type: The resource_type of this MerchantTransfer71.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def routing_transit_number(self):
        """Gets the routing_transit_number of this MerchantTransfer71.

        The nine-digit Federal Reserve Routing and Transit (R & T) number of the acquiring institution or the nine-digit pseudo-number assigned to the acquiring institution by Mastercard. If the partner is enrolled in multiple routing transit numbers, the routing transit number must be specified. If the partner is only enrolled in a single routing transit number then system takes the onboarded value. Please contact your MasterCard Representative to enable the usage of fields in this section. Details- Numeric, 9

        :return: The routing_transit_number of this MerchantTransfer71.
        :rtype: str
        """
        return self._routing_transit_number

    @routing_transit_number.setter
    def routing_transit_number(self, routing_transit_number):
        """Sets the routing_transit_number of this MerchantTransfer71.

        The nine-digit Federal Reserve Routing and Transit (R & T) number of the acquiring institution or the nine-digit pseudo-number assigned to the acquiring institution by Mastercard. If the partner is enrolled in multiple routing transit numbers, the routing transit number must be specified. If the partner is only enrolled in a single routing transit number then system takes the onboarded value. Please contact your MasterCard Representative to enable the usage of fields in this section. Details- Numeric, 9

        :param routing_transit_number: The routing_transit_number of this MerchantTransfer71.
        :type routing_transit_number: str
        """

        self._routing_transit_number = routing_transit_number

    @property
    def sender(self):
        """Gets the sender of this MerchantTransfer71.


        :return: The sender of this MerchantTransfer71.
        :rtype: Sender72
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this MerchantTransfer71.


        :param sender: The sender of this MerchantTransfer71.
        :type sender: Sender72
        """

        self._sender = sender

    @property
    def sender_account_uri(self):
        """Gets the sender_account_uri of this MerchantTransfer71.

        URI describing the sending account. It will include masked account information (e.g. \"************1234\" for a card account) but will not include security codes (e.g. CVC or expiration date for a card account).

        :return: The sender_account_uri of this MerchantTransfer71.
        :rtype: str
        """
        return self._sender_account_uri

    @sender_account_uri.setter
    def sender_account_uri(self, sender_account_uri):
        """Sets the sender_account_uri of this MerchantTransfer71.

        URI describing the sending account. It will include masked account information (e.g. \"************1234\" for a card account) but will not include security codes (e.g. CVC or expiration date for a card account).

        :param sender_account_uri: The sender_account_uri of this MerchantTransfer71.
        :type sender_account_uri: str
        """

        self._sender_account_uri = sender_account_uri

    @property
    def status(self):
        """Gets the status of this MerchantTransfer71.

        Status of the transfer. Values: APPROVED, DECLINED, ERROR, PENDING, REVERSED, CANCELLED.

        :return: The status of this MerchantTransfer71.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MerchantTransfer71.

        Status of the transfer. Values: APPROVED, DECLINED, ERROR, PENDING, REVERSED, CANCELLED.

        :param status: The status of this MerchantTransfer71.
        :type status: str
        """

        self._status = status

    @property
    def status_timestamp(self):
        """Gets the status_timestamp of this MerchantTransfer71.

        Timestamp of when the status was changed to its current value. Details-YYYY-MM-DDTHH:MM:SS±hh[:mm] Valid Values- Refer 'Date And Time Formats

        :return: The status_timestamp of this MerchantTransfer71.
        :rtype: str
        """
        return self._status_timestamp

    @status_timestamp.setter
    def status_timestamp(self, status_timestamp):
        """Sets the status_timestamp of this MerchantTransfer71.

        Timestamp of when the status was changed to its current value. Details-YYYY-MM-DDTHH:MM:SS±hh[:mm] Valid Values- Refer 'Date And Time Formats

        :param status_timestamp: The status_timestamp of this MerchantTransfer71.
        :type status_timestamp: str
        """

        self._status_timestamp = status_timestamp

    @property
    def transaction_history(self):
        """Gets the transaction_history of this MerchantTransfer71.


        :return: The transaction_history of this MerchantTransfer71.
        :rtype: TransactionHistory79
        """
        return self._transaction_history

    @transaction_history.setter
    def transaction_history(self, transaction_history):
        """Sets the transaction_history of this MerchantTransfer71.


        :param transaction_history: The transaction_history of this MerchantTransfer71.
        :type transaction_history: TransactionHistory79
        """

        self._transaction_history = transaction_history

    @property
    def transaction_local_date_time(self):
        """Gets the transaction_local_date_time of this MerchantTransfer71.

        Local date and time when the transaction is submitted. Details-YYYY-MM-DDTHH:MM:SS±hh[:mm] 

        :return: The transaction_local_date_time of this MerchantTransfer71.
        :rtype: str
        """
        return self._transaction_local_date_time

    @transaction_local_date_time.setter
    def transaction_local_date_time(self, transaction_local_date_time):
        """Sets the transaction_local_date_time of this MerchantTransfer71.

        Local date and time when the transaction is submitted. Details-YYYY-MM-DDTHH:MM:SS±hh[:mm] 

        :param transaction_local_date_time: The transaction_local_date_time of this MerchantTransfer71.
        :type transaction_local_date_time: str
        """

        self._transaction_local_date_time = transaction_local_date_time

    @property
    def transfer_amount(self):
        """Gets the transfer_amount of this MerchantTransfer71.


        :return: The transfer_amount of this MerchantTransfer71.
        :rtype: TransferAmount78
        """
        return self._transfer_amount

    @transfer_amount.setter
    def transfer_amount(self, transfer_amount):
        """Sets the transfer_amount of this MerchantTransfer71.


        :param transfer_amount: The transfer_amount of this MerchantTransfer71.
        :type transfer_amount: TransferAmount78
        """

        self._transfer_amount = transfer_amount

    @property
    def transfer_reference(self):
        """Gets the transfer_reference of this MerchantTransfer71.

        Unique transaction reference number provided when the Transfer was created.

        :return: The transfer_reference of this MerchantTransfer71.
        :rtype: str
        """
        return self._transfer_reference

    @transfer_reference.setter
    def transfer_reference(self, transfer_reference):
        """Sets the transfer_reference of this MerchantTransfer71.

        Unique transaction reference number provided when the Transfer was created.

        :param transfer_reference: The transfer_reference of this MerchantTransfer71.
        :type transfer_reference: str
        """

        self._transfer_reference = transfer_reference
