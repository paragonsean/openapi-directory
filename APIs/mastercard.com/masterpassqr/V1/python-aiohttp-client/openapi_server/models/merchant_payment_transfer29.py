# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.funding_transaction_reference38 import FundingTransactionReference38
from openapi_server.models.participant37 import Participant37
from openapi_server.models.recipient32 import Recipient32
from openapi_server.models.reconciliation_data35 import ReconciliationData35
from openapi_server.models.sender30 import Sender30
from openapi_server.models.token_cryptogram39 import TokenCryptogram39
from openapi_server import util


class MerchantPaymentTransfer29(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_message: str=None, amount: str=None, authentication_value: str=None, channel: str=None, convenience_amount: str=None, convenience_indicator: str=None, currency: str=None, device_id: str=None, digital_account_reference_number: str=None, funding_source: str=None, funding_transaction_reference: FundingTransactionReference38=None, interchange_rate_designator: str=None, location: str=None, mastercard_assigned_id: str=None, participant: Participant37=None, participation_id: str=None, payment_origination_country: str=None, payment_type: str=None, processor_id: str=None, qr_data: str=None, recipient: Recipient32=None, recipient_account_uri: str=None, reconciliation_data: ReconciliationData35=None, routing_transit_number: str=None, sender: Sender30=None, sender_account_uri: str=None, token_cryptogram: TokenCryptogram39=None, transaction_local_date_time: str=None, transfer_reference: str=None):
        """MerchantPaymentTransfer29 - a model defined in OpenAPI

        :param additional_message: The additional_message of this MerchantPaymentTransfer29.
        :param amount: The amount of this MerchantPaymentTransfer29.
        :param authentication_value: The authentication_value of this MerchantPaymentTransfer29.
        :param channel: The channel of this MerchantPaymentTransfer29.
        :param convenience_amount: The convenience_amount of this MerchantPaymentTransfer29.
        :param convenience_indicator: The convenience_indicator of this MerchantPaymentTransfer29.
        :param currency: The currency of this MerchantPaymentTransfer29.
        :param device_id: The device_id of this MerchantPaymentTransfer29.
        :param digital_account_reference_number: The digital_account_reference_number of this MerchantPaymentTransfer29.
        :param funding_source: The funding_source of this MerchantPaymentTransfer29.
        :param funding_transaction_reference: The funding_transaction_reference of this MerchantPaymentTransfer29.
        :param interchange_rate_designator: The interchange_rate_designator of this MerchantPaymentTransfer29.
        :param location: The location of this MerchantPaymentTransfer29.
        :param mastercard_assigned_id: The mastercard_assigned_id of this MerchantPaymentTransfer29.
        :param participant: The participant of this MerchantPaymentTransfer29.
        :param participation_id: The participation_id of this MerchantPaymentTransfer29.
        :param payment_origination_country: The payment_origination_country of this MerchantPaymentTransfer29.
        :param payment_type: The payment_type of this MerchantPaymentTransfer29.
        :param processor_id: The processor_id of this MerchantPaymentTransfer29.
        :param qr_data: The qr_data of this MerchantPaymentTransfer29.
        :param recipient: The recipient of this MerchantPaymentTransfer29.
        :param recipient_account_uri: The recipient_account_uri of this MerchantPaymentTransfer29.
        :param reconciliation_data: The reconciliation_data of this MerchantPaymentTransfer29.
        :param routing_transit_number: The routing_transit_number of this MerchantPaymentTransfer29.
        :param sender: The sender of this MerchantPaymentTransfer29.
        :param sender_account_uri: The sender_account_uri of this MerchantPaymentTransfer29.
        :param token_cryptogram: The token_cryptogram of this MerchantPaymentTransfer29.
        :param transaction_local_date_time: The transaction_local_date_time of this MerchantPaymentTransfer29.
        :param transfer_reference: The transfer_reference of this MerchantPaymentTransfer29.
        """
        self.openapi_types = {
            'additional_message': str,
            'amount': str,
            'authentication_value': str,
            'channel': str,
            'convenience_amount': str,
            'convenience_indicator': str,
            'currency': str,
            'device_id': str,
            'digital_account_reference_number': str,
            'funding_source': str,
            'funding_transaction_reference': FundingTransactionReference38,
            'interchange_rate_designator': str,
            'location': str,
            'mastercard_assigned_id': str,
            'participant': Participant37,
            'participation_id': str,
            'payment_origination_country': str,
            'payment_type': str,
            'processor_id': str,
            'qr_data': str,
            'recipient': Recipient32,
            'recipient_account_uri': str,
            'reconciliation_data': ReconciliationData35,
            'routing_transit_number': str,
            'sender': Sender30,
            'sender_account_uri': str,
            'token_cryptogram': TokenCryptogram39,
            'transaction_local_date_time': str,
            'transfer_reference': str
        }

        self.attribute_map = {
            'additional_message': 'additional_message',
            'amount': 'amount',
            'authentication_value': 'authentication_value',
            'channel': 'channel',
            'convenience_amount': 'convenience_amount',
            'convenience_indicator': 'convenience_indicator',
            'currency': 'currency',
            'device_id': 'device_id',
            'digital_account_reference_number': 'digital_account_reference_number',
            'funding_source': 'funding_source',
            'funding_transaction_reference': 'funding_transaction_reference',
            'interchange_rate_designator': 'interchange_rate_designator',
            'location': 'location',
            'mastercard_assigned_id': 'mastercard_assigned_id',
            'participant': 'participant',
            'participation_id': 'participation_id',
            'payment_origination_country': 'payment_origination_country',
            'payment_type': 'payment_type',
            'processor_id': 'processor_id',
            'qr_data': 'qr_data',
            'recipient': 'recipient',
            'recipient_account_uri': 'recipient_account_uri',
            'reconciliation_data': 'reconciliation_data',
            'routing_transit_number': 'routing_transit_number',
            'sender': 'sender',
            'sender_account_uri': 'sender_account_uri',
            'token_cryptogram': 'token_cryptogram',
            'transaction_local_date_time': 'transaction_local_date_time',
            'transfer_reference': 'transfer_reference'
        }

        self._additional_message = additional_message
        self._amount = amount
        self._authentication_value = authentication_value
        self._channel = channel
        self._convenience_amount = convenience_amount
        self._convenience_indicator = convenience_indicator
        self._currency = currency
        self._device_id = device_id
        self._digital_account_reference_number = digital_account_reference_number
        self._funding_source = funding_source
        self._funding_transaction_reference = funding_transaction_reference
        self._interchange_rate_designator = interchange_rate_designator
        self._location = location
        self._mastercard_assigned_id = mastercard_assigned_id
        self._participant = participant
        self._participation_id = participation_id
        self._payment_origination_country = payment_origination_country
        self._payment_type = payment_type
        self._processor_id = processor_id
        self._qr_data = qr_data
        self._recipient = recipient
        self._recipient_account_uri = recipient_account_uri
        self._reconciliation_data = reconciliation_data
        self._routing_transit_number = routing_transit_number
        self._sender = sender
        self._sender_account_uri = sender_account_uri
        self._token_cryptogram = token_cryptogram
        self._transaction_local_date_time = transaction_local_date_time
        self._transfer_reference = transfer_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MerchantPaymentTransfer29':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MerchantPaymentTransfer_29 of this MerchantPaymentTransfer29.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_message(self):
        """Gets the additional_message of this MerchantPaymentTransfer29.

        Message a financial institution will associate to the transfer and may display. \\n\\nType: Alphanumeric Special [a-zA-Z0-9!\\\"#$%&'()*+,-./\\\\:;<=>?@[]_`{|}~], Length: 1-65

        :return: The additional_message of this MerchantPaymentTransfer29.
        :rtype: str
        """
        return self._additional_message

    @additional_message.setter
    def additional_message(self, additional_message):
        """Sets the additional_message of this MerchantPaymentTransfer29.

        Message a financial institution will associate to the transfer and may display. \\n\\nType: Alphanumeric Special [a-zA-Z0-9!\\\"#$%&'()*+,-./\\\\:;<=>?@[]_`{|}~], Length: 1-65

        :param additional_message: The additional_message of this MerchantPaymentTransfer29.
        :type additional_message: str
        """

        self._additional_message = additional_message

    @property
    def amount(self):
        """Gets the amount of this MerchantPaymentTransfer29.

        Amount of the transfer. The decimal point is implied based on the payment transfer currency. Details- 1-999999999999

        :return: The amount of this MerchantPaymentTransfer29.
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this MerchantPaymentTransfer29.

        Amount of the transfer. The decimal point is implied based on the payment transfer currency. Details- 1-999999999999

        :param amount: The amount of this MerchantPaymentTransfer29.
        :type amount: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def authentication_value(self):
        """Gets the authentication_value of this MerchantPaymentTransfer29.

        List of name/value pairs containing authentication  values. Refer 'Authentication Value URIs'

        :return: The authentication_value of this MerchantPaymentTransfer29.
        :rtype: str
        """
        return self._authentication_value

    @authentication_value.setter
    def authentication_value(self, authentication_value):
        """Sets the authentication_value of this MerchantPaymentTransfer29.

        List of name/value pairs containing authentication  values. Refer 'Authentication Value URIs'

        :param authentication_value: The authentication_value of this MerchantPaymentTransfer29.
        :type authentication_value: str
        """

        self._authentication_value = authentication_value

    @property
    def channel(self):
        """Gets the channel of this MerchantPaymentTransfer29.

        Initiation channel of the transfer request. This value can be defined in the onboarding process instead of passing in every call. Values: WEB, MOBILE, BANK, KIOSK. Details- Conditional

        :return: The channel of this MerchantPaymentTransfer29.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this MerchantPaymentTransfer29.

        Initiation channel of the transfer request. This value can be defined in the onboarding process instead of passing in every call. Values: WEB, MOBILE, BANK, KIOSK. Details- Conditional

        :param channel: The channel of this MerchantPaymentTransfer29.
        :type channel: str
        """

        self._channel = channel

    @property
    def convenience_amount(self):
        """Gets the convenience_amount of this MerchantPaymentTransfer29.

        Tip or convenience amount in transaction currency. Length:1-12 numeric. If present, then convenience_indicator is also required.

        :return: The convenience_amount of this MerchantPaymentTransfer29.
        :rtype: str
        """
        return self._convenience_amount

    @convenience_amount.setter
    def convenience_amount(self, convenience_amount):
        """Sets the convenience_amount of this MerchantPaymentTransfer29.

        Tip or convenience amount in transaction currency. Length:1-12 numeric. If present, then convenience_indicator is also required.

        :param convenience_amount: The convenience_amount of this MerchantPaymentTransfer29.
        :type convenience_amount: str
        """

        self._convenience_amount = convenience_amount

    @property
    def convenience_indicator(self):
        """Gets the convenience_indicator of this MerchantPaymentTransfer29.

        Convenience fee type code. Min length: 2. Max Length: 2. Valid values are 01,02 or 03. 01:Indicates consumer should be prompted to enter tip. 02:Indicates the merchant would mandatorily charge a flat convenience fee. 03:Indicates that merchant would charge a percentage convenience fee. Required if convenience_amount is provided.

        :return: The convenience_indicator of this MerchantPaymentTransfer29.
        :rtype: str
        """
        return self._convenience_indicator

    @convenience_indicator.setter
    def convenience_indicator(self, convenience_indicator):
        """Sets the convenience_indicator of this MerchantPaymentTransfer29.

        Convenience fee type code. Min length: 2. Max Length: 2. Valid values are 01,02 or 03. 01:Indicates consumer should be prompted to enter tip. 02:Indicates the merchant would mandatorily charge a flat convenience fee. 03:Indicates that merchant would charge a percentage convenience fee. Required if convenience_amount is provided.

        :param convenience_indicator: The convenience_indicator of this MerchantPaymentTransfer29.
        :type convenience_indicator: str
        """

        self._convenience_indicator = convenience_indicator

    @property
    def currency(self):
        """Gets the currency of this MerchantPaymentTransfer29.

        Currency of the transfer amount as an ISO alpha currency code. Details- Alpha, Length: 3

        :return: The currency of this MerchantPaymentTransfer29.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this MerchantPaymentTransfer29.

        Currency of the transfer amount as an ISO alpha currency code. Details- Alpha, Length: 3

        :param currency: The currency of this MerchantPaymentTransfer29.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def device_id(self):
        """Gets the device_id of this MerchantPaymentTransfer29.

        The serial number of a device initiating the transfer. Details- 1-40

        :return: The device_id of this MerchantPaymentTransfer29.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this MerchantPaymentTransfer29.

        The serial number of a device initiating the transfer. Details- 1-40

        :param device_id: The device_id of this MerchantPaymentTransfer29.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def digital_account_reference_number(self):
        """Gets the digital_account_reference_number of this MerchantPaymentTransfer29.

        URI to identify the digital account reference number. URI scheme must be pan. Valid Values- Refer 'Account URIs'.

        :return: The digital_account_reference_number of this MerchantPaymentTransfer29.
        :rtype: str
        """
        return self._digital_account_reference_number

    @digital_account_reference_number.setter
    def digital_account_reference_number(self, digital_account_reference_number):
        """Sets the digital_account_reference_number of this MerchantPaymentTransfer29.

        URI to identify the digital account reference number. URI scheme must be pan. Valid Values- Refer 'Account URIs'.

        :param digital_account_reference_number: The digital_account_reference_number of this MerchantPaymentTransfer29.
        :type digital_account_reference_number: str
        """

        self._digital_account_reference_number = digital_account_reference_number

    @property
    def funding_source(self):
        """Gets the funding_source of this MerchantPaymentTransfer29.

        Funding source must contain one of the following: CREDIT, DEBIT, PREPAID, DEPOSIT_ACCOUNT, MOBILE_MONEY_ACCOUNT, CASH. In the Asia/Pacific region, funding sources are limited to Mastercard cards. In Subfield 1 values 04, 05, 06, and 07 are not applicable.

        :return: The funding_source of this MerchantPaymentTransfer29.
        :rtype: str
        """
        return self._funding_source

    @funding_source.setter
    def funding_source(self, funding_source):
        """Sets the funding_source of this MerchantPaymentTransfer29.

        Funding source must contain one of the following: CREDIT, DEBIT, PREPAID, DEPOSIT_ACCOUNT, MOBILE_MONEY_ACCOUNT, CASH. In the Asia/Pacific region, funding sources are limited to Mastercard cards. In Subfield 1 values 04, 05, 06, and 07 are not applicable.

        :param funding_source: The funding_source of this MerchantPaymentTransfer29.
        :type funding_source: str
        """
        if funding_source is None:
            raise ValueError("Invalid value for `funding_source`, must not be `None`")

        self._funding_source = funding_source

    @property
    def funding_transaction_reference(self):
        """Gets the funding_transaction_reference of this MerchantPaymentTransfer29.


        :return: The funding_transaction_reference of this MerchantPaymentTransfer29.
        :rtype: FundingTransactionReference38
        """
        return self._funding_transaction_reference

    @funding_transaction_reference.setter
    def funding_transaction_reference(self, funding_transaction_reference):
        """Sets the funding_transaction_reference of this MerchantPaymentTransfer29.


        :param funding_transaction_reference: The funding_transaction_reference of this MerchantPaymentTransfer29.
        :type funding_transaction_reference: FundingTransactionReference38
        """

        self._funding_transaction_reference = funding_transaction_reference

    @property
    def interchange_rate_designator(self):
        """Gets the interchange_rate_designator of this MerchantPaymentTransfer29.

        Indicates the interchange rate and editing rules applied to the transaction.  Type:Alphanumeric [a-zA-Z 0-9], Length: 2

        :return: The interchange_rate_designator of this MerchantPaymentTransfer29.
        :rtype: str
        """
        return self._interchange_rate_designator

    @interchange_rate_designator.setter
    def interchange_rate_designator(self, interchange_rate_designator):
        """Sets the interchange_rate_designator of this MerchantPaymentTransfer29.

        Indicates the interchange rate and editing rules applied to the transaction.  Type:Alphanumeric [a-zA-Z 0-9], Length: 2

        :param interchange_rate_designator: The interchange_rate_designator of this MerchantPaymentTransfer29.
        :type interchange_rate_designator: str
        """

        self._interchange_rate_designator = interchange_rate_designator

    @property
    def location(self):
        """Gets the location of this MerchantPaymentTransfer29.

        Location where the transaction is initiated. Valid Values- Refer 'Location URIs'.

        :return: The location of this MerchantPaymentTransfer29.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this MerchantPaymentTransfer29.

        Location where the transaction is initiated. Valid Values- Refer 'Location URIs'.

        :param location: The location of this MerchantPaymentTransfer29.
        :type location: str
        """

        self._location = location

    @property
    def mastercard_assigned_id(self):
        """Gets the mastercard_assigned_id of this MerchantPaymentTransfer29.

        Mastercard Assigned ID for tiered interchange calculations. \\n\\nType: Numeric [0-9], Length: 6

        :return: The mastercard_assigned_id of this MerchantPaymentTransfer29.
        :rtype: str
        """
        return self._mastercard_assigned_id

    @mastercard_assigned_id.setter
    def mastercard_assigned_id(self, mastercard_assigned_id):
        """Sets the mastercard_assigned_id of this MerchantPaymentTransfer29.

        Mastercard Assigned ID for tiered interchange calculations. \\n\\nType: Numeric [0-9], Length: 6

        :param mastercard_assigned_id: The mastercard_assigned_id of this MerchantPaymentTransfer29.
        :type mastercard_assigned_id: str
        """

        self._mastercard_assigned_id = mastercard_assigned_id

    @property
    def participant(self):
        """Gets the participant of this MerchantPaymentTransfer29.


        :return: The participant of this MerchantPaymentTransfer29.
        :rtype: Participant37
        """
        return self._participant

    @participant.setter
    def participant(self, participant):
        """Sets the participant of this MerchantPaymentTransfer29.


        :param participant: The participant of this MerchantPaymentTransfer29.
        :type participant: Participant37
        """

        self._participant = participant

    @property
    def participation_id(self):
        """Gets the participation_id of this MerchantPaymentTransfer29.

        Participation identifier of the sender. The receiving financial institution will associate the value to the transfer. Details- 1-30

        :return: The participation_id of this MerchantPaymentTransfer29.
        :rtype: str
        """
        return self._participation_id

    @participation_id.setter
    def participation_id(self, participation_id):
        """Sets the participation_id of this MerchantPaymentTransfer29.

        Participation identifier of the sender. The receiving financial institution will associate the value to the transfer. Details- 1-30

        :param participation_id: The participation_id of this MerchantPaymentTransfer29.
        :type participation_id: str
        """

        self._participation_id = participation_id

    @property
    def payment_origination_country(self):
        """Gets the payment_origination_country of this MerchantPaymentTransfer29.

        The country where the payment originates from as an ISO 3166-1 alpha-3 country code, in uppercase. Details - Conditional. If provided, this should match a valid country configured for the partner during onboarding. If the partner is configured for multiple origination countries this field is required and must be provided. Alpha, length: 3

        :return: The payment_origination_country of this MerchantPaymentTransfer29.
        :rtype: str
        """
        return self._payment_origination_country

    @payment_origination_country.setter
    def payment_origination_country(self, payment_origination_country):
        """Sets the payment_origination_country of this MerchantPaymentTransfer29.

        The country where the payment originates from as an ISO 3166-1 alpha-3 country code, in uppercase. Details - Conditional. If provided, this should match a valid country configured for the partner during onboarding. If the partner is configured for multiple origination countries this field is required and must be provided. Alpha, length: 3

        :param payment_origination_country: The payment_origination_country of this MerchantPaymentTransfer29.
        :type payment_origination_country: str
        """

        self._payment_origination_country = payment_origination_country

    @property
    def payment_type(self):
        """Gets the payment_type of this MerchantPaymentTransfer29.

        P2M: Person to Merchant

        :return: The payment_type of this MerchantPaymentTransfer29.
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this MerchantPaymentTransfer29.

        P2M: Person to Merchant

        :param payment_type: The payment_type of this MerchantPaymentTransfer29.
        :type payment_type: str
        """
        if payment_type is None:
            raise ValueError("Invalid value for `payment_type`, must not be `None`")

        self._payment_type = payment_type

    @property
    def processor_id(self):
        """Gets the processor_id of this MerchantPaymentTransfer29.

        The processor ID is a ten-digit number of the form: 9000xxxxxx, where the Single Message System-assigned processor ID will be up to the last six digits xxxxxx. If the partner is enrolled in multiple processorId numbers, the processorId number must be specified. If the partner is only enrolled in a single processorId number then system takes the onboarded value. Please contact your MasterCard Representative to enable the usage of fields in this section. Details- Numeric, 10

        :return: The processor_id of this MerchantPaymentTransfer29.
        :rtype: str
        """
        return self._processor_id

    @processor_id.setter
    def processor_id(self, processor_id):
        """Sets the processor_id of this MerchantPaymentTransfer29.

        The processor ID is a ten-digit number of the form: 9000xxxxxx, where the Single Message System-assigned processor ID will be up to the last six digits xxxxxx. If the partner is enrolled in multiple processorId numbers, the processorId number must be specified. If the partner is only enrolled in a single processorId number then system takes the onboarded value. Please contact your MasterCard Representative to enable the usage of fields in this section. Details- Numeric, 10

        :param processor_id: The processor_id of this MerchantPaymentTransfer29.
        :type processor_id: str
        """

        self._processor_id = processor_id

    @property
    def qr_data(self):
        """Gets the qr_data of this MerchantPaymentTransfer29.

        Contains QR data. For future use. Details- alpha numeric special characters 1-237.

        :return: The qr_data of this MerchantPaymentTransfer29.
        :rtype: str
        """
        return self._qr_data

    @qr_data.setter
    def qr_data(self, qr_data):
        """Sets the qr_data of this MerchantPaymentTransfer29.

        Contains QR data. For future use. Details- alpha numeric special characters 1-237.

        :param qr_data: The qr_data of this MerchantPaymentTransfer29.
        :type qr_data: str
        """

        self._qr_data = qr_data

    @property
    def recipient(self):
        """Gets the recipient of this MerchantPaymentTransfer29.


        :return: The recipient of this MerchantPaymentTransfer29.
        :rtype: Recipient32
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """Sets the recipient of this MerchantPaymentTransfer29.


        :param recipient: The recipient of this MerchantPaymentTransfer29.
        :type recipient: Recipient32
        """
        if recipient is None:
            raise ValueError("Invalid value for `recipient`, must not be `None`")

        self._recipient = recipient

    @property
    def recipient_account_uri(self):
        """Gets the recipient_account_uri of this MerchantPaymentTransfer29.

        URI to identify the account of the recipient/merchant. When PAN is the URI then recipient/merchant information is required. Pan, Manual Entry Alias and Alias are valid schemas. Valid Values- Refer 'Account URIs'

        :return: The recipient_account_uri of this MerchantPaymentTransfer29.
        :rtype: str
        """
        return self._recipient_account_uri

    @recipient_account_uri.setter
    def recipient_account_uri(self, recipient_account_uri):
        """Sets the recipient_account_uri of this MerchantPaymentTransfer29.

        URI to identify the account of the recipient/merchant. When PAN is the URI then recipient/merchant information is required. Pan, Manual Entry Alias and Alias are valid schemas. Valid Values- Refer 'Account URIs'

        :param recipient_account_uri: The recipient_account_uri of this MerchantPaymentTransfer29.
        :type recipient_account_uri: str
        """
        if recipient_account_uri is None:
            raise ValueError("Invalid value for `recipient_account_uri`, must not be `None`")

        self._recipient_account_uri = recipient_account_uri

    @property
    def reconciliation_data(self):
        """Gets the reconciliation_data of this MerchantPaymentTransfer29.


        :return: The reconciliation_data of this MerchantPaymentTransfer29.
        :rtype: ReconciliationData35
        """
        return self._reconciliation_data

    @reconciliation_data.setter
    def reconciliation_data(self, reconciliation_data):
        """Sets the reconciliation_data of this MerchantPaymentTransfer29.


        :param reconciliation_data: The reconciliation_data of this MerchantPaymentTransfer29.
        :type reconciliation_data: ReconciliationData35
        """

        self._reconciliation_data = reconciliation_data

    @property
    def routing_transit_number(self):
        """Gets the routing_transit_number of this MerchantPaymentTransfer29.

        The nine-digit Federal Reserve Routing and Transit (R & T) number of the acquiring institution or the nine-digit pseudo-number assigned to the acquiring institution by Mastercard. If the partner is enrolled in multiple routing transit numbers, the routing transit number must be specified. If the partner is only enrolled in a single routing transit number then system takes the onboarded value. Please contact your MasterCard Representative to enable the usage of fields in this section. Details- Numeric, 9

        :return: The routing_transit_number of this MerchantPaymentTransfer29.
        :rtype: str
        """
        return self._routing_transit_number

    @routing_transit_number.setter
    def routing_transit_number(self, routing_transit_number):
        """Sets the routing_transit_number of this MerchantPaymentTransfer29.

        The nine-digit Federal Reserve Routing and Transit (R & T) number of the acquiring institution or the nine-digit pseudo-number assigned to the acquiring institution by Mastercard. If the partner is enrolled in multiple routing transit numbers, the routing transit number must be specified. If the partner is only enrolled in a single routing transit number then system takes the onboarded value. Please contact your MasterCard Representative to enable the usage of fields in this section. Details- Numeric, 9

        :param routing_transit_number: The routing_transit_number of this MerchantPaymentTransfer29.
        :type routing_transit_number: str
        """

        self._routing_transit_number = routing_transit_number

    @property
    def sender(self):
        """Gets the sender of this MerchantPaymentTransfer29.


        :return: The sender of this MerchantPaymentTransfer29.
        :rtype: Sender30
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this MerchantPaymentTransfer29.


        :param sender: The sender of this MerchantPaymentTransfer29.
        :type sender: Sender30
        """

        self._sender = sender

    @property
    def sender_account_uri(self):
        """Gets the sender_account_uri of this MerchantPaymentTransfer29.

        URI to identify the account information of the sender. When PAN is the URI then sender information is required. If scheme chosen is raw, then funding_source must be other than CREDIT, DEBIT or PREPAID. Valid Values- Refer 'Account URIs'

        :return: The sender_account_uri of this MerchantPaymentTransfer29.
        :rtype: str
        """
        return self._sender_account_uri

    @sender_account_uri.setter
    def sender_account_uri(self, sender_account_uri):
        """Sets the sender_account_uri of this MerchantPaymentTransfer29.

        URI to identify the account information of the sender. When PAN is the URI then sender information is required. If scheme chosen is raw, then funding_source must be other than CREDIT, DEBIT or PREPAID. Valid Values- Refer 'Account URIs'

        :param sender_account_uri: The sender_account_uri of this MerchantPaymentTransfer29.
        :type sender_account_uri: str
        """
        if sender_account_uri is None:
            raise ValueError("Invalid value for `sender_account_uri`, must not be `None`")

        self._sender_account_uri = sender_account_uri

    @property
    def token_cryptogram(self):
        """Gets the token_cryptogram of this MerchantPaymentTransfer29.


        :return: The token_cryptogram of this MerchantPaymentTransfer29.
        :rtype: TokenCryptogram39
        """
        return self._token_cryptogram

    @token_cryptogram.setter
    def token_cryptogram(self, token_cryptogram):
        """Sets the token_cryptogram of this MerchantPaymentTransfer29.


        :param token_cryptogram: The token_cryptogram of this MerchantPaymentTransfer29.
        :type token_cryptogram: TokenCryptogram39
        """

        self._token_cryptogram = token_cryptogram

    @property
    def transaction_local_date_time(self):
        """Gets the transaction_local_date_time of this MerchantPaymentTransfer29.

        Local date and time when the transaction is submitted. Details-YYYY-MM-DDTHH:MM:SS±hh[:mm] 

        :return: The transaction_local_date_time of this MerchantPaymentTransfer29.
        :rtype: str
        """
        return self._transaction_local_date_time

    @transaction_local_date_time.setter
    def transaction_local_date_time(self, transaction_local_date_time):
        """Sets the transaction_local_date_time of this MerchantPaymentTransfer29.

        Local date and time when the transaction is submitted. Details-YYYY-MM-DDTHH:MM:SS±hh[:mm] 

        :param transaction_local_date_time: The transaction_local_date_time of this MerchantPaymentTransfer29.
        :type transaction_local_date_time: str
        """
        if transaction_local_date_time is None:
            raise ValueError("Invalid value for `transaction_local_date_time`, must not be `None`")

        self._transaction_local_date_time = transaction_local_date_time

    @property
    def transfer_reference(self):
        """Gets the transfer_reference of this MerchantPaymentTransfer29.

        Provide a unique transaction reference number. It must be a unique value for the partner. Details- 6-40, Allowable characters are alphanumeric and * , - . _ ~

        :return: The transfer_reference of this MerchantPaymentTransfer29.
        :rtype: str
        """
        return self._transfer_reference

    @transfer_reference.setter
    def transfer_reference(self, transfer_reference):
        """Sets the transfer_reference of this MerchantPaymentTransfer29.

        Provide a unique transaction reference number. It must be a unique value for the partner. Details- 6-40, Allowable characters are alphanumeric and * , - . _ ~

        :param transfer_reference: The transfer_reference of this MerchantPaymentTransfer29.
        :type transfer_reference: str
        """
        if transfer_reference is None:
            raise ValueError("Invalid value for `transfer_reference`, must not be `None`")

        self._transfer_reference = transfer_reference
