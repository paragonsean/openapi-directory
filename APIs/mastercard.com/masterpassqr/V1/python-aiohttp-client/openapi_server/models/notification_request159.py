# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recipient161 import Recipient161
from openapi_server.models.transaction_amount160 import TransactionAmount160
from openapi_server import util


class NotificationRequest159(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_message: str=None, mastercard_assigned_id: str=None, merchant_category_code: str=None, payment_facilitator_id: str=None, payment_type: str=None, recipient: Recipient161=None, recipient_account_uri: str=None, transaction_amount: TransactionAmount160=None, transfer_status: str=None):
        """NotificationRequest159 - a model defined in OpenAPI

        :param additional_message: The additional_message of this NotificationRequest159.
        :param mastercard_assigned_id: The mastercard_assigned_id of this NotificationRequest159.
        :param merchant_category_code: The merchant_category_code of this NotificationRequest159.
        :param payment_facilitator_id: The payment_facilitator_id of this NotificationRequest159.
        :param payment_type: The payment_type of this NotificationRequest159.
        :param recipient: The recipient of this NotificationRequest159.
        :param recipient_account_uri: The recipient_account_uri of this NotificationRequest159.
        :param transaction_amount: The transaction_amount of this NotificationRequest159.
        :param transfer_status: The transfer_status of this NotificationRequest159.
        """
        self.openapi_types = {
            'additional_message': str,
            'mastercard_assigned_id': str,
            'merchant_category_code': str,
            'payment_facilitator_id': str,
            'payment_type': str,
            'recipient': Recipient161,
            'recipient_account_uri': str,
            'transaction_amount': TransactionAmount160,
            'transfer_status': str
        }

        self.attribute_map = {
            'additional_message': 'additional_message',
            'mastercard_assigned_id': 'mastercard_assigned_id',
            'merchant_category_code': 'merchant_category_code',
            'payment_facilitator_id': 'payment_facilitator_id',
            'payment_type': 'payment_type',
            'recipient': 'recipient',
            'recipient_account_uri': 'recipient_account_uri',
            'transaction_amount': 'transaction_amount',
            'transfer_status': 'transfer_status'
        }

        self._additional_message = additional_message
        self._mastercard_assigned_id = mastercard_assigned_id
        self._merchant_category_code = merchant_category_code
        self._payment_facilitator_id = payment_facilitator_id
        self._payment_type = payment_type
        self._recipient = recipient
        self._recipient_account_uri = recipient_account_uri
        self._transaction_amount = transaction_amount
        self._transfer_status = transfer_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationRequest159':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationRequest_159 of this NotificationRequest159.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_message(self):
        """Gets the additional_message of this NotificationRequest159.

        Message a financial institution will associate to the transfer and may display

        :return: The additional_message of this NotificationRequest159.
        :rtype: str
        """
        return self._additional_message

    @additional_message.setter
    def additional_message(self, additional_message):
        """Sets the additional_message of this NotificationRequest159.

        Message a financial institution will associate to the transfer and may display

        :param additional_message: The additional_message of this NotificationRequest159.
        :type additional_message: str
        """

        self._additional_message = additional_message

    @property
    def mastercard_assigned_id(self):
        """Gets the mastercard_assigned_id of this NotificationRequest159.

        Mastercard Assigned ID for tiered interchange calculations. Length: 6. Applicable only for P2M and MRF notifications.

        :return: The mastercard_assigned_id of this NotificationRequest159.
        :rtype: str
        """
        return self._mastercard_assigned_id

    @mastercard_assigned_id.setter
    def mastercard_assigned_id(self, mastercard_assigned_id):
        """Sets the mastercard_assigned_id of this NotificationRequest159.

        Mastercard Assigned ID for tiered interchange calculations. Length: 6. Applicable only for P2M and MRF notifications.

        :param mastercard_assigned_id: The mastercard_assigned_id of this NotificationRequest159.
        :type mastercard_assigned_id: str
        """

        self._mastercard_assigned_id = mastercard_assigned_id

    @property
    def merchant_category_code(self):
        """Gets the merchant_category_code of this NotificationRequest159.

        Merchant category code

        :return: The merchant_category_code of this NotificationRequest159.
        :rtype: str
        """
        return self._merchant_category_code

    @merchant_category_code.setter
    def merchant_category_code(self, merchant_category_code):
        """Sets the merchant_category_code of this NotificationRequest159.

        Merchant category code

        :param merchant_category_code: The merchant_category_code of this NotificationRequest159.
        :type merchant_category_code: str
        """

        self._merchant_category_code = merchant_category_code

    @property
    def payment_facilitator_id(self):
        """Gets the payment_facilitator_id of this NotificationRequest159.

        Contains the Payment Facilitator ID. Length: 11. Applicable only for P2M and MRF notifications.

        :return: The payment_facilitator_id of this NotificationRequest159.
        :rtype: str
        """
        return self._payment_facilitator_id

    @payment_facilitator_id.setter
    def payment_facilitator_id(self, payment_facilitator_id):
        """Sets the payment_facilitator_id of this NotificationRequest159.

        Contains the Payment Facilitator ID. Length: 11. Applicable only for P2M and MRF notifications.

        :param payment_facilitator_id: The payment_facilitator_id of this NotificationRequest159.
        :type payment_facilitator_id: str
        """

        self._payment_facilitator_id = payment_facilitator_id

    @property
    def payment_type(self):
        """Gets the payment_type of this NotificationRequest159.

        P2M: Person to Merchant, ACO: Agent Cash Out

        :return: The payment_type of this NotificationRequest159.
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this NotificationRequest159.

        P2M: Person to Merchant, ACO: Agent Cash Out

        :param payment_type: The payment_type of this NotificationRequest159.
        :type payment_type: str
        """
        if payment_type is None:
            raise ValueError("Invalid value for `payment_type`, must not be `None`")

        self._payment_type = payment_type

    @property
    def recipient(self):
        """Gets the recipient of this NotificationRequest159.


        :return: The recipient of this NotificationRequest159.
        :rtype: Recipient161
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """Sets the recipient of this NotificationRequest159.


        :param recipient: The recipient of this NotificationRequest159.
        :type recipient: Recipient161
        """

        self._recipient = recipient

    @property
    def recipient_account_uri(self):
        """Gets the recipient_account_uri of this NotificationRequest159.

        Recepient Account uri . Only accept format: pan:[16 digit]

        :return: The recipient_account_uri of this NotificationRequest159.
        :rtype: str
        """
        return self._recipient_account_uri

    @recipient_account_uri.setter
    def recipient_account_uri(self, recipient_account_uri):
        """Sets the recipient_account_uri of this NotificationRequest159.

        Recepient Account uri . Only accept format: pan:[16 digit]

        :param recipient_account_uri: The recipient_account_uri of this NotificationRequest159.
        :type recipient_account_uri: str
        """
        if recipient_account_uri is None:
            raise ValueError("Invalid value for `recipient_account_uri`, must not be `None`")

        self._recipient_account_uri = recipient_account_uri

    @property
    def transaction_amount(self):
        """Gets the transaction_amount of this NotificationRequest159.


        :return: The transaction_amount of this NotificationRequest159.
        :rtype: TransactionAmount160
        """
        return self._transaction_amount

    @transaction_amount.setter
    def transaction_amount(self, transaction_amount):
        """Sets the transaction_amount of this NotificationRequest159.


        :param transaction_amount: The transaction_amount of this NotificationRequest159.
        :type transaction_amount: TransactionAmount160
        """

        self._transaction_amount = transaction_amount

    @property
    def transfer_status(self):
        """Gets the transfer_status of this NotificationRequest159.

        APPROVED or DECLINED

        :return: The transfer_status of this NotificationRequest159.
        :rtype: str
        """
        return self._transfer_status

    @transfer_status.setter
    def transfer_status(self, transfer_status):
        """Sets the transfer_status of this NotificationRequest159.

        APPROVED or DECLINED

        :param transfer_status: The transfer_status of this NotificationRequest159.
        :type transfer_status: str
        """
        if transfer_status is None:
            raise ValueError("Invalid value for `transfer_status`, must not be `None`")

        self._transfer_status = transfer_status
