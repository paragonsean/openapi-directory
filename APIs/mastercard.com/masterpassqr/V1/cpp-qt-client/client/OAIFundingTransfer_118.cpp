/**
 * Send Person to Merchant
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFundingTransfer_118.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFundingTransfer_118::OAIFundingTransfer_118(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFundingTransfer_118::OAIFundingTransfer_118() {
    this->initializeModel();
}

OAIFundingTransfer_118::~OAIFundingTransfer_118() {}

void OAIFundingTransfer_118::initializeModel() {

    m_additional_message_isSet = false;
    m_additional_message_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_authentication_value_isSet = false;
    m_authentication_value_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_funding_hints_isSet = false;
    m_funding_hints_isValid = false;

    m_interchange_rate_designator_isSet = false;
    m_interchange_rate_designator_isValid = false;

    m_language_data_isSet = false;
    m_language_data_isValid = false;

    m_language_identification_isSet = false;
    m_language_identification_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_participation_id_isSet = false;
    m_participation_id_isValid = false;

    m_payment_type_isSet = false;
    m_payment_type_isValid = false;

    m_recipient_isSet = false;
    m_recipient_isValid = false;

    m_recipient_account_uri_isSet = false;
    m_recipient_account_uri_isValid = false;

    m_reconciliation_data_isSet = false;
    m_reconciliation_data_isValid = false;

    m_sanction_screening_override_isSet = false;
    m_sanction_screening_override_isValid = false;

    m_sender_isSet = false;
    m_sender_isValid = false;

    m_sender_account_uri_isSet = false;
    m_sender_account_uri_isValid = false;

    m_statement_descriptor_isSet = false;
    m_statement_descriptor_isValid = false;

    m_token_cryptogram_isSet = false;
    m_token_cryptogram_isValid = false;

    m_transfer_reference_isSet = false;
    m_transfer_reference_isValid = false;
}

void OAIFundingTransfer_118::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFundingTransfer_118::fromJsonObject(QJsonObject json) {

    m_additional_message_isValid = ::OpenAPI::fromJsonValue(m_additional_message, json[QString("additional_message")]);
    m_additional_message_isSet = !json[QString("additional_message")].isNull() && m_additional_message_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_authentication_value_isValid = ::OpenAPI::fromJsonValue(m_authentication_value, json[QString("authentication_value")]);
    m_authentication_value_isSet = !json[QString("authentication_value")].isNull() && m_authentication_value_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("device_id")]);
    m_device_id_isSet = !json[QString("device_id")].isNull() && m_device_id_isValid;

    m_funding_hints_isValid = ::OpenAPI::fromJsonValue(m_funding_hints, json[QString("funding_hints")]);
    m_funding_hints_isSet = !json[QString("funding_hints")].isNull() && m_funding_hints_isValid;

    m_interchange_rate_designator_isValid = ::OpenAPI::fromJsonValue(m_interchange_rate_designator, json[QString("interchange_rate_designator")]);
    m_interchange_rate_designator_isSet = !json[QString("interchange_rate_designator")].isNull() && m_interchange_rate_designator_isValid;

    m_language_data_isValid = ::OpenAPI::fromJsonValue(m_language_data, json[QString("language_data")]);
    m_language_data_isSet = !json[QString("language_data")].isNull() && m_language_data_isValid;

    m_language_identification_isValid = ::OpenAPI::fromJsonValue(m_language_identification, json[QString("language_identification")]);
    m_language_identification_isSet = !json[QString("language_identification")].isNull() && m_language_identification_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_participation_id_isValid = ::OpenAPI::fromJsonValue(m_participation_id, json[QString("participation_id")]);
    m_participation_id_isSet = !json[QString("participation_id")].isNull() && m_participation_id_isValid;

    m_payment_type_isValid = ::OpenAPI::fromJsonValue(m_payment_type, json[QString("payment_type")]);
    m_payment_type_isSet = !json[QString("payment_type")].isNull() && m_payment_type_isValid;

    m_recipient_isValid = ::OpenAPI::fromJsonValue(m_recipient, json[QString("recipient")]);
    m_recipient_isSet = !json[QString("recipient")].isNull() && m_recipient_isValid;

    m_recipient_account_uri_isValid = ::OpenAPI::fromJsonValue(m_recipient_account_uri, json[QString("recipient_account_uri")]);
    m_recipient_account_uri_isSet = !json[QString("recipient_account_uri")].isNull() && m_recipient_account_uri_isValid;

    m_reconciliation_data_isValid = ::OpenAPI::fromJsonValue(m_reconciliation_data, json[QString("reconciliation_data")]);
    m_reconciliation_data_isSet = !json[QString("reconciliation_data")].isNull() && m_reconciliation_data_isValid;

    m_sanction_screening_override_isValid = ::OpenAPI::fromJsonValue(m_sanction_screening_override, json[QString("sanction_screening_override")]);
    m_sanction_screening_override_isSet = !json[QString("sanction_screening_override")].isNull() && m_sanction_screening_override_isValid;

    m_sender_isValid = ::OpenAPI::fromJsonValue(m_sender, json[QString("sender")]);
    m_sender_isSet = !json[QString("sender")].isNull() && m_sender_isValid;

    m_sender_account_uri_isValid = ::OpenAPI::fromJsonValue(m_sender_account_uri, json[QString("sender_account_uri")]);
    m_sender_account_uri_isSet = !json[QString("sender_account_uri")].isNull() && m_sender_account_uri_isValid;

    m_statement_descriptor_isValid = ::OpenAPI::fromJsonValue(m_statement_descriptor, json[QString("statement_descriptor")]);
    m_statement_descriptor_isSet = !json[QString("statement_descriptor")].isNull() && m_statement_descriptor_isValid;

    m_token_cryptogram_isValid = ::OpenAPI::fromJsonValue(m_token_cryptogram, json[QString("token_cryptogram")]);
    m_token_cryptogram_isSet = !json[QString("token_cryptogram")].isNull() && m_token_cryptogram_isValid;

    m_transfer_reference_isValid = ::OpenAPI::fromJsonValue(m_transfer_reference, json[QString("transfer_reference")]);
    m_transfer_reference_isSet = !json[QString("transfer_reference")].isNull() && m_transfer_reference_isValid;
}

QString OAIFundingTransfer_118::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFundingTransfer_118::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_message_isSet) {
        obj.insert(QString("additional_message"), ::OpenAPI::toJsonValue(m_additional_message));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_authentication_value_isSet) {
        obj.insert(QString("authentication_value"), ::OpenAPI::toJsonValue(m_authentication_value));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("device_id"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_funding_hints_isSet) {
        obj.insert(QString("funding_hints"), ::OpenAPI::toJsonValue(m_funding_hints));
    }
    if (m_interchange_rate_designator_isSet) {
        obj.insert(QString("interchange_rate_designator"), ::OpenAPI::toJsonValue(m_interchange_rate_designator));
    }
    if (m_language_data_isSet) {
        obj.insert(QString("language_data"), ::OpenAPI::toJsonValue(m_language_data));
    }
    if (m_language_identification_isSet) {
        obj.insert(QString("language_identification"), ::OpenAPI::toJsonValue(m_language_identification));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_participation_id_isSet) {
        obj.insert(QString("participation_id"), ::OpenAPI::toJsonValue(m_participation_id));
    }
    if (m_payment_type_isSet) {
        obj.insert(QString("payment_type"), ::OpenAPI::toJsonValue(m_payment_type));
    }
    if (m_recipient.isSet()) {
        obj.insert(QString("recipient"), ::OpenAPI::toJsonValue(m_recipient));
    }
    if (m_recipient_account_uri_isSet) {
        obj.insert(QString("recipient_account_uri"), ::OpenAPI::toJsonValue(m_recipient_account_uri));
    }
    if (m_reconciliation_data.isSet()) {
        obj.insert(QString("reconciliation_data"), ::OpenAPI::toJsonValue(m_reconciliation_data));
    }
    if (m_sanction_screening_override_isSet) {
        obj.insert(QString("sanction_screening_override"), ::OpenAPI::toJsonValue(m_sanction_screening_override));
    }
    if (m_sender.isSet()) {
        obj.insert(QString("sender"), ::OpenAPI::toJsonValue(m_sender));
    }
    if (m_sender_account_uri_isSet) {
        obj.insert(QString("sender_account_uri"), ::OpenAPI::toJsonValue(m_sender_account_uri));
    }
    if (m_statement_descriptor_isSet) {
        obj.insert(QString("statement_descriptor"), ::OpenAPI::toJsonValue(m_statement_descriptor));
    }
    if (m_token_cryptogram.isSet()) {
        obj.insert(QString("token_cryptogram"), ::OpenAPI::toJsonValue(m_token_cryptogram));
    }
    if (m_transfer_reference_isSet) {
        obj.insert(QString("transfer_reference"), ::OpenAPI::toJsonValue(m_transfer_reference));
    }
    return obj;
}

QString OAIFundingTransfer_118::getAdditionalMessage() const {
    return m_additional_message;
}
void OAIFundingTransfer_118::setAdditionalMessage(const QString &additional_message) {
    m_additional_message = additional_message;
    m_additional_message_isSet = true;
}

bool OAIFundingTransfer_118::is_additional_message_Set() const{
    return m_additional_message_isSet;
}

bool OAIFundingTransfer_118::is_additional_message_Valid() const{
    return m_additional_message_isValid;
}

QString OAIFundingTransfer_118::getAmount() const {
    return m_amount;
}
void OAIFundingTransfer_118::setAmount(const QString &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIFundingTransfer_118::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIFundingTransfer_118::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIFundingTransfer_118::getAuthenticationValue() const {
    return m_authentication_value;
}
void OAIFundingTransfer_118::setAuthenticationValue(const QString &authentication_value) {
    m_authentication_value = authentication_value;
    m_authentication_value_isSet = true;
}

bool OAIFundingTransfer_118::is_authentication_value_Set() const{
    return m_authentication_value_isSet;
}

bool OAIFundingTransfer_118::is_authentication_value_Valid() const{
    return m_authentication_value_isValid;
}

QString OAIFundingTransfer_118::getChannel() const {
    return m_channel;
}
void OAIFundingTransfer_118::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIFundingTransfer_118::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIFundingTransfer_118::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIFundingTransfer_118::getCurrency() const {
    return m_currency;
}
void OAIFundingTransfer_118::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIFundingTransfer_118::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIFundingTransfer_118::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIFundingTransfer_118::getDeviceId() const {
    return m_device_id;
}
void OAIFundingTransfer_118::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIFundingTransfer_118::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIFundingTransfer_118::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAIFundingTransfer_118::getFundingHints() const {
    return m_funding_hints;
}
void OAIFundingTransfer_118::setFundingHints(const QString &funding_hints) {
    m_funding_hints = funding_hints;
    m_funding_hints_isSet = true;
}

bool OAIFundingTransfer_118::is_funding_hints_Set() const{
    return m_funding_hints_isSet;
}

bool OAIFundingTransfer_118::is_funding_hints_Valid() const{
    return m_funding_hints_isValid;
}

QString OAIFundingTransfer_118::getInterchangeRateDesignator() const {
    return m_interchange_rate_designator;
}
void OAIFundingTransfer_118::setInterchangeRateDesignator(const QString &interchange_rate_designator) {
    m_interchange_rate_designator = interchange_rate_designator;
    m_interchange_rate_designator_isSet = true;
}

bool OAIFundingTransfer_118::is_interchange_rate_designator_Set() const{
    return m_interchange_rate_designator_isSet;
}

bool OAIFundingTransfer_118::is_interchange_rate_designator_Valid() const{
    return m_interchange_rate_designator_isValid;
}

QString OAIFundingTransfer_118::getLanguageData() const {
    return m_language_data;
}
void OAIFundingTransfer_118::setLanguageData(const QString &language_data) {
    m_language_data = language_data;
    m_language_data_isSet = true;
}

bool OAIFundingTransfer_118::is_language_data_Set() const{
    return m_language_data_isSet;
}

bool OAIFundingTransfer_118::is_language_data_Valid() const{
    return m_language_data_isValid;
}

QString OAIFundingTransfer_118::getLanguageIdentification() const {
    return m_language_identification;
}
void OAIFundingTransfer_118::setLanguageIdentification(const QString &language_identification) {
    m_language_identification = language_identification;
    m_language_identification_isSet = true;
}

bool OAIFundingTransfer_118::is_language_identification_Set() const{
    return m_language_identification_isSet;
}

bool OAIFundingTransfer_118::is_language_identification_Valid() const{
    return m_language_identification_isValid;
}

QString OAIFundingTransfer_118::getLocation() const {
    return m_location;
}
void OAIFundingTransfer_118::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIFundingTransfer_118::is_location_Set() const{
    return m_location_isSet;
}

bool OAIFundingTransfer_118::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIFundingTransfer_118::getParticipationId() const {
    return m_participation_id;
}
void OAIFundingTransfer_118::setParticipationId(const QString &participation_id) {
    m_participation_id = participation_id;
    m_participation_id_isSet = true;
}

bool OAIFundingTransfer_118::is_participation_id_Set() const{
    return m_participation_id_isSet;
}

bool OAIFundingTransfer_118::is_participation_id_Valid() const{
    return m_participation_id_isValid;
}

QString OAIFundingTransfer_118::getPaymentType() const {
    return m_payment_type;
}
void OAIFundingTransfer_118::setPaymentType(const QString &payment_type) {
    m_payment_type = payment_type;
    m_payment_type_isSet = true;
}

bool OAIFundingTransfer_118::is_payment_type_Set() const{
    return m_payment_type_isSet;
}

bool OAIFundingTransfer_118::is_payment_type_Valid() const{
    return m_payment_type_isValid;
}

OAIRecipient_123 OAIFundingTransfer_118::getRecipient() const {
    return m_recipient;
}
void OAIFundingTransfer_118::setRecipient(const OAIRecipient_123 &recipient) {
    m_recipient = recipient;
    m_recipient_isSet = true;
}

bool OAIFundingTransfer_118::is_recipient_Set() const{
    return m_recipient_isSet;
}

bool OAIFundingTransfer_118::is_recipient_Valid() const{
    return m_recipient_isValid;
}

QString OAIFundingTransfer_118::getRecipientAccountUri() const {
    return m_recipient_account_uri;
}
void OAIFundingTransfer_118::setRecipientAccountUri(const QString &recipient_account_uri) {
    m_recipient_account_uri = recipient_account_uri;
    m_recipient_account_uri_isSet = true;
}

bool OAIFundingTransfer_118::is_recipient_account_uri_Set() const{
    return m_recipient_account_uri_isSet;
}

bool OAIFundingTransfer_118::is_recipient_account_uri_Valid() const{
    return m_recipient_account_uri_isValid;
}

OAIReconciliationData_126 OAIFundingTransfer_118::getReconciliationData() const {
    return m_reconciliation_data;
}
void OAIFundingTransfer_118::setReconciliationData(const OAIReconciliationData_126 &reconciliation_data) {
    m_reconciliation_data = reconciliation_data;
    m_reconciliation_data_isSet = true;
}

bool OAIFundingTransfer_118::is_reconciliation_data_Set() const{
    return m_reconciliation_data_isSet;
}

bool OAIFundingTransfer_118::is_reconciliation_data_Valid() const{
    return m_reconciliation_data_isValid;
}

bool OAIFundingTransfer_118::isSanctionScreeningOverride() const {
    return m_sanction_screening_override;
}
void OAIFundingTransfer_118::setSanctionScreeningOverride(const bool &sanction_screening_override) {
    m_sanction_screening_override = sanction_screening_override;
    m_sanction_screening_override_isSet = true;
}

bool OAIFundingTransfer_118::is_sanction_screening_override_Set() const{
    return m_sanction_screening_override_isSet;
}

bool OAIFundingTransfer_118::is_sanction_screening_override_Valid() const{
    return m_sanction_screening_override_isValid;
}

OAISender_119 OAIFundingTransfer_118::getSender() const {
    return m_sender;
}
void OAIFundingTransfer_118::setSender(const OAISender_119 &sender) {
    m_sender = sender;
    m_sender_isSet = true;
}

bool OAIFundingTransfer_118::is_sender_Set() const{
    return m_sender_isSet;
}

bool OAIFundingTransfer_118::is_sender_Valid() const{
    return m_sender_isValid;
}

QString OAIFundingTransfer_118::getSenderAccountUri() const {
    return m_sender_account_uri;
}
void OAIFundingTransfer_118::setSenderAccountUri(const QString &sender_account_uri) {
    m_sender_account_uri = sender_account_uri;
    m_sender_account_uri_isSet = true;
}

bool OAIFundingTransfer_118::is_sender_account_uri_Set() const{
    return m_sender_account_uri_isSet;
}

bool OAIFundingTransfer_118::is_sender_account_uri_Valid() const{
    return m_sender_account_uri_isValid;
}

QString OAIFundingTransfer_118::getStatementDescriptor() const {
    return m_statement_descriptor;
}
void OAIFundingTransfer_118::setStatementDescriptor(const QString &statement_descriptor) {
    m_statement_descriptor = statement_descriptor;
    m_statement_descriptor_isSet = true;
}

bool OAIFundingTransfer_118::is_statement_descriptor_Set() const{
    return m_statement_descriptor_isSet;
}

bool OAIFundingTransfer_118::is_statement_descriptor_Valid() const{
    return m_statement_descriptor_isValid;
}

OAITokenCryptogram_128 OAIFundingTransfer_118::getTokenCryptogram() const {
    return m_token_cryptogram;
}
void OAIFundingTransfer_118::setTokenCryptogram(const OAITokenCryptogram_128 &token_cryptogram) {
    m_token_cryptogram = token_cryptogram;
    m_token_cryptogram_isSet = true;
}

bool OAIFundingTransfer_118::is_token_cryptogram_Set() const{
    return m_token_cryptogram_isSet;
}

bool OAIFundingTransfer_118::is_token_cryptogram_Valid() const{
    return m_token_cryptogram_isValid;
}

QString OAIFundingTransfer_118::getTransferReference() const {
    return m_transfer_reference;
}
void OAIFundingTransfer_118::setTransferReference(const QString &transfer_reference) {
    m_transfer_reference = transfer_reference;
    m_transfer_reference_isSet = true;
}

bool OAIFundingTransfer_118::is_transfer_reference_Set() const{
    return m_transfer_reference_isSet;
}

bool OAIFundingTransfer_118::is_transfer_reference_Valid() const{
    return m_transfer_reference_isValid;
}

bool OAIFundingTransfer_118::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_funding_hints_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interchange_rate_designator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_identification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_account_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconciliation_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sanction_screening_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_account_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statement_descriptor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_cryptogram.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_reference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFundingTransfer_118::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_currency_isValid && m_recipient_account_uri_isValid && m_transfer_reference_isValid && true;
}

} // namespace OpenAPI
