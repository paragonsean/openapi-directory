/**
 * Send Person to Merchant
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMerchantTransfer_71.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMerchantTransfer_71::OAIMerchantTransfer_71(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMerchantTransfer_71::OAIMerchantTransfer_71() {
    this->initializeModel();
}

OAIMerchantTransfer_71::~OAIMerchantTransfer_71() {}

void OAIMerchantTransfer_71::initializeModel() {

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_digital_account_reference_number_isSet = false;
    m_digital_account_reference_number_isValid = false;

    m_funding_source_isSet = false;
    m_funding_source_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_interchange_rate_designator_isSet = false;
    m_interchange_rate_designator_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_original_status_isSet = false;
    m_original_status_isValid = false;

    m_participant_isSet = false;
    m_participant_isValid = false;

    m_payment_origination_country_isSet = false;
    m_payment_origination_country_isValid = false;

    m_payment_type_isSet = false;
    m_payment_type_isValid = false;

    m_processor_id_isSet = false;
    m_processor_id_isValid = false;

    m_recipient_isSet = false;
    m_recipient_isValid = false;

    m_recipient_account_uri_isSet = false;
    m_recipient_account_uri_isValid = false;

    m_reconciliation_data_isSet = false;
    m_reconciliation_data_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_routing_transit_number_isSet = false;
    m_routing_transit_number_isValid = false;

    m_sender_isSet = false;
    m_sender_isValid = false;

    m_sender_account_uri_isSet = false;
    m_sender_account_uri_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_timestamp_isSet = false;
    m_status_timestamp_isValid = false;

    m_transaction_history_isSet = false;
    m_transaction_history_isValid = false;

    m_transaction_local_date_time_isSet = false;
    m_transaction_local_date_time_isValid = false;

    m_transfer_amount_isSet = false;
    m_transfer_amount_isValid = false;

    m_transfer_reference_isSet = false;
    m_transfer_reference_isValid = false;
}

void OAIMerchantTransfer_71::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMerchantTransfer_71::fromJsonObject(QJsonObject json) {

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("device_id")]);
    m_device_id_isSet = !json[QString("device_id")].isNull() && m_device_id_isValid;

    m_digital_account_reference_number_isValid = ::OpenAPI::fromJsonValue(m_digital_account_reference_number, json[QString("digital_account_reference_number")]);
    m_digital_account_reference_number_isSet = !json[QString("digital_account_reference_number")].isNull() && m_digital_account_reference_number_isValid;

    m_funding_source_isValid = ::OpenAPI::fromJsonValue(m_funding_source, json[QString("funding_source")]);
    m_funding_source_isSet = !json[QString("funding_source")].isNull() && m_funding_source_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interchange_rate_designator_isValid = ::OpenAPI::fromJsonValue(m_interchange_rate_designator, json[QString("interchange_rate_designator")]);
    m_interchange_rate_designator_isSet = !json[QString("interchange_rate_designator")].isNull() && m_interchange_rate_designator_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_original_status_isValid = ::OpenAPI::fromJsonValue(m_original_status, json[QString("original_status")]);
    m_original_status_isSet = !json[QString("original_status")].isNull() && m_original_status_isValid;

    m_participant_isValid = ::OpenAPI::fromJsonValue(m_participant, json[QString("participant")]);
    m_participant_isSet = !json[QString("participant")].isNull() && m_participant_isValid;

    m_payment_origination_country_isValid = ::OpenAPI::fromJsonValue(m_payment_origination_country, json[QString("payment_origination_country")]);
    m_payment_origination_country_isSet = !json[QString("payment_origination_country")].isNull() && m_payment_origination_country_isValid;

    m_payment_type_isValid = ::OpenAPI::fromJsonValue(m_payment_type, json[QString("payment_type")]);
    m_payment_type_isSet = !json[QString("payment_type")].isNull() && m_payment_type_isValid;

    m_processor_id_isValid = ::OpenAPI::fromJsonValue(m_processor_id, json[QString("processor_id")]);
    m_processor_id_isSet = !json[QString("processor_id")].isNull() && m_processor_id_isValid;

    m_recipient_isValid = ::OpenAPI::fromJsonValue(m_recipient, json[QString("recipient")]);
    m_recipient_isSet = !json[QString("recipient")].isNull() && m_recipient_isValid;

    m_recipient_account_uri_isValid = ::OpenAPI::fromJsonValue(m_recipient_account_uri, json[QString("recipient_account_uri")]);
    m_recipient_account_uri_isSet = !json[QString("recipient_account_uri")].isNull() && m_recipient_account_uri_isValid;

    m_reconciliation_data_isValid = ::OpenAPI::fromJsonValue(m_reconciliation_data, json[QString("reconciliation_data")]);
    m_reconciliation_data_isSet = !json[QString("reconciliation_data")].isNull() && m_reconciliation_data_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resource_type")]);
    m_resource_type_isSet = !json[QString("resource_type")].isNull() && m_resource_type_isValid;

    m_routing_transit_number_isValid = ::OpenAPI::fromJsonValue(m_routing_transit_number, json[QString("routing_transit_number")]);
    m_routing_transit_number_isSet = !json[QString("routing_transit_number")].isNull() && m_routing_transit_number_isValid;

    m_sender_isValid = ::OpenAPI::fromJsonValue(m_sender, json[QString("sender")]);
    m_sender_isSet = !json[QString("sender")].isNull() && m_sender_isValid;

    m_sender_account_uri_isValid = ::OpenAPI::fromJsonValue(m_sender_account_uri, json[QString("sender_account_uri")]);
    m_sender_account_uri_isSet = !json[QString("sender_account_uri")].isNull() && m_sender_account_uri_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_timestamp_isValid = ::OpenAPI::fromJsonValue(m_status_timestamp, json[QString("status_timestamp")]);
    m_status_timestamp_isSet = !json[QString("status_timestamp")].isNull() && m_status_timestamp_isValid;

    m_transaction_history_isValid = ::OpenAPI::fromJsonValue(m_transaction_history, json[QString("transaction_history")]);
    m_transaction_history_isSet = !json[QString("transaction_history")].isNull() && m_transaction_history_isValid;

    m_transaction_local_date_time_isValid = ::OpenAPI::fromJsonValue(m_transaction_local_date_time, json[QString("transaction_local_date_time")]);
    m_transaction_local_date_time_isSet = !json[QString("transaction_local_date_time")].isNull() && m_transaction_local_date_time_isValid;

    m_transfer_amount_isValid = ::OpenAPI::fromJsonValue(m_transfer_amount, json[QString("transfer_amount")]);
    m_transfer_amount_isSet = !json[QString("transfer_amount")].isNull() && m_transfer_amount_isValid;

    m_transfer_reference_isValid = ::OpenAPI::fromJsonValue(m_transfer_reference, json[QString("transfer_reference")]);
    m_transfer_reference_isSet = !json[QString("transfer_reference")].isNull() && m_transfer_reference_isValid;
}

QString OAIMerchantTransfer_71::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMerchantTransfer_71::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("device_id"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_digital_account_reference_number_isSet) {
        obj.insert(QString("digital_account_reference_number"), ::OpenAPI::toJsonValue(m_digital_account_reference_number));
    }
    if (m_funding_source_isSet) {
        obj.insert(QString("funding_source"), ::OpenAPI::toJsonValue(m_funding_source));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interchange_rate_designator_isSet) {
        obj.insert(QString("interchange_rate_designator"), ::OpenAPI::toJsonValue(m_interchange_rate_designator));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_original_status_isSet) {
        obj.insert(QString("original_status"), ::OpenAPI::toJsonValue(m_original_status));
    }
    if (m_participant.isSet()) {
        obj.insert(QString("participant"), ::OpenAPI::toJsonValue(m_participant));
    }
    if (m_payment_origination_country_isSet) {
        obj.insert(QString("payment_origination_country"), ::OpenAPI::toJsonValue(m_payment_origination_country));
    }
    if (m_payment_type_isSet) {
        obj.insert(QString("payment_type"), ::OpenAPI::toJsonValue(m_payment_type));
    }
    if (m_processor_id_isSet) {
        obj.insert(QString("processor_id"), ::OpenAPI::toJsonValue(m_processor_id));
    }
    if (m_recipient.isSet()) {
        obj.insert(QString("recipient"), ::OpenAPI::toJsonValue(m_recipient));
    }
    if (m_recipient_account_uri_isSet) {
        obj.insert(QString("recipient_account_uri"), ::OpenAPI::toJsonValue(m_recipient_account_uri));
    }
    if (m_reconciliation_data.isSet()) {
        obj.insert(QString("reconciliation_data"), ::OpenAPI::toJsonValue(m_reconciliation_data));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resource_type"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_routing_transit_number_isSet) {
        obj.insert(QString("routing_transit_number"), ::OpenAPI::toJsonValue(m_routing_transit_number));
    }
    if (m_sender.isSet()) {
        obj.insert(QString("sender"), ::OpenAPI::toJsonValue(m_sender));
    }
    if (m_sender_account_uri_isSet) {
        obj.insert(QString("sender_account_uri"), ::OpenAPI::toJsonValue(m_sender_account_uri));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_timestamp_isSet) {
        obj.insert(QString("status_timestamp"), ::OpenAPI::toJsonValue(m_status_timestamp));
    }
    if (m_transaction_history.isSet()) {
        obj.insert(QString("transaction_history"), ::OpenAPI::toJsonValue(m_transaction_history));
    }
    if (m_transaction_local_date_time_isSet) {
        obj.insert(QString("transaction_local_date_time"), ::OpenAPI::toJsonValue(m_transaction_local_date_time));
    }
    if (m_transfer_amount.isSet()) {
        obj.insert(QString("transfer_amount"), ::OpenAPI::toJsonValue(m_transfer_amount));
    }
    if (m_transfer_reference_isSet) {
        obj.insert(QString("transfer_reference"), ::OpenAPI::toJsonValue(m_transfer_reference));
    }
    return obj;
}

QString OAIMerchantTransfer_71::getChannel() const {
    return m_channel;
}
void OAIMerchantTransfer_71::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIMerchantTransfer_71::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIMerchantTransfer_71::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIMerchantTransfer_71::getCreated() const {
    return m_created;
}
void OAIMerchantTransfer_71::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIMerchantTransfer_71::is_created_Set() const{
    return m_created_isSet;
}

bool OAIMerchantTransfer_71::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIMerchantTransfer_71::getDeviceId() const {
    return m_device_id;
}
void OAIMerchantTransfer_71::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIMerchantTransfer_71::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIMerchantTransfer_71::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAIMerchantTransfer_71::getDigitalAccountReferenceNumber() const {
    return m_digital_account_reference_number;
}
void OAIMerchantTransfer_71::setDigitalAccountReferenceNumber(const QString &digital_account_reference_number) {
    m_digital_account_reference_number = digital_account_reference_number;
    m_digital_account_reference_number_isSet = true;
}

bool OAIMerchantTransfer_71::is_digital_account_reference_number_Set() const{
    return m_digital_account_reference_number_isSet;
}

bool OAIMerchantTransfer_71::is_digital_account_reference_number_Valid() const{
    return m_digital_account_reference_number_isValid;
}

QString OAIMerchantTransfer_71::getFundingSource() const {
    return m_funding_source;
}
void OAIMerchantTransfer_71::setFundingSource(const QString &funding_source) {
    m_funding_source = funding_source;
    m_funding_source_isSet = true;
}

bool OAIMerchantTransfer_71::is_funding_source_Set() const{
    return m_funding_source_isSet;
}

bool OAIMerchantTransfer_71::is_funding_source_Valid() const{
    return m_funding_source_isValid;
}

QString OAIMerchantTransfer_71::getId() const {
    return m_id;
}
void OAIMerchantTransfer_71::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMerchantTransfer_71::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMerchantTransfer_71::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMerchantTransfer_71::getInterchangeRateDesignator() const {
    return m_interchange_rate_designator;
}
void OAIMerchantTransfer_71::setInterchangeRateDesignator(const QString &interchange_rate_designator) {
    m_interchange_rate_designator = interchange_rate_designator;
    m_interchange_rate_designator_isSet = true;
}

bool OAIMerchantTransfer_71::is_interchange_rate_designator_Set() const{
    return m_interchange_rate_designator_isSet;
}

bool OAIMerchantTransfer_71::is_interchange_rate_designator_Valid() const{
    return m_interchange_rate_designator_isValid;
}

QString OAIMerchantTransfer_71::getLocation() const {
    return m_location;
}
void OAIMerchantTransfer_71::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIMerchantTransfer_71::is_location_Set() const{
    return m_location_isSet;
}

bool OAIMerchantTransfer_71::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIMerchantTransfer_71::getOriginalStatus() const {
    return m_original_status;
}
void OAIMerchantTransfer_71::setOriginalStatus(const QString &original_status) {
    m_original_status = original_status;
    m_original_status_isSet = true;
}

bool OAIMerchantTransfer_71::is_original_status_Set() const{
    return m_original_status_isSet;
}

bool OAIMerchantTransfer_71::is_original_status_Valid() const{
    return m_original_status_isValid;
}

OAIParticipant_85 OAIMerchantTransfer_71::getParticipant() const {
    return m_participant;
}
void OAIMerchantTransfer_71::setParticipant(const OAIParticipant_85 &participant) {
    m_participant = participant;
    m_participant_isSet = true;
}

bool OAIMerchantTransfer_71::is_participant_Set() const{
    return m_participant_isSet;
}

bool OAIMerchantTransfer_71::is_participant_Valid() const{
    return m_participant_isValid;
}

QString OAIMerchantTransfer_71::getPaymentOriginationCountry() const {
    return m_payment_origination_country;
}
void OAIMerchantTransfer_71::setPaymentOriginationCountry(const QString &payment_origination_country) {
    m_payment_origination_country = payment_origination_country;
    m_payment_origination_country_isSet = true;
}

bool OAIMerchantTransfer_71::is_payment_origination_country_Set() const{
    return m_payment_origination_country_isSet;
}

bool OAIMerchantTransfer_71::is_payment_origination_country_Valid() const{
    return m_payment_origination_country_isValid;
}

QString OAIMerchantTransfer_71::getPaymentType() const {
    return m_payment_type;
}
void OAIMerchantTransfer_71::setPaymentType(const QString &payment_type) {
    m_payment_type = payment_type;
    m_payment_type_isSet = true;
}

bool OAIMerchantTransfer_71::is_payment_type_Set() const{
    return m_payment_type_isSet;
}

bool OAIMerchantTransfer_71::is_payment_type_Valid() const{
    return m_payment_type_isValid;
}

QString OAIMerchantTransfer_71::getProcessorId() const {
    return m_processor_id;
}
void OAIMerchantTransfer_71::setProcessorId(const QString &processor_id) {
    m_processor_id = processor_id;
    m_processor_id_isSet = true;
}

bool OAIMerchantTransfer_71::is_processor_id_Set() const{
    return m_processor_id_isSet;
}

bool OAIMerchantTransfer_71::is_processor_id_Valid() const{
    return m_processor_id_isValid;
}

OAIRecipient_75 OAIMerchantTransfer_71::getRecipient() const {
    return m_recipient;
}
void OAIMerchantTransfer_71::setRecipient(const OAIRecipient_75 &recipient) {
    m_recipient = recipient;
    m_recipient_isSet = true;
}

bool OAIMerchantTransfer_71::is_recipient_Set() const{
    return m_recipient_isSet;
}

bool OAIMerchantTransfer_71::is_recipient_Valid() const{
    return m_recipient_isValid;
}

QString OAIMerchantTransfer_71::getRecipientAccountUri() const {
    return m_recipient_account_uri;
}
void OAIMerchantTransfer_71::setRecipientAccountUri(const QString &recipient_account_uri) {
    m_recipient_account_uri = recipient_account_uri;
    m_recipient_account_uri_isSet = true;
}

bool OAIMerchantTransfer_71::is_recipient_account_uri_Set() const{
    return m_recipient_account_uri_isSet;
}

bool OAIMerchantTransfer_71::is_recipient_account_uri_Valid() const{
    return m_recipient_account_uri_isValid;
}

OAIReconciliationData_83 OAIMerchantTransfer_71::getReconciliationData() const {
    return m_reconciliation_data;
}
void OAIMerchantTransfer_71::setReconciliationData(const OAIReconciliationData_83 &reconciliation_data) {
    m_reconciliation_data = reconciliation_data;
    m_reconciliation_data_isSet = true;
}

bool OAIMerchantTransfer_71::is_reconciliation_data_Set() const{
    return m_reconciliation_data_isSet;
}

bool OAIMerchantTransfer_71::is_reconciliation_data_Valid() const{
    return m_reconciliation_data_isValid;
}

QString OAIMerchantTransfer_71::getResourceType() const {
    return m_resource_type;
}
void OAIMerchantTransfer_71::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIMerchantTransfer_71::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIMerchantTransfer_71::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIMerchantTransfer_71::getRoutingTransitNumber() const {
    return m_routing_transit_number;
}
void OAIMerchantTransfer_71::setRoutingTransitNumber(const QString &routing_transit_number) {
    m_routing_transit_number = routing_transit_number;
    m_routing_transit_number_isSet = true;
}

bool OAIMerchantTransfer_71::is_routing_transit_number_Set() const{
    return m_routing_transit_number_isSet;
}

bool OAIMerchantTransfer_71::is_routing_transit_number_Valid() const{
    return m_routing_transit_number_isValid;
}

OAISender_72 OAIMerchantTransfer_71::getSender() const {
    return m_sender;
}
void OAIMerchantTransfer_71::setSender(const OAISender_72 &sender) {
    m_sender = sender;
    m_sender_isSet = true;
}

bool OAIMerchantTransfer_71::is_sender_Set() const{
    return m_sender_isSet;
}

bool OAIMerchantTransfer_71::is_sender_Valid() const{
    return m_sender_isValid;
}

QString OAIMerchantTransfer_71::getSenderAccountUri() const {
    return m_sender_account_uri;
}
void OAIMerchantTransfer_71::setSenderAccountUri(const QString &sender_account_uri) {
    m_sender_account_uri = sender_account_uri;
    m_sender_account_uri_isSet = true;
}

bool OAIMerchantTransfer_71::is_sender_account_uri_Set() const{
    return m_sender_account_uri_isSet;
}

bool OAIMerchantTransfer_71::is_sender_account_uri_Valid() const{
    return m_sender_account_uri_isValid;
}

QString OAIMerchantTransfer_71::getStatus() const {
    return m_status;
}
void OAIMerchantTransfer_71::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMerchantTransfer_71::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMerchantTransfer_71::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIMerchantTransfer_71::getStatusTimestamp() const {
    return m_status_timestamp;
}
void OAIMerchantTransfer_71::setStatusTimestamp(const QString &status_timestamp) {
    m_status_timestamp = status_timestamp;
    m_status_timestamp_isSet = true;
}

bool OAIMerchantTransfer_71::is_status_timestamp_Set() const{
    return m_status_timestamp_isSet;
}

bool OAIMerchantTransfer_71::is_status_timestamp_Valid() const{
    return m_status_timestamp_isValid;
}

OAITransactionHistory_79 OAIMerchantTransfer_71::getTransactionHistory() const {
    return m_transaction_history;
}
void OAIMerchantTransfer_71::setTransactionHistory(const OAITransactionHistory_79 &transaction_history) {
    m_transaction_history = transaction_history;
    m_transaction_history_isSet = true;
}

bool OAIMerchantTransfer_71::is_transaction_history_Set() const{
    return m_transaction_history_isSet;
}

bool OAIMerchantTransfer_71::is_transaction_history_Valid() const{
    return m_transaction_history_isValid;
}

QString OAIMerchantTransfer_71::getTransactionLocalDateTime() const {
    return m_transaction_local_date_time;
}
void OAIMerchantTransfer_71::setTransactionLocalDateTime(const QString &transaction_local_date_time) {
    m_transaction_local_date_time = transaction_local_date_time;
    m_transaction_local_date_time_isSet = true;
}

bool OAIMerchantTransfer_71::is_transaction_local_date_time_Set() const{
    return m_transaction_local_date_time_isSet;
}

bool OAIMerchantTransfer_71::is_transaction_local_date_time_Valid() const{
    return m_transaction_local_date_time_isValid;
}

OAITransferAmount_78 OAIMerchantTransfer_71::getTransferAmount() const {
    return m_transfer_amount;
}
void OAIMerchantTransfer_71::setTransferAmount(const OAITransferAmount_78 &transfer_amount) {
    m_transfer_amount = transfer_amount;
    m_transfer_amount_isSet = true;
}

bool OAIMerchantTransfer_71::is_transfer_amount_Set() const{
    return m_transfer_amount_isSet;
}

bool OAIMerchantTransfer_71::is_transfer_amount_Valid() const{
    return m_transfer_amount_isValid;
}

QString OAIMerchantTransfer_71::getTransferReference() const {
    return m_transfer_reference;
}
void OAIMerchantTransfer_71::setTransferReference(const QString &transfer_reference) {
    m_transfer_reference = transfer_reference;
    m_transfer_reference_isSet = true;
}

bool OAIMerchantTransfer_71::is_transfer_reference_Set() const{
    return m_transfer_reference_isSet;
}

bool OAIMerchantTransfer_71::is_transfer_reference_Valid() const{
    return m_transfer_reference_isValid;
}

bool OAIMerchantTransfer_71::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digital_account_reference_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_funding_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interchange_rate_designator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_origination_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_account_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconciliation_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_transit_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_account_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_history.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_local_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_reference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMerchantTransfer_71::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
