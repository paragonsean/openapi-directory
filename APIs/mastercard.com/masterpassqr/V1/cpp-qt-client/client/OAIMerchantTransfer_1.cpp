/**
 * Send Person to Merchant
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMerchantTransfer_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMerchantTransfer_1::OAIMerchantTransfer_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMerchantTransfer_1::OAIMerchantTransfer_1() {
    this->initializeModel();
}

OAIMerchantTransfer_1::~OAIMerchantTransfer_1() {}

void OAIMerchantTransfer_1::initializeModel() {

    m_additional_message_isSet = false;
    m_additional_message_isValid = false;

    m_convenience_amount_isSet = false;
    m_convenience_amount_isValid = false;

    m_convenience_indicator_isSet = false;
    m_convenience_indicator_isValid = false;

    m_digital_account_reference_number_isSet = false;
    m_digital_account_reference_number_isValid = false;

    m_interchange_rate_designator_isSet = false;
    m_interchange_rate_designator_isValid = false;

    m_mastercard_assigned_id_isSet = false;
    m_mastercard_assigned_id_isValid = false;

    m_participant_isSet = false;
    m_participant_isValid = false;

    m_participation_id_isSet = false;
    m_participation_id_isValid = false;

    m_payment_origination_country_isSet = false;
    m_payment_origination_country_isValid = false;

    m_payment_type_isSet = false;
    m_payment_type_isValid = false;

    m_processor_id_isSet = false;
    m_processor_id_isValid = false;

    m_qr_data_isSet = false;
    m_qr_data_isValid = false;

    m_recipient_isSet = false;
    m_recipient_isValid = false;

    m_recipient_account_uri_isSet = false;
    m_recipient_account_uri_isValid = false;

    m_reconciliation_data_isSet = false;
    m_reconciliation_data_isValid = false;

    m_routing_transit_number_isSet = false;
    m_routing_transit_number_isValid = false;

    m_sender_isSet = false;
    m_sender_isValid = false;

    m_sender_account_uri_isSet = false;
    m_sender_account_uri_isValid = false;

    m_transaction_local_date_time_isSet = false;
    m_transaction_local_date_time_isValid = false;

    m_transfer_amount_isSet = false;
    m_transfer_amount_isValid = false;

    m_transfer_reference_isSet = false;
    m_transfer_reference_isValid = false;

    m_unique_reference_number_isSet = false;
    m_unique_reference_number_isValid = false;
}

void OAIMerchantTransfer_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMerchantTransfer_1::fromJsonObject(QJsonObject json) {

    m_additional_message_isValid = ::OpenAPI::fromJsonValue(m_additional_message, json[QString("additional_message")]);
    m_additional_message_isSet = !json[QString("additional_message")].isNull() && m_additional_message_isValid;

    m_convenience_amount_isValid = ::OpenAPI::fromJsonValue(m_convenience_amount, json[QString("convenience_amount")]);
    m_convenience_amount_isSet = !json[QString("convenience_amount")].isNull() && m_convenience_amount_isValid;

    m_convenience_indicator_isValid = ::OpenAPI::fromJsonValue(m_convenience_indicator, json[QString("convenience_indicator")]);
    m_convenience_indicator_isSet = !json[QString("convenience_indicator")].isNull() && m_convenience_indicator_isValid;

    m_digital_account_reference_number_isValid = ::OpenAPI::fromJsonValue(m_digital_account_reference_number, json[QString("digital_account_reference_number")]);
    m_digital_account_reference_number_isSet = !json[QString("digital_account_reference_number")].isNull() && m_digital_account_reference_number_isValid;

    m_interchange_rate_designator_isValid = ::OpenAPI::fromJsonValue(m_interchange_rate_designator, json[QString("interchange_rate_designator")]);
    m_interchange_rate_designator_isSet = !json[QString("interchange_rate_designator")].isNull() && m_interchange_rate_designator_isValid;

    m_mastercard_assigned_id_isValid = ::OpenAPI::fromJsonValue(m_mastercard_assigned_id, json[QString("mastercard_assigned_id")]);
    m_mastercard_assigned_id_isSet = !json[QString("mastercard_assigned_id")].isNull() && m_mastercard_assigned_id_isValid;

    m_participant_isValid = ::OpenAPI::fromJsonValue(m_participant, json[QString("participant")]);
    m_participant_isSet = !json[QString("participant")].isNull() && m_participant_isValid;

    m_participation_id_isValid = ::OpenAPI::fromJsonValue(m_participation_id, json[QString("participation_id")]);
    m_participation_id_isSet = !json[QString("participation_id")].isNull() && m_participation_id_isValid;

    m_payment_origination_country_isValid = ::OpenAPI::fromJsonValue(m_payment_origination_country, json[QString("payment_origination_country")]);
    m_payment_origination_country_isSet = !json[QString("payment_origination_country")].isNull() && m_payment_origination_country_isValid;

    m_payment_type_isValid = ::OpenAPI::fromJsonValue(m_payment_type, json[QString("payment_type")]);
    m_payment_type_isSet = !json[QString("payment_type")].isNull() && m_payment_type_isValid;

    m_processor_id_isValid = ::OpenAPI::fromJsonValue(m_processor_id, json[QString("processor_id")]);
    m_processor_id_isSet = !json[QString("processor_id")].isNull() && m_processor_id_isValid;

    m_qr_data_isValid = ::OpenAPI::fromJsonValue(m_qr_data, json[QString("qr_data")]);
    m_qr_data_isSet = !json[QString("qr_data")].isNull() && m_qr_data_isValid;

    m_recipient_isValid = ::OpenAPI::fromJsonValue(m_recipient, json[QString("recipient")]);
    m_recipient_isSet = !json[QString("recipient")].isNull() && m_recipient_isValid;

    m_recipient_account_uri_isValid = ::OpenAPI::fromJsonValue(m_recipient_account_uri, json[QString("recipient_account_uri")]);
    m_recipient_account_uri_isSet = !json[QString("recipient_account_uri")].isNull() && m_recipient_account_uri_isValid;

    m_reconciliation_data_isValid = ::OpenAPI::fromJsonValue(m_reconciliation_data, json[QString("reconciliation_data")]);
    m_reconciliation_data_isSet = !json[QString("reconciliation_data")].isNull() && m_reconciliation_data_isValid;

    m_routing_transit_number_isValid = ::OpenAPI::fromJsonValue(m_routing_transit_number, json[QString("routing_transit_number")]);
    m_routing_transit_number_isSet = !json[QString("routing_transit_number")].isNull() && m_routing_transit_number_isValid;

    m_sender_isValid = ::OpenAPI::fromJsonValue(m_sender, json[QString("sender")]);
    m_sender_isSet = !json[QString("sender")].isNull() && m_sender_isValid;

    m_sender_account_uri_isValid = ::OpenAPI::fromJsonValue(m_sender_account_uri, json[QString("sender_account_uri")]);
    m_sender_account_uri_isSet = !json[QString("sender_account_uri")].isNull() && m_sender_account_uri_isValid;

    m_transaction_local_date_time_isValid = ::OpenAPI::fromJsonValue(m_transaction_local_date_time, json[QString("transaction_local_date_time")]);
    m_transaction_local_date_time_isSet = !json[QString("transaction_local_date_time")].isNull() && m_transaction_local_date_time_isValid;

    m_transfer_amount_isValid = ::OpenAPI::fromJsonValue(m_transfer_amount, json[QString("transfer_amount")]);
    m_transfer_amount_isSet = !json[QString("transfer_amount")].isNull() && m_transfer_amount_isValid;

    m_transfer_reference_isValid = ::OpenAPI::fromJsonValue(m_transfer_reference, json[QString("transfer_reference")]);
    m_transfer_reference_isSet = !json[QString("transfer_reference")].isNull() && m_transfer_reference_isValid;

    m_unique_reference_number_isValid = ::OpenAPI::fromJsonValue(m_unique_reference_number, json[QString("unique_reference_number")]);
    m_unique_reference_number_isSet = !json[QString("unique_reference_number")].isNull() && m_unique_reference_number_isValid;
}

QString OAIMerchantTransfer_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMerchantTransfer_1::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_message_isSet) {
        obj.insert(QString("additional_message"), ::OpenAPI::toJsonValue(m_additional_message));
    }
    if (m_convenience_amount_isSet) {
        obj.insert(QString("convenience_amount"), ::OpenAPI::toJsonValue(m_convenience_amount));
    }
    if (m_convenience_indicator_isSet) {
        obj.insert(QString("convenience_indicator"), ::OpenAPI::toJsonValue(m_convenience_indicator));
    }
    if (m_digital_account_reference_number_isSet) {
        obj.insert(QString("digital_account_reference_number"), ::OpenAPI::toJsonValue(m_digital_account_reference_number));
    }
    if (m_interchange_rate_designator_isSet) {
        obj.insert(QString("interchange_rate_designator"), ::OpenAPI::toJsonValue(m_interchange_rate_designator));
    }
    if (m_mastercard_assigned_id_isSet) {
        obj.insert(QString("mastercard_assigned_id"), ::OpenAPI::toJsonValue(m_mastercard_assigned_id));
    }
    if (m_participant.isSet()) {
        obj.insert(QString("participant"), ::OpenAPI::toJsonValue(m_participant));
    }
    if (m_participation_id_isSet) {
        obj.insert(QString("participation_id"), ::OpenAPI::toJsonValue(m_participation_id));
    }
    if (m_payment_origination_country_isSet) {
        obj.insert(QString("payment_origination_country"), ::OpenAPI::toJsonValue(m_payment_origination_country));
    }
    if (m_payment_type_isSet) {
        obj.insert(QString("payment_type"), ::OpenAPI::toJsonValue(m_payment_type));
    }
    if (m_processor_id_isSet) {
        obj.insert(QString("processor_id"), ::OpenAPI::toJsonValue(m_processor_id));
    }
    if (m_qr_data_isSet) {
        obj.insert(QString("qr_data"), ::OpenAPI::toJsonValue(m_qr_data));
    }
    if (m_recipient.isSet()) {
        obj.insert(QString("recipient"), ::OpenAPI::toJsonValue(m_recipient));
    }
    if (m_recipient_account_uri_isSet) {
        obj.insert(QString("recipient_account_uri"), ::OpenAPI::toJsonValue(m_recipient_account_uri));
    }
    if (m_reconciliation_data.isSet()) {
        obj.insert(QString("reconciliation_data"), ::OpenAPI::toJsonValue(m_reconciliation_data));
    }
    if (m_routing_transit_number_isSet) {
        obj.insert(QString("routing_transit_number"), ::OpenAPI::toJsonValue(m_routing_transit_number));
    }
    if (m_sender.isSet()) {
        obj.insert(QString("sender"), ::OpenAPI::toJsonValue(m_sender));
    }
    if (m_sender_account_uri_isSet) {
        obj.insert(QString("sender_account_uri"), ::OpenAPI::toJsonValue(m_sender_account_uri));
    }
    if (m_transaction_local_date_time_isSet) {
        obj.insert(QString("transaction_local_date_time"), ::OpenAPI::toJsonValue(m_transaction_local_date_time));
    }
    if (m_transfer_amount.isSet()) {
        obj.insert(QString("transfer_amount"), ::OpenAPI::toJsonValue(m_transfer_amount));
    }
    if (m_transfer_reference_isSet) {
        obj.insert(QString("transfer_reference"), ::OpenAPI::toJsonValue(m_transfer_reference));
    }
    if (m_unique_reference_number_isSet) {
        obj.insert(QString("unique_reference_number"), ::OpenAPI::toJsonValue(m_unique_reference_number));
    }
    return obj;
}

QString OAIMerchantTransfer_1::getAdditionalMessage() const {
    return m_additional_message;
}
void OAIMerchantTransfer_1::setAdditionalMessage(const QString &additional_message) {
    m_additional_message = additional_message;
    m_additional_message_isSet = true;
}

bool OAIMerchantTransfer_1::is_additional_message_Set() const{
    return m_additional_message_isSet;
}

bool OAIMerchantTransfer_1::is_additional_message_Valid() const{
    return m_additional_message_isValid;
}

QString OAIMerchantTransfer_1::getConvenienceAmount() const {
    return m_convenience_amount;
}
void OAIMerchantTransfer_1::setConvenienceAmount(const QString &convenience_amount) {
    m_convenience_amount = convenience_amount;
    m_convenience_amount_isSet = true;
}

bool OAIMerchantTransfer_1::is_convenience_amount_Set() const{
    return m_convenience_amount_isSet;
}

bool OAIMerchantTransfer_1::is_convenience_amount_Valid() const{
    return m_convenience_amount_isValid;
}

QString OAIMerchantTransfer_1::getConvenienceIndicator() const {
    return m_convenience_indicator;
}
void OAIMerchantTransfer_1::setConvenienceIndicator(const QString &convenience_indicator) {
    m_convenience_indicator = convenience_indicator;
    m_convenience_indicator_isSet = true;
}

bool OAIMerchantTransfer_1::is_convenience_indicator_Set() const{
    return m_convenience_indicator_isSet;
}

bool OAIMerchantTransfer_1::is_convenience_indicator_Valid() const{
    return m_convenience_indicator_isValid;
}

QString OAIMerchantTransfer_1::getDigitalAccountReferenceNumber() const {
    return m_digital_account_reference_number;
}
void OAIMerchantTransfer_1::setDigitalAccountReferenceNumber(const QString &digital_account_reference_number) {
    m_digital_account_reference_number = digital_account_reference_number;
    m_digital_account_reference_number_isSet = true;
}

bool OAIMerchantTransfer_1::is_digital_account_reference_number_Set() const{
    return m_digital_account_reference_number_isSet;
}

bool OAIMerchantTransfer_1::is_digital_account_reference_number_Valid() const{
    return m_digital_account_reference_number_isValid;
}

QString OAIMerchantTransfer_1::getInterchangeRateDesignator() const {
    return m_interchange_rate_designator;
}
void OAIMerchantTransfer_1::setInterchangeRateDesignator(const QString &interchange_rate_designator) {
    m_interchange_rate_designator = interchange_rate_designator;
    m_interchange_rate_designator_isSet = true;
}

bool OAIMerchantTransfer_1::is_interchange_rate_designator_Set() const{
    return m_interchange_rate_designator_isSet;
}

bool OAIMerchantTransfer_1::is_interchange_rate_designator_Valid() const{
    return m_interchange_rate_designator_isValid;
}

QString OAIMerchantTransfer_1::getMastercardAssignedId() const {
    return m_mastercard_assigned_id;
}
void OAIMerchantTransfer_1::setMastercardAssignedId(const QString &mastercard_assigned_id) {
    m_mastercard_assigned_id = mastercard_assigned_id;
    m_mastercard_assigned_id_isSet = true;
}

bool OAIMerchantTransfer_1::is_mastercard_assigned_id_Set() const{
    return m_mastercard_assigned_id_isSet;
}

bool OAIMerchantTransfer_1::is_mastercard_assigned_id_Valid() const{
    return m_mastercard_assigned_id_isValid;
}

OAIParticipant_13 OAIMerchantTransfer_1::getParticipant() const {
    return m_participant;
}
void OAIMerchantTransfer_1::setParticipant(const OAIParticipant_13 &participant) {
    m_participant = participant;
    m_participant_isSet = true;
}

bool OAIMerchantTransfer_1::is_participant_Set() const{
    return m_participant_isSet;
}

bool OAIMerchantTransfer_1::is_participant_Valid() const{
    return m_participant_isValid;
}

QString OAIMerchantTransfer_1::getParticipationId() const {
    return m_participation_id;
}
void OAIMerchantTransfer_1::setParticipationId(const QString &participation_id) {
    m_participation_id = participation_id;
    m_participation_id_isSet = true;
}

bool OAIMerchantTransfer_1::is_participation_id_Set() const{
    return m_participation_id_isSet;
}

bool OAIMerchantTransfer_1::is_participation_id_Valid() const{
    return m_participation_id_isValid;
}

QString OAIMerchantTransfer_1::getPaymentOriginationCountry() const {
    return m_payment_origination_country;
}
void OAIMerchantTransfer_1::setPaymentOriginationCountry(const QString &payment_origination_country) {
    m_payment_origination_country = payment_origination_country;
    m_payment_origination_country_isSet = true;
}

bool OAIMerchantTransfer_1::is_payment_origination_country_Set() const{
    return m_payment_origination_country_isSet;
}

bool OAIMerchantTransfer_1::is_payment_origination_country_Valid() const{
    return m_payment_origination_country_isValid;
}

QString OAIMerchantTransfer_1::getPaymentType() const {
    return m_payment_type;
}
void OAIMerchantTransfer_1::setPaymentType(const QString &payment_type) {
    m_payment_type = payment_type;
    m_payment_type_isSet = true;
}

bool OAIMerchantTransfer_1::is_payment_type_Set() const{
    return m_payment_type_isSet;
}

bool OAIMerchantTransfer_1::is_payment_type_Valid() const{
    return m_payment_type_isValid;
}

QString OAIMerchantTransfer_1::getProcessorId() const {
    return m_processor_id;
}
void OAIMerchantTransfer_1::setProcessorId(const QString &processor_id) {
    m_processor_id = processor_id;
    m_processor_id_isSet = true;
}

bool OAIMerchantTransfer_1::is_processor_id_Set() const{
    return m_processor_id_isSet;
}

bool OAIMerchantTransfer_1::is_processor_id_Valid() const{
    return m_processor_id_isValid;
}

QString OAIMerchantTransfer_1::getQrData() const {
    return m_qr_data;
}
void OAIMerchantTransfer_1::setQrData(const QString &qr_data) {
    m_qr_data = qr_data;
    m_qr_data_isSet = true;
}

bool OAIMerchantTransfer_1::is_qr_data_Set() const{
    return m_qr_data_isSet;
}

bool OAIMerchantTransfer_1::is_qr_data_Valid() const{
    return m_qr_data_isValid;
}

OAIRecipient_7 OAIMerchantTransfer_1::getRecipient() const {
    return m_recipient;
}
void OAIMerchantTransfer_1::setRecipient(const OAIRecipient_7 &recipient) {
    m_recipient = recipient;
    m_recipient_isSet = true;
}

bool OAIMerchantTransfer_1::is_recipient_Set() const{
    return m_recipient_isSet;
}

bool OAIMerchantTransfer_1::is_recipient_Valid() const{
    return m_recipient_isValid;
}

QString OAIMerchantTransfer_1::getRecipientAccountUri() const {
    return m_recipient_account_uri;
}
void OAIMerchantTransfer_1::setRecipientAccountUri(const QString &recipient_account_uri) {
    m_recipient_account_uri = recipient_account_uri;
    m_recipient_account_uri_isSet = true;
}

bool OAIMerchantTransfer_1::is_recipient_account_uri_Set() const{
    return m_recipient_account_uri_isSet;
}

bool OAIMerchantTransfer_1::is_recipient_account_uri_Valid() const{
    return m_recipient_account_uri_isValid;
}

OAIReconciliationData_11 OAIMerchantTransfer_1::getReconciliationData() const {
    return m_reconciliation_data;
}
void OAIMerchantTransfer_1::setReconciliationData(const OAIReconciliationData_11 &reconciliation_data) {
    m_reconciliation_data = reconciliation_data;
    m_reconciliation_data_isSet = true;
}

bool OAIMerchantTransfer_1::is_reconciliation_data_Set() const{
    return m_reconciliation_data_isSet;
}

bool OAIMerchantTransfer_1::is_reconciliation_data_Valid() const{
    return m_reconciliation_data_isValid;
}

QString OAIMerchantTransfer_1::getRoutingTransitNumber() const {
    return m_routing_transit_number;
}
void OAIMerchantTransfer_1::setRoutingTransitNumber(const QString &routing_transit_number) {
    m_routing_transit_number = routing_transit_number;
    m_routing_transit_number_isSet = true;
}

bool OAIMerchantTransfer_1::is_routing_transit_number_Set() const{
    return m_routing_transit_number_isSet;
}

bool OAIMerchantTransfer_1::is_routing_transit_number_Valid() const{
    return m_routing_transit_number_isValid;
}

OAISender_3 OAIMerchantTransfer_1::getSender() const {
    return m_sender;
}
void OAIMerchantTransfer_1::setSender(const OAISender_3 &sender) {
    m_sender = sender;
    m_sender_isSet = true;
}

bool OAIMerchantTransfer_1::is_sender_Set() const{
    return m_sender_isSet;
}

bool OAIMerchantTransfer_1::is_sender_Valid() const{
    return m_sender_isValid;
}

QString OAIMerchantTransfer_1::getSenderAccountUri() const {
    return m_sender_account_uri;
}
void OAIMerchantTransfer_1::setSenderAccountUri(const QString &sender_account_uri) {
    m_sender_account_uri = sender_account_uri;
    m_sender_account_uri_isSet = true;
}

bool OAIMerchantTransfer_1::is_sender_account_uri_Set() const{
    return m_sender_account_uri_isSet;
}

bool OAIMerchantTransfer_1::is_sender_account_uri_Valid() const{
    return m_sender_account_uri_isValid;
}

QString OAIMerchantTransfer_1::getTransactionLocalDateTime() const {
    return m_transaction_local_date_time;
}
void OAIMerchantTransfer_1::setTransactionLocalDateTime(const QString &transaction_local_date_time) {
    m_transaction_local_date_time = transaction_local_date_time;
    m_transaction_local_date_time_isSet = true;
}

bool OAIMerchantTransfer_1::is_transaction_local_date_time_Set() const{
    return m_transaction_local_date_time_isSet;
}

bool OAIMerchantTransfer_1::is_transaction_local_date_time_Valid() const{
    return m_transaction_local_date_time_isValid;
}

OAITransferAmount_2 OAIMerchantTransfer_1::getTransferAmount() const {
    return m_transfer_amount;
}
void OAIMerchantTransfer_1::setTransferAmount(const OAITransferAmount_2 &transfer_amount) {
    m_transfer_amount = transfer_amount;
    m_transfer_amount_isSet = true;
}

bool OAIMerchantTransfer_1::is_transfer_amount_Set() const{
    return m_transfer_amount_isSet;
}

bool OAIMerchantTransfer_1::is_transfer_amount_Valid() const{
    return m_transfer_amount_isValid;
}

QString OAIMerchantTransfer_1::getTransferReference() const {
    return m_transfer_reference;
}
void OAIMerchantTransfer_1::setTransferReference(const QString &transfer_reference) {
    m_transfer_reference = transfer_reference;
    m_transfer_reference_isSet = true;
}

bool OAIMerchantTransfer_1::is_transfer_reference_Set() const{
    return m_transfer_reference_isSet;
}

bool OAIMerchantTransfer_1::is_transfer_reference_Valid() const{
    return m_transfer_reference_isValid;
}

QString OAIMerchantTransfer_1::getUniqueReferenceNumber() const {
    return m_unique_reference_number;
}
void OAIMerchantTransfer_1::setUniqueReferenceNumber(const QString &unique_reference_number) {
    m_unique_reference_number = unique_reference_number;
    m_unique_reference_number_isSet = true;
}

bool OAIMerchantTransfer_1::is_unique_reference_number_Set() const{
    return m_unique_reference_number_isSet;
}

bool OAIMerchantTransfer_1::is_unique_reference_number_Valid() const{
    return m_unique_reference_number_isValid;
}

bool OAIMerchantTransfer_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_convenience_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_convenience_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digital_account_reference_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interchange_rate_designator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mastercard_assigned_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_participation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_origination_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qr_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_account_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconciliation_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_transit_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_account_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_local_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_reference_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMerchantTransfer_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_participant_isValid && m_payment_type_isValid && m_recipient_isValid && m_recipient_account_uri_isValid && m_sender_isValid && m_sender_account_uri_isValid && m_transaction_local_date_time_isValid && m_transfer_amount_isValid && m_transfer_reference_isValid && true;
}

} // namespace OpenAPI
