/**
 * Send Person to Merchant
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddress_4.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddress_4::OAIAddress_4(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddress_4::OAIAddress_4() {
    this->initializeModel();
}

OAIAddress_4::~OAIAddress_4() {}

void OAIAddress_4::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_subdivision_isSet = false;
    m_country_subdivision_isValid = false;

    m_line1_isSet = false;
    m_line1_isValid = false;

    m_line2_isSet = false;
    m_line2_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;
}

void OAIAddress_4::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddress_4::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_subdivision_isValid = ::OpenAPI::fromJsonValue(m_country_subdivision, json[QString("country_subdivision")]);
    m_country_subdivision_isSet = !json[QString("country_subdivision")].isNull() && m_country_subdivision_isValid;

    m_line1_isValid = ::OpenAPI::fromJsonValue(m_line1, json[QString("line1")]);
    m_line1_isSet = !json[QString("line1")].isNull() && m_line1_isValid;

    m_line2_isValid = ::OpenAPI::fromJsonValue(m_line2, json[QString("line2")]);
    m_line2_isSet = !json[QString("line2")].isNull() && m_line2_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postal_code")]);
    m_postal_code_isSet = !json[QString("postal_code")].isNull() && m_postal_code_isValid;
}

QString OAIAddress_4::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddress_4::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_subdivision_isSet) {
        obj.insert(QString("country_subdivision"), ::OpenAPI::toJsonValue(m_country_subdivision));
    }
    if (m_line1_isSet) {
        obj.insert(QString("line1"), ::OpenAPI::toJsonValue(m_line1));
    }
    if (m_line2_isSet) {
        obj.insert(QString("line2"), ::OpenAPI::toJsonValue(m_line2));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postal_code"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    return obj;
}

QString OAIAddress_4::getCity() const {
    return m_city;
}
void OAIAddress_4::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIAddress_4::is_city_Set() const{
    return m_city_isSet;
}

bool OAIAddress_4::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIAddress_4::getCountry() const {
    return m_country;
}
void OAIAddress_4::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAddress_4::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAddress_4::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIAddress_4::getCountrySubdivision() const {
    return m_country_subdivision;
}
void OAIAddress_4::setCountrySubdivision(const QString &country_subdivision) {
    m_country_subdivision = country_subdivision;
    m_country_subdivision_isSet = true;
}

bool OAIAddress_4::is_country_subdivision_Set() const{
    return m_country_subdivision_isSet;
}

bool OAIAddress_4::is_country_subdivision_Valid() const{
    return m_country_subdivision_isValid;
}

QString OAIAddress_4::getLine1() const {
    return m_line1;
}
void OAIAddress_4::setLine1(const QString &line1) {
    m_line1 = line1;
    m_line1_isSet = true;
}

bool OAIAddress_4::is_line1_Set() const{
    return m_line1_isSet;
}

bool OAIAddress_4::is_line1_Valid() const{
    return m_line1_isValid;
}

QString OAIAddress_4::getLine2() const {
    return m_line2;
}
void OAIAddress_4::setLine2(const QString &line2) {
    m_line2 = line2;
    m_line2_isSet = true;
}

bool OAIAddress_4::is_line2_Set() const{
    return m_line2_isSet;
}

bool OAIAddress_4::is_line2_Valid() const{
    return m_line2_isValid;
}

QString OAIAddress_4::getPostalCode() const {
    return m_postal_code;
}
void OAIAddress_4::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIAddress_4::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIAddress_4::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

bool OAIAddress_4::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_subdivision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddress_4::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_city_isValid && m_country_isValid && true;
}

} // namespace OpenAPI
