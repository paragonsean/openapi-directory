/**
 * Send Person to Merchant
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionHistory_111.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionHistory_111::OAITransactionHistory_111(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionHistory_111::OAITransactionHistory_111() {
    this->initializeModel();
}

OAITransactionHistory_111::~OAITransactionHistory_111() {}

void OAITransactionHistory_111::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_item_count_isSet = false;
    m_item_count_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;
}

void OAITransactionHistory_111::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactionHistory_111::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_item_count_isValid = ::OpenAPI::fromJsonValue(m_item_count, json[QString("item_count")]);
    m_item_count_isSet = !json[QString("item_count")].isNull() && m_item_count_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resource_type")]);
    m_resource_type_isSet = !json[QString("resource_type")].isNull() && m_resource_type_isValid;
}

QString OAITransactionHistory_111::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactionHistory_111::asJsonObject() const {
    QJsonObject obj;
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_item_count_isSet) {
        obj.insert(QString("item_count"), ::OpenAPI::toJsonValue(m_item_count));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resource_type"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    return obj;
}

OAIData_112 OAITransactionHistory_111::getData() const {
    return m_data;
}
void OAITransactionHistory_111::setData(const OAIData_112 &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAITransactionHistory_111::is_data_Set() const{
    return m_data_isSet;
}

bool OAITransactionHistory_111::is_data_Valid() const{
    return m_data_isValid;
}

qint64 OAITransactionHistory_111::getItemCount() const {
    return m_item_count;
}
void OAITransactionHistory_111::setItemCount(const qint64 &item_count) {
    m_item_count = item_count;
    m_item_count_isSet = true;
}

bool OAITransactionHistory_111::is_item_count_Set() const{
    return m_item_count_isSet;
}

bool OAITransactionHistory_111::is_item_count_Valid() const{
    return m_item_count_isValid;
}

QString OAITransactionHistory_111::getResourceType() const {
    return m_resource_type;
}
void OAITransactionHistory_111::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAITransactionHistory_111::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAITransactionHistory_111::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

bool OAITransactionHistory_111::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactionHistory_111::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
