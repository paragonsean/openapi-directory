/**
 * Send Person to Merchant
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationRequest_159.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationRequest_159::OAINotificationRequest_159(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationRequest_159::OAINotificationRequest_159() {
    this->initializeModel();
}

OAINotificationRequest_159::~OAINotificationRequest_159() {}

void OAINotificationRequest_159::initializeModel() {

    m_additional_message_isSet = false;
    m_additional_message_isValid = false;

    m_mastercard_assigned_id_isSet = false;
    m_mastercard_assigned_id_isValid = false;

    m_merchant_category_code_isSet = false;
    m_merchant_category_code_isValid = false;

    m_payment_facilitator_id_isSet = false;
    m_payment_facilitator_id_isValid = false;

    m_payment_type_isSet = false;
    m_payment_type_isValid = false;

    m_recipient_isSet = false;
    m_recipient_isValid = false;

    m_recipient_account_uri_isSet = false;
    m_recipient_account_uri_isValid = false;

    m_transaction_amount_isSet = false;
    m_transaction_amount_isValid = false;

    m_transfer_status_isSet = false;
    m_transfer_status_isValid = false;
}

void OAINotificationRequest_159::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationRequest_159::fromJsonObject(QJsonObject json) {

    m_additional_message_isValid = ::OpenAPI::fromJsonValue(m_additional_message, json[QString("additional_message")]);
    m_additional_message_isSet = !json[QString("additional_message")].isNull() && m_additional_message_isValid;

    m_mastercard_assigned_id_isValid = ::OpenAPI::fromJsonValue(m_mastercard_assigned_id, json[QString("mastercard_assigned_id")]);
    m_mastercard_assigned_id_isSet = !json[QString("mastercard_assigned_id")].isNull() && m_mastercard_assigned_id_isValid;

    m_merchant_category_code_isValid = ::OpenAPI::fromJsonValue(m_merchant_category_code, json[QString("merchant_category_code")]);
    m_merchant_category_code_isSet = !json[QString("merchant_category_code")].isNull() && m_merchant_category_code_isValid;

    m_payment_facilitator_id_isValid = ::OpenAPI::fromJsonValue(m_payment_facilitator_id, json[QString("payment_facilitator_id")]);
    m_payment_facilitator_id_isSet = !json[QString("payment_facilitator_id")].isNull() && m_payment_facilitator_id_isValid;

    m_payment_type_isValid = ::OpenAPI::fromJsonValue(m_payment_type, json[QString("payment_type")]);
    m_payment_type_isSet = !json[QString("payment_type")].isNull() && m_payment_type_isValid;

    m_recipient_isValid = ::OpenAPI::fromJsonValue(m_recipient, json[QString("recipient")]);
    m_recipient_isSet = !json[QString("recipient")].isNull() && m_recipient_isValid;

    m_recipient_account_uri_isValid = ::OpenAPI::fromJsonValue(m_recipient_account_uri, json[QString("recipient_account_uri")]);
    m_recipient_account_uri_isSet = !json[QString("recipient_account_uri")].isNull() && m_recipient_account_uri_isValid;

    m_transaction_amount_isValid = ::OpenAPI::fromJsonValue(m_transaction_amount, json[QString("transaction_amount")]);
    m_transaction_amount_isSet = !json[QString("transaction_amount")].isNull() && m_transaction_amount_isValid;

    m_transfer_status_isValid = ::OpenAPI::fromJsonValue(m_transfer_status, json[QString("transfer_status")]);
    m_transfer_status_isSet = !json[QString("transfer_status")].isNull() && m_transfer_status_isValid;
}

QString OAINotificationRequest_159::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationRequest_159::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_message_isSet) {
        obj.insert(QString("additional_message"), ::OpenAPI::toJsonValue(m_additional_message));
    }
    if (m_mastercard_assigned_id_isSet) {
        obj.insert(QString("mastercard_assigned_id"), ::OpenAPI::toJsonValue(m_mastercard_assigned_id));
    }
    if (m_merchant_category_code_isSet) {
        obj.insert(QString("merchant_category_code"), ::OpenAPI::toJsonValue(m_merchant_category_code));
    }
    if (m_payment_facilitator_id_isSet) {
        obj.insert(QString("payment_facilitator_id"), ::OpenAPI::toJsonValue(m_payment_facilitator_id));
    }
    if (m_payment_type_isSet) {
        obj.insert(QString("payment_type"), ::OpenAPI::toJsonValue(m_payment_type));
    }
    if (m_recipient.isSet()) {
        obj.insert(QString("recipient"), ::OpenAPI::toJsonValue(m_recipient));
    }
    if (m_recipient_account_uri_isSet) {
        obj.insert(QString("recipient_account_uri"), ::OpenAPI::toJsonValue(m_recipient_account_uri));
    }
    if (m_transaction_amount.isSet()) {
        obj.insert(QString("transaction_amount"), ::OpenAPI::toJsonValue(m_transaction_amount));
    }
    if (m_transfer_status_isSet) {
        obj.insert(QString("transfer_status"), ::OpenAPI::toJsonValue(m_transfer_status));
    }
    return obj;
}

QString OAINotificationRequest_159::getAdditionalMessage() const {
    return m_additional_message;
}
void OAINotificationRequest_159::setAdditionalMessage(const QString &additional_message) {
    m_additional_message = additional_message;
    m_additional_message_isSet = true;
}

bool OAINotificationRequest_159::is_additional_message_Set() const{
    return m_additional_message_isSet;
}

bool OAINotificationRequest_159::is_additional_message_Valid() const{
    return m_additional_message_isValid;
}

QString OAINotificationRequest_159::getMastercardAssignedId() const {
    return m_mastercard_assigned_id;
}
void OAINotificationRequest_159::setMastercardAssignedId(const QString &mastercard_assigned_id) {
    m_mastercard_assigned_id = mastercard_assigned_id;
    m_mastercard_assigned_id_isSet = true;
}

bool OAINotificationRequest_159::is_mastercard_assigned_id_Set() const{
    return m_mastercard_assigned_id_isSet;
}

bool OAINotificationRequest_159::is_mastercard_assigned_id_Valid() const{
    return m_mastercard_assigned_id_isValid;
}

QString OAINotificationRequest_159::getMerchantCategoryCode() const {
    return m_merchant_category_code;
}
void OAINotificationRequest_159::setMerchantCategoryCode(const QString &merchant_category_code) {
    m_merchant_category_code = merchant_category_code;
    m_merchant_category_code_isSet = true;
}

bool OAINotificationRequest_159::is_merchant_category_code_Set() const{
    return m_merchant_category_code_isSet;
}

bool OAINotificationRequest_159::is_merchant_category_code_Valid() const{
    return m_merchant_category_code_isValid;
}

QString OAINotificationRequest_159::getPaymentFacilitatorId() const {
    return m_payment_facilitator_id;
}
void OAINotificationRequest_159::setPaymentFacilitatorId(const QString &payment_facilitator_id) {
    m_payment_facilitator_id = payment_facilitator_id;
    m_payment_facilitator_id_isSet = true;
}

bool OAINotificationRequest_159::is_payment_facilitator_id_Set() const{
    return m_payment_facilitator_id_isSet;
}

bool OAINotificationRequest_159::is_payment_facilitator_id_Valid() const{
    return m_payment_facilitator_id_isValid;
}

QString OAINotificationRequest_159::getPaymentType() const {
    return m_payment_type;
}
void OAINotificationRequest_159::setPaymentType(const QString &payment_type) {
    m_payment_type = payment_type;
    m_payment_type_isSet = true;
}

bool OAINotificationRequest_159::is_payment_type_Set() const{
    return m_payment_type_isSet;
}

bool OAINotificationRequest_159::is_payment_type_Valid() const{
    return m_payment_type_isValid;
}

OAIRecipient_161 OAINotificationRequest_159::getRecipient() const {
    return m_recipient;
}
void OAINotificationRequest_159::setRecipient(const OAIRecipient_161 &recipient) {
    m_recipient = recipient;
    m_recipient_isSet = true;
}

bool OAINotificationRequest_159::is_recipient_Set() const{
    return m_recipient_isSet;
}

bool OAINotificationRequest_159::is_recipient_Valid() const{
    return m_recipient_isValid;
}

QString OAINotificationRequest_159::getRecipientAccountUri() const {
    return m_recipient_account_uri;
}
void OAINotificationRequest_159::setRecipientAccountUri(const QString &recipient_account_uri) {
    m_recipient_account_uri = recipient_account_uri;
    m_recipient_account_uri_isSet = true;
}

bool OAINotificationRequest_159::is_recipient_account_uri_Set() const{
    return m_recipient_account_uri_isSet;
}

bool OAINotificationRequest_159::is_recipient_account_uri_Valid() const{
    return m_recipient_account_uri_isValid;
}

OAITransactionAmount_160 OAINotificationRequest_159::getTransactionAmount() const {
    return m_transaction_amount;
}
void OAINotificationRequest_159::setTransactionAmount(const OAITransactionAmount_160 &transaction_amount) {
    m_transaction_amount = transaction_amount;
    m_transaction_amount_isSet = true;
}

bool OAINotificationRequest_159::is_transaction_amount_Set() const{
    return m_transaction_amount_isSet;
}

bool OAINotificationRequest_159::is_transaction_amount_Valid() const{
    return m_transaction_amount_isValid;
}

QString OAINotificationRequest_159::getTransferStatus() const {
    return m_transfer_status;
}
void OAINotificationRequest_159::setTransferStatus(const QString &transfer_status) {
    m_transfer_status = transfer_status;
    m_transfer_status_isSet = true;
}

bool OAINotificationRequest_159::is_transfer_status_Set() const{
    return m_transfer_status_isSet;
}

bool OAINotificationRequest_159::is_transfer_status_Valid() const{
    return m_transfer_status_isValid;
}

bool OAINotificationRequest_159::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mastercard_assigned_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_category_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_facilitator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_account_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationRequest_159::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_payment_type_isValid && m_recipient_account_uri_isValid && m_transfer_status_isValid && true;
}

} // namespace OpenAPI
