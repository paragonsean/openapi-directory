/**
 * Send Person to Merchant
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransferNotificationRegistrationApi_H
#define OAI_OAITransferNotificationRegistrationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountregistration_167_wrapper.h"
#include "OAIAccountregistration_168_wrapper.h"
#include "OAIAccountregistration_169_wrapper.h"
#include "OAIAccountregistration_170_wrapper.h"
#include "OAIAccountregistration_171_wrapper.h"
#include "OAIAccountregistration_172_wrapper.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransferNotificationRegistrationApi : public QObject {
    Q_OBJECT

public:
    OAITransferNotificationRegistrationApi(const int timeOut = 0);
    ~OAITransferNotificationRegistrationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  partner_id QString [required]
    * @param[in]  accountregistration OAIAccountregistration_167_wrapper [optional]
    */
    virtual void createTransferNotificationRegistration(const QString &partner_id, const ::OpenAPI::OptionalParam<OAIAccountregistration_167_wrapper> &accountregistration = ::OpenAPI::OptionalParam<OAIAccountregistration_167_wrapper>());

    /**
    * @param[in]  partner_id QString [required]
    * @param[in]  account_reg_ref QString [required]
    */
    virtual void deleteTransferNotificationRegistration(const QString &partner_id, const QString &account_reg_ref);

    /**
    * @param[in]  partner_id QString [required]
    * @param[in]  account_reg_ref QString [required]
    */
    virtual void notificationRegistrationAPIReadBy(const QString &partner_id, const QString &account_reg_ref);

    /**
    * @param[in]  partner_id QString [required]
    * @param[in]  account_reg_ref QString [required]
    * @param[in]  accountregistration OAIAccountregistration_169_wrapper [optional]
    */
    virtual void notificationRegistrationAPIUpdate(const QString &partner_id, const QString &account_reg_ref, const ::OpenAPI::OptionalParam<OAIAccountregistration_169_wrapper> &accountregistration = ::OpenAPI::OptionalParam<OAIAccountregistration_169_wrapper>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createTransferNotificationRegistrationCallback(OAIHttpRequestWorker *worker);
    void deleteTransferNotificationRegistrationCallback(OAIHttpRequestWorker *worker);
    void notificationRegistrationAPIReadByCallback(OAIHttpRequestWorker *worker);
    void notificationRegistrationAPIUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createTransferNotificationRegistrationSignal(OAIAccountregistration_168_wrapper summary);
    void deleteTransferNotificationRegistrationSignal(OAIAccountregistration_171_wrapper summary);
    void notificationRegistrationAPIReadBySignal(OAIAccountregistration_172_wrapper summary);
    void notificationRegistrationAPIUpdateSignal(OAIAccountregistration_170_wrapper summary);


    void createTransferNotificationRegistrationSignalFull(OAIHttpRequestWorker *worker, OAIAccountregistration_168_wrapper summary);
    void deleteTransferNotificationRegistrationSignalFull(OAIHttpRequestWorker *worker, OAIAccountregistration_171_wrapper summary);
    void notificationRegistrationAPIReadBySignalFull(OAIHttpRequestWorker *worker, OAIAccountregistration_172_wrapper summary);
    void notificationRegistrationAPIUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAccountregistration_170_wrapper summary);

    Q_DECL_DEPRECATED_X("Use createTransferNotificationRegistrationSignalError() instead")
    void createTransferNotificationRegistrationSignalE(OAIAccountregistration_168_wrapper summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTransferNotificationRegistrationSignalError(OAIAccountregistration_168_wrapper summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTransferNotificationRegistrationSignalError() instead")
    void deleteTransferNotificationRegistrationSignalE(OAIAccountregistration_171_wrapper summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTransferNotificationRegistrationSignalError(OAIAccountregistration_171_wrapper summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRegistrationAPIReadBySignalError() instead")
    void notificationRegistrationAPIReadBySignalE(OAIAccountregistration_172_wrapper summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRegistrationAPIReadBySignalError(OAIAccountregistration_172_wrapper summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRegistrationAPIUpdateSignalError() instead")
    void notificationRegistrationAPIUpdateSignalE(OAIAccountregistration_170_wrapper summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRegistrationAPIUpdateSignalError(OAIAccountregistration_170_wrapper summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createTransferNotificationRegistrationSignalErrorFull() instead")
    void createTransferNotificationRegistrationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTransferNotificationRegistrationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTransferNotificationRegistrationSignalErrorFull() instead")
    void deleteTransferNotificationRegistrationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTransferNotificationRegistrationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRegistrationAPIReadBySignalErrorFull() instead")
    void notificationRegistrationAPIReadBySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRegistrationAPIReadBySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationRegistrationAPIUpdateSignalErrorFull() instead")
    void notificationRegistrationAPIUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationRegistrationAPIUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
