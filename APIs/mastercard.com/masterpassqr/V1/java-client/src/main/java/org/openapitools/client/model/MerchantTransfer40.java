/*
 * Send Person to Merchant
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Participant53;
import org.openapitools.client.model.Recipient43;
import org.openapitools.client.model.ReconciliationData51;
import org.openapitools.client.model.Sender41;
import org.openapitools.client.model.TransactionHistory47;
import org.openapitools.client.model.TransferAmount46;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response details for a merchant transfer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:31.069911-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MerchantTransfer40 {
  public static final String SERIALIZED_NAME_ADDITIONAL_MESSAGE = "additional_message";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_MESSAGE)
  private String additionalMessage;

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private String channel;

  public static final String SERIALIZED_NAME_CONVENIENCE_AMOUNT = "convenience_amount";
  @SerializedName(SERIALIZED_NAME_CONVENIENCE_AMOUNT)
  private String convenienceAmount;

  public static final String SERIALIZED_NAME_CONVENIENCE_INDICATOR = "convenience_indicator";
  @SerializedName(SERIALIZED_NAME_CONVENIENCE_INDICATOR)
  private String convenienceIndicator;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_DEVICE_ID = "device_id";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private String deviceId;

  public static final String SERIALIZED_NAME_DIGITAL_ACCOUNT_REFERENCE_NUMBER = "digital_account_reference_number";
  @SerializedName(SERIALIZED_NAME_DIGITAL_ACCOUNT_REFERENCE_NUMBER)
  private String digitalAccountReferenceNumber;

  public static final String SERIALIZED_NAME_FUNDING_SOURCE = "funding_source";
  @SerializedName(SERIALIZED_NAME_FUNDING_SOURCE)
  private String fundingSource;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INTERCHANGE_RATE_DESIGNATOR = "interchange_rate_designator";
  @SerializedName(SERIALIZED_NAME_INTERCHANGE_RATE_DESIGNATOR)
  private String interchangeRateDesignator;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_ORIGINAL_STATUS = "original_status";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_STATUS)
  private String originalStatus;

  public static final String SERIALIZED_NAME_PARTICIPANT = "participant";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT)
  private Participant53 participant;

  public static final String SERIALIZED_NAME_PARTICIPATION_ID = "participation_id";
  @SerializedName(SERIALIZED_NAME_PARTICIPATION_ID)
  private String participationId;

  public static final String SERIALIZED_NAME_PAYMENT_ORIGINATION_COUNTRY = "payment_origination_country";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ORIGINATION_COUNTRY)
  private String paymentOriginationCountry;

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "payment_type";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private String paymentType;

  public static final String SERIALIZED_NAME_PROCESSOR_ID = "processor_id";
  @SerializedName(SERIALIZED_NAME_PROCESSOR_ID)
  private String processorId;

  public static final String SERIALIZED_NAME_QR_DATA = "qr_data";
  @SerializedName(SERIALIZED_NAME_QR_DATA)
  private String qrData;

  public static final String SERIALIZED_NAME_RECIPIENT = "recipient";
  @SerializedName(SERIALIZED_NAME_RECIPIENT)
  private Recipient43 recipient;

  public static final String SERIALIZED_NAME_RECIPIENT_ACCOUNT_URI = "recipient_account_uri";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_ACCOUNT_URI)
  private String recipientAccountUri;

  public static final String SERIALIZED_NAME_RECONCILIATION_DATA = "reconciliation_data";
  @SerializedName(SERIALIZED_NAME_RECONCILIATION_DATA)
  private ReconciliationData51 reconciliationData;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resource_type";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_ROUTING_TRANSIT_NUMBER = "routing_transit_number";
  @SerializedName(SERIALIZED_NAME_ROUTING_TRANSIT_NUMBER)
  private String routingTransitNumber;

  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  private Sender41 sender;

  public static final String SERIALIZED_NAME_SENDER_ACCOUNT_URI = "sender_account_uri";
  @SerializedName(SERIALIZED_NAME_SENDER_ACCOUNT_URI)
  private String senderAccountUri;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_STATUS_TIMESTAMP = "status_timestamp";
  @SerializedName(SERIALIZED_NAME_STATUS_TIMESTAMP)
  private String statusTimestamp;

  public static final String SERIALIZED_NAME_TRANSACTION_HISTORY = "transaction_history";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_HISTORY)
  private TransactionHistory47 transactionHistory;

  public static final String SERIALIZED_NAME_TRANSACTION_LOCAL_DATE_TIME = "transaction_local_date_time";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_LOCAL_DATE_TIME)
  private String transactionLocalDateTime;

  public static final String SERIALIZED_NAME_TRANSFER_AMOUNT = "transfer_amount";
  @SerializedName(SERIALIZED_NAME_TRANSFER_AMOUNT)
  private TransferAmount46 transferAmount;

  public static final String SERIALIZED_NAME_TRANSFER_REFERENCE = "transfer_reference";
  @SerializedName(SERIALIZED_NAME_TRANSFER_REFERENCE)
  private String transferReference;

  public MerchantTransfer40() {
  }

  public MerchantTransfer40 additionalMessage(String additionalMessage) {
    this.additionalMessage = additionalMessage;
    return this;
  }

  /**
   * Message a financial institution will associate to the transfer and may display.\\n\\nType: Alphanumeric Special [a-zA-Z0-9!\\\&quot;#$%&amp;&#39;()*+,-./\\\\:;&lt;&#x3D;&gt;?@[]_&#x60;{|}~], Maximum Length: 65
   * @return additionalMessage
   */
  @javax.annotation.Nullable
  public String getAdditionalMessage() {
    return additionalMessage;
  }

  public void setAdditionalMessage(String additionalMessage) {
    this.additionalMessage = additionalMessage;
  }


  public MerchantTransfer40 channel(String channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Initiation channel of the transfer request. Values: WEB, MOBILE, BANK, KIOSK.
   * @return channel
   */
  @javax.annotation.Nullable
  public String getChannel() {
    return channel;
  }

  public void setChannel(String channel) {
    this.channel = channel;
  }


  public MerchantTransfer40 convenienceAmount(String convenienceAmount) {
    this.convenienceAmount = convenienceAmount;
    return this;
  }

  /**
   * Tip or convenience amount in transaction currency. Length:1-12 numeric. If present, then convenience_indicator is also required.
   * @return convenienceAmount
   */
  @javax.annotation.Nullable
  public String getConvenienceAmount() {
    return convenienceAmount;
  }

  public void setConvenienceAmount(String convenienceAmount) {
    this.convenienceAmount = convenienceAmount;
  }


  public MerchantTransfer40 convenienceIndicator(String convenienceIndicator) {
    this.convenienceIndicator = convenienceIndicator;
    return this;
  }

  /**
   * Convenience fee type code. Min length: 2. Max Length: 2. Valid values are 01,02 or 03. 01:Indicates consumer should be prompted to enter tip. 02:Indicates the merchant would mandatorily charge a flat convenience fee. 03:Indicates that merchant would charge a percentage convenience fee. Required if convenience_amount is provided.
   * @return convenienceIndicator
   */
  @javax.annotation.Nullable
  public String getConvenienceIndicator() {
    return convenienceIndicator;
  }

  public void setConvenienceIndicator(String convenienceIndicator) {
    this.convenienceIndicator = convenienceIndicator;
  }


  public MerchantTransfer40 created(String created) {
    this.created = created;
    return this;
  }

  /**
   * Date and time the original transfer was created as an ISO 8601 Timestamp. Details- YYYY-MM-DDTHH:MM:SSÂ±hh[:mm] Valid Values- Refer &#39;Date And Time Formats
   * @return created
   */
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public MerchantTransfer40 deviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * The serial number of a device that initiated the transfer.
   * @return deviceId
   */
  @javax.annotation.Nullable
  public String getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(String deviceId) {
    this.deviceId = deviceId;
  }


  public MerchantTransfer40 digitalAccountReferenceNumber(String digitalAccountReferenceNumber) {
    this.digitalAccountReferenceNumber = digitalAccountReferenceNumber;
    return this;
  }

  /**
   * URI to identify the digital account reference number. It will include masked account information but will not include security codes (e.g. CVC or expiration date for a card account). 
   * @return digitalAccountReferenceNumber
   */
  @javax.annotation.Nullable
  public String getDigitalAccountReferenceNumber() {
    return digitalAccountReferenceNumber;
  }

  public void setDigitalAccountReferenceNumber(String digitalAccountReferenceNumber) {
    this.digitalAccountReferenceNumber = digitalAccountReferenceNumber;
  }


  public MerchantTransfer40 fundingSource(String fundingSource) {
    this.fundingSource = fundingSource;
    return this;
  }

  /**
   * Funding source must contain one of the following: CREDIT, DEBIT, PREPAID, DEPOSIT_ACCOUNT, MOBILE_MONEY_ACCOUNT or CASH. 
   * @return fundingSource
   */
  @javax.annotation.Nullable
  public String getFundingSource() {
    return fundingSource;
  }

  public void setFundingSource(String fundingSource) {
    this.fundingSource = fundingSource;
  }


  public MerchantTransfer40 id(String id) {
    this.id = id;
    return this;
  }

  /**
   * System generated unique merchant transfer identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MerchantTransfer40 interchangeRateDesignator(String interchangeRateDesignator) {
    this.interchangeRateDesignator = interchangeRateDesignator;
    return this;
  }

  /**
   * Indicates the interchange rate and editing rules applied to the transaction.  Type:Alphanumeric [a-zA-Z 0-9], Length: 2
   * @return interchangeRateDesignator
   */
  @javax.annotation.Nullable
  public String getInterchangeRateDesignator() {
    return interchangeRateDesignator;
  }

  public void setInterchangeRateDesignator(String interchangeRateDesignator) {
    this.interchangeRateDesignator = interchangeRateDesignator;
  }


  public MerchantTransfer40 location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Location where the transaction is initiated. Valid Values- Refer &#39;Location URIs&#39;.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public MerchantTransfer40 originalStatus(String originalStatus) {
    this.originalStatus = originalStatus;
    return this;
  }

  /**
   * Original status of the transfer. One of APPROVED, DECLINED, ERROR, PENDING, UNKNOWN.
   * @return originalStatus
   */
  @javax.annotation.Nullable
  public String getOriginalStatus() {
    return originalStatus;
  }

  public void setOriginalStatus(String originalStatus) {
    this.originalStatus = originalStatus;
  }


  public MerchantTransfer40 participant(Participant53 participant) {
    this.participant = participant;
    return this;
  }

  /**
   * Get participant
   * @return participant
   */
  @javax.annotation.Nullable
  public Participant53 getParticipant() {
    return participant;
  }

  public void setParticipant(Participant53 participant) {
    this.participant = participant;
  }


  public MerchantTransfer40 participationId(String participationId) {
    this.participationId = participationId;
    return this;
  }

  /**
   * Participation identifier of the sender. The receiving financial institution will associate the value to the transfer.\\n\\nType: Alphanumeric Special [a-zA-Z0-9!\\\&quot;#$%&amp;&#39;()*+,-./\\\\:;&lt;&#x3D;&gt;?@[]_&#x60;{|}~], Maximum Length: 30
   * @return participationId
   */
  @javax.annotation.Nullable
  public String getParticipationId() {
    return participationId;
  }

  public void setParticipationId(String participationId) {
    this.participationId = participationId;
  }


  public MerchantTransfer40 paymentOriginationCountry(String paymentOriginationCountry) {
    this.paymentOriginationCountry = paymentOriginationCountry;
    return this;
  }

  /**
   * Country where the payment originated from as an ISO 3166-1 alpha-3 country code, in upper case.   Type: Alpha [A-Z], Maximum Length: 3
   * @return paymentOriginationCountry
   */
  @javax.annotation.Nullable
  public String getPaymentOriginationCountry() {
    return paymentOriginationCountry;
  }

  public void setPaymentOriginationCountry(String paymentOriginationCountry) {
    this.paymentOriginationCountry = paymentOriginationCountry;
  }


  public MerchantTransfer40 paymentType(String paymentType) {
    this.paymentType = paymentType;
    return this;
  }

  /**
   * P2M: Person to Merchant
   * @return paymentType
   */
  @javax.annotation.Nullable
  public String getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(String paymentType) {
    this.paymentType = paymentType;
  }


  public MerchantTransfer40 processorId(String processorId) {
    this.processorId = processorId;
    return this;
  }

  /**
   * The processor ID is a ten-digit number of the form: 9000xxxxxx, where the Single Message System-assigned processor ID will be up to the last six digits xxxxxx. If the partner is enrolled in multiple processorId numbers, the processorId number must be specified. If the partner is only enrolled in a single processorId number then system takes the onboarded value. Please contact your MasterCard Representative to enable the usage of fields in this section. Details- Numeric, 10
   * @return processorId
   */
  @javax.annotation.Nullable
  public String getProcessorId() {
    return processorId;
  }

  public void setProcessorId(String processorId) {
    this.processorId = processorId;
  }


  public MerchantTransfer40 qrData(String qrData) {
    this.qrData = qrData;
    return this;
  }

  /**
   * Contains QR data. For future use. Details- alpha numeric special characters 1-237.
   * @return qrData
   */
  @javax.annotation.Nullable
  public String getQrData() {
    return qrData;
  }

  public void setQrData(String qrData) {
    this.qrData = qrData;
  }


  public MerchantTransfer40 recipient(Recipient43 recipient) {
    this.recipient = recipient;
    return this;
  }

  /**
   * Get recipient
   * @return recipient
   */
  @javax.annotation.Nullable
  public Recipient43 getRecipient() {
    return recipient;
  }

  public void setRecipient(Recipient43 recipient) {
    this.recipient = recipient;
  }


  public MerchantTransfer40 recipientAccountUri(String recipientAccountUri) {
    this.recipientAccountUri = recipientAccountUri;
    return this;
  }

  /**
   * URI describing the recipient account. It will include masked account information (e.g. \&quot;************1234\&quot; for a card account) but will not include security codes (e.g. CVC or expiration date for a card account).
   * @return recipientAccountUri
   */
  @javax.annotation.Nullable
  public String getRecipientAccountUri() {
    return recipientAccountUri;
  }

  public void setRecipientAccountUri(String recipientAccountUri) {
    this.recipientAccountUri = recipientAccountUri;
  }


  public MerchantTransfer40 reconciliationData(ReconciliationData51 reconciliationData) {
    this.reconciliationData = reconciliationData;
    return this;
  }

  /**
   * Get reconciliationData
   * @return reconciliationData
   */
  @javax.annotation.Nullable
  public ReconciliationData51 getReconciliationData() {
    return reconciliationData;
  }

  public void setReconciliationData(ReconciliationData51 reconciliationData) {
    this.reconciliationData = reconciliationData;
  }


  public MerchantTransfer40 resourceType(String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Type of the resource that is being returned. Valid value: merchant_transfer
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }

  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }


  public MerchantTransfer40 routingTransitNumber(String routingTransitNumber) {
    this.routingTransitNumber = routingTransitNumber;
    return this;
  }

  /**
   * The nine-digit Federal Reserve Routing and Transit (R &amp; T) number of the acquiring institution or the nine-digit pseudo-number assigned to the acquiring institution by Mastercard. If the partner is enrolled in multiple routing transit numbers, the routing transit number must be specified. If the partner is only enrolled in a single routing transit number then system takes the onboarded value. Please contact your MasterCard Representative to enable the usage of fields in this section. Details- Numeric, 9
   * @return routingTransitNumber
   */
  @javax.annotation.Nullable
  public String getRoutingTransitNumber() {
    return routingTransitNumber;
  }

  public void setRoutingTransitNumber(String routingTransitNumber) {
    this.routingTransitNumber = routingTransitNumber;
  }


  public MerchantTransfer40 sender(Sender41 sender) {
    this.sender = sender;
    return this;
  }

  /**
   * Get sender
   * @return sender
   */
  @javax.annotation.Nullable
  public Sender41 getSender() {
    return sender;
  }

  public void setSender(Sender41 sender) {
    this.sender = sender;
  }


  public MerchantTransfer40 senderAccountUri(String senderAccountUri) {
    this.senderAccountUri = senderAccountUri;
    return this;
  }

  /**
   * URI describing the sending account. It will include masked account information (e.g. \&quot;************1234\&quot; for a card account) but will not include security codes (e.g. CVC or expiration date for a card account).
   * @return senderAccountUri
   */
  @javax.annotation.Nullable
  public String getSenderAccountUri() {
    return senderAccountUri;
  }

  public void setSenderAccountUri(String senderAccountUri) {
    this.senderAccountUri = senderAccountUri;
  }


  public MerchantTransfer40 status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Status of the transfer. Values: APPROVED, DECLINED, ERROR, PENDING, REVERSED, CANCELLED.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public MerchantTransfer40 statusTimestamp(String statusTimestamp) {
    this.statusTimestamp = statusTimestamp;
    return this;
  }

  /**
   * Timestamp of when the status was changed to its current value. Details-YYYY-MM-DDTHH:MM:SSÂ±hh[:mm] Valid Values- Refer &#39;Date And Time Formats
   * @return statusTimestamp
   */
  @javax.annotation.Nullable
  public String getStatusTimestamp() {
    return statusTimestamp;
  }

  public void setStatusTimestamp(String statusTimestamp) {
    this.statusTimestamp = statusTimestamp;
  }


  public MerchantTransfer40 transactionHistory(TransactionHistory47 transactionHistory) {
    this.transactionHistory = transactionHistory;
    return this;
  }

  /**
   * Get transactionHistory
   * @return transactionHistory
   */
  @javax.annotation.Nullable
  public TransactionHistory47 getTransactionHistory() {
    return transactionHistory;
  }

  public void setTransactionHistory(TransactionHistory47 transactionHistory) {
    this.transactionHistory = transactionHistory;
  }


  public MerchantTransfer40 transactionLocalDateTime(String transactionLocalDateTime) {
    this.transactionLocalDateTime = transactionLocalDateTime;
    return this;
  }

  /**
   * Local date and time when the transaction is submitted. Details-YYYY-MM-DDTHH:MM:SSÂ±hh[:mm] 
   * @return transactionLocalDateTime
   */
  @javax.annotation.Nullable
  public String getTransactionLocalDateTime() {
    return transactionLocalDateTime;
  }

  public void setTransactionLocalDateTime(String transactionLocalDateTime) {
    this.transactionLocalDateTime = transactionLocalDateTime;
  }


  public MerchantTransfer40 transferAmount(TransferAmount46 transferAmount) {
    this.transferAmount = transferAmount;
    return this;
  }

  /**
   * Get transferAmount
   * @return transferAmount
   */
  @javax.annotation.Nullable
  public TransferAmount46 getTransferAmount() {
    return transferAmount;
  }

  public void setTransferAmount(TransferAmount46 transferAmount) {
    this.transferAmount = transferAmount;
  }


  public MerchantTransfer40 transferReference(String transferReference) {
    this.transferReference = transferReference;
    return this;
  }

  /**
   * Unique transaction reference number provided when the Transfer was created.
   * @return transferReference
   */
  @javax.annotation.Nullable
  public String getTransferReference() {
    return transferReference;
  }

  public void setTransferReference(String transferReference) {
    this.transferReference = transferReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MerchantTransfer40 merchantTransfer40 = (MerchantTransfer40) o;
    return Objects.equals(this.additionalMessage, merchantTransfer40.additionalMessage) &&
        Objects.equals(this.channel, merchantTransfer40.channel) &&
        Objects.equals(this.convenienceAmount, merchantTransfer40.convenienceAmount) &&
        Objects.equals(this.convenienceIndicator, merchantTransfer40.convenienceIndicator) &&
        Objects.equals(this.created, merchantTransfer40.created) &&
        Objects.equals(this.deviceId, merchantTransfer40.deviceId) &&
        Objects.equals(this.digitalAccountReferenceNumber, merchantTransfer40.digitalAccountReferenceNumber) &&
        Objects.equals(this.fundingSource, merchantTransfer40.fundingSource) &&
        Objects.equals(this.id, merchantTransfer40.id) &&
        Objects.equals(this.interchangeRateDesignator, merchantTransfer40.interchangeRateDesignator) &&
        Objects.equals(this.location, merchantTransfer40.location) &&
        Objects.equals(this.originalStatus, merchantTransfer40.originalStatus) &&
        Objects.equals(this.participant, merchantTransfer40.participant) &&
        Objects.equals(this.participationId, merchantTransfer40.participationId) &&
        Objects.equals(this.paymentOriginationCountry, merchantTransfer40.paymentOriginationCountry) &&
        Objects.equals(this.paymentType, merchantTransfer40.paymentType) &&
        Objects.equals(this.processorId, merchantTransfer40.processorId) &&
        Objects.equals(this.qrData, merchantTransfer40.qrData) &&
        Objects.equals(this.recipient, merchantTransfer40.recipient) &&
        Objects.equals(this.recipientAccountUri, merchantTransfer40.recipientAccountUri) &&
        Objects.equals(this.reconciliationData, merchantTransfer40.reconciliationData) &&
        Objects.equals(this.resourceType, merchantTransfer40.resourceType) &&
        Objects.equals(this.routingTransitNumber, merchantTransfer40.routingTransitNumber) &&
        Objects.equals(this.sender, merchantTransfer40.sender) &&
        Objects.equals(this.senderAccountUri, merchantTransfer40.senderAccountUri) &&
        Objects.equals(this.status, merchantTransfer40.status) &&
        Objects.equals(this.statusTimestamp, merchantTransfer40.statusTimestamp) &&
        Objects.equals(this.transactionHistory, merchantTransfer40.transactionHistory) &&
        Objects.equals(this.transactionLocalDateTime, merchantTransfer40.transactionLocalDateTime) &&
        Objects.equals(this.transferAmount, merchantTransfer40.transferAmount) &&
        Objects.equals(this.transferReference, merchantTransfer40.transferReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalMessage, channel, convenienceAmount, convenienceIndicator, created, deviceId, digitalAccountReferenceNumber, fundingSource, id, interchangeRateDesignator, location, originalStatus, participant, participationId, paymentOriginationCountry, paymentType, processorId, qrData, recipient, recipientAccountUri, reconciliationData, resourceType, routingTransitNumber, sender, senderAccountUri, status, statusTimestamp, transactionHistory, transactionLocalDateTime, transferAmount, transferReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MerchantTransfer40 {\n");
    sb.append("    additionalMessage: ").append(toIndentedString(additionalMessage)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    convenienceAmount: ").append(toIndentedString(convenienceAmount)).append("\n");
    sb.append("    convenienceIndicator: ").append(toIndentedString(convenienceIndicator)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    digitalAccountReferenceNumber: ").append(toIndentedString(digitalAccountReferenceNumber)).append("\n");
    sb.append("    fundingSource: ").append(toIndentedString(fundingSource)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    interchangeRateDesignator: ").append(toIndentedString(interchangeRateDesignator)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    originalStatus: ").append(toIndentedString(originalStatus)).append("\n");
    sb.append("    participant: ").append(toIndentedString(participant)).append("\n");
    sb.append("    participationId: ").append(toIndentedString(participationId)).append("\n");
    sb.append("    paymentOriginationCountry: ").append(toIndentedString(paymentOriginationCountry)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    processorId: ").append(toIndentedString(processorId)).append("\n");
    sb.append("    qrData: ").append(toIndentedString(qrData)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    recipientAccountUri: ").append(toIndentedString(recipientAccountUri)).append("\n");
    sb.append("    reconciliationData: ").append(toIndentedString(reconciliationData)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    routingTransitNumber: ").append(toIndentedString(routingTransitNumber)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    senderAccountUri: ").append(toIndentedString(senderAccountUri)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusTimestamp: ").append(toIndentedString(statusTimestamp)).append("\n");
    sb.append("    transactionHistory: ").append(toIndentedString(transactionHistory)).append("\n");
    sb.append("    transactionLocalDateTime: ").append(toIndentedString(transactionLocalDateTime)).append("\n");
    sb.append("    transferAmount: ").append(toIndentedString(transferAmount)).append("\n");
    sb.append("    transferReference: ").append(toIndentedString(transferReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_message");
    openapiFields.add("channel");
    openapiFields.add("convenience_amount");
    openapiFields.add("convenience_indicator");
    openapiFields.add("created");
    openapiFields.add("device_id");
    openapiFields.add("digital_account_reference_number");
    openapiFields.add("funding_source");
    openapiFields.add("id");
    openapiFields.add("interchange_rate_designator");
    openapiFields.add("location");
    openapiFields.add("original_status");
    openapiFields.add("participant");
    openapiFields.add("participation_id");
    openapiFields.add("payment_origination_country");
    openapiFields.add("payment_type");
    openapiFields.add("processor_id");
    openapiFields.add("qr_data");
    openapiFields.add("recipient");
    openapiFields.add("recipient_account_uri");
    openapiFields.add("reconciliation_data");
    openapiFields.add("resource_type");
    openapiFields.add("routing_transit_number");
    openapiFields.add("sender");
    openapiFields.add("sender_account_uri");
    openapiFields.add("status");
    openapiFields.add("status_timestamp");
    openapiFields.add("transaction_history");
    openapiFields.add("transaction_local_date_time");
    openapiFields.add("transfer_amount");
    openapiFields.add("transfer_reference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MerchantTransfer40
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MerchantTransfer40.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MerchantTransfer40 is not found in the empty JSON string", MerchantTransfer40.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MerchantTransfer40.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MerchantTransfer40` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additional_message") != null && !jsonObj.get("additional_message").isJsonNull()) && !jsonObj.get("additional_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additional_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additional_message").toString()));
      }
      if ((jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) && !jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      if ((jsonObj.get("convenience_amount") != null && !jsonObj.get("convenience_amount").isJsonNull()) && !jsonObj.get("convenience_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `convenience_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("convenience_amount").toString()));
      }
      if ((jsonObj.get("convenience_indicator") != null && !jsonObj.get("convenience_indicator").isJsonNull()) && !jsonObj.get("convenience_indicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `convenience_indicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("convenience_indicator").toString()));
      }
      if ((jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) && !jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if ((jsonObj.get("device_id") != null && !jsonObj.get("device_id").isJsonNull()) && !jsonObj.get("device_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_id").toString()));
      }
      if ((jsonObj.get("digital_account_reference_number") != null && !jsonObj.get("digital_account_reference_number").isJsonNull()) && !jsonObj.get("digital_account_reference_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `digital_account_reference_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("digital_account_reference_number").toString()));
      }
      if ((jsonObj.get("funding_source") != null && !jsonObj.get("funding_source").isJsonNull()) && !jsonObj.get("funding_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `funding_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("funding_source").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("interchange_rate_designator") != null && !jsonObj.get("interchange_rate_designator").isJsonNull()) && !jsonObj.get("interchange_rate_designator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interchange_rate_designator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interchange_rate_designator").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("original_status") != null && !jsonObj.get("original_status").isJsonNull()) && !jsonObj.get("original_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_status").toString()));
      }
      // validate the optional field `participant`
      if (jsonObj.get("participant") != null && !jsonObj.get("participant").isJsonNull()) {
        Participant53.validateJsonElement(jsonObj.get("participant"));
      }
      if ((jsonObj.get("participation_id") != null && !jsonObj.get("participation_id").isJsonNull()) && !jsonObj.get("participation_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `participation_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("participation_id").toString()));
      }
      if ((jsonObj.get("payment_origination_country") != null && !jsonObj.get("payment_origination_country").isJsonNull()) && !jsonObj.get("payment_origination_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_origination_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_origination_country").toString()));
      }
      if ((jsonObj.get("payment_type") != null && !jsonObj.get("payment_type").isJsonNull()) && !jsonObj.get("payment_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_type").toString()));
      }
      if ((jsonObj.get("processor_id") != null && !jsonObj.get("processor_id").isJsonNull()) && !jsonObj.get("processor_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processor_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processor_id").toString()));
      }
      if ((jsonObj.get("qr_data") != null && !jsonObj.get("qr_data").isJsonNull()) && !jsonObj.get("qr_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `qr_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("qr_data").toString()));
      }
      // validate the optional field `recipient`
      if (jsonObj.get("recipient") != null && !jsonObj.get("recipient").isJsonNull()) {
        Recipient43.validateJsonElement(jsonObj.get("recipient"));
      }
      if ((jsonObj.get("recipient_account_uri") != null && !jsonObj.get("recipient_account_uri").isJsonNull()) && !jsonObj.get("recipient_account_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_account_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_account_uri").toString()));
      }
      // validate the optional field `reconciliation_data`
      if (jsonObj.get("reconciliation_data") != null && !jsonObj.get("reconciliation_data").isJsonNull()) {
        ReconciliationData51.validateJsonElement(jsonObj.get("reconciliation_data"));
      }
      if ((jsonObj.get("resource_type") != null && !jsonObj.get("resource_type").isJsonNull()) && !jsonObj.get("resource_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_type").toString()));
      }
      if ((jsonObj.get("routing_transit_number") != null && !jsonObj.get("routing_transit_number").isJsonNull()) && !jsonObj.get("routing_transit_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routing_transit_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routing_transit_number").toString()));
      }
      // validate the optional field `sender`
      if (jsonObj.get("sender") != null && !jsonObj.get("sender").isJsonNull()) {
        Sender41.validateJsonElement(jsonObj.get("sender"));
      }
      if ((jsonObj.get("sender_account_uri") != null && !jsonObj.get("sender_account_uri").isJsonNull()) && !jsonObj.get("sender_account_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sender_account_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender_account_uri").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("status_timestamp") != null && !jsonObj.get("status_timestamp").isJsonNull()) && !jsonObj.get("status_timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_timestamp").toString()));
      }
      // validate the optional field `transaction_history`
      if (jsonObj.get("transaction_history") != null && !jsonObj.get("transaction_history").isJsonNull()) {
        TransactionHistory47.validateJsonElement(jsonObj.get("transaction_history"));
      }
      if ((jsonObj.get("transaction_local_date_time") != null && !jsonObj.get("transaction_local_date_time").isJsonNull()) && !jsonObj.get("transaction_local_date_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_local_date_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_local_date_time").toString()));
      }
      // validate the optional field `transfer_amount`
      if (jsonObj.get("transfer_amount") != null && !jsonObj.get("transfer_amount").isJsonNull()) {
        TransferAmount46.validateJsonElement(jsonObj.get("transfer_amount"));
      }
      if ((jsonObj.get("transfer_reference") != null && !jsonObj.get("transfer_reference").isJsonNull()) && !jsonObj.get("transfer_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transfer_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transfer_reference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MerchantTransfer40.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MerchantTransfer40' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MerchantTransfer40> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MerchantTransfer40.class));

       return (TypeAdapter<T>) new TypeAdapter<MerchantTransfer40>() {
           @Override
           public void write(JsonWriter out, MerchantTransfer40 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MerchantTransfer40 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MerchantTransfer40 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MerchantTransfer40
   * @throws IOException if the JSON string is invalid with respect to MerchantTransfer40
   */
  public static MerchantTransfer40 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MerchantTransfer40.class);
  }

  /**
   * Convert an instance of MerchantTransfer40 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

