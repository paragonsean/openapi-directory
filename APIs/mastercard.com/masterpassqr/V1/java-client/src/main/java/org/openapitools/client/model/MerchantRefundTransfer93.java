/*
 * Send Person to Merchant
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Participant101;
import org.openapitools.client.model.PaymentTransactionReference102;
import org.openapitools.client.model.Recipient96;
import org.openapitools.client.model.ReconciliationData99;
import org.openapitools.client.model.Sender94;
import org.openapitools.client.model.TokenCryptogram103;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the details of the request message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:31.069911-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MerchantRefundTransfer93 {
  public static final String SERIALIZED_NAME_ADDITIONAL_MESSAGE = "additional_message";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_MESSAGE)
  private String additionalMessage;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_AUTHENTICATION_VALUE = "authentication_value";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_VALUE)
  private String authenticationValue;

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private String channel;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DEVICE_ID = "device_id";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private String deviceId;

  public static final String SERIALIZED_NAME_DIGITAL_ACCOUNT_REFERENCE_NUMBER = "digital_account_reference_number";
  @SerializedName(SERIALIZED_NAME_DIGITAL_ACCOUNT_REFERENCE_NUMBER)
  private String digitalAccountReferenceNumber;

  public static final String SERIALIZED_NAME_FUNDING_SOURCE = "funding_source";
  @SerializedName(SERIALIZED_NAME_FUNDING_SOURCE)
  private String fundingSource;

  public static final String SERIALIZED_NAME_INTERCHANGE_RATE_DESIGNATOR = "interchange_rate_designator";
  @SerializedName(SERIALIZED_NAME_INTERCHANGE_RATE_DESIGNATOR)
  private String interchangeRateDesignator;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_MASTERCARD_ASSIGNED_ID = "mastercard_assigned_id";
  @SerializedName(SERIALIZED_NAME_MASTERCARD_ASSIGNED_ID)
  private String mastercardAssignedId;

  public static final String SERIALIZED_NAME_PARTICIPANT = "participant";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT)
  private Participant101 participant;

  public static final String SERIALIZED_NAME_PARTICIPATION_ID = "participation_id";
  @SerializedName(SERIALIZED_NAME_PARTICIPATION_ID)
  private String participationId;

  public static final String SERIALIZED_NAME_PAYMENT_ORIGINATION_COUNTRY = "payment_origination_country";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ORIGINATION_COUNTRY)
  private String paymentOriginationCountry;

  public static final String SERIALIZED_NAME_PAYMENT_TRANSACTION_REFERENCE = "payment_transaction_reference";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TRANSACTION_REFERENCE)
  private PaymentTransactionReference102 paymentTransactionReference;

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "payment_type";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private String paymentType;

  public static final String SERIALIZED_NAME_PROCESSOR_ID = "processor_id";
  @SerializedName(SERIALIZED_NAME_PROCESSOR_ID)
  private String processorId;

  public static final String SERIALIZED_NAME_RECIPIENT = "recipient";
  @SerializedName(SERIALIZED_NAME_RECIPIENT)
  private Recipient96 recipient;

  public static final String SERIALIZED_NAME_RECONCILIATION_DATA = "reconciliation_data";
  @SerializedName(SERIALIZED_NAME_RECONCILIATION_DATA)
  private ReconciliationData99 reconciliationData;

  public static final String SERIALIZED_NAME_ROUTING_TRANSIT_NUMBER = "routing_transit_number";
  @SerializedName(SERIALIZED_NAME_ROUTING_TRANSIT_NUMBER)
  private String routingTransitNumber;

  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  private Sender94 sender;

  public static final String SERIALIZED_NAME_SENDER_ACCOUNT_URI = "sender_account_uri";
  @SerializedName(SERIALIZED_NAME_SENDER_ACCOUNT_URI)
  private String senderAccountUri;

  public static final String SERIALIZED_NAME_TOKEN_CRYPTOGRAM = "token_cryptogram";
  @SerializedName(SERIALIZED_NAME_TOKEN_CRYPTOGRAM)
  private TokenCryptogram103 tokenCryptogram;

  public static final String SERIALIZED_NAME_TRANSACTION_LOCAL_DATE_TIME = "transaction_local_date_time";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_LOCAL_DATE_TIME)
  private String transactionLocalDateTime;

  public static final String SERIALIZED_NAME_TRANSFER_REFERENCE = "transfer_reference";
  @SerializedName(SERIALIZED_NAME_TRANSFER_REFERENCE)
  private String transferReference;

  public MerchantRefundTransfer93() {
  }

  public MerchantRefundTransfer93 additionalMessage(String additionalMessage) {
    this.additionalMessage = additionalMessage;
    return this;
  }

  /**
   * Message a financial institution will associate to the transfer and may display. \\n\\nType: Alphanumeric Special [a-zA-Z0-9!\\\&quot;#$%&amp;&#39;()*+,-./\\\\:;&lt;&#x3D;&gt;?@[]_&#x60;{|}~], Length: 1-65
   * @return additionalMessage
   */
  @javax.annotation.Nullable
  public String getAdditionalMessage() {
    return additionalMessage;
  }

  public void setAdditionalMessage(String additionalMessage) {
    this.additionalMessage = additionalMessage;
  }


  public MerchantRefundTransfer93 amount(String amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Amount of the transfer. The decimal point is implied based on the payment transfer currency. Details- 1-999999999999
   * @return amount
   */
  @javax.annotation.Nonnull
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }


  public MerchantRefundTransfer93 authenticationValue(String authenticationValue) {
    this.authenticationValue = authenticationValue;
    return this;
  }

  /**
   * List of name/value pairs containing authentication  values. Refer &#39;Authentication Value URIs&#39;
   * @return authenticationValue
   */
  @javax.annotation.Nullable
  public String getAuthenticationValue() {
    return authenticationValue;
  }

  public void setAuthenticationValue(String authenticationValue) {
    this.authenticationValue = authenticationValue;
  }


  public MerchantRefundTransfer93 channel(String channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Initiation channel of the transfer request. This value can be defined in the onboarding process instead of passing in every call. Values: WEB, MOBILE, BANK, KIOSK. Details- Conditional
   * @return channel
   */
  @javax.annotation.Nullable
  public String getChannel() {
    return channel;
  }

  public void setChannel(String channel) {
    this.channel = channel;
  }


  public MerchantRefundTransfer93 currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Currency of the transfer amount as an ISO alpha currency code. Details- Alpha, Length: 3
   * @return currency
   */
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public MerchantRefundTransfer93 deviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * The serial number of a device initiating the transfer. Details- 1-40
   * @return deviceId
   */
  @javax.annotation.Nullable
  public String getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(String deviceId) {
    this.deviceId = deviceId;
  }


  public MerchantRefundTransfer93 digitalAccountReferenceNumber(String digitalAccountReferenceNumber) {
    this.digitalAccountReferenceNumber = digitalAccountReferenceNumber;
    return this;
  }

  /**
   * URI to identify the digital account reference number. URI scheme must be pan. If merchant_refund_transfer.sender_account_uri does not start with PAN, the Digital Account Reference Number is required. Valid Values- Refer &#39;Account URIs&#39;.
   * @return digitalAccountReferenceNumber
   */
  @javax.annotation.Nullable
  public String getDigitalAccountReferenceNumber() {
    return digitalAccountReferenceNumber;
  }

  public void setDigitalAccountReferenceNumber(String digitalAccountReferenceNumber) {
    this.digitalAccountReferenceNumber = digitalAccountReferenceNumber;
  }


  public MerchantRefundTransfer93 fundingSource(String fundingSource) {
    this.fundingSource = fundingSource;
    return this;
  }

  /**
   * Funding source must contain one of the following: CREDIT, DEBIT, PREPAID, DEPOSIT_ACCOUNT, MOBILE_MONEY_ACCOUNT, CASH. In the Asia/Pacific region, funding sources are limited to Mastercard cards. In Subfield 1 values 04, 05, 06, and 07 are not applicable.
   * @return fundingSource
   */
  @javax.annotation.Nonnull
  public String getFundingSource() {
    return fundingSource;
  }

  public void setFundingSource(String fundingSource) {
    this.fundingSource = fundingSource;
  }


  public MerchantRefundTransfer93 interchangeRateDesignator(String interchangeRateDesignator) {
    this.interchangeRateDesignator = interchangeRateDesignator;
    return this;
  }

  /**
   * Indicates the interchange rate and editing rules applied to the transaction.  Type:Alphanumeric [a-zA-Z 0-9], Length: 2
   * @return interchangeRateDesignator
   */
  @javax.annotation.Nullable
  public String getInterchangeRateDesignator() {
    return interchangeRateDesignator;
  }

  public void setInterchangeRateDesignator(String interchangeRateDesignator) {
    this.interchangeRateDesignator = interchangeRateDesignator;
  }


  public MerchantRefundTransfer93 location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Location where the transaction is initiated. Valid Values- Refer &#39;Location URIs&#39;.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public MerchantRefundTransfer93 mastercardAssignedId(String mastercardAssignedId) {
    this.mastercardAssignedId = mastercardAssignedId;
    return this;
  }

  /**
   * Mastercard Assigned ID for tiered interchange calculations. This field can be provided when available if transfer.payment_type is P2M. Type: Numeric [0-9], Maximum Length: 6
   * @return mastercardAssignedId
   */
  @javax.annotation.Nullable
  public String getMastercardAssignedId() {
    return mastercardAssignedId;
  }

  public void setMastercardAssignedId(String mastercardAssignedId) {
    this.mastercardAssignedId = mastercardAssignedId;
  }


  public MerchantRefundTransfer93 participant(Participant101 participant) {
    this.participant = participant;
    return this;
  }

  /**
   * Get participant
   * @return participant
   */
  @javax.annotation.Nullable
  public Participant101 getParticipant() {
    return participant;
  }

  public void setParticipant(Participant101 participant) {
    this.participant = participant;
  }


  public MerchantRefundTransfer93 participationId(String participationId) {
    this.participationId = participationId;
    return this;
  }

  /**
   * Participation identifier of the sender. The receiving financial institution will associate the value to the transfer. Details- 1-30
   * @return participationId
   */
  @javax.annotation.Nullable
  public String getParticipationId() {
    return participationId;
  }

  public void setParticipationId(String participationId) {
    this.participationId = participationId;
  }


  public MerchantRefundTransfer93 paymentOriginationCountry(String paymentOriginationCountry) {
    this.paymentOriginationCountry = paymentOriginationCountry;
    return this;
  }

  /**
   * The country where the payment originates from as an ISO 3166-1 alpha-3 country code, in uppercase. Details - Conditional. If provided, this should match a valid country configured for the partner during onboarding. If the partner is configured for multiple origination countries this field is required and must be provided. Alpha, length: 3
   * @return paymentOriginationCountry
   */
  @javax.annotation.Nullable
  public String getPaymentOriginationCountry() {
    return paymentOriginationCountry;
  }

  public void setPaymentOriginationCountry(String paymentOriginationCountry) {
    this.paymentOriginationCountry = paymentOriginationCountry;
  }


  public MerchantRefundTransfer93 paymentTransactionReference(PaymentTransactionReference102 paymentTransactionReference) {
    this.paymentTransactionReference = paymentTransactionReference;
    return this;
  }

  /**
   * Get paymentTransactionReference
   * @return paymentTransactionReference
   */
  @javax.annotation.Nullable
  public PaymentTransactionReference102 getPaymentTransactionReference() {
    return paymentTransactionReference;
  }

  public void setPaymentTransactionReference(PaymentTransactionReference102 paymentTransactionReference) {
    this.paymentTransactionReference = paymentTransactionReference;
  }


  public MerchantRefundTransfer93 paymentType(String paymentType) {
    this.paymentType = paymentType;
    return this;
  }

  /**
   * MRF: Merchant Refund
   * @return paymentType
   */
  @javax.annotation.Nonnull
  public String getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(String paymentType) {
    this.paymentType = paymentType;
  }


  public MerchantRefundTransfer93 processorId(String processorId) {
    this.processorId = processorId;
    return this;
  }

  /**
   * The processor ID is a ten-digit number of the form: 9000xxxxxx, where the Single Message System-assigned processor ID will be up to the last six digits xxxxxx. If the partner is enrolled in multiple processorId numbers, the processorId number must be specified. If the partner is only enrolled in a single processorId number then system takes the onboarded value. Please contact your MasterCard Representative to enable the usage of fields in this section. Details- Numeric, 10
   * @return processorId
   */
  @javax.annotation.Nullable
  public String getProcessorId() {
    return processorId;
  }

  public void setProcessorId(String processorId) {
    this.processorId = processorId;
  }


  public MerchantRefundTransfer93 recipient(Recipient96 recipient) {
    this.recipient = recipient;
    return this;
  }

  /**
   * Get recipient
   * @return recipient
   */
  @javax.annotation.Nullable
  public Recipient96 getRecipient() {
    return recipient;
  }

  public void setRecipient(Recipient96 recipient) {
    this.recipient = recipient;
  }


  public MerchantRefundTransfer93 reconciliationData(ReconciliationData99 reconciliationData) {
    this.reconciliationData = reconciliationData;
    return this;
  }

  /**
   * Get reconciliationData
   * @return reconciliationData
   */
  @javax.annotation.Nullable
  public ReconciliationData99 getReconciliationData() {
    return reconciliationData;
  }

  public void setReconciliationData(ReconciliationData99 reconciliationData) {
    this.reconciliationData = reconciliationData;
  }


  public MerchantRefundTransfer93 routingTransitNumber(String routingTransitNumber) {
    this.routingTransitNumber = routingTransitNumber;
    return this;
  }

  /**
   * The nine-digit Federal Reserve Routing and Transit (R &amp; T) number of the acquiring institution or the nine-digit pseudo-number assigned to the acquiring institution by Mastercard. If the partner is enrolled in multiple routing transit numbers, the routing transit number must be specified. If the partner is only enrolled in a single routing transit number then system takes the onboarded value. Please contact your MasterCard Representative to enable the usage of fields in this section. Details- Numeric, 9
   * @return routingTransitNumber
   */
  @javax.annotation.Nullable
  public String getRoutingTransitNumber() {
    return routingTransitNumber;
  }

  public void setRoutingTransitNumber(String routingTransitNumber) {
    this.routingTransitNumber = routingTransitNumber;
  }


  public MerchantRefundTransfer93 sender(Sender94 sender) {
    this.sender = sender;
    return this;
  }

  /**
   * Get sender
   * @return sender
   */
  @javax.annotation.Nullable
  public Sender94 getSender() {
    return sender;
  }

  public void setSender(Sender94 sender) {
    this.sender = sender;
  }


  public MerchantRefundTransfer93 senderAccountUri(String senderAccountUri) {
    this.senderAccountUri = senderAccountUri;
    return this;
  }

  /**
   * URI to identify the account information of the sender. When PAN is the URI then sender information is required. If scheme chosen is raw, then funding_source must be other than CREDIT, DEBIT or PREPAID. Valid Values- Refer &#39;Account URIs&#39;
   * @return senderAccountUri
   */
  @javax.annotation.Nonnull
  public String getSenderAccountUri() {
    return senderAccountUri;
  }

  public void setSenderAccountUri(String senderAccountUri) {
    this.senderAccountUri = senderAccountUri;
  }


  public MerchantRefundTransfer93 tokenCryptogram(TokenCryptogram103 tokenCryptogram) {
    this.tokenCryptogram = tokenCryptogram;
    return this;
  }

  /**
   * Get tokenCryptogram
   * @return tokenCryptogram
   */
  @javax.annotation.Nullable
  public TokenCryptogram103 getTokenCryptogram() {
    return tokenCryptogram;
  }

  public void setTokenCryptogram(TokenCryptogram103 tokenCryptogram) {
    this.tokenCryptogram = tokenCryptogram;
  }


  public MerchantRefundTransfer93 transactionLocalDateTime(String transactionLocalDateTime) {
    this.transactionLocalDateTime = transactionLocalDateTime;
    return this;
  }

  /**
   * Local date and time when the transaction is submitted. Details-YYYY-MM-DDTHH:MM:SS±hh[:mm] 
   * @return transactionLocalDateTime
   */
  @javax.annotation.Nonnull
  public String getTransactionLocalDateTime() {
    return transactionLocalDateTime;
  }

  public void setTransactionLocalDateTime(String transactionLocalDateTime) {
    this.transactionLocalDateTime = transactionLocalDateTime;
  }


  public MerchantRefundTransfer93 transferReference(String transferReference) {
    this.transferReference = transferReference;
    return this;
  }

  /**
   * Provide a unique transaction reference number. It must be a unique value for the partner. Details- 6-40, Allowable characters are alphanumeric and * , - . _ ~
   * @return transferReference
   */
  @javax.annotation.Nonnull
  public String getTransferReference() {
    return transferReference;
  }

  public void setTransferReference(String transferReference) {
    this.transferReference = transferReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MerchantRefundTransfer93 merchantRefundTransfer93 = (MerchantRefundTransfer93) o;
    return Objects.equals(this.additionalMessage, merchantRefundTransfer93.additionalMessage) &&
        Objects.equals(this.amount, merchantRefundTransfer93.amount) &&
        Objects.equals(this.authenticationValue, merchantRefundTransfer93.authenticationValue) &&
        Objects.equals(this.channel, merchantRefundTransfer93.channel) &&
        Objects.equals(this.currency, merchantRefundTransfer93.currency) &&
        Objects.equals(this.deviceId, merchantRefundTransfer93.deviceId) &&
        Objects.equals(this.digitalAccountReferenceNumber, merchantRefundTransfer93.digitalAccountReferenceNumber) &&
        Objects.equals(this.fundingSource, merchantRefundTransfer93.fundingSource) &&
        Objects.equals(this.interchangeRateDesignator, merchantRefundTransfer93.interchangeRateDesignator) &&
        Objects.equals(this.location, merchantRefundTransfer93.location) &&
        Objects.equals(this.mastercardAssignedId, merchantRefundTransfer93.mastercardAssignedId) &&
        Objects.equals(this.participant, merchantRefundTransfer93.participant) &&
        Objects.equals(this.participationId, merchantRefundTransfer93.participationId) &&
        Objects.equals(this.paymentOriginationCountry, merchantRefundTransfer93.paymentOriginationCountry) &&
        Objects.equals(this.paymentTransactionReference, merchantRefundTransfer93.paymentTransactionReference) &&
        Objects.equals(this.paymentType, merchantRefundTransfer93.paymentType) &&
        Objects.equals(this.processorId, merchantRefundTransfer93.processorId) &&
        Objects.equals(this.recipient, merchantRefundTransfer93.recipient) &&
        Objects.equals(this.reconciliationData, merchantRefundTransfer93.reconciliationData) &&
        Objects.equals(this.routingTransitNumber, merchantRefundTransfer93.routingTransitNumber) &&
        Objects.equals(this.sender, merchantRefundTransfer93.sender) &&
        Objects.equals(this.senderAccountUri, merchantRefundTransfer93.senderAccountUri) &&
        Objects.equals(this.tokenCryptogram, merchantRefundTransfer93.tokenCryptogram) &&
        Objects.equals(this.transactionLocalDateTime, merchantRefundTransfer93.transactionLocalDateTime) &&
        Objects.equals(this.transferReference, merchantRefundTransfer93.transferReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalMessage, amount, authenticationValue, channel, currency, deviceId, digitalAccountReferenceNumber, fundingSource, interchangeRateDesignator, location, mastercardAssignedId, participant, participationId, paymentOriginationCountry, paymentTransactionReference, paymentType, processorId, recipient, reconciliationData, routingTransitNumber, sender, senderAccountUri, tokenCryptogram, transactionLocalDateTime, transferReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MerchantRefundTransfer93 {\n");
    sb.append("    additionalMessage: ").append(toIndentedString(additionalMessage)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    authenticationValue: ").append(toIndentedString(authenticationValue)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    digitalAccountReferenceNumber: ").append(toIndentedString(digitalAccountReferenceNumber)).append("\n");
    sb.append("    fundingSource: ").append(toIndentedString(fundingSource)).append("\n");
    sb.append("    interchangeRateDesignator: ").append(toIndentedString(interchangeRateDesignator)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    mastercardAssignedId: ").append(toIndentedString(mastercardAssignedId)).append("\n");
    sb.append("    participant: ").append(toIndentedString(participant)).append("\n");
    sb.append("    participationId: ").append(toIndentedString(participationId)).append("\n");
    sb.append("    paymentOriginationCountry: ").append(toIndentedString(paymentOriginationCountry)).append("\n");
    sb.append("    paymentTransactionReference: ").append(toIndentedString(paymentTransactionReference)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    processorId: ").append(toIndentedString(processorId)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    reconciliationData: ").append(toIndentedString(reconciliationData)).append("\n");
    sb.append("    routingTransitNumber: ").append(toIndentedString(routingTransitNumber)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    senderAccountUri: ").append(toIndentedString(senderAccountUri)).append("\n");
    sb.append("    tokenCryptogram: ").append(toIndentedString(tokenCryptogram)).append("\n");
    sb.append("    transactionLocalDateTime: ").append(toIndentedString(transactionLocalDateTime)).append("\n");
    sb.append("    transferReference: ").append(toIndentedString(transferReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_message");
    openapiFields.add("amount");
    openapiFields.add("authentication_value");
    openapiFields.add("channel");
    openapiFields.add("currency");
    openapiFields.add("device_id");
    openapiFields.add("digital_account_reference_number");
    openapiFields.add("funding_source");
    openapiFields.add("interchange_rate_designator");
    openapiFields.add("location");
    openapiFields.add("mastercard_assigned_id");
    openapiFields.add("participant");
    openapiFields.add("participation_id");
    openapiFields.add("payment_origination_country");
    openapiFields.add("payment_transaction_reference");
    openapiFields.add("payment_type");
    openapiFields.add("processor_id");
    openapiFields.add("recipient");
    openapiFields.add("reconciliation_data");
    openapiFields.add("routing_transit_number");
    openapiFields.add("sender");
    openapiFields.add("sender_account_uri");
    openapiFields.add("token_cryptogram");
    openapiFields.add("transaction_local_date_time");
    openapiFields.add("transfer_reference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("funding_source");
    openapiRequiredFields.add("payment_type");
    openapiRequiredFields.add("sender_account_uri");
    openapiRequiredFields.add("transaction_local_date_time");
    openapiRequiredFields.add("transfer_reference");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MerchantRefundTransfer93
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MerchantRefundTransfer93.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MerchantRefundTransfer93 is not found in the empty JSON string", MerchantRefundTransfer93.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MerchantRefundTransfer93.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MerchantRefundTransfer93` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MerchantRefundTransfer93.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additional_message") != null && !jsonObj.get("additional_message").isJsonNull()) && !jsonObj.get("additional_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additional_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additional_message").toString()));
      }
      if (!jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if ((jsonObj.get("authentication_value") != null && !jsonObj.get("authentication_value").isJsonNull()) && !jsonObj.get("authentication_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authentication_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authentication_value").toString()));
      }
      if ((jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) && !jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("device_id") != null && !jsonObj.get("device_id").isJsonNull()) && !jsonObj.get("device_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_id").toString()));
      }
      if ((jsonObj.get("digital_account_reference_number") != null && !jsonObj.get("digital_account_reference_number").isJsonNull()) && !jsonObj.get("digital_account_reference_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `digital_account_reference_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("digital_account_reference_number").toString()));
      }
      if (!jsonObj.get("funding_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `funding_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("funding_source").toString()));
      }
      if ((jsonObj.get("interchange_rate_designator") != null && !jsonObj.get("interchange_rate_designator").isJsonNull()) && !jsonObj.get("interchange_rate_designator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interchange_rate_designator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interchange_rate_designator").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("mastercard_assigned_id") != null && !jsonObj.get("mastercard_assigned_id").isJsonNull()) && !jsonObj.get("mastercard_assigned_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mastercard_assigned_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mastercard_assigned_id").toString()));
      }
      // validate the optional field `participant`
      if (jsonObj.get("participant") != null && !jsonObj.get("participant").isJsonNull()) {
        Participant101.validateJsonElement(jsonObj.get("participant"));
      }
      if ((jsonObj.get("participation_id") != null && !jsonObj.get("participation_id").isJsonNull()) && !jsonObj.get("participation_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `participation_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("participation_id").toString()));
      }
      if ((jsonObj.get("payment_origination_country") != null && !jsonObj.get("payment_origination_country").isJsonNull()) && !jsonObj.get("payment_origination_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_origination_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_origination_country").toString()));
      }
      // validate the optional field `payment_transaction_reference`
      if (jsonObj.get("payment_transaction_reference") != null && !jsonObj.get("payment_transaction_reference").isJsonNull()) {
        PaymentTransactionReference102.validateJsonElement(jsonObj.get("payment_transaction_reference"));
      }
      if (!jsonObj.get("payment_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_type").toString()));
      }
      if ((jsonObj.get("processor_id") != null && !jsonObj.get("processor_id").isJsonNull()) && !jsonObj.get("processor_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processor_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processor_id").toString()));
      }
      // validate the optional field `recipient`
      if (jsonObj.get("recipient") != null && !jsonObj.get("recipient").isJsonNull()) {
        Recipient96.validateJsonElement(jsonObj.get("recipient"));
      }
      // validate the optional field `reconciliation_data`
      if (jsonObj.get("reconciliation_data") != null && !jsonObj.get("reconciliation_data").isJsonNull()) {
        ReconciliationData99.validateJsonElement(jsonObj.get("reconciliation_data"));
      }
      if ((jsonObj.get("routing_transit_number") != null && !jsonObj.get("routing_transit_number").isJsonNull()) && !jsonObj.get("routing_transit_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routing_transit_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routing_transit_number").toString()));
      }
      // validate the optional field `sender`
      if (jsonObj.get("sender") != null && !jsonObj.get("sender").isJsonNull()) {
        Sender94.validateJsonElement(jsonObj.get("sender"));
      }
      if (!jsonObj.get("sender_account_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sender_account_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender_account_uri").toString()));
      }
      // validate the optional field `token_cryptogram`
      if (jsonObj.get("token_cryptogram") != null && !jsonObj.get("token_cryptogram").isJsonNull()) {
        TokenCryptogram103.validateJsonElement(jsonObj.get("token_cryptogram"));
      }
      if (!jsonObj.get("transaction_local_date_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_local_date_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_local_date_time").toString()));
      }
      if (!jsonObj.get("transfer_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transfer_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transfer_reference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MerchantRefundTransfer93.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MerchantRefundTransfer93' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MerchantRefundTransfer93> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MerchantRefundTransfer93.class));

       return (TypeAdapter<T>) new TypeAdapter<MerchantRefundTransfer93>() {
           @Override
           public void write(JsonWriter out, MerchantRefundTransfer93 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MerchantRefundTransfer93 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MerchantRefundTransfer93 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MerchantRefundTransfer93
   * @throws IOException if the JSON string is invalid with respect to MerchantRefundTransfer93
   */
  public static MerchantRefundTransfer93 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MerchantRefundTransfer93.class);
  }

  /**
   * Convert an instance of MerchantRefundTransfer93 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

