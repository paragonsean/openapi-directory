/*
 * Send Person to Merchant
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Participant13;
import org.openapitools.client.model.Recipient7;
import org.openapitools.client.model.ReconciliationData11;
import org.openapitools.client.model.Sender3;
import org.openapitools.client.model.TransferAmount2;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the details of the request message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:31.069911-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MerchantTransfer1 {
  public static final String SERIALIZED_NAME_ADDITIONAL_MESSAGE = "additional_message";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_MESSAGE)
  private String additionalMessage;

  public static final String SERIALIZED_NAME_CONVENIENCE_AMOUNT = "convenience_amount";
  @SerializedName(SERIALIZED_NAME_CONVENIENCE_AMOUNT)
  private String convenienceAmount;

  public static final String SERIALIZED_NAME_CONVENIENCE_INDICATOR = "convenience_indicator";
  @SerializedName(SERIALIZED_NAME_CONVENIENCE_INDICATOR)
  private String convenienceIndicator;

  public static final String SERIALIZED_NAME_DIGITAL_ACCOUNT_REFERENCE_NUMBER = "digital_account_reference_number";
  @SerializedName(SERIALIZED_NAME_DIGITAL_ACCOUNT_REFERENCE_NUMBER)
  private String digitalAccountReferenceNumber;

  public static final String SERIALIZED_NAME_INTERCHANGE_RATE_DESIGNATOR = "interchange_rate_designator";
  @SerializedName(SERIALIZED_NAME_INTERCHANGE_RATE_DESIGNATOR)
  private String interchangeRateDesignator;

  public static final String SERIALIZED_NAME_MASTERCARD_ASSIGNED_ID = "mastercard_assigned_id";
  @SerializedName(SERIALIZED_NAME_MASTERCARD_ASSIGNED_ID)
  private String mastercardAssignedId;

  public static final String SERIALIZED_NAME_PARTICIPANT = "participant";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT)
  private Participant13 participant;

  public static final String SERIALIZED_NAME_PARTICIPATION_ID = "participation_id";
  @SerializedName(SERIALIZED_NAME_PARTICIPATION_ID)
  private String participationId;

  public static final String SERIALIZED_NAME_PAYMENT_ORIGINATION_COUNTRY = "payment_origination_country";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ORIGINATION_COUNTRY)
  private String paymentOriginationCountry;

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "payment_type";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private String paymentType;

  public static final String SERIALIZED_NAME_PROCESSOR_ID = "processor_id";
  @SerializedName(SERIALIZED_NAME_PROCESSOR_ID)
  private String processorId;

  public static final String SERIALIZED_NAME_QR_DATA = "qr_data";
  @SerializedName(SERIALIZED_NAME_QR_DATA)
  private String qrData;

  public static final String SERIALIZED_NAME_RECIPIENT = "recipient";
  @SerializedName(SERIALIZED_NAME_RECIPIENT)
  private Recipient7 recipient;

  public static final String SERIALIZED_NAME_RECIPIENT_ACCOUNT_URI = "recipient_account_uri";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_ACCOUNT_URI)
  private String recipientAccountUri;

  public static final String SERIALIZED_NAME_RECONCILIATION_DATA = "reconciliation_data";
  @SerializedName(SERIALIZED_NAME_RECONCILIATION_DATA)
  private ReconciliationData11 reconciliationData;

  public static final String SERIALIZED_NAME_ROUTING_TRANSIT_NUMBER = "routing_transit_number";
  @SerializedName(SERIALIZED_NAME_ROUTING_TRANSIT_NUMBER)
  private String routingTransitNumber;

  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  private Sender3 sender;

  public static final String SERIALIZED_NAME_SENDER_ACCOUNT_URI = "sender_account_uri";
  @SerializedName(SERIALIZED_NAME_SENDER_ACCOUNT_URI)
  private String senderAccountUri;

  public static final String SERIALIZED_NAME_TRANSACTION_LOCAL_DATE_TIME = "transaction_local_date_time";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_LOCAL_DATE_TIME)
  private String transactionLocalDateTime;

  public static final String SERIALIZED_NAME_TRANSFER_AMOUNT = "transfer_amount";
  @SerializedName(SERIALIZED_NAME_TRANSFER_AMOUNT)
  private TransferAmount2 transferAmount;

  public static final String SERIALIZED_NAME_TRANSFER_REFERENCE = "transfer_reference";
  @SerializedName(SERIALIZED_NAME_TRANSFER_REFERENCE)
  private String transferReference;

  public static final String SERIALIZED_NAME_UNIQUE_REFERENCE_NUMBER = "unique_reference_number";
  @SerializedName(SERIALIZED_NAME_UNIQUE_REFERENCE_NUMBER)
  private String uniqueReferenceNumber;

  public MerchantTransfer1() {
  }

  public MerchantTransfer1 additionalMessage(String additionalMessage) {
    this.additionalMessage = additionalMessage;
    return this;
  }

  /**
   * Message a financial institution will associate to the transfer and may display. \\n\\nType: Alphanumeric Special [a-zA-Z0-9!\\\&quot;#$%&amp;&#39;()*+,-./\\\\:;&lt;&#x3D;&gt;?@[]_&#x60;{|}~], Length: 1-65
   * @return additionalMessage
   */
  @javax.annotation.Nullable
  public String getAdditionalMessage() {
    return additionalMessage;
  }

  public void setAdditionalMessage(String additionalMessage) {
    this.additionalMessage = additionalMessage;
  }


  public MerchantTransfer1 convenienceAmount(String convenienceAmount) {
    this.convenienceAmount = convenienceAmount;
    return this;
  }

  /**
   * Amount of the convenience fee. The decimal point is implied based on the transaction_amount.currency. \&quot;[0-9]*\&quot;. Max Length: 12. Value must be less than payment_transfer.amount.
   * @return convenienceAmount
   */
  @javax.annotation.Nullable
  public String getConvenienceAmount() {
    return convenienceAmount;
  }

  public void setConvenienceAmount(String convenienceAmount) {
    this.convenienceAmount = convenienceAmount;
  }


  public MerchantTransfer1 convenienceIndicator(String convenienceIndicator) {
    this.convenienceIndicator = convenienceIndicator;
    return this;
  }

  /**
   * Convenience fee type code. Min length: 2. Max Length: 2. Valid values  (01: Indicates Consumer should be prompted to enter tip 02: Indicates that merchant would mandatorily charge a flat convenience fee 03: Indicates that merchant would charge a percentage convenience fee)
   * @return convenienceIndicator
   */
  @javax.annotation.Nullable
  public String getConvenienceIndicator() {
    return convenienceIndicator;
  }

  public void setConvenienceIndicator(String convenienceIndicator) {
    this.convenienceIndicator = convenienceIndicator;
  }


  public MerchantTransfer1 digitalAccountReferenceNumber(String digitalAccountReferenceNumber) {
    this.digitalAccountReferenceNumber = digitalAccountReferenceNumber;
    return this;
  }

  /**
   * URI to identify the digital account reference number. URI scheme must be pan. Valid Values- Refer &#39;Account URIs&#39;. 
   * @return digitalAccountReferenceNumber
   */
  @javax.annotation.Nullable
  public String getDigitalAccountReferenceNumber() {
    return digitalAccountReferenceNumber;
  }

  public void setDigitalAccountReferenceNumber(String digitalAccountReferenceNumber) {
    this.digitalAccountReferenceNumber = digitalAccountReferenceNumber;
  }


  public MerchantTransfer1 interchangeRateDesignator(String interchangeRateDesignator) {
    this.interchangeRateDesignator = interchangeRateDesignator;
    return this;
  }

  /**
   * Indicates the interchange rate and editing rules applied to the transaction. Field is applicable for Europe OIs only.  Type:Alphanumeric [a-zA-Z 0-9], Length: 2
   * @return interchangeRateDesignator
   */
  @javax.annotation.Nullable
  public String getInterchangeRateDesignator() {
    return interchangeRateDesignator;
  }

  public void setInterchangeRateDesignator(String interchangeRateDesignator) {
    this.interchangeRateDesignator = interchangeRateDesignator;
  }


  public MerchantTransfer1 mastercardAssignedId(String mastercardAssignedId) {
    this.mastercardAssignedId = mastercardAssignedId;
    return this;
  }

  /**
   * Mastercard Assigned ID for tiered interchange calculations.   Type: Numeric [0-9], Length: 6
   * @return mastercardAssignedId
   */
  @javax.annotation.Nullable
  public String getMastercardAssignedId() {
    return mastercardAssignedId;
  }

  public void setMastercardAssignedId(String mastercardAssignedId) {
    this.mastercardAssignedId = mastercardAssignedId;
  }


  public MerchantTransfer1 participant(Participant13 participant) {
    this.participant = participant;
    return this;
  }

  /**
   * Get participant
   * @return participant
   */
  @javax.annotation.Nonnull
  public Participant13 getParticipant() {
    return participant;
  }

  public void setParticipant(Participant13 participant) {
    this.participant = participant;
  }


  public MerchantTransfer1 participationId(String participationId) {
    this.participationId = participationId;
    return this;
  }

  /**
   * Participation identifier of the sender. The receiving financial institution will associate the value to the transfer. \\n\\nType: Alphanumeric Special [a-zA-Z0-9!\\\&quot;#$%&amp;&#39;()*+,-./\\\\:;&lt;&#x3D;&gt;?@[]_&#x60;{|}~], Length: 1-30
   * @return participationId
   */
  @javax.annotation.Nullable
  public String getParticipationId() {
    return participationId;
  }

  public void setParticipationId(String participationId) {
    this.participationId = participationId;
  }


  public MerchantTransfer1 paymentOriginationCountry(String paymentOriginationCountry) {
    this.paymentOriginationCountry = paymentOriginationCountry;
    return this;
  }

  /**
   * Country where the payment originated from as an ISO 3166-1 alpha-3 country code.   Type: Alpha [A-Z], Length: 3
   * @return paymentOriginationCountry
   */
  @javax.annotation.Nullable
  public String getPaymentOriginationCountry() {
    return paymentOriginationCountry;
  }

  public void setPaymentOriginationCountry(String paymentOriginationCountry) {
    this.paymentOriginationCountry = paymentOriginationCountry;
  }


  public MerchantTransfer1 paymentType(String paymentType) {
    this.paymentType = paymentType;
    return this;
  }

  /**
   * Payment type used for transfer. Value - P2M: Person to Merchant.   Type: Alphanumeric [A-Z0-9], Length: 3
   * @return paymentType
   */
  @javax.annotation.Nonnull
  public String getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(String paymentType) {
    this.paymentType = paymentType;
  }


  public MerchantTransfer1 processorId(String processorId) {
    this.processorId = processorId;
    return this;
  }

  /**
   * The processor ID is a ten-digit number of the form: 9000xxxxxx, where the Single Message System-assigned processor ID will be up to the last six digits xxxxxx. Partner must provide this value only if the program they are enabling requires it. For all other implementations this value must not be provided.   Type: Numeric [0-9], Length: 10
   * @return processorId
   */
  @javax.annotation.Nullable
  public String getProcessorId() {
    return processorId;
  }

  public void setProcessorId(String processorId) {
    this.processorId = processorId;
  }


  public MerchantTransfer1 qrData(String qrData) {
    this.qrData = qrData;
    return this;
  }

  /**
   * Encoded QR (Quick Response) code data. Type: Alphanumeric and special characters [a-zA-Z0-9!\&quot;#$%&amp;&#39;()*+,-./\\:;&lt;&#x3D;&gt;?@[]_&#x60;{|}~], Maximum Length: 237
   * @return qrData
   */
  @javax.annotation.Nullable
  public String getQrData() {
    return qrData;
  }

  public void setQrData(String qrData) {
    this.qrData = qrData;
  }


  public MerchantTransfer1 recipient(Recipient7 recipient) {
    this.recipient = recipient;
    return this;
  }

  /**
   * Get recipient
   * @return recipient
   */
  @javax.annotation.Nonnull
  public Recipient7 getRecipient() {
    return recipient;
  }

  public void setRecipient(Recipient7 recipient) {
    this.recipient = recipient;
  }


  public MerchantTransfer1 recipientAccountUri(String recipientAccountUri) {
    this.recipientAccountUri = recipientAccountUri;
    return this;
  }

  /**
   * URI to identify the account of the recipient/merchant. Pan, Manual Entry Alias and Alias are valid schemas. Refer &#39;Account URIs&#39;
   * @return recipientAccountUri
   */
  @javax.annotation.Nonnull
  public String getRecipientAccountUri() {
    return recipientAccountUri;
  }

  public void setRecipientAccountUri(String recipientAccountUri) {
    this.recipientAccountUri = recipientAccountUri;
  }


  public MerchantTransfer1 reconciliationData(ReconciliationData11 reconciliationData) {
    this.reconciliationData = reconciliationData;
    return this;
  }

  /**
   * Get reconciliationData
   * @return reconciliationData
   */
  @javax.annotation.Nullable
  public ReconciliationData11 getReconciliationData() {
    return reconciliationData;
  }

  public void setReconciliationData(ReconciliationData11 reconciliationData) {
    this.reconciliationData = reconciliationData;
  }


  public MerchantTransfer1 routingTransitNumber(String routingTransitNumber) {
    this.routingTransitNumber = routingTransitNumber;
    return this;
  }

  /**
   * The nine-digit Federal Reserve Routing and Transit (R &amp; T) number of the acquiring institution or the nine-digit pseudo-number assigned to the acquiring institution by Mastercard. Partner must provide this value only if the program they are enabling requires it. For all other implementations this value must not be provided.    Type: Numeric [0-9], Length: 9
   * @return routingTransitNumber
   */
  @javax.annotation.Nullable
  public String getRoutingTransitNumber() {
    return routingTransitNumber;
  }

  public void setRoutingTransitNumber(String routingTransitNumber) {
    this.routingTransitNumber = routingTransitNumber;
  }


  public MerchantTransfer1 sender(Sender3 sender) {
    this.sender = sender;
    return this;
  }

  /**
   * Get sender
   * @return sender
   */
  @javax.annotation.Nonnull
  public Sender3 getSender() {
    return sender;
  }

  public void setSender(Sender3 sender) {
    this.sender = sender;
  }


  public MerchantTransfer1 senderAccountUri(String senderAccountUri) {
    this.senderAccountUri = senderAccountUri;
    return this;
  }

  /**
   * URI to identify the account information of the sender. Only PAN is the valid scheme. Refer &#39;Account URIs&#39;
   * @return senderAccountUri
   */
  @javax.annotation.Nonnull
  public String getSenderAccountUri() {
    return senderAccountUri;
  }

  public void setSenderAccountUri(String senderAccountUri) {
    this.senderAccountUri = senderAccountUri;
  }


  public MerchantTransfer1 transactionLocalDateTime(String transactionLocalDateTime) {
    this.transactionLocalDateTime = transactionLocalDateTime;
    return this;
  }

  /**
   * Local date and time when the transaction is submitted as an ISO 8601 format.   Type: Alphanumerical Special [A-Z 0-9-:], Length: 25
   * @return transactionLocalDateTime
   */
  @javax.annotation.Nonnull
  public String getTransactionLocalDateTime() {
    return transactionLocalDateTime;
  }

  public void setTransactionLocalDateTime(String transactionLocalDateTime) {
    this.transactionLocalDateTime = transactionLocalDateTime;
  }


  public MerchantTransfer1 transferAmount(TransferAmount2 transferAmount) {
    this.transferAmount = transferAmount;
    return this;
  }

  /**
   * Get transferAmount
   * @return transferAmount
   */
  @javax.annotation.Nonnull
  public TransferAmount2 getTransferAmount() {
    return transferAmount;
  }

  public void setTransferAmount(TransferAmount2 transferAmount) {
    this.transferAmount = transferAmount;
  }


  public MerchantTransfer1 transferReference(String transferReference) {
    this.transferReference = transferReference;
    return this;
  }

  /**
   * Provide a unique transaction reference number. It must be a unique value for each request initiated by the partner.   Type: Alphanumeric Special [a-zA-Z0-9 * , - . _ ~], Length: 6-40
   * @return transferReference
   */
  @javax.annotation.Nonnull
  public String getTransferReference() {
    return transferReference;
  }

  public void setTransferReference(String transferReference) {
    this.transferReference = transferReference;
  }


  public MerchantTransfer1 uniqueReferenceNumber(String uniqueReferenceNumber) {
    this.uniqueReferenceNumber = uniqueReferenceNumber;
    return this;
  }

  /**
   * Unique reference number for the transaction.    Type: Alphanumeric [a-zA-Z 0-9], Maximum Length: 19
   * @return uniqueReferenceNumber
   */
  @javax.annotation.Nullable
  public String getUniqueReferenceNumber() {
    return uniqueReferenceNumber;
  }

  public void setUniqueReferenceNumber(String uniqueReferenceNumber) {
    this.uniqueReferenceNumber = uniqueReferenceNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MerchantTransfer1 merchantTransfer1 = (MerchantTransfer1) o;
    return Objects.equals(this.additionalMessage, merchantTransfer1.additionalMessage) &&
        Objects.equals(this.convenienceAmount, merchantTransfer1.convenienceAmount) &&
        Objects.equals(this.convenienceIndicator, merchantTransfer1.convenienceIndicator) &&
        Objects.equals(this.digitalAccountReferenceNumber, merchantTransfer1.digitalAccountReferenceNumber) &&
        Objects.equals(this.interchangeRateDesignator, merchantTransfer1.interchangeRateDesignator) &&
        Objects.equals(this.mastercardAssignedId, merchantTransfer1.mastercardAssignedId) &&
        Objects.equals(this.participant, merchantTransfer1.participant) &&
        Objects.equals(this.participationId, merchantTransfer1.participationId) &&
        Objects.equals(this.paymentOriginationCountry, merchantTransfer1.paymentOriginationCountry) &&
        Objects.equals(this.paymentType, merchantTransfer1.paymentType) &&
        Objects.equals(this.processorId, merchantTransfer1.processorId) &&
        Objects.equals(this.qrData, merchantTransfer1.qrData) &&
        Objects.equals(this.recipient, merchantTransfer1.recipient) &&
        Objects.equals(this.recipientAccountUri, merchantTransfer1.recipientAccountUri) &&
        Objects.equals(this.reconciliationData, merchantTransfer1.reconciliationData) &&
        Objects.equals(this.routingTransitNumber, merchantTransfer1.routingTransitNumber) &&
        Objects.equals(this.sender, merchantTransfer1.sender) &&
        Objects.equals(this.senderAccountUri, merchantTransfer1.senderAccountUri) &&
        Objects.equals(this.transactionLocalDateTime, merchantTransfer1.transactionLocalDateTime) &&
        Objects.equals(this.transferAmount, merchantTransfer1.transferAmount) &&
        Objects.equals(this.transferReference, merchantTransfer1.transferReference) &&
        Objects.equals(this.uniqueReferenceNumber, merchantTransfer1.uniqueReferenceNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalMessage, convenienceAmount, convenienceIndicator, digitalAccountReferenceNumber, interchangeRateDesignator, mastercardAssignedId, participant, participationId, paymentOriginationCountry, paymentType, processorId, qrData, recipient, recipientAccountUri, reconciliationData, routingTransitNumber, sender, senderAccountUri, transactionLocalDateTime, transferAmount, transferReference, uniqueReferenceNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MerchantTransfer1 {\n");
    sb.append("    additionalMessage: ").append(toIndentedString(additionalMessage)).append("\n");
    sb.append("    convenienceAmount: ").append(toIndentedString(convenienceAmount)).append("\n");
    sb.append("    convenienceIndicator: ").append(toIndentedString(convenienceIndicator)).append("\n");
    sb.append("    digitalAccountReferenceNumber: ").append(toIndentedString(digitalAccountReferenceNumber)).append("\n");
    sb.append("    interchangeRateDesignator: ").append(toIndentedString(interchangeRateDesignator)).append("\n");
    sb.append("    mastercardAssignedId: ").append(toIndentedString(mastercardAssignedId)).append("\n");
    sb.append("    participant: ").append(toIndentedString(participant)).append("\n");
    sb.append("    participationId: ").append(toIndentedString(participationId)).append("\n");
    sb.append("    paymentOriginationCountry: ").append(toIndentedString(paymentOriginationCountry)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    processorId: ").append(toIndentedString(processorId)).append("\n");
    sb.append("    qrData: ").append(toIndentedString(qrData)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    recipientAccountUri: ").append(toIndentedString(recipientAccountUri)).append("\n");
    sb.append("    reconciliationData: ").append(toIndentedString(reconciliationData)).append("\n");
    sb.append("    routingTransitNumber: ").append(toIndentedString(routingTransitNumber)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    senderAccountUri: ").append(toIndentedString(senderAccountUri)).append("\n");
    sb.append("    transactionLocalDateTime: ").append(toIndentedString(transactionLocalDateTime)).append("\n");
    sb.append("    transferAmount: ").append(toIndentedString(transferAmount)).append("\n");
    sb.append("    transferReference: ").append(toIndentedString(transferReference)).append("\n");
    sb.append("    uniqueReferenceNumber: ").append(toIndentedString(uniqueReferenceNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_message");
    openapiFields.add("convenience_amount");
    openapiFields.add("convenience_indicator");
    openapiFields.add("digital_account_reference_number");
    openapiFields.add("interchange_rate_designator");
    openapiFields.add("mastercard_assigned_id");
    openapiFields.add("participant");
    openapiFields.add("participation_id");
    openapiFields.add("payment_origination_country");
    openapiFields.add("payment_type");
    openapiFields.add("processor_id");
    openapiFields.add("qr_data");
    openapiFields.add("recipient");
    openapiFields.add("recipient_account_uri");
    openapiFields.add("reconciliation_data");
    openapiFields.add("routing_transit_number");
    openapiFields.add("sender");
    openapiFields.add("sender_account_uri");
    openapiFields.add("transaction_local_date_time");
    openapiFields.add("transfer_amount");
    openapiFields.add("transfer_reference");
    openapiFields.add("unique_reference_number");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("participant");
    openapiRequiredFields.add("payment_type");
    openapiRequiredFields.add("recipient");
    openapiRequiredFields.add("recipient_account_uri");
    openapiRequiredFields.add("sender");
    openapiRequiredFields.add("sender_account_uri");
    openapiRequiredFields.add("transaction_local_date_time");
    openapiRequiredFields.add("transfer_amount");
    openapiRequiredFields.add("transfer_reference");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MerchantTransfer1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MerchantTransfer1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MerchantTransfer1 is not found in the empty JSON string", MerchantTransfer1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MerchantTransfer1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MerchantTransfer1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MerchantTransfer1.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additional_message") != null && !jsonObj.get("additional_message").isJsonNull()) && !jsonObj.get("additional_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additional_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additional_message").toString()));
      }
      if ((jsonObj.get("convenience_amount") != null && !jsonObj.get("convenience_amount").isJsonNull()) && !jsonObj.get("convenience_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `convenience_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("convenience_amount").toString()));
      }
      if ((jsonObj.get("convenience_indicator") != null && !jsonObj.get("convenience_indicator").isJsonNull()) && !jsonObj.get("convenience_indicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `convenience_indicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("convenience_indicator").toString()));
      }
      if ((jsonObj.get("digital_account_reference_number") != null && !jsonObj.get("digital_account_reference_number").isJsonNull()) && !jsonObj.get("digital_account_reference_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `digital_account_reference_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("digital_account_reference_number").toString()));
      }
      if ((jsonObj.get("interchange_rate_designator") != null && !jsonObj.get("interchange_rate_designator").isJsonNull()) && !jsonObj.get("interchange_rate_designator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interchange_rate_designator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interchange_rate_designator").toString()));
      }
      if ((jsonObj.get("mastercard_assigned_id") != null && !jsonObj.get("mastercard_assigned_id").isJsonNull()) && !jsonObj.get("mastercard_assigned_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mastercard_assigned_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mastercard_assigned_id").toString()));
      }
      // validate the required field `participant`
      Participant13.validateJsonElement(jsonObj.get("participant"));
      if ((jsonObj.get("participation_id") != null && !jsonObj.get("participation_id").isJsonNull()) && !jsonObj.get("participation_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `participation_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("participation_id").toString()));
      }
      if ((jsonObj.get("payment_origination_country") != null && !jsonObj.get("payment_origination_country").isJsonNull()) && !jsonObj.get("payment_origination_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_origination_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_origination_country").toString()));
      }
      if (!jsonObj.get("payment_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_type").toString()));
      }
      if ((jsonObj.get("processor_id") != null && !jsonObj.get("processor_id").isJsonNull()) && !jsonObj.get("processor_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processor_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processor_id").toString()));
      }
      if ((jsonObj.get("qr_data") != null && !jsonObj.get("qr_data").isJsonNull()) && !jsonObj.get("qr_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `qr_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("qr_data").toString()));
      }
      // validate the required field `recipient`
      Recipient7.validateJsonElement(jsonObj.get("recipient"));
      if (!jsonObj.get("recipient_account_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_account_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_account_uri").toString()));
      }
      // validate the optional field `reconciliation_data`
      if (jsonObj.get("reconciliation_data") != null && !jsonObj.get("reconciliation_data").isJsonNull()) {
        ReconciliationData11.validateJsonElement(jsonObj.get("reconciliation_data"));
      }
      if ((jsonObj.get("routing_transit_number") != null && !jsonObj.get("routing_transit_number").isJsonNull()) && !jsonObj.get("routing_transit_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routing_transit_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routing_transit_number").toString()));
      }
      // validate the required field `sender`
      Sender3.validateJsonElement(jsonObj.get("sender"));
      if (!jsonObj.get("sender_account_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sender_account_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender_account_uri").toString()));
      }
      if (!jsonObj.get("transaction_local_date_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_local_date_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_local_date_time").toString()));
      }
      // validate the required field `transfer_amount`
      TransferAmount2.validateJsonElement(jsonObj.get("transfer_amount"));
      if (!jsonObj.get("transfer_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transfer_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transfer_reference").toString()));
      }
      if ((jsonObj.get("unique_reference_number") != null && !jsonObj.get("unique_reference_number").isJsonNull()) && !jsonObj.get("unique_reference_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unique_reference_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unique_reference_number").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MerchantTransfer1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MerchantTransfer1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MerchantTransfer1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MerchantTransfer1.class));

       return (TypeAdapter<T>) new TypeAdapter<MerchantTransfer1>() {
           @Override
           public void write(JsonWriter out, MerchantTransfer1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MerchantTransfer1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MerchantTransfer1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MerchantTransfer1
   * @throws IOException if the JSON string is invalid with respect to MerchantTransfer1
   */
  public static MerchantTransfer1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MerchantTransfer1.class);
  }

  /**
   * Convert an instance of MerchantTransfer1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

