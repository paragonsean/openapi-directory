/*
 * Send Person to Merchant
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MerchantTransfer54Wrapper;
import org.openapitools.client.model.MerchantTransfers69Wrapper;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MerchantRetrievalApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MerchantRetrievalApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MerchantRetrievalApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getMerchantTransferById
     * @param partnerId Path Param - Provider assigned partner id. Details - string, 32 (required)
     * @param transferId Path Param - Valid transfer id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response details for a merchant transfer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantTransferByIdCall(String partnerId, String transferId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/send/#env/v1/partners/{partnerId}/merchant/transfers/{transferId}"
            .replace("{" + "partnerId" + "}", localVarApiClient.escapeString(partnerId.toString()))
            .replace("{" + "transferId" + "}", localVarApiClient.escapeString(transferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantTransferByIdValidateBeforeCall(String partnerId, String transferId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partnerId' is set
        if (partnerId == null) {
            throw new ApiException("Missing the required parameter 'partnerId' when calling getMerchantTransferById(Async)");
        }

        // verify the required parameter 'transferId' is set
        if (transferId == null) {
            throw new ApiException("Missing the required parameter 'transferId' when calling getMerchantTransferById(Async)");
        }

        return getMerchantTransferByIdCall(partnerId, transferId, _callback);

    }

    /**
     * Purpose of this service is to retrieve the Transfer resource associated with the specified transfer-id.
     * Purpose of this service is to retrieve the Transfer resource associated with the specified transfer-id.
     * @param partnerId Path Param - Provider assigned partner id. Details - string, 32 (required)
     * @param transferId Path Param - Valid transfer id (required)
     * @return MerchantTransfer54Wrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response details for a merchant transfer. </td><td>  -  </td></tr>
     </table>
     */
    public MerchantTransfer54Wrapper getMerchantTransferById(String partnerId, String transferId) throws ApiException {
        ApiResponse<MerchantTransfer54Wrapper> localVarResp = getMerchantTransferByIdWithHttpInfo(partnerId, transferId);
        return localVarResp.getData();
    }

    /**
     * Purpose of this service is to retrieve the Transfer resource associated with the specified transfer-id.
     * Purpose of this service is to retrieve the Transfer resource associated with the specified transfer-id.
     * @param partnerId Path Param - Provider assigned partner id. Details - string, 32 (required)
     * @param transferId Path Param - Valid transfer id (required)
     * @return ApiResponse&lt;MerchantTransfer54Wrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response details for a merchant transfer. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantTransfer54Wrapper> getMerchantTransferByIdWithHttpInfo(String partnerId, String transferId) throws ApiException {
        okhttp3.Call localVarCall = getMerchantTransferByIdValidateBeforeCall(partnerId, transferId, null);
        Type localVarReturnType = new TypeToken<MerchantTransfer54Wrapper>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Purpose of this service is to retrieve the Transfer resource associated with the specified transfer-id. (asynchronously)
     * Purpose of this service is to retrieve the Transfer resource associated with the specified transfer-id.
     * @param partnerId Path Param - Provider assigned partner id. Details - string, 32 (required)
     * @param transferId Path Param - Valid transfer id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response details for a merchant transfer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantTransferByIdAsync(String partnerId, String transferId, final ApiCallback<MerchantTransfer54Wrapper> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMerchantTransferByIdValidateBeforeCall(partnerId, transferId, _callback);
        Type localVarReturnType = new TypeToken<MerchantTransfer54Wrapper>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMerchantTransferByRef
     * @param partnerId Path Param - Provider assigned partner id. Details - string, 32 (required)
     * @param ref Query Param - Is the client specified transfer reference when initiating the transfer. Allowable characters are alphanumeric and * , - . _ ~. Details- 6-40 Example- DEF123456 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response details for a merchant transfer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantTransferByRefCall(String partnerId, String ref, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/send/#env/v1/partners/{partnerId}/merchant/transfers"
            .replace("{" + "partnerId" + "}", localVarApiClient.escapeString(partnerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ref != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref", ref));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantTransferByRefValidateBeforeCall(String partnerId, String ref, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partnerId' is set
        if (partnerId == null) {
            throw new ApiException("Missing the required parameter 'partnerId' when calling getMerchantTransferByRef(Async)");
        }

        // verify the required parameter 'ref' is set
        if (ref == null) {
            throw new ApiException("Missing the required parameter 'ref' when calling getMerchantTransferByRef(Async)");
        }

        return getMerchantTransferByRefCall(partnerId, ref, _callback);

    }

    /**
     * Purpose of this service is to retrieve the Transfer resource associated with a specified transfer_reference value.
     * Purpose of this service is to retrieve the Transfer resource associated with a specified transfer_reference value.
     * @param partnerId Path Param - Provider assigned partner id. Details - string, 32 (required)
     * @param ref Query Param - Is the client specified transfer reference when initiating the transfer. Allowable characters are alphanumeric and * , - . _ ~. Details- 6-40 Example- DEF123456 (required)
     * @return MerchantTransfers69Wrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response details for a merchant transfer. </td><td>  -  </td></tr>
     </table>
     */
    public MerchantTransfers69Wrapper getMerchantTransferByRef(String partnerId, String ref) throws ApiException {
        ApiResponse<MerchantTransfers69Wrapper> localVarResp = getMerchantTransferByRefWithHttpInfo(partnerId, ref);
        return localVarResp.getData();
    }

    /**
     * Purpose of this service is to retrieve the Transfer resource associated with a specified transfer_reference value.
     * Purpose of this service is to retrieve the Transfer resource associated with a specified transfer_reference value.
     * @param partnerId Path Param - Provider assigned partner id. Details - string, 32 (required)
     * @param ref Query Param - Is the client specified transfer reference when initiating the transfer. Allowable characters are alphanumeric and * , - . _ ~. Details- 6-40 Example- DEF123456 (required)
     * @return ApiResponse&lt;MerchantTransfers69Wrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response details for a merchant transfer. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantTransfers69Wrapper> getMerchantTransferByRefWithHttpInfo(String partnerId, String ref) throws ApiException {
        okhttp3.Call localVarCall = getMerchantTransferByRefValidateBeforeCall(partnerId, ref, null);
        Type localVarReturnType = new TypeToken<MerchantTransfers69Wrapper>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Purpose of this service is to retrieve the Transfer resource associated with a specified transfer_reference value. (asynchronously)
     * Purpose of this service is to retrieve the Transfer resource associated with a specified transfer_reference value.
     * @param partnerId Path Param - Provider assigned partner id. Details - string, 32 (required)
     * @param ref Query Param - Is the client specified transfer reference when initiating the transfer. Allowable characters are alphanumeric and * , - . _ ~. Details- 6-40 Example- DEF123456 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response details for a merchant transfer. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantTransferByRefAsync(String partnerId, String ref, final ApiCallback<MerchantTransfers69Wrapper> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMerchantTransferByRefValidateBeforeCall(partnerId, ref, _callback);
        Type localVarReturnType = new TypeToken<MerchantTransfers69Wrapper>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
