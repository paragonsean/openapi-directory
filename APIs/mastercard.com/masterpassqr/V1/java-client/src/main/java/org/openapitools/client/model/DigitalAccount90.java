/*
 * Send Person to Merchant
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DigitalAccountReferenceNumbers91;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response details for a retrieve digital account reference number
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:31.069911-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DigitalAccount90 {
  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "account_type";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private String accountType;

  public static final String SERIALIZED_NAME_ACCOUNT_URI = "account_uri";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_URI)
  private String accountUri;

  public static final String SERIALIZED_NAME_DIGITAL_ACCOUNT_REFERENCE_NUMBERS = "digital_account_reference_numbers";
  @SerializedName(SERIALIZED_NAME_DIGITAL_ACCOUNT_REFERENCE_NUMBERS)
  private DigitalAccountReferenceNumbers91 digitalAccountReferenceNumbers;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public DigitalAccount90() {
  }

  public DigitalAccount90 accountType(String accountType) {
    this.accountType = accountType;
    return this;
  }

  /**
   * Account type must contain one of the following: CREDIT, DEBIT, PREPAID, DEPOSIT_ACCOUNT, MOBILE_MONEY_ACCOUNT or CASH.
   * @return accountType
   */
  @javax.annotation.Nullable
  public String getAccountType() {
    return accountType;
  }

  public void setAccountType(String accountType) {
    this.accountType = accountType;
  }


  public DigitalAccount90 accountUri(String accountUri) {
    this.accountUri = accountUri;
    return this;
  }

  /**
   * URI describing the account. URI scheme must be raw. Valid Values- Refer &#39;Account URIs&#39;. 
   * @return accountUri
   */
  @javax.annotation.Nullable
  public String getAccountUri() {
    return accountUri;
  }

  public void setAccountUri(String accountUri) {
    this.accountUri = accountUri;
  }


  public DigitalAccount90 digitalAccountReferenceNumbers(DigitalAccountReferenceNumbers91 digitalAccountReferenceNumbers) {
    this.digitalAccountReferenceNumbers = digitalAccountReferenceNumbers;
    return this;
  }

  /**
   * Get digitalAccountReferenceNumbers
   * @return digitalAccountReferenceNumbers
   */
  @javax.annotation.Nullable
  public DigitalAccountReferenceNumbers91 getDigitalAccountReferenceNumbers() {
    return digitalAccountReferenceNumbers;
  }

  public void setDigitalAccountReferenceNumbers(DigitalAccountReferenceNumbers91 digitalAccountReferenceNumbers) {
    this.digitalAccountReferenceNumbers = digitalAccountReferenceNumbers;
  }


  public DigitalAccount90 reference(String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * Provide a unique reference number. It must be a unique value for the partner. Details- 6-40, Allowable characters are alphanumeric and * , - . _ ~
   * @return reference
   */
  @javax.annotation.Nullable
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DigitalAccount90 digitalAccount90 = (DigitalAccount90) o;
    return Objects.equals(this.accountType, digitalAccount90.accountType) &&
        Objects.equals(this.accountUri, digitalAccount90.accountUri) &&
        Objects.equals(this.digitalAccountReferenceNumbers, digitalAccount90.digitalAccountReferenceNumbers) &&
        Objects.equals(this.reference, digitalAccount90.reference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountType, accountUri, digitalAccountReferenceNumbers, reference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DigitalAccount90 {\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    accountUri: ").append(toIndentedString(accountUri)).append("\n");
    sb.append("    digitalAccountReferenceNumbers: ").append(toIndentedString(digitalAccountReferenceNumbers)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_type");
    openapiFields.add("account_uri");
    openapiFields.add("digital_account_reference_numbers");
    openapiFields.add("reference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DigitalAccount90
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DigitalAccount90.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DigitalAccount90 is not found in the empty JSON string", DigitalAccount90.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DigitalAccount90.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DigitalAccount90` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_type") != null && !jsonObj.get("account_type").isJsonNull()) && !jsonObj.get("account_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_type").toString()));
      }
      if ((jsonObj.get("account_uri") != null && !jsonObj.get("account_uri").isJsonNull()) && !jsonObj.get("account_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_uri").toString()));
      }
      // validate the optional field `digital_account_reference_numbers`
      if (jsonObj.get("digital_account_reference_numbers") != null && !jsonObj.get("digital_account_reference_numbers").isJsonNull()) {
        DigitalAccountReferenceNumbers91.validateJsonElement(jsonObj.get("digital_account_reference_numbers"));
      }
      if ((jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) && !jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DigitalAccount90.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DigitalAccount90' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DigitalAccount90> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DigitalAccount90.class));

       return (TypeAdapter<T>) new TypeAdapter<DigitalAccount90>() {
           @Override
           public void write(JsonWriter out, DigitalAccount90 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DigitalAccount90 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DigitalAccount90 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DigitalAccount90
   * @throws IOException if the JSON string is invalid with respect to DigitalAccount90
   */
  public static DigitalAccount90 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DigitalAccount90.class);
  }

  /**
   * Convert an instance of DigitalAccount90 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

