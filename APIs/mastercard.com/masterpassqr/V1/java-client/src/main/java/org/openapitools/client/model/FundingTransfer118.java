/*
 * Send Person to Merchant
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Recipient123;
import org.openapitools.client.model.ReconciliationData126;
import org.openapitools.client.model.Sender119;
import org.openapitools.client.model.TokenCryptogram128;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the details of the request message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:31.069911-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FundingTransfer118 {
  public static final String SERIALIZED_NAME_ADDITIONAL_MESSAGE = "additional_message";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_MESSAGE)
  private String additionalMessage;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_AUTHENTICATION_VALUE = "authentication_value";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_VALUE)
  private String authenticationValue;

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private String channel;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DEVICE_ID = "device_id";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private String deviceId;

  public static final String SERIALIZED_NAME_FUNDING_HINTS = "funding_hints";
  @SerializedName(SERIALIZED_NAME_FUNDING_HINTS)
  private String fundingHints;

  public static final String SERIALIZED_NAME_INTERCHANGE_RATE_DESIGNATOR = "interchange_rate_designator";
  @SerializedName(SERIALIZED_NAME_INTERCHANGE_RATE_DESIGNATOR)
  private String interchangeRateDesignator;

  public static final String SERIALIZED_NAME_LANGUAGE_DATA = "language_data";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_DATA)
  private String languageData;

  public static final String SERIALIZED_NAME_LANGUAGE_IDENTIFICATION = "language_identification";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_IDENTIFICATION)
  private String languageIdentification;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_PARTICIPATION_ID = "participation_id";
  @SerializedName(SERIALIZED_NAME_PARTICIPATION_ID)
  private String participationId;

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "payment_type";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private String paymentType;

  public static final String SERIALIZED_NAME_RECIPIENT = "recipient";
  @SerializedName(SERIALIZED_NAME_RECIPIENT)
  private Recipient123 recipient;

  public static final String SERIALIZED_NAME_RECIPIENT_ACCOUNT_URI = "recipient_account_uri";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_ACCOUNT_URI)
  private String recipientAccountUri;

  public static final String SERIALIZED_NAME_RECONCILIATION_DATA = "reconciliation_data";
  @SerializedName(SERIALIZED_NAME_RECONCILIATION_DATA)
  private ReconciliationData126 reconciliationData;

  public static final String SERIALIZED_NAME_SANCTION_SCREENING_OVERRIDE = "sanction_screening_override";
  @SerializedName(SERIALIZED_NAME_SANCTION_SCREENING_OVERRIDE)
  private Boolean sanctionScreeningOverride;

  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  private Sender119 sender;

  public static final String SERIALIZED_NAME_SENDER_ACCOUNT_URI = "sender_account_uri";
  @SerializedName(SERIALIZED_NAME_SENDER_ACCOUNT_URI)
  private String senderAccountUri;

  public static final String SERIALIZED_NAME_STATEMENT_DESCRIPTOR = "statement_descriptor";
  @SerializedName(SERIALIZED_NAME_STATEMENT_DESCRIPTOR)
  private String statementDescriptor;

  public static final String SERIALIZED_NAME_TOKEN_CRYPTOGRAM = "token_cryptogram";
  @SerializedName(SERIALIZED_NAME_TOKEN_CRYPTOGRAM)
  private TokenCryptogram128 tokenCryptogram;

  public static final String SERIALIZED_NAME_TRANSFER_REFERENCE = "transfer_reference";
  @SerializedName(SERIALIZED_NAME_TRANSFER_REFERENCE)
  private String transferReference;

  public FundingTransfer118() {
  }

  public FundingTransfer118 additionalMessage(String additionalMessage) {
    this.additionalMessage = additionalMessage;
    return this;
  }

  /**
   * Additional Message. Details- alpha-numeric 1-65
   * @return additionalMessage
   */
  @javax.annotation.Nullable
  public String getAdditionalMessage() {
    return additionalMessage;
  }

  public void setAdditionalMessage(String additionalMessage) {
    this.additionalMessage = additionalMessage;
  }


  public FundingTransfer118 amount(String amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Amount of the transfer in the smallest unit of currency. Decimal implied before last two positions. Example: 100 &#x3D; $1.00USD Details- numeric, 1-999999999999
   * @return amount
   */
  @javax.annotation.Nonnull
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }


  public FundingTransfer118 authenticationValue(String authenticationValue) {
    this.authenticationValue = authenticationValue;
    return this;
  }

  /**
   * List of name/value pairs containing authentication  values. Refer &#39;Authentication Value URIs&#39;
   * @return authenticationValue
   */
  @javax.annotation.Nullable
  public String getAuthenticationValue() {
    return authenticationValue;
  }

  public void setAuthenticationValue(String authenticationValue) {
    this.authenticationValue = authenticationValue;
  }


  public FundingTransfer118 channel(String channel) {
    this.channel = channel;
    return this;
  }

  /**
   *  Initiation channel of the payment request. This value can be defined in the onboarding process instead of passing in every call One of the WEB, MOBILE, BANK, KIOSK. Details- Conditional
   * @return channel
   */
  @javax.annotation.Nullable
  public String getChannel() {
    return channel;
  }

  public void setChannel(String channel) {
    this.channel = channel;
  }


  public FundingTransfer118 currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Three-letter ISO currency code representing the currency of the transfer amount. Details- alpha, length: 3
   * @return currency
   */
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public FundingTransfer118 deviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * The serial number of a device. Details- 1-40
   * @return deviceId
   */
  @javax.annotation.Nullable
  public String getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(String deviceId) {
    this.deviceId = deviceId;
  }


  public FundingTransfer118 fundingHints(String fundingHints) {
    this.fundingHints = fundingHints;
    return this;
  }

  /**
   * List of name/value pairs containing funding parameter values. Valid Values- Refer &#39;Funding Hints URIs&#39;
   * @return fundingHints
   */
  @javax.annotation.Nullable
  public String getFundingHints() {
    return fundingHints;
  }

  public void setFundingHints(String fundingHints) {
    this.fundingHints = fundingHints;
  }


  public FundingTransfer118 interchangeRateDesignator(String interchangeRateDesignator) {
    this.interchangeRateDesignator = interchangeRateDesignator;
    return this;
  }

  /**
   * Indicates the interchange rate and editing rules applied to the transaction.  Type:Alphanumeric [a-zA-Z 0-9], Length: 2
   * @return interchangeRateDesignator
   */
  @javax.annotation.Nullable
  public String getInterchangeRateDesignator() {
    return interchangeRateDesignator;
  }

  public void setInterchangeRateDesignator(String interchangeRateDesignator) {
    this.interchangeRateDesignator = interchangeRateDesignator;
  }


  public FundingTransfer118 languageData(String languageData) {
    this.languageData = languageData;
    return this;
  }

  /**
   * Language Data Details- binary 1-65
   * @return languageData
   */
  @javax.annotation.Nullable
  public String getLanguageData() {
    return languageData;
  }

  public void setLanguageData(String languageData) {
    this.languageData = languageData;
  }


  public FundingTransfer118 languageIdentification(String languageIdentification) {
    this.languageIdentification = languageIdentification;
    return this;
  }

  /**
   * Language Identification. Details- alpha - 3
   * @return languageIdentification
   */
  @javax.annotation.Nullable
  public String getLanguageIdentification() {
    return languageIdentification;
  }

  public void setLanguageIdentification(String languageIdentification) {
    this.languageIdentification = languageIdentification;
  }


  public FundingTransfer118 location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Location where the transaction is initiated from. Details- 1-40. Valid Values- Refer &#39;Location URIs&#39;
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public FundingTransfer118 participationId(String participationId) {
    this.participationId = participationId;
    return this;
  }

  /**
   * Participation Id. An identifier agreed by both the issuing institution and the merchant. Details- alpha-numeric 1-30
   * @return participationId
   */
  @javax.annotation.Nullable
  public String getParticipationId() {
    return participationId;
  }

  public void setParticipationId(String participationId) {
    this.participationId = participationId;
  }


  public FundingTransfer118 paymentType(String paymentType) {
    this.paymentType = paymentType;
    return this;
  }

  /**
   * Payment type used for transfer. Value - P2M: Person to Merchant.   Type: Alphanumeric [A-Z0-9], Length: 3
   * @return paymentType
   */
  @javax.annotation.Nullable
  public String getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(String paymentType) {
    this.paymentType = paymentType;
  }


  public FundingTransfer118 recipient(Recipient123 recipient) {
    this.recipient = recipient;
    return this;
  }

  /**
   * Get recipient
   * @return recipient
   */
  @javax.annotation.Nullable
  public Recipient123 getRecipient() {
    return recipient;
  }

  public void setRecipient(Recipient123 recipient) {
    this.recipient = recipient;
  }


  public FundingTransfer118 recipientAccountUri(String recipientAccountUri) {
    this.recipientAccountUri = recipientAccountUri;
    return this;
  }

  /**
   * URI identifying receiver&#39;s account to receive the transfer. Valid Values- Refer &#39;Account URIs&#39;
   * @return recipientAccountUri
   */
  @javax.annotation.Nonnull
  public String getRecipientAccountUri() {
    return recipientAccountUri;
  }

  public void setRecipientAccountUri(String recipientAccountUri) {
    this.recipientAccountUri = recipientAccountUri;
  }


  public FundingTransfer118 reconciliationData(ReconciliationData126 reconciliationData) {
    this.reconciliationData = reconciliationData;
    return this;
  }

  /**
   * Get reconciliationData
   * @return reconciliationData
   */
  @javax.annotation.Nullable
  public ReconciliationData126 getReconciliationData() {
    return reconciliationData;
  }

  public void setReconciliationData(ReconciliationData126 reconciliationData) {
    this.reconciliationData = reconciliationData;
  }


  public FundingTransfer118 sanctionScreeningOverride(Boolean sanctionScreeningOverride) {
    this.sanctionScreeningOverride = sanctionScreeningOverride;
    return this;
  }

  /**
   * Override indicator if partner has opted into Sanction Screening validation as part of transaction processing.  If Sanction Screening score on either sender or receiver is equal to or above threshold configured for partner, the payment will error.  To bypass the Sanction Screening validation and process the payment the value &#39;true&#39; should be submitted.  Details:  Optional – If partner has not enabled Sanction Screening validation default is &#39;true&#39;.   Required - If partner has opted into Sanction Screening validation but wants to bypass Sanction Screening validation and process the payment, value should be &#39;true&#39;. 
   * @return sanctionScreeningOverride
   */
  @javax.annotation.Nullable
  public Boolean getSanctionScreeningOverride() {
    return sanctionScreeningOverride;
  }

  public void setSanctionScreeningOverride(Boolean sanctionScreeningOverride) {
    this.sanctionScreeningOverride = sanctionScreeningOverride;
  }


  public FundingTransfer118 sender(Sender119 sender) {
    this.sender = sender;
    return this;
  }

  /**
   * Get sender
   * @return sender
   */
  @javax.annotation.Nullable
  public Sender119 getSender() {
    return sender;
  }

  public void setSender(Sender119 sender) {
    this.sender = sender;
  }


  public FundingTransfer118 senderAccountUri(String senderAccountUri) {
    this.senderAccountUri = senderAccountUri;
    return this;
  }

  /**
   * URI identifying sender&#39;s account to fund the transfer. Only a pan based account is valid. Valid Values- Refer &#39;Account URIs&#39; Details- Conditional
   * @return senderAccountUri
   */
  @javax.annotation.Nullable
  public String getSenderAccountUri() {
    return senderAccountUri;
  }

  public void setSenderAccountUri(String senderAccountUri) {
    this.senderAccountUri = senderAccountUri;
  }


  public FundingTransfer118 statementDescriptor(String statementDescriptor) {
    this.statementDescriptor = statementDescriptor;
    return this;
  }

  /**
   * The statement descriptor is a string which will be displayed on the recipient&#39;s bank or card statement. It consists of one or two parts: the prefix and the content. The prefix is an optional short string typically used to identify the client/merchant. It is defined during client/merchant onboarding and the same value should be used. If not provided in the API call, system will use the value defined in the onboarding process. The content portion of the statement descriptor will be displayed on the recipient&#39;s statement. If both the prefix and content portions are defined, they both are appended &amp;lt;prefix&amp;gt;+&amp;lt;content&amp;gt; The overall length may be at most 22 characters, including the prefix (even if not provided in the API call) and the content. Note: While most financial institutions display this information consistently, some may display it incorrectly or not at all. Details- Conditional, 22
   * @return statementDescriptor
   */
  @javax.annotation.Nullable
  public String getStatementDescriptor() {
    return statementDescriptor;
  }

  public void setStatementDescriptor(String statementDescriptor) {
    this.statementDescriptor = statementDescriptor;
  }


  public FundingTransfer118 tokenCryptogram(TokenCryptogram128 tokenCryptogram) {
    this.tokenCryptogram = tokenCryptogram;
    return this;
  }

  /**
   * Get tokenCryptogram
   * @return tokenCryptogram
   */
  @javax.annotation.Nullable
  public TokenCryptogram128 getTokenCryptogram() {
    return tokenCryptogram;
  }

  public void setTokenCryptogram(TokenCryptogram128 tokenCryptogram) {
    this.tokenCryptogram = tokenCryptogram;
  }


  public FundingTransfer118 transferReference(String transferReference) {
    this.transferReference = transferReference;
    return this;
  }

  /**
   * Unique transaction reference number. It must be unique within the partner&#39;s domain. Allowable characters are alphanumeric and * , - . _ ~. Details- 6-40
   * @return transferReference
   */
  @javax.annotation.Nonnull
  public String getTransferReference() {
    return transferReference;
  }

  public void setTransferReference(String transferReference) {
    this.transferReference = transferReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FundingTransfer118 fundingTransfer118 = (FundingTransfer118) o;
    return Objects.equals(this.additionalMessage, fundingTransfer118.additionalMessage) &&
        Objects.equals(this.amount, fundingTransfer118.amount) &&
        Objects.equals(this.authenticationValue, fundingTransfer118.authenticationValue) &&
        Objects.equals(this.channel, fundingTransfer118.channel) &&
        Objects.equals(this.currency, fundingTransfer118.currency) &&
        Objects.equals(this.deviceId, fundingTransfer118.deviceId) &&
        Objects.equals(this.fundingHints, fundingTransfer118.fundingHints) &&
        Objects.equals(this.interchangeRateDesignator, fundingTransfer118.interchangeRateDesignator) &&
        Objects.equals(this.languageData, fundingTransfer118.languageData) &&
        Objects.equals(this.languageIdentification, fundingTransfer118.languageIdentification) &&
        Objects.equals(this.location, fundingTransfer118.location) &&
        Objects.equals(this.participationId, fundingTransfer118.participationId) &&
        Objects.equals(this.paymentType, fundingTransfer118.paymentType) &&
        Objects.equals(this.recipient, fundingTransfer118.recipient) &&
        Objects.equals(this.recipientAccountUri, fundingTransfer118.recipientAccountUri) &&
        Objects.equals(this.reconciliationData, fundingTransfer118.reconciliationData) &&
        Objects.equals(this.sanctionScreeningOverride, fundingTransfer118.sanctionScreeningOverride) &&
        Objects.equals(this.sender, fundingTransfer118.sender) &&
        Objects.equals(this.senderAccountUri, fundingTransfer118.senderAccountUri) &&
        Objects.equals(this.statementDescriptor, fundingTransfer118.statementDescriptor) &&
        Objects.equals(this.tokenCryptogram, fundingTransfer118.tokenCryptogram) &&
        Objects.equals(this.transferReference, fundingTransfer118.transferReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalMessage, amount, authenticationValue, channel, currency, deviceId, fundingHints, interchangeRateDesignator, languageData, languageIdentification, location, participationId, paymentType, recipient, recipientAccountUri, reconciliationData, sanctionScreeningOverride, sender, senderAccountUri, statementDescriptor, tokenCryptogram, transferReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FundingTransfer118 {\n");
    sb.append("    additionalMessage: ").append(toIndentedString(additionalMessage)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    authenticationValue: ").append(toIndentedString(authenticationValue)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    fundingHints: ").append(toIndentedString(fundingHints)).append("\n");
    sb.append("    interchangeRateDesignator: ").append(toIndentedString(interchangeRateDesignator)).append("\n");
    sb.append("    languageData: ").append(toIndentedString(languageData)).append("\n");
    sb.append("    languageIdentification: ").append(toIndentedString(languageIdentification)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    participationId: ").append(toIndentedString(participationId)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    recipientAccountUri: ").append(toIndentedString(recipientAccountUri)).append("\n");
    sb.append("    reconciliationData: ").append(toIndentedString(reconciliationData)).append("\n");
    sb.append("    sanctionScreeningOverride: ").append(toIndentedString(sanctionScreeningOverride)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    senderAccountUri: ").append(toIndentedString(senderAccountUri)).append("\n");
    sb.append("    statementDescriptor: ").append(toIndentedString(statementDescriptor)).append("\n");
    sb.append("    tokenCryptogram: ").append(toIndentedString(tokenCryptogram)).append("\n");
    sb.append("    transferReference: ").append(toIndentedString(transferReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_message");
    openapiFields.add("amount");
    openapiFields.add("authentication_value");
    openapiFields.add("channel");
    openapiFields.add("currency");
    openapiFields.add("device_id");
    openapiFields.add("funding_hints");
    openapiFields.add("interchange_rate_designator");
    openapiFields.add("language_data");
    openapiFields.add("language_identification");
    openapiFields.add("location");
    openapiFields.add("participation_id");
    openapiFields.add("payment_type");
    openapiFields.add("recipient");
    openapiFields.add("recipient_account_uri");
    openapiFields.add("reconciliation_data");
    openapiFields.add("sanction_screening_override");
    openapiFields.add("sender");
    openapiFields.add("sender_account_uri");
    openapiFields.add("statement_descriptor");
    openapiFields.add("token_cryptogram");
    openapiFields.add("transfer_reference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("recipient_account_uri");
    openapiRequiredFields.add("transfer_reference");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FundingTransfer118
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FundingTransfer118.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FundingTransfer118 is not found in the empty JSON string", FundingTransfer118.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FundingTransfer118.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FundingTransfer118` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FundingTransfer118.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additional_message") != null && !jsonObj.get("additional_message").isJsonNull()) && !jsonObj.get("additional_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additional_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additional_message").toString()));
      }
      if (!jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if ((jsonObj.get("authentication_value") != null && !jsonObj.get("authentication_value").isJsonNull()) && !jsonObj.get("authentication_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authentication_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authentication_value").toString()));
      }
      if ((jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) && !jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("device_id") != null && !jsonObj.get("device_id").isJsonNull()) && !jsonObj.get("device_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_id").toString()));
      }
      if ((jsonObj.get("funding_hints") != null && !jsonObj.get("funding_hints").isJsonNull()) && !jsonObj.get("funding_hints").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `funding_hints` to be a primitive type in the JSON string but got `%s`", jsonObj.get("funding_hints").toString()));
      }
      if ((jsonObj.get("interchange_rate_designator") != null && !jsonObj.get("interchange_rate_designator").isJsonNull()) && !jsonObj.get("interchange_rate_designator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interchange_rate_designator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interchange_rate_designator").toString()));
      }
      if ((jsonObj.get("language_data") != null && !jsonObj.get("language_data").isJsonNull()) && !jsonObj.get("language_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language_data").toString()));
      }
      if ((jsonObj.get("language_identification") != null && !jsonObj.get("language_identification").isJsonNull()) && !jsonObj.get("language_identification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language_identification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language_identification").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("participation_id") != null && !jsonObj.get("participation_id").isJsonNull()) && !jsonObj.get("participation_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `participation_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("participation_id").toString()));
      }
      if ((jsonObj.get("payment_type") != null && !jsonObj.get("payment_type").isJsonNull()) && !jsonObj.get("payment_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_type").toString()));
      }
      // validate the optional field `recipient`
      if (jsonObj.get("recipient") != null && !jsonObj.get("recipient").isJsonNull()) {
        Recipient123.validateJsonElement(jsonObj.get("recipient"));
      }
      if (!jsonObj.get("recipient_account_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_account_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_account_uri").toString()));
      }
      // validate the optional field `reconciliation_data`
      if (jsonObj.get("reconciliation_data") != null && !jsonObj.get("reconciliation_data").isJsonNull()) {
        ReconciliationData126.validateJsonElement(jsonObj.get("reconciliation_data"));
      }
      // validate the optional field `sender`
      if (jsonObj.get("sender") != null && !jsonObj.get("sender").isJsonNull()) {
        Sender119.validateJsonElement(jsonObj.get("sender"));
      }
      if ((jsonObj.get("sender_account_uri") != null && !jsonObj.get("sender_account_uri").isJsonNull()) && !jsonObj.get("sender_account_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sender_account_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender_account_uri").toString()));
      }
      if ((jsonObj.get("statement_descriptor") != null && !jsonObj.get("statement_descriptor").isJsonNull()) && !jsonObj.get("statement_descriptor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statement_descriptor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statement_descriptor").toString()));
      }
      // validate the optional field `token_cryptogram`
      if (jsonObj.get("token_cryptogram") != null && !jsonObj.get("token_cryptogram").isJsonNull()) {
        TokenCryptogram128.validateJsonElement(jsonObj.get("token_cryptogram"));
      }
      if (!jsonObj.get("transfer_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transfer_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transfer_reference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FundingTransfer118.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FundingTransfer118' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FundingTransfer118> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FundingTransfer118.class));

       return (TypeAdapter<T>) new TypeAdapter<FundingTransfer118>() {
           @Override
           public void write(JsonWriter out, FundingTransfer118 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FundingTransfer118 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FundingTransfer118 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FundingTransfer118
   * @throws IOException if the JSON string is invalid with respect to FundingTransfer118
   */
  public static FundingTransfer118 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FundingTransfer118.class);
  }

  /**
   * Convert an instance of FundingTransfer118 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

