/*
 * Send Person to Merchant
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Recipient165;
import org.openapitools.client.model.TransactionAmount164;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the details of the request message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:31.069911-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NotificationRequest163 {
  public static final String SERIALIZED_NAME_ADDITIONAL_MESSAGE = "additional_message";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_MESSAGE)
  private String additionalMessage;

  public static final String SERIALIZED_NAME_MASTERCARD_ASSIGNED_ID = "mastercard_assigned_id";
  @SerializedName(SERIALIZED_NAME_MASTERCARD_ASSIGNED_ID)
  private String mastercardAssignedId;

  public static final String SERIALIZED_NAME_MERCHANT_CATEGORY_CODE = "merchant_category_code";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CATEGORY_CODE)
  private String merchantCategoryCode;

  public static final String SERIALIZED_NAME_PAYMENT_FACILITATOR_ID = "payment_facilitator_id";
  @SerializedName(SERIALIZED_NAME_PAYMENT_FACILITATOR_ID)
  private String paymentFacilitatorId;

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "payment_type";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private String paymentType;

  public static final String SERIALIZED_NAME_RECIPIENT = "recipient";
  @SerializedName(SERIALIZED_NAME_RECIPIENT)
  private Recipient165 recipient;

  public static final String SERIALIZED_NAME_RECIPIENT_ACCOUNT_URI = "recipient_account_uri";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_ACCOUNT_URI)
  private String recipientAccountUri;

  public static final String SERIALIZED_NAME_TRANSACTION_AMOUNT = "transaction_amount";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_AMOUNT)
  private TransactionAmount164 transactionAmount;

  public static final String SERIALIZED_NAME_TRANSFER_STATUS = "transfer_status";
  @SerializedName(SERIALIZED_NAME_TRANSFER_STATUS)
  private String transferStatus;

  public NotificationRequest163() {
  }

  public NotificationRequest163 additionalMessage(String additionalMessage) {
    this.additionalMessage = additionalMessage;
    return this;
  }

  /**
   * Message a financial institution will associate to the transfer and may display
   * @return additionalMessage
   */
  @javax.annotation.Nullable
  public String getAdditionalMessage() {
    return additionalMessage;
  }

  public void setAdditionalMessage(String additionalMessage) {
    this.additionalMessage = additionalMessage;
  }


  public NotificationRequest163 mastercardAssignedId(String mastercardAssignedId) {
    this.mastercardAssignedId = mastercardAssignedId;
    return this;
  }

  /**
   * Mastercard Assigned ID for tiered interchange calculations. Length: 6. Applicable only for P2M and MRF notifications. 
   * @return mastercardAssignedId
   */
  @javax.annotation.Nullable
  public String getMastercardAssignedId() {
    return mastercardAssignedId;
  }

  public void setMastercardAssignedId(String mastercardAssignedId) {
    this.mastercardAssignedId = mastercardAssignedId;
  }


  public NotificationRequest163 merchantCategoryCode(String merchantCategoryCode) {
    this.merchantCategoryCode = merchantCategoryCode;
    return this;
  }

  /**
   * Merchant category code
   * @return merchantCategoryCode
   */
  @javax.annotation.Nullable
  public String getMerchantCategoryCode() {
    return merchantCategoryCode;
  }

  public void setMerchantCategoryCode(String merchantCategoryCode) {
    this.merchantCategoryCode = merchantCategoryCode;
  }


  public NotificationRequest163 paymentFacilitatorId(String paymentFacilitatorId) {
    this.paymentFacilitatorId = paymentFacilitatorId;
    return this;
  }

  /**
   * Contains the Payment Facilitator ID. Length: 11. Applicable only for P2M and MRF notifications.
   * @return paymentFacilitatorId
   */
  @javax.annotation.Nullable
  public String getPaymentFacilitatorId() {
    return paymentFacilitatorId;
  }

  public void setPaymentFacilitatorId(String paymentFacilitatorId) {
    this.paymentFacilitatorId = paymentFacilitatorId;
  }


  public NotificationRequest163 paymentType(String paymentType) {
    this.paymentType = paymentType;
    return this;
  }

  /**
   * MRF: Merchant Refund
   * @return paymentType
   */
  @javax.annotation.Nonnull
  public String getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(String paymentType) {
    this.paymentType = paymentType;
  }


  public NotificationRequest163 recipient(Recipient165 recipient) {
    this.recipient = recipient;
    return this;
  }

  /**
   * Get recipient
   * @return recipient
   */
  @javax.annotation.Nullable
  public Recipient165 getRecipient() {
    return recipient;
  }

  public void setRecipient(Recipient165 recipient) {
    this.recipient = recipient;
  }


  public NotificationRequest163 recipientAccountUri(String recipientAccountUri) {
    this.recipientAccountUri = recipientAccountUri;
    return this;
  }

  /**
   * Recepient Account uri . Only accept format: pan:[16 digit]
   * @return recipientAccountUri
   */
  @javax.annotation.Nonnull
  public String getRecipientAccountUri() {
    return recipientAccountUri;
  }

  public void setRecipientAccountUri(String recipientAccountUri) {
    this.recipientAccountUri = recipientAccountUri;
  }


  public NotificationRequest163 transactionAmount(TransactionAmount164 transactionAmount) {
    this.transactionAmount = transactionAmount;
    return this;
  }

  /**
   * Get transactionAmount
   * @return transactionAmount
   */
  @javax.annotation.Nullable
  public TransactionAmount164 getTransactionAmount() {
    return transactionAmount;
  }

  public void setTransactionAmount(TransactionAmount164 transactionAmount) {
    this.transactionAmount = transactionAmount;
  }


  public NotificationRequest163 transferStatus(String transferStatus) {
    this.transferStatus = transferStatus;
    return this;
  }

  /**
   * APPROVED or DECLINED
   * @return transferStatus
   */
  @javax.annotation.Nonnull
  public String getTransferStatus() {
    return transferStatus;
  }

  public void setTransferStatus(String transferStatus) {
    this.transferStatus = transferStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationRequest163 notificationRequest163 = (NotificationRequest163) o;
    return Objects.equals(this.additionalMessage, notificationRequest163.additionalMessage) &&
        Objects.equals(this.mastercardAssignedId, notificationRequest163.mastercardAssignedId) &&
        Objects.equals(this.merchantCategoryCode, notificationRequest163.merchantCategoryCode) &&
        Objects.equals(this.paymentFacilitatorId, notificationRequest163.paymentFacilitatorId) &&
        Objects.equals(this.paymentType, notificationRequest163.paymentType) &&
        Objects.equals(this.recipient, notificationRequest163.recipient) &&
        Objects.equals(this.recipientAccountUri, notificationRequest163.recipientAccountUri) &&
        Objects.equals(this.transactionAmount, notificationRequest163.transactionAmount) &&
        Objects.equals(this.transferStatus, notificationRequest163.transferStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalMessage, mastercardAssignedId, merchantCategoryCode, paymentFacilitatorId, paymentType, recipient, recipientAccountUri, transactionAmount, transferStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationRequest163 {\n");
    sb.append("    additionalMessage: ").append(toIndentedString(additionalMessage)).append("\n");
    sb.append("    mastercardAssignedId: ").append(toIndentedString(mastercardAssignedId)).append("\n");
    sb.append("    merchantCategoryCode: ").append(toIndentedString(merchantCategoryCode)).append("\n");
    sb.append("    paymentFacilitatorId: ").append(toIndentedString(paymentFacilitatorId)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    recipientAccountUri: ").append(toIndentedString(recipientAccountUri)).append("\n");
    sb.append("    transactionAmount: ").append(toIndentedString(transactionAmount)).append("\n");
    sb.append("    transferStatus: ").append(toIndentedString(transferStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_message");
    openapiFields.add("mastercard_assigned_id");
    openapiFields.add("merchant_category_code");
    openapiFields.add("payment_facilitator_id");
    openapiFields.add("payment_type");
    openapiFields.add("recipient");
    openapiFields.add("recipient_account_uri");
    openapiFields.add("transaction_amount");
    openapiFields.add("transfer_status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("payment_type");
    openapiRequiredFields.add("recipient_account_uri");
    openapiRequiredFields.add("transfer_status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NotificationRequest163
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NotificationRequest163.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotificationRequest163 is not found in the empty JSON string", NotificationRequest163.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NotificationRequest163.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NotificationRequest163` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NotificationRequest163.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additional_message") != null && !jsonObj.get("additional_message").isJsonNull()) && !jsonObj.get("additional_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additional_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additional_message").toString()));
      }
      if ((jsonObj.get("mastercard_assigned_id") != null && !jsonObj.get("mastercard_assigned_id").isJsonNull()) && !jsonObj.get("mastercard_assigned_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mastercard_assigned_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mastercard_assigned_id").toString()));
      }
      if ((jsonObj.get("merchant_category_code") != null && !jsonObj.get("merchant_category_code").isJsonNull()) && !jsonObj.get("merchant_category_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_category_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_category_code").toString()));
      }
      if ((jsonObj.get("payment_facilitator_id") != null && !jsonObj.get("payment_facilitator_id").isJsonNull()) && !jsonObj.get("payment_facilitator_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_facilitator_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_facilitator_id").toString()));
      }
      if (!jsonObj.get("payment_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_type").toString()));
      }
      // validate the optional field `recipient`
      if (jsonObj.get("recipient") != null && !jsonObj.get("recipient").isJsonNull()) {
        Recipient165.validateJsonElement(jsonObj.get("recipient"));
      }
      if (!jsonObj.get("recipient_account_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_account_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_account_uri").toString()));
      }
      // validate the optional field `transaction_amount`
      if (jsonObj.get("transaction_amount") != null && !jsonObj.get("transaction_amount").isJsonNull()) {
        TransactionAmount164.validateJsonElement(jsonObj.get("transaction_amount"));
      }
      if (!jsonObj.get("transfer_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transfer_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transfer_status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotificationRequest163.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotificationRequest163' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotificationRequest163> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotificationRequest163.class));

       return (TypeAdapter<T>) new TypeAdapter<NotificationRequest163>() {
           @Override
           public void write(JsonWriter out, NotificationRequest163 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NotificationRequest163 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NotificationRequest163 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NotificationRequest163
   * @throws IOException if the JSON string is invalid with respect to NotificationRequest163
   */
  public static NotificationRequest163 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotificationRequest163.class);
  }

  /**
   * Convert an instance of NotificationRequest163 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

