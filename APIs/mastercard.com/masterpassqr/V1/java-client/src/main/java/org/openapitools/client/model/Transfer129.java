/*
 * Send Person to Merchant
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Recipient134;
import org.openapitools.client.model.ReconciliationData142;
import org.openapitools.client.model.Sender130;
import org.openapitools.client.model.TransactionHistory138;
import org.openapitools.client.model.TransferAmount137;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:09:31.069911-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Transfer129 {
  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private String channel;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_DEVICE_ID = "device_id";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private String deviceId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INTERCHANGE_RATE_DESIGNATOR = "interchange_rate_designator";
  @SerializedName(SERIALIZED_NAME_INTERCHANGE_RATE_DESIGNATOR)
  private String interchangeRateDesignator;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_ORIGINAL_STATUS = "original_status";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_STATUS)
  private String originalStatus;

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "payment_type";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private String paymentType;

  public static final String SERIALIZED_NAME_RECIPIENT = "recipient";
  @SerializedName(SERIALIZED_NAME_RECIPIENT)
  private Recipient134 recipient;

  public static final String SERIALIZED_NAME_RECIPIENT_ACCOUNT_URI = "recipient_account_uri";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_ACCOUNT_URI)
  private String recipientAccountUri;

  public static final String SERIALIZED_NAME_RECONCILIATION_DATA = "reconciliation_data";
  @SerializedName(SERIALIZED_NAME_RECONCILIATION_DATA)
  private ReconciliationData142 reconciliationData;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resource_type";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_SANCTION_SCREENING_OVERRIDE = "sanction_screening_override";
  @SerializedName(SERIALIZED_NAME_SANCTION_SCREENING_OVERRIDE)
  private Boolean sanctionScreeningOverride;

  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  private Sender130 sender;

  public static final String SERIALIZED_NAME_SENDER_ACCOUNT_URI = "sender_account_uri";
  @SerializedName(SERIALIZED_NAME_SENDER_ACCOUNT_URI)
  private String senderAccountUri;

  public static final String SERIALIZED_NAME_STATEMENT_DESCRIPTOR = "statement_descriptor";
  @SerializedName(SERIALIZED_NAME_STATEMENT_DESCRIPTOR)
  private String statementDescriptor;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_STATUS_TIMESTAMP = "status_timestamp";
  @SerializedName(SERIALIZED_NAME_STATUS_TIMESTAMP)
  private String statusTimestamp;

  public static final String SERIALIZED_NAME_TRANSACTION_HISTORY = "transaction_history";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_HISTORY)
  private TransactionHistory138 transactionHistory;

  public static final String SERIALIZED_NAME_TRANSFER_AMOUNT = "transfer_amount";
  @SerializedName(SERIALIZED_NAME_TRANSFER_AMOUNT)
  private TransferAmount137 transferAmount;

  public static final String SERIALIZED_NAME_TRANSFER_REFERENCE = "transfer_reference";
  @SerializedName(SERIALIZED_NAME_TRANSFER_REFERENCE)
  private String transferReference;

  public Transfer129() {
  }

  public Transfer129 channel(String channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Initiation channel of the transfer request. Values: WEB, MOBILE, BANK, KIOSK.
   * @return channel
   */
  @javax.annotation.Nullable
  public String getChannel() {
    return channel;
  }

  public void setChannel(String channel) {
    this.channel = channel;
  }


  public Transfer129 created(String created) {
    this.created = created;
    return this;
  }

  /**
   * Date and time the original transfer was created as an ISO 8601 Timestamp. Details- YYYY-MM-DDTHH:MM:SSZ Valid Values- Refer &#39;Date And Time Formats&#39;
   * @return created
   */
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public Transfer129 deviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * The serial number of a device that initiated the transfer.
   * @return deviceId
   */
  @javax.annotation.Nullable
  public String getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(String deviceId) {
    this.deviceId = deviceId;
  }


  public Transfer129 id(String id) {
    this.id = id;
    return this;
  }

  /**
   * System generated unique transfer identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Transfer129 interchangeRateDesignator(String interchangeRateDesignator) {
    this.interchangeRateDesignator = interchangeRateDesignator;
    return this;
  }

  /**
   * Indicates the interchange rate and editing rules applied to the transaction.  Type:Alphanumeric [a-zA-Z 0-9], Length: 2
   * @return interchangeRateDesignator
   */
  @javax.annotation.Nullable
  public String getInterchangeRateDesignator() {
    return interchangeRateDesignator;
  }

  public void setInterchangeRateDesignator(String interchangeRateDesignator) {
    this.interchangeRateDesignator = interchangeRateDesignator;
  }


  public Transfer129 location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Location where the transaction is initiated.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public Transfer129 originalStatus(String originalStatus) {
    this.originalStatus = originalStatus;
    return this;
  }

  /**
   * Original status of the transfer. One of APPROVED, DECLINED, ERROR, PENDING, UNKNOWN.
   * @return originalStatus
   */
  @javax.annotation.Nullable
  public String getOriginalStatus() {
    return originalStatus;
  }

  public void setOriginalStatus(String originalStatus) {
    this.originalStatus = originalStatus;
  }


  public Transfer129 paymentType(String paymentType) {
    this.paymentType = paymentType;
    return this;
  }

  /**
   * Payment type used for transfer. Value - P2M: Person to Merchant. \\n\\nType: Alphanumeric [A-Z0-9], Maximum Length: 3
   * @return paymentType
   */
  @javax.annotation.Nullable
  public String getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(String paymentType) {
    this.paymentType = paymentType;
  }


  public Transfer129 recipient(Recipient134 recipient) {
    this.recipient = recipient;
    return this;
  }

  /**
   * Get recipient
   * @return recipient
   */
  @javax.annotation.Nullable
  public Recipient134 getRecipient() {
    return recipient;
  }

  public void setRecipient(Recipient134 recipient) {
    this.recipient = recipient;
  }


  public Transfer129 recipientAccountUri(String recipientAccountUri) {
    this.recipientAccountUri = recipientAccountUri;
    return this;
  }

  /**
   * URI describing the recipient account. It will include masked account information (e.g. \&quot;************1234\&quot; for a card account) but will not include security codes (e.g. CVC or expiration date for a card account).
   * @return recipientAccountUri
   */
  @javax.annotation.Nullable
  public String getRecipientAccountUri() {
    return recipientAccountUri;
  }

  public void setRecipientAccountUri(String recipientAccountUri) {
    this.recipientAccountUri = recipientAccountUri;
  }


  public Transfer129 reconciliationData(ReconciliationData142 reconciliationData) {
    this.reconciliationData = reconciliationData;
    return this;
  }

  /**
   * Get reconciliationData
   * @return reconciliationData
   */
  @javax.annotation.Nullable
  public ReconciliationData142 getReconciliationData() {
    return reconciliationData;
  }

  public void setReconciliationData(ReconciliationData142 reconciliationData) {
    this.reconciliationData = reconciliationData;
  }


  public Transfer129 resourceType(String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Type of resource
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }

  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }


  public Transfer129 sanctionScreeningOverride(Boolean sanctionScreeningOverride) {
    this.sanctionScreeningOverride = sanctionScreeningOverride;
    return this;
  }

  /**
   * Sanction Screening validation override if enabled for partner.
   * @return sanctionScreeningOverride
   */
  @javax.annotation.Nullable
  public Boolean getSanctionScreeningOverride() {
    return sanctionScreeningOverride;
  }

  public void setSanctionScreeningOverride(Boolean sanctionScreeningOverride) {
    this.sanctionScreeningOverride = sanctionScreeningOverride;
  }


  public Transfer129 sender(Sender130 sender) {
    this.sender = sender;
    return this;
  }

  /**
   * Get sender
   * @return sender
   */
  @javax.annotation.Nullable
  public Sender130 getSender() {
    return sender;
  }

  public void setSender(Sender130 sender) {
    this.sender = sender;
  }


  public Transfer129 senderAccountUri(String senderAccountUri) {
    this.senderAccountUri = senderAccountUri;
    return this;
  }

  /**
   * URI describing the sending account. It will include masked account information (e.g. \&quot;************1234\&quot; for a card account) but will not include security codes (e.g. CVC or expiration date for a card account).
   * @return senderAccountUri
   */
  @javax.annotation.Nullable
  public String getSenderAccountUri() {
    return senderAccountUri;
  }

  public void setSenderAccountUri(String senderAccountUri) {
    this.senderAccountUri = senderAccountUri;
  }


  public Transfer129 statementDescriptor(String statementDescriptor) {
    this.statementDescriptor = statementDescriptor;
    return this;
  }

  /**
   * The statement descriptor is the value that will be displayed on the recipient&#39;s bank or card statement. It consists of two parts: the prefix and the content. The prefix is a short string typically used to identify the partner. The appended &amp;lt;prefix&amp;gt;*&amp;lt;content&amp;gt; will be displayed on the recipient&#39;s statement. Note: While most financial institutions display this information consistently, some may display it incorrectly or not at all.
   * @return statementDescriptor
   */
  @javax.annotation.Nullable
  public String getStatementDescriptor() {
    return statementDescriptor;
  }

  public void setStatementDescriptor(String statementDescriptor) {
    this.statementDescriptor = statementDescriptor;
  }


  public Transfer129 status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Status of the transfer. Values: APPROVED, DECLINED, ERROR, PENDING, REVERSED, CANCELLED.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Transfer129 statusTimestamp(String statusTimestamp) {
    this.statusTimestamp = statusTimestamp;
    return this;
  }

  /**
   * Timestamp of when the status was changed to its current value. Details- YYYY-MM-DDTHH:MM:SSZ Valid Values- Refer &#39;Date And Time Formats&#39;
   * @return statusTimestamp
   */
  @javax.annotation.Nullable
  public String getStatusTimestamp() {
    return statusTimestamp;
  }

  public void setStatusTimestamp(String statusTimestamp) {
    this.statusTimestamp = statusTimestamp;
  }


  public Transfer129 transactionHistory(TransactionHistory138 transactionHistory) {
    this.transactionHistory = transactionHistory;
    return this;
  }

  /**
   * Get transactionHistory
   * @return transactionHistory
   */
  @javax.annotation.Nullable
  public TransactionHistory138 getTransactionHistory() {
    return transactionHistory;
  }

  public void setTransactionHistory(TransactionHistory138 transactionHistory) {
    this.transactionHistory = transactionHistory;
  }


  public Transfer129 transferAmount(TransferAmount137 transferAmount) {
    this.transferAmount = transferAmount;
    return this;
  }

  /**
   * Get transferAmount
   * @return transferAmount
   */
  @javax.annotation.Nullable
  public TransferAmount137 getTransferAmount() {
    return transferAmount;
  }

  public void setTransferAmount(TransferAmount137 transferAmount) {
    this.transferAmount = transferAmount;
  }


  public Transfer129 transferReference(String transferReference) {
    this.transferReference = transferReference;
    return this;
  }

  /**
   * Unique transaction reference number provided when the Transfer was created.
   * @return transferReference
   */
  @javax.annotation.Nullable
  public String getTransferReference() {
    return transferReference;
  }

  public void setTransferReference(String transferReference) {
    this.transferReference = transferReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transfer129 transfer129 = (Transfer129) o;
    return Objects.equals(this.channel, transfer129.channel) &&
        Objects.equals(this.created, transfer129.created) &&
        Objects.equals(this.deviceId, transfer129.deviceId) &&
        Objects.equals(this.id, transfer129.id) &&
        Objects.equals(this.interchangeRateDesignator, transfer129.interchangeRateDesignator) &&
        Objects.equals(this.location, transfer129.location) &&
        Objects.equals(this.originalStatus, transfer129.originalStatus) &&
        Objects.equals(this.paymentType, transfer129.paymentType) &&
        Objects.equals(this.recipient, transfer129.recipient) &&
        Objects.equals(this.recipientAccountUri, transfer129.recipientAccountUri) &&
        Objects.equals(this.reconciliationData, transfer129.reconciliationData) &&
        Objects.equals(this.resourceType, transfer129.resourceType) &&
        Objects.equals(this.sanctionScreeningOverride, transfer129.sanctionScreeningOverride) &&
        Objects.equals(this.sender, transfer129.sender) &&
        Objects.equals(this.senderAccountUri, transfer129.senderAccountUri) &&
        Objects.equals(this.statementDescriptor, transfer129.statementDescriptor) &&
        Objects.equals(this.status, transfer129.status) &&
        Objects.equals(this.statusTimestamp, transfer129.statusTimestamp) &&
        Objects.equals(this.transactionHistory, transfer129.transactionHistory) &&
        Objects.equals(this.transferAmount, transfer129.transferAmount) &&
        Objects.equals(this.transferReference, transfer129.transferReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channel, created, deviceId, id, interchangeRateDesignator, location, originalStatus, paymentType, recipient, recipientAccountUri, reconciliationData, resourceType, sanctionScreeningOverride, sender, senderAccountUri, statementDescriptor, status, statusTimestamp, transactionHistory, transferAmount, transferReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transfer129 {\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    interchangeRateDesignator: ").append(toIndentedString(interchangeRateDesignator)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    originalStatus: ").append(toIndentedString(originalStatus)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    recipientAccountUri: ").append(toIndentedString(recipientAccountUri)).append("\n");
    sb.append("    reconciliationData: ").append(toIndentedString(reconciliationData)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    sanctionScreeningOverride: ").append(toIndentedString(sanctionScreeningOverride)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    senderAccountUri: ").append(toIndentedString(senderAccountUri)).append("\n");
    sb.append("    statementDescriptor: ").append(toIndentedString(statementDescriptor)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusTimestamp: ").append(toIndentedString(statusTimestamp)).append("\n");
    sb.append("    transactionHistory: ").append(toIndentedString(transactionHistory)).append("\n");
    sb.append("    transferAmount: ").append(toIndentedString(transferAmount)).append("\n");
    sb.append("    transferReference: ").append(toIndentedString(transferReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("channel");
    openapiFields.add("created");
    openapiFields.add("device_id");
    openapiFields.add("id");
    openapiFields.add("interchange_rate_designator");
    openapiFields.add("location");
    openapiFields.add("original_status");
    openapiFields.add("payment_type");
    openapiFields.add("recipient");
    openapiFields.add("recipient_account_uri");
    openapiFields.add("reconciliation_data");
    openapiFields.add("resource_type");
    openapiFields.add("sanction_screening_override");
    openapiFields.add("sender");
    openapiFields.add("sender_account_uri");
    openapiFields.add("statement_descriptor");
    openapiFields.add("status");
    openapiFields.add("status_timestamp");
    openapiFields.add("transaction_history");
    openapiFields.add("transfer_amount");
    openapiFields.add("transfer_reference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Transfer129
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Transfer129.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Transfer129 is not found in the empty JSON string", Transfer129.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Transfer129.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Transfer129` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) && !jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      if ((jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) && !jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if ((jsonObj.get("device_id") != null && !jsonObj.get("device_id").isJsonNull()) && !jsonObj.get("device_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_id").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("interchange_rate_designator") != null && !jsonObj.get("interchange_rate_designator").isJsonNull()) && !jsonObj.get("interchange_rate_designator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interchange_rate_designator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interchange_rate_designator").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("original_status") != null && !jsonObj.get("original_status").isJsonNull()) && !jsonObj.get("original_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_status").toString()));
      }
      if ((jsonObj.get("payment_type") != null && !jsonObj.get("payment_type").isJsonNull()) && !jsonObj.get("payment_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_type").toString()));
      }
      // validate the optional field `recipient`
      if (jsonObj.get("recipient") != null && !jsonObj.get("recipient").isJsonNull()) {
        Recipient134.validateJsonElement(jsonObj.get("recipient"));
      }
      if ((jsonObj.get("recipient_account_uri") != null && !jsonObj.get("recipient_account_uri").isJsonNull()) && !jsonObj.get("recipient_account_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_account_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_account_uri").toString()));
      }
      // validate the optional field `reconciliation_data`
      if (jsonObj.get("reconciliation_data") != null && !jsonObj.get("reconciliation_data").isJsonNull()) {
        ReconciliationData142.validateJsonElement(jsonObj.get("reconciliation_data"));
      }
      if ((jsonObj.get("resource_type") != null && !jsonObj.get("resource_type").isJsonNull()) && !jsonObj.get("resource_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_type").toString()));
      }
      // validate the optional field `sender`
      if (jsonObj.get("sender") != null && !jsonObj.get("sender").isJsonNull()) {
        Sender130.validateJsonElement(jsonObj.get("sender"));
      }
      if ((jsonObj.get("sender_account_uri") != null && !jsonObj.get("sender_account_uri").isJsonNull()) && !jsonObj.get("sender_account_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sender_account_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender_account_uri").toString()));
      }
      if ((jsonObj.get("statement_descriptor") != null && !jsonObj.get("statement_descriptor").isJsonNull()) && !jsonObj.get("statement_descriptor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statement_descriptor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statement_descriptor").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("status_timestamp") != null && !jsonObj.get("status_timestamp").isJsonNull()) && !jsonObj.get("status_timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_timestamp").toString()));
      }
      // validate the optional field `transaction_history`
      if (jsonObj.get("transaction_history") != null && !jsonObj.get("transaction_history").isJsonNull()) {
        TransactionHistory138.validateJsonElement(jsonObj.get("transaction_history"));
      }
      // validate the optional field `transfer_amount`
      if (jsonObj.get("transfer_amount") != null && !jsonObj.get("transfer_amount").isJsonNull()) {
        TransferAmount137.validateJsonElement(jsonObj.get("transfer_amount"));
      }
      if ((jsonObj.get("transfer_reference") != null && !jsonObj.get("transfer_reference").isJsonNull()) && !jsonObj.get("transfer_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transfer_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transfer_reference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Transfer129.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Transfer129' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Transfer129> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Transfer129.class));

       return (TypeAdapter<T>) new TypeAdapter<Transfer129>() {
           @Override
           public void write(JsonWriter out, Transfer129 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Transfer129 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Transfer129 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Transfer129
   * @throws IOException if the JSON string is invalid with respect to Transfer129
   */
  public static Transfer129 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Transfer129.class);
  }

  /**
   * Convert an instance of Transfer129 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

