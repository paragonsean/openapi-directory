/*
 * TechPort
 * TechPort RESTful API
 *
 * The version of the OpenAPI document: 3.4.0
 * Contact: hq-techport@mail.nasa.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiProjectsFormatGet200Response;
import java.time.LocalDate;
import org.openapitools.client.model.Project;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return apiGetCall(_callback);

    }

    /**
     * 
     * Returns the swagger specification for the API.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public void apiGet() throws ApiException {
        apiGetWithHttpInfo();
    }

    /**
     * 
     * Returns the swagger specification for the API.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns the swagger specification for the API.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiProjectsFormatGet
     * @param updatedSince ISO 8601 full-date in the format YYYY-MM-DD. Filters the list of available ID values by their lastUpdated parameter. (required)
     * @param format The response type desired. (required)
     * @param format2 Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiProjectsFormatGetCall(LocalDate updatedSince, String format, String format2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/projects{.format}"
            .replace("{" + ".format" + "}", localVarApiClient.escapeString(format2.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updatedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedSince", updatedSince));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiProjectsFormatGetValidateBeforeCall(LocalDate updatedSince, String format, String format2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updatedSince' is set
        if (updatedSince == null) {
            throw new ApiException("Missing the required parameter 'updatedSince' when calling apiProjectsFormatGet(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling apiProjectsFormatGet(Async)");
        }

        // verify the required parameter 'format2' is set
        if (format2 == null) {
            throw new ApiException("Missing the required parameter 'format2' when calling apiProjectsFormatGet(Async)");
        }

        return apiProjectsFormatGetCall(updatedSince, format, format2, _callback);

    }

    /**
     * 
     * Returns a list of available technology project IDs.
     * @param updatedSince ISO 8601 full-date in the format YYYY-MM-DD. Filters the list of available ID values by their lastUpdated parameter. (required)
     * @param format The response type desired. (required)
     * @param format2 Automatically added (required)
     * @return ApiProjectsFormatGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiProjectsFormatGet200Response apiProjectsFormatGet(LocalDate updatedSince, String format, String format2) throws ApiException {
        ApiResponse<ApiProjectsFormatGet200Response> localVarResp = apiProjectsFormatGetWithHttpInfo(updatedSince, format, format2);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of available technology project IDs.
     * @param updatedSince ISO 8601 full-date in the format YYYY-MM-DD. Filters the list of available ID values by their lastUpdated parameter. (required)
     * @param format The response type desired. (required)
     * @param format2 Automatically added (required)
     * @return ApiResponse&lt;ApiProjectsFormatGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiProjectsFormatGet200Response> apiProjectsFormatGetWithHttpInfo(LocalDate updatedSince, String format, String format2) throws ApiException {
        okhttp3.Call localVarCall = apiProjectsFormatGetValidateBeforeCall(updatedSince, format, format2, null);
        Type localVarReturnType = new TypeToken<ApiProjectsFormatGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of available technology project IDs.
     * @param updatedSince ISO 8601 full-date in the format YYYY-MM-DD. Filters the list of available ID values by their lastUpdated parameter. (required)
     * @param format The response type desired. (required)
     * @param format2 Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiProjectsFormatGetAsync(LocalDate updatedSince, String format, String format2, final ApiCallback<ApiProjectsFormatGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiProjectsFormatGetValidateBeforeCall(updatedSince, format, format2, _callback);
        Type localVarReturnType = new TypeToken<ApiProjectsFormatGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiProjectsIdFormatGet
     * @param id ID of project to fetch (required)
     * @param format The response type desired. (required)
     * @param format2 Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiProjectsIdFormatGetCall(Long id, String format, String format2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/projects/{id}{.format}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + ".format" + "}", localVarApiClient.escapeString(format2.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiProjectsIdFormatGetValidateBeforeCall(Long id, String format, String format2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiProjectsIdFormatGet(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling apiProjectsIdFormatGet(Async)");
        }

        // verify the required parameter 'format2' is set
        if (format2 == null) {
            throw new ApiException("Missing the required parameter 'format2' when calling apiProjectsIdFormatGet(Async)");
        }

        return apiProjectsIdFormatGetCall(id, format, format2, _callback);

    }

    /**
     * 
     * Returns information about a specific technology project.
     * @param id ID of project to fetch (required)
     * @param format The response type desired. (required)
     * @param format2 Automatically added (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public Project apiProjectsIdFormatGet(Long id, String format, String format2) throws ApiException {
        ApiResponse<Project> localVarResp = apiProjectsIdFormatGetWithHttpInfo(id, format, format2);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about a specific technology project.
     * @param id ID of project to fetch (required)
     * @param format The response type desired. (required)
     * @param format2 Automatically added (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> apiProjectsIdFormatGetWithHttpInfo(Long id, String format, String format2) throws ApiException {
        okhttp3.Call localVarCall = apiProjectsIdFormatGetValidateBeforeCall(id, format, format2, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about a specific technology project.
     * @param id ID of project to fetch (required)
     * @param format The response type desired. (required)
     * @param format2 Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Object not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiProjectsIdFormatGetAsync(Long id, String format, String format2, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiProjectsIdFormatGetValidateBeforeCall(id, format, format2, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
