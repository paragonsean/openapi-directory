/*
 * TechPort
 * TechPort RESTful API
 *
 * The version of the OpenAPI document: 3.4.0
 * Contact: hq-techport@mail.nasa.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LibraryItem;
import org.openapitools.client.model.Organization;
import org.openapitools.client.model.TechnologyArea;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Top-level TechPort object representing a NASA technology project and its associated data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:26.760220-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Project {
  public static final String SERIALIZED_NAME_ACRONYM = "acronym";
  @SerializedName(SERIALIZED_NAME_ACRONYM)
  private String acronym;

  public static final String SERIALIZED_NAME_ADDITIONAL_TAS = "additionalTas";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_TAS)
  private List<TechnologyArea> additionalTas = new ArrayList<>();

  public static final String SERIALIZED_NAME_BENEFITS = "benefits";
  @SerializedName(SERIALIZED_NAME_BENEFITS)
  private String benefits;

  public static final String SERIALIZED_NAME_CLOSEOUT_DOCUMENTS = "closeoutDocuments";
  @SerializedName(SERIALIZED_NAME_CLOSEOUT_DOCUMENTS)
  private List<String> closeoutDocuments = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLOSEOUT_SUMMARY = "closeoutSummary";
  @SerializedName(SERIALIZED_NAME_CLOSEOUT_SUMMARY)
  private String closeoutSummary;

  public static final String SERIALIZED_NAME_CO_FUNDING_PARTNERS = "coFundingPartners";
  @SerializedName(SERIALIZED_NAME_CO_FUNDING_PARTNERS)
  private List<Organization> coFundingPartners = new ArrayList<>();

  public static final String SERIALIZED_NAME_CO_INVESTIGATORS = "coInvestigators";
  @SerializedName(SERIALIZED_NAME_CO_INVESTIGATORS)
  private List<String> coInvestigators = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DESTINATIONS = "destinations";
  @SerializedName(SERIALIZED_NAME_DESTINATIONS)
  private List<String> destinations = new ArrayList<>();

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private LocalDate lastUpdated;

  public static final String SERIALIZED_NAME_LEAD_ORGANIZATION = "leadOrganization";
  @SerializedName(SERIALIZED_NAME_LEAD_ORGANIZATION)
  private Organization leadOrganization;

  public static final String SERIALIZED_NAME_LIBRARY_ITEMS = "libraryItems";
  @SerializedName(SERIALIZED_NAME_LIBRARY_ITEMS)
  private List<LibraryItem> libraryItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIMARY_TAS = "primaryTas";
  @SerializedName(SERIALIZED_NAME_PRIMARY_TAS)
  private List<TechnologyArea> primaryTas = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRINCIPAL_INVESTIGATORS = "principalInvestigators";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_INVESTIGATORS)
  private List<String> principalInvestigators = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROGRAM_DIRECTORS = "programDirectors";
  @SerializedName(SERIALIZED_NAME_PROGRAM_DIRECTORS)
  private List<String> programDirectors = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROGRAM_MANAGERS = "programManagers";
  @SerializedName(SERIALIZED_NAME_PROGRAM_MANAGERS)
  private List<String> programManagers = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROJECT_MANAGERS = "projectManagers";
  @SerializedName(SERIALIZED_NAME_PROJECT_MANAGERS)
  private List<String> projectManagers = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESPONSIBLE_MISSION_DIRECTORATE_OR_OFFICE = "responsibleMissionDirectorateOrOffice";
  @SerializedName(SERIALIZED_NAME_RESPONSIBLE_MISSION_DIRECTORATE_OR_OFFICE)
  private String responsibleMissionDirectorateOrOffice;

  public static final String SERIALIZED_NAME_RESPONSIBLE_PROGRAM = "responsibleProgram";
  @SerializedName(SERIALIZED_NAME_RESPONSIBLE_PROGRAM)
  private String responsibleProgram;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUPPORTED_MISSION_TYPE = "supportedMissionType";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_MISSION_TYPE)
  private String supportedMissionType;

  public static final String SERIALIZED_NAME_SUPPORTING_ORGANIZATIONS = "supportingOrganizations";
  @SerializedName(SERIALIZED_NAME_SUPPORTING_ORGANIZATIONS)
  private List<Organization> supportingOrganizations = new ArrayList<>();

  public static final String SERIALIZED_NAME_TECHNOLOGY_MATURITY_CURRENT = "technologyMaturityCurrent";
  @SerializedName(SERIALIZED_NAME_TECHNOLOGY_MATURITY_CURRENT)
  private String technologyMaturityCurrent;

  public static final String SERIALIZED_NAME_TECHNOLOGY_MATURITY_END = "technologyMaturityEnd";
  @SerializedName(SERIALIZED_NAME_TECHNOLOGY_MATURITY_END)
  private String technologyMaturityEnd;

  public static final String SERIALIZED_NAME_TECHNOLOGY_MATURITY_START = "technologyMaturityStart";
  @SerializedName(SERIALIZED_NAME_TECHNOLOGY_MATURITY_START)
  private String technologyMaturityStart;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public static final String SERIALIZED_NAME_WORK_LOCATIONS = "workLocations";
  @SerializedName(SERIALIZED_NAME_WORK_LOCATIONS)
  private List<String> workLocations = new ArrayList<>();

  public Project() {
  }

  public Project acronym(String acronym) {
    this.acronym = acronym;
    return this;
  }

  /**
   * Abbreviated name of the project.
   * @return acronym
   */
  @javax.annotation.Nullable
  public String getAcronym() {
    return acronym;
  }

  public void setAcronym(String acronym) {
    this.acronym = acronym;
  }


  public Project additionalTas(List<TechnologyArea> additionalTas) {
    this.additionalTas = additionalTas;
    return this;
  }

  public Project addAdditionalTasItem(TechnologyArea additionalTasItem) {
    if (this.additionalTas == null) {
      this.additionalTas = new ArrayList<>();
    }
    this.additionalTas.add(additionalTasItem);
    return this;
  }

  /**
   * List of additional and cross-cutting technology areas associated with the project.
   * @return additionalTas
   */
  @javax.annotation.Nullable
  public List<TechnologyArea> getAdditionalTas() {
    return additionalTas;
  }

  public void setAdditionalTas(List<TechnologyArea> additionalTas) {
    this.additionalTas = additionalTas;
  }


  public Project benefits(String benefits) {
    this.benefits = benefits;
    return this;
  }

  /**
   * Describes the benefits offered to NASA funded and planned missions, unfunded or planned missions, commercial space industry, and to the nation.
   * @return benefits
   */
  @javax.annotation.Nullable
  public String getBenefits() {
    return benefits;
  }

  public void setBenefits(String benefits) {
    this.benefits = benefits;
  }


  public Project closeoutDocuments(List<String> closeoutDocuments) {
    this.closeoutDocuments = closeoutDocuments;
    return this;
  }

  public Project addCloseoutDocumentsItem(String closeoutDocumentsItem) {
    if (this.closeoutDocuments == null) {
      this.closeoutDocuments = new ArrayList<>();
    }
    this.closeoutDocuments.add(closeoutDocumentsItem);
    return this;
  }

  /**
   * List of document files or links to the project final report closeout documentation.
   * @return closeoutDocuments
   */
  @javax.annotation.Nullable
  public List<String> getCloseoutDocuments() {
    return closeoutDocuments;
  }

  public void setCloseoutDocuments(List<String> closeoutDocuments) {
    this.closeoutDocuments = closeoutDocuments;
  }


  public Project closeoutSummary(String closeoutSummary) {
    this.closeoutSummary = closeoutSummary;
    return this;
  }

  /**
   * The project closeout summary excerpt.
   * @return closeoutSummary
   */
  @javax.annotation.Nullable
  public String getCloseoutSummary() {
    return closeoutSummary;
  }

  public void setCloseoutSummary(String closeoutSummary) {
    this.closeoutSummary = closeoutSummary;
  }


  public Project coFundingPartners(List<Organization> coFundingPartners) {
    this.coFundingPartners = coFundingPartners;
    return this;
  }

  public Project addCoFundingPartnersItem(Organization coFundingPartnersItem) {
    if (this.coFundingPartners == null) {
      this.coFundingPartners = new ArrayList<>();
    }
    this.coFundingPartners.add(coFundingPartnersItem);
    return this;
  }

  /**
   * Other government agencies, NASA Mission Directoratres, universities, or commercial entities performing contributing resources to this project.
   * @return coFundingPartners
   */
  @javax.annotation.Nullable
  public List<Organization> getCoFundingPartners() {
    return coFundingPartners;
  }

  public void setCoFundingPartners(List<Organization> coFundingPartners) {
    this.coFundingPartners = coFundingPartners;
  }


  public Project coInvestigators(List<String> coInvestigators) {
    this.coInvestigators = coInvestigators;
    return this;
  }

  public Project addCoInvestigatorsItem(String coInvestigatorsItem) {
    if (this.coInvestigators == null) {
      this.coInvestigators = new ArrayList<>();
    }
    this.coInvestigators.add(coInvestigatorsItem);
    return this;
  }

  /**
   * Names of the additional investigators who are scientists or engineers for this project.
   * @return coInvestigators
   */
  @javax.annotation.Nullable
  public List<String> getCoInvestigators() {
    return coInvestigators;
  }

  public void setCoInvestigators(List<String> coInvestigators) {
    this.coInvestigators = coInvestigators;
  }


  public Project description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A detailed description of the project.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Project destinations(List<String> destinations) {
    this.destinations = destinations;
    return this;
  }

  public Project addDestinationsItem(String destinationsItem) {
    if (this.destinations == null) {
      this.destinations = new ArrayList<>();
    }
    this.destinations.add(destinationsItem);
    return this;
  }

  /**
   * List of the NASA destinations the technology on this project helps achieve.
   * @return destinations
   */
  @javax.annotation.Nullable
  public List<String> getDestinations() {
    return destinations;
  }

  public void setDestinations(List<String> destinations) {
    this.destinations = destinations;
  }


  public Project endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * The month and year the project is expected to complete its work.
   * @return endDate
   */
  @javax.annotation.Nullable
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public Project id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for the project.
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public Project lastUpdated(LocalDate lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * ISO 8601 full-date in the format YYYY-MM-DD describing the last time this project was updated.
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public LocalDate getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(LocalDate lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public Project leadOrganization(Organization leadOrganization) {
    this.leadOrganization = leadOrganization;
    return this;
  }

  /**
   * Get leadOrganization
   * @return leadOrganization
   */
  @javax.annotation.Nullable
  public Organization getLeadOrganization() {
    return leadOrganization;
  }

  public void setLeadOrganization(Organization leadOrganization) {
    this.leadOrganization = leadOrganization;
  }


  public Project libraryItems(List<LibraryItem> libraryItems) {
    this.libraryItems = libraryItems;
    return this;
  }

  public Project addLibraryItemsItem(LibraryItem libraryItemsItem) {
    if (this.libraryItems == null) {
      this.libraryItems = new ArrayList<>();
    }
    this.libraryItems.add(libraryItemsItem);
    return this;
  }

  /**
   * List of library items in the project library.
   * @return libraryItems
   */
  @javax.annotation.Nullable
  public List<LibraryItem> getLibraryItems() {
    return libraryItems;
  }

  public void setLibraryItems(List<LibraryItem> libraryItems) {
    this.libraryItems = libraryItems;
  }


  public Project primaryTas(List<TechnologyArea> primaryTas) {
    this.primaryTas = primaryTas;
    return this;
  }

  public Project addPrimaryTasItem(TechnologyArea primaryTasItem) {
    if (this.primaryTas == null) {
      this.primaryTas = new ArrayList<>();
    }
    this.primaryTas.add(primaryTasItem);
    return this;
  }

  /**
   * List of primary technolgy areas (from the NASA Technology Roadmap) associated with the project.
   * @return primaryTas
   */
  @javax.annotation.Nullable
  public List<TechnologyArea> getPrimaryTas() {
    return primaryTas;
  }

  public void setPrimaryTas(List<TechnologyArea> primaryTas) {
    this.primaryTas = primaryTas;
  }


  public Project principalInvestigators(List<String> principalInvestigators) {
    this.principalInvestigators = principalInvestigators;
    return this;
  }

  public Project addPrincipalInvestigatorsItem(String principalInvestigatorsItem) {
    if (this.principalInvestigators == null) {
      this.principalInvestigators = new ArrayList<>();
    }
    this.principalInvestigators.add(principalInvestigatorsItem);
    return this;
  }

  /**
   * Names of the Principal Investigators who are the lead scientists or engineers for this project.
   * @return principalInvestigators
   */
  @javax.annotation.Nullable
  public List<String> getPrincipalInvestigators() {
    return principalInvestigators;
  }

  public void setPrincipalInvestigators(List<String> principalInvestigators) {
    this.principalInvestigators = principalInvestigators;
  }


  public Project programDirectors(List<String> programDirectors) {
    this.programDirectors = programDirectors;
    return this;
  }

  public Project addProgramDirectorsItem(String programDirectorsItem) {
    if (this.programDirectors == null) {
      this.programDirectors = new ArrayList<>();
    }
    this.programDirectors.add(programDirectorsItem);
    return this;
  }

  /**
   * Names of the Program Directors responsible for the management of this project.
   * @return programDirectors
   */
  @javax.annotation.Nullable
  public List<String> getProgramDirectors() {
    return programDirectors;
  }

  public void setProgramDirectors(List<String> programDirectors) {
    this.programDirectors = programDirectors;
  }


  public Project programManagers(List<String> programManagers) {
    this.programManagers = programManagers;
    return this;
  }

  public Project addProgramManagersItem(String programManagersItem) {
    if (this.programManagers == null) {
      this.programManagers = new ArrayList<>();
    }
    this.programManagers.add(programManagersItem);
    return this;
  }

  /**
   * Names of the Program Managers responsible for the management of this project.
   * @return programManagers
   */
  @javax.annotation.Nullable
  public List<String> getProgramManagers() {
    return programManagers;
  }

  public void setProgramManagers(List<String> programManagers) {
    this.programManagers = programManagers;
  }


  public Project projectManagers(List<String> projectManagers) {
    this.projectManagers = projectManagers;
    return this;
  }

  public Project addProjectManagersItem(String projectManagersItem) {
    if (this.projectManagers == null) {
      this.projectManagers = new ArrayList<>();
    }
    this.projectManagers.add(projectManagersItem);
    return this;
  }

  /**
   * Names of the Project Managers responsible for the management of this project.
   * @return projectManagers
   */
  @javax.annotation.Nullable
  public List<String> getProjectManagers() {
    return projectManagers;
  }

  public void setProjectManagers(List<String> projectManagers) {
    this.projectManagers = projectManagers;
  }


  public Project responsibleMissionDirectorateOrOffice(String responsibleMissionDirectorateOrOffice) {
    this.responsibleMissionDirectorateOrOffice = responsibleMissionDirectorateOrOffice;
    return this;
  }

  /**
   * The NASA Mission Directorate or Office that is the primary funding source for this project.
   * @return responsibleMissionDirectorateOrOffice
   */
  @javax.annotation.Nullable
  public String getResponsibleMissionDirectorateOrOffice() {
    return responsibleMissionDirectorateOrOffice;
  }

  public void setResponsibleMissionDirectorateOrOffice(String responsibleMissionDirectorateOrOffice) {
    this.responsibleMissionDirectorateOrOffice = responsibleMissionDirectorateOrOffice;
  }


  public Project responsibleProgram(String responsibleProgram) {
    this.responsibleProgram = responsibleProgram;
    return this;
  }

  /**
   * The NASA program that is the primary funding source for this project.
   * @return responsibleProgram
   */
  @javax.annotation.Nullable
  public String getResponsibleProgram() {
    return responsibleProgram;
  }

  public void setResponsibleProgram(String responsibleProgram) {
    this.responsibleProgram = responsibleProgram;
  }


  public Project startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * The month and year the project was authorized to proceed.
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public Project status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Indicates whether the project is currently active, completed, or canceled.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Project supportedMissionType(String supportedMissionType) {
    this.supportedMissionType = supportedMissionType;
    return this;
  }

  /**
   * The supported mission type (Projected Mission, Planned Mission, or Pull).
   * @return supportedMissionType
   */
  @javax.annotation.Nullable
  public String getSupportedMissionType() {
    return supportedMissionType;
  }

  public void setSupportedMissionType(String supportedMissionType) {
    this.supportedMissionType = supportedMissionType;
  }


  public Project supportingOrganizations(List<Organization> supportingOrganizations) {
    this.supportingOrganizations = supportingOrganizations;
    return this;
  }

  public Project addSupportingOrganizationsItem(Organization supportingOrganizationsItem) {
    if (this.supportingOrganizations == null) {
      this.supportingOrganizations = new ArrayList<>();
    }
    this.supportingOrganizations.add(supportingOrganizationsItem);
    return this;
  }

  /**
   * The supporting organizations for this project that are conducting work on the project.
   * @return supportingOrganizations
   */
  @javax.annotation.Nullable
  public List<Organization> getSupportingOrganizations() {
    return supportingOrganizations;
  }

  public void setSupportingOrganizations(List<Organization> supportingOrganizations) {
    this.supportingOrganizations = supportingOrganizations;
  }


  public Project technologyMaturityCurrent(String technologyMaturityCurrent) {
    this.technologyMaturityCurrent = technologyMaturityCurrent;
    return this;
  }

  /**
   * The current technology maturity (technology readiness level) of the project.
   * @return technologyMaturityCurrent
   */
  @javax.annotation.Nullable
  public String getTechnologyMaturityCurrent() {
    return technologyMaturityCurrent;
  }

  public void setTechnologyMaturityCurrent(String technologyMaturityCurrent) {
    this.technologyMaturityCurrent = technologyMaturityCurrent;
  }


  public Project technologyMaturityEnd(String technologyMaturityEnd) {
    this.technologyMaturityEnd = technologyMaturityEnd;
    return this;
  }

  /**
   * The estimated technology maturity (technology readiness level) of the project at its end.
   * @return technologyMaturityEnd
   */
  @javax.annotation.Nullable
  public String getTechnologyMaturityEnd() {
    return technologyMaturityEnd;
  }

  public void setTechnologyMaturityEnd(String technologyMaturityEnd) {
    this.technologyMaturityEnd = technologyMaturityEnd;
  }


  public Project technologyMaturityStart(String technologyMaturityStart) {
    this.technologyMaturityStart = technologyMaturityStart;
    return this;
  }

  /**
   * The technology maturity (technology readiness level) of the project at its beginning.
   * @return technologyMaturityStart
   */
  @javax.annotation.Nullable
  public String getTechnologyMaturityStart() {
    return technologyMaturityStart;
  }

  public void setTechnologyMaturityStart(String technologyMaturityStart) {
    this.technologyMaturityStart = technologyMaturityStart;
  }


  public Project title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the project.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Project website(String website) {
    this.website = website;
    return this;
  }

  /**
   * The URL for the associated website.
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }


  public Project workLocations(List<String> workLocations) {
    this.workLocations = workLocations;
    return this;
  }

  public Project addWorkLocationsItem(String workLocationsItem) {
    if (this.workLocations == null) {
      this.workLocations = new ArrayList<>();
    }
    this.workLocations.add(workLocationsItem);
    return this;
  }

  /**
   * States and territories with people performing work on this project.
   * @return workLocations
   */
  @javax.annotation.Nullable
  public List<String> getWorkLocations() {
    return workLocations;
  }

  public void setWorkLocations(List<String> workLocations) {
    this.workLocations = workLocations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Project project = (Project) o;
    return Objects.equals(this.acronym, project.acronym) &&
        Objects.equals(this.additionalTas, project.additionalTas) &&
        Objects.equals(this.benefits, project.benefits) &&
        Objects.equals(this.closeoutDocuments, project.closeoutDocuments) &&
        Objects.equals(this.closeoutSummary, project.closeoutSummary) &&
        Objects.equals(this.coFundingPartners, project.coFundingPartners) &&
        Objects.equals(this.coInvestigators, project.coInvestigators) &&
        Objects.equals(this.description, project.description) &&
        Objects.equals(this.destinations, project.destinations) &&
        Objects.equals(this.endDate, project.endDate) &&
        Objects.equals(this.id, project.id) &&
        Objects.equals(this.lastUpdated, project.lastUpdated) &&
        Objects.equals(this.leadOrganization, project.leadOrganization) &&
        Objects.equals(this.libraryItems, project.libraryItems) &&
        Objects.equals(this.primaryTas, project.primaryTas) &&
        Objects.equals(this.principalInvestigators, project.principalInvestigators) &&
        Objects.equals(this.programDirectors, project.programDirectors) &&
        Objects.equals(this.programManagers, project.programManagers) &&
        Objects.equals(this.projectManagers, project.projectManagers) &&
        Objects.equals(this.responsibleMissionDirectorateOrOffice, project.responsibleMissionDirectorateOrOffice) &&
        Objects.equals(this.responsibleProgram, project.responsibleProgram) &&
        Objects.equals(this.startDate, project.startDate) &&
        Objects.equals(this.status, project.status) &&
        Objects.equals(this.supportedMissionType, project.supportedMissionType) &&
        Objects.equals(this.supportingOrganizations, project.supportingOrganizations) &&
        Objects.equals(this.technologyMaturityCurrent, project.technologyMaturityCurrent) &&
        Objects.equals(this.technologyMaturityEnd, project.technologyMaturityEnd) &&
        Objects.equals(this.technologyMaturityStart, project.technologyMaturityStart) &&
        Objects.equals(this.title, project.title) &&
        Objects.equals(this.website, project.website) &&
        Objects.equals(this.workLocations, project.workLocations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acronym, additionalTas, benefits, closeoutDocuments, closeoutSummary, coFundingPartners, coInvestigators, description, destinations, endDate, id, lastUpdated, leadOrganization, libraryItems, primaryTas, principalInvestigators, programDirectors, programManagers, projectManagers, responsibleMissionDirectorateOrOffice, responsibleProgram, startDate, status, supportedMissionType, supportingOrganizations, technologyMaturityCurrent, technologyMaturityEnd, technologyMaturityStart, title, website, workLocations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Project {\n");
    sb.append("    acronym: ").append(toIndentedString(acronym)).append("\n");
    sb.append("    additionalTas: ").append(toIndentedString(additionalTas)).append("\n");
    sb.append("    benefits: ").append(toIndentedString(benefits)).append("\n");
    sb.append("    closeoutDocuments: ").append(toIndentedString(closeoutDocuments)).append("\n");
    sb.append("    closeoutSummary: ").append(toIndentedString(closeoutSummary)).append("\n");
    sb.append("    coFundingPartners: ").append(toIndentedString(coFundingPartners)).append("\n");
    sb.append("    coInvestigators: ").append(toIndentedString(coInvestigators)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    leadOrganization: ").append(toIndentedString(leadOrganization)).append("\n");
    sb.append("    libraryItems: ").append(toIndentedString(libraryItems)).append("\n");
    sb.append("    primaryTas: ").append(toIndentedString(primaryTas)).append("\n");
    sb.append("    principalInvestigators: ").append(toIndentedString(principalInvestigators)).append("\n");
    sb.append("    programDirectors: ").append(toIndentedString(programDirectors)).append("\n");
    sb.append("    programManagers: ").append(toIndentedString(programManagers)).append("\n");
    sb.append("    projectManagers: ").append(toIndentedString(projectManagers)).append("\n");
    sb.append("    responsibleMissionDirectorateOrOffice: ").append(toIndentedString(responsibleMissionDirectorateOrOffice)).append("\n");
    sb.append("    responsibleProgram: ").append(toIndentedString(responsibleProgram)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    supportedMissionType: ").append(toIndentedString(supportedMissionType)).append("\n");
    sb.append("    supportingOrganizations: ").append(toIndentedString(supportingOrganizations)).append("\n");
    sb.append("    technologyMaturityCurrent: ").append(toIndentedString(technologyMaturityCurrent)).append("\n");
    sb.append("    technologyMaturityEnd: ").append(toIndentedString(technologyMaturityEnd)).append("\n");
    sb.append("    technologyMaturityStart: ").append(toIndentedString(technologyMaturityStart)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("    workLocations: ").append(toIndentedString(workLocations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acronym");
    openapiFields.add("additionalTas");
    openapiFields.add("benefits");
    openapiFields.add("closeoutDocuments");
    openapiFields.add("closeoutSummary");
    openapiFields.add("coFundingPartners");
    openapiFields.add("coInvestigators");
    openapiFields.add("description");
    openapiFields.add("destinations");
    openapiFields.add("endDate");
    openapiFields.add("id");
    openapiFields.add("lastUpdated");
    openapiFields.add("leadOrganization");
    openapiFields.add("libraryItems");
    openapiFields.add("primaryTas");
    openapiFields.add("principalInvestigators");
    openapiFields.add("programDirectors");
    openapiFields.add("programManagers");
    openapiFields.add("projectManagers");
    openapiFields.add("responsibleMissionDirectorateOrOffice");
    openapiFields.add("responsibleProgram");
    openapiFields.add("startDate");
    openapiFields.add("status");
    openapiFields.add("supportedMissionType");
    openapiFields.add("supportingOrganizations");
    openapiFields.add("technologyMaturityCurrent");
    openapiFields.add("technologyMaturityEnd");
    openapiFields.add("technologyMaturityStart");
    openapiFields.add("title");
    openapiFields.add("website");
    openapiFields.add("workLocations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Project
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Project.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Project is not found in the empty JSON string", Project.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Project.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Project` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acronym") != null && !jsonObj.get("acronym").isJsonNull()) && !jsonObj.get("acronym").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acronym` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acronym").toString()));
      }
      if (jsonObj.get("additionalTas") != null && !jsonObj.get("additionalTas").isJsonNull()) {
        JsonArray jsonArrayadditionalTas = jsonObj.getAsJsonArray("additionalTas");
        if (jsonArrayadditionalTas != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalTas").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalTas` to be an array in the JSON string but got `%s`", jsonObj.get("additionalTas").toString()));
          }

          // validate the optional field `additionalTas` (array)
          for (int i = 0; i < jsonArrayadditionalTas.size(); i++) {
            TechnologyArea.validateJsonElement(jsonArrayadditionalTas.get(i));
          };
        }
      }
      if ((jsonObj.get("benefits") != null && !jsonObj.get("benefits").isJsonNull()) && !jsonObj.get("benefits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `benefits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("benefits").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("closeoutDocuments") != null && !jsonObj.get("closeoutDocuments").isJsonNull() && !jsonObj.get("closeoutDocuments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `closeoutDocuments` to be an array in the JSON string but got `%s`", jsonObj.get("closeoutDocuments").toString()));
      }
      if ((jsonObj.get("closeoutSummary") != null && !jsonObj.get("closeoutSummary").isJsonNull()) && !jsonObj.get("closeoutSummary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closeoutSummary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closeoutSummary").toString()));
      }
      if (jsonObj.get("coFundingPartners") != null && !jsonObj.get("coFundingPartners").isJsonNull()) {
        JsonArray jsonArraycoFundingPartners = jsonObj.getAsJsonArray("coFundingPartners");
        if (jsonArraycoFundingPartners != null) {
          // ensure the json data is an array
          if (!jsonObj.get("coFundingPartners").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `coFundingPartners` to be an array in the JSON string but got `%s`", jsonObj.get("coFundingPartners").toString()));
          }

          // validate the optional field `coFundingPartners` (array)
          for (int i = 0; i < jsonArraycoFundingPartners.size(); i++) {
            Organization.validateJsonElement(jsonArraycoFundingPartners.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("coInvestigators") != null && !jsonObj.get("coInvestigators").isJsonNull() && !jsonObj.get("coInvestigators").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `coInvestigators` to be an array in the JSON string but got `%s`", jsonObj.get("coInvestigators").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("destinations") != null && !jsonObj.get("destinations").isJsonNull() && !jsonObj.get("destinations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinations` to be an array in the JSON string but got `%s`", jsonObj.get("destinations").toString()));
      }
      if ((jsonObj.get("endDate") != null && !jsonObj.get("endDate").isJsonNull()) && !jsonObj.get("endDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDate").toString()));
      }
      // validate the optional field `leadOrganization`
      if (jsonObj.get("leadOrganization") != null && !jsonObj.get("leadOrganization").isJsonNull()) {
        Organization.validateJsonElement(jsonObj.get("leadOrganization"));
      }
      if (jsonObj.get("libraryItems") != null && !jsonObj.get("libraryItems").isJsonNull()) {
        JsonArray jsonArraylibraryItems = jsonObj.getAsJsonArray("libraryItems");
        if (jsonArraylibraryItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("libraryItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `libraryItems` to be an array in the JSON string but got `%s`", jsonObj.get("libraryItems").toString()));
          }

          // validate the optional field `libraryItems` (array)
          for (int i = 0; i < jsonArraylibraryItems.size(); i++) {
            LibraryItem.validateJsonElement(jsonArraylibraryItems.get(i));
          };
        }
      }
      if (jsonObj.get("primaryTas") != null && !jsonObj.get("primaryTas").isJsonNull()) {
        JsonArray jsonArrayprimaryTas = jsonObj.getAsJsonArray("primaryTas");
        if (jsonArrayprimaryTas != null) {
          // ensure the json data is an array
          if (!jsonObj.get("primaryTas").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `primaryTas` to be an array in the JSON string but got `%s`", jsonObj.get("primaryTas").toString()));
          }

          // validate the optional field `primaryTas` (array)
          for (int i = 0; i < jsonArrayprimaryTas.size(); i++) {
            TechnologyArea.validateJsonElement(jsonArrayprimaryTas.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("principalInvestigators") != null && !jsonObj.get("principalInvestigators").isJsonNull() && !jsonObj.get("principalInvestigators").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `principalInvestigators` to be an array in the JSON string but got `%s`", jsonObj.get("principalInvestigators").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("programDirectors") != null && !jsonObj.get("programDirectors").isJsonNull() && !jsonObj.get("programDirectors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `programDirectors` to be an array in the JSON string but got `%s`", jsonObj.get("programDirectors").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("programManagers") != null && !jsonObj.get("programManagers").isJsonNull() && !jsonObj.get("programManagers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `programManagers` to be an array in the JSON string but got `%s`", jsonObj.get("programManagers").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("projectManagers") != null && !jsonObj.get("projectManagers").isJsonNull() && !jsonObj.get("projectManagers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectManagers` to be an array in the JSON string but got `%s`", jsonObj.get("projectManagers").toString()));
      }
      if ((jsonObj.get("responsibleMissionDirectorateOrOffice") != null && !jsonObj.get("responsibleMissionDirectorateOrOffice").isJsonNull()) && !jsonObj.get("responsibleMissionDirectorateOrOffice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responsibleMissionDirectorateOrOffice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responsibleMissionDirectorateOrOffice").toString()));
      }
      if ((jsonObj.get("responsibleProgram") != null && !jsonObj.get("responsibleProgram").isJsonNull()) && !jsonObj.get("responsibleProgram").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responsibleProgram` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responsibleProgram").toString()));
      }
      if ((jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull()) && !jsonObj.get("startDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDate").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("supportedMissionType") != null && !jsonObj.get("supportedMissionType").isJsonNull()) && !jsonObj.get("supportedMissionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedMissionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supportedMissionType").toString()));
      }
      if (jsonObj.get("supportingOrganizations") != null && !jsonObj.get("supportingOrganizations").isJsonNull()) {
        JsonArray jsonArraysupportingOrganizations = jsonObj.getAsJsonArray("supportingOrganizations");
        if (jsonArraysupportingOrganizations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("supportingOrganizations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `supportingOrganizations` to be an array in the JSON string but got `%s`", jsonObj.get("supportingOrganizations").toString()));
          }

          // validate the optional field `supportingOrganizations` (array)
          for (int i = 0; i < jsonArraysupportingOrganizations.size(); i++) {
            Organization.validateJsonElement(jsonArraysupportingOrganizations.get(i));
          };
        }
      }
      if ((jsonObj.get("technologyMaturityCurrent") != null && !jsonObj.get("technologyMaturityCurrent").isJsonNull()) && !jsonObj.get("technologyMaturityCurrent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `technologyMaturityCurrent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("technologyMaturityCurrent").toString()));
      }
      if ((jsonObj.get("technologyMaturityEnd") != null && !jsonObj.get("technologyMaturityEnd").isJsonNull()) && !jsonObj.get("technologyMaturityEnd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `technologyMaturityEnd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("technologyMaturityEnd").toString()));
      }
      if ((jsonObj.get("technologyMaturityStart") != null && !jsonObj.get("technologyMaturityStart").isJsonNull()) && !jsonObj.get("technologyMaturityStart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `technologyMaturityStart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("technologyMaturityStart").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("workLocations") != null && !jsonObj.get("workLocations").isJsonNull() && !jsonObj.get("workLocations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `workLocations` to be an array in the JSON string but got `%s`", jsonObj.get("workLocations").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Project.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Project' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Project> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Project.class));

       return (TypeAdapter<T>) new TypeAdapter<Project>() {
           @Override
           public void write(JsonWriter out, Project value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Project read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Project given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Project
   * @throws IOException if the JSON string is invalid with respect to Project
   */
  public static Project fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Project.class);
  }

  /**
   * Convert an instance of Project to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

