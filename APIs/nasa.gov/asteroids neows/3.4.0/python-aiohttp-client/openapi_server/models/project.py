# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.library_item import LibraryItem
from openapi_server.models.organization import Organization
from openapi_server.models.technology_area import TechnologyArea
from openapi_server import util


class Project(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acronym: str=None, additional_tas: List[TechnologyArea]=None, benefits: str=None, closeout_documents: List[str]=None, closeout_summary: str=None, co_funding_partners: List[Organization]=None, co_investigators: List[str]=None, description: str=None, destinations: List[str]=None, end_date: str=None, id: int=None, last_updated: date=None, lead_organization: Organization=None, library_items: List[LibraryItem]=None, primary_tas: List[TechnologyArea]=None, principal_investigators: List[str]=None, program_directors: List[str]=None, program_managers: List[str]=None, project_managers: List[str]=None, responsible_mission_directorate_or_office: str=None, responsible_program: str=None, start_date: str=None, status: str=None, supported_mission_type: str=None, supporting_organizations: List[Organization]=None, technology_maturity_current: str=None, technology_maturity_end: str=None, technology_maturity_start: str=None, title: str=None, website: str=None, work_locations: List[str]=None):
        """Project - a model defined in OpenAPI

        :param acronym: The acronym of this Project.
        :param additional_tas: The additional_tas of this Project.
        :param benefits: The benefits of this Project.
        :param closeout_documents: The closeout_documents of this Project.
        :param closeout_summary: The closeout_summary of this Project.
        :param co_funding_partners: The co_funding_partners of this Project.
        :param co_investigators: The co_investigators of this Project.
        :param description: The description of this Project.
        :param destinations: The destinations of this Project.
        :param end_date: The end_date of this Project.
        :param id: The id of this Project.
        :param last_updated: The last_updated of this Project.
        :param lead_organization: The lead_organization of this Project.
        :param library_items: The library_items of this Project.
        :param primary_tas: The primary_tas of this Project.
        :param principal_investigators: The principal_investigators of this Project.
        :param program_directors: The program_directors of this Project.
        :param program_managers: The program_managers of this Project.
        :param project_managers: The project_managers of this Project.
        :param responsible_mission_directorate_or_office: The responsible_mission_directorate_or_office of this Project.
        :param responsible_program: The responsible_program of this Project.
        :param start_date: The start_date of this Project.
        :param status: The status of this Project.
        :param supported_mission_type: The supported_mission_type of this Project.
        :param supporting_organizations: The supporting_organizations of this Project.
        :param technology_maturity_current: The technology_maturity_current of this Project.
        :param technology_maturity_end: The technology_maturity_end of this Project.
        :param technology_maturity_start: The technology_maturity_start of this Project.
        :param title: The title of this Project.
        :param website: The website of this Project.
        :param work_locations: The work_locations of this Project.
        """
        self.openapi_types = {
            'acronym': str,
            'additional_tas': List[TechnologyArea],
            'benefits': str,
            'closeout_documents': List[str],
            'closeout_summary': str,
            'co_funding_partners': List[Organization],
            'co_investigators': List[str],
            'description': str,
            'destinations': List[str],
            'end_date': str,
            'id': int,
            'last_updated': date,
            'lead_organization': Organization,
            'library_items': List[LibraryItem],
            'primary_tas': List[TechnologyArea],
            'principal_investigators': List[str],
            'program_directors': List[str],
            'program_managers': List[str],
            'project_managers': List[str],
            'responsible_mission_directorate_or_office': str,
            'responsible_program': str,
            'start_date': str,
            'status': str,
            'supported_mission_type': str,
            'supporting_organizations': List[Organization],
            'technology_maturity_current': str,
            'technology_maturity_end': str,
            'technology_maturity_start': str,
            'title': str,
            'website': str,
            'work_locations': List[str]
        }

        self.attribute_map = {
            'acronym': 'acronym',
            'additional_tas': 'additionalTas',
            'benefits': 'benefits',
            'closeout_documents': 'closeoutDocuments',
            'closeout_summary': 'closeoutSummary',
            'co_funding_partners': 'coFundingPartners',
            'co_investigators': 'coInvestigators',
            'description': 'description',
            'destinations': 'destinations',
            'end_date': 'endDate',
            'id': 'id',
            'last_updated': 'lastUpdated',
            'lead_organization': 'leadOrganization',
            'library_items': 'libraryItems',
            'primary_tas': 'primaryTas',
            'principal_investigators': 'principalInvestigators',
            'program_directors': 'programDirectors',
            'program_managers': 'programManagers',
            'project_managers': 'projectManagers',
            'responsible_mission_directorate_or_office': 'responsibleMissionDirectorateOrOffice',
            'responsible_program': 'responsibleProgram',
            'start_date': 'startDate',
            'status': 'status',
            'supported_mission_type': 'supportedMissionType',
            'supporting_organizations': 'supportingOrganizations',
            'technology_maturity_current': 'technologyMaturityCurrent',
            'technology_maturity_end': 'technologyMaturityEnd',
            'technology_maturity_start': 'technologyMaturityStart',
            'title': 'title',
            'website': 'website',
            'work_locations': 'workLocations'
        }

        self._acronym = acronym
        self._additional_tas = additional_tas
        self._benefits = benefits
        self._closeout_documents = closeout_documents
        self._closeout_summary = closeout_summary
        self._co_funding_partners = co_funding_partners
        self._co_investigators = co_investigators
        self._description = description
        self._destinations = destinations
        self._end_date = end_date
        self._id = id
        self._last_updated = last_updated
        self._lead_organization = lead_organization
        self._library_items = library_items
        self._primary_tas = primary_tas
        self._principal_investigators = principal_investigators
        self._program_directors = program_directors
        self._program_managers = program_managers
        self._project_managers = project_managers
        self._responsible_mission_directorate_or_office = responsible_mission_directorate_or_office
        self._responsible_program = responsible_program
        self._start_date = start_date
        self._status = status
        self._supported_mission_type = supported_mission_type
        self._supporting_organizations = supporting_organizations
        self._technology_maturity_current = technology_maturity_current
        self._technology_maturity_end = technology_maturity_end
        self._technology_maturity_start = technology_maturity_start
        self._title = title
        self._website = website
        self._work_locations = work_locations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Project':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The project of this Project.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acronym(self):
        """Gets the acronym of this Project.

        Abbreviated name of the project.

        :return: The acronym of this Project.
        :rtype: str
        """
        return self._acronym

    @acronym.setter
    def acronym(self, acronym):
        """Sets the acronym of this Project.

        Abbreviated name of the project.

        :param acronym: The acronym of this Project.
        :type acronym: str
        """

        self._acronym = acronym

    @property
    def additional_tas(self):
        """Gets the additional_tas of this Project.

        List of additional and cross-cutting technology areas associated with the project.

        :return: The additional_tas of this Project.
        :rtype: List[TechnologyArea]
        """
        return self._additional_tas

    @additional_tas.setter
    def additional_tas(self, additional_tas):
        """Sets the additional_tas of this Project.

        List of additional and cross-cutting technology areas associated with the project.

        :param additional_tas: The additional_tas of this Project.
        :type additional_tas: List[TechnologyArea]
        """

        self._additional_tas = additional_tas

    @property
    def benefits(self):
        """Gets the benefits of this Project.

        Describes the benefits offered to NASA funded and planned missions, unfunded or planned missions, commercial space industry, and to the nation.

        :return: The benefits of this Project.
        :rtype: str
        """
        return self._benefits

    @benefits.setter
    def benefits(self, benefits):
        """Sets the benefits of this Project.

        Describes the benefits offered to NASA funded and planned missions, unfunded or planned missions, commercial space industry, and to the nation.

        :param benefits: The benefits of this Project.
        :type benefits: str
        """

        self._benefits = benefits

    @property
    def closeout_documents(self):
        """Gets the closeout_documents of this Project.

        List of document files or links to the project final report closeout documentation.

        :return: The closeout_documents of this Project.
        :rtype: List[str]
        """
        return self._closeout_documents

    @closeout_documents.setter
    def closeout_documents(self, closeout_documents):
        """Sets the closeout_documents of this Project.

        List of document files or links to the project final report closeout documentation.

        :param closeout_documents: The closeout_documents of this Project.
        :type closeout_documents: List[str]
        """

        self._closeout_documents = closeout_documents

    @property
    def closeout_summary(self):
        """Gets the closeout_summary of this Project.

        The project closeout summary excerpt.

        :return: The closeout_summary of this Project.
        :rtype: str
        """
        return self._closeout_summary

    @closeout_summary.setter
    def closeout_summary(self, closeout_summary):
        """Sets the closeout_summary of this Project.

        The project closeout summary excerpt.

        :param closeout_summary: The closeout_summary of this Project.
        :type closeout_summary: str
        """

        self._closeout_summary = closeout_summary

    @property
    def co_funding_partners(self):
        """Gets the co_funding_partners of this Project.

        Other government agencies, NASA Mission Directoratres, universities, or commercial entities performing contributing resources to this project.

        :return: The co_funding_partners of this Project.
        :rtype: List[Organization]
        """
        return self._co_funding_partners

    @co_funding_partners.setter
    def co_funding_partners(self, co_funding_partners):
        """Sets the co_funding_partners of this Project.

        Other government agencies, NASA Mission Directoratres, universities, or commercial entities performing contributing resources to this project.

        :param co_funding_partners: The co_funding_partners of this Project.
        :type co_funding_partners: List[Organization]
        """

        self._co_funding_partners = co_funding_partners

    @property
    def co_investigators(self):
        """Gets the co_investigators of this Project.

        Names of the additional investigators who are scientists or engineers for this project.

        :return: The co_investigators of this Project.
        :rtype: List[str]
        """
        return self._co_investigators

    @co_investigators.setter
    def co_investigators(self, co_investigators):
        """Sets the co_investigators of this Project.

        Names of the additional investigators who are scientists or engineers for this project.

        :param co_investigators: The co_investigators of this Project.
        :type co_investigators: List[str]
        """

        self._co_investigators = co_investigators

    @property
    def description(self):
        """Gets the description of this Project.

        A detailed description of the project.

        :return: The description of this Project.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Project.

        A detailed description of the project.

        :param description: The description of this Project.
        :type description: str
        """

        self._description = description

    @property
    def destinations(self):
        """Gets the destinations of this Project.

        List of the NASA destinations the technology on this project helps achieve.

        :return: The destinations of this Project.
        :rtype: List[str]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this Project.

        List of the NASA destinations the technology on this project helps achieve.

        :param destinations: The destinations of this Project.
        :type destinations: List[str]
        """

        self._destinations = destinations

    @property
    def end_date(self):
        """Gets the end_date of this Project.

        The month and year the project is expected to complete its work.

        :return: The end_date of this Project.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Project.

        The month and year the project is expected to complete its work.

        :param end_date: The end_date of this Project.
        :type end_date: str
        """

        self._end_date = end_date

    @property
    def id(self):
        """Gets the id of this Project.

        Unique identifier for the project.

        :return: The id of this Project.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.

        Unique identifier for the project.

        :param id: The id of this Project.
        :type id: int
        """

        self._id = id

    @property
    def last_updated(self):
        """Gets the last_updated of this Project.

        ISO 8601 full-date in the format YYYY-MM-DD describing the last time this project was updated.

        :return: The last_updated of this Project.
        :rtype: date
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Project.

        ISO 8601 full-date in the format YYYY-MM-DD describing the last time this project was updated.

        :param last_updated: The last_updated of this Project.
        :type last_updated: date
        """

        self._last_updated = last_updated

    @property
    def lead_organization(self):
        """Gets the lead_organization of this Project.


        :return: The lead_organization of this Project.
        :rtype: Organization
        """
        return self._lead_organization

    @lead_organization.setter
    def lead_organization(self, lead_organization):
        """Sets the lead_organization of this Project.


        :param lead_organization: The lead_organization of this Project.
        :type lead_organization: Organization
        """

        self._lead_organization = lead_organization

    @property
    def library_items(self):
        """Gets the library_items of this Project.

        List of library items in the project library.

        :return: The library_items of this Project.
        :rtype: List[LibraryItem]
        """
        return self._library_items

    @library_items.setter
    def library_items(self, library_items):
        """Sets the library_items of this Project.

        List of library items in the project library.

        :param library_items: The library_items of this Project.
        :type library_items: List[LibraryItem]
        """

        self._library_items = library_items

    @property
    def primary_tas(self):
        """Gets the primary_tas of this Project.

        List of primary technolgy areas (from the NASA Technology Roadmap) associated with the project.

        :return: The primary_tas of this Project.
        :rtype: List[TechnologyArea]
        """
        return self._primary_tas

    @primary_tas.setter
    def primary_tas(self, primary_tas):
        """Sets the primary_tas of this Project.

        List of primary technolgy areas (from the NASA Technology Roadmap) associated with the project.

        :param primary_tas: The primary_tas of this Project.
        :type primary_tas: List[TechnologyArea]
        """

        self._primary_tas = primary_tas

    @property
    def principal_investigators(self):
        """Gets the principal_investigators of this Project.

        Names of the Principal Investigators who are the lead scientists or engineers for this project.

        :return: The principal_investigators of this Project.
        :rtype: List[str]
        """
        return self._principal_investigators

    @principal_investigators.setter
    def principal_investigators(self, principal_investigators):
        """Sets the principal_investigators of this Project.

        Names of the Principal Investigators who are the lead scientists or engineers for this project.

        :param principal_investigators: The principal_investigators of this Project.
        :type principal_investigators: List[str]
        """

        self._principal_investigators = principal_investigators

    @property
    def program_directors(self):
        """Gets the program_directors of this Project.

        Names of the Program Directors responsible for the management of this project.

        :return: The program_directors of this Project.
        :rtype: List[str]
        """
        return self._program_directors

    @program_directors.setter
    def program_directors(self, program_directors):
        """Sets the program_directors of this Project.

        Names of the Program Directors responsible for the management of this project.

        :param program_directors: The program_directors of this Project.
        :type program_directors: List[str]
        """

        self._program_directors = program_directors

    @property
    def program_managers(self):
        """Gets the program_managers of this Project.

        Names of the Program Managers responsible for the management of this project.

        :return: The program_managers of this Project.
        :rtype: List[str]
        """
        return self._program_managers

    @program_managers.setter
    def program_managers(self, program_managers):
        """Sets the program_managers of this Project.

        Names of the Program Managers responsible for the management of this project.

        :param program_managers: The program_managers of this Project.
        :type program_managers: List[str]
        """

        self._program_managers = program_managers

    @property
    def project_managers(self):
        """Gets the project_managers of this Project.

        Names of the Project Managers responsible for the management of this project.

        :return: The project_managers of this Project.
        :rtype: List[str]
        """
        return self._project_managers

    @project_managers.setter
    def project_managers(self, project_managers):
        """Sets the project_managers of this Project.

        Names of the Project Managers responsible for the management of this project.

        :param project_managers: The project_managers of this Project.
        :type project_managers: List[str]
        """

        self._project_managers = project_managers

    @property
    def responsible_mission_directorate_or_office(self):
        """Gets the responsible_mission_directorate_or_office of this Project.

        The NASA Mission Directorate or Office that is the primary funding source for this project.

        :return: The responsible_mission_directorate_or_office of this Project.
        :rtype: str
        """
        return self._responsible_mission_directorate_or_office

    @responsible_mission_directorate_or_office.setter
    def responsible_mission_directorate_or_office(self, responsible_mission_directorate_or_office):
        """Sets the responsible_mission_directorate_or_office of this Project.

        The NASA Mission Directorate or Office that is the primary funding source for this project.

        :param responsible_mission_directorate_or_office: The responsible_mission_directorate_or_office of this Project.
        :type responsible_mission_directorate_or_office: str
        """

        self._responsible_mission_directorate_or_office = responsible_mission_directorate_or_office

    @property
    def responsible_program(self):
        """Gets the responsible_program of this Project.

        The NASA program that is the primary funding source for this project.

        :return: The responsible_program of this Project.
        :rtype: str
        """
        return self._responsible_program

    @responsible_program.setter
    def responsible_program(self, responsible_program):
        """Sets the responsible_program of this Project.

        The NASA program that is the primary funding source for this project.

        :param responsible_program: The responsible_program of this Project.
        :type responsible_program: str
        """

        self._responsible_program = responsible_program

    @property
    def start_date(self):
        """Gets the start_date of this Project.

        The month and year the project was authorized to proceed.

        :return: The start_date of this Project.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Project.

        The month and year the project was authorized to proceed.

        :param start_date: The start_date of this Project.
        :type start_date: str
        """

        self._start_date = start_date

    @property
    def status(self):
        """Gets the status of this Project.

        Indicates whether the project is currently active, completed, or canceled.

        :return: The status of this Project.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Project.

        Indicates whether the project is currently active, completed, or canceled.

        :param status: The status of this Project.
        :type status: str
        """

        self._status = status

    @property
    def supported_mission_type(self):
        """Gets the supported_mission_type of this Project.

        The supported mission type (Projected Mission, Planned Mission, or Pull).

        :return: The supported_mission_type of this Project.
        :rtype: str
        """
        return self._supported_mission_type

    @supported_mission_type.setter
    def supported_mission_type(self, supported_mission_type):
        """Sets the supported_mission_type of this Project.

        The supported mission type (Projected Mission, Planned Mission, or Pull).

        :param supported_mission_type: The supported_mission_type of this Project.
        :type supported_mission_type: str
        """

        self._supported_mission_type = supported_mission_type

    @property
    def supporting_organizations(self):
        """Gets the supporting_organizations of this Project.

        The supporting organizations for this project that are conducting work on the project.

        :return: The supporting_organizations of this Project.
        :rtype: List[Organization]
        """
        return self._supporting_organizations

    @supporting_organizations.setter
    def supporting_organizations(self, supporting_organizations):
        """Sets the supporting_organizations of this Project.

        The supporting organizations for this project that are conducting work on the project.

        :param supporting_organizations: The supporting_organizations of this Project.
        :type supporting_organizations: List[Organization]
        """

        self._supporting_organizations = supporting_organizations

    @property
    def technology_maturity_current(self):
        """Gets the technology_maturity_current of this Project.

        The current technology maturity (technology readiness level) of the project.

        :return: The technology_maturity_current of this Project.
        :rtype: str
        """
        return self._technology_maturity_current

    @technology_maturity_current.setter
    def technology_maturity_current(self, technology_maturity_current):
        """Sets the technology_maturity_current of this Project.

        The current technology maturity (technology readiness level) of the project.

        :param technology_maturity_current: The technology_maturity_current of this Project.
        :type technology_maturity_current: str
        """

        self._technology_maturity_current = technology_maturity_current

    @property
    def technology_maturity_end(self):
        """Gets the technology_maturity_end of this Project.

        The estimated technology maturity (technology readiness level) of the project at its end.

        :return: The technology_maturity_end of this Project.
        :rtype: str
        """
        return self._technology_maturity_end

    @technology_maturity_end.setter
    def technology_maturity_end(self, technology_maturity_end):
        """Sets the technology_maturity_end of this Project.

        The estimated technology maturity (technology readiness level) of the project at its end.

        :param technology_maturity_end: The technology_maturity_end of this Project.
        :type technology_maturity_end: str
        """

        self._technology_maturity_end = technology_maturity_end

    @property
    def technology_maturity_start(self):
        """Gets the technology_maturity_start of this Project.

        The technology maturity (technology readiness level) of the project at its beginning.

        :return: The technology_maturity_start of this Project.
        :rtype: str
        """
        return self._technology_maturity_start

    @technology_maturity_start.setter
    def technology_maturity_start(self, technology_maturity_start):
        """Sets the technology_maturity_start of this Project.

        The technology maturity (technology readiness level) of the project at its beginning.

        :param technology_maturity_start: The technology_maturity_start of this Project.
        :type technology_maturity_start: str
        """

        self._technology_maturity_start = technology_maturity_start

    @property
    def title(self):
        """Gets the title of this Project.

        Title of the project.

        :return: The title of this Project.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Project.

        Title of the project.

        :param title: The title of this Project.
        :type title: str
        """

        self._title = title

    @property
    def website(self):
        """Gets the website of this Project.

        The URL for the associated website.

        :return: The website of this Project.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Project.

        The URL for the associated website.

        :param website: The website of this Project.
        :type website: str
        """

        self._website = website

    @property
    def work_locations(self):
        """Gets the work_locations of this Project.

        States and territories with people performing work on this project.

        :return: The work_locations of this Project.
        :rtype: List[str]
        """
        return self._work_locations

    @work_locations.setter
    def work_locations(self, work_locations):
        """Sets the work_locations of this Project.

        States and territories with people performing work on this project.

        :param work_locations: The work_locations of this Project.
        :type work_locations: List[str]
        """

        self._work_locations = work_locations
