/**
 * TechPort
 * TechPort RESTful API
 *
 * The version of the OpenAPI document: 3.4.0
 * Contact: hq-techport@mail.nasa.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LibraryItem model module.
 * @module model/LibraryItem
 * @version 3.4.0
 */
class LibraryItem {
    /**
     * Constructs a new <code>LibraryItem</code>.
     * Represents a specific library item that is part of this project.
     * @alias module:model/LibraryItem
     */
    constructor() { 
        
        LibraryItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LibraryItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LibraryItem} obj Optional instance to populate.
     * @return {module:model/LibraryItem} The populated <code>LibraryItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LibraryItem();

            if (data.hasOwnProperty('completionDate')) {
                obj['completionDate'] = ApiClient.convertToType(data['completionDate'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('externalUrl')) {
                obj['externalUrl'] = ApiClient.convertToType(data['externalUrl'], 'String');
            }
            if (data.hasOwnProperty('files')) {
                obj['files'] = ApiClient.convertToType(data['files'], [File]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('publishedBy')) {
                obj['publishedBy'] = ApiClient.convertToType(data['publishedBy'], 'String');
            }
            if (data.hasOwnProperty('publishedDate')) {
                obj['publishedDate'] = ApiClient.convertToType(data['publishedDate'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LibraryItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LibraryItem</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['completionDate'] && !(typeof data['completionDate'] === 'string' || data['completionDate'] instanceof String)) {
            throw new Error("Expected the field `completionDate` to be a primitive type in the JSON string but got " + data['completionDate']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['externalUrl'] && !(typeof data['externalUrl'] === 'string' || data['externalUrl'] instanceof String)) {
            throw new Error("Expected the field `externalUrl` to be a primitive type in the JSON string but got " + data['externalUrl']);
        }
        if (data['files']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['files'])) {
                throw new Error("Expected the field `files` to be an array in the JSON data but got " + data['files']);
            }
            // validate the optional field `files` (array)
            for (const item of data['files']) {
                File.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['publishedBy'] && !(typeof data['publishedBy'] === 'string' || data['publishedBy'] instanceof String)) {
            throw new Error("Expected the field `publishedBy` to be a primitive type in the JSON string but got " + data['publishedBy']);
        }
        // ensure the json data is a string
        if (data['publishedDate'] && !(typeof data['publishedDate'] === 'string' || data['publishedDate'] instanceof String)) {
            throw new Error("Expected the field `publishedDate` to be a primitive type in the JSON string but got " + data['publishedDate']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Date the library item was completed.
 * @member {String} completionDate
 */
LibraryItem.prototype['completionDate'] = undefined;

/**
 * Description of the library item.
 * @member {String} description
 */
LibraryItem.prototype['description'] = undefined;

/**
 * External URL for the library item.
 * @member {String} externalUrl
 */
LibraryItem.prototype['externalUrl'] = undefined;

/**
 * List of files associated with the library item.
 * @member {Array.<File>} files
 */
LibraryItem.prototype['files'] = undefined;

/**
 * Unique identifier for the library item.
 * @member {Number} id
 */
LibraryItem.prototype['id'] = undefined;

/**
 * Publisher of the library item.
 * @member {String} publishedBy
 */
LibraryItem.prototype['publishedBy'] = undefined;

/**
 * Date the library item was published.
 * @member {String} publishedDate
 */
LibraryItem.prototype['publishedDate'] = undefined;

/**
 * Title of the library item
 * @member {String} title
 */
LibraryItem.prototype['title'] = undefined;

/**
 * Identifies the type of library item, e.g. Image
 * @member {String} type
 */
LibraryItem.prototype['type'] = undefined;






export default LibraryItem;

