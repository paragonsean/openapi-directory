/**
 * TechPort
 * TechPort RESTful API
 *
 * The version of the OpenAPI document: 3.4.0
 * Contact: hq-techport@mail.nasa.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LibraryItem from './LibraryItem';
import Organization from './Organization';
import TechnologyArea from './TechnologyArea';

/**
 * The Project model module.
 * @module model/Project
 * @version 3.4.0
 */
class Project {
    /**
     * Constructs a new <code>Project</code>.
     * Top-level TechPort object representing a NASA technology project and its associated data.
     * @alias module:model/Project
     */
    constructor() { 
        
        Project.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Project</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Project} obj Optional instance to populate.
     * @return {module:model/Project} The populated <code>Project</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Project();

            if (data.hasOwnProperty('acronym')) {
                obj['acronym'] = ApiClient.convertToType(data['acronym'], 'String');
            }
            if (data.hasOwnProperty('additionalTas')) {
                obj['additionalTas'] = ApiClient.convertToType(data['additionalTas'], [TechnologyArea]);
            }
            if (data.hasOwnProperty('benefits')) {
                obj['benefits'] = ApiClient.convertToType(data['benefits'], 'String');
            }
            if (data.hasOwnProperty('closeoutDocuments')) {
                obj['closeoutDocuments'] = ApiClient.convertToType(data['closeoutDocuments'], ['String']);
            }
            if (data.hasOwnProperty('closeoutSummary')) {
                obj['closeoutSummary'] = ApiClient.convertToType(data['closeoutSummary'], 'String');
            }
            if (data.hasOwnProperty('coFundingPartners')) {
                obj['coFundingPartners'] = ApiClient.convertToType(data['coFundingPartners'], [Organization]);
            }
            if (data.hasOwnProperty('coInvestigators')) {
                obj['coInvestigators'] = ApiClient.convertToType(data['coInvestigators'], ['String']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('destinations')) {
                obj['destinations'] = ApiClient.convertToType(data['destinations'], ['String']);
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Date');
            }
            if (data.hasOwnProperty('leadOrganization')) {
                obj['leadOrganization'] = Organization.constructFromObject(data['leadOrganization']);
            }
            if (data.hasOwnProperty('libraryItems')) {
                obj['libraryItems'] = ApiClient.convertToType(data['libraryItems'], [LibraryItem]);
            }
            if (data.hasOwnProperty('primaryTas')) {
                obj['primaryTas'] = ApiClient.convertToType(data['primaryTas'], [TechnologyArea]);
            }
            if (data.hasOwnProperty('principalInvestigators')) {
                obj['principalInvestigators'] = ApiClient.convertToType(data['principalInvestigators'], ['String']);
            }
            if (data.hasOwnProperty('programDirectors')) {
                obj['programDirectors'] = ApiClient.convertToType(data['programDirectors'], ['String']);
            }
            if (data.hasOwnProperty('programManagers')) {
                obj['programManagers'] = ApiClient.convertToType(data['programManagers'], ['String']);
            }
            if (data.hasOwnProperty('projectManagers')) {
                obj['projectManagers'] = ApiClient.convertToType(data['projectManagers'], ['String']);
            }
            if (data.hasOwnProperty('responsibleMissionDirectorateOrOffice')) {
                obj['responsibleMissionDirectorateOrOffice'] = ApiClient.convertToType(data['responsibleMissionDirectorateOrOffice'], 'String');
            }
            if (data.hasOwnProperty('responsibleProgram')) {
                obj['responsibleProgram'] = ApiClient.convertToType(data['responsibleProgram'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('supportedMissionType')) {
                obj['supportedMissionType'] = ApiClient.convertToType(data['supportedMissionType'], 'String');
            }
            if (data.hasOwnProperty('supportingOrganizations')) {
                obj['supportingOrganizations'] = ApiClient.convertToType(data['supportingOrganizations'], [Organization]);
            }
            if (data.hasOwnProperty('technologyMaturityCurrent')) {
                obj['technologyMaturityCurrent'] = ApiClient.convertToType(data['technologyMaturityCurrent'], 'String');
            }
            if (data.hasOwnProperty('technologyMaturityEnd')) {
                obj['technologyMaturityEnd'] = ApiClient.convertToType(data['technologyMaturityEnd'], 'String');
            }
            if (data.hasOwnProperty('technologyMaturityStart')) {
                obj['technologyMaturityStart'] = ApiClient.convertToType(data['technologyMaturityStart'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
            if (data.hasOwnProperty('workLocations')) {
                obj['workLocations'] = ApiClient.convertToType(data['workLocations'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Project</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Project</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['acronym'] && !(typeof data['acronym'] === 'string' || data['acronym'] instanceof String)) {
            throw new Error("Expected the field `acronym` to be a primitive type in the JSON string but got " + data['acronym']);
        }
        if (data['additionalTas']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalTas'])) {
                throw new Error("Expected the field `additionalTas` to be an array in the JSON data but got " + data['additionalTas']);
            }
            // validate the optional field `additionalTas` (array)
            for (const item of data['additionalTas']) {
                TechnologyArea.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['benefits'] && !(typeof data['benefits'] === 'string' || data['benefits'] instanceof String)) {
            throw new Error("Expected the field `benefits` to be a primitive type in the JSON string but got " + data['benefits']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['closeoutDocuments'])) {
            throw new Error("Expected the field `closeoutDocuments` to be an array in the JSON data but got " + data['closeoutDocuments']);
        }
        // ensure the json data is a string
        if (data['closeoutSummary'] && !(typeof data['closeoutSummary'] === 'string' || data['closeoutSummary'] instanceof String)) {
            throw new Error("Expected the field `closeoutSummary` to be a primitive type in the JSON string but got " + data['closeoutSummary']);
        }
        if (data['coFundingPartners']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['coFundingPartners'])) {
                throw new Error("Expected the field `coFundingPartners` to be an array in the JSON data but got " + data['coFundingPartners']);
            }
            // validate the optional field `coFundingPartners` (array)
            for (const item of data['coFundingPartners']) {
                Organization.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['coInvestigators'])) {
            throw new Error("Expected the field `coInvestigators` to be an array in the JSON data but got " + data['coInvestigators']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['destinations'])) {
            throw new Error("Expected the field `destinations` to be an array in the JSON data but got " + data['destinations']);
        }
        // ensure the json data is a string
        if (data['endDate'] && !(typeof data['endDate'] === 'string' || data['endDate'] instanceof String)) {
            throw new Error("Expected the field `endDate` to be a primitive type in the JSON string but got " + data['endDate']);
        }
        // validate the optional field `leadOrganization`
        if (data['leadOrganization']) { // data not null
          Organization.validateJSON(data['leadOrganization']);
        }
        if (data['libraryItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['libraryItems'])) {
                throw new Error("Expected the field `libraryItems` to be an array in the JSON data but got " + data['libraryItems']);
            }
            // validate the optional field `libraryItems` (array)
            for (const item of data['libraryItems']) {
                LibraryItem.validateJSON(item);
            };
        }
        if (data['primaryTas']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['primaryTas'])) {
                throw new Error("Expected the field `primaryTas` to be an array in the JSON data but got " + data['primaryTas']);
            }
            // validate the optional field `primaryTas` (array)
            for (const item of data['primaryTas']) {
                TechnologyArea.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['principalInvestigators'])) {
            throw new Error("Expected the field `principalInvestigators` to be an array in the JSON data but got " + data['principalInvestigators']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['programDirectors'])) {
            throw new Error("Expected the field `programDirectors` to be an array in the JSON data but got " + data['programDirectors']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['programManagers'])) {
            throw new Error("Expected the field `programManagers` to be an array in the JSON data but got " + data['programManagers']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['projectManagers'])) {
            throw new Error("Expected the field `projectManagers` to be an array in the JSON data but got " + data['projectManagers']);
        }
        // ensure the json data is a string
        if (data['responsibleMissionDirectorateOrOffice'] && !(typeof data['responsibleMissionDirectorateOrOffice'] === 'string' || data['responsibleMissionDirectorateOrOffice'] instanceof String)) {
            throw new Error("Expected the field `responsibleMissionDirectorateOrOffice` to be a primitive type in the JSON string but got " + data['responsibleMissionDirectorateOrOffice']);
        }
        // ensure the json data is a string
        if (data['responsibleProgram'] && !(typeof data['responsibleProgram'] === 'string' || data['responsibleProgram'] instanceof String)) {
            throw new Error("Expected the field `responsibleProgram` to be a primitive type in the JSON string but got " + data['responsibleProgram']);
        }
        // ensure the json data is a string
        if (data['startDate'] && !(typeof data['startDate'] === 'string' || data['startDate'] instanceof String)) {
            throw new Error("Expected the field `startDate` to be a primitive type in the JSON string but got " + data['startDate']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['supportedMissionType'] && !(typeof data['supportedMissionType'] === 'string' || data['supportedMissionType'] instanceof String)) {
            throw new Error("Expected the field `supportedMissionType` to be a primitive type in the JSON string but got " + data['supportedMissionType']);
        }
        if (data['supportingOrganizations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['supportingOrganizations'])) {
                throw new Error("Expected the field `supportingOrganizations` to be an array in the JSON data but got " + data['supportingOrganizations']);
            }
            // validate the optional field `supportingOrganizations` (array)
            for (const item of data['supportingOrganizations']) {
                Organization.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['technologyMaturityCurrent'] && !(typeof data['technologyMaturityCurrent'] === 'string' || data['technologyMaturityCurrent'] instanceof String)) {
            throw new Error("Expected the field `technologyMaturityCurrent` to be a primitive type in the JSON string but got " + data['technologyMaturityCurrent']);
        }
        // ensure the json data is a string
        if (data['technologyMaturityEnd'] && !(typeof data['technologyMaturityEnd'] === 'string' || data['technologyMaturityEnd'] instanceof String)) {
            throw new Error("Expected the field `technologyMaturityEnd` to be a primitive type in the JSON string but got " + data['technologyMaturityEnd']);
        }
        // ensure the json data is a string
        if (data['technologyMaturityStart'] && !(typeof data['technologyMaturityStart'] === 'string' || data['technologyMaturityStart'] instanceof String)) {
            throw new Error("Expected the field `technologyMaturityStart` to be a primitive type in the JSON string but got " + data['technologyMaturityStart']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['workLocations'])) {
            throw new Error("Expected the field `workLocations` to be an array in the JSON data but got " + data['workLocations']);
        }

        return true;
    }


}



/**
 * Abbreviated name of the project.
 * @member {String} acronym
 */
Project.prototype['acronym'] = undefined;

/**
 * List of additional and cross-cutting technology areas associated with the project.
 * @member {Array.<module:model/TechnologyArea>} additionalTas
 */
Project.prototype['additionalTas'] = undefined;

/**
 * Describes the benefits offered to NASA funded and planned missions, unfunded or planned missions, commercial space industry, and to the nation.
 * @member {String} benefits
 */
Project.prototype['benefits'] = undefined;

/**
 * List of document files or links to the project final report closeout documentation.
 * @member {Array.<String>} closeoutDocuments
 */
Project.prototype['closeoutDocuments'] = undefined;

/**
 * The project closeout summary excerpt.
 * @member {String} closeoutSummary
 */
Project.prototype['closeoutSummary'] = undefined;

/**
 * Other government agencies, NASA Mission Directoratres, universities, or commercial entities performing contributing resources to this project.
 * @member {Array.<module:model/Organization>} coFundingPartners
 */
Project.prototype['coFundingPartners'] = undefined;

/**
 * Names of the additional investigators who are scientists or engineers for this project.
 * @member {Array.<String>} coInvestigators
 */
Project.prototype['coInvestigators'] = undefined;

/**
 * A detailed description of the project.
 * @member {String} description
 */
Project.prototype['description'] = undefined;

/**
 * List of the NASA destinations the technology on this project helps achieve.
 * @member {Array.<String>} destinations
 */
Project.prototype['destinations'] = undefined;

/**
 * The month and year the project is expected to complete its work.
 * @member {String} endDate
 */
Project.prototype['endDate'] = undefined;

/**
 * Unique identifier for the project.
 * @member {Number} id
 */
Project.prototype['id'] = undefined;

/**
 * ISO 8601 full-date in the format YYYY-MM-DD describing the last time this project was updated.
 * @member {Date} lastUpdated
 */
Project.prototype['lastUpdated'] = undefined;

/**
 * @member {module:model/Organization} leadOrganization
 */
Project.prototype['leadOrganization'] = undefined;

/**
 * List of library items in the project library.
 * @member {Array.<module:model/LibraryItem>} libraryItems
 */
Project.prototype['libraryItems'] = undefined;

/**
 * List of primary technolgy areas (from the NASA Technology Roadmap) associated with the project.
 * @member {Array.<module:model/TechnologyArea>} primaryTas
 */
Project.prototype['primaryTas'] = undefined;

/**
 * Names of the Principal Investigators who are the lead scientists or engineers for this project.
 * @member {Array.<String>} principalInvestigators
 */
Project.prototype['principalInvestigators'] = undefined;

/**
 * Names of the Program Directors responsible for the management of this project.
 * @member {Array.<String>} programDirectors
 */
Project.prototype['programDirectors'] = undefined;

/**
 * Names of the Program Managers responsible for the management of this project.
 * @member {Array.<String>} programManagers
 */
Project.prototype['programManagers'] = undefined;

/**
 * Names of the Project Managers responsible for the management of this project.
 * @member {Array.<String>} projectManagers
 */
Project.prototype['projectManagers'] = undefined;

/**
 * The NASA Mission Directorate or Office that is the primary funding source for this project.
 * @member {String} responsibleMissionDirectorateOrOffice
 */
Project.prototype['responsibleMissionDirectorateOrOffice'] = undefined;

/**
 * The NASA program that is the primary funding source for this project.
 * @member {String} responsibleProgram
 */
Project.prototype['responsibleProgram'] = undefined;

/**
 * The month and year the project was authorized to proceed.
 * @member {String} startDate
 */
Project.prototype['startDate'] = undefined;

/**
 * Indicates whether the project is currently active, completed, or canceled.
 * @member {String} status
 */
Project.prototype['status'] = undefined;

/**
 * The supported mission type (Projected Mission, Planned Mission, or Pull).
 * @member {String} supportedMissionType
 */
Project.prototype['supportedMissionType'] = undefined;

/**
 * The supporting organizations for this project that are conducting work on the project.
 * @member {Array.<module:model/Organization>} supportingOrganizations
 */
Project.prototype['supportingOrganizations'] = undefined;

/**
 * The current technology maturity (technology readiness level) of the project.
 * @member {String} technologyMaturityCurrent
 */
Project.prototype['technologyMaturityCurrent'] = undefined;

/**
 * The estimated technology maturity (technology readiness level) of the project at its end.
 * @member {String} technologyMaturityEnd
 */
Project.prototype['technologyMaturityEnd'] = undefined;

/**
 * The technology maturity (technology readiness level) of the project at its beginning.
 * @member {String} technologyMaturityStart
 */
Project.prototype['technologyMaturityStart'] = undefined;

/**
 * Title of the project.
 * @member {String} title
 */
Project.prototype['title'] = undefined;

/**
 * The URL for the associated website.
 * @member {String} website
 */
Project.prototype['website'] = undefined;

/**
 * States and territories with people performing work on this project.
 * @member {Array.<String>} workLocations
 */
Project.prototype['workLocations'] = undefined;






export default Project;

