/**
 * TechPort
 * TechPort RESTful API
 *
 * The version of the OpenAPI document: 3.4.0
 * Contact: hq-techport@mail.nasa.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiProjectsFormatGet200Response from '../model/ApiProjectsFormatGet200Response';
import Project from '../model/Project';

/**
* Default service.
* @module api/DefaultApi
* @version 3.4.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiGet operation.
     * @callback module:api/DefaultApi~apiGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the swagger specification for the API.
     * @param {module:api/DefaultApi~apiGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiProjectsFormatGet operation.
     * @callback module:api/DefaultApi~apiProjectsFormatGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiProjectsFormatGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of available technology project IDs.
     * @param {Date} updatedSince ISO 8601 full-date in the format YYYY-MM-DD. Filters the list of available ID values by their lastUpdated parameter.
     * @param {module:model/String} format The response type desired.
     * @param {String} format2 Automatically added
     * @param {module:api/DefaultApi~apiProjectsFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiProjectsFormatGet200Response}
     */
    apiProjectsFormatGet(updatedSince, format, format2, callback) {
      let postBody = null;
      // verify the required parameter 'updatedSince' is set
      if (updatedSince === undefined || updatedSince === null) {
        throw new Error("Missing the required parameter 'updatedSince' when calling apiProjectsFormatGet");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling apiProjectsFormatGet");
      }
      // verify the required parameter 'format2' is set
      if (format2 === undefined || format2 === null) {
        throw new Error("Missing the required parameter 'format2' when calling apiProjectsFormatGet");
      }

      let pathParams = {
        '.format': format2
      };
      let queryParams = {
        'updatedSince': updatedSince,
        'format': format
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ApiProjectsFormatGet200Response;
      return this.apiClient.callApi(
        '/api/projects{.format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiProjectsIdFormatGet operation.
     * @callback module:api/DefaultApi~apiProjectsIdFormatGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a specific technology project.
     * @param {Number} id ID of project to fetch
     * @param {module:model/String} format The response type desired.
     * @param {String} format2 Automatically added
     * @param {module:api/DefaultApi~apiProjectsIdFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    apiProjectsIdFormatGet(id, format, format2, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiProjectsIdFormatGet");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling apiProjectsIdFormatGet");
      }
      // verify the required parameter 'format2' is set
      if (format2 === undefined || format2 === null) {
        throw new Error("Missing the required parameter 'format2' when calling apiProjectsIdFormatGet");
      }

      let pathParams = {
        'id': id,
        '.format': format2
      };
      let queryParams = {
        'format': format
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/api/projects/{id}{.format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
