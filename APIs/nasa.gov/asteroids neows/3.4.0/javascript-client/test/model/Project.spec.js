/**
 * TechPort
 * TechPort RESTful API
 *
 * The version of the OpenAPI document: 3.4.0
 * Contact: hq-techport@mail.nasa.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TechPort);
  }
}(this, function(expect, TechPort) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TechPort.Project();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Project', function() {
    it('should create an instance of Project', function() {
      // uncomment below and update the code to test Project
      //var instance = new TechPort.Project();
      //expect(instance).to.be.a(TechPort.Project);
    });

    it('should have the property acronym (base name: "acronym")', function() {
      // uncomment below and update the code to test the property acronym
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property additionalTas (base name: "additionalTas")', function() {
      // uncomment below and update the code to test the property additionalTas
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property benefits (base name: "benefits")', function() {
      // uncomment below and update the code to test the property benefits
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property closeoutDocuments (base name: "closeoutDocuments")', function() {
      // uncomment below and update the code to test the property closeoutDocuments
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property closeoutSummary (base name: "closeoutSummary")', function() {
      // uncomment below and update the code to test the property closeoutSummary
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property coFundingPartners (base name: "coFundingPartners")', function() {
      // uncomment below and update the code to test the property coFundingPartners
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property coInvestigators (base name: "coInvestigators")', function() {
      // uncomment below and update the code to test the property coInvestigators
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property destinations (base name: "destinations")', function() {
      // uncomment below and update the code to test the property destinations
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property endDate (base name: "endDate")', function() {
      // uncomment below and update the code to test the property endDate
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdated (base name: "lastUpdated")', function() {
      // uncomment below and update the code to test the property lastUpdated
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property leadOrganization (base name: "leadOrganization")', function() {
      // uncomment below and update the code to test the property leadOrganization
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property libraryItems (base name: "libraryItems")', function() {
      // uncomment below and update the code to test the property libraryItems
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property primaryTas (base name: "primaryTas")', function() {
      // uncomment below and update the code to test the property primaryTas
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property principalInvestigators (base name: "principalInvestigators")', function() {
      // uncomment below and update the code to test the property principalInvestigators
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property programDirectors (base name: "programDirectors")', function() {
      // uncomment below and update the code to test the property programDirectors
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property programManagers (base name: "programManagers")', function() {
      // uncomment below and update the code to test the property programManagers
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property projectManagers (base name: "projectManagers")', function() {
      // uncomment below and update the code to test the property projectManagers
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property responsibleMissionDirectorateOrOffice (base name: "responsibleMissionDirectorateOrOffice")', function() {
      // uncomment below and update the code to test the property responsibleMissionDirectorateOrOffice
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property responsibleProgram (base name: "responsibleProgram")', function() {
      // uncomment below and update the code to test the property responsibleProgram
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property startDate (base name: "startDate")', function() {
      // uncomment below and update the code to test the property startDate
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property supportedMissionType (base name: "supportedMissionType")', function() {
      // uncomment below and update the code to test the property supportedMissionType
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property supportingOrganizations (base name: "supportingOrganizations")', function() {
      // uncomment below and update the code to test the property supportingOrganizations
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property technologyMaturityCurrent (base name: "technologyMaturityCurrent")', function() {
      // uncomment below and update the code to test the property technologyMaturityCurrent
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property technologyMaturityEnd (base name: "technologyMaturityEnd")', function() {
      // uncomment below and update the code to test the property technologyMaturityEnd
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property technologyMaturityStart (base name: "technologyMaturityStart")', function() {
      // uncomment below and update the code to test the property technologyMaturityStart
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property website (base name: "website")', function() {
      // uncomment below and update the code to test the property website
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

    it('should have the property workLocations (base name: "workLocations")', function() {
      // uncomment below and update the code to test the property workLocations
      //var instance = new TechPort.Project();
      //expect(instance).to.be();
    });

  });

}));
