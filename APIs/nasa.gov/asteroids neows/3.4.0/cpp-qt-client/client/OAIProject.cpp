/**
 * TechPort
 * TechPort RESTful API
 *
 * The version of the OpenAPI document: 3.4.0
 * Contact: hq-techport@mail.nasa.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProject::OAIProject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProject::OAIProject() {
    this->initializeModel();
}

OAIProject::~OAIProject() {}

void OAIProject::initializeModel() {

    m_acronym_isSet = false;
    m_acronym_isValid = false;

    m_additional_tas_isSet = false;
    m_additional_tas_isValid = false;

    m_benefits_isSet = false;
    m_benefits_isValid = false;

    m_closeout_documents_isSet = false;
    m_closeout_documents_isValid = false;

    m_closeout_summary_isSet = false;
    m_closeout_summary_isValid = false;

    m_co_funding_partners_isSet = false;
    m_co_funding_partners_isValid = false;

    m_co_investigators_isSet = false;
    m_co_investigators_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_destinations_isSet = false;
    m_destinations_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_lead_organization_isSet = false;
    m_lead_organization_isValid = false;

    m_library_items_isSet = false;
    m_library_items_isValid = false;

    m_primary_tas_isSet = false;
    m_primary_tas_isValid = false;

    m_principal_investigators_isSet = false;
    m_principal_investigators_isValid = false;

    m_program_directors_isSet = false;
    m_program_directors_isValid = false;

    m_program_managers_isSet = false;
    m_program_managers_isValid = false;

    m_project_managers_isSet = false;
    m_project_managers_isValid = false;

    m_responsible_mission_directorate_or_office_isSet = false;
    m_responsible_mission_directorate_or_office_isValid = false;

    m_responsible_program_isSet = false;
    m_responsible_program_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_supported_mission_type_isSet = false;
    m_supported_mission_type_isValid = false;

    m_supporting_organizations_isSet = false;
    m_supporting_organizations_isValid = false;

    m_technology_maturity_current_isSet = false;
    m_technology_maturity_current_isValid = false;

    m_technology_maturity_end_isSet = false;
    m_technology_maturity_end_isValid = false;

    m_technology_maturity_start_isSet = false;
    m_technology_maturity_start_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;

    m_work_locations_isSet = false;
    m_work_locations_isValid = false;
}

void OAIProject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProject::fromJsonObject(QJsonObject json) {

    m_acronym_isValid = ::OpenAPI::fromJsonValue(m_acronym, json[QString("acronym")]);
    m_acronym_isSet = !json[QString("acronym")].isNull() && m_acronym_isValid;

    m_additional_tas_isValid = ::OpenAPI::fromJsonValue(m_additional_tas, json[QString("additionalTas")]);
    m_additional_tas_isSet = !json[QString("additionalTas")].isNull() && m_additional_tas_isValid;

    m_benefits_isValid = ::OpenAPI::fromJsonValue(m_benefits, json[QString("benefits")]);
    m_benefits_isSet = !json[QString("benefits")].isNull() && m_benefits_isValid;

    m_closeout_documents_isValid = ::OpenAPI::fromJsonValue(m_closeout_documents, json[QString("closeoutDocuments")]);
    m_closeout_documents_isSet = !json[QString("closeoutDocuments")].isNull() && m_closeout_documents_isValid;

    m_closeout_summary_isValid = ::OpenAPI::fromJsonValue(m_closeout_summary, json[QString("closeoutSummary")]);
    m_closeout_summary_isSet = !json[QString("closeoutSummary")].isNull() && m_closeout_summary_isValid;

    m_co_funding_partners_isValid = ::OpenAPI::fromJsonValue(m_co_funding_partners, json[QString("coFundingPartners")]);
    m_co_funding_partners_isSet = !json[QString("coFundingPartners")].isNull() && m_co_funding_partners_isValid;

    m_co_investigators_isValid = ::OpenAPI::fromJsonValue(m_co_investigators, json[QString("coInvestigators")]);
    m_co_investigators_isSet = !json[QString("coInvestigators")].isNull() && m_co_investigators_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("destinations")]);
    m_destinations_isSet = !json[QString("destinations")].isNull() && m_destinations_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_lead_organization_isValid = ::OpenAPI::fromJsonValue(m_lead_organization, json[QString("leadOrganization")]);
    m_lead_organization_isSet = !json[QString("leadOrganization")].isNull() && m_lead_organization_isValid;

    m_library_items_isValid = ::OpenAPI::fromJsonValue(m_library_items, json[QString("libraryItems")]);
    m_library_items_isSet = !json[QString("libraryItems")].isNull() && m_library_items_isValid;

    m_primary_tas_isValid = ::OpenAPI::fromJsonValue(m_primary_tas, json[QString("primaryTas")]);
    m_primary_tas_isSet = !json[QString("primaryTas")].isNull() && m_primary_tas_isValid;

    m_principal_investigators_isValid = ::OpenAPI::fromJsonValue(m_principal_investigators, json[QString("principalInvestigators")]);
    m_principal_investigators_isSet = !json[QString("principalInvestigators")].isNull() && m_principal_investigators_isValid;

    m_program_directors_isValid = ::OpenAPI::fromJsonValue(m_program_directors, json[QString("programDirectors")]);
    m_program_directors_isSet = !json[QString("programDirectors")].isNull() && m_program_directors_isValid;

    m_program_managers_isValid = ::OpenAPI::fromJsonValue(m_program_managers, json[QString("programManagers")]);
    m_program_managers_isSet = !json[QString("programManagers")].isNull() && m_program_managers_isValid;

    m_project_managers_isValid = ::OpenAPI::fromJsonValue(m_project_managers, json[QString("projectManagers")]);
    m_project_managers_isSet = !json[QString("projectManagers")].isNull() && m_project_managers_isValid;

    m_responsible_mission_directorate_or_office_isValid = ::OpenAPI::fromJsonValue(m_responsible_mission_directorate_or_office, json[QString("responsibleMissionDirectorateOrOffice")]);
    m_responsible_mission_directorate_or_office_isSet = !json[QString("responsibleMissionDirectorateOrOffice")].isNull() && m_responsible_mission_directorate_or_office_isValid;

    m_responsible_program_isValid = ::OpenAPI::fromJsonValue(m_responsible_program, json[QString("responsibleProgram")]);
    m_responsible_program_isSet = !json[QString("responsibleProgram")].isNull() && m_responsible_program_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_supported_mission_type_isValid = ::OpenAPI::fromJsonValue(m_supported_mission_type, json[QString("supportedMissionType")]);
    m_supported_mission_type_isSet = !json[QString("supportedMissionType")].isNull() && m_supported_mission_type_isValid;

    m_supporting_organizations_isValid = ::OpenAPI::fromJsonValue(m_supporting_organizations, json[QString("supportingOrganizations")]);
    m_supporting_organizations_isSet = !json[QString("supportingOrganizations")].isNull() && m_supporting_organizations_isValid;

    m_technology_maturity_current_isValid = ::OpenAPI::fromJsonValue(m_technology_maturity_current, json[QString("technologyMaturityCurrent")]);
    m_technology_maturity_current_isSet = !json[QString("technologyMaturityCurrent")].isNull() && m_technology_maturity_current_isValid;

    m_technology_maturity_end_isValid = ::OpenAPI::fromJsonValue(m_technology_maturity_end, json[QString("technologyMaturityEnd")]);
    m_technology_maturity_end_isSet = !json[QString("technologyMaturityEnd")].isNull() && m_technology_maturity_end_isValid;

    m_technology_maturity_start_isValid = ::OpenAPI::fromJsonValue(m_technology_maturity_start, json[QString("technologyMaturityStart")]);
    m_technology_maturity_start_isSet = !json[QString("technologyMaturityStart")].isNull() && m_technology_maturity_start_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;

    m_work_locations_isValid = ::OpenAPI::fromJsonValue(m_work_locations, json[QString("workLocations")]);
    m_work_locations_isSet = !json[QString("workLocations")].isNull() && m_work_locations_isValid;
}

QString OAIProject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProject::asJsonObject() const {
    QJsonObject obj;
    if (m_acronym_isSet) {
        obj.insert(QString("acronym"), ::OpenAPI::toJsonValue(m_acronym));
    }
    if (m_additional_tas.size() > 0) {
        obj.insert(QString("additionalTas"), ::OpenAPI::toJsonValue(m_additional_tas));
    }
    if (m_benefits_isSet) {
        obj.insert(QString("benefits"), ::OpenAPI::toJsonValue(m_benefits));
    }
    if (m_closeout_documents.size() > 0) {
        obj.insert(QString("closeoutDocuments"), ::OpenAPI::toJsonValue(m_closeout_documents));
    }
    if (m_closeout_summary_isSet) {
        obj.insert(QString("closeoutSummary"), ::OpenAPI::toJsonValue(m_closeout_summary));
    }
    if (m_co_funding_partners.size() > 0) {
        obj.insert(QString("coFundingPartners"), ::OpenAPI::toJsonValue(m_co_funding_partners));
    }
    if (m_co_investigators.size() > 0) {
        obj.insert(QString("coInvestigators"), ::OpenAPI::toJsonValue(m_co_investigators));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_destinations.size() > 0) {
        obj.insert(QString("destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_lead_organization.isSet()) {
        obj.insert(QString("leadOrganization"), ::OpenAPI::toJsonValue(m_lead_organization));
    }
    if (m_library_items.size() > 0) {
        obj.insert(QString("libraryItems"), ::OpenAPI::toJsonValue(m_library_items));
    }
    if (m_primary_tas.size() > 0) {
        obj.insert(QString("primaryTas"), ::OpenAPI::toJsonValue(m_primary_tas));
    }
    if (m_principal_investigators.size() > 0) {
        obj.insert(QString("principalInvestigators"), ::OpenAPI::toJsonValue(m_principal_investigators));
    }
    if (m_program_directors.size() > 0) {
        obj.insert(QString("programDirectors"), ::OpenAPI::toJsonValue(m_program_directors));
    }
    if (m_program_managers.size() > 0) {
        obj.insert(QString("programManagers"), ::OpenAPI::toJsonValue(m_program_managers));
    }
    if (m_project_managers.size() > 0) {
        obj.insert(QString("projectManagers"), ::OpenAPI::toJsonValue(m_project_managers));
    }
    if (m_responsible_mission_directorate_or_office_isSet) {
        obj.insert(QString("responsibleMissionDirectorateOrOffice"), ::OpenAPI::toJsonValue(m_responsible_mission_directorate_or_office));
    }
    if (m_responsible_program_isSet) {
        obj.insert(QString("responsibleProgram"), ::OpenAPI::toJsonValue(m_responsible_program));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_supported_mission_type_isSet) {
        obj.insert(QString("supportedMissionType"), ::OpenAPI::toJsonValue(m_supported_mission_type));
    }
    if (m_supporting_organizations.size() > 0) {
        obj.insert(QString("supportingOrganizations"), ::OpenAPI::toJsonValue(m_supporting_organizations));
    }
    if (m_technology_maturity_current_isSet) {
        obj.insert(QString("technologyMaturityCurrent"), ::OpenAPI::toJsonValue(m_technology_maturity_current));
    }
    if (m_technology_maturity_end_isSet) {
        obj.insert(QString("technologyMaturityEnd"), ::OpenAPI::toJsonValue(m_technology_maturity_end));
    }
    if (m_technology_maturity_start_isSet) {
        obj.insert(QString("technologyMaturityStart"), ::OpenAPI::toJsonValue(m_technology_maturity_start));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    if (m_work_locations.size() > 0) {
        obj.insert(QString("workLocations"), ::OpenAPI::toJsonValue(m_work_locations));
    }
    return obj;
}

QString OAIProject::getAcronym() const {
    return m_acronym;
}
void OAIProject::setAcronym(const QString &acronym) {
    m_acronym = acronym;
    m_acronym_isSet = true;
}

bool OAIProject::is_acronym_Set() const{
    return m_acronym_isSet;
}

bool OAIProject::is_acronym_Valid() const{
    return m_acronym_isValid;
}

QList<OAITechnologyArea> OAIProject::getAdditionalTas() const {
    return m_additional_tas;
}
void OAIProject::setAdditionalTas(const QList<OAITechnologyArea> &additional_tas) {
    m_additional_tas = additional_tas;
    m_additional_tas_isSet = true;
}

bool OAIProject::is_additional_tas_Set() const{
    return m_additional_tas_isSet;
}

bool OAIProject::is_additional_tas_Valid() const{
    return m_additional_tas_isValid;
}

QString OAIProject::getBenefits() const {
    return m_benefits;
}
void OAIProject::setBenefits(const QString &benefits) {
    m_benefits = benefits;
    m_benefits_isSet = true;
}

bool OAIProject::is_benefits_Set() const{
    return m_benefits_isSet;
}

bool OAIProject::is_benefits_Valid() const{
    return m_benefits_isValid;
}

QList<QString> OAIProject::getCloseoutDocuments() const {
    return m_closeout_documents;
}
void OAIProject::setCloseoutDocuments(const QList<QString> &closeout_documents) {
    m_closeout_documents = closeout_documents;
    m_closeout_documents_isSet = true;
}

bool OAIProject::is_closeout_documents_Set() const{
    return m_closeout_documents_isSet;
}

bool OAIProject::is_closeout_documents_Valid() const{
    return m_closeout_documents_isValid;
}

QString OAIProject::getCloseoutSummary() const {
    return m_closeout_summary;
}
void OAIProject::setCloseoutSummary(const QString &closeout_summary) {
    m_closeout_summary = closeout_summary;
    m_closeout_summary_isSet = true;
}

bool OAIProject::is_closeout_summary_Set() const{
    return m_closeout_summary_isSet;
}

bool OAIProject::is_closeout_summary_Valid() const{
    return m_closeout_summary_isValid;
}

QList<OAIOrganization> OAIProject::getCoFundingPartners() const {
    return m_co_funding_partners;
}
void OAIProject::setCoFundingPartners(const QList<OAIOrganization> &co_funding_partners) {
    m_co_funding_partners = co_funding_partners;
    m_co_funding_partners_isSet = true;
}

bool OAIProject::is_co_funding_partners_Set() const{
    return m_co_funding_partners_isSet;
}

bool OAIProject::is_co_funding_partners_Valid() const{
    return m_co_funding_partners_isValid;
}

QList<QString> OAIProject::getCoInvestigators() const {
    return m_co_investigators;
}
void OAIProject::setCoInvestigators(const QList<QString> &co_investigators) {
    m_co_investigators = co_investigators;
    m_co_investigators_isSet = true;
}

bool OAIProject::is_co_investigators_Set() const{
    return m_co_investigators_isSet;
}

bool OAIProject::is_co_investigators_Valid() const{
    return m_co_investigators_isValid;
}

QString OAIProject::getDescription() const {
    return m_description;
}
void OAIProject::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProject::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProject::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIProject::getDestinations() const {
    return m_destinations;
}
void OAIProject::setDestinations(const QList<QString> &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAIProject::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAIProject::is_destinations_Valid() const{
    return m_destinations_isValid;
}

QString OAIProject::getEndDate() const {
    return m_end_date;
}
void OAIProject::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIProject::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIProject::is_end_date_Valid() const{
    return m_end_date_isValid;
}

qint64 OAIProject::getId() const {
    return m_id;
}
void OAIProject::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProject::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProject::is_id_Valid() const{
    return m_id_isValid;
}

QDate OAIProject::getLastUpdated() const {
    return m_last_updated;
}
void OAIProject::setLastUpdated(const QDate &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIProject::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIProject::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

OAIOrganization OAIProject::getLeadOrganization() const {
    return m_lead_organization;
}
void OAIProject::setLeadOrganization(const OAIOrganization &lead_organization) {
    m_lead_organization = lead_organization;
    m_lead_organization_isSet = true;
}

bool OAIProject::is_lead_organization_Set() const{
    return m_lead_organization_isSet;
}

bool OAIProject::is_lead_organization_Valid() const{
    return m_lead_organization_isValid;
}

QList<OAILibraryItem> OAIProject::getLibraryItems() const {
    return m_library_items;
}
void OAIProject::setLibraryItems(const QList<OAILibraryItem> &library_items) {
    m_library_items = library_items;
    m_library_items_isSet = true;
}

bool OAIProject::is_library_items_Set() const{
    return m_library_items_isSet;
}

bool OAIProject::is_library_items_Valid() const{
    return m_library_items_isValid;
}

QList<OAITechnologyArea> OAIProject::getPrimaryTas() const {
    return m_primary_tas;
}
void OAIProject::setPrimaryTas(const QList<OAITechnologyArea> &primary_tas) {
    m_primary_tas = primary_tas;
    m_primary_tas_isSet = true;
}

bool OAIProject::is_primary_tas_Set() const{
    return m_primary_tas_isSet;
}

bool OAIProject::is_primary_tas_Valid() const{
    return m_primary_tas_isValid;
}

QList<QString> OAIProject::getPrincipalInvestigators() const {
    return m_principal_investigators;
}
void OAIProject::setPrincipalInvestigators(const QList<QString> &principal_investigators) {
    m_principal_investigators = principal_investigators;
    m_principal_investigators_isSet = true;
}

bool OAIProject::is_principal_investigators_Set() const{
    return m_principal_investigators_isSet;
}

bool OAIProject::is_principal_investigators_Valid() const{
    return m_principal_investigators_isValid;
}

QList<QString> OAIProject::getProgramDirectors() const {
    return m_program_directors;
}
void OAIProject::setProgramDirectors(const QList<QString> &program_directors) {
    m_program_directors = program_directors;
    m_program_directors_isSet = true;
}

bool OAIProject::is_program_directors_Set() const{
    return m_program_directors_isSet;
}

bool OAIProject::is_program_directors_Valid() const{
    return m_program_directors_isValid;
}

QList<QString> OAIProject::getProgramManagers() const {
    return m_program_managers;
}
void OAIProject::setProgramManagers(const QList<QString> &program_managers) {
    m_program_managers = program_managers;
    m_program_managers_isSet = true;
}

bool OAIProject::is_program_managers_Set() const{
    return m_program_managers_isSet;
}

bool OAIProject::is_program_managers_Valid() const{
    return m_program_managers_isValid;
}

QList<QString> OAIProject::getProjectManagers() const {
    return m_project_managers;
}
void OAIProject::setProjectManagers(const QList<QString> &project_managers) {
    m_project_managers = project_managers;
    m_project_managers_isSet = true;
}

bool OAIProject::is_project_managers_Set() const{
    return m_project_managers_isSet;
}

bool OAIProject::is_project_managers_Valid() const{
    return m_project_managers_isValid;
}

QString OAIProject::getResponsibleMissionDirectorateOrOffice() const {
    return m_responsible_mission_directorate_or_office;
}
void OAIProject::setResponsibleMissionDirectorateOrOffice(const QString &responsible_mission_directorate_or_office) {
    m_responsible_mission_directorate_or_office = responsible_mission_directorate_or_office;
    m_responsible_mission_directorate_or_office_isSet = true;
}

bool OAIProject::is_responsible_mission_directorate_or_office_Set() const{
    return m_responsible_mission_directorate_or_office_isSet;
}

bool OAIProject::is_responsible_mission_directorate_or_office_Valid() const{
    return m_responsible_mission_directorate_or_office_isValid;
}

QString OAIProject::getResponsibleProgram() const {
    return m_responsible_program;
}
void OAIProject::setResponsibleProgram(const QString &responsible_program) {
    m_responsible_program = responsible_program;
    m_responsible_program_isSet = true;
}

bool OAIProject::is_responsible_program_Set() const{
    return m_responsible_program_isSet;
}

bool OAIProject::is_responsible_program_Valid() const{
    return m_responsible_program_isValid;
}

QString OAIProject::getStartDate() const {
    return m_start_date;
}
void OAIProject::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIProject::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIProject::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIProject::getStatus() const {
    return m_status;
}
void OAIProject::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIProject::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProject::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIProject::getSupportedMissionType() const {
    return m_supported_mission_type;
}
void OAIProject::setSupportedMissionType(const QString &supported_mission_type) {
    m_supported_mission_type = supported_mission_type;
    m_supported_mission_type_isSet = true;
}

bool OAIProject::is_supported_mission_type_Set() const{
    return m_supported_mission_type_isSet;
}

bool OAIProject::is_supported_mission_type_Valid() const{
    return m_supported_mission_type_isValid;
}

QList<OAIOrganization> OAIProject::getSupportingOrganizations() const {
    return m_supporting_organizations;
}
void OAIProject::setSupportingOrganizations(const QList<OAIOrganization> &supporting_organizations) {
    m_supporting_organizations = supporting_organizations;
    m_supporting_organizations_isSet = true;
}

bool OAIProject::is_supporting_organizations_Set() const{
    return m_supporting_organizations_isSet;
}

bool OAIProject::is_supporting_organizations_Valid() const{
    return m_supporting_organizations_isValid;
}

QString OAIProject::getTechnologyMaturityCurrent() const {
    return m_technology_maturity_current;
}
void OAIProject::setTechnologyMaturityCurrent(const QString &technology_maturity_current) {
    m_technology_maturity_current = technology_maturity_current;
    m_technology_maturity_current_isSet = true;
}

bool OAIProject::is_technology_maturity_current_Set() const{
    return m_technology_maturity_current_isSet;
}

bool OAIProject::is_technology_maturity_current_Valid() const{
    return m_technology_maturity_current_isValid;
}

QString OAIProject::getTechnologyMaturityEnd() const {
    return m_technology_maturity_end;
}
void OAIProject::setTechnologyMaturityEnd(const QString &technology_maturity_end) {
    m_technology_maturity_end = technology_maturity_end;
    m_technology_maturity_end_isSet = true;
}

bool OAIProject::is_technology_maturity_end_Set() const{
    return m_technology_maturity_end_isSet;
}

bool OAIProject::is_technology_maturity_end_Valid() const{
    return m_technology_maturity_end_isValid;
}

QString OAIProject::getTechnologyMaturityStart() const {
    return m_technology_maturity_start;
}
void OAIProject::setTechnologyMaturityStart(const QString &technology_maturity_start) {
    m_technology_maturity_start = technology_maturity_start;
    m_technology_maturity_start_isSet = true;
}

bool OAIProject::is_technology_maturity_start_Set() const{
    return m_technology_maturity_start_isSet;
}

bool OAIProject::is_technology_maturity_start_Valid() const{
    return m_technology_maturity_start_isValid;
}

QString OAIProject::getTitle() const {
    return m_title;
}
void OAIProject::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIProject::is_title_Set() const{
    return m_title_isSet;
}

bool OAIProject::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIProject::getWebsite() const {
    return m_website;
}
void OAIProject::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIProject::is_website_Set() const{
    return m_website_isSet;
}

bool OAIProject::is_website_Valid() const{
    return m_website_isValid;
}

QList<QString> OAIProject::getWorkLocations() const {
    return m_work_locations;
}
void OAIProject::setWorkLocations(const QList<QString> &work_locations) {
    m_work_locations = work_locations;
    m_work_locations_isSet = true;
}

bool OAIProject::is_work_locations_Set() const{
    return m_work_locations_isSet;
}

bool OAIProject::is_work_locations_Valid() const{
    return m_work_locations_isValid;
}

bool OAIProject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acronym_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_tas.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_benefits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closeout_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_closeout_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_co_funding_partners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_co_investigators.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lead_organization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_library_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_tas.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_investigators.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_directors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_managers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_managers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_responsible_mission_directorate_or_office_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_responsible_program_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_mission_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supporting_organizations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_technology_maturity_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_technology_maturity_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_technology_maturity_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
