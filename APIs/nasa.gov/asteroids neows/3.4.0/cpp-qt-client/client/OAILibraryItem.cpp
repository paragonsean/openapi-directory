/**
 * TechPort
 * TechPort RESTful API
 *
 * The version of the OpenAPI document: 3.4.0
 * Contact: hq-techport@mail.nasa.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILibraryItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILibraryItem::OAILibraryItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILibraryItem::OAILibraryItem() {
    this->initializeModel();
}

OAILibraryItem::~OAILibraryItem() {}

void OAILibraryItem::initializeModel() {

    m_completion_date_isSet = false;
    m_completion_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_external_url_isSet = false;
    m_external_url_isValid = false;

    m_files_isSet = false;
    m_files_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_published_by_isSet = false;
    m_published_by_isValid = false;

    m_published_date_isSet = false;
    m_published_date_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAILibraryItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILibraryItem::fromJsonObject(QJsonObject json) {

    m_completion_date_isValid = ::OpenAPI::fromJsonValue(m_completion_date, json[QString("completionDate")]);
    m_completion_date_isSet = !json[QString("completionDate")].isNull() && m_completion_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_external_url_isValid = ::OpenAPI::fromJsonValue(m_external_url, json[QString("externalUrl")]);
    m_external_url_isSet = !json[QString("externalUrl")].isNull() && m_external_url_isValid;

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_published_by_isValid = ::OpenAPI::fromJsonValue(m_published_by, json[QString("publishedBy")]);
    m_published_by_isSet = !json[QString("publishedBy")].isNull() && m_published_by_isValid;

    m_published_date_isValid = ::OpenAPI::fromJsonValue(m_published_date, json[QString("publishedDate")]);
    m_published_date_isSet = !json[QString("publishedDate")].isNull() && m_published_date_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAILibraryItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILibraryItem::asJsonObject() const {
    QJsonObject obj;
    if (m_completion_date_isSet) {
        obj.insert(QString("completionDate"), ::OpenAPI::toJsonValue(m_completion_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_external_url_isSet) {
        obj.insert(QString("externalUrl"), ::OpenAPI::toJsonValue(m_external_url));
    }
    if (m_files.size() > 0) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_published_by_isSet) {
        obj.insert(QString("publishedBy"), ::OpenAPI::toJsonValue(m_published_by));
    }
    if (m_published_date_isSet) {
        obj.insert(QString("publishedDate"), ::OpenAPI::toJsonValue(m_published_date));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAILibraryItem::getCompletionDate() const {
    return m_completion_date;
}
void OAILibraryItem::setCompletionDate(const QString &completion_date) {
    m_completion_date = completion_date;
    m_completion_date_isSet = true;
}

bool OAILibraryItem::is_completion_date_Set() const{
    return m_completion_date_isSet;
}

bool OAILibraryItem::is_completion_date_Valid() const{
    return m_completion_date_isValid;
}

QString OAILibraryItem::getDescription() const {
    return m_description;
}
void OAILibraryItem::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILibraryItem::is_description_Set() const{
    return m_description_isSet;
}

bool OAILibraryItem::is_description_Valid() const{
    return m_description_isValid;
}

QString OAILibraryItem::getExternalUrl() const {
    return m_external_url;
}
void OAILibraryItem::setExternalUrl(const QString &external_url) {
    m_external_url = external_url;
    m_external_url_isSet = true;
}

bool OAILibraryItem::is_external_url_Set() const{
    return m_external_url_isSet;
}

bool OAILibraryItem::is_external_url_Valid() const{
    return m_external_url_isValid;
}

QList<OAIHttpFileElement> OAILibraryItem::getFiles() const {
    return m_files;
}
void OAILibraryItem::setFiles(const QList<OAIHttpFileElement> &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAILibraryItem::is_files_Set() const{
    return m_files_isSet;
}

bool OAILibraryItem::is_files_Valid() const{
    return m_files_isValid;
}

qint64 OAILibraryItem::getId() const {
    return m_id;
}
void OAILibraryItem::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILibraryItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAILibraryItem::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILibraryItem::getPublishedBy() const {
    return m_published_by;
}
void OAILibraryItem::setPublishedBy(const QString &published_by) {
    m_published_by = published_by;
    m_published_by_isSet = true;
}

bool OAILibraryItem::is_published_by_Set() const{
    return m_published_by_isSet;
}

bool OAILibraryItem::is_published_by_Valid() const{
    return m_published_by_isValid;
}

QString OAILibraryItem::getPublishedDate() const {
    return m_published_date;
}
void OAILibraryItem::setPublishedDate(const QString &published_date) {
    m_published_date = published_date;
    m_published_date_isSet = true;
}

bool OAILibraryItem::is_published_date_Set() const{
    return m_published_date_isSet;
}

bool OAILibraryItem::is_published_date_Valid() const{
    return m_published_date_isValid;
}

QString OAILibraryItem::getTitle() const {
    return m_title;
}
void OAILibraryItem::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAILibraryItem::is_title_Set() const{
    return m_title_isSet;
}

bool OAILibraryItem::is_title_Valid() const{
    return m_title_isValid;
}

QString OAILibraryItem::getType() const {
    return m_type;
}
void OAILibraryItem::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILibraryItem::is_type_Set() const{
    return m_type_isSet;
}

bool OAILibraryItem::is_type_Valid() const{
    return m_type_isValid;
}

bool OAILibraryItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completion_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILibraryItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
