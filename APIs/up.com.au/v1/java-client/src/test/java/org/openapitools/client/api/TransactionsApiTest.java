/*
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetTransactionResponse;
import org.openapitools.client.model.ListTransactionsResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.TransactionStatusEnum;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionsApi
 */
@Disabled
public class TransactionsApiTest {

    private final TransactionsApi api = new TransactionsApi();

    /**
     * List transactions by account
     *
     * Retrieve a list of all transactions for a specific account. The returned list is [paginated](#pagination) and can be scrolled by following the &#x60;next&#x60; and &#x60;prev&#x60; links where present. To narrow the results to a specific date range pass one or both of &#x60;filter[since]&#x60; and &#x60;filter[until]&#x60; in the query string. These filter parameters **should not** be used for pagination. Results are ordered newest first to oldest last. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsAccountIdTransactionsGetTest() throws ApiException {
        String accountId = null;
        Integer pageSize = null;
        TransactionStatusEnum filterStatus = null;
        OffsetDateTime filterSince = null;
        OffsetDateTime filterUntil = null;
        String filterCategory = null;
        String filterTag = null;
        ListTransactionsResponse response = api.accountsAccountIdTransactionsGet(accountId, pageSize, filterStatus, filterSince, filterUntil, filterCategory, filterTag);
        // TODO: test validations
    }

    /**
     * List transactions
     *
     * Retrieve a list of all transactions across all accounts for the currently authenticated user. The returned list is [paginated](#pagination) and can be scrolled by following the &#x60;next&#x60; and &#x60;prev&#x60; links where present. To narrow the results to a specific date range pass one or both of &#x60;filter[since]&#x60; and &#x60;filter[until]&#x60; in the query string. These filter parameters **should not** be used for pagination. Results are ordered newest first to oldest last. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionsGetTest() throws ApiException {
        Integer pageSize = null;
        TransactionStatusEnum filterStatus = null;
        OffsetDateTime filterSince = null;
        OffsetDateTime filterUntil = null;
        String filterCategory = null;
        String filterTag = null;
        ListTransactionsResponse response = api.transactionsGet(pageSize, filterStatus, filterSince, filterUntil, filterCategory, filterTag);
        // TODO: test validations
    }

    /**
     * Retrieve transaction
     *
     * Retrieve a specific transaction by providing its unique identifier. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionsIdGetTest() throws ApiException {
        String id = null;
        GetTransactionResponse response = api.transactionsIdGet(id);
        // TODO: test validations
    }

}
