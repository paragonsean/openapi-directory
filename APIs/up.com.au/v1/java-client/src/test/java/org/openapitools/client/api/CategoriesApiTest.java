/*
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetCategoryResponse;
import org.openapitools.client.model.ListCategoriesResponse;
import org.openapitools.client.model.UpdateTransactionCategoryRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CategoriesApi
 */
@Disabled
public class CategoriesApiTest {

    private final CategoriesApi api = new CategoriesApi();

    /**
     * List categories
     *
     * Retrieve a list of all categories and their ancestry. The returned list is not paginated. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoriesGetTest() throws ApiException {
        String filterParent = null;
        ListCategoriesResponse response = api.categoriesGet(filterParent);
        // TODO: test validations
    }

    /**
     * Retrieve category
     *
     * Retrieve a specific category by providing its unique identifier. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoriesIdGetTest() throws ApiException {
        String id = null;
        GetCategoryResponse response = api.categoriesIdGet(id);
        // TODO: test validations
    }

    /**
     * Categorize transaction
     *
     * Updates the category associated with a transaction. Only transactions for which &#x60;isCategorizable&#x60; is set to true support this operation. The &#x60;id&#x60; is taken from the list exposed on &#x60;/categories&#x60; and cannot be one of the top-level (parent) categories. To de-categorize a transaction, set the entire &#x60;data&#x60; key to &#x60;null&#x60;. An HTTP &#x60;204&#x60; is returned on success. The associated category, along with its request URL is also exposed via the &#x60;category&#x60; relationship on the transaction resource returned from &#x60;/transactions/{id}&#x60;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionsTransactionIdRelationshipsCategoryPatchTest() throws ApiException {
        String transactionId = null;
        UpdateTransactionCategoryRequest updateTransactionCategoryRequest = null;
        api.transactionsTransactionIdRelationshipsCategoryPatch(transactionId, updateTransactionCategoryRequest);
        // TODO: test validations
    }

}
