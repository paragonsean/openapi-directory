/*
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ListTagsResponse;
import org.openapitools.client.model.UpdateTransactionTagsRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TagsApi
 */
@Disabled
public class TagsApiTest {

    private final TagsApi api = new TagsApi();

    /**
     * List tags
     *
     * Retrieve a list of all tags currently in use. The returned list is [paginated](#pagination) and can be scrolled by following the &#x60;next&#x60; and &#x60;prev&#x60; links where present. Results are ordered lexicographically. The &#x60;transactions&#x60; relationship for each tag exposes a link to get the transactions with the given tag. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagsGetTest() throws ApiException {
        Integer pageSize = null;
        ListTagsResponse response = api.tagsGet(pageSize);
        // TODO: test validations
    }

    /**
     * Remove tags from transaction
     *
     * Disassociates one or more tags from a specific transaction. Tags that are not associated are silently ignored. An HTTP &#x60;204&#x60; is returned on success. The associated tags, along with this request URL, are also exposed via the &#x60;tags&#x60; relationship on the transaction resource returned from &#x60;/transactions/{id}&#x60;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionsTransactionIdRelationshipsTagsDeleteTest() throws ApiException {
        String transactionId = null;
        UpdateTransactionTagsRequest updateTransactionTagsRequest = null;
        api.transactionsTransactionIdRelationshipsTagsDelete(transactionId, updateTransactionTagsRequest);
        // TODO: test validations
    }

    /**
     * Add tags to transaction
     *
     * Associates one or more tags with a specific transaction. No more than 6 tags may be present on any single transaction. Duplicate tags are silently ignored. An HTTP &#x60;204&#x60; is returned on success. The associated tags, along with this request URL, are also exposed via the &#x60;tags&#x60; relationship on the transaction resource returned from &#x60;/transactions/{id}&#x60;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionsTransactionIdRelationshipsTagsPostTest() throws ApiException {
        String transactionId = null;
        UpdateTransactionTagsRequest updateTransactionTagsRequest = null;
        api.transactionsTransactionIdRelationshipsTagsPost(transactionId, updateTransactionTagsRequest);
        // TODO: test validations
    }

}
