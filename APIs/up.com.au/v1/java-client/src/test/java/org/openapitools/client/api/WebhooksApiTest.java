/*
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateWebhookRequest;
import org.openapitools.client.model.CreateWebhookResponse;
import org.openapitools.client.model.GetWebhookResponse;
import org.openapitools.client.model.ListWebhookDeliveryLogsResponse;
import org.openapitools.client.model.ListWebhooksResponse;
import org.openapitools.client.model.WebhookEventCallback;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebhooksApi
 */
@Disabled
public class WebhooksApiTest {

    private final WebhooksApi api = new WebhooksApi();

    /**
     * List webhooks
     *
     * Retrieve a list of configured webhooks. The returned list is [paginated](#pagination) and can be scrolled by following the &#x60;next&#x60; and &#x60;prev&#x60; links where present. Results are ordered oldest first to newest last. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webhooksGetTest() throws ApiException {
        Integer pageSize = null;
        ListWebhooksResponse response = api.webhooksGet(pageSize);
        // TODO: test validations
    }

    /**
     * Delete webhook
     *
     * Delete a specific webhook by providing its unique identifier. Once deleted, webhook events will no longer be sent to the configured URL. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webhooksIdDeleteTest() throws ApiException {
        String id = null;
        api.webhooksIdDelete(id);
        // TODO: test validations
    }

    /**
     * Retrieve webhook
     *
     * Retrieve a specific webhook by providing its unique identifier. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webhooksIdGetTest() throws ApiException {
        String id = null;
        GetWebhookResponse response = api.webhooksIdGet(id);
        // TODO: test validations
    }

    /**
     * Create webhook
     *
     * Create a new webhook with a given URL. The URL will receive webhook events as JSON-encoded &#x60;POST&#x60; requests. The URL must respond with a HTTP &#x60;200&#x60; status on success.  There is currently a limit of 10 webhooks at any given time. Once this limit is reached, existing webhooks will need to be deleted before new webhooks can be created.  Event delivery is retried with exponential backoff if the URL is unreachable or it does not respond with a &#x60;200&#x60; status. The response includes a &#x60;secretKey&#x60; attribute, which is used to sign requests sent to the webhook URL. It will not be returned from any other endpoints within the Up API. If the &#x60;secretKey&#x60; is lost, simply create a new webhook with the same URL, capture its &#x60;secretKey&#x60; and then delete the original webhook. See [Handling webhook events](#callback_post_webhookURL) for details on how to process webhook events.  It is probably a good idea to test the webhook by [sending it a &#x60;PING&#x60; event](#post_webhooks_webhookId_ping) after creating it. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webhooksPostTest() throws ApiException {
        CreateWebhookRequest createWebhookRequest = null;
        CreateWebhookResponse response = api.webhooksPost(createWebhookRequest);
        // TODO: test validations
    }

    /**
     * List webhook logs
     *
     * Retrieve a list of delivery logs for a webhook by providing its unique identifier. This is useful for analysis and debugging purposes. The returned list is [paginated](#pagination) and can be scrolled by following the &#x60;next&#x60; and &#x60;prev&#x60; links where present. Results are ordered newest first to oldest last. Logs may be automatically purged after a period of time. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webhooksWebhookIdLogsGetTest() throws ApiException {
        String webhookId = null;
        Integer pageSize = null;
        ListWebhookDeliveryLogsResponse response = api.webhooksWebhookIdLogsGet(webhookId, pageSize);
        // TODO: test validations
    }

    /**
     * Ping webhook
     *
     * Send a &#x60;PING&#x60; event to a webhook by providing its unique identifier. This is useful for testing and debugging purposes. The event is delivered asynchronously and its data is returned in the response to this request. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webhooksWebhookIdPingPostTest() throws ApiException {
        String webhookId = null;
        WebhookEventCallback response = api.webhooksWebhookIdPingPost(webhookId);
        // TODO: test validations
    }

}
