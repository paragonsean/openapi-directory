/*
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetTransactionResponse;
import org.openapitools.client.model.ListTransactionsResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.TransactionStatusEnum;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accountsAccountIdTransactionsGet
     * @param accountId The unique identifier for the account.  (required)
     * @param pageSize The number of records to return in each page.  (optional)
     * @param filterStatus The transaction status for which to return records. This can be used to filter &#x60;HELD&#x60; transactions from those that are &#x60;SETTLED&#x60;.  (optional)
     * @param filterSince The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes.  (optional)
     * @param filterUntil The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes.  (optional)
     * @param filterCategory The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a &#x60;404&#x60; response.  (optional)
     * @param filterTag A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsAccountIdTransactionsGetCall(String accountId, Integer pageSize, TransactionStatusEnum filterStatus, OffsetDateTime filterSince, OffsetDateTime filterUntil, String filterCategory, String filterTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/transactions"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[size]", pageSize));
        }

        if (filterStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[status]", filterStatus));
        }

        if (filterSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[since]", filterSince));
        }

        if (filterUntil != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[until]", filterUntil));
        }

        if (filterCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[category]", filterCategory));
        }

        if (filterTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[tag]", filterTag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsAccountIdTransactionsGetValidateBeforeCall(String accountId, Integer pageSize, TransactionStatusEnum filterStatus, OffsetDateTime filterSince, OffsetDateTime filterUntil, String filterCategory, String filterTag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling accountsAccountIdTransactionsGet(Async)");
        }

        return accountsAccountIdTransactionsGetCall(accountId, pageSize, filterStatus, filterSince, filterUntil, filterCategory, filterTag, _callback);

    }

    /**
     * List transactions by account
     * Retrieve a list of all transactions for a specific account. The returned list is [paginated](#pagination) and can be scrolled by following the &#x60;next&#x60; and &#x60;prev&#x60; links where present. To narrow the results to a specific date range pass one or both of &#x60;filter[since]&#x60; and &#x60;filter[until]&#x60; in the query string. These filter parameters **should not** be used for pagination. Results are ordered newest first to oldest last. 
     * @param accountId The unique identifier for the account.  (required)
     * @param pageSize The number of records to return in each page.  (optional)
     * @param filterStatus The transaction status for which to return records. This can be used to filter &#x60;HELD&#x60; transactions from those that are &#x60;SETTLED&#x60;.  (optional)
     * @param filterSince The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes.  (optional)
     * @param filterUntil The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes.  (optional)
     * @param filterCategory The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a &#x60;404&#x60; response.  (optional)
     * @param filterTag A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given.  (optional)
     * @return ListTransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ListTransactionsResponse accountsAccountIdTransactionsGet(String accountId, Integer pageSize, TransactionStatusEnum filterStatus, OffsetDateTime filterSince, OffsetDateTime filterUntil, String filterCategory, String filterTag) throws ApiException {
        ApiResponse<ListTransactionsResponse> localVarResp = accountsAccountIdTransactionsGetWithHttpInfo(accountId, pageSize, filterStatus, filterSince, filterUntil, filterCategory, filterTag);
        return localVarResp.getData();
    }

    /**
     * List transactions by account
     * Retrieve a list of all transactions for a specific account. The returned list is [paginated](#pagination) and can be scrolled by following the &#x60;next&#x60; and &#x60;prev&#x60; links where present. To narrow the results to a specific date range pass one or both of &#x60;filter[since]&#x60; and &#x60;filter[until]&#x60; in the query string. These filter parameters **should not** be used for pagination. Results are ordered newest first to oldest last. 
     * @param accountId The unique identifier for the account.  (required)
     * @param pageSize The number of records to return in each page.  (optional)
     * @param filterStatus The transaction status for which to return records. This can be used to filter &#x60;HELD&#x60; transactions from those that are &#x60;SETTLED&#x60;.  (optional)
     * @param filterSince The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes.  (optional)
     * @param filterUntil The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes.  (optional)
     * @param filterCategory The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a &#x60;404&#x60; response.  (optional)
     * @param filterTag A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given.  (optional)
     * @return ApiResponse&lt;ListTransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTransactionsResponse> accountsAccountIdTransactionsGetWithHttpInfo(String accountId, Integer pageSize, TransactionStatusEnum filterStatus, OffsetDateTime filterSince, OffsetDateTime filterUntil, String filterCategory, String filterTag) throws ApiException {
        okhttp3.Call localVarCall = accountsAccountIdTransactionsGetValidateBeforeCall(accountId, pageSize, filterStatus, filterSince, filterUntil, filterCategory, filterTag, null);
        Type localVarReturnType = new TypeToken<ListTransactionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List transactions by account (asynchronously)
     * Retrieve a list of all transactions for a specific account. The returned list is [paginated](#pagination) and can be scrolled by following the &#x60;next&#x60; and &#x60;prev&#x60; links where present. To narrow the results to a specific date range pass one or both of &#x60;filter[since]&#x60; and &#x60;filter[until]&#x60; in the query string. These filter parameters **should not** be used for pagination. Results are ordered newest first to oldest last. 
     * @param accountId The unique identifier for the account.  (required)
     * @param pageSize The number of records to return in each page.  (optional)
     * @param filterStatus The transaction status for which to return records. This can be used to filter &#x60;HELD&#x60; transactions from those that are &#x60;SETTLED&#x60;.  (optional)
     * @param filterSince The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes.  (optional)
     * @param filterUntil The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes.  (optional)
     * @param filterCategory The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a &#x60;404&#x60; response.  (optional)
     * @param filterTag A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsAccountIdTransactionsGetAsync(String accountId, Integer pageSize, TransactionStatusEnum filterStatus, OffsetDateTime filterSince, OffsetDateTime filterUntil, String filterCategory, String filterTag, final ApiCallback<ListTransactionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsAccountIdTransactionsGetValidateBeforeCall(accountId, pageSize, filterStatus, filterSince, filterUntil, filterCategory, filterTag, _callback);
        Type localVarReturnType = new TypeToken<ListTransactionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsGet
     * @param pageSize The number of records to return in each page.  (optional)
     * @param filterStatus The transaction status for which to return records. This can be used to filter &#x60;HELD&#x60; transactions from those that are &#x60;SETTLED&#x60;.  (optional)
     * @param filterSince The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes.  (optional)
     * @param filterUntil The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes.  (optional)
     * @param filterCategory The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a &#x60;404&#x60; response.  (optional)
     * @param filterTag A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsGetCall(Integer pageSize, TransactionStatusEnum filterStatus, OffsetDateTime filterSince, OffsetDateTime filterUntil, String filterCategory, String filterTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[size]", pageSize));
        }

        if (filterStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[status]", filterStatus));
        }

        if (filterSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[since]", filterSince));
        }

        if (filterUntil != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[until]", filterUntil));
        }

        if (filterCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[category]", filterCategory));
        }

        if (filterTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[tag]", filterTag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsGetValidateBeforeCall(Integer pageSize, TransactionStatusEnum filterStatus, OffsetDateTime filterSince, OffsetDateTime filterUntil, String filterCategory, String filterTag, final ApiCallback _callback) throws ApiException {
        return transactionsGetCall(pageSize, filterStatus, filterSince, filterUntil, filterCategory, filterTag, _callback);

    }

    /**
     * List transactions
     * Retrieve a list of all transactions across all accounts for the currently authenticated user. The returned list is [paginated](#pagination) and can be scrolled by following the &#x60;next&#x60; and &#x60;prev&#x60; links where present. To narrow the results to a specific date range pass one or both of &#x60;filter[since]&#x60; and &#x60;filter[until]&#x60; in the query string. These filter parameters **should not** be used for pagination. Results are ordered newest first to oldest last. 
     * @param pageSize The number of records to return in each page.  (optional)
     * @param filterStatus The transaction status for which to return records. This can be used to filter &#x60;HELD&#x60; transactions from those that are &#x60;SETTLED&#x60;.  (optional)
     * @param filterSince The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes.  (optional)
     * @param filterUntil The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes.  (optional)
     * @param filterCategory The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a &#x60;404&#x60; response.  (optional)
     * @param filterTag A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given.  (optional)
     * @return ListTransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ListTransactionsResponse transactionsGet(Integer pageSize, TransactionStatusEnum filterStatus, OffsetDateTime filterSince, OffsetDateTime filterUntil, String filterCategory, String filterTag) throws ApiException {
        ApiResponse<ListTransactionsResponse> localVarResp = transactionsGetWithHttpInfo(pageSize, filterStatus, filterSince, filterUntil, filterCategory, filterTag);
        return localVarResp.getData();
    }

    /**
     * List transactions
     * Retrieve a list of all transactions across all accounts for the currently authenticated user. The returned list is [paginated](#pagination) and can be scrolled by following the &#x60;next&#x60; and &#x60;prev&#x60; links where present. To narrow the results to a specific date range pass one or both of &#x60;filter[since]&#x60; and &#x60;filter[until]&#x60; in the query string. These filter parameters **should not** be used for pagination. Results are ordered newest first to oldest last. 
     * @param pageSize The number of records to return in each page.  (optional)
     * @param filterStatus The transaction status for which to return records. This can be used to filter &#x60;HELD&#x60; transactions from those that are &#x60;SETTLED&#x60;.  (optional)
     * @param filterSince The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes.  (optional)
     * @param filterUntil The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes.  (optional)
     * @param filterCategory The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a &#x60;404&#x60; response.  (optional)
     * @param filterTag A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given.  (optional)
     * @return ApiResponse&lt;ListTransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTransactionsResponse> transactionsGetWithHttpInfo(Integer pageSize, TransactionStatusEnum filterStatus, OffsetDateTime filterSince, OffsetDateTime filterUntil, String filterCategory, String filterTag) throws ApiException {
        okhttp3.Call localVarCall = transactionsGetValidateBeforeCall(pageSize, filterStatus, filterSince, filterUntil, filterCategory, filterTag, null);
        Type localVarReturnType = new TypeToken<ListTransactionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List transactions (asynchronously)
     * Retrieve a list of all transactions across all accounts for the currently authenticated user. The returned list is [paginated](#pagination) and can be scrolled by following the &#x60;next&#x60; and &#x60;prev&#x60; links where present. To narrow the results to a specific date range pass one or both of &#x60;filter[since]&#x60; and &#x60;filter[until]&#x60; in the query string. These filter parameters **should not** be used for pagination. Results are ordered newest first to oldest last. 
     * @param pageSize The number of records to return in each page.  (optional)
     * @param filterStatus The transaction status for which to return records. This can be used to filter &#x60;HELD&#x60; transactions from those that are &#x60;SETTLED&#x60;.  (optional)
     * @param filterSince The start date-time from which to return records, formatted according to rfc-3339. Not to be used for pagination purposes.  (optional)
     * @param filterUntil The end date-time up to which to return records, formatted according to rfc-3339. Not to be used for pagination purposes.  (optional)
     * @param filterCategory The category identifier for which to filter transactions. Both parent and child categories can be filtered through this parameter. Providing an invalid category identifier results in a &#x60;404&#x60; response.  (optional)
     * @param filterTag A transaction tag to filter for which to return records. If the tag does not exist, zero records are returned and a success response is given.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsGetAsync(Integer pageSize, TransactionStatusEnum filterStatus, OffsetDateTime filterSince, OffsetDateTime filterUntil, String filterCategory, String filterTag, final ApiCallback<ListTransactionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsGetValidateBeforeCall(pageSize, filterStatus, filterSince, filterUntil, filterCategory, filterTag, _callback);
        Type localVarReturnType = new TypeToken<ListTransactionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsIdGet
     * @param id The unique identifier for the transaction.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling transactionsIdGet(Async)");
        }

        return transactionsIdGetCall(id, _callback);

    }

    /**
     * Retrieve transaction
     * Retrieve a specific transaction by providing its unique identifier. 
     * @param id The unique identifier for the transaction.  (required)
     * @return GetTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetTransactionResponse transactionsIdGet(String id) throws ApiException {
        ApiResponse<GetTransactionResponse> localVarResp = transactionsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieve transaction
     * Retrieve a specific transaction by providing its unique identifier. 
     * @param id The unique identifier for the transaction.  (required)
     * @return ApiResponse&lt;GetTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTransactionResponse> transactionsIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = transactionsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GetTransactionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve transaction (asynchronously)
     * Retrieve a specific transaction by providing its unique identifier. 
     * @param id The unique identifier for the transaction.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsIdGetAsync(String id, final ApiCallback<GetTransactionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GetTransactionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
