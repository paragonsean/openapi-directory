/*
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CashbackObject;
import org.openapitools.client.model.HoldInfoObject;
import org.openapitools.client.model.MoneyObject;
import org.openapitools.client.model.RoundUpObject;
import org.openapitools.client.model.TransactionStatusEnum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TransactionResourceAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:05.017128-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransactionResourceAttributes {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private MoneyObject amount;

  public static final String SERIALIZED_NAME_CASHBACK = "cashback";
  @SerializedName(SERIALIZED_NAME_CASHBACK)
  private CashbackObject cashback;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FOREIGN_AMOUNT = "foreignAmount";
  @SerializedName(SERIALIZED_NAME_FOREIGN_AMOUNT)
  private MoneyObject foreignAmount;

  public static final String SERIALIZED_NAME_HOLD_INFO = "holdInfo";
  @SerializedName(SERIALIZED_NAME_HOLD_INFO)
  private HoldInfoObject holdInfo;

  public static final String SERIALIZED_NAME_IS_CATEGORIZABLE = "isCategorizable";
  @SerializedName(SERIALIZED_NAME_IS_CATEGORIZABLE)
  private Boolean isCategorizable;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_RAW_TEXT = "rawText";
  @SerializedName(SERIALIZED_NAME_RAW_TEXT)
  private String rawText;

  public static final String SERIALIZED_NAME_ROUND_UP = "roundUp";
  @SerializedName(SERIALIZED_NAME_ROUND_UP)
  private RoundUpObject roundUp;

  public static final String SERIALIZED_NAME_SETTLED_AT = "settledAt";
  @SerializedName(SERIALIZED_NAME_SETTLED_AT)
  private OffsetDateTime settledAt;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private TransactionStatusEnum status;

  public TransactionResourceAttributes() {
  }

  public TransactionResourceAttributes amount(MoneyObject amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The amount of this transaction in Australian dollars. For transactions that were once &#x60;HELD&#x60; but are now &#x60;SETTLED&#x60;, refer to the &#x60;holdInfo&#x60; field for the original &#x60;amount&#x60; the transaction was &#x60;HELD&#x60; at. 
   * @return amount
   */
  @javax.annotation.Nonnull
  public MoneyObject getAmount() {
    return amount;
  }

  public void setAmount(MoneyObject amount) {
    this.amount = amount;
  }


  public TransactionResourceAttributes cashback(CashbackObject cashback) {
    this.cashback = cashback;
    return this;
  }

  /**
   * If all or part of this transaction was instantly reimbursed in the form of cashback, details of the reimbursement. 
   * @return cashback
   */
  @javax.annotation.Nullable
  public CashbackObject getCashback() {
    return cashback;
  }

  public void setCashback(CashbackObject cashback) {
    this.cashback = cashback;
  }


  public TransactionResourceAttributes createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The date-time at which this transaction was first encountered. 
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public TransactionResourceAttributes description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A short description for this transaction. Usually the merchant name for purchases. 
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public TransactionResourceAttributes foreignAmount(MoneyObject foreignAmount) {
    this.foreignAmount = foreignAmount;
    return this;
  }

  /**
   * The foreign currency amount of this transaction. This field will be &#x60;null&#x60; for domestic transactions. The amount was converted to the AUD amount reflected in the &#x60;amount&#x60; of this transaction. Refer to the &#x60;holdInfo&#x60; field for the original &#x60;foreignAmount&#x60; the transaction was &#x60;HELD&#x60; at. 
   * @return foreignAmount
   */
  @javax.annotation.Nullable
  public MoneyObject getForeignAmount() {
    return foreignAmount;
  }

  public void setForeignAmount(MoneyObject foreignAmount) {
    this.foreignAmount = foreignAmount;
  }


  public TransactionResourceAttributes holdInfo(HoldInfoObject holdInfo) {
    this.holdInfo = holdInfo;
    return this;
  }

  /**
   * If this transaction is currently in the &#x60;HELD&#x60; status, or was ever in the &#x60;HELD&#x60; status, the &#x60;amount&#x60; and &#x60;foreignAmount&#x60; of the transaction while &#x60;HELD&#x60;. 
   * @return holdInfo
   */
  @javax.annotation.Nullable
  public HoldInfoObject getHoldInfo() {
    return holdInfo;
  }

  public void setHoldInfo(HoldInfoObject holdInfo) {
    this.holdInfo = holdInfo;
  }


  public TransactionResourceAttributes isCategorizable(Boolean isCategorizable) {
    this.isCategorizable = isCategorizable;
    return this;
  }

  /**
   * Boolean flag set to true on transactions that support the use of categories. 
   * @return isCategorizable
   */
  @javax.annotation.Nonnull
  public Boolean getIsCategorizable() {
    return isCategorizable;
  }

  public void setIsCategorizable(Boolean isCategorizable) {
    this.isCategorizable = isCategorizable;
  }


  public TransactionResourceAttributes message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Attached message for this transaction, such as a payment message, or a transfer note. 
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public TransactionResourceAttributes rawText(String rawText) {
    this.rawText = rawText;
    return this;
  }

  /**
   * The original, unprocessed text of the transaction. This is often not a perfect indicator of the actual merchant, but it is useful for reconciliation purposes in some cases. 
   * @return rawText
   */
  @javax.annotation.Nullable
  public String getRawText() {
    return rawText;
  }

  public void setRawText(String rawText) {
    this.rawText = rawText;
  }


  public TransactionResourceAttributes roundUp(RoundUpObject roundUp) {
    this.roundUp = roundUp;
    return this;
  }

  /**
   * Details of how this transaction was rounded-up. If no Round Up was applied this field will be &#x60;null&#x60;. 
   * @return roundUp
   */
  @javax.annotation.Nullable
  public RoundUpObject getRoundUp() {
    return roundUp;
  }

  public void setRoundUp(RoundUpObject roundUp) {
    this.roundUp = roundUp;
  }


  public TransactionResourceAttributes settledAt(OffsetDateTime settledAt) {
    this.settledAt = settledAt;
    return this;
  }

  /**
   * The date-time at which this transaction settled. This field will be &#x60;null&#x60; for transactions that are currently in the &#x60;HELD&#x60; status. 
   * @return settledAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSettledAt() {
    return settledAt;
  }

  public void setSettledAt(OffsetDateTime settledAt) {
    this.settledAt = settledAt;
  }


  public TransactionResourceAttributes status(TransactionStatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The current processing status of this transaction, according to whether or not this transaction has settled or is still held. 
   * @return status
   */
  @javax.annotation.Nonnull
  public TransactionStatusEnum getStatus() {
    return status;
  }

  public void setStatus(TransactionStatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionResourceAttributes transactionResourceAttributes = (TransactionResourceAttributes) o;
    return Objects.equals(this.amount, transactionResourceAttributes.amount) &&
        Objects.equals(this.cashback, transactionResourceAttributes.cashback) &&
        Objects.equals(this.createdAt, transactionResourceAttributes.createdAt) &&
        Objects.equals(this.description, transactionResourceAttributes.description) &&
        Objects.equals(this.foreignAmount, transactionResourceAttributes.foreignAmount) &&
        Objects.equals(this.holdInfo, transactionResourceAttributes.holdInfo) &&
        Objects.equals(this.isCategorizable, transactionResourceAttributes.isCategorizable) &&
        Objects.equals(this.message, transactionResourceAttributes.message) &&
        Objects.equals(this.rawText, transactionResourceAttributes.rawText) &&
        Objects.equals(this.roundUp, transactionResourceAttributes.roundUp) &&
        Objects.equals(this.settledAt, transactionResourceAttributes.settledAt) &&
        Objects.equals(this.status, transactionResourceAttributes.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, cashback, createdAt, description, foreignAmount, holdInfo, isCategorizable, message, rawText, roundUp, settledAt, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionResourceAttributes {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    cashback: ").append(toIndentedString(cashback)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    foreignAmount: ").append(toIndentedString(foreignAmount)).append("\n");
    sb.append("    holdInfo: ").append(toIndentedString(holdInfo)).append("\n");
    sb.append("    isCategorizable: ").append(toIndentedString(isCategorizable)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    rawText: ").append(toIndentedString(rawText)).append("\n");
    sb.append("    roundUp: ").append(toIndentedString(roundUp)).append("\n");
    sb.append("    settledAt: ").append(toIndentedString(settledAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("cashback");
    openapiFields.add("createdAt");
    openapiFields.add("description");
    openapiFields.add("foreignAmount");
    openapiFields.add("holdInfo");
    openapiFields.add("isCategorizable");
    openapiFields.add("message");
    openapiFields.add("rawText");
    openapiFields.add("roundUp");
    openapiFields.add("settledAt");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("cashback");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("foreignAmount");
    openapiRequiredFields.add("holdInfo");
    openapiRequiredFields.add("isCategorizable");
    openapiRequiredFields.add("message");
    openapiRequiredFields.add("rawText");
    openapiRequiredFields.add("roundUp");
    openapiRequiredFields.add("settledAt");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransactionResourceAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionResourceAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionResourceAttributes is not found in the empty JSON string", TransactionResourceAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransactionResourceAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionResourceAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionResourceAttributes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `amount`
      MoneyObject.validateJsonElement(jsonObj.get("amount"));
      // validate the required field `cashback`
      CashbackObject.validateJsonElement(jsonObj.get("cashback"));
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `foreignAmount`
      MoneyObject.validateJsonElement(jsonObj.get("foreignAmount"));
      // validate the required field `holdInfo`
      HoldInfoObject.validateJsonElement(jsonObj.get("holdInfo"));
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("rawText") != null && !jsonObj.get("rawText").isJsonNull()) && !jsonObj.get("rawText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rawText").toString()));
      }
      // validate the required field `roundUp`
      RoundUpObject.validateJsonElement(jsonObj.get("roundUp"));
      // validate the required field `status`
      TransactionStatusEnum.validateJsonElement(jsonObj.get("status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionResourceAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionResourceAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionResourceAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionResourceAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionResourceAttributes>() {
           @Override
           public void write(JsonWriter out, TransactionResourceAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionResourceAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransactionResourceAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransactionResourceAttributes
   * @throws IOException if the JSON string is invalid with respect to TransactionResourceAttributes
   */
  public static TransactionResourceAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionResourceAttributes.class);
  }

  /**
   * Convert an instance of TransactionResourceAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

