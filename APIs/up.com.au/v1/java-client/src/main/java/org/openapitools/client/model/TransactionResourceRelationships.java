/*
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CategoryResourceRelationshipsParent;
import org.openapitools.client.model.TransactionResourceRelationshipsAccount;
import org.openapitools.client.model.TransactionResourceRelationshipsCategory;
import org.openapitools.client.model.TransactionResourceRelationshipsTags;
import org.openapitools.client.model.TransactionResourceRelationshipsTransferAccount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TransactionResourceRelationships
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:05.017128-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransactionResourceRelationships {
  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private TransactionResourceRelationshipsAccount account;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private TransactionResourceRelationshipsCategory category;

  public static final String SERIALIZED_NAME_PARENT_CATEGORY = "parentCategory";
  @SerializedName(SERIALIZED_NAME_PARENT_CATEGORY)
  private CategoryResourceRelationshipsParent parentCategory;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private TransactionResourceRelationshipsTags tags;

  public static final String SERIALIZED_NAME_TRANSFER_ACCOUNT = "transferAccount";
  @SerializedName(SERIALIZED_NAME_TRANSFER_ACCOUNT)
  private TransactionResourceRelationshipsTransferAccount transferAccount;

  public TransactionResourceRelationships() {
  }

  public TransactionResourceRelationships account(TransactionResourceRelationshipsAccount account) {
    this.account = account;
    return this;
  }

  /**
   * Get account
   * @return account
   */
  @javax.annotation.Nonnull
  public TransactionResourceRelationshipsAccount getAccount() {
    return account;
  }

  public void setAccount(TransactionResourceRelationshipsAccount account) {
    this.account = account;
  }


  public TransactionResourceRelationships category(TransactionResourceRelationshipsCategory category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nonnull
  public TransactionResourceRelationshipsCategory getCategory() {
    return category;
  }

  public void setCategory(TransactionResourceRelationshipsCategory category) {
    this.category = category;
  }


  public TransactionResourceRelationships parentCategory(CategoryResourceRelationshipsParent parentCategory) {
    this.parentCategory = parentCategory;
    return this;
  }

  /**
   * Get parentCategory
   * @return parentCategory
   */
  @javax.annotation.Nonnull
  public CategoryResourceRelationshipsParent getParentCategory() {
    return parentCategory;
  }

  public void setParentCategory(CategoryResourceRelationshipsParent parentCategory) {
    this.parentCategory = parentCategory;
  }


  public TransactionResourceRelationships tags(TransactionResourceRelationshipsTags tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nonnull
  public TransactionResourceRelationshipsTags getTags() {
    return tags;
  }

  public void setTags(TransactionResourceRelationshipsTags tags) {
    this.tags = tags;
  }


  public TransactionResourceRelationships transferAccount(TransactionResourceRelationshipsTransferAccount transferAccount) {
    this.transferAccount = transferAccount;
    return this;
  }

  /**
   * Get transferAccount
   * @return transferAccount
   */
  @javax.annotation.Nonnull
  public TransactionResourceRelationshipsTransferAccount getTransferAccount() {
    return transferAccount;
  }

  public void setTransferAccount(TransactionResourceRelationshipsTransferAccount transferAccount) {
    this.transferAccount = transferAccount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionResourceRelationships transactionResourceRelationships = (TransactionResourceRelationships) o;
    return Objects.equals(this.account, transactionResourceRelationships.account) &&
        Objects.equals(this.category, transactionResourceRelationships.category) &&
        Objects.equals(this.parentCategory, transactionResourceRelationships.parentCategory) &&
        Objects.equals(this.tags, transactionResourceRelationships.tags) &&
        Objects.equals(this.transferAccount, transactionResourceRelationships.transferAccount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, category, parentCategory, tags, transferAccount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionResourceRelationships {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    parentCategory: ").append(toIndentedString(parentCategory)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    transferAccount: ").append(toIndentedString(transferAccount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account");
    openapiFields.add("category");
    openapiFields.add("parentCategory");
    openapiFields.add("tags");
    openapiFields.add("transferAccount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account");
    openapiRequiredFields.add("category");
    openapiRequiredFields.add("parentCategory");
    openapiRequiredFields.add("tags");
    openapiRequiredFields.add("transferAccount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransactionResourceRelationships
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionResourceRelationships.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionResourceRelationships is not found in the empty JSON string", TransactionResourceRelationships.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransactionResourceRelationships.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionResourceRelationships` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionResourceRelationships.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `account`
      TransactionResourceRelationshipsAccount.validateJsonElement(jsonObj.get("account"));
      // validate the required field `category`
      TransactionResourceRelationshipsCategory.validateJsonElement(jsonObj.get("category"));
      // validate the required field `parentCategory`
      CategoryResourceRelationshipsParent.validateJsonElement(jsonObj.get("parentCategory"));
      // validate the required field `tags`
      TransactionResourceRelationshipsTags.validateJsonElement(jsonObj.get("tags"));
      // validate the required field `transferAccount`
      TransactionResourceRelationshipsTransferAccount.validateJsonElement(jsonObj.get("transferAccount"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionResourceRelationships.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionResourceRelationships' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionResourceRelationships> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionResourceRelationships.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionResourceRelationships>() {
           @Override
           public void write(JsonWriter out, TransactionResourceRelationships value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionResourceRelationships read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransactionResourceRelationships given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransactionResourceRelationships
   * @throws IOException if the JSON string is invalid with respect to TransactionResourceRelationships
   */
  public static TransactionResourceRelationships fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionResourceRelationships.class);
  }

  /**
   * Convert an instance of TransactionResourceRelationships to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

