/**
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWebhooksApi_H
#define OAI_OAIWebhooksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateWebhookRequest.h"
#include "OAICreateWebhookResponse.h"
#include "OAIGetWebhookResponse.h"
#include "OAIListWebhookDeliveryLogsResponse.h"
#include "OAIListWebhooksResponse.h"
#include "OAIWebhookEventCallback.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWebhooksApi : public QObject {
    Q_OBJECT

public:
    OAIWebhooksApi(const int timeOut = 0);
    ~OAIWebhooksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  page_size qint32 [optional]
    */
    virtual void webhooksGet(const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void webhooksIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void webhooksIdGet(const QString &id);

    /**
    * @param[in]  oai_create_webhook_request OAICreateWebhookRequest [optional]
    */
    virtual void webhooksPost(const ::OpenAPI::OptionalParam<OAICreateWebhookRequest> &oai_create_webhook_request = ::OpenAPI::OptionalParam<OAICreateWebhookRequest>());

    /**
    * @param[in]  webhook_id QString [required]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void webhooksWebhookIdLogsGet(const QString &webhook_id, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  webhook_id QString [required]
    */
    virtual void webhooksWebhookIdPingPost(const QString &webhook_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void webhooksGetCallback(OAIHttpRequestWorker *worker);
    void webhooksIdDeleteCallback(OAIHttpRequestWorker *worker);
    void webhooksIdGetCallback(OAIHttpRequestWorker *worker);
    void webhooksPostCallback(OAIHttpRequestWorker *worker);
    void webhooksWebhookIdLogsGetCallback(OAIHttpRequestWorker *worker);
    void webhooksWebhookIdPingPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void webhooksGetSignal(OAIListWebhooksResponse summary);
    void webhooksIdDeleteSignal();
    void webhooksIdGetSignal(OAIGetWebhookResponse summary);
    void webhooksPostSignal(OAICreateWebhookResponse summary);
    void webhooksWebhookIdLogsGetSignal(OAIListWebhookDeliveryLogsResponse summary);
    void webhooksWebhookIdPingPostSignal(OAIWebhookEventCallback summary);


    void webhooksGetSignalFull(OAIHttpRequestWorker *worker, OAIListWebhooksResponse summary);
    void webhooksIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void webhooksIdGetSignalFull(OAIHttpRequestWorker *worker, OAIGetWebhookResponse summary);
    void webhooksPostSignalFull(OAIHttpRequestWorker *worker, OAICreateWebhookResponse summary);
    void webhooksWebhookIdLogsGetSignalFull(OAIHttpRequestWorker *worker, OAIListWebhookDeliveryLogsResponse summary);
    void webhooksWebhookIdPingPostSignalFull(OAIHttpRequestWorker *worker, OAIWebhookEventCallback summary);

    Q_DECL_DEPRECATED_X("Use webhooksGetSignalError() instead")
    void webhooksGetSignalE(OAIListWebhooksResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksGetSignalError(OAIListWebhooksResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksIdDeleteSignalError() instead")
    void webhooksIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksIdGetSignalError() instead")
    void webhooksIdGetSignalE(OAIGetWebhookResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksIdGetSignalError(OAIGetWebhookResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksPostSignalError() instead")
    void webhooksPostSignalE(OAICreateWebhookResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksPostSignalError(OAICreateWebhookResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksWebhookIdLogsGetSignalError() instead")
    void webhooksWebhookIdLogsGetSignalE(OAIListWebhookDeliveryLogsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksWebhookIdLogsGetSignalError(OAIListWebhookDeliveryLogsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksWebhookIdPingPostSignalError() instead")
    void webhooksWebhookIdPingPostSignalE(OAIWebhookEventCallback summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksWebhookIdPingPostSignalError(OAIWebhookEventCallback summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use webhooksGetSignalErrorFull() instead")
    void webhooksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksIdDeleteSignalErrorFull() instead")
    void webhooksIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksIdGetSignalErrorFull() instead")
    void webhooksIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksPostSignalErrorFull() instead")
    void webhooksPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksWebhookIdLogsGetSignalErrorFull() instead")
    void webhooksWebhookIdLogsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksWebhookIdLogsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksWebhookIdPingPostSignalErrorFull() instead")
    void webhooksWebhookIdPingPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksWebhookIdPingPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
