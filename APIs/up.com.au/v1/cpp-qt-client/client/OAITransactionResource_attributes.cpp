/**
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionResource_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionResource_attributes::OAITransactionResource_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionResource_attributes::OAITransactionResource_attributes() {
    this->initializeModel();
}

OAITransactionResource_attributes::~OAITransactionResource_attributes() {}

void OAITransactionResource_attributes::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_cashback_isSet = false;
    m_cashback_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_foreign_amount_isSet = false;
    m_foreign_amount_isValid = false;

    m_hold_info_isSet = false;
    m_hold_info_isValid = false;

    m_is_categorizable_isSet = false;
    m_is_categorizable_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_raw_text_isSet = false;
    m_raw_text_isValid = false;

    m_round_up_isSet = false;
    m_round_up_isValid = false;

    m_settled_at_isSet = false;
    m_settled_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAITransactionResource_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactionResource_attributes::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_cashback_isValid = ::OpenAPI::fromJsonValue(m_cashback, json[QString("cashback")]);
    m_cashback_isSet = !json[QString("cashback")].isNull() && m_cashback_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_foreign_amount_isValid = ::OpenAPI::fromJsonValue(m_foreign_amount, json[QString("foreignAmount")]);
    m_foreign_amount_isSet = !json[QString("foreignAmount")].isNull() && m_foreign_amount_isValid;

    m_hold_info_isValid = ::OpenAPI::fromJsonValue(m_hold_info, json[QString("holdInfo")]);
    m_hold_info_isSet = !json[QString("holdInfo")].isNull() && m_hold_info_isValid;

    m_is_categorizable_isValid = ::OpenAPI::fromJsonValue(m_is_categorizable, json[QString("isCategorizable")]);
    m_is_categorizable_isSet = !json[QString("isCategorizable")].isNull() && m_is_categorizable_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_raw_text_isValid = ::OpenAPI::fromJsonValue(m_raw_text, json[QString("rawText")]);
    m_raw_text_isSet = !json[QString("rawText")].isNull() && m_raw_text_isValid;

    m_round_up_isValid = ::OpenAPI::fromJsonValue(m_round_up, json[QString("roundUp")]);
    m_round_up_isSet = !json[QString("roundUp")].isNull() && m_round_up_isValid;

    m_settled_at_isValid = ::OpenAPI::fromJsonValue(m_settled_at, json[QString("settledAt")]);
    m_settled_at_isSet = !json[QString("settledAt")].isNull() && m_settled_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAITransactionResource_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactionResource_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_cashback.isSet()) {
        obj.insert(QString("cashback"), ::OpenAPI::toJsonValue(m_cashback));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_foreign_amount.isSet()) {
        obj.insert(QString("foreignAmount"), ::OpenAPI::toJsonValue(m_foreign_amount));
    }
    if (m_hold_info.isSet()) {
        obj.insert(QString("holdInfo"), ::OpenAPI::toJsonValue(m_hold_info));
    }
    if (m_is_categorizable_isSet) {
        obj.insert(QString("isCategorizable"), ::OpenAPI::toJsonValue(m_is_categorizable));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_raw_text_isSet) {
        obj.insert(QString("rawText"), ::OpenAPI::toJsonValue(m_raw_text));
    }
    if (m_round_up.isSet()) {
        obj.insert(QString("roundUp"), ::OpenAPI::toJsonValue(m_round_up));
    }
    if (m_settled_at_isSet) {
        obj.insert(QString("settledAt"), ::OpenAPI::toJsonValue(m_settled_at));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIMoneyObject OAITransactionResource_attributes::getAmount() const {
    return m_amount;
}
void OAITransactionResource_attributes::setAmount(const OAIMoneyObject &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAITransactionResource_attributes::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAITransactionResource_attributes::is_amount_Valid() const{
    return m_amount_isValid;
}

OAICashbackObject OAITransactionResource_attributes::getCashback() const {
    return m_cashback;
}
void OAITransactionResource_attributes::setCashback(const OAICashbackObject &cashback) {
    m_cashback = cashback;
    m_cashback_isSet = true;
}

bool OAITransactionResource_attributes::is_cashback_Set() const{
    return m_cashback_isSet;
}

bool OAITransactionResource_attributes::is_cashback_Valid() const{
    return m_cashback_isValid;
}

QDateTime OAITransactionResource_attributes::getCreatedAt() const {
    return m_created_at;
}
void OAITransactionResource_attributes::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITransactionResource_attributes::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITransactionResource_attributes::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAITransactionResource_attributes::getDescription() const {
    return m_description;
}
void OAITransactionResource_attributes::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITransactionResource_attributes::is_description_Set() const{
    return m_description_isSet;
}

bool OAITransactionResource_attributes::is_description_Valid() const{
    return m_description_isValid;
}

OAIMoneyObject OAITransactionResource_attributes::getForeignAmount() const {
    return m_foreign_amount;
}
void OAITransactionResource_attributes::setForeignAmount(const OAIMoneyObject &foreign_amount) {
    m_foreign_amount = foreign_amount;
    m_foreign_amount_isSet = true;
}

bool OAITransactionResource_attributes::is_foreign_amount_Set() const{
    return m_foreign_amount_isSet;
}

bool OAITransactionResource_attributes::is_foreign_amount_Valid() const{
    return m_foreign_amount_isValid;
}

OAIHoldInfoObject OAITransactionResource_attributes::getHoldInfo() const {
    return m_hold_info;
}
void OAITransactionResource_attributes::setHoldInfo(const OAIHoldInfoObject &hold_info) {
    m_hold_info = hold_info;
    m_hold_info_isSet = true;
}

bool OAITransactionResource_attributes::is_hold_info_Set() const{
    return m_hold_info_isSet;
}

bool OAITransactionResource_attributes::is_hold_info_Valid() const{
    return m_hold_info_isValid;
}

bool OAITransactionResource_attributes::isIsCategorizable() const {
    return m_is_categorizable;
}
void OAITransactionResource_attributes::setIsCategorizable(const bool &is_categorizable) {
    m_is_categorizable = is_categorizable;
    m_is_categorizable_isSet = true;
}

bool OAITransactionResource_attributes::is_is_categorizable_Set() const{
    return m_is_categorizable_isSet;
}

bool OAITransactionResource_attributes::is_is_categorizable_Valid() const{
    return m_is_categorizable_isValid;
}

QString OAITransactionResource_attributes::getMessage() const {
    return m_message;
}
void OAITransactionResource_attributes::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITransactionResource_attributes::is_message_Set() const{
    return m_message_isSet;
}

bool OAITransactionResource_attributes::is_message_Valid() const{
    return m_message_isValid;
}

QString OAITransactionResource_attributes::getRawText() const {
    return m_raw_text;
}
void OAITransactionResource_attributes::setRawText(const QString &raw_text) {
    m_raw_text = raw_text;
    m_raw_text_isSet = true;
}

bool OAITransactionResource_attributes::is_raw_text_Set() const{
    return m_raw_text_isSet;
}

bool OAITransactionResource_attributes::is_raw_text_Valid() const{
    return m_raw_text_isValid;
}

OAIRoundUpObject OAITransactionResource_attributes::getRoundUp() const {
    return m_round_up;
}
void OAITransactionResource_attributes::setRoundUp(const OAIRoundUpObject &round_up) {
    m_round_up = round_up;
    m_round_up_isSet = true;
}

bool OAITransactionResource_attributes::is_round_up_Set() const{
    return m_round_up_isSet;
}

bool OAITransactionResource_attributes::is_round_up_Valid() const{
    return m_round_up_isValid;
}

QDateTime OAITransactionResource_attributes::getSettledAt() const {
    return m_settled_at;
}
void OAITransactionResource_attributes::setSettledAt(const QDateTime &settled_at) {
    m_settled_at = settled_at;
    m_settled_at_isSet = true;
}

bool OAITransactionResource_attributes::is_settled_at_Set() const{
    return m_settled_at_isSet;
}

bool OAITransactionResource_attributes::is_settled_at_Valid() const{
    return m_settled_at_isValid;
}

OAITransactionStatusEnum OAITransactionResource_attributes::getStatus() const {
    return m_status;
}
void OAITransactionResource_attributes::setStatus(const OAITransactionStatusEnum &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITransactionResource_attributes::is_status_Set() const{
    return m_status_isSet;
}

bool OAITransactionResource_attributes::is_status_Valid() const{
    return m_status_isValid;
}

bool OAITransactionResource_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cashback.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foreign_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hold_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_categorizable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_round_up.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_settled_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactionResource_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_cashback_isValid && m_created_at_isValid && m_description_isValid && m_foreign_amount_isValid && m_hold_info_isValid && m_is_categorizable_isValid && m_message_isValid && m_raw_text_isValid && m_round_up_isValid && m_settled_at_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
