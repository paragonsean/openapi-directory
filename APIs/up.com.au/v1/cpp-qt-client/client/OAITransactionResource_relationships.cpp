/**
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionResource_relationships.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionResource_relationships::OAITransactionResource_relationships(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionResource_relationships::OAITransactionResource_relationships() {
    this->initializeModel();
}

OAITransactionResource_relationships::~OAITransactionResource_relationships() {}

void OAITransactionResource_relationships::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_parent_category_isSet = false;
    m_parent_category_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_transfer_account_isSet = false;
    m_transfer_account_isValid = false;
}

void OAITransactionResource_relationships::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactionResource_relationships::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_parent_category_isValid = ::OpenAPI::fromJsonValue(m_parent_category, json[QString("parentCategory")]);
    m_parent_category_isSet = !json[QString("parentCategory")].isNull() && m_parent_category_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_transfer_account_isValid = ::OpenAPI::fromJsonValue(m_transfer_account, json[QString("transferAccount")]);
    m_transfer_account_isSet = !json[QString("transferAccount")].isNull() && m_transfer_account_isValid;
}

QString OAITransactionResource_relationships::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactionResource_relationships::asJsonObject() const {
    QJsonObject obj;
    if (m_account.isSet()) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_category.isSet()) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_parent_category.isSet()) {
        obj.insert(QString("parentCategory"), ::OpenAPI::toJsonValue(m_parent_category));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_transfer_account.isSet()) {
        obj.insert(QString("transferAccount"), ::OpenAPI::toJsonValue(m_transfer_account));
    }
    return obj;
}

OAITransactionResource_relationships_account OAITransactionResource_relationships::getAccount() const {
    return m_account;
}
void OAITransactionResource_relationships::setAccount(const OAITransactionResource_relationships_account &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAITransactionResource_relationships::is_account_Set() const{
    return m_account_isSet;
}

bool OAITransactionResource_relationships::is_account_Valid() const{
    return m_account_isValid;
}

OAITransactionResource_relationships_category OAITransactionResource_relationships::getCategory() const {
    return m_category;
}
void OAITransactionResource_relationships::setCategory(const OAITransactionResource_relationships_category &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAITransactionResource_relationships::is_category_Set() const{
    return m_category_isSet;
}

bool OAITransactionResource_relationships::is_category_Valid() const{
    return m_category_isValid;
}

OAICategoryResource_relationships_parent OAITransactionResource_relationships::getParentCategory() const {
    return m_parent_category;
}
void OAITransactionResource_relationships::setParentCategory(const OAICategoryResource_relationships_parent &parent_category) {
    m_parent_category = parent_category;
    m_parent_category_isSet = true;
}

bool OAITransactionResource_relationships::is_parent_category_Set() const{
    return m_parent_category_isSet;
}

bool OAITransactionResource_relationships::is_parent_category_Valid() const{
    return m_parent_category_isValid;
}

OAITransactionResource_relationships_tags OAITransactionResource_relationships::getTags() const {
    return m_tags;
}
void OAITransactionResource_relationships::setTags(const OAITransactionResource_relationships_tags &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAITransactionResource_relationships::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAITransactionResource_relationships::is_tags_Valid() const{
    return m_tags_isValid;
}

OAITransactionResource_relationships_transferAccount OAITransactionResource_relationships::getTransferAccount() const {
    return m_transfer_account;
}
void OAITransactionResource_relationships::setTransferAccount(const OAITransactionResource_relationships_transferAccount &transfer_account) {
    m_transfer_account = transfer_account;
    m_transfer_account_isSet = true;
}

bool OAITransactionResource_relationships::is_transfer_account_Set() const{
    return m_transfer_account_isSet;
}

bool OAITransactionResource_relationships::is_transfer_account_Valid() const{
    return m_transfer_account_isValid;
}

bool OAITransactionResource_relationships::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_account.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactionResource_relationships::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_isValid && m_category_isValid && m_parent_category_isValid && m_tags_isValid && m_transfer_account_isValid && true;
}

} // namespace OpenAPI
