/**
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMoneyObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMoneyObject::OAIMoneyObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMoneyObject::OAIMoneyObject() {
    this->initializeModel();
}

OAIMoneyObject::~OAIMoneyObject() {}

void OAIMoneyObject::initializeModel() {

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_value_in_base_units_isSet = false;
    m_value_in_base_units_isValid = false;
}

void OAIMoneyObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMoneyObject::fromJsonObject(QJsonObject json) {

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_value_in_base_units_isValid = ::OpenAPI::fromJsonValue(m_value_in_base_units, json[QString("valueInBaseUnits")]);
    m_value_in_base_units_isSet = !json[QString("valueInBaseUnits")].isNull() && m_value_in_base_units_isValid;
}

QString OAIMoneyObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMoneyObject::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_value_in_base_units_isSet) {
        obj.insert(QString("valueInBaseUnits"), ::OpenAPI::toJsonValue(m_value_in_base_units));
    }
    return obj;
}

QString OAIMoneyObject::getCurrencyCode() const {
    return m_currency_code;
}
void OAIMoneyObject::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIMoneyObject::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIMoneyObject::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAIMoneyObject::getValue() const {
    return m_value;
}
void OAIMoneyObject::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIMoneyObject::is_value_Set() const{
    return m_value_isSet;
}

bool OAIMoneyObject::is_value_Valid() const{
    return m_value_isValid;
}

qint32 OAIMoneyObject::getValueInBaseUnits() const {
    return m_value_in_base_units;
}
void OAIMoneyObject::setValueInBaseUnits(const qint32 &value_in_base_units) {
    m_value_in_base_units = value_in_base_units;
    m_value_in_base_units_isSet = true;
}

bool OAIMoneyObject::is_value_in_base_units_Set() const{
    return m_value_in_base_units_isSet;
}

bool OAIMoneyObject::is_value_in_base_units_Valid() const{
    return m_value_in_base_units_isValid;
}

bool OAIMoneyObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_in_base_units_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMoneyObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_currency_code_isValid && m_value_isValid && m_value_in_base_units_isValid && true;
}

} // namespace OpenAPI
