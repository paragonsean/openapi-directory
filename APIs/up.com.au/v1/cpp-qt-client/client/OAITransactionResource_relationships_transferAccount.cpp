/**
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionResource_relationships_transferAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionResource_relationships_transferAccount::OAITransactionResource_relationships_transferAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionResource_relationships_transferAccount::OAITransactionResource_relationships_transferAccount() {
    this->initializeModel();
}

OAITransactionResource_relationships_transferAccount::~OAITransactionResource_relationships_transferAccount() {}

void OAITransactionResource_relationships_transferAccount::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;
}

void OAITransactionResource_relationships_transferAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactionResource_relationships_transferAccount::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;
}

QString OAITransactionResource_relationships_transferAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactionResource_relationships_transferAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    return obj;
}

OAITransactionResource_relationships_transferAccount_data OAITransactionResource_relationships_transferAccount::getData() const {
    return m_data;
}
void OAITransactionResource_relationships_transferAccount::setData(const OAITransactionResource_relationships_transferAccount_data &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAITransactionResource_relationships_transferAccount::is_data_Set() const{
    return m_data_isSet;
}

bool OAITransactionResource_relationships_transferAccount::is_data_Valid() const{
    return m_data_isValid;
}

OAIAccountResource_relationships_transactions_links OAITransactionResource_relationships_transferAccount::getLinks() const {
    return m_links;
}
void OAITransactionResource_relationships_transferAccount::setLinks(const OAIAccountResource_relationships_transactions_links &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAITransactionResource_relationships_transferAccount::is_links_Set() const{
    return m_links_isSet;
}

bool OAITransactionResource_relationships_transferAccount::is_links_Valid() const{
    return m_links_isValid;
}

bool OAITransactionResource_relationships_transferAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactionResource_relationships_transferAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_isValid && true;
}

} // namespace OpenAPI
