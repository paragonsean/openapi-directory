/**
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategoryResource_relationships.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategoryResource_relationships::OAICategoryResource_relationships(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategoryResource_relationships::OAICategoryResource_relationships() {
    this->initializeModel();
}

OAICategoryResource_relationships::~OAICategoryResource_relationships() {}

void OAICategoryResource_relationships::initializeModel() {

    m_children_isSet = false;
    m_children_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;
}

void OAICategoryResource_relationships::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategoryResource_relationships::fromJsonObject(QJsonObject json) {

    m_children_isValid = ::OpenAPI::fromJsonValue(m_children, json[QString("children")]);
    m_children_isSet = !json[QString("children")].isNull() && m_children_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;
}

QString OAICategoryResource_relationships::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategoryResource_relationships::asJsonObject() const {
    QJsonObject obj;
    if (m_children.isSet()) {
        obj.insert(QString("children"), ::OpenAPI::toJsonValue(m_children));
    }
    if (m_parent.isSet()) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    return obj;
}

OAICategoryResource_relationships_children OAICategoryResource_relationships::getChildren() const {
    return m_children;
}
void OAICategoryResource_relationships::setChildren(const OAICategoryResource_relationships_children &children) {
    m_children = children;
    m_children_isSet = true;
}

bool OAICategoryResource_relationships::is_children_Set() const{
    return m_children_isSet;
}

bool OAICategoryResource_relationships::is_children_Valid() const{
    return m_children_isValid;
}

OAICategoryResource_relationships_parent OAICategoryResource_relationships::getParent() const {
    return m_parent;
}
void OAICategoryResource_relationships::setParent(const OAICategoryResource_relationships_parent &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAICategoryResource_relationships::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAICategoryResource_relationships::is_parent_Valid() const{
    return m_parent_isValid;
}

bool OAICategoryResource_relationships::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_children.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategoryResource_relationships::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_children_isValid && m_parent_isValid && true;
}

} // namespace OpenAPI
