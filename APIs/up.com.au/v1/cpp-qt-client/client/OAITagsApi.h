/**
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITagsApi_H
#define OAI_OAITagsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListTagsResponse.h"
#include "OAIUpdateTransactionTagsRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITagsApi : public QObject {
    Q_OBJECT

public:
    OAITagsApi(const int timeOut = 0);
    ~OAITagsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  page_size qint32 [optional]
    */
    virtual void tagsGet(const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  transaction_id QString [required]
    * @param[in]  oai_update_transaction_tags_request OAIUpdateTransactionTagsRequest [optional]
    */
    virtual void transactionsTransactionIdRelationshipsTagsDelete(const QString &transaction_id, const ::OpenAPI::OptionalParam<OAIUpdateTransactionTagsRequest> &oai_update_transaction_tags_request = ::OpenAPI::OptionalParam<OAIUpdateTransactionTagsRequest>());

    /**
    * @param[in]  transaction_id QString [required]
    * @param[in]  oai_update_transaction_tags_request OAIUpdateTransactionTagsRequest [optional]
    */
    virtual void transactionsTransactionIdRelationshipsTagsPost(const QString &transaction_id, const ::OpenAPI::OptionalParam<OAIUpdateTransactionTagsRequest> &oai_update_transaction_tags_request = ::OpenAPI::OptionalParam<OAIUpdateTransactionTagsRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void tagsGetCallback(OAIHttpRequestWorker *worker);
    void transactionsTransactionIdRelationshipsTagsDeleteCallback(OAIHttpRequestWorker *worker);
    void transactionsTransactionIdRelationshipsTagsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void tagsGetSignal(OAIListTagsResponse summary);
    void transactionsTransactionIdRelationshipsTagsDeleteSignal();
    void transactionsTransactionIdRelationshipsTagsPostSignal();


    void tagsGetSignalFull(OAIHttpRequestWorker *worker, OAIListTagsResponse summary);
    void transactionsTransactionIdRelationshipsTagsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void transactionsTransactionIdRelationshipsTagsPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use tagsGetSignalError() instead")
    void tagsGetSignalE(OAIListTagsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsGetSignalError(OAIListTagsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsTransactionIdRelationshipsTagsDeleteSignalError() instead")
    void transactionsTransactionIdRelationshipsTagsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsTransactionIdRelationshipsTagsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsTransactionIdRelationshipsTagsPostSignalError() instead")
    void transactionsTransactionIdRelationshipsTagsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsTransactionIdRelationshipsTagsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use tagsGetSignalErrorFull() instead")
    void tagsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsTransactionIdRelationshipsTagsDeleteSignalErrorFull() instead")
    void transactionsTransactionIdRelationshipsTagsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsTransactionIdRelationshipsTagsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsTransactionIdRelationshipsTagsPostSignalErrorFull() instead")
    void transactionsTransactionIdRelationshipsTagsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsTransactionIdRelationshipsTagsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
