/**
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPingResponse_meta.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPingResponse_meta::OAIPingResponse_meta(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPingResponse_meta::OAIPingResponse_meta() {
    this->initializeModel();
}

OAIPingResponse_meta::~OAIPingResponse_meta() {}

void OAIPingResponse_meta::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_status_emoji_isSet = false;
    m_status_emoji_isValid = false;
}

void OAIPingResponse_meta::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPingResponse_meta::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_status_emoji_isValid = ::OpenAPI::fromJsonValue(m_status_emoji, json[QString("statusEmoji")]);
    m_status_emoji_isSet = !json[QString("statusEmoji")].isNull() && m_status_emoji_isValid;
}

QString OAIPingResponse_meta::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPingResponse_meta::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_status_emoji_isSet) {
        obj.insert(QString("statusEmoji"), ::OpenAPI::toJsonValue(m_status_emoji));
    }
    return obj;
}

QString OAIPingResponse_meta::getId() const {
    return m_id;
}
void OAIPingResponse_meta::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPingResponse_meta::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPingResponse_meta::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPingResponse_meta::getStatusEmoji() const {
    return m_status_emoji;
}
void OAIPingResponse_meta::setStatusEmoji(const QString &status_emoji) {
    m_status_emoji = status_emoji;
    m_status_emoji_isSet = true;
}

bool OAIPingResponse_meta::is_status_emoji_Set() const{
    return m_status_emoji_isSet;
}

bool OAIPingResponse_meta::is_status_emoji_Valid() const{
    return m_status_emoji_isValid;
}

bool OAIPingResponse_meta::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_emoji_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPingResponse_meta::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_status_emoji_isValid && true;
}

} // namespace OpenAPI
