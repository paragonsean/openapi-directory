/**
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAccountsResponse_links.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAccountsResponse_links::OAIListAccountsResponse_links(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAccountsResponse_links::OAIListAccountsResponse_links() {
    this->initializeModel();
}

OAIListAccountsResponse_links::~OAIListAccountsResponse_links() {}

void OAIListAccountsResponse_links::initializeModel() {

    m_next_isSet = false;
    m_next_isValid = false;

    m_prev_isSet = false;
    m_prev_isValid = false;
}

void OAIListAccountsResponse_links::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAccountsResponse_links::fromJsonObject(QJsonObject json) {

    m_next_isValid = ::OpenAPI::fromJsonValue(m_next, json[QString("next")]);
    m_next_isSet = !json[QString("next")].isNull() && m_next_isValid;

    m_prev_isValid = ::OpenAPI::fromJsonValue(m_prev, json[QString("prev")]);
    m_prev_isSet = !json[QString("prev")].isNull() && m_prev_isValid;
}

QString OAIListAccountsResponse_links::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAccountsResponse_links::asJsonObject() const {
    QJsonObject obj;
    if (m_next_isSet) {
        obj.insert(QString("next"), ::OpenAPI::toJsonValue(m_next));
    }
    if (m_prev_isSet) {
        obj.insert(QString("prev"), ::OpenAPI::toJsonValue(m_prev));
    }
    return obj;
}

QString OAIListAccountsResponse_links::getNext() const {
    return m_next;
}
void OAIListAccountsResponse_links::setNext(const QString &next) {
    m_next = next;
    m_next_isSet = true;
}

bool OAIListAccountsResponse_links::is_next_Set() const{
    return m_next_isSet;
}

bool OAIListAccountsResponse_links::is_next_Valid() const{
    return m_next_isValid;
}

QString OAIListAccountsResponse_links::getPrev() const {
    return m_prev;
}
void OAIListAccountsResponse_links::setPrev(const QString &prev) {
    m_prev = prev;
    m_prev_isSet = true;
}

bool OAIListAccountsResponse_links::is_prev_Set() const{
    return m_prev_isSet;
}

bool OAIListAccountsResponse_links::is_prev_Valid() const{
    return m_prev_isValid;
}

bool OAIListAccountsResponse_links::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prev_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAccountsResponse_links::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_next_isValid && m_prev_isValid && true;
}

} // namespace OpenAPI
