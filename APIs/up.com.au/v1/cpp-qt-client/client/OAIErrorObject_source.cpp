/**
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorObject_source.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorObject_source::OAIErrorObject_source(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorObject_source::OAIErrorObject_source() {
    this->initializeModel();
}

OAIErrorObject_source::~OAIErrorObject_source() {}

void OAIErrorObject_source::initializeModel() {

    m_parameter_isSet = false;
    m_parameter_isValid = false;

    m_pointer_isSet = false;
    m_pointer_isValid = false;
}

void OAIErrorObject_source::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorObject_source::fromJsonObject(QJsonObject json) {

    m_parameter_isValid = ::OpenAPI::fromJsonValue(m_parameter, json[QString("parameter")]);
    m_parameter_isSet = !json[QString("parameter")].isNull() && m_parameter_isValid;

    m_pointer_isValid = ::OpenAPI::fromJsonValue(m_pointer, json[QString("pointer")]);
    m_pointer_isSet = !json[QString("pointer")].isNull() && m_pointer_isValid;
}

QString OAIErrorObject_source::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorObject_source::asJsonObject() const {
    QJsonObject obj;
    if (m_parameter_isSet) {
        obj.insert(QString("parameter"), ::OpenAPI::toJsonValue(m_parameter));
    }
    if (m_pointer_isSet) {
        obj.insert(QString("pointer"), ::OpenAPI::toJsonValue(m_pointer));
    }
    return obj;
}

QString OAIErrorObject_source::getParameter() const {
    return m_parameter;
}
void OAIErrorObject_source::setParameter(const QString &parameter) {
    m_parameter = parameter;
    m_parameter_isSet = true;
}

bool OAIErrorObject_source::is_parameter_Set() const{
    return m_parameter_isSet;
}

bool OAIErrorObject_source::is_parameter_Valid() const{
    return m_parameter_isValid;
}

QString OAIErrorObject_source::getPointer() const {
    return m_pointer;
}
void OAIErrorObject_source::setPointer(const QString &pointer) {
    m_pointer = pointer;
    m_pointer_isSet = true;
}

bool OAIErrorObject_source::is_pointer_Set() const{
    return m_pointer_isSet;
}

bool OAIErrorObject_source::is_pointer_Valid() const{
    return m_pointer_isValid;
}

bool OAIErrorObject_source::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parameter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pointer_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorObject_source::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
