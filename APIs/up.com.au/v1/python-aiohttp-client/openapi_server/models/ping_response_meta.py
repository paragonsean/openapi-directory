# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PingResponseMeta(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, status_emoji: str=None):
        """PingResponseMeta - a model defined in OpenAPI

        :param id: The id of this PingResponseMeta.
        :param status_emoji: The status_emoji of this PingResponseMeta.
        """
        self.openapi_types = {
            'id': str,
            'status_emoji': str
        }

        self.attribute_map = {
            'id': 'id',
            'status_emoji': 'statusEmoji'
        }

        self._id = id
        self._status_emoji = status_emoji

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PingResponseMeta':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PingResponse_meta of this PingResponseMeta.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this PingResponseMeta.

        The unique identifier of the authenticated customer. 

        :return: The id of this PingResponseMeta.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PingResponseMeta.

        The unique identifier of the authenticated customer. 

        :param id: The id of this PingResponseMeta.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def status_emoji(self):
        """Gets the status_emoji of this PingResponseMeta.

        A cute emoji that represents the response status. 

        :return: The status_emoji of this PingResponseMeta.
        :rtype: str
        """
        return self._status_emoji

    @status_emoji.setter
    def status_emoji(self, status_emoji):
        """Sets the status_emoji of this PingResponseMeta.

        A cute emoji that represents the response status. 

        :param status_emoji: The status_emoji of this PingResponseMeta.
        :type status_emoji: str
        """
        if status_emoji is None:
            raise ValueError("Invalid value for `status_emoji`, must not be `None`")

        self._status_emoji = status_emoji
