# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_resource_relationships_transactions import AccountResourceRelationshipsTransactions
from openapi_server import util


class WebhookResourceRelationships(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, logs: AccountResourceRelationshipsTransactions=None):
        """WebhookResourceRelationships - a model defined in OpenAPI

        :param logs: The logs of this WebhookResourceRelationships.
        """
        self.openapi_types = {
            'logs': AccountResourceRelationshipsTransactions
        }

        self.attribute_map = {
            'logs': 'logs'
        }

        self._logs = logs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebhookResourceRelationships':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebhookResource_relationships of this WebhookResourceRelationships.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def logs(self):
        """Gets the logs of this WebhookResourceRelationships.


        :return: The logs of this WebhookResourceRelationships.
        :rtype: AccountResourceRelationshipsTransactions
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this WebhookResourceRelationships.


        :param logs: The logs of this WebhookResourceRelationships.
        :type logs: AccountResourceRelationshipsTransactions
        """
        if logs is None:
            raise ValueError("Invalid value for `logs`, must not be `None`")

        self._logs = logs
