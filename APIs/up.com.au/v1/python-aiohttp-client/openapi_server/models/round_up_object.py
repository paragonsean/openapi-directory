# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money_object import MoneyObject
from openapi_server import util


class RoundUpObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: MoneyObject=None, boost_portion: MoneyObject=None):
        """RoundUpObject - a model defined in OpenAPI

        :param amount: The amount of this RoundUpObject.
        :param boost_portion: The boost_portion of this RoundUpObject.
        """
        self.openapi_types = {
            'amount': MoneyObject,
            'boost_portion': MoneyObject
        }

        self.attribute_map = {
            'amount': 'amount',
            'boost_portion': 'boostPortion'
        }

        self._amount = amount
        self._boost_portion = boost_portion

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoundUpObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoundUpObject of this RoundUpObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this RoundUpObject.

        The total amount of this Round Up, including any boosts, represented as a negative value. 

        :return: The amount of this RoundUpObject.
        :rtype: MoneyObject
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this RoundUpObject.

        The total amount of this Round Up, including any boosts, represented as a negative value. 

        :param amount: The amount of this RoundUpObject.
        :type amount: MoneyObject
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def boost_portion(self):
        """Gets the boost_portion of this RoundUpObject.

        The portion of the Round Up `amount` owing to boosted Round Ups, represented as a negative value. If no boost was added to the Round Up this field will be `null`. 

        :return: The boost_portion of this RoundUpObject.
        :rtype: MoneyObject
        """
        return self._boost_portion

    @boost_portion.setter
    def boost_portion(self, boost_portion):
        """Sets the boost_portion of this RoundUpObject.

        The portion of the Round Up `amount` owing to boosted Round Ups, represented as a negative value. If no boost was added to the Round Up this field will be `null`. 

        :param boost_portion: The boost_portion of this RoundUpObject.
        :type boost_portion: MoneyObject
        """
        if boost_portion is None:
            raise ValueError("Invalid value for `boost_portion`, must not be `None`")

        self._boost_portion = boost_portion
