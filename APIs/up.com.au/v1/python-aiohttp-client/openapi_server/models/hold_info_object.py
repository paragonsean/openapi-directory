# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money_object import MoneyObject
from openapi_server import util


class HoldInfoObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: MoneyObject=None, foreign_amount: MoneyObject=None):
        """HoldInfoObject - a model defined in OpenAPI

        :param amount: The amount of this HoldInfoObject.
        :param foreign_amount: The foreign_amount of this HoldInfoObject.
        """
        self.openapi_types = {
            'amount': MoneyObject,
            'foreign_amount': MoneyObject
        }

        self.attribute_map = {
            'amount': 'amount',
            'foreign_amount': 'foreignAmount'
        }

        self._amount = amount
        self._foreign_amount = foreign_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HoldInfoObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HoldInfoObject of this HoldInfoObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this HoldInfoObject.

        The amount of this transaction while in the `HELD` status, in Australian dollars. 

        :return: The amount of this HoldInfoObject.
        :rtype: MoneyObject
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this HoldInfoObject.

        The amount of this transaction while in the `HELD` status, in Australian dollars. 

        :param amount: The amount of this HoldInfoObject.
        :type amount: MoneyObject
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def foreign_amount(self):
        """Gets the foreign_amount of this HoldInfoObject.

        The foreign currency amount of this transaction while in the `HELD` status. This field will be `null` for domestic transactions. The amount was converted to the AUD amount reflected in the `amount` field. 

        :return: The foreign_amount of this HoldInfoObject.
        :rtype: MoneyObject
        """
        return self._foreign_amount

    @foreign_amount.setter
    def foreign_amount(self, foreign_amount):
        """Sets the foreign_amount of this HoldInfoObject.

        The foreign currency amount of this transaction while in the `HELD` status. This field will be `null` for domestic transactions. The amount was converted to the AUD amount reflected in the `amount` field. 

        :param foreign_amount: The foreign_amount of this HoldInfoObject.
        :type foreign_amount: MoneyObject
        """
        if foreign_amount is None:
            raise ValueError("Invalid value for `foreign_amount`, must not be `None`")

        self._foreign_amount = foreign_amount
