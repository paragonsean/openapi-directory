# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.category_resource_relationships_children import CategoryResourceRelationshipsChildren
from openapi_server.models.category_resource_relationships_parent import CategoryResourceRelationshipsParent
from openapi_server import util


class CategoryResourceRelationships(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, children: CategoryResourceRelationshipsChildren=None, parent: CategoryResourceRelationshipsParent=None):
        """CategoryResourceRelationships - a model defined in OpenAPI

        :param children: The children of this CategoryResourceRelationships.
        :param parent: The parent of this CategoryResourceRelationships.
        """
        self.openapi_types = {
            'children': CategoryResourceRelationshipsChildren,
            'parent': CategoryResourceRelationshipsParent
        }

        self.attribute_map = {
            'children': 'children',
            'parent': 'parent'
        }

        self._children = children
        self._parent = parent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CategoryResourceRelationships':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CategoryResource_relationships of this CategoryResourceRelationships.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def children(self):
        """Gets the children of this CategoryResourceRelationships.


        :return: The children of this CategoryResourceRelationships.
        :rtype: CategoryResourceRelationshipsChildren
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this CategoryResourceRelationships.


        :param children: The children of this CategoryResourceRelationships.
        :type children: CategoryResourceRelationshipsChildren
        """
        if children is None:
            raise ValueError("Invalid value for `children`, must not be `None`")

        self._children = children

    @property
    def parent(self):
        """Gets the parent of this CategoryResourceRelationships.


        :return: The parent of this CategoryResourceRelationships.
        :rtype: CategoryResourceRelationshipsParent
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this CategoryResourceRelationships.


        :param parent: The parent of this CategoryResourceRelationships.
        :type parent: CategoryResourceRelationshipsParent
        """
        if parent is None:
            raise ValueError("Invalid value for `parent`, must not be `None`")

        self._parent = parent
