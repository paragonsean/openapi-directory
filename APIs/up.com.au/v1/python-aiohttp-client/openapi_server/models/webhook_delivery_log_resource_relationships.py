# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.webhook_delivery_log_resource_relationships_webhook_event import WebhookDeliveryLogResourceRelationshipsWebhookEvent
from openapi_server import util


class WebhookDeliveryLogResourceRelationships(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, webhook_event: WebhookDeliveryLogResourceRelationshipsWebhookEvent=None):
        """WebhookDeliveryLogResourceRelationships - a model defined in OpenAPI

        :param webhook_event: The webhook_event of this WebhookDeliveryLogResourceRelationships.
        """
        self.openapi_types = {
            'webhook_event': WebhookDeliveryLogResourceRelationshipsWebhookEvent
        }

        self.attribute_map = {
            'webhook_event': 'webhookEvent'
        }

        self._webhook_event = webhook_event

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebhookDeliveryLogResourceRelationships':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebhookDeliveryLogResource_relationships of this WebhookDeliveryLogResourceRelationships.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def webhook_event(self):
        """Gets the webhook_event of this WebhookDeliveryLogResourceRelationships.


        :return: The webhook_event of this WebhookDeliveryLogResourceRelationships.
        :rtype: WebhookDeliveryLogResourceRelationshipsWebhookEvent
        """
        return self._webhook_event

    @webhook_event.setter
    def webhook_event(self, webhook_event):
        """Sets the webhook_event of this WebhookDeliveryLogResourceRelationships.


        :param webhook_event: The webhook_event of this WebhookDeliveryLogResourceRelationships.
        :type webhook_event: WebhookDeliveryLogResourceRelationshipsWebhookEvent
        """
        if webhook_event is None:
            raise ValueError("Invalid value for `webhook_event`, must not be `None`")

        self._webhook_event = webhook_event
