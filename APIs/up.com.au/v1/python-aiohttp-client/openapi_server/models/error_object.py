# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_object_source import ErrorObjectSource
from openapi_server import util


class ErrorObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detail: str=None, source: ErrorObjectSource=None, status: str=None, title: str=None):
        """ErrorObject - a model defined in OpenAPI

        :param detail: The detail of this ErrorObject.
        :param source: The source of this ErrorObject.
        :param status: The status of this ErrorObject.
        :param title: The title of this ErrorObject.
        """
        self.openapi_types = {
            'detail': str,
            'source': ErrorObjectSource,
            'status': str,
            'title': str
        }

        self.attribute_map = {
            'detail': 'detail',
            'source': 'source',
            'status': 'status',
            'title': 'title'
        }

        self._detail = detail
        self._source = source
        self._status = status
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErrorObject of this ErrorObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detail(self):
        """Gets the detail of this ErrorObject.

        A detailed description of this error. This should be considered unique to individual occurrences of an error and subject to change. It is useful for debugging purposes. 

        :return: The detail of this ErrorObject.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this ErrorObject.

        A detailed description of this error. This should be considered unique to individual occurrences of an error and subject to change. It is useful for debugging purposes. 

        :param detail: The detail of this ErrorObject.
        :type detail: str
        """
        if detail is None:
            raise ValueError("Invalid value for `detail`, must not be `None`")

        self._detail = detail

    @property
    def source(self):
        """Gets the source of this ErrorObject.


        :return: The source of this ErrorObject.
        :rtype: ErrorObjectSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ErrorObject.


        :param source: The source of this ErrorObject.
        :type source: ErrorObjectSource
        """

        self._source = source

    @property
    def status(self):
        """Gets the status of this ErrorObject.

        The HTTP status code associated with this error. This can also be obtained from the response headers. The status indicates the broad type of error according to HTTP semantics. 

        :return: The status of this ErrorObject.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ErrorObject.

        The HTTP status code associated with this error. This can also be obtained from the response headers. The status indicates the broad type of error according to HTTP semantics. 

        :param status: The status of this ErrorObject.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def title(self):
        """Gets the title of this ErrorObject.

        A short description of this error. This should be stable across multiple occurrences of this type of error and typically expands on the reason for the status code. 

        :return: The title of this ErrorObject.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ErrorObject.

        A short description of this error. This should be stable across multiple occurrences of this type of error and typically expands on the reason for the status code. 

        :param title: The title of this ErrorObject.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
