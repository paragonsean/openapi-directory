# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListAccountsResponseLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next: str=None, prev: str=None):
        """ListAccountsResponseLinks - a model defined in OpenAPI

        :param next: The next of this ListAccountsResponseLinks.
        :param prev: The prev of this ListAccountsResponseLinks.
        """
        self.openapi_types = {
            'next': str,
            'prev': str
        }

        self.attribute_map = {
            'next': 'next',
            'prev': 'prev'
        }

        self._next = next
        self._prev = prev

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListAccountsResponseLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListAccountsResponse_links of this ListAccountsResponseLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next(self):
        """Gets the next of this ListAccountsResponseLinks.

        The link to the next page in the results. If this value is `null` there is no next page. 

        :return: The next of this ListAccountsResponseLinks.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this ListAccountsResponseLinks.

        The link to the next page in the results. If this value is `null` there is no next page. 

        :param next: The next of this ListAccountsResponseLinks.
        :type next: str
        """
        if next is None:
            raise ValueError("Invalid value for `next`, must not be `None`")

        self._next = next

    @property
    def prev(self):
        """Gets the prev of this ListAccountsResponseLinks.

        The link to the previous page in the results. If this value is `null` there is no previous page. 

        :return: The prev of this ListAccountsResponseLinks.
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this ListAccountsResponseLinks.

        The link to the previous page in the results. If this value is `null` there is no previous page. 

        :param prev: The prev of this ListAccountsResponseLinks.
        :type prev: str
        """
        if prev is None:
            raise ValueError("Invalid value for `prev`, must not be `None`")

        self._prev = prev
