# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.webhook_event_resource_relationships_transaction import WebhookEventResourceRelationshipsTransaction
from openapi_server.models.webhook_event_resource_relationships_webhook import WebhookEventResourceRelationshipsWebhook
from openapi_server import util


class WebhookEventResourceRelationships(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transaction: WebhookEventResourceRelationshipsTransaction=None, webhook: WebhookEventResourceRelationshipsWebhook=None):
        """WebhookEventResourceRelationships - a model defined in OpenAPI

        :param transaction: The transaction of this WebhookEventResourceRelationships.
        :param webhook: The webhook of this WebhookEventResourceRelationships.
        """
        self.openapi_types = {
            'transaction': WebhookEventResourceRelationshipsTransaction,
            'webhook': WebhookEventResourceRelationshipsWebhook
        }

        self.attribute_map = {
            'transaction': 'transaction',
            'webhook': 'webhook'
        }

        self._transaction = transaction
        self._webhook = webhook

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebhookEventResourceRelationships':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebhookEventResource_relationships of this WebhookEventResourceRelationships.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transaction(self):
        """Gets the transaction of this WebhookEventResourceRelationships.


        :return: The transaction of this WebhookEventResourceRelationships.
        :rtype: WebhookEventResourceRelationshipsTransaction
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this WebhookEventResourceRelationships.


        :param transaction: The transaction of this WebhookEventResourceRelationships.
        :type transaction: WebhookEventResourceRelationshipsTransaction
        """

        self._transaction = transaction

    @property
    def webhook(self):
        """Gets the webhook of this WebhookEventResourceRelationships.


        :return: The webhook of this WebhookEventResourceRelationships.
        :rtype: WebhookEventResourceRelationshipsWebhook
        """
        return self._webhook

    @webhook.setter
    def webhook(self, webhook):
        """Sets the webhook of this WebhookEventResourceRelationships.


        :param webhook: The webhook of this WebhookEventResourceRelationships.
        :type webhook: WebhookEventResourceRelationshipsWebhook
        """
        if webhook is None:
            raise ValueError("Invalid value for `webhook`, must not be `None`")

        self._webhook = webhook
