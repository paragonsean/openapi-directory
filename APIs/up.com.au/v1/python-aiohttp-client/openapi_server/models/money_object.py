# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MoneyObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_code: str=None, value: str=None, value_in_base_units: int=None):
        """MoneyObject - a model defined in OpenAPI

        :param currency_code: The currency_code of this MoneyObject.
        :param value: The value of this MoneyObject.
        :param value_in_base_units: The value_in_base_units of this MoneyObject.
        """
        self.openapi_types = {
            'currency_code': str,
            'value': str,
            'value_in_base_units': int
        }

        self.attribute_map = {
            'currency_code': 'currencyCode',
            'value': 'value',
            'value_in_base_units': 'valueInBaseUnits'
        }

        self._currency_code = currency_code
        self._value = value
        self._value_in_base_units = value_in_base_units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MoneyObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MoneyObject of this MoneyObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_code(self):
        """Gets the currency_code of this MoneyObject.

        The ISO 4217 currency code. 

        :return: The currency_code of this MoneyObject.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this MoneyObject.

        The ISO 4217 currency code. 

        :param currency_code: The currency_code of this MoneyObject.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def value(self):
        """Gets the value of this MoneyObject.

        The amount of money, formatted as a string in the relevant currency. For example, for an Australian dollar value of $10.56, this field will be `\"10.56\"`. The currency symbol is not included in the string. 

        :return: The value of this MoneyObject.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this MoneyObject.

        The amount of money, formatted as a string in the relevant currency. For example, for an Australian dollar value of $10.56, this field will be `\"10.56\"`. The currency symbol is not included in the string. 

        :param value: The value of this MoneyObject.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

    @property
    def value_in_base_units(self):
        """Gets the value_in_base_units of this MoneyObject.

        The amount of money in the smallest denomination for the currency, as a 64-bit integer.  For example, for an Australian dollar value of $10.56, this field will be `1056`. 

        :return: The value_in_base_units of this MoneyObject.
        :rtype: int
        """
        return self._value_in_base_units

    @value_in_base_units.setter
    def value_in_base_units(self, value_in_base_units):
        """Sets the value_in_base_units of this MoneyObject.

        The amount of money in the smallest denomination for the currency, as a 64-bit integer.  For example, for an Australian dollar value of $10.56, this field will be `1056`. 

        :param value_in_base_units: The value_in_base_units of this MoneyObject.
        :type value_in_base_units: int
        """
        if value_in_base_units is None:
            raise ValueError("Invalid value for `value_in_base_units`, must not be `None`")

        self._value_in_base_units = value_in_base_units
