/**
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MoneyObject from './MoneyObject';

/**
 * The HoldInfoObject model module.
 * @module model/HoldInfoObject
 * @version v1
 */
class HoldInfoObject {
    /**
     * Constructs a new <code>HoldInfoObject</code>.
     * Provides information about the amount at which a transaction was in the &#x60;HELD&#x60; status. 
     * @alias module:model/HoldInfoObject
     * @param amount {module:model/MoneyObject} The amount of this transaction while in the `HELD` status, in Australian dollars. 
     * @param foreignAmount {module:model/MoneyObject} The foreign currency amount of this transaction while in the `HELD` status. This field will be `null` for domestic transactions. The amount was converted to the AUD amount reflected in the `amount` field. 
     */
    constructor(amount, foreignAmount) { 
        
        HoldInfoObject.initialize(this, amount, foreignAmount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, foreignAmount) { 
        obj['amount'] = amount;
        obj['foreignAmount'] = foreignAmount;
    }

    /**
     * Constructs a <code>HoldInfoObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HoldInfoObject} obj Optional instance to populate.
     * @return {module:model/HoldInfoObject} The populated <code>HoldInfoObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HoldInfoObject();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], MoneyObject);
            }
            if (data.hasOwnProperty('foreignAmount')) {
                obj['foreignAmount'] = ApiClient.convertToType(data['foreignAmount'], MoneyObject);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HoldInfoObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HoldInfoObject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HoldInfoObject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          MoneyObject.validateJSON(data['amount']);
        }
        // validate the optional field `foreignAmount`
        if (data['foreignAmount']) { // data not null
          MoneyObject.validateJSON(data['foreignAmount']);
        }

        return true;
    }


}

HoldInfoObject.RequiredProperties = ["amount", "foreignAmount"];

/**
 * The amount of this transaction while in the `HELD` status, in Australian dollars. 
 * @member {module:model/MoneyObject} amount
 */
HoldInfoObject.prototype['amount'] = undefined;

/**
 * The foreign currency amount of this transaction while in the `HELD` status. This field will be `null` for domestic transactions. The amount was converted to the AUD amount reflected in the `amount` field. 
 * @member {module:model/MoneyObject} foreignAmount
 */
HoldInfoObject.prototype['foreignAmount'] = undefined;






export default HoldInfoObject;

