/**
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorObjectSource from './ErrorObjectSource';

/**
 * The ErrorObject model module.
 * @module model/ErrorObject
 * @version v1
 */
class ErrorObject {
    /**
     * Constructs a new <code>ErrorObject</code>.
     * Provides information about an error processing a request. 
     * @alias module:model/ErrorObject
     * @param detail {String} A detailed description of this error. This should be considered unique to individual occurrences of an error and subject to change. It is useful for debugging purposes. 
     * @param status {String} The HTTP status code associated with this error. This can also be obtained from the response headers. The status indicates the broad type of error according to HTTP semantics. 
     * @param title {String} A short description of this error. This should be stable across multiple occurrences of this type of error and typically expands on the reason for the status code. 
     */
    constructor(detail, status, title) { 
        
        ErrorObject.initialize(this, detail, status, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, detail, status, title) { 
        obj['detail'] = detail;
        obj['status'] = status;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>ErrorObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ErrorObject} obj Optional instance to populate.
     * @return {module:model/ErrorObject} The populated <code>ErrorObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ErrorObject();

            if (data.hasOwnProperty('detail')) {
                obj['detail'] = ApiClient.convertToType(data['detail'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ErrorObjectSource.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ErrorObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ErrorObject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ErrorObject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['detail'] && !(typeof data['detail'] === 'string' || data['detail'] instanceof String)) {
            throw new Error("Expected the field `detail` to be a primitive type in the JSON string but got " + data['detail']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          ErrorObjectSource.validateJSON(data['source']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

ErrorObject.RequiredProperties = ["detail", "status", "title"];

/**
 * A detailed description of this error. This should be considered unique to individual occurrences of an error and subject to change. It is useful for debugging purposes. 
 * @member {String} detail
 */
ErrorObject.prototype['detail'] = undefined;

/**
 * @member {module:model/ErrorObjectSource} source
 */
ErrorObject.prototype['source'] = undefined;

/**
 * The HTTP status code associated with this error. This can also be obtained from the response headers. The status indicates the broad type of error according to HTTP semantics. 
 * @member {String} status
 */
ErrorObject.prototype['status'] = undefined;

/**
 * A short description of this error. This should be stable across multiple occurrences of this type of error and typically expands on the reason for the status code. 
 * @member {String} title
 */
ErrorObject.prototype['title'] = undefined;






export default ErrorObject;

