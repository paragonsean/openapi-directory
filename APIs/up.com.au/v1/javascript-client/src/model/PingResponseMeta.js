/**
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PingResponseMeta model module.
 * @module model/PingResponseMeta
 * @version v1
 */
class PingResponseMeta {
    /**
     * Constructs a new <code>PingResponseMeta</code>.
     * @alias module:model/PingResponseMeta
     * @param id {String} The unique identifier of the authenticated customer. 
     * @param statusEmoji {String} A cute emoji that represents the response status. 
     */
    constructor(id, statusEmoji) { 
        
        PingResponseMeta.initialize(this, id, statusEmoji);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, statusEmoji) { 
        obj['id'] = id;
        obj['statusEmoji'] = statusEmoji;
    }

    /**
     * Constructs a <code>PingResponseMeta</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PingResponseMeta} obj Optional instance to populate.
     * @return {module:model/PingResponseMeta} The populated <code>PingResponseMeta</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PingResponseMeta();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('statusEmoji')) {
                obj['statusEmoji'] = ApiClient.convertToType(data['statusEmoji'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PingResponseMeta</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PingResponseMeta</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PingResponseMeta.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['statusEmoji'] && !(typeof data['statusEmoji'] === 'string' || data['statusEmoji'] instanceof String)) {
            throw new Error("Expected the field `statusEmoji` to be a primitive type in the JSON string but got " + data['statusEmoji']);
        }

        return true;
    }


}

PingResponseMeta.RequiredProperties = ["id", "statusEmoji"];

/**
 * The unique identifier of the authenticated customer. 
 * @member {String} id
 */
PingResponseMeta.prototype['id'] = undefined;

/**
 * A cute emoji that represents the response status. 
 * @member {String} statusEmoji
 */
PingResponseMeta.prototype['statusEmoji'] = undefined;






export default PingResponseMeta;

