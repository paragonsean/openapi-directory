/**
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MoneyObject from './MoneyObject';

/**
 * The RoundUpObject model module.
 * @module model/RoundUpObject
 * @version v1
 */
class RoundUpObject {
    /**
     * Constructs a new <code>RoundUpObject</code>.
     * Provides information about how a Round Up was applied, such as whether or not a boost was included in the Round Up. 
     * @alias module:model/RoundUpObject
     * @param amount {module:model/MoneyObject} The total amount of this Round Up, including any boosts, represented as a negative value. 
     * @param boostPortion {module:model/MoneyObject} The portion of the Round Up `amount` owing to boosted Round Ups, represented as a negative value. If no boost was added to the Round Up this field will be `null`. 
     */
    constructor(amount, boostPortion) { 
        
        RoundUpObject.initialize(this, amount, boostPortion);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, boostPortion) { 
        obj['amount'] = amount;
        obj['boostPortion'] = boostPortion;
    }

    /**
     * Constructs a <code>RoundUpObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RoundUpObject} obj Optional instance to populate.
     * @return {module:model/RoundUpObject} The populated <code>RoundUpObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RoundUpObject();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], MoneyObject);
            }
            if (data.hasOwnProperty('boostPortion')) {
                obj['boostPortion'] = ApiClient.convertToType(data['boostPortion'], MoneyObject);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RoundUpObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RoundUpObject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RoundUpObject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          MoneyObject.validateJSON(data['amount']);
        }
        // validate the optional field `boostPortion`
        if (data['boostPortion']) { // data not null
          MoneyObject.validateJSON(data['boostPortion']);
        }

        return true;
    }


}

RoundUpObject.RequiredProperties = ["amount", "boostPortion"];

/**
 * The total amount of this Round Up, including any boosts, represented as a negative value. 
 * @member {module:model/MoneyObject} amount
 */
RoundUpObject.prototype['amount'] = undefined;

/**
 * The portion of the Round Up `amount` owing to boosted Round Ups, represented as a negative value. If no boost was added to the Round Up this field will be `null`. 
 * @member {module:model/MoneyObject} boostPortion
 */
RoundUpObject.prototype['boostPortion'] = undefined;






export default RoundUpObject;

