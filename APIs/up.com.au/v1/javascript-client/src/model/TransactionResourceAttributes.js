/**
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CashbackObject from './CashbackObject';
import HoldInfoObject from './HoldInfoObject';
import MoneyObject from './MoneyObject';
import RoundUpObject from './RoundUpObject';
import TransactionStatusEnum from './TransactionStatusEnum';

/**
 * The TransactionResourceAttributes model module.
 * @module model/TransactionResourceAttributes
 * @version v1
 */
class TransactionResourceAttributes {
    /**
     * Constructs a new <code>TransactionResourceAttributes</code>.
     * @alias module:model/TransactionResourceAttributes
     * @param amount {module:model/MoneyObject} The amount of this transaction in Australian dollars. For transactions that were once `HELD` but are now `SETTLED`, refer to the `holdInfo` field for the original `amount` the transaction was `HELD` at. 
     * @param cashback {module:model/CashbackObject} If all or part of this transaction was instantly reimbursed in the form of cashback, details of the reimbursement. 
     * @param createdAt {Date} The date-time at which this transaction was first encountered. 
     * @param description {String} A short description for this transaction. Usually the merchant name for purchases. 
     * @param foreignAmount {module:model/MoneyObject} The foreign currency amount of this transaction. This field will be `null` for domestic transactions. The amount was converted to the AUD amount reflected in the `amount` of this transaction. Refer to the `holdInfo` field for the original `foreignAmount` the transaction was `HELD` at. 
     * @param holdInfo {module:model/HoldInfoObject} If this transaction is currently in the `HELD` status, or was ever in the `HELD` status, the `amount` and `foreignAmount` of the transaction while `HELD`. 
     * @param isCategorizable {Boolean} Boolean flag set to true on transactions that support the use of categories. 
     * @param message {String} Attached message for this transaction, such as a payment message, or a transfer note. 
     * @param rawText {String} The original, unprocessed text of the transaction. This is often not a perfect indicator of the actual merchant, but it is useful for reconciliation purposes in some cases. 
     * @param roundUp {module:model/RoundUpObject} Details of how this transaction was rounded-up. If no Round Up was applied this field will be `null`. 
     * @param settledAt {Date} The date-time at which this transaction settled. This field will be `null` for transactions that are currently in the `HELD` status. 
     * @param status {module:model/TransactionStatusEnum} The current processing status of this transaction, according to whether or not this transaction has settled or is still held. 
     */
    constructor(amount, cashback, createdAt, description, foreignAmount, holdInfo, isCategorizable, message, rawText, roundUp, settledAt, status) { 
        
        TransactionResourceAttributes.initialize(this, amount, cashback, createdAt, description, foreignAmount, holdInfo, isCategorizable, message, rawText, roundUp, settledAt, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, cashback, createdAt, description, foreignAmount, holdInfo, isCategorizable, message, rawText, roundUp, settledAt, status) { 
        obj['amount'] = amount;
        obj['cashback'] = cashback;
        obj['createdAt'] = createdAt;
        obj['description'] = description;
        obj['foreignAmount'] = foreignAmount;
        obj['holdInfo'] = holdInfo;
        obj['isCategorizable'] = isCategorizable;
        obj['message'] = message;
        obj['rawText'] = rawText;
        obj['roundUp'] = roundUp;
        obj['settledAt'] = settledAt;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>TransactionResourceAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionResourceAttributes} obj Optional instance to populate.
     * @return {module:model/TransactionResourceAttributes} The populated <code>TransactionResourceAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionResourceAttributes();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], MoneyObject);
            }
            if (data.hasOwnProperty('cashback')) {
                obj['cashback'] = ApiClient.convertToType(data['cashback'], CashbackObject);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('foreignAmount')) {
                obj['foreignAmount'] = ApiClient.convertToType(data['foreignAmount'], MoneyObject);
            }
            if (data.hasOwnProperty('holdInfo')) {
                obj['holdInfo'] = ApiClient.convertToType(data['holdInfo'], HoldInfoObject);
            }
            if (data.hasOwnProperty('isCategorizable')) {
                obj['isCategorizable'] = ApiClient.convertToType(data['isCategorizable'], 'Boolean');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('rawText')) {
                obj['rawText'] = ApiClient.convertToType(data['rawText'], 'String');
            }
            if (data.hasOwnProperty('roundUp')) {
                obj['roundUp'] = ApiClient.convertToType(data['roundUp'], RoundUpObject);
            }
            if (data.hasOwnProperty('settledAt')) {
                obj['settledAt'] = ApiClient.convertToType(data['settledAt'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], TransactionStatusEnum);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionResourceAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionResourceAttributes</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransactionResourceAttributes.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          MoneyObject.validateJSON(data['amount']);
        }
        // validate the optional field `cashback`
        if (data['cashback']) { // data not null
          CashbackObject.validateJSON(data['cashback']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `foreignAmount`
        if (data['foreignAmount']) { // data not null
          MoneyObject.validateJSON(data['foreignAmount']);
        }
        // validate the optional field `holdInfo`
        if (data['holdInfo']) { // data not null
          HoldInfoObject.validateJSON(data['holdInfo']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['rawText'] && !(typeof data['rawText'] === 'string' || data['rawText'] instanceof String)) {
            throw new Error("Expected the field `rawText` to be a primitive type in the JSON string but got " + data['rawText']);
        }
        // validate the optional field `roundUp`
        if (data['roundUp']) { // data not null
          RoundUpObject.validateJSON(data['roundUp']);
        }

        return true;
    }


}

TransactionResourceAttributes.RequiredProperties = ["amount", "cashback", "createdAt", "description", "foreignAmount", "holdInfo", "isCategorizable", "message", "rawText", "roundUp", "settledAt", "status"];

/**
 * The amount of this transaction in Australian dollars. For transactions that were once `HELD` but are now `SETTLED`, refer to the `holdInfo` field for the original `amount` the transaction was `HELD` at. 
 * @member {module:model/MoneyObject} amount
 */
TransactionResourceAttributes.prototype['amount'] = undefined;

/**
 * If all or part of this transaction was instantly reimbursed in the form of cashback, details of the reimbursement. 
 * @member {module:model/CashbackObject} cashback
 */
TransactionResourceAttributes.prototype['cashback'] = undefined;

/**
 * The date-time at which this transaction was first encountered. 
 * @member {Date} createdAt
 */
TransactionResourceAttributes.prototype['createdAt'] = undefined;

/**
 * A short description for this transaction. Usually the merchant name for purchases. 
 * @member {String} description
 */
TransactionResourceAttributes.prototype['description'] = undefined;

/**
 * The foreign currency amount of this transaction. This field will be `null` for domestic transactions. The amount was converted to the AUD amount reflected in the `amount` of this transaction. Refer to the `holdInfo` field for the original `foreignAmount` the transaction was `HELD` at. 
 * @member {module:model/MoneyObject} foreignAmount
 */
TransactionResourceAttributes.prototype['foreignAmount'] = undefined;

/**
 * If this transaction is currently in the `HELD` status, or was ever in the `HELD` status, the `amount` and `foreignAmount` of the transaction while `HELD`. 
 * @member {module:model/HoldInfoObject} holdInfo
 */
TransactionResourceAttributes.prototype['holdInfo'] = undefined;

/**
 * Boolean flag set to true on transactions that support the use of categories. 
 * @member {Boolean} isCategorizable
 */
TransactionResourceAttributes.prototype['isCategorizable'] = undefined;

/**
 * Attached message for this transaction, such as a payment message, or a transfer note. 
 * @member {String} message
 */
TransactionResourceAttributes.prototype['message'] = undefined;

/**
 * The original, unprocessed text of the transaction. This is often not a perfect indicator of the actual merchant, but it is useful for reconciliation purposes in some cases. 
 * @member {String} rawText
 */
TransactionResourceAttributes.prototype['rawText'] = undefined;

/**
 * Details of how this transaction was rounded-up. If no Round Up was applied this field will be `null`. 
 * @member {module:model/RoundUpObject} roundUp
 */
TransactionResourceAttributes.prototype['roundUp'] = undefined;

/**
 * The date-time at which this transaction settled. This field will be `null` for transactions that are currently in the `HELD` status. 
 * @member {Date} settledAt
 */
TransactionResourceAttributes.prototype['settledAt'] = undefined;

/**
 * The current processing status of this transaction, according to whether or not this transaction has settled or is still held. 
 * @member {module:model/TransactionStatusEnum} status
 */
TransactionResourceAttributes.prototype['status'] = undefined;






export default TransactionResourceAttributes;

