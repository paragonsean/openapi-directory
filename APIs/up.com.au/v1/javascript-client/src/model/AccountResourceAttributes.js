/**
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountTypeEnum from './AccountTypeEnum';
import MoneyObject from './MoneyObject';
import OwnershipTypeEnum from './OwnershipTypeEnum';

/**
 * The AccountResourceAttributes model module.
 * @module model/AccountResourceAttributes
 * @version v1
 */
class AccountResourceAttributes {
    /**
     * Constructs a new <code>AccountResourceAttributes</code>.
     * @alias module:model/AccountResourceAttributes
     * @param accountType {module:model/AccountTypeEnum} The bank account type of this account. 
     * @param balance {module:model/MoneyObject} The available balance of the account, taking into account any amounts that are currently on hold. 
     * @param createdAt {Date} The date-time at which this account was first opened. 
     * @param displayName {String} The name associated with the account in the Up application. 
     * @param ownershipType {module:model/OwnershipTypeEnum} The ownership structure for this account. 
     */
    constructor(accountType, balance, createdAt, displayName, ownershipType) { 
        
        AccountResourceAttributes.initialize(this, accountType, balance, createdAt, displayName, ownershipType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountType, balance, createdAt, displayName, ownershipType) { 
        obj['accountType'] = accountType;
        obj['balance'] = balance;
        obj['createdAt'] = createdAt;
        obj['displayName'] = displayName;
        obj['ownershipType'] = ownershipType;
    }

    /**
     * Constructs a <code>AccountResourceAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountResourceAttributes} obj Optional instance to populate.
     * @return {module:model/AccountResourceAttributes} The populated <code>AccountResourceAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountResourceAttributes();

            if (data.hasOwnProperty('accountType')) {
                obj['accountType'] = ApiClient.convertToType(data['accountType'], AccountTypeEnum);
            }
            if (data.hasOwnProperty('balance')) {
                obj['balance'] = ApiClient.convertToType(data['balance'], MoneyObject);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('ownershipType')) {
                obj['ownershipType'] = ApiClient.convertToType(data['ownershipType'], OwnershipTypeEnum);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountResourceAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountResourceAttributes</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AccountResourceAttributes.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `balance`
        if (data['balance']) { // data not null
          MoneyObject.validateJSON(data['balance']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }

        return true;
    }


}

AccountResourceAttributes.RequiredProperties = ["accountType", "balance", "createdAt", "displayName", "ownershipType"];

/**
 * The bank account type of this account. 
 * @member {module:model/AccountTypeEnum} accountType
 */
AccountResourceAttributes.prototype['accountType'] = undefined;

/**
 * The available balance of the account, taking into account any amounts that are currently on hold. 
 * @member {module:model/MoneyObject} balance
 */
AccountResourceAttributes.prototype['balance'] = undefined;

/**
 * The date-time at which this account was first opened. 
 * @member {Date} createdAt
 */
AccountResourceAttributes.prototype['createdAt'] = undefined;

/**
 * The name associated with the account in the Up application. 
 * @member {String} displayName
 */
AccountResourceAttributes.prototype['displayName'] = undefined;

/**
 * The ownership structure for this account. 
 * @member {module:model/OwnershipTypeEnum} ownershipType
 */
AccountResourceAttributes.prototype['ownershipType'] = undefined;






export default AccountResourceAttributes;

