/**
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CategoryResourceRelationshipsParent from './CategoryResourceRelationshipsParent';
import TransactionResourceRelationshipsAccount from './TransactionResourceRelationshipsAccount';
import TransactionResourceRelationshipsCategory from './TransactionResourceRelationshipsCategory';
import TransactionResourceRelationshipsTags from './TransactionResourceRelationshipsTags';
import TransactionResourceRelationshipsTransferAccount from './TransactionResourceRelationshipsTransferAccount';

/**
 * The TransactionResourceRelationships model module.
 * @module model/TransactionResourceRelationships
 * @version v1
 */
class TransactionResourceRelationships {
    /**
     * Constructs a new <code>TransactionResourceRelationships</code>.
     * @alias module:model/TransactionResourceRelationships
     * @param account {module:model/TransactionResourceRelationshipsAccount} 
     * @param category {module:model/TransactionResourceRelationshipsCategory} 
     * @param parentCategory {module:model/CategoryResourceRelationshipsParent} 
     * @param tags {module:model/TransactionResourceRelationshipsTags} 
     * @param transferAccount {module:model/TransactionResourceRelationshipsTransferAccount} 
     */
    constructor(account, category, parentCategory, tags, transferAccount) { 
        
        TransactionResourceRelationships.initialize(this, account, category, parentCategory, tags, transferAccount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, account, category, parentCategory, tags, transferAccount) { 
        obj['account'] = account;
        obj['category'] = category;
        obj['parentCategory'] = parentCategory;
        obj['tags'] = tags;
        obj['transferAccount'] = transferAccount;
    }

    /**
     * Constructs a <code>TransactionResourceRelationships</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionResourceRelationships} obj Optional instance to populate.
     * @return {module:model/TransactionResourceRelationships} The populated <code>TransactionResourceRelationships</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionResourceRelationships();

            if (data.hasOwnProperty('account')) {
                obj['account'] = TransactionResourceRelationshipsAccount.constructFromObject(data['account']);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = TransactionResourceRelationshipsCategory.constructFromObject(data['category']);
            }
            if (data.hasOwnProperty('parentCategory')) {
                obj['parentCategory'] = CategoryResourceRelationshipsParent.constructFromObject(data['parentCategory']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = TransactionResourceRelationshipsTags.constructFromObject(data['tags']);
            }
            if (data.hasOwnProperty('transferAccount')) {
                obj['transferAccount'] = TransactionResourceRelationshipsTransferAccount.constructFromObject(data['transferAccount']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionResourceRelationships</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionResourceRelationships</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransactionResourceRelationships.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `account`
        if (data['account']) { // data not null
          TransactionResourceRelationshipsAccount.validateJSON(data['account']);
        }
        // validate the optional field `category`
        if (data['category']) { // data not null
          TransactionResourceRelationshipsCategory.validateJSON(data['category']);
        }
        // validate the optional field `parentCategory`
        if (data['parentCategory']) { // data not null
          CategoryResourceRelationshipsParent.validateJSON(data['parentCategory']);
        }
        // validate the optional field `tags`
        if (data['tags']) { // data not null
          TransactionResourceRelationshipsTags.validateJSON(data['tags']);
        }
        // validate the optional field `transferAccount`
        if (data['transferAccount']) { // data not null
          TransactionResourceRelationshipsTransferAccount.validateJSON(data['transferAccount']);
        }

        return true;
    }


}

TransactionResourceRelationships.RequiredProperties = ["account", "category", "parentCategory", "tags", "transferAccount"];

/**
 * @member {module:model/TransactionResourceRelationshipsAccount} account
 */
TransactionResourceRelationships.prototype['account'] = undefined;

/**
 * @member {module:model/TransactionResourceRelationshipsCategory} category
 */
TransactionResourceRelationships.prototype['category'] = undefined;

/**
 * @member {module:model/CategoryResourceRelationshipsParent} parentCategory
 */
TransactionResourceRelationships.prototype['parentCategory'] = undefined;

/**
 * @member {module:model/TransactionResourceRelationshipsTags} tags
 */
TransactionResourceRelationships.prototype['tags'] = undefined;

/**
 * @member {module:model/TransactionResourceRelationshipsTransferAccount} transferAccount
 */
TransactionResourceRelationships.prototype['transferAccount'] = undefined;






export default TransactionResourceRelationships;

