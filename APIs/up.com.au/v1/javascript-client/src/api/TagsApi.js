/**
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListTagsResponse from '../model/ListTagsResponse';
import UpdateTransactionTagsRequest from '../model/UpdateTransactionTagsRequest';

/**
* Tags service.
* @module api/TagsApi
* @version v1
*/
export default class TagsApi {

    /**
    * Constructs a new TagsApi. 
    * @alias module:api/TagsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the tagsGet operation.
     * @callback module:api/TagsApi~tagsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List tags
     * Retrieve a list of all tags currently in use. The returned list is [paginated](#pagination) and can be scrolled by following the `next` and `prev` links where present. Results are ordered lexicographically. The `transactions` relationship for each tag exposes a link to get the transactions with the given tag. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] The number of records to return in each page. 
     * @param {module:api/TagsApi~tagsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsResponse}
     */
    tagsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page[size]': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsResponse;
      return this.apiClient.callApi(
        '/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsTransactionIdRelationshipsTagsDelete operation.
     * @callback module:api/TagsApi~transactionsTransactionIdRelationshipsTagsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove tags from transaction
     * Disassociates one or more tags from a specific transaction. Tags that are not associated are silently ignored. An HTTP `204` is returned on success. The associated tags, along with this request URL, are also exposed via the `tags` relationship on the transaction resource returned from `/transactions/{id}`. 
     * @param {String} transactionId The unique identifier for the transaction. 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateTransactionTagsRequest} [updateTransactionTagsRequest] 
     * @param {module:api/TagsApi~transactionsTransactionIdRelationshipsTagsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    transactionsTransactionIdRelationshipsTagsDelete(transactionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateTransactionTagsRequest'];
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling transactionsTransactionIdRelationshipsTagsDelete");
      }

      let pathParams = {
        'transactionId': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/transactions/{transactionId}/relationships/tags', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsTransactionIdRelationshipsTagsPost operation.
     * @callback module:api/TagsApi~transactionsTransactionIdRelationshipsTagsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add tags to transaction
     * Associates one or more tags with a specific transaction. No more than 6 tags may be present on any single transaction. Duplicate tags are silently ignored. An HTTP `204` is returned on success. The associated tags, along with this request URL, are also exposed via the `tags` relationship on the transaction resource returned from `/transactions/{id}`. 
     * @param {String} transactionId The unique identifier for the transaction. 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateTransactionTagsRequest} [updateTransactionTagsRequest] 
     * @param {module:api/TagsApi~transactionsTransactionIdRelationshipsTagsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    transactionsTransactionIdRelationshipsTagsPost(transactionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateTransactionTagsRequest'];
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling transactionsTransactionIdRelationshipsTagsPost");
      }

      let pathParams = {
        'transactionId': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/transactions/{transactionId}/relationships/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
