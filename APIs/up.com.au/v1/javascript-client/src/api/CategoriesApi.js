/**
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetCategoryResponse from '../model/GetCategoryResponse';
import ListCategoriesResponse from '../model/ListCategoriesResponse';
import UpdateTransactionCategoryRequest from '../model/UpdateTransactionCategoryRequest';

/**
* Categories service.
* @module api/CategoriesApi
* @version v1
*/
export default class CategoriesApi {

    /**
    * Constructs a new CategoriesApi. 
    * @alias module:api/CategoriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the categoriesGet operation.
     * @callback module:api/CategoriesApi~categoriesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCategoriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List categories
     * Retrieve a list of all categories and their ancestry. The returned list is not paginated. 
     * @param {Object} opts Optional parameters
     * @param {String} [filterParent] The unique identifier of a parent category for which to return only its children. Providing an invalid category identifier results in a `404` response. 
     * @param {module:api/CategoriesApi~categoriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCategoriesResponse}
     */
    categoriesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter[parent]': opts['filterParent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCategoriesResponse;
      return this.apiClient.callApi(
        '/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the categoriesIdGet operation.
     * @callback module:api/CategoriesApi~categoriesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCategoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve category
     * Retrieve a specific category by providing its unique identifier. 
     * @param {String} id The unique identifier for the category. 
     * @param {module:api/CategoriesApi~categoriesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCategoryResponse}
     */
    categoriesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling categoriesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCategoryResponse;
      return this.apiClient.callApi(
        '/categories/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsTransactionIdRelationshipsCategoryPatch operation.
     * @callback module:api/CategoriesApi~transactionsTransactionIdRelationshipsCategoryPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Categorize transaction
     * Updates the category associated with a transaction. Only transactions for which `isCategorizable` is set to true support this operation. The `id` is taken from the list exposed on `/categories` and cannot be one of the top-level (parent) categories. To de-categorize a transaction, set the entire `data` key to `null`. An HTTP `204` is returned on success. The associated category, along with its request URL is also exposed via the `category` relationship on the transaction resource returned from `/transactions/{id}`. 
     * @param {String} transactionId The unique identifier for the transaction. 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateTransactionCategoryRequest} [updateTransactionCategoryRequest] 
     * @param {module:api/CategoriesApi~transactionsTransactionIdRelationshipsCategoryPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    transactionsTransactionIdRelationshipsCategoryPatch(transactionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateTransactionCategoryRequest'];
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling transactionsTransactionIdRelationshipsCategoryPatch");
      }

      let pathParams = {
        'transactionId': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/transactions/{transactionId}/relationships/category', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
