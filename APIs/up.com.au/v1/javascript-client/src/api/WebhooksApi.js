/**
 * Up API
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateWebhookRequest from '../model/CreateWebhookRequest';
import CreateWebhookResponse from '../model/CreateWebhookResponse';
import GetWebhookResponse from '../model/GetWebhookResponse';
import ListWebhookDeliveryLogsResponse from '../model/ListWebhookDeliveryLogsResponse';
import ListWebhooksResponse from '../model/ListWebhooksResponse';
import WebhookEventCallback from '../model/WebhookEventCallback';

/**
* Webhooks service.
* @module api/WebhooksApi
* @version v1
*/
export default class WebhooksApi {

    /**
    * Constructs a new WebhooksApi. 
    * @alias module:api/WebhooksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the webhooksGet operation.
     * @callback module:api/WebhooksApi~webhooksGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWebhooksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List webhooks
     * Retrieve a list of configured webhooks. The returned list is [paginated](#pagination) and can be scrolled by following the `next` and `prev` links where present. Results are ordered oldest first to newest last. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] The number of records to return in each page. 
     * @param {module:api/WebhooksApi~webhooksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWebhooksResponse}
     */
    webhooksGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page[size]': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListWebhooksResponse;
      return this.apiClient.callApi(
        '/webhooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksIdDelete operation.
     * @callback module:api/WebhooksApi~webhooksIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete webhook
     * Delete a specific webhook by providing its unique identifier. Once deleted, webhook events will no longer be sent to the configured URL. 
     * @param {String} id The unique identifier for the webhook. 
     * @param {module:api/WebhooksApi~webhooksIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webhooksIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webhooksIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/webhooks/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksIdGet operation.
     * @callback module:api/WebhooksApi~webhooksIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetWebhookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve webhook
     * Retrieve a specific webhook by providing its unique identifier. 
     * @param {String} id The unique identifier for the webhook. 
     * @param {module:api/WebhooksApi~webhooksIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetWebhookResponse}
     */
    webhooksIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webhooksIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetWebhookResponse;
      return this.apiClient.callApi(
        '/webhooks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksPost operation.
     * @callback module:api/WebhooksApi~webhooksPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWebhookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create webhook
     * Create a new webhook with a given URL. The URL will receive webhook events as JSON-encoded `POST` requests. The URL must respond with a HTTP `200` status on success.  There is currently a limit of 10 webhooks at any given time. Once this limit is reached, existing webhooks will need to be deleted before new webhooks can be created.  Event delivery is retried with exponential backoff if the URL is unreachable or it does not respond with a `200` status. The response includes a `secretKey` attribute, which is used to sign requests sent to the webhook URL. It will not be returned from any other endpoints within the Up API. If the `secretKey` is lost, simply create a new webhook with the same URL, capture its `secretKey` and then delete the original webhook. See [Handling webhook events](#callback_post_webhookURL) for details on how to process webhook events.  It is probably a good idea to test the webhook by [sending it a `PING` event](#post_webhooks_webhookId_ping) after creating it. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateWebhookRequest} [createWebhookRequest] 
     * @param {module:api/WebhooksApi~webhooksPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWebhookResponse}
     */
    webhooksPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['createWebhookRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWebhookResponse;
      return this.apiClient.callApi(
        '/webhooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksWebhookIdLogsGet operation.
     * @callback module:api/WebhooksApi~webhooksWebhookIdLogsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWebhookDeliveryLogsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List webhook logs
     * Retrieve a list of delivery logs for a webhook by providing its unique identifier. This is useful for analysis and debugging purposes. The returned list is [paginated](#pagination) and can be scrolled by following the `next` and `prev` links where present. Results are ordered newest first to oldest last. Logs may be automatically purged after a period of time. 
     * @param {String} webhookId The unique identifier for the webhook. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize] The number of records to return in each page. 
     * @param {module:api/WebhooksApi~webhooksWebhookIdLogsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWebhookDeliveryLogsResponse}
     */
    webhooksWebhookIdLogsGet(webhookId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webhookId' is set
      if (webhookId === undefined || webhookId === null) {
        throw new Error("Missing the required parameter 'webhookId' when calling webhooksWebhookIdLogsGet");
      }

      let pathParams = {
        'webhookId': webhookId
      };
      let queryParams = {
        'page[size]': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListWebhookDeliveryLogsResponse;
      return this.apiClient.callApi(
        '/webhooks/{webhookId}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksWebhookIdPingPost operation.
     * @callback module:api/WebhooksApi~webhooksWebhookIdPingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhookEventCallback} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ping webhook
     * Send a `PING` event to a webhook by providing its unique identifier. This is useful for testing and debugging purposes. The event is delivered asynchronously and its data is returned in the response to this request. 
     * @param {String} webhookId The unique identifier for the webhook. 
     * @param {module:api/WebhooksApi~webhooksWebhookIdPingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhookEventCallback}
     */
    webhooksWebhookIdPingPost(webhookId, callback) {
      let postBody = null;
      // verify the required parameter 'webhookId' is set
      if (webhookId === undefined || webhookId === null) {
        throw new Error("Missing the required parameter 'webhookId' when calling webhooksWebhookIdPingPost");
      }

      let pathParams = {
        'webhookId': webhookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebhookEventCallback;
      return this.apiClient.callApi(
        '/webhooks/{webhookId}/ping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
