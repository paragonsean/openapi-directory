/**
 * LanguageTool API
 * Check texts for style and grammar issues with <a href='https://languagetool.org'>LanguageTool</a>. Please consider the following default limitations:<ul><li>your daily request limit depending on <a href='https://languagetool.org/editor/settings/access-tokens'>your plan</a> <li>maximum number of requests per minute: 20 (free) / 80 (Premium) <li>maximum number of characters per minute: 75,000 (free) / 300,000 (Premium) <li>maximum number of characters per request: 20,000 (free) / 60,000 (Premium) <li>for the free version, also consider the <a href='https://dev.languagetool.org/public-http-api'>limitations documented here</a> <li><b>Note:</b> any parameters or outputs not part of this documentation are internal and must not be relied on</ul> Need more generous limits? Just <a href='https://languagetool.org/proofreading-api'>contact us</a>.
 *
 * The version of the OpenAPI document: 1.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAI_check_post_200_response_matches_inner.h
 *
 * 
 */

#ifndef OAI_check_post_200_response_matches_inner_H
#define OAI_check_post_200_response_matches_inner_H

#include <QJsonObject>

#include "OAI_check_post_200_response_matches_inner_context.h"
#include "OAI_check_post_200_response_matches_inner_replacements_inner.h"
#include "OAI_check_post_200_response_matches_inner_rule.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAI_check_post_200_response_matches_inner_context;
class OAI_check_post_200_response_matches_inner_replacements_inner;
class OAI_check_post_200_response_matches_inner_rule;

class OAI_check_post_200_response_matches_inner : public OAIObject {
public:
    OAI_check_post_200_response_matches_inner();
    OAI_check_post_200_response_matches_inner(QString json);
    ~OAI_check_post_200_response_matches_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAI_check_post_200_response_matches_inner_context getContext() const;
    void setContext(const OAI_check_post_200_response_matches_inner_context &context);
    bool is_context_Set() const;
    bool is_context_Valid() const;

    qint32 getLength() const;
    void setLength(const qint32 &length);
    bool is_length_Set() const;
    bool is_length_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    qint32 getOffset() const;
    void setOffset(const qint32 &offset);
    bool is_offset_Set() const;
    bool is_offset_Valid() const;

    QList<OAI_check_post_200_response_matches_inner_replacements_inner> getReplacements() const;
    void setReplacements(const QList<OAI_check_post_200_response_matches_inner_replacements_inner> &replacements);
    bool is_replacements_Set() const;
    bool is_replacements_Valid() const;

    OAI_check_post_200_response_matches_inner_rule getRule() const;
    void setRule(const OAI_check_post_200_response_matches_inner_rule &rule);
    bool is_rule_Set() const;
    bool is_rule_Valid() const;

    QString getSentence() const;
    void setSentence(const QString &sentence);
    bool is_sentence_Set() const;
    bool is_sentence_Valid() const;

    QString getShortMessage() const;
    void setShortMessage(const QString &short_message);
    bool is_short_message_Set() const;
    bool is_short_message_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAI_check_post_200_response_matches_inner_context m_context;
    bool m_context_isSet;
    bool m_context_isValid;

    qint32 m_length;
    bool m_length_isSet;
    bool m_length_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    qint32 m_offset;
    bool m_offset_isSet;
    bool m_offset_isValid;

    QList<OAI_check_post_200_response_matches_inner_replacements_inner> m_replacements;
    bool m_replacements_isSet;
    bool m_replacements_isValid;

    OAI_check_post_200_response_matches_inner_rule m_rule;
    bool m_rule_isSet;
    bool m_rule_isValid;

    QString m_sentence;
    bool m_sentence_isSet;
    bool m_sentence_isValid;

    QString m_short_message;
    bool m_short_message_isSet;
    bool m_short_message_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAI_check_post_200_response_matches_inner)

#endif // OAI_check_post_200_response_matches_inner_H
