/**
 * LanguageTool API
 * Check texts for style and grammar issues with <a href='https://languagetool.org'>LanguageTool</a>. Please consider the following default limitations:<ul><li>your daily request limit depending on <a href='https://languagetool.org/editor/settings/access-tokens'>your plan</a> <li>maximum number of requests per minute: 20 (free) / 80 (Premium) <li>maximum number of characters per minute: 75,000 (free) / 300,000 (Premium) <li>maximum number of characters per request: 20,000 (free) / 60,000 (Premium) <li>for the free version, also consider the <a href='https://dev.languagetool.org/public-http-api'>limitations documented here</a> <li><b>Note:</b> any parameters or outputs not part of this documentation are internal and must not be relied on</ul> Need more generous limits? Just <a href='https://languagetool.org/proofreading-api'>contact us</a>.
 *
 * The version of the OpenAPI document: 1.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_check_post_200_response_language.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_check_post_200_response_language::OAI_check_post_200_response_language(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_check_post_200_response_language::OAI_check_post_200_response_language() {
    this->initializeModel();
}

OAI_check_post_200_response_language::~OAI_check_post_200_response_language() {}

void OAI_check_post_200_response_language::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_detected_language_isSet = false;
    m_detected_language_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAI_check_post_200_response_language::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_check_post_200_response_language::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_detected_language_isValid = ::OpenAPI::fromJsonValue(m_detected_language, json[QString("detectedLanguage")]);
    m_detected_language_isSet = !json[QString("detectedLanguage")].isNull() && m_detected_language_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAI_check_post_200_response_language::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_check_post_200_response_language::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_detected_language.isSet()) {
        obj.insert(QString("detectedLanguage"), ::OpenAPI::toJsonValue(m_detected_language));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAI_check_post_200_response_language::getCode() const {
    return m_code;
}
void OAI_check_post_200_response_language::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAI_check_post_200_response_language::is_code_Set() const{
    return m_code_isSet;
}

bool OAI_check_post_200_response_language::is_code_Valid() const{
    return m_code_isValid;
}

OAI_check_post_200_response_language_detectedLanguage OAI_check_post_200_response_language::getDetectedLanguage() const {
    return m_detected_language;
}
void OAI_check_post_200_response_language::setDetectedLanguage(const OAI_check_post_200_response_language_detectedLanguage &detected_language) {
    m_detected_language = detected_language;
    m_detected_language_isSet = true;
}

bool OAI_check_post_200_response_language::is_detected_language_Set() const{
    return m_detected_language_isSet;
}

bool OAI_check_post_200_response_language::is_detected_language_Valid() const{
    return m_detected_language_isValid;
}

QString OAI_check_post_200_response_language::getName() const {
    return m_name;
}
void OAI_check_post_200_response_language::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAI_check_post_200_response_language::is_name_Set() const{
    return m_name_isSet;
}

bool OAI_check_post_200_response_language::is_name_Valid() const{
    return m_name_isValid;
}

bool OAI_check_post_200_response_language::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_check_post_200_response_language::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_detected_language_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
