/**
 * LanguageTool API
 * Check texts for style and grammar issues with <a href='https://languagetool.org'>LanguageTool</a>. Please consider the following default limitations:<ul><li>your daily request limit depending on <a href='https://languagetool.org/editor/settings/access-tokens'>your plan</a> <li>maximum number of requests per minute: 20 (free) / 80 (Premium) <li>maximum number of characters per minute: 75,000 (free) / 300,000 (Premium) <li>maximum number of characters per request: 20,000 (free) / 60,000 (Premium) <li>for the free version, also consider the <a href='https://dev.languagetool.org/public-http-api'>limitations documented here</a> <li><b>Note:</b> any parameters or outputs not part of this documentation are internal and must not be relied on</ul> Need more generous limits? Just <a href='https://languagetool.org/proofreading-api'>contact us</a>.
 *
 * The version of the OpenAPI document: 1.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_check_post_200_response_software.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_check_post_200_response_software::OAI_check_post_200_response_software(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_check_post_200_response_software::OAI_check_post_200_response_software() {
    this->initializeModel();
}

OAI_check_post_200_response_software::~OAI_check_post_200_response_software() {}

void OAI_check_post_200_response_software::initializeModel() {

    m_api_version_isSet = false;
    m_api_version_isValid = false;

    m_build_date_isSet = false;
    m_build_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_premium_isSet = false;
    m_premium_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAI_check_post_200_response_software::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_check_post_200_response_software::fromJsonObject(QJsonObject json) {

    m_api_version_isValid = ::OpenAPI::fromJsonValue(m_api_version, json[QString("apiVersion")]);
    m_api_version_isSet = !json[QString("apiVersion")].isNull() && m_api_version_isValid;

    m_build_date_isValid = ::OpenAPI::fromJsonValue(m_build_date, json[QString("buildDate")]);
    m_build_date_isSet = !json[QString("buildDate")].isNull() && m_build_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_premium_isValid = ::OpenAPI::fromJsonValue(m_premium, json[QString("premium")]);
    m_premium_isSet = !json[QString("premium")].isNull() && m_premium_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAI_check_post_200_response_software::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_check_post_200_response_software::asJsonObject() const {
    QJsonObject obj;
    if (m_api_version_isSet) {
        obj.insert(QString("apiVersion"), ::OpenAPI::toJsonValue(m_api_version));
    }
    if (m_build_date_isSet) {
        obj.insert(QString("buildDate"), ::OpenAPI::toJsonValue(m_build_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_premium_isSet) {
        obj.insert(QString("premium"), ::OpenAPI::toJsonValue(m_premium));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

qint32 OAI_check_post_200_response_software::getApiVersion() const {
    return m_api_version;
}
void OAI_check_post_200_response_software::setApiVersion(const qint32 &api_version) {
    m_api_version = api_version;
    m_api_version_isSet = true;
}

bool OAI_check_post_200_response_software::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAI_check_post_200_response_software::is_api_version_Valid() const{
    return m_api_version_isValid;
}

QString OAI_check_post_200_response_software::getBuildDate() const {
    return m_build_date;
}
void OAI_check_post_200_response_software::setBuildDate(const QString &build_date) {
    m_build_date = build_date;
    m_build_date_isSet = true;
}

bool OAI_check_post_200_response_software::is_build_date_Set() const{
    return m_build_date_isSet;
}

bool OAI_check_post_200_response_software::is_build_date_Valid() const{
    return m_build_date_isValid;
}

QString OAI_check_post_200_response_software::getName() const {
    return m_name;
}
void OAI_check_post_200_response_software::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAI_check_post_200_response_software::is_name_Set() const{
    return m_name_isSet;
}

bool OAI_check_post_200_response_software::is_name_Valid() const{
    return m_name_isValid;
}

bool OAI_check_post_200_response_software::isPremium() const {
    return m_premium;
}
void OAI_check_post_200_response_software::setPremium(const bool &premium) {
    m_premium = premium;
    m_premium_isSet = true;
}

bool OAI_check_post_200_response_software::is_premium_Set() const{
    return m_premium_isSet;
}

bool OAI_check_post_200_response_software::is_premium_Valid() const{
    return m_premium_isValid;
}

QString OAI_check_post_200_response_software::getStatus() const {
    return m_status;
}
void OAI_check_post_200_response_software::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAI_check_post_200_response_software::is_status_Set() const{
    return m_status_isSet;
}

bool OAI_check_post_200_response_software::is_status_Valid() const{
    return m_status_isValid;
}

QString OAI_check_post_200_response_software::getVersion() const {
    return m_version;
}
void OAI_check_post_200_response_software::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAI_check_post_200_response_software::is_version_Set() const{
    return m_version_isSet;
}

bool OAI_check_post_200_response_software::is_version_Valid() const{
    return m_version_isValid;
}

bool OAI_check_post_200_response_software::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_premium_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_check_post_200_response_software::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_api_version_isValid && m_build_date_isValid && m_name_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
