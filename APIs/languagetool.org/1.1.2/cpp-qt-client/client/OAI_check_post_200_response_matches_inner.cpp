/**
 * LanguageTool API
 * Check texts for style and grammar issues with <a href='https://languagetool.org'>LanguageTool</a>. Please consider the following default limitations:<ul><li>your daily request limit depending on <a href='https://languagetool.org/editor/settings/access-tokens'>your plan</a> <li>maximum number of requests per minute: 20 (free) / 80 (Premium) <li>maximum number of characters per minute: 75,000 (free) / 300,000 (Premium) <li>maximum number of characters per request: 20,000 (free) / 60,000 (Premium) <li>for the free version, also consider the <a href='https://dev.languagetool.org/public-http-api'>limitations documented here</a> <li><b>Note:</b> any parameters or outputs not part of this documentation are internal and must not be relied on</ul> Need more generous limits? Just <a href='https://languagetool.org/proofreading-api'>contact us</a>.
 *
 * The version of the OpenAPI document: 1.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_check_post_200_response_matches_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_check_post_200_response_matches_inner::OAI_check_post_200_response_matches_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_check_post_200_response_matches_inner::OAI_check_post_200_response_matches_inner() {
    this->initializeModel();
}

OAI_check_post_200_response_matches_inner::~OAI_check_post_200_response_matches_inner() {}

void OAI_check_post_200_response_matches_inner::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_replacements_isSet = false;
    m_replacements_isValid = false;

    m_rule_isSet = false;
    m_rule_isValid = false;

    m_sentence_isSet = false;
    m_sentence_isValid = false;

    m_short_message_isSet = false;
    m_short_message_isValid = false;
}

void OAI_check_post_200_response_matches_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_check_post_200_response_matches_inner::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_replacements_isValid = ::OpenAPI::fromJsonValue(m_replacements, json[QString("replacements")]);
    m_replacements_isSet = !json[QString("replacements")].isNull() && m_replacements_isValid;

    m_rule_isValid = ::OpenAPI::fromJsonValue(m_rule, json[QString("rule")]);
    m_rule_isSet = !json[QString("rule")].isNull() && m_rule_isValid;

    m_sentence_isValid = ::OpenAPI::fromJsonValue(m_sentence, json[QString("sentence")]);
    m_sentence_isSet = !json[QString("sentence")].isNull() && m_sentence_isValid;

    m_short_message_isValid = ::OpenAPI::fromJsonValue(m_short_message, json[QString("shortMessage")]);
    m_short_message_isSet = !json[QString("shortMessage")].isNull() && m_short_message_isValid;
}

QString OAI_check_post_200_response_matches_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_check_post_200_response_matches_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_replacements.size() > 0) {
        obj.insert(QString("replacements"), ::OpenAPI::toJsonValue(m_replacements));
    }
    if (m_rule.isSet()) {
        obj.insert(QString("rule"), ::OpenAPI::toJsonValue(m_rule));
    }
    if (m_sentence_isSet) {
        obj.insert(QString("sentence"), ::OpenAPI::toJsonValue(m_sentence));
    }
    if (m_short_message_isSet) {
        obj.insert(QString("shortMessage"), ::OpenAPI::toJsonValue(m_short_message));
    }
    return obj;
}

OAI_check_post_200_response_matches_inner_context OAI_check_post_200_response_matches_inner::getContext() const {
    return m_context;
}
void OAI_check_post_200_response_matches_inner::setContext(const OAI_check_post_200_response_matches_inner_context &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAI_check_post_200_response_matches_inner::is_context_Set() const{
    return m_context_isSet;
}

bool OAI_check_post_200_response_matches_inner::is_context_Valid() const{
    return m_context_isValid;
}

qint32 OAI_check_post_200_response_matches_inner::getLength() const {
    return m_length;
}
void OAI_check_post_200_response_matches_inner::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAI_check_post_200_response_matches_inner::is_length_Set() const{
    return m_length_isSet;
}

bool OAI_check_post_200_response_matches_inner::is_length_Valid() const{
    return m_length_isValid;
}

QString OAI_check_post_200_response_matches_inner::getMessage() const {
    return m_message;
}
void OAI_check_post_200_response_matches_inner::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAI_check_post_200_response_matches_inner::is_message_Set() const{
    return m_message_isSet;
}

bool OAI_check_post_200_response_matches_inner::is_message_Valid() const{
    return m_message_isValid;
}

qint32 OAI_check_post_200_response_matches_inner::getOffset() const {
    return m_offset;
}
void OAI_check_post_200_response_matches_inner::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAI_check_post_200_response_matches_inner::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAI_check_post_200_response_matches_inner::is_offset_Valid() const{
    return m_offset_isValid;
}

QList<OAI_check_post_200_response_matches_inner_replacements_inner> OAI_check_post_200_response_matches_inner::getReplacements() const {
    return m_replacements;
}
void OAI_check_post_200_response_matches_inner::setReplacements(const QList<OAI_check_post_200_response_matches_inner_replacements_inner> &replacements) {
    m_replacements = replacements;
    m_replacements_isSet = true;
}

bool OAI_check_post_200_response_matches_inner::is_replacements_Set() const{
    return m_replacements_isSet;
}

bool OAI_check_post_200_response_matches_inner::is_replacements_Valid() const{
    return m_replacements_isValid;
}

OAI_check_post_200_response_matches_inner_rule OAI_check_post_200_response_matches_inner::getRule() const {
    return m_rule;
}
void OAI_check_post_200_response_matches_inner::setRule(const OAI_check_post_200_response_matches_inner_rule &rule) {
    m_rule = rule;
    m_rule_isSet = true;
}

bool OAI_check_post_200_response_matches_inner::is_rule_Set() const{
    return m_rule_isSet;
}

bool OAI_check_post_200_response_matches_inner::is_rule_Valid() const{
    return m_rule_isValid;
}

QString OAI_check_post_200_response_matches_inner::getSentence() const {
    return m_sentence;
}
void OAI_check_post_200_response_matches_inner::setSentence(const QString &sentence) {
    m_sentence = sentence;
    m_sentence_isSet = true;
}

bool OAI_check_post_200_response_matches_inner::is_sentence_Set() const{
    return m_sentence_isSet;
}

bool OAI_check_post_200_response_matches_inner::is_sentence_Valid() const{
    return m_sentence_isValid;
}

QString OAI_check_post_200_response_matches_inner::getShortMessage() const {
    return m_short_message;
}
void OAI_check_post_200_response_matches_inner::setShortMessage(const QString &short_message) {
    m_short_message = short_message;
    m_short_message_isSet = true;
}

bool OAI_check_post_200_response_matches_inner::is_short_message_Set() const{
    return m_short_message_isSet;
}

bool OAI_check_post_200_response_matches_inner::is_short_message_Valid() const{
    return m_short_message_isValid;
}

bool OAI_check_post_200_response_matches_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replacements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_check_post_200_response_matches_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_context_isValid && m_length_isValid && m_message_isValid && m_offset_isValid && m_replacements_isValid && m_sentence_isValid && true;
}

} // namespace OpenAPI
