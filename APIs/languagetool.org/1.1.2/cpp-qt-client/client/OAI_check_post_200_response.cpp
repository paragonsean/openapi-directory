/**
 * LanguageTool API
 * Check texts for style and grammar issues with <a href='https://languagetool.org'>LanguageTool</a>. Please consider the following default limitations:<ul><li>your daily request limit depending on <a href='https://languagetool.org/editor/settings/access-tokens'>your plan</a> <li>maximum number of requests per minute: 20 (free) / 80 (Premium) <li>maximum number of characters per minute: 75,000 (free) / 300,000 (Premium) <li>maximum number of characters per request: 20,000 (free) / 60,000 (Premium) <li>for the free version, also consider the <a href='https://dev.languagetool.org/public-http-api'>limitations documented here</a> <li><b>Note:</b> any parameters or outputs not part of this documentation are internal and must not be relied on</ul> Need more generous limits? Just <a href='https://languagetool.org/proofreading-api'>contact us</a>.
 *
 * The version of the OpenAPI document: 1.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_check_post_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_check_post_200_response::OAI_check_post_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_check_post_200_response::OAI_check_post_200_response() {
    this->initializeModel();
}

OAI_check_post_200_response::~OAI_check_post_200_response() {}

void OAI_check_post_200_response::initializeModel() {

    m_language_isSet = false;
    m_language_isValid = false;

    m_matches_isSet = false;
    m_matches_isValid = false;

    m_software_isSet = false;
    m_software_isValid = false;
}

void OAI_check_post_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_check_post_200_response::fromJsonObject(QJsonObject json) {

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_matches_isValid = ::OpenAPI::fromJsonValue(m_matches, json[QString("matches")]);
    m_matches_isSet = !json[QString("matches")].isNull() && m_matches_isValid;

    m_software_isValid = ::OpenAPI::fromJsonValue(m_software, json[QString("software")]);
    m_software_isSet = !json[QString("software")].isNull() && m_software_isValid;
}

QString OAI_check_post_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_check_post_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_language.isSet()) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_matches.size() > 0) {
        obj.insert(QString("matches"), ::OpenAPI::toJsonValue(m_matches));
    }
    if (m_software.isSet()) {
        obj.insert(QString("software"), ::OpenAPI::toJsonValue(m_software));
    }
    return obj;
}

OAI_check_post_200_response_language OAI_check_post_200_response::getLanguage() const {
    return m_language;
}
void OAI_check_post_200_response::setLanguage(const OAI_check_post_200_response_language &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAI_check_post_200_response::is_language_Set() const{
    return m_language_isSet;
}

bool OAI_check_post_200_response::is_language_Valid() const{
    return m_language_isValid;
}

QList<OAI_check_post_200_response_matches_inner> OAI_check_post_200_response::getMatches() const {
    return m_matches;
}
void OAI_check_post_200_response::setMatches(const QList<OAI_check_post_200_response_matches_inner> &matches) {
    m_matches = matches;
    m_matches_isSet = true;
}

bool OAI_check_post_200_response::is_matches_Set() const{
    return m_matches_isSet;
}

bool OAI_check_post_200_response::is_matches_Valid() const{
    return m_matches_isValid;
}

OAI_check_post_200_response_software OAI_check_post_200_response::getSoftware() const {
    return m_software;
}
void OAI_check_post_200_response::setSoftware(const OAI_check_post_200_response_software &software) {
    m_software = software;
    m_software_isSet = true;
}

bool OAI_check_post_200_response::is_software_Set() const{
    return m_software_isSet;
}

bool OAI_check_post_200_response::is_software_Valid() const{
    return m_software_isValid;
}

bool OAI_check_post_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_matches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_software.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_check_post_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
