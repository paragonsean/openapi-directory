/**
 * LanguageTool API
 * Check texts for style and grammar issues with <a href='https://languagetool.org'>LanguageTool</a>. Please consider the following default limitations:<ul><li>your daily request limit depending on <a href='https://languagetool.org/editor/settings/access-tokens'>your plan</a> <li>maximum number of requests per minute: 20 (free) / 80 (Premium) <li>maximum number of characters per minute: 75,000 (free) / 300,000 (Premium) <li>maximum number of characters per request: 20,000 (free) / 60,000 (Premium) <li>for the free version, also consider the <a href='https://dev.languagetool.org/public-http-api'>limitations documented here</a> <li><b>Note:</b> any parameters or outputs not part of this documentation are internal and must not be relied on</ul> Need more generous limits? Just <a href='https://languagetool.org/proofreading-api'>contact us</a>.
 *
 * The version of the OpenAPI document: 1.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAI_check_post_200_response.h"
#include "OAI_languages_get_200_response_inner.h"
#include "OAI_words_add_post_200_response.h"
#include "OAI_words_delete_post_200_response.h"
#include "OAI_words_get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  language QString [required]
    * @param[in]  text QString [optional]
    * @param[in]  data QString [optional]
    * @param[in]  username QString [optional]
    * @param[in]  api_key QString [optional]
    * @param[in]  dicts QString [optional]
    * @param[in]  mother_tongue QString [optional]
    * @param[in]  preferred_variants QString [optional]
    * @param[in]  enabled_rules QString [optional]
    * @param[in]  disabled_rules QString [optional]
    * @param[in]  enabled_categories QString [optional]
    * @param[in]  disabled_categories QString [optional]
    * @param[in]  enabled_only bool [optional]
    * @param[in]  level QString [optional]
    */
    virtual void checkPost(const QString &language, const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dicts = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mother_tongue = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &preferred_variants = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &enabled_rules = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &disabled_rules = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &enabled_categories = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &disabled_categories = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enabled_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &level = ::OpenAPI::OptionalParam<QString>());


    virtual void languagesGet();

    /**
    * @param[in]  word QString [required]
    * @param[in]  username QString [required]
    * @param[in]  api_key QString [required]
    * @param[in]  dict QString [optional]
    */
    virtual void wordsAddPost(const QString &word, const QString &username, const QString &api_key, const ::OpenAPI::OptionalParam<QString> &dict = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  word QString [required]
    * @param[in]  username QString [required]
    * @param[in]  api_key QString [required]
    * @param[in]  dict QString [optional]
    */
    virtual void wordsDeletePost(const QString &word, const QString &username, const QString &api_key, const ::OpenAPI::OptionalParam<QString> &dict = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  api_key QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  dicts QString [optional]
    */
    virtual void wordsGet(const QString &username, const QString &api_key, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &dicts = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void checkPostCallback(OAIHttpRequestWorker *worker);
    void languagesGetCallback(OAIHttpRequestWorker *worker);
    void wordsAddPostCallback(OAIHttpRequestWorker *worker);
    void wordsDeletePostCallback(OAIHttpRequestWorker *worker);
    void wordsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void checkPostSignal(OAI_check_post_200_response summary);
    void languagesGetSignal(QList<OAI_languages_get_200_response_inner> summary);
    void wordsAddPostSignal(OAI_words_add_post_200_response summary);
    void wordsDeletePostSignal(OAI_words_delete_post_200_response summary);
    void wordsGetSignal(OAI_words_get_200_response summary);


    void checkPostSignalFull(OAIHttpRequestWorker *worker, OAI_check_post_200_response summary);
    void languagesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAI_languages_get_200_response_inner> summary);
    void wordsAddPostSignalFull(OAIHttpRequestWorker *worker, OAI_words_add_post_200_response summary);
    void wordsDeletePostSignalFull(OAIHttpRequestWorker *worker, OAI_words_delete_post_200_response summary);
    void wordsGetSignalFull(OAIHttpRequestWorker *worker, OAI_words_get_200_response summary);

    Q_DECL_DEPRECATED_X("Use checkPostSignalError() instead")
    void checkPostSignalE(OAI_check_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkPostSignalError(OAI_check_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use languagesGetSignalError() instead")
    void languagesGetSignalE(QList<OAI_languages_get_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void languagesGetSignalError(QList<OAI_languages_get_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wordsAddPostSignalError() instead")
    void wordsAddPostSignalE(OAI_words_add_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wordsAddPostSignalError(OAI_words_add_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wordsDeletePostSignalError() instead")
    void wordsDeletePostSignalE(OAI_words_delete_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wordsDeletePostSignalError(OAI_words_delete_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wordsGetSignalError() instead")
    void wordsGetSignalE(OAI_words_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void wordsGetSignalError(OAI_words_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use checkPostSignalErrorFull() instead")
    void checkPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use languagesGetSignalErrorFull() instead")
    void languagesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void languagesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wordsAddPostSignalErrorFull() instead")
    void wordsAddPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wordsAddPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wordsDeletePostSignalErrorFull() instead")
    void wordsDeletePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wordsDeletePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wordsGetSignalErrorFull() instead")
    void wordsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wordsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
