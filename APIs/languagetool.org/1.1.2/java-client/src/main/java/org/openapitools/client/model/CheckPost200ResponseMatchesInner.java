/*
 * LanguageTool API
 * Check texts for style and grammar issues with <a href='https://languagetool.org'>LanguageTool</a>. Please consider the following default limitations:<ul><li>your daily request limit depending on <a href='https://languagetool.org/editor/settings/access-tokens'>your plan</a> <li>maximum number of requests per minute: 20 (free) / 80 (Premium) <li>maximum number of characters per minute: 75,000 (free) / 300,000 (Premium) <li>maximum number of characters per request: 20,000 (free) / 60,000 (Premium) <li>for the free version, also consider the <a href='https://dev.languagetool.org/public-http-api'>limitations documented here</a> <li><b>Note:</b> any parameters or outputs not part of this documentation are internal and must not be relied on</ul> Need more generous limits? Just <a href='https://languagetool.org/proofreading-api'>contact us</a>.
 *
 * The version of the OpenAPI document: 1.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CheckPost200ResponseMatchesInnerContext;
import org.openapitools.client.model.CheckPost200ResponseMatchesInnerReplacementsInner;
import org.openapitools.client.model.CheckPost200ResponseMatchesInnerRule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CheckPost200ResponseMatchesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:31.430446-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CheckPost200ResponseMatchesInner {
  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private CheckPost200ResponseMatchesInnerContext context;

  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private Integer length;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_REPLACEMENTS = "replacements";
  @SerializedName(SERIALIZED_NAME_REPLACEMENTS)
  private List<CheckPost200ResponseMatchesInnerReplacementsInner> replacements = new ArrayList<>();

  public static final String SERIALIZED_NAME_RULE = "rule";
  @SerializedName(SERIALIZED_NAME_RULE)
  private CheckPost200ResponseMatchesInnerRule rule;

  public static final String SERIALIZED_NAME_SENTENCE = "sentence";
  @SerializedName(SERIALIZED_NAME_SENTENCE)
  private String sentence;

  public static final String SERIALIZED_NAME_SHORT_MESSAGE = "shortMessage";
  @SerializedName(SERIALIZED_NAME_SHORT_MESSAGE)
  private String shortMessage;

  public CheckPost200ResponseMatchesInner() {
  }

  public CheckPost200ResponseMatchesInner context(CheckPost200ResponseMatchesInnerContext context) {
    this.context = context;
    return this;
  }

  /**
   * Get context
   * @return context
   */
  @javax.annotation.Nonnull
  public CheckPost200ResponseMatchesInnerContext getContext() {
    return context;
  }

  public void setContext(CheckPost200ResponseMatchesInnerContext context) {
    this.context = context;
  }


  public CheckPost200ResponseMatchesInner length(Integer length) {
    this.length = length;
    return this;
  }

  /**
   * The length of the error in characters.
   * @return length
   */
  @javax.annotation.Nonnull
  public Integer getLength() {
    return length;
  }

  public void setLength(Integer length) {
    this.length = length;
  }


  public CheckPost200ResponseMatchesInner message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Message about the error displayed to the user.
   * @return message
   */
  @javax.annotation.Nonnull
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public CheckPost200ResponseMatchesInner offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * The 0-based character offset of the error in the text.
   * @return offset
   */
  @javax.annotation.Nonnull
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public CheckPost200ResponseMatchesInner replacements(List<CheckPost200ResponseMatchesInnerReplacementsInner> replacements) {
    this.replacements = replacements;
    return this;
  }

  public CheckPost200ResponseMatchesInner addReplacementsItem(CheckPost200ResponseMatchesInnerReplacementsInner replacementsItem) {
    if (this.replacements == null) {
      this.replacements = new ArrayList<>();
    }
    this.replacements.add(replacementsItem);
    return this;
  }

  /**
   * Replacements that might correct the error. The array can be empty, in this case there is no suggested replacement.
   * @return replacements
   */
  @javax.annotation.Nonnull
  public List<CheckPost200ResponseMatchesInnerReplacementsInner> getReplacements() {
    return replacements;
  }

  public void setReplacements(List<CheckPost200ResponseMatchesInnerReplacementsInner> replacements) {
    this.replacements = replacements;
  }


  public CheckPost200ResponseMatchesInner rule(CheckPost200ResponseMatchesInnerRule rule) {
    this.rule = rule;
    return this;
  }

  /**
   * Get rule
   * @return rule
   */
  @javax.annotation.Nullable
  public CheckPost200ResponseMatchesInnerRule getRule() {
    return rule;
  }

  public void setRule(CheckPost200ResponseMatchesInnerRule rule) {
    this.rule = rule;
  }


  public CheckPost200ResponseMatchesInner sentence(String sentence) {
    this.sentence = sentence;
    return this;
  }

  /**
   * The sentence the error occurred in (since LanguageTool 4.0 or later)
   * @return sentence
   */
  @javax.annotation.Nonnull
  public String getSentence() {
    return sentence;
  }

  public void setSentence(String sentence) {
    this.sentence = sentence;
  }


  public CheckPost200ResponseMatchesInner shortMessage(String shortMessage) {
    this.shortMessage = shortMessage;
    return this;
  }

  /**
   * An optional shorter version of &#39;message&#39;.
   * @return shortMessage
   */
  @javax.annotation.Nullable
  public String getShortMessage() {
    return shortMessage;
  }

  public void setShortMessage(String shortMessage) {
    this.shortMessage = shortMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckPost200ResponseMatchesInner checkPost200ResponseMatchesInner = (CheckPost200ResponseMatchesInner) o;
    return Objects.equals(this.context, checkPost200ResponseMatchesInner.context) &&
        Objects.equals(this.length, checkPost200ResponseMatchesInner.length) &&
        Objects.equals(this.message, checkPost200ResponseMatchesInner.message) &&
        Objects.equals(this.offset, checkPost200ResponseMatchesInner.offset) &&
        Objects.equals(this.replacements, checkPost200ResponseMatchesInner.replacements) &&
        Objects.equals(this.rule, checkPost200ResponseMatchesInner.rule) &&
        Objects.equals(this.sentence, checkPost200ResponseMatchesInner.sentence) &&
        Objects.equals(this.shortMessage, checkPost200ResponseMatchesInner.shortMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(context, length, message, offset, replacements, rule, sentence, shortMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckPost200ResponseMatchesInner {\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    replacements: ").append(toIndentedString(replacements)).append("\n");
    sb.append("    rule: ").append(toIndentedString(rule)).append("\n");
    sb.append("    sentence: ").append(toIndentedString(sentence)).append("\n");
    sb.append("    shortMessage: ").append(toIndentedString(shortMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("context");
    openapiFields.add("length");
    openapiFields.add("message");
    openapiFields.add("offset");
    openapiFields.add("replacements");
    openapiFields.add("rule");
    openapiFields.add("sentence");
    openapiFields.add("shortMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("context");
    openapiRequiredFields.add("length");
    openapiRequiredFields.add("message");
    openapiRequiredFields.add("offset");
    openapiRequiredFields.add("replacements");
    openapiRequiredFields.add("sentence");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckPost200ResponseMatchesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckPost200ResponseMatchesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckPost200ResponseMatchesInner is not found in the empty JSON string", CheckPost200ResponseMatchesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckPost200ResponseMatchesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckPost200ResponseMatchesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CheckPost200ResponseMatchesInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `context`
      CheckPost200ResponseMatchesInnerContext.validateJsonElement(jsonObj.get("context"));
      if (!jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("replacements").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `replacements` to be an array in the JSON string but got `%s`", jsonObj.get("replacements").toString()));
      }

      JsonArray jsonArrayreplacements = jsonObj.getAsJsonArray("replacements");
      // validate the required field `replacements` (array)
      for (int i = 0; i < jsonArrayreplacements.size(); i++) {
        CheckPost200ResponseMatchesInnerReplacementsInner.validateJsonElement(jsonArrayreplacements.get(i));
      };
      // validate the optional field `rule`
      if (jsonObj.get("rule") != null && !jsonObj.get("rule").isJsonNull()) {
        CheckPost200ResponseMatchesInnerRule.validateJsonElement(jsonObj.get("rule"));
      }
      if (!jsonObj.get("sentence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sentence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sentence").toString()));
      }
      if ((jsonObj.get("shortMessage") != null && !jsonObj.get("shortMessage").isJsonNull()) && !jsonObj.get("shortMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckPost200ResponseMatchesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckPost200ResponseMatchesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckPost200ResponseMatchesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckPost200ResponseMatchesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckPost200ResponseMatchesInner>() {
           @Override
           public void write(JsonWriter out, CheckPost200ResponseMatchesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckPost200ResponseMatchesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckPost200ResponseMatchesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckPost200ResponseMatchesInner
   * @throws IOException if the JSON string is invalid with respect to CheckPost200ResponseMatchesInner
   */
  public static CheckPost200ResponseMatchesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckPost200ResponseMatchesInner.class);
  }

  /**
   * Convert an instance of CheckPost200ResponseMatchesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

