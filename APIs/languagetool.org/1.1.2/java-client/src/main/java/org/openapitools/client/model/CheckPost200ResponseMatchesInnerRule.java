/*
 * LanguageTool API
 * Check texts for style and grammar issues with <a href='https://languagetool.org'>LanguageTool</a>. Please consider the following default limitations:<ul><li>your daily request limit depending on <a href='https://languagetool.org/editor/settings/access-tokens'>your plan</a> <li>maximum number of requests per minute: 20 (free) / 80 (Premium) <li>maximum number of characters per minute: 75,000 (free) / 300,000 (Premium) <li>maximum number of characters per request: 20,000 (free) / 60,000 (Premium) <li>for the free version, also consider the <a href='https://dev.languagetool.org/public-http-api'>limitations documented here</a> <li><b>Note:</b> any parameters or outputs not part of this documentation are internal and must not be relied on</ul> Need more generous limits? Just <a href='https://languagetool.org/proofreading-api'>contact us</a>.
 *
 * The version of the OpenAPI document: 1.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CheckPost200ResponseMatchesInnerRuleCategory;
import org.openapitools.client.model.CheckPost200ResponseMatchesInnerRuleUrlsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CheckPost200ResponseMatchesInnerRule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:31.430446-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CheckPost200ResponseMatchesInnerRule {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CheckPost200ResponseMatchesInnerRuleCategory category;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ISSUE_TYPE = "issueType";
  @SerializedName(SERIALIZED_NAME_ISSUE_TYPE)
  private String issueType;

  public static final String SERIALIZED_NAME_SUB_ID = "subId";
  @SerializedName(SERIALIZED_NAME_SUB_ID)
  private String subId;

  public static final String SERIALIZED_NAME_URLS = "urls";
  @SerializedName(SERIALIZED_NAME_URLS)
  private List<CheckPost200ResponseMatchesInnerRuleUrlsInner> urls = new ArrayList<>();

  public CheckPost200ResponseMatchesInnerRule() {
  }

  public CheckPost200ResponseMatchesInnerRule category(CheckPost200ResponseMatchesInnerRuleCategory category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nonnull
  public CheckPost200ResponseMatchesInnerRuleCategory getCategory() {
    return category;
  }

  public void setCategory(CheckPost200ResponseMatchesInnerRuleCategory category) {
    this.category = category;
  }


  public CheckPost200ResponseMatchesInnerRule description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CheckPost200ResponseMatchesInnerRule id(String id) {
    this.id = id;
    return this;
  }

  /**
   * An rule&#39;s identifier that&#39;s unique for this language.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CheckPost200ResponseMatchesInnerRule issueType(String issueType) {
    this.issueType = issueType;
    return this;
  }

  /**
   * The &lt;a href&#x3D;\&quot;http://www.w3.org/International/multilingualweb/lt/drafts/its20/its20.html#lqissue-typevalues\&quot;&gt;Localization Quality Issue Type&lt;/a&gt;. This is not defined for all languages, in which case it will always be &#39;Uncategorized&#39;.
   * @return issueType
   */
  @javax.annotation.Nullable
  public String getIssueType() {
    return issueType;
  }

  public void setIssueType(String issueType) {
    this.issueType = issueType;
  }


  public CheckPost200ResponseMatchesInnerRule subId(String subId) {
    this.subId = subId;
    return this;
  }

  /**
   * An optional sub identifier of the rule, used when several rules are grouped.
   * @return subId
   */
  @javax.annotation.Nullable
  public String getSubId() {
    return subId;
  }

  public void setSubId(String subId) {
    this.subId = subId;
  }


  public CheckPost200ResponseMatchesInnerRule urls(List<CheckPost200ResponseMatchesInnerRuleUrlsInner> urls) {
    this.urls = urls;
    return this;
  }

  public CheckPost200ResponseMatchesInnerRule addUrlsItem(CheckPost200ResponseMatchesInnerRuleUrlsInner urlsItem) {
    if (this.urls == null) {
      this.urls = new ArrayList<>();
    }
    this.urls.add(urlsItem);
    return this;
  }

  /**
   * An optional array of URLs with a more detailed description of the error.
   * @return urls
   */
  @javax.annotation.Nullable
  public List<CheckPost200ResponseMatchesInnerRuleUrlsInner> getUrls() {
    return urls;
  }

  public void setUrls(List<CheckPost200ResponseMatchesInnerRuleUrlsInner> urls) {
    this.urls = urls;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckPost200ResponseMatchesInnerRule checkPost200ResponseMatchesInnerRule = (CheckPost200ResponseMatchesInnerRule) o;
    return Objects.equals(this.category, checkPost200ResponseMatchesInnerRule.category) &&
        Objects.equals(this.description, checkPost200ResponseMatchesInnerRule.description) &&
        Objects.equals(this.id, checkPost200ResponseMatchesInnerRule.id) &&
        Objects.equals(this.issueType, checkPost200ResponseMatchesInnerRule.issueType) &&
        Objects.equals(this.subId, checkPost200ResponseMatchesInnerRule.subId) &&
        Objects.equals(this.urls, checkPost200ResponseMatchesInnerRule.urls);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, description, id, issueType, subId, urls);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckPost200ResponseMatchesInnerRule {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issueType: ").append(toIndentedString(issueType)).append("\n");
    sb.append("    subId: ").append(toIndentedString(subId)).append("\n");
    sb.append("    urls: ").append(toIndentedString(urls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("issueType");
    openapiFields.add("subId");
    openapiFields.add("urls");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("category");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckPost200ResponseMatchesInnerRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckPost200ResponseMatchesInnerRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckPost200ResponseMatchesInnerRule is not found in the empty JSON string", CheckPost200ResponseMatchesInnerRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckPost200ResponseMatchesInnerRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckPost200ResponseMatchesInnerRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CheckPost200ResponseMatchesInnerRule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `category`
      CheckPost200ResponseMatchesInnerRuleCategory.validateJsonElement(jsonObj.get("category"));
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("issueType") != null && !jsonObj.get("issueType").isJsonNull()) && !jsonObj.get("issueType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issueType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issueType").toString()));
      }
      if ((jsonObj.get("subId") != null && !jsonObj.get("subId").isJsonNull()) && !jsonObj.get("subId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subId").toString()));
      }
      if (jsonObj.get("urls") != null && !jsonObj.get("urls").isJsonNull()) {
        JsonArray jsonArrayurls = jsonObj.getAsJsonArray("urls");
        if (jsonArrayurls != null) {
          // ensure the json data is an array
          if (!jsonObj.get("urls").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `urls` to be an array in the JSON string but got `%s`", jsonObj.get("urls").toString()));
          }

          // validate the optional field `urls` (array)
          for (int i = 0; i < jsonArrayurls.size(); i++) {
            CheckPost200ResponseMatchesInnerRuleUrlsInner.validateJsonElement(jsonArrayurls.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckPost200ResponseMatchesInnerRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckPost200ResponseMatchesInnerRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckPost200ResponseMatchesInnerRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckPost200ResponseMatchesInnerRule.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckPost200ResponseMatchesInnerRule>() {
           @Override
           public void write(JsonWriter out, CheckPost200ResponseMatchesInnerRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckPost200ResponseMatchesInnerRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckPost200ResponseMatchesInnerRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckPost200ResponseMatchesInnerRule
   * @throws IOException if the JSON string is invalid with respect to CheckPost200ResponseMatchesInnerRule
   */
  public static CheckPost200ResponseMatchesInnerRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckPost200ResponseMatchesInnerRule.class);
  }

  /**
   * Convert an instance of CheckPost200ResponseMatchesInnerRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

