/*
 * LanguageTool API
 * Check texts for style and grammar issues with <a href='https://languagetool.org'>LanguageTool</a>. Please consider the following default limitations:<ul><li>your daily request limit depending on <a href='https://languagetool.org/editor/settings/access-tokens'>your plan</a> <li>maximum number of requests per minute: 20 (free) / 80 (Premium) <li>maximum number of characters per minute: 75,000 (free) / 300,000 (Premium) <li>maximum number of characters per request: 20,000 (free) / 60,000 (Premium) <li>for the free version, also consider the <a href='https://dev.languagetool.org/public-http-api'>limitations documented here</a> <li><b>Note:</b> any parameters or outputs not part of this documentation are internal and must not be relied on</ul> Need more generous limits? Just <a href='https://languagetool.org/proofreading-api'>contact us</a>.
 *
 * The version of the OpenAPI document: 1.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CheckPost200Response;
import org.openapitools.client.model.LanguagesGet200ResponseInner;
import org.openapitools.client.model.WordsAddPost200Response;
import org.openapitools.client.model.WordsDeletePost200Response;
import org.openapitools.client.model.WordsGet200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Check a text
     *
     * The main feature - check a text with LanguageTool for possible style and grammar issues.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkPostTest() throws ApiException {
        String language = null;
        String text = null;
        String data = null;
        String username = null;
        String apiKey = null;
        String dicts = null;
        String motherTongue = null;
        String preferredVariants = null;
        String enabledRules = null;
        String disabledRules = null;
        String enabledCategories = null;
        String disabledCategories = null;
        Boolean enabledOnly = null;
        String level = null;
        CheckPost200Response response = api.checkPost(language, text, data, username, apiKey, dicts, motherTongue, preferredVariants, enabledRules, disabledRules, enabledCategories, disabledCategories, enabledOnly, level);
        // TODO: test validations
    }

    /**
     * Get a list of supported languages.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void languagesGetTest() throws ApiException {
        List<LanguagesGet200ResponseInner> response = api.languagesGet();
        // TODO: test validations
    }

    /**
     * Add word to a dictionary
     *
     * Add a word to one of the user&#39;s personal dictionaries. Please note that this feature is considered to be used for personal dictionaries which must not contain more than 500 words. If this is an issue for you, please contact us.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wordsAddPostTest() throws ApiException {
        String word = null;
        String username = null;
        String apiKey = null;
        String dict = null;
        WordsAddPost200Response response = api.wordsAddPost(word, username, apiKey, dict);
        // TODO: test validations
    }

    /**
     * Remove word from a dictionary
     *
     * Remove a word from one of the user&#39;s personal dictionaries.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wordsDeletePostTest() throws ApiException {
        String word = null;
        String username = null;
        String apiKey = null;
        String dict = null;
        WordsDeletePost200Response response = api.wordsDeletePost(word, username, apiKey, dict);
        // TODO: test validations
    }

    /**
     * List words in dictionaries
     *
     * List words in the user&#39;s personal dictionaries.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wordsGetTest() throws ApiException {
        String username = null;
        String apiKey = null;
        Integer offset = null;
        Integer limit = null;
        String dicts = null;
        WordsGet200Response response = api.wordsGet(username, apiKey, offset, limit, dicts);
        // TODO: test validations
    }

}
