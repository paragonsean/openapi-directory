/**
 * LanguageTool API
 * Check texts for style and grammar issues with <a href='https://languagetool.org'>LanguageTool</a>. Please consider the following default limitations:<ul><li>your daily request limit depending on <a href='https://languagetool.org/editor/settings/access-tokens'>your plan</a> <li>maximum number of requests per minute: 20 (free) / 80 (Premium) <li>maximum number of characters per minute: 75,000 (free) / 300,000 (Premium) <li>maximum number of characters per request: 20,000 (free) / 60,000 (Premium) <li>for the free version, also consider the <a href='https://dev.languagetool.org/public-http-api'>limitations documented here</a> <li><b>Note:</b> any parameters or outputs not part of this documentation are internal and must not be relied on</ul> Need more generous limits? Just <a href='https://languagetool.org/proofreading-api'>contact us</a>.
 *
 * The version of the OpenAPI document: 1.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LanguageToolApi);
  }
}(this, function(expect, LanguageToolApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LanguageToolApi.CheckPost200ResponseMatchesInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CheckPost200ResponseMatchesInner', function() {
    it('should create an instance of CheckPost200ResponseMatchesInner', function() {
      // uncomment below and update the code to test CheckPost200ResponseMatchesInner
      //var instance = new LanguageToolApi.CheckPost200ResponseMatchesInner();
      //expect(instance).to.be.a(LanguageToolApi.CheckPost200ResponseMatchesInner);
    });

    it('should have the property context (base name: "context")', function() {
      // uncomment below and update the code to test the property context
      //var instance = new LanguageToolApi.CheckPost200ResponseMatchesInner();
      //expect(instance).to.be();
    });

    it('should have the property length (base name: "length")', function() {
      // uncomment below and update the code to test the property length
      //var instance = new LanguageToolApi.CheckPost200ResponseMatchesInner();
      //expect(instance).to.be();
    });

    it('should have the property message (base name: "message")', function() {
      // uncomment below and update the code to test the property message
      //var instance = new LanguageToolApi.CheckPost200ResponseMatchesInner();
      //expect(instance).to.be();
    });

    it('should have the property offset (base name: "offset")', function() {
      // uncomment below and update the code to test the property offset
      //var instance = new LanguageToolApi.CheckPost200ResponseMatchesInner();
      //expect(instance).to.be();
    });

    it('should have the property replacements (base name: "replacements")', function() {
      // uncomment below and update the code to test the property replacements
      //var instance = new LanguageToolApi.CheckPost200ResponseMatchesInner();
      //expect(instance).to.be();
    });

    it('should have the property rule (base name: "rule")', function() {
      // uncomment below and update the code to test the property rule
      //var instance = new LanguageToolApi.CheckPost200ResponseMatchesInner();
      //expect(instance).to.be();
    });

    it('should have the property sentence (base name: "sentence")', function() {
      // uncomment below and update the code to test the property sentence
      //var instance = new LanguageToolApi.CheckPost200ResponseMatchesInner();
      //expect(instance).to.be();
    });

    it('should have the property shortMessage (base name: "shortMessage")', function() {
      // uncomment below and update the code to test the property shortMessage
      //var instance = new LanguageToolApi.CheckPost200ResponseMatchesInner();
      //expect(instance).to.be();
    });

  });

}));
