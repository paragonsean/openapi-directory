/**
 * LanguageTool API
 * Check texts for style and grammar issues with <a href='https://languagetool.org'>LanguageTool</a>. Please consider the following default limitations:<ul><li>your daily request limit depending on <a href='https://languagetool.org/editor/settings/access-tokens'>your plan</a> <li>maximum number of requests per minute: 20 (free) / 80 (Premium) <li>maximum number of characters per minute: 75,000 (free) / 300,000 (Premium) <li>maximum number of characters per request: 20,000 (free) / 60,000 (Premium) <li>for the free version, also consider the <a href='https://dev.languagetool.org/public-http-api'>limitations documented here</a> <li><b>Note:</b> any parameters or outputs not part of this documentation are internal and must not be relied on</ul> Need more generous limits? Just <a href='https://languagetool.org/proofreading-api'>contact us</a>.
 *
 * The version of the OpenAPI document: 1.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CheckPost200Response from '../model/CheckPost200Response';
import LanguagesGet200ResponseInner from '../model/LanguagesGet200ResponseInner';
import WordsAddPost200Response from '../model/WordsAddPost200Response';
import WordsDeletePost200Response from '../model/WordsDeletePost200Response';
import WordsGet200Response from '../model/WordsGet200Response';

/**
* Default service.
* @module api/DefaultApi
* @version 1.1.2
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the checkPost operation.
     * @callback module:api/DefaultApi~checkPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check a text
     * The main feature - check a text with LanguageTool for possible style and grammar issues.
     * @param {String} language A language code like `en-US`, `de-DE`, `fr`, or `auto` to guess the language automatically (see `preferredVariants` below). For languages with variants (English, German, Portuguese) spell checking will only be activated when you specify the variant, e.g. `en-GB` instead of just `en`.
     * @param {Object} opts Optional parameters
     * @param {String} [text] The text to be checked. This or 'data' is required.
     * @param {String} [data] The text to be checked, given as a JSON document that specifies what's text and what's markup. This or 'text' is required. Markup will be ignored when looking for errors. Example text: <pre>A &lt;b>test&lt;/b></pre>JSON for the example text: <pre>{\\\"annotation\\\":[  {\\\"text\\\": \\\"A \\\"},  {\\\"markup\\\": \\\"&lt;b>\\\"},  {\\\"text\\\": \\\"test\\\"},  {\\\"markup\\\": \\\"&lt;/b>\\\"} ]}</pre> <p>If you have markup that should be interpreted as whitespace, like <tt>&lt;p&gt;</tt> in HTML, you can have it interpreted like this: <pre>{\\\"markup\\\": \\\"&lt;p&gt;\\\", \\\"interpretAs\\\": \\\"\\\\n\\\\n\\\"}</pre><p>The 'data' feature is not limited to HTML or XML, it can be used for any kind of markup. Entities will need to be expanded in this input.
     * @param {String} [username] Set to get Premium API access: Your username/email as used to log in at languagetool.org.
     * @param {String} [apiKey] Set to get Premium API access: <a target='_blank' href='https://languagetool.org/editor/settings/access-tokens'>your API key</a>
     * @param {String} [dicts] Comma-separated list of dictionaries to include words from; uses special default dictionary if this is unset
     * @param {String} [motherTongue] A language code of the user's native language, enabling false friends checks for some language pairs.
     * @param {String} [preferredVariants] Comma-separated list of preferred language variants. The language detector used with `language=auto` can detect e.g. English, but it cannot decide whether British English or American English is used. Thus this parameter can be used to specify the preferred variants like `en-GB` and `de-AT`. Only available with `language=auto`. You should set variants for at least German and English, as otherwise the spell checking will not work for those, as no spelling dictionary can be selected for just `en` or `de`.
     * @param {String} [enabledRules] IDs of rules to be enabled, comma-separated
     * @param {String} [disabledRules] IDs of rules to be disabled, comma-separated
     * @param {String} [enabledCategories] IDs of categories to be enabled, comma-separated
     * @param {String} [disabledCategories] IDs of categories to be disabled, comma-separated
     * @param {Boolean} [enabledOnly = false)] If true, only the rules and categories whose IDs are specified with `enabledRules` or `enabledCategories` are enabled.
     * @param {module:model/String} [level] If set to `picky`, additional rules will be activated, i.e. rules that you might only find useful when checking formal text.
     * @param {module:api/DefaultApi~checkPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckPost200Response}
     */
    checkPost(language, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling checkPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'text': opts['text'],
        'data': opts['data'],
        'language': language,
        'username': opts['username'],
        'apiKey': opts['apiKey'],
        'dicts': opts['dicts'],
        'motherTongue': opts['motherTongue'],
        'preferredVariants': opts['preferredVariants'],
        'enabledRules': opts['enabledRules'],
        'disabledRules': opts['disabledRules'],
        'enabledCategories': opts['enabledCategories'],
        'disabledCategories': opts['disabledCategories'],
        'enabledOnly': opts['enabledOnly'],
        'level': opts['level']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CheckPost200Response;
      return this.apiClient.callApi(
        '/check', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the languagesGet operation.
     * @callback module:api/DefaultApi~languagesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LanguagesGet200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of supported languages.
     * @param {module:api/DefaultApi~languagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LanguagesGet200ResponseInner>}
     */
    languagesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LanguagesGet200ResponseInner];
      return this.apiClient.callApi(
        '/languages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the wordsAddPost operation.
     * @callback module:api/DefaultApi~wordsAddPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WordsAddPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add word to a dictionary
     * Add a word to one of the user's personal dictionaries. Please note that this feature is considered to be used for personal dictionaries which must not contain more than 500 words. If this is an issue for you, please contact us.
     * @param {String} word The word to be added. Must not be a phrase, i.e. cannot contain white space. The word is added to a global dictionary that applies to all languages.
     * @param {String} username Your username as used to log in at languagetool.org.
     * @param {String} apiKey <a target='_blank' href='https://languagetool.org/editor/settings/access-tokens'>Your API key</a>
     * @param {Object} opts Optional parameters
     * @param {String} [dict] Name of the dictionary to add the word to; non-existent dictionaries are created after calling this; if unset, adds to special default dictionary
     * @param {module:api/DefaultApi~wordsAddPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WordsAddPost200Response}
     */
    wordsAddPost(word, username, apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'word' is set
      if (word === undefined || word === null) {
        throw new Error("Missing the required parameter 'word' when calling wordsAddPost");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling wordsAddPost");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling wordsAddPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'word': word,
        'username': username,
        'apiKey': apiKey,
        'dict': opts['dict']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = WordsAddPost200Response;
      return this.apiClient.callApi(
        '/words/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the wordsDeletePost operation.
     * @callback module:api/DefaultApi~wordsDeletePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WordsDeletePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove word from a dictionary
     * Remove a word from one of the user's personal dictionaries.
     * @param {String} word The word to be removed.
     * @param {String} username Your username as used to log in at languagetool.org.
     * @param {String} apiKey <a target='_blank' href='https://languagetool.org/editor/settings/access-tokens'>Your API key</a>
     * @param {Object} opts Optional parameters
     * @param {String} [dict] Name of the dictionary to remove the word from; if the dictionary is empty upon calling this, it is deleted; if unset, removes from special default dictionary
     * @param {module:api/DefaultApi~wordsDeletePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WordsDeletePost200Response}
     */
    wordsDeletePost(word, username, apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'word' is set
      if (word === undefined || word === null) {
        throw new Error("Missing the required parameter 'word' when calling wordsDeletePost");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling wordsDeletePost");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling wordsDeletePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'word': word,
        'username': username,
        'apiKey': apiKey,
        'dict': opts['dict']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = WordsDeletePost200Response;
      return this.apiClient.callApi(
        '/words/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the wordsGet operation.
     * @callback module:api/DefaultApi~wordsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WordsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List words in dictionaries
     * List words in the user's personal dictionaries.
     * @param {String} username Your username as used to log in at languagetool.org.
     * @param {String} apiKey <a target='_blank' href='https://languagetool.org/editor/settings/access-tokens'>Your API key</a>
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Offset of where to start in the list of words. Defaults to 0.
     * @param {Number} [limit] Maximum number of words to return. Defaults to 10.
     * @param {String} [dicts] Comma-separated list of dictionaries to include words from; uses special default dictionary if this is unset
     * @param {module:api/DefaultApi~wordsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WordsGet200Response}
     */
    wordsGet(username, apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling wordsGet");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling wordsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'username': username,
        'apiKey': apiKey,
        'dicts': opts['dicts']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WordsGet200Response;
      return this.apiClient.callApi(
        '/words', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
