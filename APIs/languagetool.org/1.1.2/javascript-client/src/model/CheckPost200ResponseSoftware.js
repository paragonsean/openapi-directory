/**
 * LanguageTool API
 * Check texts for style and grammar issues with <a href='https://languagetool.org'>LanguageTool</a>. Please consider the following default limitations:<ul><li>your daily request limit depending on <a href='https://languagetool.org/editor/settings/access-tokens'>your plan</a> <li>maximum number of requests per minute: 20 (free) / 80 (Premium) <li>maximum number of characters per minute: 75,000 (free) / 300,000 (Premium) <li>maximum number of characters per request: 20,000 (free) / 60,000 (Premium) <li>for the free version, also consider the <a href='https://dev.languagetool.org/public-http-api'>limitations documented here</a> <li><b>Note:</b> any parameters or outputs not part of this documentation are internal and must not be relied on</ul> Need more generous limits? Just <a href='https://languagetool.org/proofreading-api'>contact us</a>.
 *
 * The version of the OpenAPI document: 1.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CheckPost200ResponseSoftware model module.
 * @module model/CheckPost200ResponseSoftware
 * @version 1.1.2
 */
class CheckPost200ResponseSoftware {
    /**
     * Constructs a new <code>CheckPost200ResponseSoftware</code>.
     * @alias module:model/CheckPost200ResponseSoftware
     * @param apiVersion {Number} Version of this API response. We don't expect to make incompatible changes, so this can also be increased for newly added fields.
     * @param buildDate {String} Date when the software was built, e.g. '2016-05-25'.
     * @param name {String} Usually 'LanguageTool'.
     * @param version {String} A version string like '3.3' or '3.4-SNAPSHOT'.
     */
    constructor(apiVersion, buildDate, name, version) { 
        
        CheckPost200ResponseSoftware.initialize(this, apiVersion, buildDate, name, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, apiVersion, buildDate, name, version) { 
        obj['apiVersion'] = apiVersion;
        obj['buildDate'] = buildDate;
        obj['name'] = name;
        obj['version'] = version;
    }

    /**
     * Constructs a <code>CheckPost200ResponseSoftware</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckPost200ResponseSoftware} obj Optional instance to populate.
     * @return {module:model/CheckPost200ResponseSoftware} The populated <code>CheckPost200ResponseSoftware</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckPost200ResponseSoftware();

            if (data.hasOwnProperty('apiVersion')) {
                obj['apiVersion'] = ApiClient.convertToType(data['apiVersion'], 'Number');
            }
            if (data.hasOwnProperty('buildDate')) {
                obj['buildDate'] = ApiClient.convertToType(data['buildDate'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('premium')) {
                obj['premium'] = ApiClient.convertToType(data['premium'], 'Boolean');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckPost200ResponseSoftware</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckPost200ResponseSoftware</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CheckPost200ResponseSoftware.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['buildDate'] && !(typeof data['buildDate'] === 'string' || data['buildDate'] instanceof String)) {
            throw new Error("Expected the field `buildDate` to be a primitive type in the JSON string but got " + data['buildDate']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}

CheckPost200ResponseSoftware.RequiredProperties = ["apiVersion", "buildDate", "name", "version"];

/**
 * Version of this API response. We don't expect to make incompatible changes, so this can also be increased for newly added fields.
 * @member {Number} apiVersion
 */
CheckPost200ResponseSoftware.prototype['apiVersion'] = undefined;

/**
 * Date when the software was built, e.g. '2016-05-25'.
 * @member {String} buildDate
 */
CheckPost200ResponseSoftware.prototype['buildDate'] = undefined;

/**
 * Usually 'LanguageTool'.
 * @member {String} name
 */
CheckPost200ResponseSoftware.prototype['name'] = undefined;

/**
 * true if you're using a Premium account with all the premium text checks (since LanguageTool 4.2)
 * @member {Boolean} premium
 */
CheckPost200ResponseSoftware.prototype['premium'] = undefined;

/**
 * An optional warning, e.g. when the API format is not stable.
 * @member {String} status
 */
CheckPost200ResponseSoftware.prototype['status'] = undefined;

/**
 * A version string like '3.3' or '3.4-SNAPSHOT'.
 * @member {String} version
 */
CheckPost200ResponseSoftware.prototype['version'] = undefined;






export default CheckPost200ResponseSoftware;

