/**
 * LanguageTool API
 * Check texts for style and grammar issues with <a href='https://languagetool.org'>LanguageTool</a>. Please consider the following default limitations:<ul><li>your daily request limit depending on <a href='https://languagetool.org/editor/settings/access-tokens'>your plan</a> <li>maximum number of requests per minute: 20 (free) / 80 (Premium) <li>maximum number of characters per minute: 75,000 (free) / 300,000 (Premium) <li>maximum number of characters per request: 20,000 (free) / 60,000 (Premium) <li>for the free version, also consider the <a href='https://dev.languagetool.org/public-http-api'>limitations documented here</a> <li><b>Note:</b> any parameters or outputs not part of this documentation are internal and must not be relied on</ul> Need more generous limits? Just <a href='https://languagetool.org/proofreading-api'>contact us</a>.
 *
 * The version of the OpenAPI document: 1.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CheckPost200ResponseMatchesInnerRuleCategory from './CheckPost200ResponseMatchesInnerRuleCategory';
import CheckPost200ResponseMatchesInnerRuleUrlsInner from './CheckPost200ResponseMatchesInnerRuleUrlsInner';

/**
 * The CheckPost200ResponseMatchesInnerRule model module.
 * @module model/CheckPost200ResponseMatchesInnerRule
 * @version 1.1.2
 */
class CheckPost200ResponseMatchesInnerRule {
    /**
     * Constructs a new <code>CheckPost200ResponseMatchesInnerRule</code>.
     * @alias module:model/CheckPost200ResponseMatchesInnerRule
     * @param category {module:model/CheckPost200ResponseMatchesInnerRuleCategory} 
     * @param description {String} 
     * @param id {String} An rule's identifier that's unique for this language.
     */
    constructor(category, description, id) { 
        
        CheckPost200ResponseMatchesInnerRule.initialize(this, category, description, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, category, description, id) { 
        obj['category'] = category;
        obj['description'] = description;
        obj['id'] = id;
    }

    /**
     * Constructs a <code>CheckPost200ResponseMatchesInnerRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckPost200ResponseMatchesInnerRule} obj Optional instance to populate.
     * @return {module:model/CheckPost200ResponseMatchesInnerRule} The populated <code>CheckPost200ResponseMatchesInnerRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckPost200ResponseMatchesInnerRule();

            if (data.hasOwnProperty('category')) {
                obj['category'] = CheckPost200ResponseMatchesInnerRuleCategory.constructFromObject(data['category']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('issueType')) {
                obj['issueType'] = ApiClient.convertToType(data['issueType'], 'String');
            }
            if (data.hasOwnProperty('subId')) {
                obj['subId'] = ApiClient.convertToType(data['subId'], 'String');
            }
            if (data.hasOwnProperty('urls')) {
                obj['urls'] = ApiClient.convertToType(data['urls'], [CheckPost200ResponseMatchesInnerRuleUrlsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckPost200ResponseMatchesInnerRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckPost200ResponseMatchesInnerRule</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CheckPost200ResponseMatchesInnerRule.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `category`
        if (data['category']) { // data not null
          CheckPost200ResponseMatchesInnerRuleCategory.validateJSON(data['category']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['issueType'] && !(typeof data['issueType'] === 'string' || data['issueType'] instanceof String)) {
            throw new Error("Expected the field `issueType` to be a primitive type in the JSON string but got " + data['issueType']);
        }
        // ensure the json data is a string
        if (data['subId'] && !(typeof data['subId'] === 'string' || data['subId'] instanceof String)) {
            throw new Error("Expected the field `subId` to be a primitive type in the JSON string but got " + data['subId']);
        }
        if (data['urls']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['urls'])) {
                throw new Error("Expected the field `urls` to be an array in the JSON data but got " + data['urls']);
            }
            // validate the optional field `urls` (array)
            for (const item of data['urls']) {
                CheckPost200ResponseMatchesInnerRuleUrlsInner.validateJSON(item);
            };
        }

        return true;
    }


}

CheckPost200ResponseMatchesInnerRule.RequiredProperties = ["category", "description", "id"];

/**
 * @member {module:model/CheckPost200ResponseMatchesInnerRuleCategory} category
 */
CheckPost200ResponseMatchesInnerRule.prototype['category'] = undefined;

/**
 * @member {String} description
 */
CheckPost200ResponseMatchesInnerRule.prototype['description'] = undefined;

/**
 * An rule's identifier that's unique for this language.
 * @member {String} id
 */
CheckPost200ResponseMatchesInnerRule.prototype['id'] = undefined;

/**
 * The <a href=\"http://www.w3.org/International/multilingualweb/lt/drafts/its20/its20.html#lqissue-typevalues\">Localization Quality Issue Type</a>. This is not defined for all languages, in which case it will always be 'Uncategorized'.
 * @member {String} issueType
 */
CheckPost200ResponseMatchesInnerRule.prototype['issueType'] = undefined;

/**
 * An optional sub identifier of the rule, used when several rules are grouped.
 * @member {String} subId
 */
CheckPost200ResponseMatchesInnerRule.prototype['subId'] = undefined;

/**
 * An optional array of URLs with a more detailed description of the error.
 * @member {Array.<module:model/CheckPost200ResponseMatchesInnerRuleUrlsInner>} urls
 */
CheckPost200ResponseMatchesInnerRule.prototype['urls'] = undefined;






export default CheckPost200ResponseMatchesInnerRule;

