/**
 * LanguageTool API
 * Check texts for style and grammar issues with <a href='https://languagetool.org'>LanguageTool</a>. Please consider the following default limitations:<ul><li>your daily request limit depending on <a href='https://languagetool.org/editor/settings/access-tokens'>your plan</a> <li>maximum number of requests per minute: 20 (free) / 80 (Premium) <li>maximum number of characters per minute: 75,000 (free) / 300,000 (Premium) <li>maximum number of characters per request: 20,000 (free) / 60,000 (Premium) <li>for the free version, also consider the <a href='https://dev.languagetool.org/public-http-api'>limitations documented here</a> <li><b>Note:</b> any parameters or outputs not part of this documentation are internal and must not be relied on</ul> Need more generous limits? Just <a href='https://languagetool.org/proofreading-api'>contact us</a>.
 *
 * The version of the OpenAPI document: 1.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CheckPost200ResponseLanguageDetectedLanguage from './CheckPost200ResponseLanguageDetectedLanguage';

/**
 * The CheckPost200ResponseLanguage model module.
 * @module model/CheckPost200ResponseLanguage
 * @version 1.1.2
 */
class CheckPost200ResponseLanguage {
    /**
     * Constructs a new <code>CheckPost200ResponseLanguage</code>.
     * The language used for checking the text.
     * @alias module:model/CheckPost200ResponseLanguage
     * @param code {String} ISO 639-1 code like 'en', 'en-US', or 'ca-ES-valencia'
     * @param detectedLanguage {module:model/CheckPost200ResponseLanguageDetectedLanguage} 
     * @param name {String} Language name like 'French' or 'English (US)'.
     */
    constructor(code, detectedLanguage, name) { 
        
        CheckPost200ResponseLanguage.initialize(this, code, detectedLanguage, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code, detectedLanguage, name) { 
        obj['code'] = code;
        obj['detectedLanguage'] = detectedLanguage;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>CheckPost200ResponseLanguage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckPost200ResponseLanguage} obj Optional instance to populate.
     * @return {module:model/CheckPost200ResponseLanguage} The populated <code>CheckPost200ResponseLanguage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckPost200ResponseLanguage();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('detectedLanguage')) {
                obj['detectedLanguage'] = CheckPost200ResponseLanguageDetectedLanguage.constructFromObject(data['detectedLanguage']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckPost200ResponseLanguage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckPost200ResponseLanguage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CheckPost200ResponseLanguage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // validate the optional field `detectedLanguage`
        if (data['detectedLanguage']) { // data not null
          CheckPost200ResponseLanguageDetectedLanguage.validateJSON(data['detectedLanguage']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

CheckPost200ResponseLanguage.RequiredProperties = ["code", "detectedLanguage", "name"];

/**
 * ISO 639-1 code like 'en', 'en-US', or 'ca-ES-valencia'
 * @member {String} code
 */
CheckPost200ResponseLanguage.prototype['code'] = undefined;

/**
 * @member {module:model/CheckPost200ResponseLanguageDetectedLanguage} detectedLanguage
 */
CheckPost200ResponseLanguage.prototype['detectedLanguage'] = undefined;

/**
 * Language name like 'French' or 'English (US)'.
 * @member {String} name
 */
CheckPost200ResponseLanguage.prototype['name'] = undefined;






export default CheckPost200ResponseLanguage;

