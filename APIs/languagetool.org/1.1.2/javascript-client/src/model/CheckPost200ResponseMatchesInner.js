/**
 * LanguageTool API
 * Check texts for style and grammar issues with <a href='https://languagetool.org'>LanguageTool</a>. Please consider the following default limitations:<ul><li>your daily request limit depending on <a href='https://languagetool.org/editor/settings/access-tokens'>your plan</a> <li>maximum number of requests per minute: 20 (free) / 80 (Premium) <li>maximum number of characters per minute: 75,000 (free) / 300,000 (Premium) <li>maximum number of characters per request: 20,000 (free) / 60,000 (Premium) <li>for the free version, also consider the <a href='https://dev.languagetool.org/public-http-api'>limitations documented here</a> <li><b>Note:</b> any parameters or outputs not part of this documentation are internal and must not be relied on</ul> Need more generous limits? Just <a href='https://languagetool.org/proofreading-api'>contact us</a>.
 *
 * The version of the OpenAPI document: 1.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CheckPost200ResponseMatchesInnerContext from './CheckPost200ResponseMatchesInnerContext';
import CheckPost200ResponseMatchesInnerReplacementsInner from './CheckPost200ResponseMatchesInnerReplacementsInner';
import CheckPost200ResponseMatchesInnerRule from './CheckPost200ResponseMatchesInnerRule';

/**
 * The CheckPost200ResponseMatchesInner model module.
 * @module model/CheckPost200ResponseMatchesInner
 * @version 1.1.2
 */
class CheckPost200ResponseMatchesInner {
    /**
     * Constructs a new <code>CheckPost200ResponseMatchesInner</code>.
     * @alias module:model/CheckPost200ResponseMatchesInner
     * @param context {module:model/CheckPost200ResponseMatchesInnerContext} 
     * @param length {Number} The length of the error in characters.
     * @param message {String} Message about the error displayed to the user.
     * @param offset {Number} The 0-based character offset of the error in the text.
     * @param replacements {Array.<module:model/CheckPost200ResponseMatchesInnerReplacementsInner>} Replacements that might correct the error. The array can be empty, in this case there is no suggested replacement.
     * @param sentence {String} The sentence the error occurred in (since LanguageTool 4.0 or later)
     */
    constructor(context, length, message, offset, replacements, sentence) { 
        
        CheckPost200ResponseMatchesInner.initialize(this, context, length, message, offset, replacements, sentence);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, context, length, message, offset, replacements, sentence) { 
        obj['context'] = context;
        obj['length'] = length;
        obj['message'] = message;
        obj['offset'] = offset;
        obj['replacements'] = replacements;
        obj['sentence'] = sentence;
    }

    /**
     * Constructs a <code>CheckPost200ResponseMatchesInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckPost200ResponseMatchesInner} obj Optional instance to populate.
     * @return {module:model/CheckPost200ResponseMatchesInner} The populated <code>CheckPost200ResponseMatchesInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckPost200ResponseMatchesInner();

            if (data.hasOwnProperty('context')) {
                obj['context'] = CheckPost200ResponseMatchesInnerContext.constructFromObject(data['context']);
            }
            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'Number');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('replacements')) {
                obj['replacements'] = ApiClient.convertToType(data['replacements'], [CheckPost200ResponseMatchesInnerReplacementsInner]);
            }
            if (data.hasOwnProperty('rule')) {
                obj['rule'] = CheckPost200ResponseMatchesInnerRule.constructFromObject(data['rule']);
            }
            if (data.hasOwnProperty('sentence')) {
                obj['sentence'] = ApiClient.convertToType(data['sentence'], 'String');
            }
            if (data.hasOwnProperty('shortMessage')) {
                obj['shortMessage'] = ApiClient.convertToType(data['shortMessage'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckPost200ResponseMatchesInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckPost200ResponseMatchesInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CheckPost200ResponseMatchesInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `context`
        if (data['context']) { // data not null
          CheckPost200ResponseMatchesInnerContext.validateJSON(data['context']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        if (data['replacements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['replacements'])) {
                throw new Error("Expected the field `replacements` to be an array in the JSON data but got " + data['replacements']);
            }
            // validate the optional field `replacements` (array)
            for (const item of data['replacements']) {
                CheckPost200ResponseMatchesInnerReplacementsInner.validateJSON(item);
            };
        }
        // validate the optional field `rule`
        if (data['rule']) { // data not null
          CheckPost200ResponseMatchesInnerRule.validateJSON(data['rule']);
        }
        // ensure the json data is a string
        if (data['sentence'] && !(typeof data['sentence'] === 'string' || data['sentence'] instanceof String)) {
            throw new Error("Expected the field `sentence` to be a primitive type in the JSON string but got " + data['sentence']);
        }
        // ensure the json data is a string
        if (data['shortMessage'] && !(typeof data['shortMessage'] === 'string' || data['shortMessage'] instanceof String)) {
            throw new Error("Expected the field `shortMessage` to be a primitive type in the JSON string but got " + data['shortMessage']);
        }

        return true;
    }


}

CheckPost200ResponseMatchesInner.RequiredProperties = ["context", "length", "message", "offset", "replacements", "sentence"];

/**
 * @member {module:model/CheckPost200ResponseMatchesInnerContext} context
 */
CheckPost200ResponseMatchesInner.prototype['context'] = undefined;

/**
 * The length of the error in characters.
 * @member {Number} length
 */
CheckPost200ResponseMatchesInner.prototype['length'] = undefined;

/**
 * Message about the error displayed to the user.
 * @member {String} message
 */
CheckPost200ResponseMatchesInner.prototype['message'] = undefined;

/**
 * The 0-based character offset of the error in the text.
 * @member {Number} offset
 */
CheckPost200ResponseMatchesInner.prototype['offset'] = undefined;

/**
 * Replacements that might correct the error. The array can be empty, in this case there is no suggested replacement.
 * @member {Array.<module:model/CheckPost200ResponseMatchesInnerReplacementsInner>} replacements
 */
CheckPost200ResponseMatchesInner.prototype['replacements'] = undefined;

/**
 * @member {module:model/CheckPost200ResponseMatchesInnerRule} rule
 */
CheckPost200ResponseMatchesInner.prototype['rule'] = undefined;

/**
 * The sentence the error occurred in (since LanguageTool 4.0 or later)
 * @member {String} sentence
 */
CheckPost200ResponseMatchesInner.prototype['sentence'] = undefined;

/**
 * An optional shorter version of 'message'.
 * @member {String} shortMessage
 */
CheckPost200ResponseMatchesInner.prototype['shortMessage'] = undefined;






export default CheckPost200ResponseMatchesInner;

