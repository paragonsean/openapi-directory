# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.check_post200_response_matches_inner_rule_category import CheckPost200ResponseMatchesInnerRuleCategory
from openapi_server.models.check_post200_response_matches_inner_rule_urls_inner import CheckPost200ResponseMatchesInnerRuleUrlsInner
from openapi_server import util


class CheckPost200ResponseMatchesInnerRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: CheckPost200ResponseMatchesInnerRuleCategory=None, description: str=None, id: str=None, issue_type: str=None, sub_id: str=None, urls: List[CheckPost200ResponseMatchesInnerRuleUrlsInner]=None):
        """CheckPost200ResponseMatchesInnerRule - a model defined in OpenAPI

        :param category: The category of this CheckPost200ResponseMatchesInnerRule.
        :param description: The description of this CheckPost200ResponseMatchesInnerRule.
        :param id: The id of this CheckPost200ResponseMatchesInnerRule.
        :param issue_type: The issue_type of this CheckPost200ResponseMatchesInnerRule.
        :param sub_id: The sub_id of this CheckPost200ResponseMatchesInnerRule.
        :param urls: The urls of this CheckPost200ResponseMatchesInnerRule.
        """
        self.openapi_types = {
            'category': CheckPost200ResponseMatchesInnerRuleCategory,
            'description': str,
            'id': str,
            'issue_type': str,
            'sub_id': str,
            'urls': List[CheckPost200ResponseMatchesInnerRuleUrlsInner]
        }

        self.attribute_map = {
            'category': 'category',
            'description': 'description',
            'id': 'id',
            'issue_type': 'issueType',
            'sub_id': 'subId',
            'urls': 'urls'
        }

        self._category = category
        self._description = description
        self._id = id
        self._issue_type = issue_type
        self._sub_id = sub_id
        self._urls = urls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckPost200ResponseMatchesInnerRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _check_post_200_response_matches_inner_rule of this CheckPost200ResponseMatchesInnerRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this CheckPost200ResponseMatchesInnerRule.


        :return: The category of this CheckPost200ResponseMatchesInnerRule.
        :rtype: CheckPost200ResponseMatchesInnerRuleCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CheckPost200ResponseMatchesInnerRule.


        :param category: The category of this CheckPost200ResponseMatchesInnerRule.
        :type category: CheckPost200ResponseMatchesInnerRuleCategory
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def description(self):
        """Gets the description of this CheckPost200ResponseMatchesInnerRule.


        :return: The description of this CheckPost200ResponseMatchesInnerRule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CheckPost200ResponseMatchesInnerRule.


        :param description: The description of this CheckPost200ResponseMatchesInnerRule.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this CheckPost200ResponseMatchesInnerRule.

        An rule's identifier that's unique for this language.

        :return: The id of this CheckPost200ResponseMatchesInnerRule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CheckPost200ResponseMatchesInnerRule.

        An rule's identifier that's unique for this language.

        :param id: The id of this CheckPost200ResponseMatchesInnerRule.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def issue_type(self):
        """Gets the issue_type of this CheckPost200ResponseMatchesInnerRule.

        The <a href=\"http://www.w3.org/International/multilingualweb/lt/drafts/its20/its20.html#lqissue-typevalues\">Localization Quality Issue Type</a>. This is not defined for all languages, in which case it will always be 'Uncategorized'.

        :return: The issue_type of this CheckPost200ResponseMatchesInnerRule.
        :rtype: str
        """
        return self._issue_type

    @issue_type.setter
    def issue_type(self, issue_type):
        """Sets the issue_type of this CheckPost200ResponseMatchesInnerRule.

        The <a href=\"http://www.w3.org/International/multilingualweb/lt/drafts/its20/its20.html#lqissue-typevalues\">Localization Quality Issue Type</a>. This is not defined for all languages, in which case it will always be 'Uncategorized'.

        :param issue_type: The issue_type of this CheckPost200ResponseMatchesInnerRule.
        :type issue_type: str
        """

        self._issue_type = issue_type

    @property
    def sub_id(self):
        """Gets the sub_id of this CheckPost200ResponseMatchesInnerRule.

        An optional sub identifier of the rule, used when several rules are grouped.

        :return: The sub_id of this CheckPost200ResponseMatchesInnerRule.
        :rtype: str
        """
        return self._sub_id

    @sub_id.setter
    def sub_id(self, sub_id):
        """Sets the sub_id of this CheckPost200ResponseMatchesInnerRule.

        An optional sub identifier of the rule, used when several rules are grouped.

        :param sub_id: The sub_id of this CheckPost200ResponseMatchesInnerRule.
        :type sub_id: str
        """

        self._sub_id = sub_id

    @property
    def urls(self):
        """Gets the urls of this CheckPost200ResponseMatchesInnerRule.

        An optional array of URLs with a more detailed description of the error.

        :return: The urls of this CheckPost200ResponseMatchesInnerRule.
        :rtype: List[CheckPost200ResponseMatchesInnerRuleUrlsInner]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this CheckPost200ResponseMatchesInnerRule.

        An optional array of URLs with a more detailed description of the error.

        :param urls: The urls of this CheckPost200ResponseMatchesInnerRule.
        :type urls: List[CheckPost200ResponseMatchesInnerRuleUrlsInner]
        """

        self._urls = urls
