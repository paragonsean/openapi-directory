# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckPost200ResponseSoftware(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_version: int=None, build_date: str=None, name: str=None, premium: bool=None, status: str=None, version: str=None):
        """CheckPost200ResponseSoftware - a model defined in OpenAPI

        :param api_version: The api_version of this CheckPost200ResponseSoftware.
        :param build_date: The build_date of this CheckPost200ResponseSoftware.
        :param name: The name of this CheckPost200ResponseSoftware.
        :param premium: The premium of this CheckPost200ResponseSoftware.
        :param status: The status of this CheckPost200ResponseSoftware.
        :param version: The version of this CheckPost200ResponseSoftware.
        """
        self.openapi_types = {
            'api_version': int,
            'build_date': str,
            'name': str,
            'premium': bool,
            'status': str,
            'version': str
        }

        self.attribute_map = {
            'api_version': 'apiVersion',
            'build_date': 'buildDate',
            'name': 'name',
            'premium': 'premium',
            'status': 'status',
            'version': 'version'
        }

        self._api_version = api_version
        self._build_date = build_date
        self._name = name
        self._premium = premium
        self._status = status
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckPost200ResponseSoftware':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _check_post_200_response_software of this CheckPost200ResponseSoftware.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_version(self):
        """Gets the api_version of this CheckPost200ResponseSoftware.

        Version of this API response. We don't expect to make incompatible changes, so this can also be increased for newly added fields.

        :return: The api_version of this CheckPost200ResponseSoftware.
        :rtype: int
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this CheckPost200ResponseSoftware.

        Version of this API response. We don't expect to make incompatible changes, so this can also be increased for newly added fields.

        :param api_version: The api_version of this CheckPost200ResponseSoftware.
        :type api_version: int
        """
        if api_version is None:
            raise ValueError("Invalid value for `api_version`, must not be `None`")

        self._api_version = api_version

    @property
    def build_date(self):
        """Gets the build_date of this CheckPost200ResponseSoftware.

        Date when the software was built, e.g. '2016-05-25'.

        :return: The build_date of this CheckPost200ResponseSoftware.
        :rtype: str
        """
        return self._build_date

    @build_date.setter
    def build_date(self, build_date):
        """Sets the build_date of this CheckPost200ResponseSoftware.

        Date when the software was built, e.g. '2016-05-25'.

        :param build_date: The build_date of this CheckPost200ResponseSoftware.
        :type build_date: str
        """
        if build_date is None:
            raise ValueError("Invalid value for `build_date`, must not be `None`")

        self._build_date = build_date

    @property
    def name(self):
        """Gets the name of this CheckPost200ResponseSoftware.

        Usually 'LanguageTool'.

        :return: The name of this CheckPost200ResponseSoftware.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CheckPost200ResponseSoftware.

        Usually 'LanguageTool'.

        :param name: The name of this CheckPost200ResponseSoftware.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def premium(self):
        """Gets the premium of this CheckPost200ResponseSoftware.

        true if you're using a Premium account with all the premium text checks (since LanguageTool 4.2)

        :return: The premium of this CheckPost200ResponseSoftware.
        :rtype: bool
        """
        return self._premium

    @premium.setter
    def premium(self, premium):
        """Sets the premium of this CheckPost200ResponseSoftware.

        true if you're using a Premium account with all the premium text checks (since LanguageTool 4.2)

        :param premium: The premium of this CheckPost200ResponseSoftware.
        :type premium: bool
        """

        self._premium = premium

    @property
    def status(self):
        """Gets the status of this CheckPost200ResponseSoftware.

        An optional warning, e.g. when the API format is not stable.

        :return: The status of this CheckPost200ResponseSoftware.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CheckPost200ResponseSoftware.

        An optional warning, e.g. when the API format is not stable.

        :param status: The status of this CheckPost200ResponseSoftware.
        :type status: str
        """

        self._status = status

    @property
    def version(self):
        """Gets the version of this CheckPost200ResponseSoftware.

        A version string like '3.3' or '3.4-SNAPSHOT'.

        :return: The version of this CheckPost200ResponseSoftware.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CheckPost200ResponseSoftware.

        A version string like '3.3' or '3.4-SNAPSHOT'.

        :param version: The version of this CheckPost200ResponseSoftware.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
