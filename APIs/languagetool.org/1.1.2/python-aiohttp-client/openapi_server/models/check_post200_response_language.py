# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.check_post200_response_language_detected_language import CheckPost200ResponseLanguageDetectedLanguage
from openapi_server import util


class CheckPost200ResponseLanguage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, detected_language: CheckPost200ResponseLanguageDetectedLanguage=None, name: str=None):
        """CheckPost200ResponseLanguage - a model defined in OpenAPI

        :param code: The code of this CheckPost200ResponseLanguage.
        :param detected_language: The detected_language of this CheckPost200ResponseLanguage.
        :param name: The name of this CheckPost200ResponseLanguage.
        """
        self.openapi_types = {
            'code': str,
            'detected_language': CheckPost200ResponseLanguageDetectedLanguage,
            'name': str
        }

        self.attribute_map = {
            'code': 'code',
            'detected_language': 'detectedLanguage',
            'name': 'name'
        }

        self._code = code
        self._detected_language = detected_language
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckPost200ResponseLanguage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _check_post_200_response_language of this CheckPost200ResponseLanguage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this CheckPost200ResponseLanguage.

        ISO 639-1 code like 'en', 'en-US', or 'ca-ES-valencia'

        :return: The code of this CheckPost200ResponseLanguage.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CheckPost200ResponseLanguage.

        ISO 639-1 code like 'en', 'en-US', or 'ca-ES-valencia'

        :param code: The code of this CheckPost200ResponseLanguage.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def detected_language(self):
        """Gets the detected_language of this CheckPost200ResponseLanguage.


        :return: The detected_language of this CheckPost200ResponseLanguage.
        :rtype: CheckPost200ResponseLanguageDetectedLanguage
        """
        return self._detected_language

    @detected_language.setter
    def detected_language(self, detected_language):
        """Sets the detected_language of this CheckPost200ResponseLanguage.


        :param detected_language: The detected_language of this CheckPost200ResponseLanguage.
        :type detected_language: CheckPost200ResponseLanguageDetectedLanguage
        """
        if detected_language is None:
            raise ValueError("Invalid value for `detected_language`, must not be `None`")

        self._detected_language = detected_language

    @property
    def name(self):
        """Gets the name of this CheckPost200ResponseLanguage.

        Language name like 'French' or 'English (US)'.

        :return: The name of this CheckPost200ResponseLanguage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CheckPost200ResponseLanguage.

        Language name like 'French' or 'English (US)'.

        :param name: The name of this CheckPost200ResponseLanguage.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
