# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.check_post200_response_matches_inner_context import CheckPost200ResponseMatchesInnerContext
from openapi_server.models.check_post200_response_matches_inner_replacements_inner import CheckPost200ResponseMatchesInnerReplacementsInner
from openapi_server.models.check_post200_response_matches_inner_rule import CheckPost200ResponseMatchesInnerRule
from openapi_server import util


class CheckPost200ResponseMatchesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: CheckPost200ResponseMatchesInnerContext=None, length: int=None, message: str=None, offset: int=None, replacements: List[CheckPost200ResponseMatchesInnerReplacementsInner]=None, rule: CheckPost200ResponseMatchesInnerRule=None, sentence: str=None, short_message: str=None):
        """CheckPost200ResponseMatchesInner - a model defined in OpenAPI

        :param context: The context of this CheckPost200ResponseMatchesInner.
        :param length: The length of this CheckPost200ResponseMatchesInner.
        :param message: The message of this CheckPost200ResponseMatchesInner.
        :param offset: The offset of this CheckPost200ResponseMatchesInner.
        :param replacements: The replacements of this CheckPost200ResponseMatchesInner.
        :param rule: The rule of this CheckPost200ResponseMatchesInner.
        :param sentence: The sentence of this CheckPost200ResponseMatchesInner.
        :param short_message: The short_message of this CheckPost200ResponseMatchesInner.
        """
        self.openapi_types = {
            'context': CheckPost200ResponseMatchesInnerContext,
            'length': int,
            'message': str,
            'offset': int,
            'replacements': List[CheckPost200ResponseMatchesInnerReplacementsInner],
            'rule': CheckPost200ResponseMatchesInnerRule,
            'sentence': str,
            'short_message': str
        }

        self.attribute_map = {
            'context': 'context',
            'length': 'length',
            'message': 'message',
            'offset': 'offset',
            'replacements': 'replacements',
            'rule': 'rule',
            'sentence': 'sentence',
            'short_message': 'shortMessage'
        }

        self._context = context
        self._length = length
        self._message = message
        self._offset = offset
        self._replacements = replacements
        self._rule = rule
        self._sentence = sentence
        self._short_message = short_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckPost200ResponseMatchesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _check_post_200_response_matches_inner of this CheckPost200ResponseMatchesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this CheckPost200ResponseMatchesInner.


        :return: The context of this CheckPost200ResponseMatchesInner.
        :rtype: CheckPost200ResponseMatchesInnerContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this CheckPost200ResponseMatchesInner.


        :param context: The context of this CheckPost200ResponseMatchesInner.
        :type context: CheckPost200ResponseMatchesInnerContext
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")

        self._context = context

    @property
    def length(self):
        """Gets the length of this CheckPost200ResponseMatchesInner.

        The length of the error in characters.

        :return: The length of this CheckPost200ResponseMatchesInner.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this CheckPost200ResponseMatchesInner.

        The length of the error in characters.

        :param length: The length of this CheckPost200ResponseMatchesInner.
        :type length: int
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")

        self._length = length

    @property
    def message(self):
        """Gets the message of this CheckPost200ResponseMatchesInner.

        Message about the error displayed to the user.

        :return: The message of this CheckPost200ResponseMatchesInner.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CheckPost200ResponseMatchesInner.

        Message about the error displayed to the user.

        :param message: The message of this CheckPost200ResponseMatchesInner.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def offset(self):
        """Gets the offset of this CheckPost200ResponseMatchesInner.

        The 0-based character offset of the error in the text.

        :return: The offset of this CheckPost200ResponseMatchesInner.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this CheckPost200ResponseMatchesInner.

        The 0-based character offset of the error in the text.

        :param offset: The offset of this CheckPost200ResponseMatchesInner.
        :type offset: int
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")

        self._offset = offset

    @property
    def replacements(self):
        """Gets the replacements of this CheckPost200ResponseMatchesInner.

        Replacements that might correct the error. The array can be empty, in this case there is no suggested replacement.

        :return: The replacements of this CheckPost200ResponseMatchesInner.
        :rtype: List[CheckPost200ResponseMatchesInnerReplacementsInner]
        """
        return self._replacements

    @replacements.setter
    def replacements(self, replacements):
        """Sets the replacements of this CheckPost200ResponseMatchesInner.

        Replacements that might correct the error. The array can be empty, in this case there is no suggested replacement.

        :param replacements: The replacements of this CheckPost200ResponseMatchesInner.
        :type replacements: List[CheckPost200ResponseMatchesInnerReplacementsInner]
        """
        if replacements is None:
            raise ValueError("Invalid value for `replacements`, must not be `None`")

        self._replacements = replacements

    @property
    def rule(self):
        """Gets the rule of this CheckPost200ResponseMatchesInner.


        :return: The rule of this CheckPost200ResponseMatchesInner.
        :rtype: CheckPost200ResponseMatchesInnerRule
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this CheckPost200ResponseMatchesInner.


        :param rule: The rule of this CheckPost200ResponseMatchesInner.
        :type rule: CheckPost200ResponseMatchesInnerRule
        """

        self._rule = rule

    @property
    def sentence(self):
        """Gets the sentence of this CheckPost200ResponseMatchesInner.

        The sentence the error occurred in (since LanguageTool 4.0 or later)

        :return: The sentence of this CheckPost200ResponseMatchesInner.
        :rtype: str
        """
        return self._sentence

    @sentence.setter
    def sentence(self, sentence):
        """Sets the sentence of this CheckPost200ResponseMatchesInner.

        The sentence the error occurred in (since LanguageTool 4.0 or later)

        :param sentence: The sentence of this CheckPost200ResponseMatchesInner.
        :type sentence: str
        """
        if sentence is None:
            raise ValueError("Invalid value for `sentence`, must not be `None`")

        self._sentence = sentence

    @property
    def short_message(self):
        """Gets the short_message of this CheckPost200ResponseMatchesInner.

        An optional shorter version of 'message'.

        :return: The short_message of this CheckPost200ResponseMatchesInner.
        :rtype: str
        """
        return self._short_message

    @short_message.setter
    def short_message(self, short_message):
        """Sets the short_message of this CheckPost200ResponseMatchesInner.

        An optional shorter version of 'message'.

        :param short_message: The short_message of this CheckPost200ResponseMatchesInner.
        :type short_message: str
        """

        self._short_message = short_message
