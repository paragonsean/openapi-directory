/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreate_batch_response_body.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreate_batch_response_body::OAICreate_batch_response_body(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreate_batch_response_body::OAICreate_batch_response_body() {
    this->initializeModel();
}

OAICreate_batch_response_body::~OAICreate_batch_response_body() {}

void OAICreate_batch_response_body::initializeModel() {

    m_batch_errors_url_isSet = false;
    m_batch_errors_url_isValid = false;

    m_batch_id_isSet = false;
    m_batch_id_isValid = false;

    m_batch_labels_url_isSet = false;
    m_batch_labels_url_isValid = false;

    m_batch_notes_isSet = false;
    m_batch_notes_isValid = false;

    m_batch_number_isSet = false;
    m_batch_number_isValid = false;

    m_batch_shipments_url_isSet = false;
    m_batch_shipments_url_isValid = false;

    m_completed_isSet = false;
    m_completed_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_external_batch_id_isSet = false;
    m_external_batch_id_isValid = false;

    m_form_download_isSet = false;
    m_form_download_isValid = false;

    m_forms_isSet = false;
    m_forms_isValid = false;

    m_label_download_isSet = false;
    m_label_download_isValid = false;

    m_label_format_isSet = false;
    m_label_format_isValid = false;

    m_label_layout_isSet = false;
    m_label_layout_isValid = false;

    m_processed_at_isSet = false;
    m_processed_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAICreate_batch_response_body::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreate_batch_response_body::fromJsonObject(QJsonObject json) {

    m_batch_errors_url_isValid = ::OpenAPI::fromJsonValue(m_batch_errors_url, json[QString("batch_errors_url")]);
    m_batch_errors_url_isSet = !json[QString("batch_errors_url")].isNull() && m_batch_errors_url_isValid;

    m_batch_id_isValid = ::OpenAPI::fromJsonValue(m_batch_id, json[QString("batch_id")]);
    m_batch_id_isSet = !json[QString("batch_id")].isNull() && m_batch_id_isValid;

    m_batch_labels_url_isValid = ::OpenAPI::fromJsonValue(m_batch_labels_url, json[QString("batch_labels_url")]);
    m_batch_labels_url_isSet = !json[QString("batch_labels_url")].isNull() && m_batch_labels_url_isValid;

    m_batch_notes_isValid = ::OpenAPI::fromJsonValue(m_batch_notes, json[QString("batch_notes")]);
    m_batch_notes_isSet = !json[QString("batch_notes")].isNull() && m_batch_notes_isValid;

    m_batch_number_isValid = ::OpenAPI::fromJsonValue(m_batch_number, json[QString("batch_number")]);
    m_batch_number_isSet = !json[QString("batch_number")].isNull() && m_batch_number_isValid;

    m_batch_shipments_url_isValid = ::OpenAPI::fromJsonValue(m_batch_shipments_url, json[QString("batch_shipments_url")]);
    m_batch_shipments_url_isSet = !json[QString("batch_shipments_url")].isNull() && m_batch_shipments_url_isValid;

    m_completed_isValid = ::OpenAPI::fromJsonValue(m_completed, json[QString("completed")]);
    m_completed_isSet = !json[QString("completed")].isNull() && m_completed_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_external_batch_id_isValid = ::OpenAPI::fromJsonValue(m_external_batch_id, json[QString("external_batch_id")]);
    m_external_batch_id_isSet = !json[QString("external_batch_id")].isNull() && m_external_batch_id_isValid;

    m_form_download_isValid = ::OpenAPI::fromJsonValue(m_form_download, json[QString("form_download")]);
    m_form_download_isSet = !json[QString("form_download")].isNull() && m_form_download_isValid;

    m_forms_isValid = ::OpenAPI::fromJsonValue(m_forms, json[QString("forms")]);
    m_forms_isSet = !json[QString("forms")].isNull() && m_forms_isValid;

    m_label_download_isValid = ::OpenAPI::fromJsonValue(m_label_download, json[QString("label_download")]);
    m_label_download_isSet = !json[QString("label_download")].isNull() && m_label_download_isValid;

    m_label_format_isValid = ::OpenAPI::fromJsonValue(m_label_format, json[QString("label_format")]);
    m_label_format_isSet = !json[QString("label_format")].isNull() && m_label_format_isValid;

    m_label_layout_isValid = ::OpenAPI::fromJsonValue(m_label_layout, json[QString("label_layout")]);
    m_label_layout_isSet = !json[QString("label_layout")].isNull() && m_label_layout_isValid;

    m_processed_at_isValid = ::OpenAPI::fromJsonValue(m_processed_at, json[QString("processed_at")]);
    m_processed_at_isSet = !json[QString("processed_at")].isNull() && m_processed_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAICreate_batch_response_body::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreate_batch_response_body::asJsonObject() const {
    QJsonObject obj;
    if (m_batch_errors_url.isSet()) {
        obj.insert(QString("batch_errors_url"), ::OpenAPI::toJsonValue(m_batch_errors_url));
    }
    if (m_batch_id_isSet) {
        obj.insert(QString("batch_id"), ::OpenAPI::toJsonValue(m_batch_id));
    }
    if (m_batch_labels_url.isSet()) {
        obj.insert(QString("batch_labels_url"), ::OpenAPI::toJsonValue(m_batch_labels_url));
    }
    if (m_batch_notes_isSet) {
        obj.insert(QString("batch_notes"), ::OpenAPI::toJsonValue(m_batch_notes));
    }
    if (m_batch_number_isSet) {
        obj.insert(QString("batch_number"), ::OpenAPI::toJsonValue(m_batch_number));
    }
    if (m_batch_shipments_url.isSet()) {
        obj.insert(QString("batch_shipments_url"), ::OpenAPI::toJsonValue(m_batch_shipments_url));
    }
    if (m_completed_isSet) {
        obj.insert(QString("completed"), ::OpenAPI::toJsonValue(m_completed));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_errors_isSet) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_external_batch_id_isSet) {
        obj.insert(QString("external_batch_id"), ::OpenAPI::toJsonValue(m_external_batch_id));
    }
    if (m_form_download.isSet()) {
        obj.insert(QString("form_download"), ::OpenAPI::toJsonValue(m_form_download));
    }
    if (m_forms_isSet) {
        obj.insert(QString("forms"), ::OpenAPI::toJsonValue(m_forms));
    }
    if (m_label_download.isSet()) {
        obj.insert(QString("label_download"), ::OpenAPI::toJsonValue(m_label_download));
    }
    if (m_label_format.isSet()) {
        obj.insert(QString("label_format"), ::OpenAPI::toJsonValue(m_label_format));
    }
    if (m_label_layout.isSet()) {
        obj.insert(QString("label_layout"), ::OpenAPI::toJsonValue(m_label_layout));
    }
    if (m_processed_at_isSet) {
        obj.insert(QString("processed_at"), ::OpenAPI::toJsonValue(m_processed_at));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_warnings_isSet) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

OAIOptional_link OAICreate_batch_response_body::getBatchErrorsUrl() const {
    return m_batch_errors_url;
}
void OAICreate_batch_response_body::setBatchErrorsUrl(const OAIOptional_link &batch_errors_url) {
    m_batch_errors_url = batch_errors_url;
    m_batch_errors_url_isSet = true;
}

bool OAICreate_batch_response_body::is_batch_errors_url_Set() const{
    return m_batch_errors_url_isSet;
}

bool OAICreate_batch_response_body::is_batch_errors_url_Valid() const{
    return m_batch_errors_url_isValid;
}

QString OAICreate_batch_response_body::getBatchId() const {
    return m_batch_id;
}
void OAICreate_batch_response_body::setBatchId(const QString &batch_id) {
    m_batch_id = batch_id;
    m_batch_id_isSet = true;
}

bool OAICreate_batch_response_body::is_batch_id_Set() const{
    return m_batch_id_isSet;
}

bool OAICreate_batch_response_body::is_batch_id_Valid() const{
    return m_batch_id_isValid;
}

OAIOptional_link OAICreate_batch_response_body::getBatchLabelsUrl() const {
    return m_batch_labels_url;
}
void OAICreate_batch_response_body::setBatchLabelsUrl(const OAIOptional_link &batch_labels_url) {
    m_batch_labels_url = batch_labels_url;
    m_batch_labels_url_isSet = true;
}

bool OAICreate_batch_response_body::is_batch_labels_url_Set() const{
    return m_batch_labels_url_isSet;
}

bool OAICreate_batch_response_body::is_batch_labels_url_Valid() const{
    return m_batch_labels_url_isValid;
}

QString OAICreate_batch_response_body::getBatchNotes() const {
    return m_batch_notes;
}
void OAICreate_batch_response_body::setBatchNotes(const QString &batch_notes) {
    m_batch_notes = batch_notes;
    m_batch_notes_isSet = true;
}

bool OAICreate_batch_response_body::is_batch_notes_Set() const{
    return m_batch_notes_isSet;
}

bool OAICreate_batch_response_body::is_batch_notes_Valid() const{
    return m_batch_notes_isValid;
}

QString OAICreate_batch_response_body::getBatchNumber() const {
    return m_batch_number;
}
void OAICreate_batch_response_body::setBatchNumber(const QString &batch_number) {
    m_batch_number = batch_number;
    m_batch_number_isSet = true;
}

bool OAICreate_batch_response_body::is_batch_number_Set() const{
    return m_batch_number_isSet;
}

bool OAICreate_batch_response_body::is_batch_number_Valid() const{
    return m_batch_number_isValid;
}

OAIOptional_link OAICreate_batch_response_body::getBatchShipmentsUrl() const {
    return m_batch_shipments_url;
}
void OAICreate_batch_response_body::setBatchShipmentsUrl(const OAIOptional_link &batch_shipments_url) {
    m_batch_shipments_url = batch_shipments_url;
    m_batch_shipments_url_isSet = true;
}

bool OAICreate_batch_response_body::is_batch_shipments_url_Set() const{
    return m_batch_shipments_url_isSet;
}

bool OAICreate_batch_response_body::is_batch_shipments_url_Valid() const{
    return m_batch_shipments_url_isValid;
}

qint32 OAICreate_batch_response_body::getCompleted() const {
    return m_completed;
}
void OAICreate_batch_response_body::setCompleted(const qint32 &completed) {
    m_completed = completed;
    m_completed_isSet = true;
}

bool OAICreate_batch_response_body::is_completed_Set() const{
    return m_completed_isSet;
}

bool OAICreate_batch_response_body::is_completed_Valid() const{
    return m_completed_isValid;
}

qint32 OAICreate_batch_response_body::getCount() const {
    return m_count;
}
void OAICreate_batch_response_body::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAICreate_batch_response_body::is_count_Set() const{
    return m_count_isSet;
}

bool OAICreate_batch_response_body::is_count_Valid() const{
    return m_count_isValid;
}

QDateTime OAICreate_batch_response_body::getCreatedAt() const {
    return m_created_at;
}
void OAICreate_batch_response_body::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICreate_batch_response_body::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICreate_batch_response_body::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAICreate_batch_response_body::getErrors() const {
    return m_errors;
}
void OAICreate_batch_response_body::setErrors(const qint32 &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAICreate_batch_response_body::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAICreate_batch_response_body::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAICreate_batch_response_body::getExternalBatchId() const {
    return m_external_batch_id;
}
void OAICreate_batch_response_body::setExternalBatchId(const QString &external_batch_id) {
    m_external_batch_id = external_batch_id;
    m_external_batch_id_isSet = true;
}

bool OAICreate_batch_response_body::is_external_batch_id_Set() const{
    return m_external_batch_id_isSet;
}

bool OAICreate_batch_response_body::is_external_batch_id_Valid() const{
    return m_external_batch_id_isValid;
}

OAIOptional_link OAICreate_batch_response_body::getFormDownload() const {
    return m_form_download;
}
void OAICreate_batch_response_body::setFormDownload(const OAIOptional_link &form_download) {
    m_form_download = form_download;
    m_form_download_isSet = true;
}

bool OAICreate_batch_response_body::is_form_download_Set() const{
    return m_form_download_isSet;
}

bool OAICreate_batch_response_body::is_form_download_Valid() const{
    return m_form_download_isValid;
}

qint32 OAICreate_batch_response_body::getForms() const {
    return m_forms;
}
void OAICreate_batch_response_body::setForms(const qint32 &forms) {
    m_forms = forms;
    m_forms_isSet = true;
}

bool OAICreate_batch_response_body::is_forms_Set() const{
    return m_forms_isSet;
}

bool OAICreate_batch_response_body::is_forms_Valid() const{
    return m_forms_isValid;
}

OAILabel_download OAICreate_batch_response_body::getLabelDownload() const {
    return m_label_download;
}
void OAICreate_batch_response_body::setLabelDownload(const OAILabel_download &label_download) {
    m_label_download = label_download;
    m_label_download_isSet = true;
}

bool OAICreate_batch_response_body::is_label_download_Set() const{
    return m_label_download_isSet;
}

bool OAICreate_batch_response_body::is_label_download_Valid() const{
    return m_label_download_isValid;
}

OAILabel_format OAICreate_batch_response_body::getLabelFormat() const {
    return m_label_format;
}
void OAICreate_batch_response_body::setLabelFormat(const OAILabel_format &label_format) {
    m_label_format = label_format;
    m_label_format_isSet = true;
}

bool OAICreate_batch_response_body::is_label_format_Set() const{
    return m_label_format_isSet;
}

bool OAICreate_batch_response_body::is_label_format_Valid() const{
    return m_label_format_isValid;
}

OAILabel_layout OAICreate_batch_response_body::getLabelLayout() const {
    return m_label_layout;
}
void OAICreate_batch_response_body::setLabelLayout(const OAILabel_layout &label_layout) {
    m_label_layout = label_layout;
    m_label_layout_isSet = true;
}

bool OAICreate_batch_response_body::is_label_layout_Set() const{
    return m_label_layout_isSet;
}

bool OAICreate_batch_response_body::is_label_layout_Valid() const{
    return m_label_layout_isValid;
}

QDateTime OAICreate_batch_response_body::getProcessedAt() const {
    return m_processed_at;
}
void OAICreate_batch_response_body::setProcessedAt(const QDateTime &processed_at) {
    m_processed_at = processed_at;
    m_processed_at_isSet = true;
}

bool OAICreate_batch_response_body::is_processed_at_Set() const{
    return m_processed_at_isSet;
}

bool OAICreate_batch_response_body::is_processed_at_Valid() const{
    return m_processed_at_isValid;
}

OAIBatch_status OAICreate_batch_response_body::getStatus() const {
    return m_status;
}
void OAICreate_batch_response_body::setStatus(const OAIBatch_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreate_batch_response_body::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreate_batch_response_body::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAICreate_batch_response_body::getWarnings() const {
    return m_warnings;
}
void OAICreate_batch_response_body::setWarnings(const qint32 &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAICreate_batch_response_body::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAICreate_batch_response_body::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAICreate_batch_response_body::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batch_errors_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_labels_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_shipments_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_batch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_download.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_forms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_download.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_layout.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_processed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreate_batch_response_body::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_batch_errors_url_isValid && m_batch_id_isValid && m_batch_labels_url_isValid && m_batch_notes_isValid && m_batch_number_isValid && m_batch_shipments_url_isValid && m_completed_isValid && m_count_isValid && m_created_at_isValid && m_errors_isValid && m_external_batch_id_isValid && m_form_download_isValid && m_forms_isValid && m_label_download_isValid && m_label_format_isValid && m_label_layout_isValid && m_processed_at_isValid && m_status_isValid && m_warnings_isValid && true;
}

} // namespace OpenAPI
