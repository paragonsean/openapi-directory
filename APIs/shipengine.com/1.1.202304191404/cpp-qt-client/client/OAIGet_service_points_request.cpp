/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_service_points_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_service_points_request::OAIGet_service_points_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_service_points_request::OAIGet_service_points_request() {
    this->initializeModel();
}

OAIGet_service_points_request::~OAIGet_service_points_request() {}

void OAIGet_service_points_request::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_address_query_isSet = false;
    m_address_query_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_r_long_isSet = false;
    m_r_long_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_providers_isSet = false;
    m_providers_isValid = false;

    m_radius_isSet = false;
    m_radius_isValid = false;
}

void OAIGet_service_points_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_service_points_request::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_address_query_isValid = ::OpenAPI::fromJsonValue(m_address_query, json[QString("address_query")]);
    m_address_query_isSet = !json[QString("address_query")].isNull() && m_address_query_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_r_long_isValid = ::OpenAPI::fromJsonValue(m_r_long, json[QString("long")]);
    m_r_long_isSet = !json[QString("long")].isNull() && m_r_long_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("max_results")]);
    m_max_results_isSet = !json[QString("max_results")].isNull() && m_max_results_isValid;

    m_providers_isValid = ::OpenAPI::fromJsonValue(m_providers, json[QString("providers")]);
    m_providers_isSet = !json[QString("providers")].isNull() && m_providers_isValid;

    m_radius_isValid = ::OpenAPI::fromJsonValue(m_radius, json[QString("radius")]);
    m_radius_isSet = !json[QString("radius")].isNull() && m_radius_isValid;
}

QString OAIGet_service_points_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_service_points_request::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_address_query_isSet) {
        obj.insert(QString("address_query"), ::OpenAPI::toJsonValue(m_address_query));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_r_long_isSet) {
        obj.insert(QString("long"), ::OpenAPI::toJsonValue(m_r_long));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("max_results"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_providers.size() > 0) {
        obj.insert(QString("providers"), ::OpenAPI::toJsonValue(m_providers));
    }
    if (m_radius_isSet) {
        obj.insert(QString("radius"), ::OpenAPI::toJsonValue(m_radius));
    }
    return obj;
}

OAIGet_service_points_request_body_address OAIGet_service_points_request::getAddress() const {
    return m_address;
}
void OAIGet_service_points_request::setAddress(const OAIGet_service_points_request_body_address &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIGet_service_points_request::is_address_Set() const{
    return m_address_isSet;
}

bool OAIGet_service_points_request::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIGet_service_points_request::getAddressQuery() const {
    return m_address_query;
}
void OAIGet_service_points_request::setAddressQuery(const QString &address_query) {
    m_address_query = address_query;
    m_address_query_isSet = true;
}

bool OAIGet_service_points_request::is_address_query_Set() const{
    return m_address_query_isSet;
}

bool OAIGet_service_points_request::is_address_query_Valid() const{
    return m_address_query_isValid;
}

double OAIGet_service_points_request::getLat() const {
    return m_lat;
}
void OAIGet_service_points_request::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIGet_service_points_request::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIGet_service_points_request::is_lat_Valid() const{
    return m_lat_isValid;
}

double OAIGet_service_points_request::getRLong() const {
    return m_r_long;
}
void OAIGet_service_points_request::setRLong(const double &r_long) {
    m_r_long = r_long;
    m_r_long_isSet = true;
}

bool OAIGet_service_points_request::is_r_long_Set() const{
    return m_r_long_isSet;
}

bool OAIGet_service_points_request::is_r_long_Valid() const{
    return m_r_long_isValid;
}

qint32 OAIGet_service_points_request::getMaxResults() const {
    return m_max_results;
}
void OAIGet_service_points_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIGet_service_points_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIGet_service_points_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QList<OAIGet_service_points_request_body_providers_inner> OAIGet_service_points_request::getProviders() const {
    return m_providers;
}
void OAIGet_service_points_request::setProviders(const QList<OAIGet_service_points_request_body_providers_inner> &providers) {
    m_providers = providers;
    m_providers_isSet = true;
}

bool OAIGet_service_points_request::is_providers_Set() const{
    return m_providers_isSet;
}

bool OAIGet_service_points_request::is_providers_Valid() const{
    return m_providers_isValid;
}

qint32 OAIGet_service_points_request::getRadius() const {
    return m_radius;
}
void OAIGet_service_points_request::setRadius(const qint32 &radius) {
    m_radius = radius;
    m_radius_isSet = true;
}

bool OAIGet_service_points_request::is_radius_Set() const{
    return m_radius_isSet;
}

bool OAIGet_service_points_request::is_radius_Valid() const{
    return m_radius_isValid;
}

bool OAIGet_service_points_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_providers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_service_points_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_providers_isValid && true;
}

} // namespace OpenAPI
