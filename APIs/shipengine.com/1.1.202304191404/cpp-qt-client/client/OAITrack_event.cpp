/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrack_event.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrack_event::OAITrack_event(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrack_event::OAITrack_event() {
    this->initializeModel();
}

OAITrack_event::~OAITrack_event() {}

void OAITrack_event::initializeModel() {

    m_carrier_detail_code_isSet = false;
    m_carrier_detail_code_isValid = false;

    m_carrier_occurred_at_isSet = false;
    m_carrier_occurred_at_isValid = false;

    m_carrier_status_code_isSet = false;
    m_carrier_status_code_isValid = false;

    m_carrier_status_description_isSet = false;
    m_carrier_status_description_isValid = false;

    m_city_locality_isSet = false;
    m_city_locality_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_event_code_isSet = false;
    m_event_code_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_occurred_at_isSet = false;
    m_occurred_at_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_signer_isSet = false;
    m_signer_isValid = false;

    m_state_province_isSet = false;
    m_state_province_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_status_description_isSet = false;
    m_status_description_isValid = false;
}

void OAITrack_event::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrack_event::fromJsonObject(QJsonObject json) {

    m_carrier_detail_code_isValid = ::OpenAPI::fromJsonValue(m_carrier_detail_code, json[QString("carrier_detail_code")]);
    m_carrier_detail_code_isSet = !json[QString("carrier_detail_code")].isNull() && m_carrier_detail_code_isValid;

    m_carrier_occurred_at_isValid = ::OpenAPI::fromJsonValue(m_carrier_occurred_at, json[QString("carrier_occurred_at")]);
    m_carrier_occurred_at_isSet = !json[QString("carrier_occurred_at")].isNull() && m_carrier_occurred_at_isValid;

    m_carrier_status_code_isValid = ::OpenAPI::fromJsonValue(m_carrier_status_code, json[QString("carrier_status_code")]);
    m_carrier_status_code_isSet = !json[QString("carrier_status_code")].isNull() && m_carrier_status_code_isValid;

    m_carrier_status_description_isValid = ::OpenAPI::fromJsonValue(m_carrier_status_description, json[QString("carrier_status_description")]);
    m_carrier_status_description_isSet = !json[QString("carrier_status_description")].isNull() && m_carrier_status_description_isValid;

    m_city_locality_isValid = ::OpenAPI::fromJsonValue(m_city_locality, json[QString("city_locality")]);
    m_city_locality_isSet = !json[QString("city_locality")].isNull() && m_city_locality_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("company_name")]);
    m_company_name_isSet = !json[QString("company_name")].isNull() && m_company_name_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_event_code_isValid = ::OpenAPI::fromJsonValue(m_event_code, json[QString("event_code")]);
    m_event_code_isSet = !json[QString("event_code")].isNull() && m_event_code_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_occurred_at_isValid = ::OpenAPI::fromJsonValue(m_occurred_at, json[QString("occurred_at")]);
    m_occurred_at_isSet = !json[QString("occurred_at")].isNull() && m_occurred_at_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postal_code")]);
    m_postal_code_isSet = !json[QString("postal_code")].isNull() && m_postal_code_isValid;

    m_signer_isValid = ::OpenAPI::fromJsonValue(m_signer, json[QString("signer")]);
    m_signer_isSet = !json[QString("signer")].isNull() && m_signer_isValid;

    m_state_province_isValid = ::OpenAPI::fromJsonValue(m_state_province, json[QString("state_province")]);
    m_state_province_isSet = !json[QString("state_province")].isNull() && m_state_province_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("status_code")]);
    m_status_code_isSet = !json[QString("status_code")].isNull() && m_status_code_isValid;

    m_status_description_isValid = ::OpenAPI::fromJsonValue(m_status_description, json[QString("status_description")]);
    m_status_description_isSet = !json[QString("status_description")].isNull() && m_status_description_isValid;
}

QString OAITrack_event::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrack_event::asJsonObject() const {
    QJsonObject obj;
    if (m_carrier_detail_code_isSet) {
        obj.insert(QString("carrier_detail_code"), ::OpenAPI::toJsonValue(m_carrier_detail_code));
    }
    if (m_carrier_occurred_at_isSet) {
        obj.insert(QString("carrier_occurred_at"), ::OpenAPI::toJsonValue(m_carrier_occurred_at));
    }
    if (m_carrier_status_code_isSet) {
        obj.insert(QString("carrier_status_code"), ::OpenAPI::toJsonValue(m_carrier_status_code));
    }
    if (m_carrier_status_description_isSet) {
        obj.insert(QString("carrier_status_description"), ::OpenAPI::toJsonValue(m_carrier_status_description));
    }
    if (m_city_locality_isSet) {
        obj.insert(QString("city_locality"), ::OpenAPI::toJsonValue(m_city_locality));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("company_name"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_event_code_isSet) {
        obj.insert(QString("event_code"), ::OpenAPI::toJsonValue(m_event_code));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_occurred_at_isSet) {
        obj.insert(QString("occurred_at"), ::OpenAPI::toJsonValue(m_occurred_at));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postal_code"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_signer_isSet) {
        obj.insert(QString("signer"), ::OpenAPI::toJsonValue(m_signer));
    }
    if (m_state_province_isSet) {
        obj.insert(QString("state_province"), ::OpenAPI::toJsonValue(m_state_province));
    }
    if (m_status_code.isSet()) {
        obj.insert(QString("status_code"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_status_description_isSet) {
        obj.insert(QString("status_description"), ::OpenAPI::toJsonValue(m_status_description));
    }
    return obj;
}

QString OAITrack_event::getCarrierDetailCode() const {
    return m_carrier_detail_code;
}
void OAITrack_event::setCarrierDetailCode(const QString &carrier_detail_code) {
    m_carrier_detail_code = carrier_detail_code;
    m_carrier_detail_code_isSet = true;
}

bool OAITrack_event::is_carrier_detail_code_Set() const{
    return m_carrier_detail_code_isSet;
}

bool OAITrack_event::is_carrier_detail_code_Valid() const{
    return m_carrier_detail_code_isValid;
}

QDateTime OAITrack_event::getCarrierOccurredAt() const {
    return m_carrier_occurred_at;
}
void OAITrack_event::setCarrierOccurredAt(const QDateTime &carrier_occurred_at) {
    m_carrier_occurred_at = carrier_occurred_at;
    m_carrier_occurred_at_isSet = true;
}

bool OAITrack_event::is_carrier_occurred_at_Set() const{
    return m_carrier_occurred_at_isSet;
}

bool OAITrack_event::is_carrier_occurred_at_Valid() const{
    return m_carrier_occurred_at_isValid;
}

QString OAITrack_event::getCarrierStatusCode() const {
    return m_carrier_status_code;
}
void OAITrack_event::setCarrierStatusCode(const QString &carrier_status_code) {
    m_carrier_status_code = carrier_status_code;
    m_carrier_status_code_isSet = true;
}

bool OAITrack_event::is_carrier_status_code_Set() const{
    return m_carrier_status_code_isSet;
}

bool OAITrack_event::is_carrier_status_code_Valid() const{
    return m_carrier_status_code_isValid;
}

QString OAITrack_event::getCarrierStatusDescription() const {
    return m_carrier_status_description;
}
void OAITrack_event::setCarrierStatusDescription(const QString &carrier_status_description) {
    m_carrier_status_description = carrier_status_description;
    m_carrier_status_description_isSet = true;
}

bool OAITrack_event::is_carrier_status_description_Set() const{
    return m_carrier_status_description_isSet;
}

bool OAITrack_event::is_carrier_status_description_Valid() const{
    return m_carrier_status_description_isValid;
}

QString OAITrack_event::getCityLocality() const {
    return m_city_locality;
}
void OAITrack_event::setCityLocality(const QString &city_locality) {
    m_city_locality = city_locality;
    m_city_locality_isSet = true;
}

bool OAITrack_event::is_city_locality_Set() const{
    return m_city_locality_isSet;
}

bool OAITrack_event::is_city_locality_Valid() const{
    return m_city_locality_isValid;
}

QString OAITrack_event::getCompanyName() const {
    return m_company_name;
}
void OAITrack_event::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAITrack_event::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAITrack_event::is_company_name_Valid() const{
    return m_company_name_isValid;
}

QString OAITrack_event::getCountryCode() const {
    return m_country_code;
}
void OAITrack_event::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAITrack_event::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAITrack_event::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAITrack_event::getDescription() const {
    return m_description;
}
void OAITrack_event::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITrack_event::is_description_Set() const{
    return m_description_isSet;
}

bool OAITrack_event::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITrack_event::getEventCode() const {
    return m_event_code;
}
void OAITrack_event::setEventCode(const QString &event_code) {
    m_event_code = event_code;
    m_event_code_isSet = true;
}

bool OAITrack_event::is_event_code_Set() const{
    return m_event_code_isSet;
}

bool OAITrack_event::is_event_code_Valid() const{
    return m_event_code_isValid;
}

double OAITrack_event::getLatitude() const {
    return m_latitude;
}
void OAITrack_event::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAITrack_event::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAITrack_event::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAITrack_event::getLongitude() const {
    return m_longitude;
}
void OAITrack_event::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAITrack_event::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAITrack_event::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QDateTime OAITrack_event::getOccurredAt() const {
    return m_occurred_at;
}
void OAITrack_event::setOccurredAt(const QDateTime &occurred_at) {
    m_occurred_at = occurred_at;
    m_occurred_at_isSet = true;
}

bool OAITrack_event::is_occurred_at_Set() const{
    return m_occurred_at_isSet;
}

bool OAITrack_event::is_occurred_at_Valid() const{
    return m_occurred_at_isValid;
}

QString OAITrack_event::getPostalCode() const {
    return m_postal_code;
}
void OAITrack_event::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAITrack_event::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAITrack_event::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAITrack_event::getSigner() const {
    return m_signer;
}
void OAITrack_event::setSigner(const QString &signer) {
    m_signer = signer;
    m_signer_isSet = true;
}

bool OAITrack_event::is_signer_Set() const{
    return m_signer_isSet;
}

bool OAITrack_event::is_signer_Valid() const{
    return m_signer_isValid;
}

QString OAITrack_event::getStateProvince() const {
    return m_state_province;
}
void OAITrack_event::setStateProvince(const QString &state_province) {
    m_state_province = state_province;
    m_state_province_isSet = true;
}

bool OAITrack_event::is_state_province_Set() const{
    return m_state_province_isSet;
}

bool OAITrack_event::is_state_province_Valid() const{
    return m_state_province_isValid;
}

OAIStatus_code OAITrack_event::getStatusCode() const {
    return m_status_code;
}
void OAITrack_event::setStatusCode(const OAIStatus_code &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAITrack_event::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAITrack_event::is_status_code_Valid() const{
    return m_status_code_isValid;
}

QString OAITrack_event::getStatusDescription() const {
    return m_status_description;
}
void OAITrack_event::setStatusDescription(const QString &status_description) {
    m_status_description = status_description;
    m_status_description_isSet = true;
}

bool OAITrack_event::is_status_description_Set() const{
    return m_status_description_isSet;
}

bool OAITrack_event::is_status_description_Valid() const{
    return m_status_description_isValid;
}

bool OAITrack_event::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_carrier_detail_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_occurred_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_status_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_locality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_occurred_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_province_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrack_event::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_carrier_detail_code_isValid && m_carrier_status_code_isValid && m_carrier_status_description_isValid && m_city_locality_isValid && m_occurred_at_isValid && m_postal_code_isValid && m_state_province_isValid && m_status_code_isValid && m_status_description_isValid && true;
}

} // namespace OpenAPI
