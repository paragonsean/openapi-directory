/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILabelsApi_H
#define OAI_OAILabelsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreate_label_from_rate_request_body.h"
#include "OAICreate_label_from_rate_response_body.h"
#include "OAICreate_label_from_shipment_request_body.h"
#include "OAICreate_label_from_shipment_response_body.h"
#include "OAICreate_label_request_body.h"
#include "OAICreate_label_response_body.h"
#include "OAICreate_return_label_request_body.h"
#include "OAICreate_return_label_response_body.h"
#include "OAIError_response_body.h"
#include "OAIGet_label_by_external_shipment_id_response_body.h"
#include "OAIGet_label_by_id_response_body.h"
#include "OAIGet_tracking_log_from_label_response_body.h"
#include "OAILabel_download_type.h"
#include "OAILabel_status.h"
#include "OAIList_labels_response_body.h"
#include "OAISort_dir.h"
#include "OAIVoid_label_response_body.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILabelsApi : public QObject {
    Q_OBJECT

public:
    OAILabelsApi(const int timeOut = 0);
    ~OAILabelsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_label_request_body OAICreate_label_request_body [required]
    */
    virtual void createLabel(const OAICreate_label_request_body &oai_create_label_request_body);

    /**
    * @param[in]  rate_id QString [required]
    * @param[in]  oai_create_label_from_rate_request_body OAICreate_label_from_rate_request_body [required]
    */
    virtual void createLabelFromRate(const QString &rate_id, const OAICreate_label_from_rate_request_body &oai_create_label_from_rate_request_body);

    /**
    * @param[in]  shipment_id QString [required]
    * @param[in]  oai_create_label_from_shipment_request_body OAICreate_label_from_shipment_request_body [required]
    */
    virtual void createLabelFromShipment(const QString &shipment_id, const OAICreate_label_from_shipment_request_body &oai_create_label_from_shipment_request_body);

    /**
    * @param[in]  label_id QString [required]
    * @param[in]  oai_create_return_label_request_body OAICreate_return_label_request_body [required]
    */
    virtual void createReturnLabel(const QString &label_id, const OAICreate_return_label_request_body &oai_create_return_label_request_body);

    /**
    * @param[in]  external_shipment_id QString [required]
    * @param[in]  label_download_type OAILabel_download_type [optional]
    */
    virtual void getLabelByExternalShipmentId(const QString &external_shipment_id, const ::OpenAPI::OptionalParam<OAILabel_download_type> &label_download_type = ::OpenAPI::OptionalParam<OAILabel_download_type>());

    /**
    * @param[in]  label_id QString [required]
    * @param[in]  label_download_type OAILabel_download_type [optional]
    */
    virtual void getLabelById(const QString &label_id, const ::OpenAPI::OptionalParam<OAILabel_download_type> &label_download_type = ::OpenAPI::OptionalParam<OAILabel_download_type>());

    /**
    * @param[in]  label_id QString [required]
    */
    virtual void getTrackingLogFromLabel(const QString &label_id);

    /**
    * @param[in]  label_status OAILabel_status [optional]
    * @param[in]  service_code QString [optional]
    * @param[in]  carrier_id QString [optional]
    * @param[in]  tracking_number QString [optional]
    * @param[in]  batch_id QString [optional]
    * @param[in]  rate_id QString [optional]
    * @param[in]  shipment_id QString [optional]
    * @param[in]  warehouse_id QString [optional]
    * @param[in]  created_at_start QDateTime [optional]
    * @param[in]  created_at_end QDateTime [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  sort_dir OAISort_dir [optional]
    * @param[in]  sort_by QString [optional]
    */
    virtual void listLabels(const ::OpenAPI::OptionalParam<OAILabel_status> &label_status = ::OpenAPI::OptionalParam<OAILabel_status>(), const ::OpenAPI::OptionalParam<QString> &service_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &carrier_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tracking_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &batch_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rate_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &shipment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &warehouse_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_start = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISort_dir> &sort_dir = ::OpenAPI::OptionalParam<OAISort_dir>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  label_id QString [required]
    */
    virtual void voidLabel(const QString &label_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createLabelCallback(OAIHttpRequestWorker *worker);
    void createLabelFromRateCallback(OAIHttpRequestWorker *worker);
    void createLabelFromShipmentCallback(OAIHttpRequestWorker *worker);
    void createReturnLabelCallback(OAIHttpRequestWorker *worker);
    void getLabelByExternalShipmentIdCallback(OAIHttpRequestWorker *worker);
    void getLabelByIdCallback(OAIHttpRequestWorker *worker);
    void getTrackingLogFromLabelCallback(OAIHttpRequestWorker *worker);
    void listLabelsCallback(OAIHttpRequestWorker *worker);
    void voidLabelCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createLabelSignal(OAICreate_label_response_body summary);
    void createLabelFromRateSignal(OAICreate_label_from_rate_response_body summary);
    void createLabelFromShipmentSignal(OAICreate_label_from_shipment_response_body summary);
    void createReturnLabelSignal(OAICreate_return_label_response_body summary);
    void getLabelByExternalShipmentIdSignal(OAIGet_label_by_external_shipment_id_response_body summary);
    void getLabelByIdSignal(OAIGet_label_by_id_response_body summary);
    void getTrackingLogFromLabelSignal(OAIGet_tracking_log_from_label_response_body summary);
    void listLabelsSignal(OAIList_labels_response_body summary);
    void voidLabelSignal(OAIVoid_label_response_body summary);


    void createLabelSignalFull(OAIHttpRequestWorker *worker, OAICreate_label_response_body summary);
    void createLabelFromRateSignalFull(OAIHttpRequestWorker *worker, OAICreate_label_from_rate_response_body summary);
    void createLabelFromShipmentSignalFull(OAIHttpRequestWorker *worker, OAICreate_label_from_shipment_response_body summary);
    void createReturnLabelSignalFull(OAIHttpRequestWorker *worker, OAICreate_return_label_response_body summary);
    void getLabelByExternalShipmentIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_label_by_external_shipment_id_response_body summary);
    void getLabelByIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_label_by_id_response_body summary);
    void getTrackingLogFromLabelSignalFull(OAIHttpRequestWorker *worker, OAIGet_tracking_log_from_label_response_body summary);
    void listLabelsSignalFull(OAIHttpRequestWorker *worker, OAIList_labels_response_body summary);
    void voidLabelSignalFull(OAIHttpRequestWorker *worker, OAIVoid_label_response_body summary);

    Q_DECL_DEPRECATED_X("Use createLabelSignalError() instead")
    void createLabelSignalE(OAICreate_label_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createLabelSignalError(OAICreate_label_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createLabelFromRateSignalError() instead")
    void createLabelFromRateSignalE(OAICreate_label_from_rate_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createLabelFromRateSignalError(OAICreate_label_from_rate_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createLabelFromShipmentSignalError() instead")
    void createLabelFromShipmentSignalE(OAICreate_label_from_shipment_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createLabelFromShipmentSignalError(OAICreate_label_from_shipment_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createReturnLabelSignalError() instead")
    void createReturnLabelSignalE(OAICreate_return_label_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createReturnLabelSignalError(OAICreate_return_label_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLabelByExternalShipmentIdSignalError() instead")
    void getLabelByExternalShipmentIdSignalE(OAIGet_label_by_external_shipment_id_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLabelByExternalShipmentIdSignalError(OAIGet_label_by_external_shipment_id_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLabelByIdSignalError() instead")
    void getLabelByIdSignalE(OAIGet_label_by_id_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLabelByIdSignalError(OAIGet_label_by_id_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrackingLogFromLabelSignalError() instead")
    void getTrackingLogFromLabelSignalE(OAIGet_tracking_log_from_label_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrackingLogFromLabelSignalError(OAIGet_tracking_log_from_label_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLabelsSignalError() instead")
    void listLabelsSignalE(OAIList_labels_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listLabelsSignalError(OAIList_labels_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use voidLabelSignalError() instead")
    void voidLabelSignalE(OAIVoid_label_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void voidLabelSignalError(OAIVoid_label_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createLabelSignalErrorFull() instead")
    void createLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createLabelFromRateSignalErrorFull() instead")
    void createLabelFromRateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createLabelFromRateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createLabelFromShipmentSignalErrorFull() instead")
    void createLabelFromShipmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createLabelFromShipmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createReturnLabelSignalErrorFull() instead")
    void createReturnLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createReturnLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLabelByExternalShipmentIdSignalErrorFull() instead")
    void getLabelByExternalShipmentIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLabelByExternalShipmentIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLabelByIdSignalErrorFull() instead")
    void getLabelByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLabelByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrackingLogFromLabelSignalErrorFull() instead")
    void getTrackingLogFromLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrackingLogFromLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLabelsSignalErrorFull() instead")
    void listLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use voidLabelSignalErrorFull() instead")
    void voidLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void voidLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
