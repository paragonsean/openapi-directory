/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITracking_information.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITracking_information::OAITracking_information(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITracking_information::OAITracking_information() {
    this->initializeModel();
}

OAITracking_information::~OAITracking_information() {}

void OAITracking_information::initializeModel() {

    m_actual_delivery_date_isSet = false;
    m_actual_delivery_date_isValid = false;

    m_carrier_code_isSet = false;
    m_carrier_code_isValid = false;

    m_carrier_detail_code_isSet = false;
    m_carrier_detail_code_isValid = false;

    m_carrier_id_isSet = false;
    m_carrier_id_isValid = false;

    m_carrier_status_code_isSet = false;
    m_carrier_status_code_isValid = false;

    m_carrier_status_description_isSet = false;
    m_carrier_status_description_isValid = false;

    m_estimated_delivery_date_isSet = false;
    m_estimated_delivery_date_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_exception_description_isSet = false;
    m_exception_description_isValid = false;

    m_ship_date_isSet = false;
    m_ship_date_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_status_description_isSet = false;
    m_status_description_isValid = false;

    m_tracking_number_isSet = false;
    m_tracking_number_isValid = false;

    m_tracking_url_isSet = false;
    m_tracking_url_isValid = false;
}

void OAITracking_information::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITracking_information::fromJsonObject(QJsonObject json) {

    m_actual_delivery_date_isValid = ::OpenAPI::fromJsonValue(m_actual_delivery_date, json[QString("actual_delivery_date")]);
    m_actual_delivery_date_isSet = !json[QString("actual_delivery_date")].isNull() && m_actual_delivery_date_isValid;

    m_carrier_code_isValid = ::OpenAPI::fromJsonValue(m_carrier_code, json[QString("carrier_code")]);
    m_carrier_code_isSet = !json[QString("carrier_code")].isNull() && m_carrier_code_isValid;

    m_carrier_detail_code_isValid = ::OpenAPI::fromJsonValue(m_carrier_detail_code, json[QString("carrier_detail_code")]);
    m_carrier_detail_code_isSet = !json[QString("carrier_detail_code")].isNull() && m_carrier_detail_code_isValid;

    m_carrier_id_isValid = ::OpenAPI::fromJsonValue(m_carrier_id, json[QString("carrier_id")]);
    m_carrier_id_isSet = !json[QString("carrier_id")].isNull() && m_carrier_id_isValid;

    m_carrier_status_code_isValid = ::OpenAPI::fromJsonValue(m_carrier_status_code, json[QString("carrier_status_code")]);
    m_carrier_status_code_isSet = !json[QString("carrier_status_code")].isNull() && m_carrier_status_code_isValid;

    m_carrier_status_description_isValid = ::OpenAPI::fromJsonValue(m_carrier_status_description, json[QString("carrier_status_description")]);
    m_carrier_status_description_isSet = !json[QString("carrier_status_description")].isNull() && m_carrier_status_description_isValid;

    m_estimated_delivery_date_isValid = ::OpenAPI::fromJsonValue(m_estimated_delivery_date, json[QString("estimated_delivery_date")]);
    m_estimated_delivery_date_isSet = !json[QString("estimated_delivery_date")].isNull() && m_estimated_delivery_date_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_exception_description_isValid = ::OpenAPI::fromJsonValue(m_exception_description, json[QString("exception_description")]);
    m_exception_description_isSet = !json[QString("exception_description")].isNull() && m_exception_description_isValid;

    m_ship_date_isValid = ::OpenAPI::fromJsonValue(m_ship_date, json[QString("ship_date")]);
    m_ship_date_isSet = !json[QString("ship_date")].isNull() && m_ship_date_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("status_code")]);
    m_status_code_isSet = !json[QString("status_code")].isNull() && m_status_code_isValid;

    m_status_description_isValid = ::OpenAPI::fromJsonValue(m_status_description, json[QString("status_description")]);
    m_status_description_isSet = !json[QString("status_description")].isNull() && m_status_description_isValid;

    m_tracking_number_isValid = ::OpenAPI::fromJsonValue(m_tracking_number, json[QString("tracking_number")]);
    m_tracking_number_isSet = !json[QString("tracking_number")].isNull() && m_tracking_number_isValid;

    m_tracking_url_isValid = ::OpenAPI::fromJsonValue(m_tracking_url, json[QString("tracking_url")]);
    m_tracking_url_isSet = !json[QString("tracking_url")].isNull() && m_tracking_url_isValid;
}

QString OAITracking_information::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITracking_information::asJsonObject() const {
    QJsonObject obj;
    if (m_actual_delivery_date_isSet) {
        obj.insert(QString("actual_delivery_date"), ::OpenAPI::toJsonValue(m_actual_delivery_date));
    }
    if (m_carrier_code_isSet) {
        obj.insert(QString("carrier_code"), ::OpenAPI::toJsonValue(m_carrier_code));
    }
    if (m_carrier_detail_code_isSet) {
        obj.insert(QString("carrier_detail_code"), ::OpenAPI::toJsonValue(m_carrier_detail_code));
    }
    if (m_carrier_id_isSet) {
        obj.insert(QString("carrier_id"), ::OpenAPI::toJsonValue(m_carrier_id));
    }
    if (m_carrier_status_code_isSet) {
        obj.insert(QString("carrier_status_code"), ::OpenAPI::toJsonValue(m_carrier_status_code));
    }
    if (m_carrier_status_description_isSet) {
        obj.insert(QString("carrier_status_description"), ::OpenAPI::toJsonValue(m_carrier_status_description));
    }
    if (m_estimated_delivery_date_isSet) {
        obj.insert(QString("estimated_delivery_date"), ::OpenAPI::toJsonValue(m_estimated_delivery_date));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_exception_description_isSet) {
        obj.insert(QString("exception_description"), ::OpenAPI::toJsonValue(m_exception_description));
    }
    if (m_ship_date_isSet) {
        obj.insert(QString("ship_date"), ::OpenAPI::toJsonValue(m_ship_date));
    }
    if (m_status_code.isSet()) {
        obj.insert(QString("status_code"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_status_description_isSet) {
        obj.insert(QString("status_description"), ::OpenAPI::toJsonValue(m_status_description));
    }
    if (m_tracking_number_isSet) {
        obj.insert(QString("tracking_number"), ::OpenAPI::toJsonValue(m_tracking_number));
    }
    if (m_tracking_url_isSet) {
        obj.insert(QString("tracking_url"), ::OpenAPI::toJsonValue(m_tracking_url));
    }
    return obj;
}

QDateTime OAITracking_information::getActualDeliveryDate() const {
    return m_actual_delivery_date;
}
void OAITracking_information::setActualDeliveryDate(const QDateTime &actual_delivery_date) {
    m_actual_delivery_date = actual_delivery_date;
    m_actual_delivery_date_isSet = true;
}

bool OAITracking_information::is_actual_delivery_date_Set() const{
    return m_actual_delivery_date_isSet;
}

bool OAITracking_information::is_actual_delivery_date_Valid() const{
    return m_actual_delivery_date_isValid;
}

QString OAITracking_information::getCarrierCode() const {
    return m_carrier_code;
}
void OAITracking_information::setCarrierCode(const QString &carrier_code) {
    m_carrier_code = carrier_code;
    m_carrier_code_isSet = true;
}

bool OAITracking_information::is_carrier_code_Set() const{
    return m_carrier_code_isSet;
}

bool OAITracking_information::is_carrier_code_Valid() const{
    return m_carrier_code_isValid;
}

QString OAITracking_information::getCarrierDetailCode() const {
    return m_carrier_detail_code;
}
void OAITracking_information::setCarrierDetailCode(const QString &carrier_detail_code) {
    m_carrier_detail_code = carrier_detail_code;
    m_carrier_detail_code_isSet = true;
}

bool OAITracking_information::is_carrier_detail_code_Set() const{
    return m_carrier_detail_code_isSet;
}

bool OAITracking_information::is_carrier_detail_code_Valid() const{
    return m_carrier_detail_code_isValid;
}

QString OAITracking_information::getCarrierId() const {
    return m_carrier_id;
}
void OAITracking_information::setCarrierId(const QString &carrier_id) {
    m_carrier_id = carrier_id;
    m_carrier_id_isSet = true;
}

bool OAITracking_information::is_carrier_id_Set() const{
    return m_carrier_id_isSet;
}

bool OAITracking_information::is_carrier_id_Valid() const{
    return m_carrier_id_isValid;
}

QString OAITracking_information::getCarrierStatusCode() const {
    return m_carrier_status_code;
}
void OAITracking_information::setCarrierStatusCode(const QString &carrier_status_code) {
    m_carrier_status_code = carrier_status_code;
    m_carrier_status_code_isSet = true;
}

bool OAITracking_information::is_carrier_status_code_Set() const{
    return m_carrier_status_code_isSet;
}

bool OAITracking_information::is_carrier_status_code_Valid() const{
    return m_carrier_status_code_isValid;
}

QString OAITracking_information::getCarrierStatusDescription() const {
    return m_carrier_status_description;
}
void OAITracking_information::setCarrierStatusDescription(const QString &carrier_status_description) {
    m_carrier_status_description = carrier_status_description;
    m_carrier_status_description_isSet = true;
}

bool OAITracking_information::is_carrier_status_description_Set() const{
    return m_carrier_status_description_isSet;
}

bool OAITracking_information::is_carrier_status_description_Valid() const{
    return m_carrier_status_description_isValid;
}

QDateTime OAITracking_information::getEstimatedDeliveryDate() const {
    return m_estimated_delivery_date;
}
void OAITracking_information::setEstimatedDeliveryDate(const QDateTime &estimated_delivery_date) {
    m_estimated_delivery_date = estimated_delivery_date;
    m_estimated_delivery_date_isSet = true;
}

bool OAITracking_information::is_estimated_delivery_date_Set() const{
    return m_estimated_delivery_date_isSet;
}

bool OAITracking_information::is_estimated_delivery_date_Valid() const{
    return m_estimated_delivery_date_isValid;
}

QList<OAITrack_event> OAITracking_information::getEvents() const {
    return m_events;
}
void OAITracking_information::setEvents(const QList<OAITrack_event> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAITracking_information::is_events_Set() const{
    return m_events_isSet;
}

bool OAITracking_information::is_events_Valid() const{
    return m_events_isValid;
}

QString OAITracking_information::getExceptionDescription() const {
    return m_exception_description;
}
void OAITracking_information::setExceptionDescription(const QString &exception_description) {
    m_exception_description = exception_description;
    m_exception_description_isSet = true;
}

bool OAITracking_information::is_exception_description_Set() const{
    return m_exception_description_isSet;
}

bool OAITracking_information::is_exception_description_Valid() const{
    return m_exception_description_isValid;
}

QDateTime OAITracking_information::getShipDate() const {
    return m_ship_date;
}
void OAITracking_information::setShipDate(const QDateTime &ship_date) {
    m_ship_date = ship_date;
    m_ship_date_isSet = true;
}

bool OAITracking_information::is_ship_date_Set() const{
    return m_ship_date_isSet;
}

bool OAITracking_information::is_ship_date_Valid() const{
    return m_ship_date_isValid;
}

OAIStatus_code OAITracking_information::getStatusCode() const {
    return m_status_code;
}
void OAITracking_information::setStatusCode(const OAIStatus_code &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAITracking_information::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAITracking_information::is_status_code_Valid() const{
    return m_status_code_isValid;
}

QString OAITracking_information::getStatusDescription() const {
    return m_status_description;
}
void OAITracking_information::setStatusDescription(const QString &status_description) {
    m_status_description = status_description;
    m_status_description_isSet = true;
}

bool OAITracking_information::is_status_description_Set() const{
    return m_status_description_isSet;
}

bool OAITracking_information::is_status_description_Valid() const{
    return m_status_description_isValid;
}

QString OAITracking_information::getTrackingNumber() const {
    return m_tracking_number;
}
void OAITracking_information::setTrackingNumber(const QString &tracking_number) {
    m_tracking_number = tracking_number;
    m_tracking_number_isSet = true;
}

bool OAITracking_information::is_tracking_number_Set() const{
    return m_tracking_number_isSet;
}

bool OAITracking_information::is_tracking_number_Valid() const{
    return m_tracking_number_isValid;
}

QString OAITracking_information::getTrackingUrl() const {
    return m_tracking_url;
}
void OAITracking_information::setTrackingUrl(const QString &tracking_url) {
    m_tracking_url = tracking_url;
    m_tracking_url_isSet = true;
}

bool OAITracking_information::is_tracking_url_Set() const{
    return m_tracking_url_isSet;
}

bool OAITracking_information::is_tracking_url_Valid() const{
    return m_tracking_url_isValid;
}

bool OAITracking_information::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actual_delivery_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_detail_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_status_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_delivery_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exception_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITracking_information::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
