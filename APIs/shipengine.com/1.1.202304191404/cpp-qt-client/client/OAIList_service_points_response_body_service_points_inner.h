/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIList_service_points_response_body_service_points_inner.h
 *
 * 
 */

#ifndef OAIList_service_points_response_body_service_points_inner_H
#define OAIList_service_points_response_body_service_points_inner_H

#include <QJsonObject>

#include "OAIGet_service_point_by_id_response_body_service_point_hours_of_operation.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGet_service_point_by_id_response_body_service_point_hours_of_operation;

class OAIList_service_points_response_body_service_points_inner : public OAIObject {
public:
    OAIList_service_points_response_body_service_points_inner();
    OAIList_service_points_response_body_service_points_inner(QString json);
    ~OAIList_service_points_response_body_service_points_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAddressLine1() const;
    void setAddressLine1(const QString &address_line1);
    bool is_address_line1_Set() const;
    bool is_address_line1_Valid() const;

    QString getCarrierCode() const;
    void setCarrierCode(const QString &carrier_code);
    bool is_carrier_code_Set() const;
    bool is_carrier_code_Valid() const;

    QString getCityLocality() const;
    void setCityLocality(const QString &city_locality);
    bool is_city_locality_Set() const;
    bool is_city_locality_Valid() const;

    QString getCompanyName() const;
    void setCompanyName(const QString &company_name);
    bool is_company_name_Set() const;
    bool is_company_name_Valid() const;

    QString getCountryCode() const;
    void setCountryCode(const QString &country_code);
    bool is_country_code_Set() const;
    bool is_country_code_Valid() const;

    double getDistanceInMeters() const;
    void setDistanceInMeters(const double &distance_in_meters);
    bool is_distance_in_meters_Set() const;
    bool is_distance_in_meters_Valid() const;

    QList<QString> getFeatures() const;
    void setFeatures(const QList<QString> &features);
    bool is_features_Set() const;
    bool is_features_Valid() const;

    OAIGet_service_point_by_id_response_body_service_point_hours_of_operation getHoursOfOperation() const;
    void setHoursOfOperation(const OAIGet_service_point_by_id_response_body_service_point_hours_of_operation &hours_of_operation);
    bool is_hours_of_operation_Set() const;
    bool is_hours_of_operation_Valid() const;

    double getLat() const;
    void setLat(const double &lat);
    bool is_lat_Set() const;
    bool is_lat_Valid() const;

    double getRLong() const;
    void setRLong(const double &r_long);
    bool is_r_long_Set() const;
    bool is_r_long_Valid() const;

    QString getPhoneNumber() const;
    void setPhoneNumber(const QString &phone_number);
    bool is_phone_number_Set() const;
    bool is_phone_number_Valid() const;

    QString getPostalCode() const;
    void setPostalCode(const QString &postal_code);
    bool is_postal_code_Set() const;
    bool is_postal_code_Valid() const;

    QList<QString> getServiceCodes() const;
    void setServiceCodes(const QList<QString> &service_codes);
    bool is_service_codes_Set() const;
    bool is_service_codes_Valid() const;

    QString getServicePointId() const;
    void setServicePointId(const QString &service_point_id);
    bool is_service_point_id_Set() const;
    bool is_service_point_id_Valid() const;

    QString getStateProvince() const;
    void setStateProvince(const QString &state_province);
    bool is_state_province_Set() const;
    bool is_state_province_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_address_line1;
    bool m_address_line1_isSet;
    bool m_address_line1_isValid;

    QString m_carrier_code;
    bool m_carrier_code_isSet;
    bool m_carrier_code_isValid;

    QString m_city_locality;
    bool m_city_locality_isSet;
    bool m_city_locality_isValid;

    QString m_company_name;
    bool m_company_name_isSet;
    bool m_company_name_isValid;

    QString m_country_code;
    bool m_country_code_isSet;
    bool m_country_code_isValid;

    double m_distance_in_meters;
    bool m_distance_in_meters_isSet;
    bool m_distance_in_meters_isValid;

    QList<QString> m_features;
    bool m_features_isSet;
    bool m_features_isValid;

    OAIGet_service_point_by_id_response_body_service_point_hours_of_operation m_hours_of_operation;
    bool m_hours_of_operation_isSet;
    bool m_hours_of_operation_isValid;

    double m_lat;
    bool m_lat_isSet;
    bool m_lat_isValid;

    double m_r_long;
    bool m_r_long_isSet;
    bool m_r_long_isValid;

    QString m_phone_number;
    bool m_phone_number_isSet;
    bool m_phone_number_isValid;

    QString m_postal_code;
    bool m_postal_code_isSet;
    bool m_postal_code_isValid;

    QList<QString> m_service_codes;
    bool m_service_codes_isSet;
    bool m_service_codes_isValid;

    QString m_service_point_id;
    bool m_service_point_id_isSet;
    bool m_service_point_id_isValid;

    QString m_state_province;
    bool m_state_province_isSet;
    bool m_state_province_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIList_service_points_response_body_service_points_inner)

#endif // OAIList_service_points_response_body_service_points_inner_H
