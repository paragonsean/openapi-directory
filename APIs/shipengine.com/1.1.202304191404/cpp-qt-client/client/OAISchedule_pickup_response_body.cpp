/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchedule_pickup_response_body.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchedule_pickup_response_body::OAISchedule_pickup_response_body(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchedule_pickup_response_body::OAISchedule_pickup_response_body() {
    this->initializeModel();
}

OAISchedule_pickup_response_body::~OAISchedule_pickup_response_body() {}

void OAISchedule_pickup_response_body::initializeModel() {

    m_cancelled_at_isSet = false;
    m_cancelled_at_isValid = false;

    m_carrier_id_isSet = false;
    m_carrier_id_isValid = false;

    m_confirmation_number_isSet = false;
    m_confirmation_number_isValid = false;

    m_contact_details_isSet = false;
    m_contact_details_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_label_ids_isSet = false;
    m_label_ids_isValid = false;

    m_pickup_address_isSet = false;
    m_pickup_address_isValid = false;

    m_pickup_id_isSet = false;
    m_pickup_id_isValid = false;

    m_pickup_notes_isSet = false;
    m_pickup_notes_isValid = false;

    m_pickup_window_isSet = false;
    m_pickup_window_isValid = false;

    m_pickup_windows_isSet = false;
    m_pickup_windows_isValid = false;

    m_warehouse_id_isSet = false;
    m_warehouse_id_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAISchedule_pickup_response_body::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchedule_pickup_response_body::fromJsonObject(QJsonObject json) {

    m_cancelled_at_isValid = ::OpenAPI::fromJsonValue(m_cancelled_at, json[QString("cancelled_at")]);
    m_cancelled_at_isSet = !json[QString("cancelled_at")].isNull() && m_cancelled_at_isValid;

    m_carrier_id_isValid = ::OpenAPI::fromJsonValue(m_carrier_id, json[QString("carrier_id")]);
    m_carrier_id_isSet = !json[QString("carrier_id")].isNull() && m_carrier_id_isValid;

    m_confirmation_number_isValid = ::OpenAPI::fromJsonValue(m_confirmation_number, json[QString("confirmation_number")]);
    m_confirmation_number_isSet = !json[QString("confirmation_number")].isNull() && m_confirmation_number_isValid;

    m_contact_details_isValid = ::OpenAPI::fromJsonValue(m_contact_details, json[QString("contact_details")]);
    m_contact_details_isSet = !json[QString("contact_details")].isNull() && m_contact_details_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_label_ids_isValid = ::OpenAPI::fromJsonValue(m_label_ids, json[QString("label_ids")]);
    m_label_ids_isSet = !json[QString("label_ids")].isNull() && m_label_ids_isValid;

    m_pickup_address_isValid = ::OpenAPI::fromJsonValue(m_pickup_address, json[QString("pickup_address")]);
    m_pickup_address_isSet = !json[QString("pickup_address")].isNull() && m_pickup_address_isValid;

    m_pickup_id_isValid = ::OpenAPI::fromJsonValue(m_pickup_id, json[QString("pickup_id")]);
    m_pickup_id_isSet = !json[QString("pickup_id")].isNull() && m_pickup_id_isValid;

    m_pickup_notes_isValid = ::OpenAPI::fromJsonValue(m_pickup_notes, json[QString("pickup_notes")]);
    m_pickup_notes_isSet = !json[QString("pickup_notes")].isNull() && m_pickup_notes_isValid;

    m_pickup_window_isValid = ::OpenAPI::fromJsonValue(m_pickup_window, json[QString("pickup_window")]);
    m_pickup_window_isSet = !json[QString("pickup_window")].isNull() && m_pickup_window_isValid;

    m_pickup_windows_isValid = ::OpenAPI::fromJsonValue(m_pickup_windows, json[QString("pickup_windows")]);
    m_pickup_windows_isSet = !json[QString("pickup_windows")].isNull() && m_pickup_windows_isValid;

    m_warehouse_id_isValid = ::OpenAPI::fromJsonValue(m_warehouse_id, json[QString("warehouse_id")]);
    m_warehouse_id_isSet = !json[QString("warehouse_id")].isNull() && m_warehouse_id_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;
}

QString OAISchedule_pickup_response_body::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchedule_pickup_response_body::asJsonObject() const {
    QJsonObject obj;
    if (m_cancelled_at_isSet) {
        obj.insert(QString("cancelled_at"), ::OpenAPI::toJsonValue(m_cancelled_at));
    }
    if (m_carrier_id_isSet) {
        obj.insert(QString("carrier_id"), ::OpenAPI::toJsonValue(m_carrier_id));
    }
    if (m_confirmation_number_isSet) {
        obj.insert(QString("confirmation_number"), ::OpenAPI::toJsonValue(m_confirmation_number));
    }
    if (m_contact_details.isSet()) {
        obj.insert(QString("contact_details"), ::OpenAPI::toJsonValue(m_contact_details));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_label_ids.size() > 0) {
        obj.insert(QString("label_ids"), ::OpenAPI::toJsonValue(m_label_ids));
    }
    if (m_pickup_address.isSet()) {
        obj.insert(QString("pickup_address"), ::OpenAPI::toJsonValue(m_pickup_address));
    }
    if (m_pickup_id_isSet) {
        obj.insert(QString("pickup_id"), ::OpenAPI::toJsonValue(m_pickup_id));
    }
    if (m_pickup_notes_isSet) {
        obj.insert(QString("pickup_notes"), ::OpenAPI::toJsonValue(m_pickup_notes));
    }
    if (m_pickup_window.isSet()) {
        obj.insert(QString("pickup_window"), ::OpenAPI::toJsonValue(m_pickup_window));
    }
    if (m_pickup_windows.size() > 0) {
        obj.insert(QString("pickup_windows"), ::OpenAPI::toJsonValue(m_pickup_windows));
    }
    if (m_warehouse_id_isSet) {
        obj.insert(QString("warehouse_id"), ::OpenAPI::toJsonValue(m_warehouse_id));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

QDateTime OAISchedule_pickup_response_body::getCancelledAt() const {
    return m_cancelled_at;
}
void OAISchedule_pickup_response_body::setCancelledAt(const QDateTime &cancelled_at) {
    m_cancelled_at = cancelled_at;
    m_cancelled_at_isSet = true;
}

bool OAISchedule_pickup_response_body::is_cancelled_at_Set() const{
    return m_cancelled_at_isSet;
}

bool OAISchedule_pickup_response_body::is_cancelled_at_Valid() const{
    return m_cancelled_at_isValid;
}

QString OAISchedule_pickup_response_body::getCarrierId() const {
    return m_carrier_id;
}
void OAISchedule_pickup_response_body::setCarrierId(const QString &carrier_id) {
    m_carrier_id = carrier_id;
    m_carrier_id_isSet = true;
}

bool OAISchedule_pickup_response_body::is_carrier_id_Set() const{
    return m_carrier_id_isSet;
}

bool OAISchedule_pickup_response_body::is_carrier_id_Valid() const{
    return m_carrier_id_isValid;
}

QString OAISchedule_pickup_response_body::getConfirmationNumber() const {
    return m_confirmation_number;
}
void OAISchedule_pickup_response_body::setConfirmationNumber(const QString &confirmation_number) {
    m_confirmation_number = confirmation_number;
    m_confirmation_number_isSet = true;
}

bool OAISchedule_pickup_response_body::is_confirmation_number_Set() const{
    return m_confirmation_number_isSet;
}

bool OAISchedule_pickup_response_body::is_confirmation_number_Valid() const{
    return m_confirmation_number_isValid;
}

OAIContact_details OAISchedule_pickup_response_body::getContactDetails() const {
    return m_contact_details;
}
void OAISchedule_pickup_response_body::setContactDetails(const OAIContact_details &contact_details) {
    m_contact_details = contact_details;
    m_contact_details_isSet = true;
}

bool OAISchedule_pickup_response_body::is_contact_details_Set() const{
    return m_contact_details_isSet;
}

bool OAISchedule_pickup_response_body::is_contact_details_Valid() const{
    return m_contact_details_isValid;
}

QDateTime OAISchedule_pickup_response_body::getCreatedAt() const {
    return m_created_at;
}
void OAISchedule_pickup_response_body::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISchedule_pickup_response_body::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISchedule_pickup_response_body::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<QString> OAISchedule_pickup_response_body::getLabelIds() const {
    return m_label_ids;
}
void OAISchedule_pickup_response_body::setLabelIds(const QList<QString> &label_ids) {
    m_label_ids = label_ids;
    m_label_ids_isSet = true;
}

bool OAISchedule_pickup_response_body::is_label_ids_Set() const{
    return m_label_ids_isSet;
}

bool OAISchedule_pickup_response_body::is_label_ids_Valid() const{
    return m_label_ids_isValid;
}

OAIAddress OAISchedule_pickup_response_body::getPickupAddress() const {
    return m_pickup_address;
}
void OAISchedule_pickup_response_body::setPickupAddress(const OAIAddress &pickup_address) {
    m_pickup_address = pickup_address;
    m_pickup_address_isSet = true;
}

bool OAISchedule_pickup_response_body::is_pickup_address_Set() const{
    return m_pickup_address_isSet;
}

bool OAISchedule_pickup_response_body::is_pickup_address_Valid() const{
    return m_pickup_address_isValid;
}

QString OAISchedule_pickup_response_body::getPickupId() const {
    return m_pickup_id;
}
void OAISchedule_pickup_response_body::setPickupId(const QString &pickup_id) {
    m_pickup_id = pickup_id;
    m_pickup_id_isSet = true;
}

bool OAISchedule_pickup_response_body::is_pickup_id_Set() const{
    return m_pickup_id_isSet;
}

bool OAISchedule_pickup_response_body::is_pickup_id_Valid() const{
    return m_pickup_id_isValid;
}

QString OAISchedule_pickup_response_body::getPickupNotes() const {
    return m_pickup_notes;
}
void OAISchedule_pickup_response_body::setPickupNotes(const QString &pickup_notes) {
    m_pickup_notes = pickup_notes;
    m_pickup_notes_isSet = true;
}

bool OAISchedule_pickup_response_body::is_pickup_notes_Set() const{
    return m_pickup_notes_isSet;
}

bool OAISchedule_pickup_response_body::is_pickup_notes_Valid() const{
    return m_pickup_notes_isValid;
}

OAIPickup_window OAISchedule_pickup_response_body::getPickupWindow() const {
    return m_pickup_window;
}
void OAISchedule_pickup_response_body::setPickupWindow(const OAIPickup_window &pickup_window) {
    m_pickup_window = pickup_window;
    m_pickup_window_isSet = true;
}

bool OAISchedule_pickup_response_body::is_pickup_window_Set() const{
    return m_pickup_window_isSet;
}

bool OAISchedule_pickup_response_body::is_pickup_window_Valid() const{
    return m_pickup_window_isValid;
}

QList<OAIPickup_windows> OAISchedule_pickup_response_body::getPickupWindows() const {
    return m_pickup_windows;
}
void OAISchedule_pickup_response_body::setPickupWindows(const QList<OAIPickup_windows> &pickup_windows) {
    m_pickup_windows = pickup_windows;
    m_pickup_windows_isSet = true;
}

bool OAISchedule_pickup_response_body::is_pickup_windows_Set() const{
    return m_pickup_windows_isSet;
}

bool OAISchedule_pickup_response_body::is_pickup_windows_Valid() const{
    return m_pickup_windows_isValid;
}

QString OAISchedule_pickup_response_body::getWarehouseId() const {
    return m_warehouse_id;
}
void OAISchedule_pickup_response_body::setWarehouseId(const QString &warehouse_id) {
    m_warehouse_id = warehouse_id;
    m_warehouse_id_isSet = true;
}

bool OAISchedule_pickup_response_body::is_warehouse_id_Set() const{
    return m_warehouse_id_isSet;
}

bool OAISchedule_pickup_response_body::is_warehouse_id_Valid() const{
    return m_warehouse_id_isValid;
}

QList<OAIError> OAISchedule_pickup_response_body::getErrors() const {
    return m_errors;
}
void OAISchedule_pickup_response_body::setErrors(const QList<OAIError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAISchedule_pickup_response_body::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAISchedule_pickup_response_body::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAISchedule_pickup_response_body::getRequestId() const {
    return m_request_id;
}
void OAISchedule_pickup_response_body::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAISchedule_pickup_response_body::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAISchedule_pickup_response_body::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAISchedule_pickup_response_body::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cancelled_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmation_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_window.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_windows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchedule_pickup_response_body::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_errors_isValid && m_request_id_isValid && true;
}

} // namespace OpenAPI
