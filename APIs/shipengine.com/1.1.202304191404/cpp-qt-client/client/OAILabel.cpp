/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILabel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILabel::OAILabel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILabel::OAILabel() {
    this->initializeModel();
}

OAILabel::~OAILabel() {}

void OAILabel::initializeModel() {

    m_alternative_identifiers_isSet = false;
    m_alternative_identifiers_isValid = false;

    m_batch_id_isSet = false;
    m_batch_id_isValid = false;

    m_carrier_code_isSet = false;
    m_carrier_code_isValid = false;

    m_carrier_id_isSet = false;
    m_carrier_id_isValid = false;

    m_charge_event_isSet = false;
    m_charge_event_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_display_scheme_isSet = false;
    m_display_scheme_isValid = false;

    m_form_download_isSet = false;
    m_form_download_isValid = false;

    m_insurance_claim_isSet = false;
    m_insurance_claim_isValid = false;

    m_insurance_cost_isSet = false;
    m_insurance_cost_isValid = false;

    m_is_international_isSet = false;
    m_is_international_isValid = false;

    m_is_return_label_isSet = false;
    m_is_return_label_isValid = false;

    m_label_download_isSet = false;
    m_label_download_isValid = false;

    m_label_download_type_isSet = false;
    m_label_download_type_isValid = false;

    m_label_format_isSet = false;
    m_label_format_isValid = false;

    m_label_id_isSet = false;
    m_label_id_isValid = false;

    m_label_image_id_isSet = false;
    m_label_image_id_isValid = false;

    m_label_layout_isSet = false;
    m_label_layout_isValid = false;

    m_outbound_label_id_isSet = false;
    m_outbound_label_id_isValid = false;

    m_package_code_isSet = false;
    m_package_code_isValid = false;

    m_packages_isSet = false;
    m_packages_isValid = false;

    m_rma_number_isSet = false;
    m_rma_number_isValid = false;

    m_service_code_isSet = false;
    m_service_code_isValid = false;

    m_ship_date_isSet = false;
    m_ship_date_isValid = false;

    m_shipment_isSet = false;
    m_shipment_isValid = false;

    m_shipment_cost_isSet = false;
    m_shipment_cost_isValid = false;

    m_shipment_id_isSet = false;
    m_shipment_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_test_label_isSet = false;
    m_test_label_isValid = false;

    m_trackable_isSet = false;
    m_trackable_isValid = false;

    m_tracking_number_isSet = false;
    m_tracking_number_isValid = false;

    m_tracking_status_isSet = false;
    m_tracking_status_isValid = false;

    m_validate_address_isSet = false;
    m_validate_address_isValid = false;

    m_voided_isSet = false;
    m_voided_isValid = false;

    m_voided_at_isSet = false;
    m_voided_at_isValid = false;
}

void OAILabel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILabel::fromJsonObject(QJsonObject json) {

    m_alternative_identifiers_isValid = ::OpenAPI::fromJsonValue(m_alternative_identifiers, json[QString("alternative_identifiers")]);
    m_alternative_identifiers_isSet = !json[QString("alternative_identifiers")].isNull() && m_alternative_identifiers_isValid;

    m_batch_id_isValid = ::OpenAPI::fromJsonValue(m_batch_id, json[QString("batch_id")]);
    m_batch_id_isSet = !json[QString("batch_id")].isNull() && m_batch_id_isValid;

    m_carrier_code_isValid = ::OpenAPI::fromJsonValue(m_carrier_code, json[QString("carrier_code")]);
    m_carrier_code_isSet = !json[QString("carrier_code")].isNull() && m_carrier_code_isValid;

    m_carrier_id_isValid = ::OpenAPI::fromJsonValue(m_carrier_id, json[QString("carrier_id")]);
    m_carrier_id_isSet = !json[QString("carrier_id")].isNull() && m_carrier_id_isValid;

    m_charge_event_isValid = ::OpenAPI::fromJsonValue(m_charge_event, json[QString("charge_event")]);
    m_charge_event_isSet = !json[QString("charge_event")].isNull() && m_charge_event_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_display_scheme_isValid = ::OpenAPI::fromJsonValue(m_display_scheme, json[QString("display_scheme")]);
    m_display_scheme_isSet = !json[QString("display_scheme")].isNull() && m_display_scheme_isValid;

    m_form_download_isValid = ::OpenAPI::fromJsonValue(m_form_download, json[QString("form_download")]);
    m_form_download_isSet = !json[QString("form_download")].isNull() && m_form_download_isValid;

    m_insurance_claim_isValid = ::OpenAPI::fromJsonValue(m_insurance_claim, json[QString("insurance_claim")]);
    m_insurance_claim_isSet = !json[QString("insurance_claim")].isNull() && m_insurance_claim_isValid;

    m_insurance_cost_isValid = ::OpenAPI::fromJsonValue(m_insurance_cost, json[QString("insurance_cost")]);
    m_insurance_cost_isSet = !json[QString("insurance_cost")].isNull() && m_insurance_cost_isValid;

    m_is_international_isValid = ::OpenAPI::fromJsonValue(m_is_international, json[QString("is_international")]);
    m_is_international_isSet = !json[QString("is_international")].isNull() && m_is_international_isValid;

    m_is_return_label_isValid = ::OpenAPI::fromJsonValue(m_is_return_label, json[QString("is_return_label")]);
    m_is_return_label_isSet = !json[QString("is_return_label")].isNull() && m_is_return_label_isValid;

    m_label_download_isValid = ::OpenAPI::fromJsonValue(m_label_download, json[QString("label_download")]);
    m_label_download_isSet = !json[QString("label_download")].isNull() && m_label_download_isValid;

    m_label_download_type_isValid = ::OpenAPI::fromJsonValue(m_label_download_type, json[QString("label_download_type")]);
    m_label_download_type_isSet = !json[QString("label_download_type")].isNull() && m_label_download_type_isValid;

    m_label_format_isValid = ::OpenAPI::fromJsonValue(m_label_format, json[QString("label_format")]);
    m_label_format_isSet = !json[QString("label_format")].isNull() && m_label_format_isValid;

    m_label_id_isValid = ::OpenAPI::fromJsonValue(m_label_id, json[QString("label_id")]);
    m_label_id_isSet = !json[QString("label_id")].isNull() && m_label_id_isValid;

    m_label_image_id_isValid = ::OpenAPI::fromJsonValue(m_label_image_id, json[QString("label_image_id")]);
    m_label_image_id_isSet = !json[QString("label_image_id")].isNull() && m_label_image_id_isValid;

    m_label_layout_isValid = ::OpenAPI::fromJsonValue(m_label_layout, json[QString("label_layout")]);
    m_label_layout_isSet = !json[QString("label_layout")].isNull() && m_label_layout_isValid;

    m_outbound_label_id_isValid = ::OpenAPI::fromJsonValue(m_outbound_label_id, json[QString("outbound_label_id")]);
    m_outbound_label_id_isSet = !json[QString("outbound_label_id")].isNull() && m_outbound_label_id_isValid;

    m_package_code_isValid = ::OpenAPI::fromJsonValue(m_package_code, json[QString("package_code")]);
    m_package_code_isSet = !json[QString("package_code")].isNull() && m_package_code_isValid;

    m_packages_isValid = ::OpenAPI::fromJsonValue(m_packages, json[QString("packages")]);
    m_packages_isSet = !json[QString("packages")].isNull() && m_packages_isValid;

    m_rma_number_isValid = ::OpenAPI::fromJsonValue(m_rma_number, json[QString("rma_number")]);
    m_rma_number_isSet = !json[QString("rma_number")].isNull() && m_rma_number_isValid;

    m_service_code_isValid = ::OpenAPI::fromJsonValue(m_service_code, json[QString("service_code")]);
    m_service_code_isSet = !json[QString("service_code")].isNull() && m_service_code_isValid;

    m_ship_date_isValid = ::OpenAPI::fromJsonValue(m_ship_date, json[QString("ship_date")]);
    m_ship_date_isSet = !json[QString("ship_date")].isNull() && m_ship_date_isValid;

    m_shipment_isValid = ::OpenAPI::fromJsonValue(m_shipment, json[QString("shipment")]);
    m_shipment_isSet = !json[QString("shipment")].isNull() && m_shipment_isValid;

    m_shipment_cost_isValid = ::OpenAPI::fromJsonValue(m_shipment_cost, json[QString("shipment_cost")]);
    m_shipment_cost_isSet = !json[QString("shipment_cost")].isNull() && m_shipment_cost_isValid;

    m_shipment_id_isValid = ::OpenAPI::fromJsonValue(m_shipment_id, json[QString("shipment_id")]);
    m_shipment_id_isSet = !json[QString("shipment_id")].isNull() && m_shipment_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_test_label_isValid = ::OpenAPI::fromJsonValue(m_test_label, json[QString("test_label")]);
    m_test_label_isSet = !json[QString("test_label")].isNull() && m_test_label_isValid;

    m_trackable_isValid = ::OpenAPI::fromJsonValue(m_trackable, json[QString("trackable")]);
    m_trackable_isSet = !json[QString("trackable")].isNull() && m_trackable_isValid;

    m_tracking_number_isValid = ::OpenAPI::fromJsonValue(m_tracking_number, json[QString("tracking_number")]);
    m_tracking_number_isSet = !json[QString("tracking_number")].isNull() && m_tracking_number_isValid;

    m_tracking_status_isValid = ::OpenAPI::fromJsonValue(m_tracking_status, json[QString("tracking_status")]);
    m_tracking_status_isSet = !json[QString("tracking_status")].isNull() && m_tracking_status_isValid;

    m_validate_address_isValid = ::OpenAPI::fromJsonValue(m_validate_address, json[QString("validate_address")]);
    m_validate_address_isSet = !json[QString("validate_address")].isNull() && m_validate_address_isValid;

    m_voided_isValid = ::OpenAPI::fromJsonValue(m_voided, json[QString("voided")]);
    m_voided_isSet = !json[QString("voided")].isNull() && m_voided_isValid;

    m_voided_at_isValid = ::OpenAPI::fromJsonValue(m_voided_at, json[QString("voided_at")]);
    m_voided_at_isSet = !json[QString("voided_at")].isNull() && m_voided_at_isValid;
}

QString OAILabel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILabel::asJsonObject() const {
    QJsonObject obj;
    if (m_alternative_identifiers.size() > 0) {
        obj.insert(QString("alternative_identifiers"), ::OpenAPI::toJsonValue(m_alternative_identifiers));
    }
    if (m_batch_id_isSet) {
        obj.insert(QString("batch_id"), ::OpenAPI::toJsonValue(m_batch_id));
    }
    if (m_carrier_code_isSet) {
        obj.insert(QString("carrier_code"), ::OpenAPI::toJsonValue(m_carrier_code));
    }
    if (m_carrier_id_isSet) {
        obj.insert(QString("carrier_id"), ::OpenAPI::toJsonValue(m_carrier_id));
    }
    if (m_charge_event.isSet()) {
        obj.insert(QString("charge_event"), ::OpenAPI::toJsonValue(m_charge_event));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_display_scheme.isSet()) {
        obj.insert(QString("display_scheme"), ::OpenAPI::toJsonValue(m_display_scheme));
    }
    if (m_form_download.isSet()) {
        obj.insert(QString("form_download"), ::OpenAPI::toJsonValue(m_form_download));
    }
    if (m_insurance_claim.isSet()) {
        obj.insert(QString("insurance_claim"), ::OpenAPI::toJsonValue(m_insurance_claim));
    }
    if (m_insurance_cost.isSet()) {
        obj.insert(QString("insurance_cost"), ::OpenAPI::toJsonValue(m_insurance_cost));
    }
    if (m_is_international_isSet) {
        obj.insert(QString("is_international"), ::OpenAPI::toJsonValue(m_is_international));
    }
    if (m_is_return_label_isSet) {
        obj.insert(QString("is_return_label"), ::OpenAPI::toJsonValue(m_is_return_label));
    }
    if (m_label_download.isSet()) {
        obj.insert(QString("label_download"), ::OpenAPI::toJsonValue(m_label_download));
    }
    if (m_label_download_type.isSet()) {
        obj.insert(QString("label_download_type"), ::OpenAPI::toJsonValue(m_label_download_type));
    }
    if (m_label_format.isSet()) {
        obj.insert(QString("label_format"), ::OpenAPI::toJsonValue(m_label_format));
    }
    if (m_label_id_isSet) {
        obj.insert(QString("label_id"), ::OpenAPI::toJsonValue(m_label_id));
    }
    if (m_label_image_id_isSet) {
        obj.insert(QString("label_image_id"), ::OpenAPI::toJsonValue(m_label_image_id));
    }
    if (m_label_layout.isSet()) {
        obj.insert(QString("label_layout"), ::OpenAPI::toJsonValue(m_label_layout));
    }
    if (m_outbound_label_id_isSet) {
        obj.insert(QString("outbound_label_id"), ::OpenAPI::toJsonValue(m_outbound_label_id));
    }
    if (m_package_code_isSet) {
        obj.insert(QString("package_code"), ::OpenAPI::toJsonValue(m_package_code));
    }
    if (m_packages.size() > 0) {
        obj.insert(QString("packages"), ::OpenAPI::toJsonValue(m_packages));
    }
    if (m_rma_number_isSet) {
        obj.insert(QString("rma_number"), ::OpenAPI::toJsonValue(m_rma_number));
    }
    if (m_service_code_isSet) {
        obj.insert(QString("service_code"), ::OpenAPI::toJsonValue(m_service_code));
    }
    if (m_ship_date_isSet) {
        obj.insert(QString("ship_date"), ::OpenAPI::toJsonValue(m_ship_date));
    }
    if (m_shipment.isSet()) {
        obj.insert(QString("shipment"), ::OpenAPI::toJsonValue(m_shipment));
    }
    if (m_shipment_cost.isSet()) {
        obj.insert(QString("shipment_cost"), ::OpenAPI::toJsonValue(m_shipment_cost));
    }
    if (m_shipment_id_isSet) {
        obj.insert(QString("shipment_id"), ::OpenAPI::toJsonValue(m_shipment_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_test_label_isSet) {
        obj.insert(QString("test_label"), ::OpenAPI::toJsonValue(m_test_label));
    }
    if (m_trackable_isSet) {
        obj.insert(QString("trackable"), ::OpenAPI::toJsonValue(m_trackable));
    }
    if (m_tracking_number_isSet) {
        obj.insert(QString("tracking_number"), ::OpenAPI::toJsonValue(m_tracking_number));
    }
    if (m_tracking_status.isSet()) {
        obj.insert(QString("tracking_status"), ::OpenAPI::toJsonValue(m_tracking_status));
    }
    if (m_validate_address.isSet()) {
        obj.insert(QString("validate_address"), ::OpenAPI::toJsonValue(m_validate_address));
    }
    if (m_voided_isSet) {
        obj.insert(QString("voided"), ::OpenAPI::toJsonValue(m_voided));
    }
    if (m_voided_at_isSet) {
        obj.insert(QString("voided_at"), ::OpenAPI::toJsonValue(m_voided_at));
    }
    return obj;
}

QList<OAIAlternative_identifier> OAILabel::getAlternativeIdentifiers() const {
    return m_alternative_identifiers;
}
void OAILabel::setAlternativeIdentifiers(const QList<OAIAlternative_identifier> &alternative_identifiers) {
    m_alternative_identifiers = alternative_identifiers;
    m_alternative_identifiers_isSet = true;
}

bool OAILabel::is_alternative_identifiers_Set() const{
    return m_alternative_identifiers_isSet;
}

bool OAILabel::is_alternative_identifiers_Valid() const{
    return m_alternative_identifiers_isValid;
}

QString OAILabel::getBatchId() const {
    return m_batch_id;
}
void OAILabel::setBatchId(const QString &batch_id) {
    m_batch_id = batch_id;
    m_batch_id_isSet = true;
}

bool OAILabel::is_batch_id_Set() const{
    return m_batch_id_isSet;
}

bool OAILabel::is_batch_id_Valid() const{
    return m_batch_id_isValid;
}

QString OAILabel::getCarrierCode() const {
    return m_carrier_code;
}
void OAILabel::setCarrierCode(const QString &carrier_code) {
    m_carrier_code = carrier_code;
    m_carrier_code_isSet = true;
}

bool OAILabel::is_carrier_code_Set() const{
    return m_carrier_code_isSet;
}

bool OAILabel::is_carrier_code_Valid() const{
    return m_carrier_code_isValid;
}

QString OAILabel::getCarrierId() const {
    return m_carrier_id;
}
void OAILabel::setCarrierId(const QString &carrier_id) {
    m_carrier_id = carrier_id;
    m_carrier_id_isSet = true;
}

bool OAILabel::is_carrier_id_Set() const{
    return m_carrier_id_isSet;
}

bool OAILabel::is_carrier_id_Valid() const{
    return m_carrier_id_isValid;
}

OAILabel_charge_event OAILabel::getChargeEvent() const {
    return m_charge_event;
}
void OAILabel::setChargeEvent(const OAILabel_charge_event &charge_event) {
    m_charge_event = charge_event;
    m_charge_event_isSet = true;
}

bool OAILabel::is_charge_event_Set() const{
    return m_charge_event_isSet;
}

bool OAILabel::is_charge_event_Valid() const{
    return m_charge_event_isValid;
}

QDateTime OAILabel::getCreatedAt() const {
    return m_created_at;
}
void OAILabel::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAILabel::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAILabel::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIDisplay_scheme OAILabel::getDisplayScheme() const {
    return m_display_scheme;
}
void OAILabel::setDisplayScheme(const OAIDisplay_scheme &display_scheme) {
    m_display_scheme = display_scheme;
    m_display_scheme_isSet = true;
}

bool OAILabel::is_display_scheme_Set() const{
    return m_display_scheme_isSet;
}

bool OAILabel::is_display_scheme_Valid() const{
    return m_display_scheme_isValid;
}

OAILink OAILabel::getFormDownload() const {
    return m_form_download;
}
void OAILabel::setFormDownload(const OAILink &form_download) {
    m_form_download = form_download;
    m_form_download_isSet = true;
}

bool OAILabel::is_form_download_Set() const{
    return m_form_download_isSet;
}

bool OAILabel::is_form_download_Valid() const{
    return m_form_download_isValid;
}

OAILink OAILabel::getInsuranceClaim() const {
    return m_insurance_claim;
}
void OAILabel::setInsuranceClaim(const OAILink &insurance_claim) {
    m_insurance_claim = insurance_claim;
    m_insurance_claim_isSet = true;
}

bool OAILabel::is_insurance_claim_Set() const{
    return m_insurance_claim_isSet;
}

bool OAILabel::is_insurance_claim_Valid() const{
    return m_insurance_claim_isValid;
}

OAIMonetary_value OAILabel::getInsuranceCost() const {
    return m_insurance_cost;
}
void OAILabel::setInsuranceCost(const OAIMonetary_value &insurance_cost) {
    m_insurance_cost = insurance_cost;
    m_insurance_cost_isSet = true;
}

bool OAILabel::is_insurance_cost_Set() const{
    return m_insurance_cost_isSet;
}

bool OAILabel::is_insurance_cost_Valid() const{
    return m_insurance_cost_isValid;
}

bool OAILabel::isIsInternational() const {
    return m_is_international;
}
void OAILabel::setIsInternational(const bool &is_international) {
    m_is_international = is_international;
    m_is_international_isSet = true;
}

bool OAILabel::is_is_international_Set() const{
    return m_is_international_isSet;
}

bool OAILabel::is_is_international_Valid() const{
    return m_is_international_isValid;
}

bool OAILabel::isIsReturnLabel() const {
    return m_is_return_label;
}
void OAILabel::setIsReturnLabel(const bool &is_return_label) {
    m_is_return_label = is_return_label;
    m_is_return_label_isSet = true;
}

bool OAILabel::is_is_return_label_Set() const{
    return m_is_return_label_isSet;
}

bool OAILabel::is_is_return_label_Valid() const{
    return m_is_return_label_isValid;
}

OAILabel_download OAILabel::getLabelDownload() const {
    return m_label_download;
}
void OAILabel::setLabelDownload(const OAILabel_download &label_download) {
    m_label_download = label_download;
    m_label_download_isSet = true;
}

bool OAILabel::is_label_download_Set() const{
    return m_label_download_isSet;
}

bool OAILabel::is_label_download_Valid() const{
    return m_label_download_isValid;
}

OAILabel_download_type OAILabel::getLabelDownloadType() const {
    return m_label_download_type;
}
void OAILabel::setLabelDownloadType(const OAILabel_download_type &label_download_type) {
    m_label_download_type = label_download_type;
    m_label_download_type_isSet = true;
}

bool OAILabel::is_label_download_type_Set() const{
    return m_label_download_type_isSet;
}

bool OAILabel::is_label_download_type_Valid() const{
    return m_label_download_type_isValid;
}

OAILabel_format OAILabel::getLabelFormat() const {
    return m_label_format;
}
void OAILabel::setLabelFormat(const OAILabel_format &label_format) {
    m_label_format = label_format;
    m_label_format_isSet = true;
}

bool OAILabel::is_label_format_Set() const{
    return m_label_format_isSet;
}

bool OAILabel::is_label_format_Valid() const{
    return m_label_format_isValid;
}

QString OAILabel::getLabelId() const {
    return m_label_id;
}
void OAILabel::setLabelId(const QString &label_id) {
    m_label_id = label_id;
    m_label_id_isSet = true;
}

bool OAILabel::is_label_id_Set() const{
    return m_label_id_isSet;
}

bool OAILabel::is_label_id_Valid() const{
    return m_label_id_isValid;
}

QString OAILabel::getLabelImageId() const {
    return m_label_image_id;
}
void OAILabel::setLabelImageId(const QString &label_image_id) {
    m_label_image_id = label_image_id;
    m_label_image_id_isSet = true;
}

bool OAILabel::is_label_image_id_Set() const{
    return m_label_image_id_isSet;
}

bool OAILabel::is_label_image_id_Valid() const{
    return m_label_image_id_isValid;
}

OAILabel_layout OAILabel::getLabelLayout() const {
    return m_label_layout;
}
void OAILabel::setLabelLayout(const OAILabel_layout &label_layout) {
    m_label_layout = label_layout;
    m_label_layout_isSet = true;
}

bool OAILabel::is_label_layout_Set() const{
    return m_label_layout_isSet;
}

bool OAILabel::is_label_layout_Valid() const{
    return m_label_layout_isValid;
}

QString OAILabel::getOutboundLabelId() const {
    return m_outbound_label_id;
}
void OAILabel::setOutboundLabelId(const QString &outbound_label_id) {
    m_outbound_label_id = outbound_label_id;
    m_outbound_label_id_isSet = true;
}

bool OAILabel::is_outbound_label_id_Set() const{
    return m_outbound_label_id_isSet;
}

bool OAILabel::is_outbound_label_id_Valid() const{
    return m_outbound_label_id_isValid;
}

QString OAILabel::getPackageCode() const {
    return m_package_code;
}
void OAILabel::setPackageCode(const QString &package_code) {
    m_package_code = package_code;
    m_package_code_isSet = true;
}

bool OAILabel::is_package_code_Set() const{
    return m_package_code_isSet;
}

bool OAILabel::is_package_code_Valid() const{
    return m_package_code_isValid;
}

QList<OAIPackage> OAILabel::getPackages() const {
    return m_packages;
}
void OAILabel::setPackages(const QList<OAIPackage> &packages) {
    m_packages = packages;
    m_packages_isSet = true;
}

bool OAILabel::is_packages_Set() const{
    return m_packages_isSet;
}

bool OAILabel::is_packages_Valid() const{
    return m_packages_isValid;
}

QString OAILabel::getRmaNumber() const {
    return m_rma_number;
}
void OAILabel::setRmaNumber(const QString &rma_number) {
    m_rma_number = rma_number;
    m_rma_number_isSet = true;
}

bool OAILabel::is_rma_number_Set() const{
    return m_rma_number_isSet;
}

bool OAILabel::is_rma_number_Valid() const{
    return m_rma_number_isValid;
}

QString OAILabel::getServiceCode() const {
    return m_service_code;
}
void OAILabel::setServiceCode(const QString &service_code) {
    m_service_code = service_code;
    m_service_code_isSet = true;
}

bool OAILabel::is_service_code_Set() const{
    return m_service_code_isSet;
}

bool OAILabel::is_service_code_Valid() const{
    return m_service_code_isValid;
}

QDateTime OAILabel::getShipDate() const {
    return m_ship_date;
}
void OAILabel::setShipDate(const QDateTime &ship_date) {
    m_ship_date = ship_date;
    m_ship_date_isSet = true;
}

bool OAILabel::is_ship_date_Set() const{
    return m_ship_date_isSet;
}

bool OAILabel::is_ship_date_Valid() const{
    return m_ship_date_isValid;
}

OAIShipment OAILabel::getShipment() const {
    return m_shipment;
}
void OAILabel::setShipment(const OAIShipment &shipment) {
    m_shipment = shipment;
    m_shipment_isSet = true;
}

bool OAILabel::is_shipment_Set() const{
    return m_shipment_isSet;
}

bool OAILabel::is_shipment_Valid() const{
    return m_shipment_isValid;
}

OAIMonetary_value OAILabel::getShipmentCost() const {
    return m_shipment_cost;
}
void OAILabel::setShipmentCost(const OAIMonetary_value &shipment_cost) {
    m_shipment_cost = shipment_cost;
    m_shipment_cost_isSet = true;
}

bool OAILabel::is_shipment_cost_Set() const{
    return m_shipment_cost_isSet;
}

bool OAILabel::is_shipment_cost_Valid() const{
    return m_shipment_cost_isValid;
}

QString OAILabel::getShipmentId() const {
    return m_shipment_id;
}
void OAILabel::setShipmentId(const QString &shipment_id) {
    m_shipment_id = shipment_id;
    m_shipment_id_isSet = true;
}

bool OAILabel::is_shipment_id_Set() const{
    return m_shipment_id_isSet;
}

bool OAILabel::is_shipment_id_Valid() const{
    return m_shipment_id_isValid;
}

OAILabel_status OAILabel::getStatus() const {
    return m_status;
}
void OAILabel::setStatus(const OAILabel_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAILabel::is_status_Set() const{
    return m_status_isSet;
}

bool OAILabel::is_status_Valid() const{
    return m_status_isValid;
}

bool OAILabel::isTestLabel() const {
    return m_test_label;
}
void OAILabel::setTestLabel(const bool &test_label) {
    m_test_label = test_label;
    m_test_label_isSet = true;
}

bool OAILabel::is_test_label_Set() const{
    return m_test_label_isSet;
}

bool OAILabel::is_test_label_Valid() const{
    return m_test_label_isValid;
}

bool OAILabel::isTrackable() const {
    return m_trackable;
}
void OAILabel::setTrackable(const bool &trackable) {
    m_trackable = trackable;
    m_trackable_isSet = true;
}

bool OAILabel::is_trackable_Set() const{
    return m_trackable_isSet;
}

bool OAILabel::is_trackable_Valid() const{
    return m_trackable_isValid;
}

QString OAILabel::getTrackingNumber() const {
    return m_tracking_number;
}
void OAILabel::setTrackingNumber(const QString &tracking_number) {
    m_tracking_number = tracking_number;
    m_tracking_number_isSet = true;
}

bool OAILabel::is_tracking_number_Set() const{
    return m_tracking_number_isSet;
}

bool OAILabel::is_tracking_number_Valid() const{
    return m_tracking_number_isValid;
}

OAITracking_status OAILabel::getTrackingStatus() const {
    return m_tracking_status;
}
void OAILabel::setTrackingStatus(const OAITracking_status &tracking_status) {
    m_tracking_status = tracking_status;
    m_tracking_status_isSet = true;
}

bool OAILabel::is_tracking_status_Set() const{
    return m_tracking_status_isSet;
}

bool OAILabel::is_tracking_status_Valid() const{
    return m_tracking_status_isValid;
}

OAIValidate_address OAILabel::getValidateAddress() const {
    return m_validate_address;
}
void OAILabel::setValidateAddress(const OAIValidate_address &validate_address) {
    m_validate_address = validate_address;
    m_validate_address_isSet = true;
}

bool OAILabel::is_validate_address_Set() const{
    return m_validate_address_isSet;
}

bool OAILabel::is_validate_address_Valid() const{
    return m_validate_address_isValid;
}

bool OAILabel::isVoided() const {
    return m_voided;
}
void OAILabel::setVoided(const bool &voided) {
    m_voided = voided;
    m_voided_isSet = true;
}

bool OAILabel::is_voided_Set() const{
    return m_voided_isSet;
}

bool OAILabel::is_voided_Valid() const{
    return m_voided_isValid;
}

QDateTime OAILabel::getVoidedAt() const {
    return m_voided_at;
}
void OAILabel::setVoidedAt(const QDateTime &voided_at) {
    m_voided_at = voided_at;
    m_voided_at_isSet = true;
}

bool OAILabel::is_voided_at_Set() const{
    return m_voided_at_isSet;
}

bool OAILabel::is_voided_at_Valid() const{
    return m_voided_at_isValid;
}

bool OAILabel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternative_identifiers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_charge_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_scheme.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_download.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insurance_claim.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insurance_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_international_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_return_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_download.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_download_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_layout.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outbound_label_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_packages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rma_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipment_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trackable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_voided_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voided_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILabel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
