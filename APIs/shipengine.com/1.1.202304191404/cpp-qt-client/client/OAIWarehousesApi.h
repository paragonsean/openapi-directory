/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWarehousesApi_H
#define OAI_OAIWarehousesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreate_warehouse_request_body.h"
#include "OAICreate_warehouse_response_body.h"
#include "OAIError_response_body.h"
#include "OAIGet_warehouse_by_id_response_body.h"
#include "OAIList_warehouses_response_body.h"
#include "OAIUpdate_warehouse_request_body.h"
#include "OAIUpdate_warehouse_settings_request_body.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWarehousesApi : public QObject {
    Q_OBJECT

public:
    OAIWarehousesApi(const int timeOut = 0);
    ~OAIWarehousesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_warehouse_request_body OAICreate_warehouse_request_body [required]
    */
    virtual void createWarehouse(const OAICreate_warehouse_request_body &oai_create_warehouse_request_body);

    /**
    * @param[in]  warehouse_id QString [required]
    */
    virtual void deleteWarehouse(const QString &warehouse_id);

    /**
    * @param[in]  warehouse_id QString [required]
    */
    virtual void getWarehouseById(const QString &warehouse_id);


    virtual void listWarehouses();

    /**
    * @param[in]  warehouse_id QString [required]
    * @param[in]  oai_update_warehouse_request_body OAIUpdate_warehouse_request_body [required]
    */
    virtual void updateWarehouse(const QString &warehouse_id, const OAIUpdate_warehouse_request_body &oai_update_warehouse_request_body);

    /**
    * @param[in]  warehouse_id QString [required]
    * @param[in]  oai_update_warehouse_settings_request_body OAIUpdate_warehouse_settings_request_body [required]
    */
    virtual void updateWarehouseSettings(const QString &warehouse_id, const OAIUpdate_warehouse_settings_request_body &oai_update_warehouse_settings_request_body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createWarehouseCallback(OAIHttpRequestWorker *worker);
    void deleteWarehouseCallback(OAIHttpRequestWorker *worker);
    void getWarehouseByIdCallback(OAIHttpRequestWorker *worker);
    void listWarehousesCallback(OAIHttpRequestWorker *worker);
    void updateWarehouseCallback(OAIHttpRequestWorker *worker);
    void updateWarehouseSettingsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createWarehouseSignal(OAICreate_warehouse_response_body summary);
    void deleteWarehouseSignal(QString summary);
    void getWarehouseByIdSignal(OAIGet_warehouse_by_id_response_body summary);
    void listWarehousesSignal(OAIList_warehouses_response_body summary);
    void updateWarehouseSignal(QString summary);
    void updateWarehouseSettingsSignal(QString summary);


    void createWarehouseSignalFull(OAIHttpRequestWorker *worker, OAICreate_warehouse_response_body summary);
    void deleteWarehouseSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getWarehouseByIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_warehouse_by_id_response_body summary);
    void listWarehousesSignalFull(OAIHttpRequestWorker *worker, OAIList_warehouses_response_body summary);
    void updateWarehouseSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void updateWarehouseSettingsSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use createWarehouseSignalError() instead")
    void createWarehouseSignalE(OAICreate_warehouse_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createWarehouseSignalError(OAICreate_warehouse_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWarehouseSignalError() instead")
    void deleteWarehouseSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWarehouseSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWarehouseByIdSignalError() instead")
    void getWarehouseByIdSignalE(OAIGet_warehouse_by_id_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWarehouseByIdSignalError(OAIGet_warehouse_by_id_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWarehousesSignalError() instead")
    void listWarehousesSignalE(OAIList_warehouses_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listWarehousesSignalError(OAIList_warehouses_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWarehouseSignalError() instead")
    void updateWarehouseSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWarehouseSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWarehouseSettingsSignalError() instead")
    void updateWarehouseSettingsSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWarehouseSettingsSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createWarehouseSignalErrorFull() instead")
    void createWarehouseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createWarehouseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWarehouseSignalErrorFull() instead")
    void deleteWarehouseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWarehouseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWarehouseByIdSignalErrorFull() instead")
    void getWarehouseByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWarehouseByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWarehousesSignalErrorFull() instead")
    void listWarehousesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listWarehousesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWarehouseSignalErrorFull() instead")
    void updateWarehouseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWarehouseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWarehouseSettingsSignalErrorFull() instead")
    void updateWarehouseSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWarehouseSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
