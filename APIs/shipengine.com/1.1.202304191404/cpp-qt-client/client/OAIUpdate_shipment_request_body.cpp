/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdate_shipment_request_body.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdate_shipment_request_body::OAIUpdate_shipment_request_body(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdate_shipment_request_body::OAIUpdate_shipment_request_body() {
    this->initializeModel();
}

OAIUpdate_shipment_request_body::~OAIUpdate_shipment_request_body() {}

void OAIUpdate_shipment_request_body::initializeModel() {

    m_advanced_options_isSet = false;
    m_advanced_options_isValid = false;

    m_carrier_id_isSet = false;
    m_carrier_id_isValid = false;

    m_confirmation_isSet = false;
    m_confirmation_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_customs_isSet = false;
    m_customs_isValid = false;

    m_external_order_id_isSet = false;
    m_external_order_id_isValid = false;

    m_external_shipment_id_isSet = false;
    m_external_shipment_id_isValid = false;

    m_insurance_provider_isSet = false;
    m_insurance_provider_isValid = false;

    m_is_return_isSet = false;
    m_is_return_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_modified_at_isSet = false;
    m_modified_at_isValid = false;

    m_order_source_code_isSet = false;
    m_order_source_code_isValid = false;

    m_origin_type_isSet = false;
    m_origin_type_isValid = false;

    m_packages_isSet = false;
    m_packages_isValid = false;

    m_return_to_isSet = false;
    m_return_to_isValid = false;

    m_service_code_isSet = false;
    m_service_code_isValid = false;

    m_ship_date_isSet = false;
    m_ship_date_isValid = false;

    m_ship_from_isSet = false;
    m_ship_from_isValid = false;

    m_ship_to_isSet = false;
    m_ship_to_isValid = false;

    m_shipment_id_isSet = false;
    m_shipment_id_isValid = false;

    m_shipment_number_isSet = false;
    m_shipment_number_isValid = false;

    m_shipment_status_isSet = false;
    m_shipment_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tax_identifiers_isSet = false;
    m_tax_identifiers_isValid = false;

    m_total_weight_isSet = false;
    m_total_weight_isValid = false;

    m_warehouse_id_isSet = false;
    m_warehouse_id_isValid = false;

    m_validate_address_isSet = false;
    m_validate_address_isValid = false;
}

void OAIUpdate_shipment_request_body::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdate_shipment_request_body::fromJsonObject(QJsonObject json) {

    m_advanced_options_isValid = ::OpenAPI::fromJsonValue(m_advanced_options, json[QString("advanced_options")]);
    m_advanced_options_isSet = !json[QString("advanced_options")].isNull() && m_advanced_options_isValid;

    m_carrier_id_isValid = ::OpenAPI::fromJsonValue(m_carrier_id, json[QString("carrier_id")]);
    m_carrier_id_isSet = !json[QString("carrier_id")].isNull() && m_carrier_id_isValid;

    m_confirmation_isValid = ::OpenAPI::fromJsonValue(m_confirmation, json[QString("confirmation")]);
    m_confirmation_isSet = !json[QString("confirmation")].isNull() && m_confirmation_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_customs_isValid = ::OpenAPI::fromJsonValue(m_customs, json[QString("customs")]);
    m_customs_isSet = !json[QString("customs")].isNull() && m_customs_isValid;

    m_external_order_id_isValid = ::OpenAPI::fromJsonValue(m_external_order_id, json[QString("external_order_id")]);
    m_external_order_id_isSet = !json[QString("external_order_id")].isNull() && m_external_order_id_isValid;

    m_external_shipment_id_isValid = ::OpenAPI::fromJsonValue(m_external_shipment_id, json[QString("external_shipment_id")]);
    m_external_shipment_id_isSet = !json[QString("external_shipment_id")].isNull() && m_external_shipment_id_isValid;

    m_insurance_provider_isValid = ::OpenAPI::fromJsonValue(m_insurance_provider, json[QString("insurance_provider")]);
    m_insurance_provider_isSet = !json[QString("insurance_provider")].isNull() && m_insurance_provider_isValid;

    m_is_return_isValid = ::OpenAPI::fromJsonValue(m_is_return, json[QString("is_return")]);
    m_is_return_isSet = !json[QString("is_return")].isNull() && m_is_return_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_modified_at_isValid = ::OpenAPI::fromJsonValue(m_modified_at, json[QString("modified_at")]);
    m_modified_at_isSet = !json[QString("modified_at")].isNull() && m_modified_at_isValid;

    m_order_source_code_isValid = ::OpenAPI::fromJsonValue(m_order_source_code, json[QString("order_source_code")]);
    m_order_source_code_isSet = !json[QString("order_source_code")].isNull() && m_order_source_code_isValid;

    m_origin_type_isValid = ::OpenAPI::fromJsonValue(m_origin_type, json[QString("origin_type")]);
    m_origin_type_isSet = !json[QString("origin_type")].isNull() && m_origin_type_isValid;

    m_packages_isValid = ::OpenAPI::fromJsonValue(m_packages, json[QString("packages")]);
    m_packages_isSet = !json[QString("packages")].isNull() && m_packages_isValid;

    m_return_to_isValid = ::OpenAPI::fromJsonValue(m_return_to, json[QString("return_to")]);
    m_return_to_isSet = !json[QString("return_to")].isNull() && m_return_to_isValid;

    m_service_code_isValid = ::OpenAPI::fromJsonValue(m_service_code, json[QString("service_code")]);
    m_service_code_isSet = !json[QString("service_code")].isNull() && m_service_code_isValid;

    m_ship_date_isValid = ::OpenAPI::fromJsonValue(m_ship_date, json[QString("ship_date")]);
    m_ship_date_isSet = !json[QString("ship_date")].isNull() && m_ship_date_isValid;

    m_ship_from_isValid = ::OpenAPI::fromJsonValue(m_ship_from, json[QString("ship_from")]);
    m_ship_from_isSet = !json[QString("ship_from")].isNull() && m_ship_from_isValid;

    m_ship_to_isValid = ::OpenAPI::fromJsonValue(m_ship_to, json[QString("ship_to")]);
    m_ship_to_isSet = !json[QString("ship_to")].isNull() && m_ship_to_isValid;

    m_shipment_id_isValid = ::OpenAPI::fromJsonValue(m_shipment_id, json[QString("shipment_id")]);
    m_shipment_id_isSet = !json[QString("shipment_id")].isNull() && m_shipment_id_isValid;

    m_shipment_number_isValid = ::OpenAPI::fromJsonValue(m_shipment_number, json[QString("shipment_number")]);
    m_shipment_number_isSet = !json[QString("shipment_number")].isNull() && m_shipment_number_isValid;

    m_shipment_status_isValid = ::OpenAPI::fromJsonValue(m_shipment_status, json[QString("shipment_status")]);
    m_shipment_status_isSet = !json[QString("shipment_status")].isNull() && m_shipment_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_tax_identifiers_isValid = ::OpenAPI::fromJsonValue(m_tax_identifiers, json[QString("tax_identifiers")]);
    m_tax_identifiers_isSet = !json[QString("tax_identifiers")].isNull() && m_tax_identifiers_isValid;

    m_total_weight_isValid = ::OpenAPI::fromJsonValue(m_total_weight, json[QString("total_weight")]);
    m_total_weight_isSet = !json[QString("total_weight")].isNull() && m_total_weight_isValid;

    m_warehouse_id_isValid = ::OpenAPI::fromJsonValue(m_warehouse_id, json[QString("warehouse_id")]);
    m_warehouse_id_isSet = !json[QString("warehouse_id")].isNull() && m_warehouse_id_isValid;

    m_validate_address_isValid = ::OpenAPI::fromJsonValue(m_validate_address, json[QString("validate_address")]);
    m_validate_address_isSet = !json[QString("validate_address")].isNull() && m_validate_address_isValid;
}

QString OAIUpdate_shipment_request_body::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdate_shipment_request_body::asJsonObject() const {
    QJsonObject obj;
    if (m_advanced_options.isSet()) {
        obj.insert(QString("advanced_options"), ::OpenAPI::toJsonValue(m_advanced_options));
    }
    if (m_carrier_id_isSet) {
        obj.insert(QString("carrier_id"), ::OpenAPI::toJsonValue(m_carrier_id));
    }
    if (m_confirmation.isSet()) {
        obj.insert(QString("confirmation"), ::OpenAPI::toJsonValue(m_confirmation));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_customs.isSet()) {
        obj.insert(QString("customs"), ::OpenAPI::toJsonValue(m_customs));
    }
    if (m_external_order_id_isSet) {
        obj.insert(QString("external_order_id"), ::OpenAPI::toJsonValue(m_external_order_id));
    }
    if (m_external_shipment_id_isSet) {
        obj.insert(QString("external_shipment_id"), ::OpenAPI::toJsonValue(m_external_shipment_id));
    }
    if (m_insurance_provider.isSet()) {
        obj.insert(QString("insurance_provider"), ::OpenAPI::toJsonValue(m_insurance_provider));
    }
    if (m_is_return_isSet) {
        obj.insert(QString("is_return"), ::OpenAPI::toJsonValue(m_is_return));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_modified_at_isSet) {
        obj.insert(QString("modified_at"), ::OpenAPI::toJsonValue(m_modified_at));
    }
    if (m_order_source_code.isSet()) {
        obj.insert(QString("order_source_code"), ::OpenAPI::toJsonValue(m_order_source_code));
    }
    if (m_origin_type.isSet()) {
        obj.insert(QString("origin_type"), ::OpenAPI::toJsonValue(m_origin_type));
    }
    if (m_packages.size() > 0) {
        obj.insert(QString("packages"), ::OpenAPI::toJsonValue(m_packages));
    }
    if (m_return_to.isSet()) {
        obj.insert(QString("return_to"), ::OpenAPI::toJsonValue(m_return_to));
    }
    if (m_service_code_isSet) {
        obj.insert(QString("service_code"), ::OpenAPI::toJsonValue(m_service_code));
    }
    if (m_ship_date_isSet) {
        obj.insert(QString("ship_date"), ::OpenAPI::toJsonValue(m_ship_date));
    }
    if (m_ship_from.isSet()) {
        obj.insert(QString("ship_from"), ::OpenAPI::toJsonValue(m_ship_from));
    }
    if (m_ship_to.isSet()) {
        obj.insert(QString("ship_to"), ::OpenAPI::toJsonValue(m_ship_to));
    }
    if (m_shipment_id_isSet) {
        obj.insert(QString("shipment_id"), ::OpenAPI::toJsonValue(m_shipment_id));
    }
    if (m_shipment_number_isSet) {
        obj.insert(QString("shipment_number"), ::OpenAPI::toJsonValue(m_shipment_number));
    }
    if (m_shipment_status.isSet()) {
        obj.insert(QString("shipment_status"), ::OpenAPI::toJsonValue(m_shipment_status));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tax_identifiers.size() > 0) {
        obj.insert(QString("tax_identifiers"), ::OpenAPI::toJsonValue(m_tax_identifiers));
    }
    if (m_total_weight.isSet()) {
        obj.insert(QString("total_weight"), ::OpenAPI::toJsonValue(m_total_weight));
    }
    if (m_warehouse_id_isSet) {
        obj.insert(QString("warehouse_id"), ::OpenAPI::toJsonValue(m_warehouse_id));
    }
    if (m_validate_address.isSet()) {
        obj.insert(QString("validate_address"), ::OpenAPI::toJsonValue(m_validate_address));
    }
    return obj;
}

OAIAdvanced_shipment_options OAIUpdate_shipment_request_body::getAdvancedOptions() const {
    return m_advanced_options;
}
void OAIUpdate_shipment_request_body::setAdvancedOptions(const OAIAdvanced_shipment_options &advanced_options) {
    m_advanced_options = advanced_options;
    m_advanced_options_isSet = true;
}

bool OAIUpdate_shipment_request_body::is_advanced_options_Set() const{
    return m_advanced_options_isSet;
}

bool OAIUpdate_shipment_request_body::is_advanced_options_Valid() const{
    return m_advanced_options_isValid;
}

QString OAIUpdate_shipment_request_body::getCarrierId() const {
    return m_carrier_id;
}
void OAIUpdate_shipment_request_body::setCarrierId(const QString &carrier_id) {
    m_carrier_id = carrier_id;
    m_carrier_id_isSet = true;
}

bool OAIUpdate_shipment_request_body::is_carrier_id_Set() const{
    return m_carrier_id_isSet;
}

bool OAIUpdate_shipment_request_body::is_carrier_id_Valid() const{
    return m_carrier_id_isValid;
}

OAIDelivery_confirmation OAIUpdate_shipment_request_body::getConfirmation() const {
    return m_confirmation;
}
void OAIUpdate_shipment_request_body::setConfirmation(const OAIDelivery_confirmation &confirmation) {
    m_confirmation = confirmation;
    m_confirmation_isSet = true;
}

bool OAIUpdate_shipment_request_body::is_confirmation_Set() const{
    return m_confirmation_isSet;
}

bool OAIUpdate_shipment_request_body::is_confirmation_Valid() const{
    return m_confirmation_isValid;
}

QDateTime OAIUpdate_shipment_request_body::getCreatedAt() const {
    return m_created_at;
}
void OAIUpdate_shipment_request_body::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIUpdate_shipment_request_body::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUpdate_shipment_request_body::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIInternational_shipment_options OAIUpdate_shipment_request_body::getCustoms() const {
    return m_customs;
}
void OAIUpdate_shipment_request_body::setCustoms(const OAIInternational_shipment_options &customs) {
    m_customs = customs;
    m_customs_isSet = true;
}

bool OAIUpdate_shipment_request_body::is_customs_Set() const{
    return m_customs_isSet;
}

bool OAIUpdate_shipment_request_body::is_customs_Valid() const{
    return m_customs_isValid;
}

QString OAIUpdate_shipment_request_body::getExternalOrderId() const {
    return m_external_order_id;
}
void OAIUpdate_shipment_request_body::setExternalOrderId(const QString &external_order_id) {
    m_external_order_id = external_order_id;
    m_external_order_id_isSet = true;
}

bool OAIUpdate_shipment_request_body::is_external_order_id_Set() const{
    return m_external_order_id_isSet;
}

bool OAIUpdate_shipment_request_body::is_external_order_id_Valid() const{
    return m_external_order_id_isValid;
}

QString OAIUpdate_shipment_request_body::getExternalShipmentId() const {
    return m_external_shipment_id;
}
void OAIUpdate_shipment_request_body::setExternalShipmentId(const QString &external_shipment_id) {
    m_external_shipment_id = external_shipment_id;
    m_external_shipment_id_isSet = true;
}

bool OAIUpdate_shipment_request_body::is_external_shipment_id_Set() const{
    return m_external_shipment_id_isSet;
}

bool OAIUpdate_shipment_request_body::is_external_shipment_id_Valid() const{
    return m_external_shipment_id_isValid;
}

OAIInsurance_provider OAIUpdate_shipment_request_body::getInsuranceProvider() const {
    return m_insurance_provider;
}
void OAIUpdate_shipment_request_body::setInsuranceProvider(const OAIInsurance_provider &insurance_provider) {
    m_insurance_provider = insurance_provider;
    m_insurance_provider_isSet = true;
}

bool OAIUpdate_shipment_request_body::is_insurance_provider_Set() const{
    return m_insurance_provider_isSet;
}

bool OAIUpdate_shipment_request_body::is_insurance_provider_Valid() const{
    return m_insurance_provider_isValid;
}

bool OAIUpdate_shipment_request_body::isIsReturn() const {
    return m_is_return;
}
void OAIUpdate_shipment_request_body::setIsReturn(const bool &is_return) {
    m_is_return = is_return;
    m_is_return_isSet = true;
}

bool OAIUpdate_shipment_request_body::is_is_return_Set() const{
    return m_is_return_isSet;
}

bool OAIUpdate_shipment_request_body::is_is_return_Valid() const{
    return m_is_return_isValid;
}

QList<OAIShipment_item> OAIUpdate_shipment_request_body::getItems() const {
    return m_items;
}
void OAIUpdate_shipment_request_body::setItems(const QList<OAIShipment_item> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIUpdate_shipment_request_body::is_items_Set() const{
    return m_items_isSet;
}

bool OAIUpdate_shipment_request_body::is_items_Valid() const{
    return m_items_isValid;
}

QDateTime OAIUpdate_shipment_request_body::getModifiedAt() const {
    return m_modified_at;
}
void OAIUpdate_shipment_request_body::setModifiedAt(const QDateTime &modified_at) {
    m_modified_at = modified_at;
    m_modified_at_isSet = true;
}

bool OAIUpdate_shipment_request_body::is_modified_at_Set() const{
    return m_modified_at_isSet;
}

bool OAIUpdate_shipment_request_body::is_modified_at_Valid() const{
    return m_modified_at_isValid;
}

OAIOrder_source_name OAIUpdate_shipment_request_body::getOrderSourceCode() const {
    return m_order_source_code;
}
void OAIUpdate_shipment_request_body::setOrderSourceCode(const OAIOrder_source_name &order_source_code) {
    m_order_source_code = order_source_code;
    m_order_source_code_isSet = true;
}

bool OAIUpdate_shipment_request_body::is_order_source_code_Set() const{
    return m_order_source_code_isSet;
}

bool OAIUpdate_shipment_request_body::is_order_source_code_Valid() const{
    return m_order_source_code_isValid;
}

OAIOrigin_type OAIUpdate_shipment_request_body::getOriginType() const {
    return m_origin_type;
}
void OAIUpdate_shipment_request_body::setOriginType(const OAIOrigin_type &origin_type) {
    m_origin_type = origin_type;
    m_origin_type_isSet = true;
}

bool OAIUpdate_shipment_request_body::is_origin_type_Set() const{
    return m_origin_type_isSet;
}

bool OAIUpdate_shipment_request_body::is_origin_type_Valid() const{
    return m_origin_type_isValid;
}

QList<OAIPackage> OAIUpdate_shipment_request_body::getPackages() const {
    return m_packages;
}
void OAIUpdate_shipment_request_body::setPackages(const QList<OAIPackage> &packages) {
    m_packages = packages;
    m_packages_isSet = true;
}

bool OAIUpdate_shipment_request_body::is_packages_Set() const{
    return m_packages_isSet;
}

bool OAIUpdate_shipment_request_body::is_packages_Valid() const{
    return m_packages_isValid;
}

OAIShipping_address OAIUpdate_shipment_request_body::getReturnTo() const {
    return m_return_to;
}
void OAIUpdate_shipment_request_body::setReturnTo(const OAIShipping_address &return_to) {
    m_return_to = return_to;
    m_return_to_isSet = true;
}

bool OAIUpdate_shipment_request_body::is_return_to_Set() const{
    return m_return_to_isSet;
}

bool OAIUpdate_shipment_request_body::is_return_to_Valid() const{
    return m_return_to_isValid;
}

QString OAIUpdate_shipment_request_body::getServiceCode() const {
    return m_service_code;
}
void OAIUpdate_shipment_request_body::setServiceCode(const QString &service_code) {
    m_service_code = service_code;
    m_service_code_isSet = true;
}

bool OAIUpdate_shipment_request_body::is_service_code_Set() const{
    return m_service_code_isSet;
}

bool OAIUpdate_shipment_request_body::is_service_code_Valid() const{
    return m_service_code_isValid;
}

QDateTime OAIUpdate_shipment_request_body::getShipDate() const {
    return m_ship_date;
}
void OAIUpdate_shipment_request_body::setShipDate(const QDateTime &ship_date) {
    m_ship_date = ship_date;
    m_ship_date_isSet = true;
}

bool OAIUpdate_shipment_request_body::is_ship_date_Set() const{
    return m_ship_date_isSet;
}

bool OAIUpdate_shipment_request_body::is_ship_date_Valid() const{
    return m_ship_date_isValid;
}

OAIShipping_address OAIUpdate_shipment_request_body::getShipFrom() const {
    return m_ship_from;
}
void OAIUpdate_shipment_request_body::setShipFrom(const OAIShipping_address &ship_from) {
    m_ship_from = ship_from;
    m_ship_from_isSet = true;
}

bool OAIUpdate_shipment_request_body::is_ship_from_Set() const{
    return m_ship_from_isSet;
}

bool OAIUpdate_shipment_request_body::is_ship_from_Valid() const{
    return m_ship_from_isValid;
}

OAIShipping_address OAIUpdate_shipment_request_body::getShipTo() const {
    return m_ship_to;
}
void OAIUpdate_shipment_request_body::setShipTo(const OAIShipping_address &ship_to) {
    m_ship_to = ship_to;
    m_ship_to_isSet = true;
}

bool OAIUpdate_shipment_request_body::is_ship_to_Set() const{
    return m_ship_to_isSet;
}

bool OAIUpdate_shipment_request_body::is_ship_to_Valid() const{
    return m_ship_to_isValid;
}

QString OAIUpdate_shipment_request_body::getShipmentId() const {
    return m_shipment_id;
}
void OAIUpdate_shipment_request_body::setShipmentId(const QString &shipment_id) {
    m_shipment_id = shipment_id;
    m_shipment_id_isSet = true;
}

bool OAIUpdate_shipment_request_body::is_shipment_id_Set() const{
    return m_shipment_id_isSet;
}

bool OAIUpdate_shipment_request_body::is_shipment_id_Valid() const{
    return m_shipment_id_isValid;
}

QString OAIUpdate_shipment_request_body::getShipmentNumber() const {
    return m_shipment_number;
}
void OAIUpdate_shipment_request_body::setShipmentNumber(const QString &shipment_number) {
    m_shipment_number = shipment_number;
    m_shipment_number_isSet = true;
}

bool OAIUpdate_shipment_request_body::is_shipment_number_Set() const{
    return m_shipment_number_isSet;
}

bool OAIUpdate_shipment_request_body::is_shipment_number_Valid() const{
    return m_shipment_number_isValid;
}

OAIShipment_status OAIUpdate_shipment_request_body::getShipmentStatus() const {
    return m_shipment_status;
}
void OAIUpdate_shipment_request_body::setShipmentStatus(const OAIShipment_status &shipment_status) {
    m_shipment_status = shipment_status;
    m_shipment_status_isSet = true;
}

bool OAIUpdate_shipment_request_body::is_shipment_status_Set() const{
    return m_shipment_status_isSet;
}

bool OAIUpdate_shipment_request_body::is_shipment_status_Valid() const{
    return m_shipment_status_isValid;
}

QList<OAITag> OAIUpdate_shipment_request_body::getTags() const {
    return m_tags;
}
void OAIUpdate_shipment_request_body::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIUpdate_shipment_request_body::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIUpdate_shipment_request_body::is_tags_Valid() const{
    return m_tags_isValid;
}

QList<OAITax_identifier> OAIUpdate_shipment_request_body::getTaxIdentifiers() const {
    return m_tax_identifiers;
}
void OAIUpdate_shipment_request_body::setTaxIdentifiers(const QList<OAITax_identifier> &tax_identifiers) {
    m_tax_identifiers = tax_identifiers;
    m_tax_identifiers_isSet = true;
}

bool OAIUpdate_shipment_request_body::is_tax_identifiers_Set() const{
    return m_tax_identifiers_isSet;
}

bool OAIUpdate_shipment_request_body::is_tax_identifiers_Valid() const{
    return m_tax_identifiers_isValid;
}

OAIWeight OAIUpdate_shipment_request_body::getTotalWeight() const {
    return m_total_weight;
}
void OAIUpdate_shipment_request_body::setTotalWeight(const OAIWeight &total_weight) {
    m_total_weight = total_weight;
    m_total_weight_isSet = true;
}

bool OAIUpdate_shipment_request_body::is_total_weight_Set() const{
    return m_total_weight_isSet;
}

bool OAIUpdate_shipment_request_body::is_total_weight_Valid() const{
    return m_total_weight_isValid;
}

QString OAIUpdate_shipment_request_body::getWarehouseId() const {
    return m_warehouse_id;
}
void OAIUpdate_shipment_request_body::setWarehouseId(const QString &warehouse_id) {
    m_warehouse_id = warehouse_id;
    m_warehouse_id_isSet = true;
}

bool OAIUpdate_shipment_request_body::is_warehouse_id_Set() const{
    return m_warehouse_id_isSet;
}

bool OAIUpdate_shipment_request_body::is_warehouse_id_Valid() const{
    return m_warehouse_id_isValid;
}

OAIValidate_address OAIUpdate_shipment_request_body::getValidateAddress() const {
    return m_validate_address;
}
void OAIUpdate_shipment_request_body::setValidateAddress(const OAIValidate_address &validate_address) {
    m_validate_address = validate_address;
    m_validate_address_isSet = true;
}

bool OAIUpdate_shipment_request_body::is_validate_address_Set() const{
    return m_validate_address_isSet;
}

bool OAIUpdate_shipment_request_body::is_validate_address_Valid() const{
    return m_validate_address_isValid;
}

bool OAIUpdate_shipment_request_body::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advanced_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_shipment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insurance_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_return_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_source_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_packages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_to.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_from.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_to.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipment_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipment_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_identifiers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_weight.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_address.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdate_shipment_request_body::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ship_from_isValid && m_ship_to_isValid && true;
}

} // namespace OpenAPI
