/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICarrierAccountsApi_H
#define OAI_OAICarrierAccountsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICarrier_name.h"
#include "OAICarrier_name_with_settings.h"
#include "OAIConnect_carrier_request_body.h"
#include "OAIConnect_carrier_response_body.h"
#include "OAIError_response_body.h"
#include "OAIGet_carrier_settings_response_body.h"
#include "OAIUpdate_carrier_settings_request_body.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICarrierAccountsApi : public QObject {
    Q_OBJECT

public:
    OAICarrierAccountsApi(const int timeOut = 0);
    ~OAICarrierAccountsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  carrier_name OAICarrier_name [required]
    * @param[in]  oai_connect_carrier_request_body OAIConnect_carrier_request_body [required]
    */
    virtual void connectCarrier(const OAICarrier_name &carrier_name, const OAIConnect_carrier_request_body &oai_connect_carrier_request_body);

    /**
    * @param[in]  carrier_name OAICarrier_name [required]
    * @param[in]  carrier_id QString [required]
    */
    virtual void disconnectCarrier(const OAICarrier_name &carrier_name, const QString &carrier_id);

    /**
    * @param[in]  carrier_name OAICarrier_name_with_settings [required]
    * @param[in]  carrier_id QString [required]
    */
    virtual void getCarrierSettings(const OAICarrier_name_with_settings &carrier_name, const QString &carrier_id);

    /**
    * @param[in]  carrier_name OAICarrier_name_with_settings [required]
    * @param[in]  carrier_id QString [required]
    * @param[in]  oai_update_carrier_settings_request_body OAIUpdate_carrier_settings_request_body [required]
    */
    virtual void updateCarrierSettings(const OAICarrier_name_with_settings &carrier_name, const QString &carrier_id, const OAIUpdate_carrier_settings_request_body &oai_update_carrier_settings_request_body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void connectCarrierCallback(OAIHttpRequestWorker *worker);
    void disconnectCarrierCallback(OAIHttpRequestWorker *worker);
    void getCarrierSettingsCallback(OAIHttpRequestWorker *worker);
    void updateCarrierSettingsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void connectCarrierSignal(OAIConnect_carrier_response_body summary);
    void disconnectCarrierSignal(QString summary);
    void getCarrierSettingsSignal(OAIGet_carrier_settings_response_body summary);
    void updateCarrierSettingsSignal(QString summary);


    void connectCarrierSignalFull(OAIHttpRequestWorker *worker, OAIConnect_carrier_response_body summary);
    void disconnectCarrierSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getCarrierSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGet_carrier_settings_response_body summary);
    void updateCarrierSettingsSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use connectCarrierSignalError() instead")
    void connectCarrierSignalE(OAIConnect_carrier_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectCarrierSignalError(OAIConnect_carrier_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disconnectCarrierSignalError() instead")
    void disconnectCarrierSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disconnectCarrierSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCarrierSettingsSignalError() instead")
    void getCarrierSettingsSignalE(OAIGet_carrier_settings_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCarrierSettingsSignalError(OAIGet_carrier_settings_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCarrierSettingsSignalError() instead")
    void updateCarrierSettingsSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCarrierSettingsSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use connectCarrierSignalErrorFull() instead")
    void connectCarrierSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectCarrierSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disconnectCarrierSignalErrorFull() instead")
    void disconnectCarrierSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disconnectCarrierSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCarrierSettingsSignalErrorFull() instead")
    void getCarrierSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCarrierSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCarrierSettingsSignalErrorFull() instead")
    void updateCarrierSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCarrierSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
