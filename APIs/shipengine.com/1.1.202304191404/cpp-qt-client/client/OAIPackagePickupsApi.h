/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPackagePickupsApi_H
#define OAI_OAIPackagePickupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDelete_pickup_by_id_response_body.h"
#include "OAIError_response_body.h"
#include "OAIGet_pickup_by_id_response_body.h"
#include "OAIGet_pickups_response_body.h"
#include "OAISchedule_pickup_request_body.h"
#include "OAISchedule_pickup_response_body.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPackagePickupsApi : public QObject {
    Q_OBJECT

public:
    OAIPackagePickupsApi(const int timeOut = 0);
    ~OAIPackagePickupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  pickup_id QString [required]
    */
    virtual void deleteScheduledPickup(const QString &pickup_id);

    /**
    * @param[in]  pickup_id QString [required]
    */
    virtual void getPickupById(const QString &pickup_id);

    /**
    * @param[in]  carrier_id QString [optional]
    * @param[in]  warehouse_id QString [optional]
    * @param[in]  created_at_start QDateTime [optional]
    * @param[in]  created_at_end QDateTime [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void listScheduledPickups(const ::OpenAPI::OptionalParam<QString> &carrier_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &warehouse_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_start = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_schedule_pickup_request_body OAISchedule_pickup_request_body [required]
    */
    virtual void schedulePickup(const OAISchedule_pickup_request_body &oai_schedule_pickup_request_body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteScheduledPickupCallback(OAIHttpRequestWorker *worker);
    void getPickupByIdCallback(OAIHttpRequestWorker *worker);
    void listScheduledPickupsCallback(OAIHttpRequestWorker *worker);
    void schedulePickupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteScheduledPickupSignal(OAIDelete_pickup_by_id_response_body summary);
    void getPickupByIdSignal(OAIGet_pickup_by_id_response_body summary);
    void listScheduledPickupsSignal(OAIGet_pickups_response_body summary);
    void schedulePickupSignal(OAISchedule_pickup_response_body summary);


    void deleteScheduledPickupSignalFull(OAIHttpRequestWorker *worker, OAIDelete_pickup_by_id_response_body summary);
    void getPickupByIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_pickup_by_id_response_body summary);
    void listScheduledPickupsSignalFull(OAIHttpRequestWorker *worker, OAIGet_pickups_response_body summary);
    void schedulePickupSignalFull(OAIHttpRequestWorker *worker, OAISchedule_pickup_response_body summary);

    Q_DECL_DEPRECATED_X("Use deleteScheduledPickupSignalError() instead")
    void deleteScheduledPickupSignalE(OAIDelete_pickup_by_id_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScheduledPickupSignalError(OAIDelete_pickup_by_id_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPickupByIdSignalError() instead")
    void getPickupByIdSignalE(OAIGet_pickup_by_id_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPickupByIdSignalError(OAIGet_pickup_by_id_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listScheduledPickupsSignalError() instead")
    void listScheduledPickupsSignalE(OAIGet_pickups_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listScheduledPickupsSignalError(OAIGet_pickups_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulePickupSignalError() instead")
    void schedulePickupSignalE(OAISchedule_pickup_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulePickupSignalError(OAISchedule_pickup_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteScheduledPickupSignalErrorFull() instead")
    void deleteScheduledPickupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScheduledPickupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPickupByIdSignalErrorFull() instead")
    void getPickupByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPickupByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listScheduledPickupsSignalErrorFull() instead")
    void listScheduledPickupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listScheduledPickupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use schedulePickupSignalErrorFull() instead")
    void schedulePickupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void schedulePickupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
