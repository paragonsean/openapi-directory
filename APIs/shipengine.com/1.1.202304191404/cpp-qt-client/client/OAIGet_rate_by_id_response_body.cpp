/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_rate_by_id_response_body.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_rate_by_id_response_body::OAIGet_rate_by_id_response_body(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_rate_by_id_response_body::OAIGet_rate_by_id_response_body() {
    this->initializeModel();
}

OAIGet_rate_by_id_response_body::~OAIGet_rate_by_id_response_body() {}

void OAIGet_rate_by_id_response_body::initializeModel() {

    m_carrier_code_isSet = false;
    m_carrier_code_isValid = false;

    m_carrier_delivery_days_isSet = false;
    m_carrier_delivery_days_isValid = false;

    m_carrier_friendly_name_isSet = false;
    m_carrier_friendly_name_isValid = false;

    m_carrier_id_isSet = false;
    m_carrier_id_isValid = false;

    m_carrier_nickname_isSet = false;
    m_carrier_nickname_isValid = false;

    m_confirmation_amount_isSet = false;
    m_confirmation_amount_isValid = false;

    m_delivery_days_isSet = false;
    m_delivery_days_isValid = false;

    m_error_messages_isSet = false;
    m_error_messages_isValid = false;

    m_estimated_delivery_date_isSet = false;
    m_estimated_delivery_date_isValid = false;

    m_guaranteed_service_isSet = false;
    m_guaranteed_service_isValid = false;

    m_insurance_amount_isSet = false;
    m_insurance_amount_isValid = false;

    m_negotiated_rate_isSet = false;
    m_negotiated_rate_isValid = false;

    m_other_amount_isSet = false;
    m_other_amount_isValid = false;

    m_package_type_isSet = false;
    m_package_type_isValid = false;

    m_rate_id_isSet = false;
    m_rate_id_isValid = false;

    m_rate_type_isSet = false;
    m_rate_type_isValid = false;

    m_service_code_isSet = false;
    m_service_code_isValid = false;

    m_service_type_isSet = false;
    m_service_type_isValid = false;

    m_ship_date_isSet = false;
    m_ship_date_isValid = false;

    m_shipping_amount_isSet = false;
    m_shipping_amount_isValid = false;

    m_tax_amount_isSet = false;
    m_tax_amount_isValid = false;

    m_trackable_isSet = false;
    m_trackable_isValid = false;

    m_validation_status_isSet = false;
    m_validation_status_isValid = false;

    m_warning_messages_isSet = false;
    m_warning_messages_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAIGet_rate_by_id_response_body::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_rate_by_id_response_body::fromJsonObject(QJsonObject json) {

    m_carrier_code_isValid = ::OpenAPI::fromJsonValue(m_carrier_code, json[QString("carrier_code")]);
    m_carrier_code_isSet = !json[QString("carrier_code")].isNull() && m_carrier_code_isValid;

    m_carrier_delivery_days_isValid = ::OpenAPI::fromJsonValue(m_carrier_delivery_days, json[QString("carrier_delivery_days")]);
    m_carrier_delivery_days_isSet = !json[QString("carrier_delivery_days")].isNull() && m_carrier_delivery_days_isValid;

    m_carrier_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_carrier_friendly_name, json[QString("carrier_friendly_name")]);
    m_carrier_friendly_name_isSet = !json[QString("carrier_friendly_name")].isNull() && m_carrier_friendly_name_isValid;

    m_carrier_id_isValid = ::OpenAPI::fromJsonValue(m_carrier_id, json[QString("carrier_id")]);
    m_carrier_id_isSet = !json[QString("carrier_id")].isNull() && m_carrier_id_isValid;

    m_carrier_nickname_isValid = ::OpenAPI::fromJsonValue(m_carrier_nickname, json[QString("carrier_nickname")]);
    m_carrier_nickname_isSet = !json[QString("carrier_nickname")].isNull() && m_carrier_nickname_isValid;

    m_confirmation_amount_isValid = ::OpenAPI::fromJsonValue(m_confirmation_amount, json[QString("confirmation_amount")]);
    m_confirmation_amount_isSet = !json[QString("confirmation_amount")].isNull() && m_confirmation_amount_isValid;

    m_delivery_days_isValid = ::OpenAPI::fromJsonValue(m_delivery_days, json[QString("delivery_days")]);
    m_delivery_days_isSet = !json[QString("delivery_days")].isNull() && m_delivery_days_isValid;

    m_error_messages_isValid = ::OpenAPI::fromJsonValue(m_error_messages, json[QString("error_messages")]);
    m_error_messages_isSet = !json[QString("error_messages")].isNull() && m_error_messages_isValid;

    m_estimated_delivery_date_isValid = ::OpenAPI::fromJsonValue(m_estimated_delivery_date, json[QString("estimated_delivery_date")]);
    m_estimated_delivery_date_isSet = !json[QString("estimated_delivery_date")].isNull() && m_estimated_delivery_date_isValid;

    m_guaranteed_service_isValid = ::OpenAPI::fromJsonValue(m_guaranteed_service, json[QString("guaranteed_service")]);
    m_guaranteed_service_isSet = !json[QString("guaranteed_service")].isNull() && m_guaranteed_service_isValid;

    m_insurance_amount_isValid = ::OpenAPI::fromJsonValue(m_insurance_amount, json[QString("insurance_amount")]);
    m_insurance_amount_isSet = !json[QString("insurance_amount")].isNull() && m_insurance_amount_isValid;

    m_negotiated_rate_isValid = ::OpenAPI::fromJsonValue(m_negotiated_rate, json[QString("negotiated_rate")]);
    m_negotiated_rate_isSet = !json[QString("negotiated_rate")].isNull() && m_negotiated_rate_isValid;

    m_other_amount_isValid = ::OpenAPI::fromJsonValue(m_other_amount, json[QString("other_amount")]);
    m_other_amount_isSet = !json[QString("other_amount")].isNull() && m_other_amount_isValid;

    m_package_type_isValid = ::OpenAPI::fromJsonValue(m_package_type, json[QString("package_type")]);
    m_package_type_isSet = !json[QString("package_type")].isNull() && m_package_type_isValid;

    m_rate_id_isValid = ::OpenAPI::fromJsonValue(m_rate_id, json[QString("rate_id")]);
    m_rate_id_isSet = !json[QString("rate_id")].isNull() && m_rate_id_isValid;

    m_rate_type_isValid = ::OpenAPI::fromJsonValue(m_rate_type, json[QString("rate_type")]);
    m_rate_type_isSet = !json[QString("rate_type")].isNull() && m_rate_type_isValid;

    m_service_code_isValid = ::OpenAPI::fromJsonValue(m_service_code, json[QString("service_code")]);
    m_service_code_isSet = !json[QString("service_code")].isNull() && m_service_code_isValid;

    m_service_type_isValid = ::OpenAPI::fromJsonValue(m_service_type, json[QString("service_type")]);
    m_service_type_isSet = !json[QString("service_type")].isNull() && m_service_type_isValid;

    m_ship_date_isValid = ::OpenAPI::fromJsonValue(m_ship_date, json[QString("ship_date")]);
    m_ship_date_isSet = !json[QString("ship_date")].isNull() && m_ship_date_isValid;

    m_shipping_amount_isValid = ::OpenAPI::fromJsonValue(m_shipping_amount, json[QString("shipping_amount")]);
    m_shipping_amount_isSet = !json[QString("shipping_amount")].isNull() && m_shipping_amount_isValid;

    m_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_tax_amount, json[QString("tax_amount")]);
    m_tax_amount_isSet = !json[QString("tax_amount")].isNull() && m_tax_amount_isValid;

    m_trackable_isValid = ::OpenAPI::fromJsonValue(m_trackable, json[QString("trackable")]);
    m_trackable_isSet = !json[QString("trackable")].isNull() && m_trackable_isValid;

    m_validation_status_isValid = ::OpenAPI::fromJsonValue(m_validation_status, json[QString("validation_status")]);
    m_validation_status_isSet = !json[QString("validation_status")].isNull() && m_validation_status_isValid;

    m_warning_messages_isValid = ::OpenAPI::fromJsonValue(m_warning_messages, json[QString("warning_messages")]);
    m_warning_messages_isSet = !json[QString("warning_messages")].isNull() && m_warning_messages_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAIGet_rate_by_id_response_body::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_rate_by_id_response_body::asJsonObject() const {
    QJsonObject obj;
    if (m_carrier_code_isSet) {
        obj.insert(QString("carrier_code"), ::OpenAPI::toJsonValue(m_carrier_code));
    }
    if (m_carrier_delivery_days_isSet) {
        obj.insert(QString("carrier_delivery_days"), ::OpenAPI::toJsonValue(m_carrier_delivery_days));
    }
    if (m_carrier_friendly_name_isSet) {
        obj.insert(QString("carrier_friendly_name"), ::OpenAPI::toJsonValue(m_carrier_friendly_name));
    }
    if (m_carrier_id_isSet) {
        obj.insert(QString("carrier_id"), ::OpenAPI::toJsonValue(m_carrier_id));
    }
    if (m_carrier_nickname_isSet) {
        obj.insert(QString("carrier_nickname"), ::OpenAPI::toJsonValue(m_carrier_nickname));
    }
    if (m_confirmation_amount.isSet()) {
        obj.insert(QString("confirmation_amount"), ::OpenAPI::toJsonValue(m_confirmation_amount));
    }
    if (m_delivery_days_isSet) {
        obj.insert(QString("delivery_days"), ::OpenAPI::toJsonValue(m_delivery_days));
    }
    if (m_error_messages.size() > 0) {
        obj.insert(QString("error_messages"), ::OpenAPI::toJsonValue(m_error_messages));
    }
    if (m_estimated_delivery_date_isSet) {
        obj.insert(QString("estimated_delivery_date"), ::OpenAPI::toJsonValue(m_estimated_delivery_date));
    }
    if (m_guaranteed_service_isSet) {
        obj.insert(QString("guaranteed_service"), ::OpenAPI::toJsonValue(m_guaranteed_service));
    }
    if (m_insurance_amount.isSet()) {
        obj.insert(QString("insurance_amount"), ::OpenAPI::toJsonValue(m_insurance_amount));
    }
    if (m_negotiated_rate_isSet) {
        obj.insert(QString("negotiated_rate"), ::OpenAPI::toJsonValue(m_negotiated_rate));
    }
    if (m_other_amount.isSet()) {
        obj.insert(QString("other_amount"), ::OpenAPI::toJsonValue(m_other_amount));
    }
    if (m_package_type_isSet) {
        obj.insert(QString("package_type"), ::OpenAPI::toJsonValue(m_package_type));
    }
    if (m_rate_id_isSet) {
        obj.insert(QString("rate_id"), ::OpenAPI::toJsonValue(m_rate_id));
    }
    if (m_rate_type.isSet()) {
        obj.insert(QString("rate_type"), ::OpenAPI::toJsonValue(m_rate_type));
    }
    if (m_service_code_isSet) {
        obj.insert(QString("service_code"), ::OpenAPI::toJsonValue(m_service_code));
    }
    if (m_service_type_isSet) {
        obj.insert(QString("service_type"), ::OpenAPI::toJsonValue(m_service_type));
    }
    if (m_ship_date_isSet) {
        obj.insert(QString("ship_date"), ::OpenAPI::toJsonValue(m_ship_date));
    }
    if (m_shipping_amount.isSet()) {
        obj.insert(QString("shipping_amount"), ::OpenAPI::toJsonValue(m_shipping_amount));
    }
    if (m_tax_amount.isSet()) {
        obj.insert(QString("tax_amount"), ::OpenAPI::toJsonValue(m_tax_amount));
    }
    if (m_trackable_isSet) {
        obj.insert(QString("trackable"), ::OpenAPI::toJsonValue(m_trackable));
    }
    if (m_validation_status.isSet()) {
        obj.insert(QString("validation_status"), ::OpenAPI::toJsonValue(m_validation_status));
    }
    if (m_warning_messages.size() > 0) {
        obj.insert(QString("warning_messages"), ::OpenAPI::toJsonValue(m_warning_messages));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

QString OAIGet_rate_by_id_response_body::getCarrierCode() const {
    return m_carrier_code;
}
void OAIGet_rate_by_id_response_body::setCarrierCode(const QString &carrier_code) {
    m_carrier_code = carrier_code;
    m_carrier_code_isSet = true;
}

bool OAIGet_rate_by_id_response_body::is_carrier_code_Set() const{
    return m_carrier_code_isSet;
}

bool OAIGet_rate_by_id_response_body::is_carrier_code_Valid() const{
    return m_carrier_code_isValid;
}

QString OAIGet_rate_by_id_response_body::getCarrierDeliveryDays() const {
    return m_carrier_delivery_days;
}
void OAIGet_rate_by_id_response_body::setCarrierDeliveryDays(const QString &carrier_delivery_days) {
    m_carrier_delivery_days = carrier_delivery_days;
    m_carrier_delivery_days_isSet = true;
}

bool OAIGet_rate_by_id_response_body::is_carrier_delivery_days_Set() const{
    return m_carrier_delivery_days_isSet;
}

bool OAIGet_rate_by_id_response_body::is_carrier_delivery_days_Valid() const{
    return m_carrier_delivery_days_isValid;
}

QString OAIGet_rate_by_id_response_body::getCarrierFriendlyName() const {
    return m_carrier_friendly_name;
}
void OAIGet_rate_by_id_response_body::setCarrierFriendlyName(const QString &carrier_friendly_name) {
    m_carrier_friendly_name = carrier_friendly_name;
    m_carrier_friendly_name_isSet = true;
}

bool OAIGet_rate_by_id_response_body::is_carrier_friendly_name_Set() const{
    return m_carrier_friendly_name_isSet;
}

bool OAIGet_rate_by_id_response_body::is_carrier_friendly_name_Valid() const{
    return m_carrier_friendly_name_isValid;
}

QString OAIGet_rate_by_id_response_body::getCarrierId() const {
    return m_carrier_id;
}
void OAIGet_rate_by_id_response_body::setCarrierId(const QString &carrier_id) {
    m_carrier_id = carrier_id;
    m_carrier_id_isSet = true;
}

bool OAIGet_rate_by_id_response_body::is_carrier_id_Set() const{
    return m_carrier_id_isSet;
}

bool OAIGet_rate_by_id_response_body::is_carrier_id_Valid() const{
    return m_carrier_id_isValid;
}

QString OAIGet_rate_by_id_response_body::getCarrierNickname() const {
    return m_carrier_nickname;
}
void OAIGet_rate_by_id_response_body::setCarrierNickname(const QString &carrier_nickname) {
    m_carrier_nickname = carrier_nickname;
    m_carrier_nickname_isSet = true;
}

bool OAIGet_rate_by_id_response_body::is_carrier_nickname_Set() const{
    return m_carrier_nickname_isSet;
}

bool OAIGet_rate_by_id_response_body::is_carrier_nickname_Valid() const{
    return m_carrier_nickname_isValid;
}

OAIMonetary_value OAIGet_rate_by_id_response_body::getConfirmationAmount() const {
    return m_confirmation_amount;
}
void OAIGet_rate_by_id_response_body::setConfirmationAmount(const OAIMonetary_value &confirmation_amount) {
    m_confirmation_amount = confirmation_amount;
    m_confirmation_amount_isSet = true;
}

bool OAIGet_rate_by_id_response_body::is_confirmation_amount_Set() const{
    return m_confirmation_amount_isSet;
}

bool OAIGet_rate_by_id_response_body::is_confirmation_amount_Valid() const{
    return m_confirmation_amount_isValid;
}

qint32 OAIGet_rate_by_id_response_body::getDeliveryDays() const {
    return m_delivery_days;
}
void OAIGet_rate_by_id_response_body::setDeliveryDays(const qint32 &delivery_days) {
    m_delivery_days = delivery_days;
    m_delivery_days_isSet = true;
}

bool OAIGet_rate_by_id_response_body::is_delivery_days_Set() const{
    return m_delivery_days_isSet;
}

bool OAIGet_rate_by_id_response_body::is_delivery_days_Valid() const{
    return m_delivery_days_isValid;
}

QList<QString> OAIGet_rate_by_id_response_body::getErrorMessages() const {
    return m_error_messages;
}
void OAIGet_rate_by_id_response_body::setErrorMessages(const QList<QString> &error_messages) {
    m_error_messages = error_messages;
    m_error_messages_isSet = true;
}

bool OAIGet_rate_by_id_response_body::is_error_messages_Set() const{
    return m_error_messages_isSet;
}

bool OAIGet_rate_by_id_response_body::is_error_messages_Valid() const{
    return m_error_messages_isValid;
}

QDateTime OAIGet_rate_by_id_response_body::getEstimatedDeliveryDate() const {
    return m_estimated_delivery_date;
}
void OAIGet_rate_by_id_response_body::setEstimatedDeliveryDate(const QDateTime &estimated_delivery_date) {
    m_estimated_delivery_date = estimated_delivery_date;
    m_estimated_delivery_date_isSet = true;
}

bool OAIGet_rate_by_id_response_body::is_estimated_delivery_date_Set() const{
    return m_estimated_delivery_date_isSet;
}

bool OAIGet_rate_by_id_response_body::is_estimated_delivery_date_Valid() const{
    return m_estimated_delivery_date_isValid;
}

bool OAIGet_rate_by_id_response_body::isGuaranteedService() const {
    return m_guaranteed_service;
}
void OAIGet_rate_by_id_response_body::setGuaranteedService(const bool &guaranteed_service) {
    m_guaranteed_service = guaranteed_service;
    m_guaranteed_service_isSet = true;
}

bool OAIGet_rate_by_id_response_body::is_guaranteed_service_Set() const{
    return m_guaranteed_service_isSet;
}

bool OAIGet_rate_by_id_response_body::is_guaranteed_service_Valid() const{
    return m_guaranteed_service_isValid;
}

OAIMonetary_value OAIGet_rate_by_id_response_body::getInsuranceAmount() const {
    return m_insurance_amount;
}
void OAIGet_rate_by_id_response_body::setInsuranceAmount(const OAIMonetary_value &insurance_amount) {
    m_insurance_amount = insurance_amount;
    m_insurance_amount_isSet = true;
}

bool OAIGet_rate_by_id_response_body::is_insurance_amount_Set() const{
    return m_insurance_amount_isSet;
}

bool OAIGet_rate_by_id_response_body::is_insurance_amount_Valid() const{
    return m_insurance_amount_isValid;
}

bool OAIGet_rate_by_id_response_body::isNegotiatedRate() const {
    return m_negotiated_rate;
}
void OAIGet_rate_by_id_response_body::setNegotiatedRate(const bool &negotiated_rate) {
    m_negotiated_rate = negotiated_rate;
    m_negotiated_rate_isSet = true;
}

bool OAIGet_rate_by_id_response_body::is_negotiated_rate_Set() const{
    return m_negotiated_rate_isSet;
}

bool OAIGet_rate_by_id_response_body::is_negotiated_rate_Valid() const{
    return m_negotiated_rate_isValid;
}

OAIMonetary_value OAIGet_rate_by_id_response_body::getOtherAmount() const {
    return m_other_amount;
}
void OAIGet_rate_by_id_response_body::setOtherAmount(const OAIMonetary_value &other_amount) {
    m_other_amount = other_amount;
    m_other_amount_isSet = true;
}

bool OAIGet_rate_by_id_response_body::is_other_amount_Set() const{
    return m_other_amount_isSet;
}

bool OAIGet_rate_by_id_response_body::is_other_amount_Valid() const{
    return m_other_amount_isValid;
}

QString OAIGet_rate_by_id_response_body::getPackageType() const {
    return m_package_type;
}
void OAIGet_rate_by_id_response_body::setPackageType(const QString &package_type) {
    m_package_type = package_type;
    m_package_type_isSet = true;
}

bool OAIGet_rate_by_id_response_body::is_package_type_Set() const{
    return m_package_type_isSet;
}

bool OAIGet_rate_by_id_response_body::is_package_type_Valid() const{
    return m_package_type_isValid;
}

QString OAIGet_rate_by_id_response_body::getRateId() const {
    return m_rate_id;
}
void OAIGet_rate_by_id_response_body::setRateId(const QString &rate_id) {
    m_rate_id = rate_id;
    m_rate_id_isSet = true;
}

bool OAIGet_rate_by_id_response_body::is_rate_id_Set() const{
    return m_rate_id_isSet;
}

bool OAIGet_rate_by_id_response_body::is_rate_id_Valid() const{
    return m_rate_id_isValid;
}

OAIRate_type OAIGet_rate_by_id_response_body::getRateType() const {
    return m_rate_type;
}
void OAIGet_rate_by_id_response_body::setRateType(const OAIRate_type &rate_type) {
    m_rate_type = rate_type;
    m_rate_type_isSet = true;
}

bool OAIGet_rate_by_id_response_body::is_rate_type_Set() const{
    return m_rate_type_isSet;
}

bool OAIGet_rate_by_id_response_body::is_rate_type_Valid() const{
    return m_rate_type_isValid;
}

QString OAIGet_rate_by_id_response_body::getServiceCode() const {
    return m_service_code;
}
void OAIGet_rate_by_id_response_body::setServiceCode(const QString &service_code) {
    m_service_code = service_code;
    m_service_code_isSet = true;
}

bool OAIGet_rate_by_id_response_body::is_service_code_Set() const{
    return m_service_code_isSet;
}

bool OAIGet_rate_by_id_response_body::is_service_code_Valid() const{
    return m_service_code_isValid;
}

QString OAIGet_rate_by_id_response_body::getServiceType() const {
    return m_service_type;
}
void OAIGet_rate_by_id_response_body::setServiceType(const QString &service_type) {
    m_service_type = service_type;
    m_service_type_isSet = true;
}

bool OAIGet_rate_by_id_response_body::is_service_type_Set() const{
    return m_service_type_isSet;
}

bool OAIGet_rate_by_id_response_body::is_service_type_Valid() const{
    return m_service_type_isValid;
}

QDateTime OAIGet_rate_by_id_response_body::getShipDate() const {
    return m_ship_date;
}
void OAIGet_rate_by_id_response_body::setShipDate(const QDateTime &ship_date) {
    m_ship_date = ship_date;
    m_ship_date_isSet = true;
}

bool OAIGet_rate_by_id_response_body::is_ship_date_Set() const{
    return m_ship_date_isSet;
}

bool OAIGet_rate_by_id_response_body::is_ship_date_Valid() const{
    return m_ship_date_isValid;
}

OAIMonetary_value OAIGet_rate_by_id_response_body::getShippingAmount() const {
    return m_shipping_amount;
}
void OAIGet_rate_by_id_response_body::setShippingAmount(const OAIMonetary_value &shipping_amount) {
    m_shipping_amount = shipping_amount;
    m_shipping_amount_isSet = true;
}

bool OAIGet_rate_by_id_response_body::is_shipping_amount_Set() const{
    return m_shipping_amount_isSet;
}

bool OAIGet_rate_by_id_response_body::is_shipping_amount_Valid() const{
    return m_shipping_amount_isValid;
}

OAIMonetary_value OAIGet_rate_by_id_response_body::getTaxAmount() const {
    return m_tax_amount;
}
void OAIGet_rate_by_id_response_body::setTaxAmount(const OAIMonetary_value &tax_amount) {
    m_tax_amount = tax_amount;
    m_tax_amount_isSet = true;
}

bool OAIGet_rate_by_id_response_body::is_tax_amount_Set() const{
    return m_tax_amount_isSet;
}

bool OAIGet_rate_by_id_response_body::is_tax_amount_Valid() const{
    return m_tax_amount_isValid;
}

bool OAIGet_rate_by_id_response_body::isTrackable() const {
    return m_trackable;
}
void OAIGet_rate_by_id_response_body::setTrackable(const bool &trackable) {
    m_trackable = trackable;
    m_trackable_isSet = true;
}

bool OAIGet_rate_by_id_response_body::is_trackable_Set() const{
    return m_trackable_isSet;
}

bool OAIGet_rate_by_id_response_body::is_trackable_Valid() const{
    return m_trackable_isValid;
}

OAIValidation_status OAIGet_rate_by_id_response_body::getValidationStatus() const {
    return m_validation_status;
}
void OAIGet_rate_by_id_response_body::setValidationStatus(const OAIValidation_status &validation_status) {
    m_validation_status = validation_status;
    m_validation_status_isSet = true;
}

bool OAIGet_rate_by_id_response_body::is_validation_status_Set() const{
    return m_validation_status_isSet;
}

bool OAIGet_rate_by_id_response_body::is_validation_status_Valid() const{
    return m_validation_status_isValid;
}

QList<QString> OAIGet_rate_by_id_response_body::getWarningMessages() const {
    return m_warning_messages;
}
void OAIGet_rate_by_id_response_body::setWarningMessages(const QList<QString> &warning_messages) {
    m_warning_messages = warning_messages;
    m_warning_messages_isSet = true;
}

bool OAIGet_rate_by_id_response_body::is_warning_messages_Set() const{
    return m_warning_messages_isSet;
}

bool OAIGet_rate_by_id_response_body::is_warning_messages_Valid() const{
    return m_warning_messages_isValid;
}

qint32 OAIGet_rate_by_id_response_body::getZone() const {
    return m_zone;
}
void OAIGet_rate_by_id_response_body::setZone(const qint32 &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAIGet_rate_by_id_response_body::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAIGet_rate_by_id_response_body::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAIGet_rate_by_id_response_body::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_carrier_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_delivery_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmation_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_delivery_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guaranteed_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insurance_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_negotiated_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trackable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_rate_by_id_response_body::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_carrier_code_isValid && m_carrier_friendly_name_isValid && m_carrier_id_isValid && m_carrier_nickname_isValid && m_confirmation_amount_isValid && m_error_messages_isValid && m_guaranteed_service_isValid && m_insurance_amount_isValid && m_negotiated_rate_isValid && m_other_amount_isValid && m_package_type_isValid && m_rate_id_isValid && m_rate_type_isValid && m_service_code_isValid && m_service_type_isValid && m_shipping_amount_isValid && m_trackable_isValid && m_validation_status_isValid && m_warning_messages_isValid && m_zone_isValid && true;
}

} // namespace OpenAPI
