/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIShipmentsApi_H
#define OAI_OAIShipmentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreate_shipments_request_body.h"
#include "OAICreate_shipments_response_body.h"
#include "OAIError_response_body.h"
#include "OAIGet_shipment_by_external_id_response_body.h"
#include "OAIGet_shipment_by_id_response_body.h"
#include "OAIList_shipment_rates_response_body.h"
#include "OAIList_shipments_response_body.h"
#include "OAIParse_shipment_request_body.h"
#include "OAIParse_shipment_response_body.h"
#include "OAIShipment_status.h"
#include "OAIShipments_sort_by.h"
#include "OAISort_dir.h"
#include "OAITag_shipment_response_body.h"
#include "OAIUpdate_shipment_request_body.h"
#include "OAIUpdate_shipment_response_body.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIShipmentsApi : public QObject {
    Q_OBJECT

public:
    OAIShipmentsApi(const int timeOut = 0);
    ~OAIShipmentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  shipment_id QString [required]
    */
    virtual void cancelShipments(const QString &shipment_id);

    /**
    * @param[in]  oai_create_shipments_request_body OAICreate_shipments_request_body [required]
    */
    virtual void createShipments(const OAICreate_shipments_request_body &oai_create_shipments_request_body);

    /**
    * @param[in]  external_shipment_id QString [required]
    */
    virtual void getShipmentByExternalId(const QString &external_shipment_id);

    /**
    * @param[in]  shipment_id QString [required]
    */
    virtual void getShipmentById(const QString &shipment_id);

    /**
    * @param[in]  shipment_id QString [required]
    * @param[in]  created_at_start QDateTime [optional]
    */
    virtual void listShipmentRates(const QString &shipment_id, const ::OpenAPI::OptionalParam<QDateTime> &created_at_start = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  shipment_status OAIShipment_status [optional]
    * @param[in]  batch_id QString [optional]
    * @param[in]  tag QString [optional]
    * @param[in]  created_at_start QDateTime [optional]
    * @param[in]  created_at_end QDateTime [optional]
    * @param[in]  modified_at_start QDateTime [optional]
    * @param[in]  modified_at_end QDateTime [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  sales_order_id QString [optional]
    * @param[in]  sort_dir OAISort_dir [optional]
    * @param[in]  sort_by OAIShipments_sort_by [optional]
    */
    virtual void listShipments(const ::OpenAPI::OptionalParam<OAIShipment_status> &shipment_status = ::OpenAPI::OptionalParam<OAIShipment_status>(), const ::OpenAPI::OptionalParam<QString> &batch_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_start = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &modified_at_start = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &modified_at_end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sales_order_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISort_dir> &sort_dir = ::OpenAPI::OptionalParam<OAISort_dir>(), const ::OpenAPI::OptionalParam<OAIShipments_sort_by> &sort_by = ::OpenAPI::OptionalParam<OAIShipments_sort_by>());

    /**
    * @param[in]  oai_parse_shipment_request_body OAIParse_shipment_request_body [required]
    */
    virtual void parseShipment(const OAIParse_shipment_request_body &oai_parse_shipment_request_body);

    /**
    * @param[in]  shipment_id QString [required]
    * @param[in]  tag_name QString [required]
    */
    virtual void tagShipment(const QString &shipment_id, const QString &tag_name);

    /**
    * @param[in]  shipment_id QString [required]
    * @param[in]  tag_name QString [required]
    */
    virtual void untagShipment(const QString &shipment_id, const QString &tag_name);

    /**
    * @param[in]  shipment_id QString [required]
    * @param[in]  oai_update_shipment_request_body OAIUpdate_shipment_request_body [required]
    */
    virtual void updateShipment(const QString &shipment_id, const OAIUpdate_shipment_request_body &oai_update_shipment_request_body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelShipmentsCallback(OAIHttpRequestWorker *worker);
    void createShipmentsCallback(OAIHttpRequestWorker *worker);
    void getShipmentByExternalIdCallback(OAIHttpRequestWorker *worker);
    void getShipmentByIdCallback(OAIHttpRequestWorker *worker);
    void listShipmentRatesCallback(OAIHttpRequestWorker *worker);
    void listShipmentsCallback(OAIHttpRequestWorker *worker);
    void parseShipmentCallback(OAIHttpRequestWorker *worker);
    void tagShipmentCallback(OAIHttpRequestWorker *worker);
    void untagShipmentCallback(OAIHttpRequestWorker *worker);
    void updateShipmentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelShipmentsSignal(QString summary);
    void createShipmentsSignal(OAICreate_shipments_response_body summary);
    void getShipmentByExternalIdSignal(OAIGet_shipment_by_external_id_response_body summary);
    void getShipmentByIdSignal(OAIGet_shipment_by_id_response_body summary);
    void listShipmentRatesSignal(OAIList_shipment_rates_response_body summary);
    void listShipmentsSignal(OAIList_shipments_response_body summary);
    void parseShipmentSignal(OAIParse_shipment_response_body summary);
    void tagShipmentSignal(OAITag_shipment_response_body summary);
    void untagShipmentSignal(QString summary);
    void updateShipmentSignal(OAIUpdate_shipment_response_body summary);


    void cancelShipmentsSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void createShipmentsSignalFull(OAIHttpRequestWorker *worker, OAICreate_shipments_response_body summary);
    void getShipmentByExternalIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_shipment_by_external_id_response_body summary);
    void getShipmentByIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_shipment_by_id_response_body summary);
    void listShipmentRatesSignalFull(OAIHttpRequestWorker *worker, OAIList_shipment_rates_response_body summary);
    void listShipmentsSignalFull(OAIHttpRequestWorker *worker, OAIList_shipments_response_body summary);
    void parseShipmentSignalFull(OAIHttpRequestWorker *worker, OAIParse_shipment_response_body summary);
    void tagShipmentSignalFull(OAIHttpRequestWorker *worker, OAITag_shipment_response_body summary);
    void untagShipmentSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void updateShipmentSignalFull(OAIHttpRequestWorker *worker, OAIUpdate_shipment_response_body summary);

    Q_DECL_DEPRECATED_X("Use cancelShipmentsSignalError() instead")
    void cancelShipmentsSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelShipmentsSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createShipmentsSignalError() instead")
    void createShipmentsSignalE(OAICreate_shipments_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createShipmentsSignalError(OAICreate_shipments_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getShipmentByExternalIdSignalError() instead")
    void getShipmentByExternalIdSignalE(OAIGet_shipment_by_external_id_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getShipmentByExternalIdSignalError(OAIGet_shipment_by_external_id_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getShipmentByIdSignalError() instead")
    void getShipmentByIdSignalE(OAIGet_shipment_by_id_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getShipmentByIdSignalError(OAIGet_shipment_by_id_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listShipmentRatesSignalError() instead")
    void listShipmentRatesSignalE(OAIList_shipment_rates_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listShipmentRatesSignalError(OAIList_shipment_rates_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listShipmentsSignalError() instead")
    void listShipmentsSignalE(OAIList_shipments_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listShipmentsSignalError(OAIList_shipments_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parseShipmentSignalError() instead")
    void parseShipmentSignalE(OAIParse_shipment_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void parseShipmentSignalError(OAIParse_shipment_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagShipmentSignalError() instead")
    void tagShipmentSignalE(OAITag_shipment_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagShipmentSignalError(OAITag_shipment_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagShipmentSignalError() instead")
    void untagShipmentSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void untagShipmentSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateShipmentSignalError() instead")
    void updateShipmentSignalE(OAIUpdate_shipment_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateShipmentSignalError(OAIUpdate_shipment_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelShipmentsSignalErrorFull() instead")
    void cancelShipmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelShipmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createShipmentsSignalErrorFull() instead")
    void createShipmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createShipmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getShipmentByExternalIdSignalErrorFull() instead")
    void getShipmentByExternalIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getShipmentByExternalIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getShipmentByIdSignalErrorFull() instead")
    void getShipmentByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getShipmentByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listShipmentRatesSignalErrorFull() instead")
    void listShipmentRatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listShipmentRatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listShipmentsSignalErrorFull() instead")
    void listShipmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listShipmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parseShipmentSignalErrorFull() instead")
    void parseShipmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void parseShipmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagShipmentSignalErrorFull() instead")
    void tagShipmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagShipmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagShipmentSignalErrorFull() instead")
    void untagShipmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void untagShipmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateShipmentSignalErrorFull() instead")
    void updateShipmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateShipmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
