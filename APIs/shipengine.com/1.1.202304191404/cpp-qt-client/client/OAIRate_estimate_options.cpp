/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRate_estimate_options.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRate_estimate_options::OAIRate_estimate_options(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRate_estimate_options::OAIRate_estimate_options() {
    this->initializeModel();
}

OAIRate_estimate_options::~OAIRate_estimate_options() {}

void OAIRate_estimate_options::initializeModel() {

    m_address_residential_indicator_isSet = false;
    m_address_residential_indicator_isValid = false;

    m_confirmation_isSet = false;
    m_confirmation_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_from_city_locality_isSet = false;
    m_from_city_locality_isValid = false;

    m_from_country_code_isSet = false;
    m_from_country_code_isValid = false;

    m_from_postal_code_isSet = false;
    m_from_postal_code_isValid = false;

    m_from_state_province_isSet = false;
    m_from_state_province_isValid = false;

    m_ship_date_isSet = false;
    m_ship_date_isValid = false;

    m_to_city_locality_isSet = false;
    m_to_city_locality_isValid = false;

    m_to_country_code_isSet = false;
    m_to_country_code_isValid = false;

    m_to_postal_code_isSet = false;
    m_to_postal_code_isValid = false;

    m_to_state_province_isSet = false;
    m_to_state_province_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIRate_estimate_options::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRate_estimate_options::fromJsonObject(QJsonObject json) {

    m_address_residential_indicator_isValid = ::OpenAPI::fromJsonValue(m_address_residential_indicator, json[QString("address_residential_indicator")]);
    m_address_residential_indicator_isSet = !json[QString("address_residential_indicator")].isNull() && m_address_residential_indicator_isValid;

    m_confirmation_isValid = ::OpenAPI::fromJsonValue(m_confirmation, json[QString("confirmation")]);
    m_confirmation_isSet = !json[QString("confirmation")].isNull() && m_confirmation_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_from_city_locality_isValid = ::OpenAPI::fromJsonValue(m_from_city_locality, json[QString("from_city_locality")]);
    m_from_city_locality_isSet = !json[QString("from_city_locality")].isNull() && m_from_city_locality_isValid;

    m_from_country_code_isValid = ::OpenAPI::fromJsonValue(m_from_country_code, json[QString("from_country_code")]);
    m_from_country_code_isSet = !json[QString("from_country_code")].isNull() && m_from_country_code_isValid;

    m_from_postal_code_isValid = ::OpenAPI::fromJsonValue(m_from_postal_code, json[QString("from_postal_code")]);
    m_from_postal_code_isSet = !json[QString("from_postal_code")].isNull() && m_from_postal_code_isValid;

    m_from_state_province_isValid = ::OpenAPI::fromJsonValue(m_from_state_province, json[QString("from_state_province")]);
    m_from_state_province_isSet = !json[QString("from_state_province")].isNull() && m_from_state_province_isValid;

    m_ship_date_isValid = ::OpenAPI::fromJsonValue(m_ship_date, json[QString("ship_date")]);
    m_ship_date_isSet = !json[QString("ship_date")].isNull() && m_ship_date_isValid;

    m_to_city_locality_isValid = ::OpenAPI::fromJsonValue(m_to_city_locality, json[QString("to_city_locality")]);
    m_to_city_locality_isSet = !json[QString("to_city_locality")].isNull() && m_to_city_locality_isValid;

    m_to_country_code_isValid = ::OpenAPI::fromJsonValue(m_to_country_code, json[QString("to_country_code")]);
    m_to_country_code_isSet = !json[QString("to_country_code")].isNull() && m_to_country_code_isValid;

    m_to_postal_code_isValid = ::OpenAPI::fromJsonValue(m_to_postal_code, json[QString("to_postal_code")]);
    m_to_postal_code_isSet = !json[QString("to_postal_code")].isNull() && m_to_postal_code_isValid;

    m_to_state_province_isValid = ::OpenAPI::fromJsonValue(m_to_state_province, json[QString("to_state_province")]);
    m_to_state_province_isSet = !json[QString("to_state_province")].isNull() && m_to_state_province_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAIRate_estimate_options::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRate_estimate_options::asJsonObject() const {
    QJsonObject obj;
    if (m_address_residential_indicator.isSet()) {
        obj.insert(QString("address_residential_indicator"), ::OpenAPI::toJsonValue(m_address_residential_indicator));
    }
    if (m_confirmation.isSet()) {
        obj.insert(QString("confirmation"), ::OpenAPI::toJsonValue(m_confirmation));
    }
    if (m_dimensions.isSet()) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_from_city_locality_isSet) {
        obj.insert(QString("from_city_locality"), ::OpenAPI::toJsonValue(m_from_city_locality));
    }
    if (m_from_country_code_isSet) {
        obj.insert(QString("from_country_code"), ::OpenAPI::toJsonValue(m_from_country_code));
    }
    if (m_from_postal_code_isSet) {
        obj.insert(QString("from_postal_code"), ::OpenAPI::toJsonValue(m_from_postal_code));
    }
    if (m_from_state_province_isSet) {
        obj.insert(QString("from_state_province"), ::OpenAPI::toJsonValue(m_from_state_province));
    }
    if (m_ship_date_isSet) {
        obj.insert(QString("ship_date"), ::OpenAPI::toJsonValue(m_ship_date));
    }
    if (m_to_city_locality_isSet) {
        obj.insert(QString("to_city_locality"), ::OpenAPI::toJsonValue(m_to_city_locality));
    }
    if (m_to_country_code_isSet) {
        obj.insert(QString("to_country_code"), ::OpenAPI::toJsonValue(m_to_country_code));
    }
    if (m_to_postal_code_isSet) {
        obj.insert(QString("to_postal_code"), ::OpenAPI::toJsonValue(m_to_postal_code));
    }
    if (m_to_state_province_isSet) {
        obj.insert(QString("to_state_province"), ::OpenAPI::toJsonValue(m_to_state_province));
    }
    if (m_weight.isSet()) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

OAIAddress_residential_indicator OAIRate_estimate_options::getAddressResidentialIndicator() const {
    return m_address_residential_indicator;
}
void OAIRate_estimate_options::setAddressResidentialIndicator(const OAIAddress_residential_indicator &address_residential_indicator) {
    m_address_residential_indicator = address_residential_indicator;
    m_address_residential_indicator_isSet = true;
}

bool OAIRate_estimate_options::is_address_residential_indicator_Set() const{
    return m_address_residential_indicator_isSet;
}

bool OAIRate_estimate_options::is_address_residential_indicator_Valid() const{
    return m_address_residential_indicator_isValid;
}

OAIDelivery_confirmation OAIRate_estimate_options::getConfirmation() const {
    return m_confirmation;
}
void OAIRate_estimate_options::setConfirmation(const OAIDelivery_confirmation &confirmation) {
    m_confirmation = confirmation;
    m_confirmation_isSet = true;
}

bool OAIRate_estimate_options::is_confirmation_Set() const{
    return m_confirmation_isSet;
}

bool OAIRate_estimate_options::is_confirmation_Valid() const{
    return m_confirmation_isValid;
}

OAIDimensions OAIRate_estimate_options::getDimensions() const {
    return m_dimensions;
}
void OAIRate_estimate_options::setDimensions(const OAIDimensions &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIRate_estimate_options::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIRate_estimate_options::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QString OAIRate_estimate_options::getFromCityLocality() const {
    return m_from_city_locality;
}
void OAIRate_estimate_options::setFromCityLocality(const QString &from_city_locality) {
    m_from_city_locality = from_city_locality;
    m_from_city_locality_isSet = true;
}

bool OAIRate_estimate_options::is_from_city_locality_Set() const{
    return m_from_city_locality_isSet;
}

bool OAIRate_estimate_options::is_from_city_locality_Valid() const{
    return m_from_city_locality_isValid;
}

QString OAIRate_estimate_options::getFromCountryCode() const {
    return m_from_country_code;
}
void OAIRate_estimate_options::setFromCountryCode(const QString &from_country_code) {
    m_from_country_code = from_country_code;
    m_from_country_code_isSet = true;
}

bool OAIRate_estimate_options::is_from_country_code_Set() const{
    return m_from_country_code_isSet;
}

bool OAIRate_estimate_options::is_from_country_code_Valid() const{
    return m_from_country_code_isValid;
}

QString OAIRate_estimate_options::getFromPostalCode() const {
    return m_from_postal_code;
}
void OAIRate_estimate_options::setFromPostalCode(const QString &from_postal_code) {
    m_from_postal_code = from_postal_code;
    m_from_postal_code_isSet = true;
}

bool OAIRate_estimate_options::is_from_postal_code_Set() const{
    return m_from_postal_code_isSet;
}

bool OAIRate_estimate_options::is_from_postal_code_Valid() const{
    return m_from_postal_code_isValid;
}

QString OAIRate_estimate_options::getFromStateProvince() const {
    return m_from_state_province;
}
void OAIRate_estimate_options::setFromStateProvince(const QString &from_state_province) {
    m_from_state_province = from_state_province;
    m_from_state_province_isSet = true;
}

bool OAIRate_estimate_options::is_from_state_province_Set() const{
    return m_from_state_province_isSet;
}

bool OAIRate_estimate_options::is_from_state_province_Valid() const{
    return m_from_state_province_isValid;
}

QDateTime OAIRate_estimate_options::getShipDate() const {
    return m_ship_date;
}
void OAIRate_estimate_options::setShipDate(const QDateTime &ship_date) {
    m_ship_date = ship_date;
    m_ship_date_isSet = true;
}

bool OAIRate_estimate_options::is_ship_date_Set() const{
    return m_ship_date_isSet;
}

bool OAIRate_estimate_options::is_ship_date_Valid() const{
    return m_ship_date_isValid;
}

QString OAIRate_estimate_options::getToCityLocality() const {
    return m_to_city_locality;
}
void OAIRate_estimate_options::setToCityLocality(const QString &to_city_locality) {
    m_to_city_locality = to_city_locality;
    m_to_city_locality_isSet = true;
}

bool OAIRate_estimate_options::is_to_city_locality_Set() const{
    return m_to_city_locality_isSet;
}

bool OAIRate_estimate_options::is_to_city_locality_Valid() const{
    return m_to_city_locality_isValid;
}

QString OAIRate_estimate_options::getToCountryCode() const {
    return m_to_country_code;
}
void OAIRate_estimate_options::setToCountryCode(const QString &to_country_code) {
    m_to_country_code = to_country_code;
    m_to_country_code_isSet = true;
}

bool OAIRate_estimate_options::is_to_country_code_Set() const{
    return m_to_country_code_isSet;
}

bool OAIRate_estimate_options::is_to_country_code_Valid() const{
    return m_to_country_code_isValid;
}

QString OAIRate_estimate_options::getToPostalCode() const {
    return m_to_postal_code;
}
void OAIRate_estimate_options::setToPostalCode(const QString &to_postal_code) {
    m_to_postal_code = to_postal_code;
    m_to_postal_code_isSet = true;
}

bool OAIRate_estimate_options::is_to_postal_code_Set() const{
    return m_to_postal_code_isSet;
}

bool OAIRate_estimate_options::is_to_postal_code_Valid() const{
    return m_to_postal_code_isValid;
}

QString OAIRate_estimate_options::getToStateProvince() const {
    return m_to_state_province;
}
void OAIRate_estimate_options::setToStateProvince(const QString &to_state_province) {
    m_to_state_province = to_state_province;
    m_to_state_province_isSet = true;
}

bool OAIRate_estimate_options::is_to_state_province_Set() const{
    return m_to_state_province_isSet;
}

bool OAIRate_estimate_options::is_to_state_province_Valid() const{
    return m_to_state_province_isValid;
}

OAIWeight OAIRate_estimate_options::getWeight() const {
    return m_weight;
}
void OAIRate_estimate_options::setWeight(const OAIWeight &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIRate_estimate_options::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIRate_estimate_options::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIRate_estimate_options::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_residential_indicator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_city_locality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_state_province_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_city_locality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_state_province_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRate_estimate_options::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
