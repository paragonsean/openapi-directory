/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPackage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPackage::OAIPackage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPackage::OAIPackage() {
    this->initializeModel();
}

OAIPackage::~OAIPackage() {}

void OAIPackage::initializeModel() {

    m_content_description_isSet = false;
    m_content_description_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_external_package_id_isSet = false;
    m_external_package_id_isValid = false;

    m_form_download_isSet = false;
    m_form_download_isValid = false;

    m_insured_value_isSet = false;
    m_insured_value_isValid = false;

    m_label_download_isSet = false;
    m_label_download_isValid = false;

    m_label_messages_isSet = false;
    m_label_messages_isValid = false;

    m_package_code_isSet = false;
    m_package_code_isValid = false;

    m_package_id_isSet = false;
    m_package_id_isValid = false;

    m_sequence_isSet = false;
    m_sequence_isValid = false;

    m_tracking_number_isSet = false;
    m_tracking_number_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIPackage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPackage::fromJsonObject(QJsonObject json) {

    m_content_description_isValid = ::OpenAPI::fromJsonValue(m_content_description, json[QString("content_description")]);
    m_content_description_isSet = !json[QString("content_description")].isNull() && m_content_description_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_external_package_id_isValid = ::OpenAPI::fromJsonValue(m_external_package_id, json[QString("external_package_id")]);
    m_external_package_id_isSet = !json[QString("external_package_id")].isNull() && m_external_package_id_isValid;

    m_form_download_isValid = ::OpenAPI::fromJsonValue(m_form_download, json[QString("form_download")]);
    m_form_download_isSet = !json[QString("form_download")].isNull() && m_form_download_isValid;

    m_insured_value_isValid = ::OpenAPI::fromJsonValue(m_insured_value, json[QString("insured_value")]);
    m_insured_value_isSet = !json[QString("insured_value")].isNull() && m_insured_value_isValid;

    m_label_download_isValid = ::OpenAPI::fromJsonValue(m_label_download, json[QString("label_download")]);
    m_label_download_isSet = !json[QString("label_download")].isNull() && m_label_download_isValid;

    m_label_messages_isValid = ::OpenAPI::fromJsonValue(m_label_messages, json[QString("label_messages")]);
    m_label_messages_isSet = !json[QString("label_messages")].isNull() && m_label_messages_isValid;

    m_package_code_isValid = ::OpenAPI::fromJsonValue(m_package_code, json[QString("package_code")]);
    m_package_code_isSet = !json[QString("package_code")].isNull() && m_package_code_isValid;

    m_package_id_isValid = ::OpenAPI::fromJsonValue(m_package_id, json[QString("package_id")]);
    m_package_id_isSet = !json[QString("package_id")].isNull() && m_package_id_isValid;

    m_sequence_isValid = ::OpenAPI::fromJsonValue(m_sequence, json[QString("sequence")]);
    m_sequence_isSet = !json[QString("sequence")].isNull() && m_sequence_isValid;

    m_tracking_number_isValid = ::OpenAPI::fromJsonValue(m_tracking_number, json[QString("tracking_number")]);
    m_tracking_number_isSet = !json[QString("tracking_number")].isNull() && m_tracking_number_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAIPackage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPackage::asJsonObject() const {
    QJsonObject obj;
    if (m_content_description_isSet) {
        obj.insert(QString("content_description"), ::OpenAPI::toJsonValue(m_content_description));
    }
    if (m_dimensions.isSet()) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_external_package_id_isSet) {
        obj.insert(QString("external_package_id"), ::OpenAPI::toJsonValue(m_external_package_id));
    }
    if (m_form_download.isSet()) {
        obj.insert(QString("form_download"), ::OpenAPI::toJsonValue(m_form_download));
    }
    if (m_insured_value.isSet()) {
        obj.insert(QString("insured_value"), ::OpenAPI::toJsonValue(m_insured_value));
    }
    if (m_label_download.isSet()) {
        obj.insert(QString("label_download"), ::OpenAPI::toJsonValue(m_label_download));
    }
    if (m_label_messages.isSet()) {
        obj.insert(QString("label_messages"), ::OpenAPI::toJsonValue(m_label_messages));
    }
    if (m_package_code_isSet) {
        obj.insert(QString("package_code"), ::OpenAPI::toJsonValue(m_package_code));
    }
    if (m_package_id_isSet) {
        obj.insert(QString("package_id"), ::OpenAPI::toJsonValue(m_package_id));
    }
    if (m_sequence_isSet) {
        obj.insert(QString("sequence"), ::OpenAPI::toJsonValue(m_sequence));
    }
    if (m_tracking_number_isSet) {
        obj.insert(QString("tracking_number"), ::OpenAPI::toJsonValue(m_tracking_number));
    }
    if (m_weight.isSet()) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QString OAIPackage::getContentDescription() const {
    return m_content_description;
}
void OAIPackage::setContentDescription(const QString &content_description) {
    m_content_description = content_description;
    m_content_description_isSet = true;
}

bool OAIPackage::is_content_description_Set() const{
    return m_content_description_isSet;
}

bool OAIPackage::is_content_description_Valid() const{
    return m_content_description_isValid;
}

OAIDimensions OAIPackage::getDimensions() const {
    return m_dimensions;
}
void OAIPackage::setDimensions(const OAIDimensions &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIPackage::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIPackage::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QString OAIPackage::getExternalPackageId() const {
    return m_external_package_id;
}
void OAIPackage::setExternalPackageId(const QString &external_package_id) {
    m_external_package_id = external_package_id;
    m_external_package_id_isSet = true;
}

bool OAIPackage::is_external_package_id_Set() const{
    return m_external_package_id_isSet;
}

bool OAIPackage::is_external_package_id_Valid() const{
    return m_external_package_id_isValid;
}

OAIOptional_link OAIPackage::getFormDownload() const {
    return m_form_download;
}
void OAIPackage::setFormDownload(const OAIOptional_link &form_download) {
    m_form_download = form_download;
    m_form_download_isSet = true;
}

bool OAIPackage::is_form_download_Set() const{
    return m_form_download_isSet;
}

bool OAIPackage::is_form_download_Valid() const{
    return m_form_download_isValid;
}

OAIMonetary_value OAIPackage::getInsuredValue() const {
    return m_insured_value;
}
void OAIPackage::setInsuredValue(const OAIMonetary_value &insured_value) {
    m_insured_value = insured_value;
    m_insured_value_isSet = true;
}

bool OAIPackage::is_insured_value_Set() const{
    return m_insured_value_isSet;
}

bool OAIPackage::is_insured_value_Valid() const{
    return m_insured_value_isValid;
}

OAILabel_download OAIPackage::getLabelDownload() const {
    return m_label_download;
}
void OAIPackage::setLabelDownload(const OAILabel_download &label_download) {
    m_label_download = label_download;
    m_label_download_isSet = true;
}

bool OAIPackage::is_label_download_Set() const{
    return m_label_download_isSet;
}

bool OAIPackage::is_label_download_Valid() const{
    return m_label_download_isValid;
}

OAILabel_messages OAIPackage::getLabelMessages() const {
    return m_label_messages;
}
void OAIPackage::setLabelMessages(const OAILabel_messages &label_messages) {
    m_label_messages = label_messages;
    m_label_messages_isSet = true;
}

bool OAIPackage::is_label_messages_Set() const{
    return m_label_messages_isSet;
}

bool OAIPackage::is_label_messages_Valid() const{
    return m_label_messages_isValid;
}

QString OAIPackage::getPackageCode() const {
    return m_package_code;
}
void OAIPackage::setPackageCode(const QString &package_code) {
    m_package_code = package_code;
    m_package_code_isSet = true;
}

bool OAIPackage::is_package_code_Set() const{
    return m_package_code_isSet;
}

bool OAIPackage::is_package_code_Valid() const{
    return m_package_code_isValid;
}

QString OAIPackage::getPackageId() const {
    return m_package_id;
}
void OAIPackage::setPackageId(const QString &package_id) {
    m_package_id = package_id;
    m_package_id_isSet = true;
}

bool OAIPackage::is_package_id_Set() const{
    return m_package_id_isSet;
}

bool OAIPackage::is_package_id_Valid() const{
    return m_package_id_isValid;
}

qint32 OAIPackage::getSequence() const {
    return m_sequence;
}
void OAIPackage::setSequence(const qint32 &sequence) {
    m_sequence = sequence;
    m_sequence_isSet = true;
}

bool OAIPackage::is_sequence_Set() const{
    return m_sequence_isSet;
}

bool OAIPackage::is_sequence_Valid() const{
    return m_sequence_isValid;
}

QString OAIPackage::getTrackingNumber() const {
    return m_tracking_number;
}
void OAIPackage::setTrackingNumber(const QString &tracking_number) {
    m_tracking_number = tracking_number;
    m_tracking_number_isSet = true;
}

bool OAIPackage::is_tracking_number_Set() const{
    return m_tracking_number_isSet;
}

bool OAIPackage::is_tracking_number_Valid() const{
    return m_tracking_number_isValid;
}

OAIWeight OAIPackage::getWeight() const {
    return m_weight;
}
void OAIPackage::setWeight(const OAIWeight &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIPackage::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIPackage::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIPackage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_package_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_download.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insured_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_download.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_messages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPackage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_weight_isValid && true;
}

} // namespace OpenAPI
