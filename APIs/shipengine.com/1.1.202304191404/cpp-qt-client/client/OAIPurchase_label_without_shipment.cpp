/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchase_label_without_shipment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchase_label_without_shipment::OAIPurchase_label_without_shipment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchase_label_without_shipment::OAIPurchase_label_without_shipment() {
    this->initializeModel();
}

OAIPurchase_label_without_shipment::~OAIPurchase_label_without_shipment() {}

void OAIPurchase_label_without_shipment::initializeModel() {

    m_display_scheme_isSet = false;
    m_display_scheme_isValid = false;

    m_label_download_type_isSet = false;
    m_label_download_type_isValid = false;

    m_label_format_isSet = false;
    m_label_format_isValid = false;

    m_label_layout_isSet = false;
    m_label_layout_isValid = false;

    m_validate_address_isSet = false;
    m_validate_address_isValid = false;
}

void OAIPurchase_label_without_shipment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchase_label_without_shipment::fromJsonObject(QJsonObject json) {

    m_display_scheme_isValid = ::OpenAPI::fromJsonValue(m_display_scheme, json[QString("display_scheme")]);
    m_display_scheme_isSet = !json[QString("display_scheme")].isNull() && m_display_scheme_isValid;

    m_label_download_type_isValid = ::OpenAPI::fromJsonValue(m_label_download_type, json[QString("label_download_type")]);
    m_label_download_type_isSet = !json[QString("label_download_type")].isNull() && m_label_download_type_isValid;

    m_label_format_isValid = ::OpenAPI::fromJsonValue(m_label_format, json[QString("label_format")]);
    m_label_format_isSet = !json[QString("label_format")].isNull() && m_label_format_isValid;

    m_label_layout_isValid = ::OpenAPI::fromJsonValue(m_label_layout, json[QString("label_layout")]);
    m_label_layout_isSet = !json[QString("label_layout")].isNull() && m_label_layout_isValid;

    m_validate_address_isValid = ::OpenAPI::fromJsonValue(m_validate_address, json[QString("validate_address")]);
    m_validate_address_isSet = !json[QString("validate_address")].isNull() && m_validate_address_isValid;
}

QString OAIPurchase_label_without_shipment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchase_label_without_shipment::asJsonObject() const {
    QJsonObject obj;
    if (m_display_scheme.isSet()) {
        obj.insert(QString("display_scheme"), ::OpenAPI::toJsonValue(m_display_scheme));
    }
    if (m_label_download_type.isSet()) {
        obj.insert(QString("label_download_type"), ::OpenAPI::toJsonValue(m_label_download_type));
    }
    if (m_label_format.isSet()) {
        obj.insert(QString("label_format"), ::OpenAPI::toJsonValue(m_label_format));
    }
    if (m_label_layout.isSet()) {
        obj.insert(QString("label_layout"), ::OpenAPI::toJsonValue(m_label_layout));
    }
    if (m_validate_address.isSet()) {
        obj.insert(QString("validate_address"), ::OpenAPI::toJsonValue(m_validate_address));
    }
    return obj;
}

OAIDisplay_scheme OAIPurchase_label_without_shipment::getDisplayScheme() const {
    return m_display_scheme;
}
void OAIPurchase_label_without_shipment::setDisplayScheme(const OAIDisplay_scheme &display_scheme) {
    m_display_scheme = display_scheme;
    m_display_scheme_isSet = true;
}

bool OAIPurchase_label_without_shipment::is_display_scheme_Set() const{
    return m_display_scheme_isSet;
}

bool OAIPurchase_label_without_shipment::is_display_scheme_Valid() const{
    return m_display_scheme_isValid;
}

OAILabel_download_type OAIPurchase_label_without_shipment::getLabelDownloadType() const {
    return m_label_download_type;
}
void OAIPurchase_label_without_shipment::setLabelDownloadType(const OAILabel_download_type &label_download_type) {
    m_label_download_type = label_download_type;
    m_label_download_type_isSet = true;
}

bool OAIPurchase_label_without_shipment::is_label_download_type_Set() const{
    return m_label_download_type_isSet;
}

bool OAIPurchase_label_without_shipment::is_label_download_type_Valid() const{
    return m_label_download_type_isValid;
}

OAILabel_format OAIPurchase_label_without_shipment::getLabelFormat() const {
    return m_label_format;
}
void OAIPurchase_label_without_shipment::setLabelFormat(const OAILabel_format &label_format) {
    m_label_format = label_format;
    m_label_format_isSet = true;
}

bool OAIPurchase_label_without_shipment::is_label_format_Set() const{
    return m_label_format_isSet;
}

bool OAIPurchase_label_without_shipment::is_label_format_Valid() const{
    return m_label_format_isValid;
}

OAILabel_layout OAIPurchase_label_without_shipment::getLabelLayout() const {
    return m_label_layout;
}
void OAIPurchase_label_without_shipment::setLabelLayout(const OAILabel_layout &label_layout) {
    m_label_layout = label_layout;
    m_label_layout_isSet = true;
}

bool OAIPurchase_label_without_shipment::is_label_layout_Set() const{
    return m_label_layout_isSet;
}

bool OAIPurchase_label_without_shipment::is_label_layout_Valid() const{
    return m_label_layout_isValid;
}

OAIValidate_address OAIPurchase_label_without_shipment::getValidateAddress() const {
    return m_validate_address;
}
void OAIPurchase_label_without_shipment::setValidateAddress(const OAIValidate_address &validate_address) {
    m_validate_address = validate_address;
    m_validate_address_isSet = true;
}

bool OAIPurchase_label_without_shipment::is_validate_address_Set() const{
    return m_validate_address_isSet;
}

bool OAIPurchase_label_without_shipment::is_validate_address_Valid() const{
    return m_validate_address_isValid;
}

bool OAIPurchase_label_without_shipment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_scheme.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_download_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_layout.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_address.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchase_label_without_shipment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
