/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIList_service_points_response_body_service_points_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIList_service_points_response_body_service_points_inner::OAIList_service_points_response_body_service_points_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIList_service_points_response_body_service_points_inner::OAIList_service_points_response_body_service_points_inner() {
    this->initializeModel();
}

OAIList_service_points_response_body_service_points_inner::~OAIList_service_points_response_body_service_points_inner() {}

void OAIList_service_points_response_body_service_points_inner::initializeModel() {

    m_address_line1_isSet = false;
    m_address_line1_isValid = false;

    m_carrier_code_isSet = false;
    m_carrier_code_isValid = false;

    m_city_locality_isSet = false;
    m_city_locality_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_distance_in_meters_isSet = false;
    m_distance_in_meters_isValid = false;

    m_features_isSet = false;
    m_features_isValid = false;

    m_hours_of_operation_isSet = false;
    m_hours_of_operation_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_r_long_isSet = false;
    m_r_long_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_service_codes_isSet = false;
    m_service_codes_isValid = false;

    m_service_point_id_isSet = false;
    m_service_point_id_isValid = false;

    m_state_province_isSet = false;
    m_state_province_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIList_service_points_response_body_service_points_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIList_service_points_response_body_service_points_inner::fromJsonObject(QJsonObject json) {

    m_address_line1_isValid = ::OpenAPI::fromJsonValue(m_address_line1, json[QString("address_line1")]);
    m_address_line1_isSet = !json[QString("address_line1")].isNull() && m_address_line1_isValid;

    m_carrier_code_isValid = ::OpenAPI::fromJsonValue(m_carrier_code, json[QString("carrier_code")]);
    m_carrier_code_isSet = !json[QString("carrier_code")].isNull() && m_carrier_code_isValid;

    m_city_locality_isValid = ::OpenAPI::fromJsonValue(m_city_locality, json[QString("city_locality")]);
    m_city_locality_isSet = !json[QString("city_locality")].isNull() && m_city_locality_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("company_name")]);
    m_company_name_isSet = !json[QString("company_name")].isNull() && m_company_name_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_distance_in_meters_isValid = ::OpenAPI::fromJsonValue(m_distance_in_meters, json[QString("distance_in_meters")]);
    m_distance_in_meters_isSet = !json[QString("distance_in_meters")].isNull() && m_distance_in_meters_isValid;

    m_features_isValid = ::OpenAPI::fromJsonValue(m_features, json[QString("features")]);
    m_features_isSet = !json[QString("features")].isNull() && m_features_isValid;

    m_hours_of_operation_isValid = ::OpenAPI::fromJsonValue(m_hours_of_operation, json[QString("hours_of_operation")]);
    m_hours_of_operation_isSet = !json[QString("hours_of_operation")].isNull() && m_hours_of_operation_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_r_long_isValid = ::OpenAPI::fromJsonValue(m_r_long, json[QString("long")]);
    m_r_long_isSet = !json[QString("long")].isNull() && m_r_long_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phone_number")]);
    m_phone_number_isSet = !json[QString("phone_number")].isNull() && m_phone_number_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postal_code")]);
    m_postal_code_isSet = !json[QString("postal_code")].isNull() && m_postal_code_isValid;

    m_service_codes_isValid = ::OpenAPI::fromJsonValue(m_service_codes, json[QString("service_codes")]);
    m_service_codes_isSet = !json[QString("service_codes")].isNull() && m_service_codes_isValid;

    m_service_point_id_isValid = ::OpenAPI::fromJsonValue(m_service_point_id, json[QString("service_point_id")]);
    m_service_point_id_isSet = !json[QString("service_point_id")].isNull() && m_service_point_id_isValid;

    m_state_province_isValid = ::OpenAPI::fromJsonValue(m_state_province, json[QString("state_province")]);
    m_state_province_isSet = !json[QString("state_province")].isNull() && m_state_province_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIList_service_points_response_body_service_points_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIList_service_points_response_body_service_points_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_address_line1_isSet) {
        obj.insert(QString("address_line1"), ::OpenAPI::toJsonValue(m_address_line1));
    }
    if (m_carrier_code_isSet) {
        obj.insert(QString("carrier_code"), ::OpenAPI::toJsonValue(m_carrier_code));
    }
    if (m_city_locality_isSet) {
        obj.insert(QString("city_locality"), ::OpenAPI::toJsonValue(m_city_locality));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("company_name"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_distance_in_meters_isSet) {
        obj.insert(QString("distance_in_meters"), ::OpenAPI::toJsonValue(m_distance_in_meters));
    }
    if (m_features.size() > 0) {
        obj.insert(QString("features"), ::OpenAPI::toJsonValue(m_features));
    }
    if (m_hours_of_operation.isSet()) {
        obj.insert(QString("hours_of_operation"), ::OpenAPI::toJsonValue(m_hours_of_operation));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_r_long_isSet) {
        obj.insert(QString("long"), ::OpenAPI::toJsonValue(m_r_long));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phone_number"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postal_code"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_service_codes.size() > 0) {
        obj.insert(QString("service_codes"), ::OpenAPI::toJsonValue(m_service_codes));
    }
    if (m_service_point_id_isSet) {
        obj.insert(QString("service_point_id"), ::OpenAPI::toJsonValue(m_service_point_id));
    }
    if (m_state_province_isSet) {
        obj.insert(QString("state_province"), ::OpenAPI::toJsonValue(m_state_province));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIList_service_points_response_body_service_points_inner::getAddressLine1() const {
    return m_address_line1;
}
void OAIList_service_points_response_body_service_points_inner::setAddressLine1(const QString &address_line1) {
    m_address_line1 = address_line1;
    m_address_line1_isSet = true;
}

bool OAIList_service_points_response_body_service_points_inner::is_address_line1_Set() const{
    return m_address_line1_isSet;
}

bool OAIList_service_points_response_body_service_points_inner::is_address_line1_Valid() const{
    return m_address_line1_isValid;
}

QString OAIList_service_points_response_body_service_points_inner::getCarrierCode() const {
    return m_carrier_code;
}
void OAIList_service_points_response_body_service_points_inner::setCarrierCode(const QString &carrier_code) {
    m_carrier_code = carrier_code;
    m_carrier_code_isSet = true;
}

bool OAIList_service_points_response_body_service_points_inner::is_carrier_code_Set() const{
    return m_carrier_code_isSet;
}

bool OAIList_service_points_response_body_service_points_inner::is_carrier_code_Valid() const{
    return m_carrier_code_isValid;
}

QString OAIList_service_points_response_body_service_points_inner::getCityLocality() const {
    return m_city_locality;
}
void OAIList_service_points_response_body_service_points_inner::setCityLocality(const QString &city_locality) {
    m_city_locality = city_locality;
    m_city_locality_isSet = true;
}

bool OAIList_service_points_response_body_service_points_inner::is_city_locality_Set() const{
    return m_city_locality_isSet;
}

bool OAIList_service_points_response_body_service_points_inner::is_city_locality_Valid() const{
    return m_city_locality_isValid;
}

QString OAIList_service_points_response_body_service_points_inner::getCompanyName() const {
    return m_company_name;
}
void OAIList_service_points_response_body_service_points_inner::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAIList_service_points_response_body_service_points_inner::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAIList_service_points_response_body_service_points_inner::is_company_name_Valid() const{
    return m_company_name_isValid;
}

QString OAIList_service_points_response_body_service_points_inner::getCountryCode() const {
    return m_country_code;
}
void OAIList_service_points_response_body_service_points_inner::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIList_service_points_response_body_service_points_inner::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIList_service_points_response_body_service_points_inner::is_country_code_Valid() const{
    return m_country_code_isValid;
}

double OAIList_service_points_response_body_service_points_inner::getDistanceInMeters() const {
    return m_distance_in_meters;
}
void OAIList_service_points_response_body_service_points_inner::setDistanceInMeters(const double &distance_in_meters) {
    m_distance_in_meters = distance_in_meters;
    m_distance_in_meters_isSet = true;
}

bool OAIList_service_points_response_body_service_points_inner::is_distance_in_meters_Set() const{
    return m_distance_in_meters_isSet;
}

bool OAIList_service_points_response_body_service_points_inner::is_distance_in_meters_Valid() const{
    return m_distance_in_meters_isValid;
}

QList<QString> OAIList_service_points_response_body_service_points_inner::getFeatures() const {
    return m_features;
}
void OAIList_service_points_response_body_service_points_inner::setFeatures(const QList<QString> &features) {
    m_features = features;
    m_features_isSet = true;
}

bool OAIList_service_points_response_body_service_points_inner::is_features_Set() const{
    return m_features_isSet;
}

bool OAIList_service_points_response_body_service_points_inner::is_features_Valid() const{
    return m_features_isValid;
}

OAIGet_service_point_by_id_response_body_service_point_hours_of_operation OAIList_service_points_response_body_service_points_inner::getHoursOfOperation() const {
    return m_hours_of_operation;
}
void OAIList_service_points_response_body_service_points_inner::setHoursOfOperation(const OAIGet_service_point_by_id_response_body_service_point_hours_of_operation &hours_of_operation) {
    m_hours_of_operation = hours_of_operation;
    m_hours_of_operation_isSet = true;
}

bool OAIList_service_points_response_body_service_points_inner::is_hours_of_operation_Set() const{
    return m_hours_of_operation_isSet;
}

bool OAIList_service_points_response_body_service_points_inner::is_hours_of_operation_Valid() const{
    return m_hours_of_operation_isValid;
}

double OAIList_service_points_response_body_service_points_inner::getLat() const {
    return m_lat;
}
void OAIList_service_points_response_body_service_points_inner::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIList_service_points_response_body_service_points_inner::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIList_service_points_response_body_service_points_inner::is_lat_Valid() const{
    return m_lat_isValid;
}

double OAIList_service_points_response_body_service_points_inner::getRLong() const {
    return m_r_long;
}
void OAIList_service_points_response_body_service_points_inner::setRLong(const double &r_long) {
    m_r_long = r_long;
    m_r_long_isSet = true;
}

bool OAIList_service_points_response_body_service_points_inner::is_r_long_Set() const{
    return m_r_long_isSet;
}

bool OAIList_service_points_response_body_service_points_inner::is_r_long_Valid() const{
    return m_r_long_isValid;
}

QString OAIList_service_points_response_body_service_points_inner::getPhoneNumber() const {
    return m_phone_number;
}
void OAIList_service_points_response_body_service_points_inner::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIList_service_points_response_body_service_points_inner::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIList_service_points_response_body_service_points_inner::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIList_service_points_response_body_service_points_inner::getPostalCode() const {
    return m_postal_code;
}
void OAIList_service_points_response_body_service_points_inner::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIList_service_points_response_body_service_points_inner::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIList_service_points_response_body_service_points_inner::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QList<QString> OAIList_service_points_response_body_service_points_inner::getServiceCodes() const {
    return m_service_codes;
}
void OAIList_service_points_response_body_service_points_inner::setServiceCodes(const QList<QString> &service_codes) {
    m_service_codes = service_codes;
    m_service_codes_isSet = true;
}

bool OAIList_service_points_response_body_service_points_inner::is_service_codes_Set() const{
    return m_service_codes_isSet;
}

bool OAIList_service_points_response_body_service_points_inner::is_service_codes_Valid() const{
    return m_service_codes_isValid;
}

QString OAIList_service_points_response_body_service_points_inner::getServicePointId() const {
    return m_service_point_id;
}
void OAIList_service_points_response_body_service_points_inner::setServicePointId(const QString &service_point_id) {
    m_service_point_id = service_point_id;
    m_service_point_id_isSet = true;
}

bool OAIList_service_points_response_body_service_points_inner::is_service_point_id_Set() const{
    return m_service_point_id_isSet;
}

bool OAIList_service_points_response_body_service_points_inner::is_service_point_id_Valid() const{
    return m_service_point_id_isValid;
}

QString OAIList_service_points_response_body_service_points_inner::getStateProvince() const {
    return m_state_province;
}
void OAIList_service_points_response_body_service_points_inner::setStateProvince(const QString &state_province) {
    m_state_province = state_province;
    m_state_province_isSet = true;
}

bool OAIList_service_points_response_body_service_points_inner::is_state_province_Set() const{
    return m_state_province_isSet;
}

bool OAIList_service_points_response_body_service_points_inner::is_state_province_Valid() const{
    return m_state_province_isValid;
}

QString OAIList_service_points_response_body_service_points_inner::getType() const {
    return m_type;
}
void OAIList_service_points_response_body_service_points_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIList_service_points_response_body_service_points_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIList_service_points_response_body_service_points_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIList_service_points_response_body_service_points_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_line1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_locality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_in_meters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hours_of_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_point_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_province_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIList_service_points_response_body_service_points_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
