/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBatchesApi_H
#define OAI_OAIBatchesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdd_to_batch_request_body.h"
#include "OAIBatch_status.h"
#include "OAIBatches_sort_by.h"
#include "OAICreate_batch_request_body.h"
#include "OAICreate_batch_response_body.h"
#include "OAIError_response_body.h"
#include "OAIGet_batch_by_external_id_response_body.h"
#include "OAIGet_batch_by_id_response_body.h"
#include "OAIList_batch_errors_response_body.h"
#include "OAIList_batches_response_body.h"
#include "OAIProcess_batch_request_body.h"
#include "OAIRemove_from_batch_request_body.h"
#include "OAISort_dir.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBatchesApi : public QObject {
    Q_OBJECT

public:
    OAIBatchesApi(const int timeOut = 0);
    ~OAIBatchesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  batch_id QString [required]
    * @param[in]  oai_add_to_batch_request_body OAIAdd_to_batch_request_body [required]
    */
    virtual void addToBatch(const QString &batch_id, const OAIAdd_to_batch_request_body &oai_add_to_batch_request_body);

    /**
    * @param[in]  oai_create_batch_request_body OAICreate_batch_request_body [required]
    */
    virtual void createBatch(const OAICreate_batch_request_body &oai_create_batch_request_body);

    /**
    * @param[in]  batch_id QString [required]
    */
    virtual void deleteBatch(const QString &batch_id);

    /**
    * @param[in]  external_batch_id QString [required]
    */
    virtual void getBatchByExternalId(const QString &external_batch_id);

    /**
    * @param[in]  batch_id QString [required]
    */
    virtual void getBatchById(const QString &batch_id);

    /**
    * @param[in]  batch_id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    */
    virtual void listBatchErrors(const QString &batch_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  status OAIBatch_status [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  sort_dir OAISort_dir [optional]
    * @param[in]  batch_number QString [optional]
    * @param[in]  sort_by OAIBatches_sort_by [optional]
    */
    virtual void listBatches(const ::OpenAPI::OptionalParam<OAIBatch_status> &status = ::OpenAPI::OptionalParam<OAIBatch_status>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISort_dir> &sort_dir = ::OpenAPI::OptionalParam<OAISort_dir>(), const ::OpenAPI::OptionalParam<QString> &batch_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBatches_sort_by> &sort_by = ::OpenAPI::OptionalParam<OAIBatches_sort_by>());

    /**
    * @param[in]  batch_id QString [required]
    * @param[in]  oai_process_batch_request_body OAIProcess_batch_request_body [required]
    */
    virtual void processBatch(const QString &batch_id, const OAIProcess_batch_request_body &oai_process_batch_request_body);

    /**
    * @param[in]  batch_id QString [required]
    * @param[in]  oai_remove_from_batch_request_body OAIRemove_from_batch_request_body [required]
    */
    virtual void removeFromBatch(const QString &batch_id, const OAIRemove_from_batch_request_body &oai_remove_from_batch_request_body);

    /**
    * @param[in]  batch_id QString [required]
    */
    virtual void updateBatch(const QString &batch_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addToBatchCallback(OAIHttpRequestWorker *worker);
    void createBatchCallback(OAIHttpRequestWorker *worker);
    void deleteBatchCallback(OAIHttpRequestWorker *worker);
    void getBatchByExternalIdCallback(OAIHttpRequestWorker *worker);
    void getBatchByIdCallback(OAIHttpRequestWorker *worker);
    void listBatchErrorsCallback(OAIHttpRequestWorker *worker);
    void listBatchesCallback(OAIHttpRequestWorker *worker);
    void processBatchCallback(OAIHttpRequestWorker *worker);
    void removeFromBatchCallback(OAIHttpRequestWorker *worker);
    void updateBatchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addToBatchSignal(QString summary);
    void createBatchSignal(OAICreate_batch_response_body summary);
    void deleteBatchSignal(QString summary);
    void getBatchByExternalIdSignal(OAIGet_batch_by_external_id_response_body summary);
    void getBatchByIdSignal(OAIGet_batch_by_id_response_body summary);
    void listBatchErrorsSignal(OAIList_batch_errors_response_body summary);
    void listBatchesSignal(OAIList_batches_response_body summary);
    void processBatchSignal(QString summary);
    void removeFromBatchSignal(QString summary);
    void updateBatchSignal(QString summary);


    void addToBatchSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void createBatchSignalFull(OAIHttpRequestWorker *worker, OAICreate_batch_response_body summary);
    void deleteBatchSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getBatchByExternalIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_batch_by_external_id_response_body summary);
    void getBatchByIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_batch_by_id_response_body summary);
    void listBatchErrorsSignalFull(OAIHttpRequestWorker *worker, OAIList_batch_errors_response_body summary);
    void listBatchesSignalFull(OAIHttpRequestWorker *worker, OAIList_batches_response_body summary);
    void processBatchSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void removeFromBatchSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void updateBatchSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use addToBatchSignalError() instead")
    void addToBatchSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addToBatchSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBatchSignalError() instead")
    void createBatchSignalE(OAICreate_batch_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBatchSignalError(OAICreate_batch_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBatchSignalError() instead")
    void deleteBatchSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBatchSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBatchByExternalIdSignalError() instead")
    void getBatchByExternalIdSignalE(OAIGet_batch_by_external_id_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBatchByExternalIdSignalError(OAIGet_batch_by_external_id_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBatchByIdSignalError() instead")
    void getBatchByIdSignalE(OAIGet_batch_by_id_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBatchByIdSignalError(OAIGet_batch_by_id_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBatchErrorsSignalError() instead")
    void listBatchErrorsSignalE(OAIList_batch_errors_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listBatchErrorsSignalError(OAIList_batch_errors_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBatchesSignalError() instead")
    void listBatchesSignalE(OAIList_batches_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listBatchesSignalError(OAIList_batches_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processBatchSignalError() instead")
    void processBatchSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void processBatchSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeFromBatchSignalError() instead")
    void removeFromBatchSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeFromBatchSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBatchSignalError() instead")
    void updateBatchSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBatchSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addToBatchSignalErrorFull() instead")
    void addToBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addToBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBatchSignalErrorFull() instead")
    void createBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBatchSignalErrorFull() instead")
    void deleteBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBatchByExternalIdSignalErrorFull() instead")
    void getBatchByExternalIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBatchByExternalIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBatchByIdSignalErrorFull() instead")
    void getBatchByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBatchByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBatchErrorsSignalErrorFull() instead")
    void listBatchErrorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listBatchErrorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBatchesSignalErrorFull() instead")
    void listBatchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listBatchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processBatchSignalErrorFull() instead")
    void processBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void processBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeFromBatchSignalErrorFull() instead")
    void removeFromBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeFromBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBatchSignalErrorFull() instead")
    void updateBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
