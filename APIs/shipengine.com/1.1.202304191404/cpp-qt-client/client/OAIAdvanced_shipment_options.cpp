/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvanced_shipment_options.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvanced_shipment_options::OAIAdvanced_shipment_options(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvanced_shipment_options::OAIAdvanced_shipment_options() {
    this->initializeModel();
}

OAIAdvanced_shipment_options::~OAIAdvanced_shipment_options() {}

void OAIAdvanced_shipment_options::initializeModel() {

    m_bill_to_account_isSet = false;
    m_bill_to_account_isValid = false;

    m_bill_to_country_code_isSet = false;
    m_bill_to_country_code_isValid = false;

    m_bill_to_party_isSet = false;
    m_bill_to_party_isValid = false;

    m_bill_to_postal_code_isSet = false;
    m_bill_to_postal_code_isValid = false;

    m_collect_on_delivery_isSet = false;
    m_collect_on_delivery_isValid = false;

    m_contains_alcohol_isSet = false;
    m_contains_alcohol_isValid = false;

    m_custom_field1_isSet = false;
    m_custom_field1_isValid = false;

    m_custom_field2_isSet = false;
    m_custom_field2_isValid = false;

    m_custom_field3_isSet = false;
    m_custom_field3_isValid = false;

    m_delivered_duty_paid_isSet = false;
    m_delivered_duty_paid_isValid = false;

    m_dry_ice_isSet = false;
    m_dry_ice_isValid = false;

    m_dry_ice_weight_isSet = false;
    m_dry_ice_weight_isValid = false;

    m_fedex_freight_isSet = false;
    m_fedex_freight_isValid = false;

    m_freight_class_isSet = false;
    m_freight_class_isValid = false;

    m_non_machinable_isSet = false;
    m_non_machinable_isValid = false;

    m_origin_type_isSet = false;
    m_origin_type_isValid = false;

    m_saturday_delivery_isSet = false;
    m_saturday_delivery_isValid = false;

    m_shipper_release_isSet = false;
    m_shipper_release_isValid = false;

    m_third_party_consignee_isSet = false;
    m_third_party_consignee_isValid = false;

    m_use_ups_ground_freight_pricing_isSet = false;
    m_use_ups_ground_freight_pricing_isValid = false;
}

void OAIAdvanced_shipment_options::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvanced_shipment_options::fromJsonObject(QJsonObject json) {

    m_bill_to_account_isValid = ::OpenAPI::fromJsonValue(m_bill_to_account, json[QString("bill_to_account")]);
    m_bill_to_account_isSet = !json[QString("bill_to_account")].isNull() && m_bill_to_account_isValid;

    m_bill_to_country_code_isValid = ::OpenAPI::fromJsonValue(m_bill_to_country_code, json[QString("bill_to_country_code")]);
    m_bill_to_country_code_isSet = !json[QString("bill_to_country_code")].isNull() && m_bill_to_country_code_isValid;

    m_bill_to_party_isValid = ::OpenAPI::fromJsonValue(m_bill_to_party, json[QString("bill_to_party")]);
    m_bill_to_party_isSet = !json[QString("bill_to_party")].isNull() && m_bill_to_party_isValid;

    m_bill_to_postal_code_isValid = ::OpenAPI::fromJsonValue(m_bill_to_postal_code, json[QString("bill_to_postal_code")]);
    m_bill_to_postal_code_isSet = !json[QString("bill_to_postal_code")].isNull() && m_bill_to_postal_code_isValid;

    m_collect_on_delivery_isValid = ::OpenAPI::fromJsonValue(m_collect_on_delivery, json[QString("collect_on_delivery")]);
    m_collect_on_delivery_isSet = !json[QString("collect_on_delivery")].isNull() && m_collect_on_delivery_isValid;

    m_contains_alcohol_isValid = ::OpenAPI::fromJsonValue(m_contains_alcohol, json[QString("contains_alcohol")]);
    m_contains_alcohol_isSet = !json[QString("contains_alcohol")].isNull() && m_contains_alcohol_isValid;

    m_custom_field1_isValid = ::OpenAPI::fromJsonValue(m_custom_field1, json[QString("custom_field1")]);
    m_custom_field1_isSet = !json[QString("custom_field1")].isNull() && m_custom_field1_isValid;

    m_custom_field2_isValid = ::OpenAPI::fromJsonValue(m_custom_field2, json[QString("custom_field2")]);
    m_custom_field2_isSet = !json[QString("custom_field2")].isNull() && m_custom_field2_isValid;

    m_custom_field3_isValid = ::OpenAPI::fromJsonValue(m_custom_field3, json[QString("custom_field3")]);
    m_custom_field3_isSet = !json[QString("custom_field3")].isNull() && m_custom_field3_isValid;

    m_delivered_duty_paid_isValid = ::OpenAPI::fromJsonValue(m_delivered_duty_paid, json[QString("delivered_duty_paid")]);
    m_delivered_duty_paid_isSet = !json[QString("delivered_duty_paid")].isNull() && m_delivered_duty_paid_isValid;

    m_dry_ice_isValid = ::OpenAPI::fromJsonValue(m_dry_ice, json[QString("dry_ice")]);
    m_dry_ice_isSet = !json[QString("dry_ice")].isNull() && m_dry_ice_isValid;

    m_dry_ice_weight_isValid = ::OpenAPI::fromJsonValue(m_dry_ice_weight, json[QString("dry_ice_weight")]);
    m_dry_ice_weight_isSet = !json[QString("dry_ice_weight")].isNull() && m_dry_ice_weight_isValid;

    m_fedex_freight_isValid = ::OpenAPI::fromJsonValue(m_fedex_freight, json[QString("fedex_freight")]);
    m_fedex_freight_isSet = !json[QString("fedex_freight")].isNull() && m_fedex_freight_isValid;

    m_freight_class_isValid = ::OpenAPI::fromJsonValue(m_freight_class, json[QString("freight_class")]);
    m_freight_class_isSet = !json[QString("freight_class")].isNull() && m_freight_class_isValid;

    m_non_machinable_isValid = ::OpenAPI::fromJsonValue(m_non_machinable, json[QString("non_machinable")]);
    m_non_machinable_isSet = !json[QString("non_machinable")].isNull() && m_non_machinable_isValid;

    m_origin_type_isValid = ::OpenAPI::fromJsonValue(m_origin_type, json[QString("origin_type")]);
    m_origin_type_isSet = !json[QString("origin_type")].isNull() && m_origin_type_isValid;

    m_saturday_delivery_isValid = ::OpenAPI::fromJsonValue(m_saturday_delivery, json[QString("saturday_delivery")]);
    m_saturday_delivery_isSet = !json[QString("saturday_delivery")].isNull() && m_saturday_delivery_isValid;

    m_shipper_release_isValid = ::OpenAPI::fromJsonValue(m_shipper_release, json[QString("shipper_release")]);
    m_shipper_release_isSet = !json[QString("shipper_release")].isNull() && m_shipper_release_isValid;

    m_third_party_consignee_isValid = ::OpenAPI::fromJsonValue(m_third_party_consignee, json[QString("third_party_consignee")]);
    m_third_party_consignee_isSet = !json[QString("third_party_consignee")].isNull() && m_third_party_consignee_isValid;

    m_use_ups_ground_freight_pricing_isValid = ::OpenAPI::fromJsonValue(m_use_ups_ground_freight_pricing, json[QString("use_ups_ground_freight_pricing")]);
    m_use_ups_ground_freight_pricing_isSet = !json[QString("use_ups_ground_freight_pricing")].isNull() && m_use_ups_ground_freight_pricing_isValid;
}

QString OAIAdvanced_shipment_options::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvanced_shipment_options::asJsonObject() const {
    QJsonObject obj;
    if (m_bill_to_account_isSet) {
        obj.insert(QString("bill_to_account"), ::OpenAPI::toJsonValue(m_bill_to_account));
    }
    if (m_bill_to_country_code_isSet) {
        obj.insert(QString("bill_to_country_code"), ::OpenAPI::toJsonValue(m_bill_to_country_code));
    }
    if (m_bill_to_party.isSet()) {
        obj.insert(QString("bill_to_party"), ::OpenAPI::toJsonValue(m_bill_to_party));
    }
    if (m_bill_to_postal_code_isSet) {
        obj.insert(QString("bill_to_postal_code"), ::OpenAPI::toJsonValue(m_bill_to_postal_code));
    }
    if (m_collect_on_delivery.isSet()) {
        obj.insert(QString("collect_on_delivery"), ::OpenAPI::toJsonValue(m_collect_on_delivery));
    }
    if (m_contains_alcohol_isSet) {
        obj.insert(QString("contains_alcohol"), ::OpenAPI::toJsonValue(m_contains_alcohol));
    }
    if (m_custom_field1_isSet) {
        obj.insert(QString("custom_field1"), ::OpenAPI::toJsonValue(m_custom_field1));
    }
    if (m_custom_field2_isSet) {
        obj.insert(QString("custom_field2"), ::OpenAPI::toJsonValue(m_custom_field2));
    }
    if (m_custom_field3_isSet) {
        obj.insert(QString("custom_field3"), ::OpenAPI::toJsonValue(m_custom_field3));
    }
    if (m_delivered_duty_paid_isSet) {
        obj.insert(QString("delivered_duty_paid"), ::OpenAPI::toJsonValue(m_delivered_duty_paid));
    }
    if (m_dry_ice_isSet) {
        obj.insert(QString("dry_ice"), ::OpenAPI::toJsonValue(m_dry_ice));
    }
    if (m_dry_ice_weight.isSet()) {
        obj.insert(QString("dry_ice_weight"), ::OpenAPI::toJsonValue(m_dry_ice_weight));
    }
    if (m_fedex_freight.isSet()) {
        obj.insert(QString("fedex_freight"), ::OpenAPI::toJsonValue(m_fedex_freight));
    }
    if (m_freight_class_isSet) {
        obj.insert(QString("freight_class"), ::OpenAPI::toJsonValue(m_freight_class));
    }
    if (m_non_machinable_isSet) {
        obj.insert(QString("non_machinable"), ::OpenAPI::toJsonValue(m_non_machinable));
    }
    if (m_origin_type.isSet()) {
        obj.insert(QString("origin_type"), ::OpenAPI::toJsonValue(m_origin_type));
    }
    if (m_saturday_delivery_isSet) {
        obj.insert(QString("saturday_delivery"), ::OpenAPI::toJsonValue(m_saturday_delivery));
    }
    if (m_shipper_release_isSet) {
        obj.insert(QString("shipper_release"), ::OpenAPI::toJsonValue(m_shipper_release));
    }
    if (m_third_party_consignee_isSet) {
        obj.insert(QString("third_party_consignee"), ::OpenAPI::toJsonValue(m_third_party_consignee));
    }
    if (m_use_ups_ground_freight_pricing_isSet) {
        obj.insert(QString("use_ups_ground_freight_pricing"), ::OpenAPI::toJsonValue(m_use_ups_ground_freight_pricing));
    }
    return obj;
}

QString OAIAdvanced_shipment_options::getBillToAccount() const {
    return m_bill_to_account;
}
void OAIAdvanced_shipment_options::setBillToAccount(const QString &bill_to_account) {
    m_bill_to_account = bill_to_account;
    m_bill_to_account_isSet = true;
}

bool OAIAdvanced_shipment_options::is_bill_to_account_Set() const{
    return m_bill_to_account_isSet;
}

bool OAIAdvanced_shipment_options::is_bill_to_account_Valid() const{
    return m_bill_to_account_isValid;
}

QString OAIAdvanced_shipment_options::getBillToCountryCode() const {
    return m_bill_to_country_code;
}
void OAIAdvanced_shipment_options::setBillToCountryCode(const QString &bill_to_country_code) {
    m_bill_to_country_code = bill_to_country_code;
    m_bill_to_country_code_isSet = true;
}

bool OAIAdvanced_shipment_options::is_bill_to_country_code_Set() const{
    return m_bill_to_country_code_isSet;
}

bool OAIAdvanced_shipment_options::is_bill_to_country_code_Valid() const{
    return m_bill_to_country_code_isValid;
}

OAIBill_to_party OAIAdvanced_shipment_options::getBillToParty() const {
    return m_bill_to_party;
}
void OAIAdvanced_shipment_options::setBillToParty(const OAIBill_to_party &bill_to_party) {
    m_bill_to_party = bill_to_party;
    m_bill_to_party_isSet = true;
}

bool OAIAdvanced_shipment_options::is_bill_to_party_Set() const{
    return m_bill_to_party_isSet;
}

bool OAIAdvanced_shipment_options::is_bill_to_party_Valid() const{
    return m_bill_to_party_isValid;
}

QString OAIAdvanced_shipment_options::getBillToPostalCode() const {
    return m_bill_to_postal_code;
}
void OAIAdvanced_shipment_options::setBillToPostalCode(const QString &bill_to_postal_code) {
    m_bill_to_postal_code = bill_to_postal_code;
    m_bill_to_postal_code_isSet = true;
}

bool OAIAdvanced_shipment_options::is_bill_to_postal_code_Set() const{
    return m_bill_to_postal_code_isSet;
}

bool OAIAdvanced_shipment_options::is_bill_to_postal_code_Valid() const{
    return m_bill_to_postal_code_isValid;
}

OAICollect_on_delivery OAIAdvanced_shipment_options::getCollectOnDelivery() const {
    return m_collect_on_delivery;
}
void OAIAdvanced_shipment_options::setCollectOnDelivery(const OAICollect_on_delivery &collect_on_delivery) {
    m_collect_on_delivery = collect_on_delivery;
    m_collect_on_delivery_isSet = true;
}

bool OAIAdvanced_shipment_options::is_collect_on_delivery_Set() const{
    return m_collect_on_delivery_isSet;
}

bool OAIAdvanced_shipment_options::is_collect_on_delivery_Valid() const{
    return m_collect_on_delivery_isValid;
}

bool OAIAdvanced_shipment_options::isContainsAlcohol() const {
    return m_contains_alcohol;
}
void OAIAdvanced_shipment_options::setContainsAlcohol(const bool &contains_alcohol) {
    m_contains_alcohol = contains_alcohol;
    m_contains_alcohol_isSet = true;
}

bool OAIAdvanced_shipment_options::is_contains_alcohol_Set() const{
    return m_contains_alcohol_isSet;
}

bool OAIAdvanced_shipment_options::is_contains_alcohol_Valid() const{
    return m_contains_alcohol_isValid;
}

QString OAIAdvanced_shipment_options::getCustomField1() const {
    return m_custom_field1;
}
void OAIAdvanced_shipment_options::setCustomField1(const QString &custom_field1) {
    m_custom_field1 = custom_field1;
    m_custom_field1_isSet = true;
}

bool OAIAdvanced_shipment_options::is_custom_field1_Set() const{
    return m_custom_field1_isSet;
}

bool OAIAdvanced_shipment_options::is_custom_field1_Valid() const{
    return m_custom_field1_isValid;
}

QString OAIAdvanced_shipment_options::getCustomField2() const {
    return m_custom_field2;
}
void OAIAdvanced_shipment_options::setCustomField2(const QString &custom_field2) {
    m_custom_field2 = custom_field2;
    m_custom_field2_isSet = true;
}

bool OAIAdvanced_shipment_options::is_custom_field2_Set() const{
    return m_custom_field2_isSet;
}

bool OAIAdvanced_shipment_options::is_custom_field2_Valid() const{
    return m_custom_field2_isValid;
}

QString OAIAdvanced_shipment_options::getCustomField3() const {
    return m_custom_field3;
}
void OAIAdvanced_shipment_options::setCustomField3(const QString &custom_field3) {
    m_custom_field3 = custom_field3;
    m_custom_field3_isSet = true;
}

bool OAIAdvanced_shipment_options::is_custom_field3_Set() const{
    return m_custom_field3_isSet;
}

bool OAIAdvanced_shipment_options::is_custom_field3_Valid() const{
    return m_custom_field3_isValid;
}

bool OAIAdvanced_shipment_options::isDeliveredDutyPaid() const {
    return m_delivered_duty_paid;
}
void OAIAdvanced_shipment_options::setDeliveredDutyPaid(const bool &delivered_duty_paid) {
    m_delivered_duty_paid = delivered_duty_paid;
    m_delivered_duty_paid_isSet = true;
}

bool OAIAdvanced_shipment_options::is_delivered_duty_paid_Set() const{
    return m_delivered_duty_paid_isSet;
}

bool OAIAdvanced_shipment_options::is_delivered_duty_paid_Valid() const{
    return m_delivered_duty_paid_isValid;
}

bool OAIAdvanced_shipment_options::isDryIce() const {
    return m_dry_ice;
}
void OAIAdvanced_shipment_options::setDryIce(const bool &dry_ice) {
    m_dry_ice = dry_ice;
    m_dry_ice_isSet = true;
}

bool OAIAdvanced_shipment_options::is_dry_ice_Set() const{
    return m_dry_ice_isSet;
}

bool OAIAdvanced_shipment_options::is_dry_ice_Valid() const{
    return m_dry_ice_isValid;
}

OAIWeight OAIAdvanced_shipment_options::getDryIceWeight() const {
    return m_dry_ice_weight;
}
void OAIAdvanced_shipment_options::setDryIceWeight(const OAIWeight &dry_ice_weight) {
    m_dry_ice_weight = dry_ice_weight;
    m_dry_ice_weight_isSet = true;
}

bool OAIAdvanced_shipment_options::is_dry_ice_weight_Set() const{
    return m_dry_ice_weight_isSet;
}

bool OAIAdvanced_shipment_options::is_dry_ice_weight_Valid() const{
    return m_dry_ice_weight_isValid;
}

OAIAdvanced_shipment_options_fedex_freight OAIAdvanced_shipment_options::getFedexFreight() const {
    return m_fedex_freight;
}
void OAIAdvanced_shipment_options::setFedexFreight(const OAIAdvanced_shipment_options_fedex_freight &fedex_freight) {
    m_fedex_freight = fedex_freight;
    m_fedex_freight_isSet = true;
}

bool OAIAdvanced_shipment_options::is_fedex_freight_Set() const{
    return m_fedex_freight_isSet;
}

bool OAIAdvanced_shipment_options::is_fedex_freight_Valid() const{
    return m_fedex_freight_isValid;
}

QString OAIAdvanced_shipment_options::getFreightClass() const {
    return m_freight_class;
}
void OAIAdvanced_shipment_options::setFreightClass(const QString &freight_class) {
    m_freight_class = freight_class;
    m_freight_class_isSet = true;
}

bool OAIAdvanced_shipment_options::is_freight_class_Set() const{
    return m_freight_class_isSet;
}

bool OAIAdvanced_shipment_options::is_freight_class_Valid() const{
    return m_freight_class_isValid;
}

bool OAIAdvanced_shipment_options::isNonMachinable() const {
    return m_non_machinable;
}
void OAIAdvanced_shipment_options::setNonMachinable(const bool &non_machinable) {
    m_non_machinable = non_machinable;
    m_non_machinable_isSet = true;
}

bool OAIAdvanced_shipment_options::is_non_machinable_Set() const{
    return m_non_machinable_isSet;
}

bool OAIAdvanced_shipment_options::is_non_machinable_Valid() const{
    return m_non_machinable_isValid;
}

OAIOrigin_type OAIAdvanced_shipment_options::getOriginType() const {
    return m_origin_type;
}
void OAIAdvanced_shipment_options::setOriginType(const OAIOrigin_type &origin_type) {
    m_origin_type = origin_type;
    m_origin_type_isSet = true;
}

bool OAIAdvanced_shipment_options::is_origin_type_Set() const{
    return m_origin_type_isSet;
}

bool OAIAdvanced_shipment_options::is_origin_type_Valid() const{
    return m_origin_type_isValid;
}

bool OAIAdvanced_shipment_options::isSaturdayDelivery() const {
    return m_saturday_delivery;
}
void OAIAdvanced_shipment_options::setSaturdayDelivery(const bool &saturday_delivery) {
    m_saturday_delivery = saturday_delivery;
    m_saturday_delivery_isSet = true;
}

bool OAIAdvanced_shipment_options::is_saturday_delivery_Set() const{
    return m_saturday_delivery_isSet;
}

bool OAIAdvanced_shipment_options::is_saturday_delivery_Valid() const{
    return m_saturday_delivery_isValid;
}

bool OAIAdvanced_shipment_options::isShipperRelease() const {
    return m_shipper_release;
}
void OAIAdvanced_shipment_options::setShipperRelease(const bool &shipper_release) {
    m_shipper_release = shipper_release;
    m_shipper_release_isSet = true;
}

bool OAIAdvanced_shipment_options::is_shipper_release_Set() const{
    return m_shipper_release_isSet;
}

bool OAIAdvanced_shipment_options::is_shipper_release_Valid() const{
    return m_shipper_release_isValid;
}

bool OAIAdvanced_shipment_options::isThirdPartyConsignee() const {
    return m_third_party_consignee;
}
void OAIAdvanced_shipment_options::setThirdPartyConsignee(const bool &third_party_consignee) {
    m_third_party_consignee = third_party_consignee;
    m_third_party_consignee_isSet = true;
}

bool OAIAdvanced_shipment_options::is_third_party_consignee_Set() const{
    return m_third_party_consignee_isSet;
}

bool OAIAdvanced_shipment_options::is_third_party_consignee_Valid() const{
    return m_third_party_consignee_isValid;
}

bool OAIAdvanced_shipment_options::isUseUpsGroundFreightPricing() const {
    return m_use_ups_ground_freight_pricing;
}
void OAIAdvanced_shipment_options::setUseUpsGroundFreightPricing(const bool &use_ups_ground_freight_pricing) {
    m_use_ups_ground_freight_pricing = use_ups_ground_freight_pricing;
    m_use_ups_ground_freight_pricing_isSet = true;
}

bool OAIAdvanced_shipment_options::is_use_ups_ground_freight_pricing_Set() const{
    return m_use_ups_ground_freight_pricing_isSet;
}

bool OAIAdvanced_shipment_options::is_use_ups_ground_freight_pricing_Valid() const{
    return m_use_ups_ground_freight_pricing_isValid;
}

bool OAIAdvanced_shipment_options::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bill_to_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bill_to_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bill_to_party.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bill_to_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collect_on_delivery.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contains_alcohol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_field1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_field2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_field3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivered_duty_paid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dry_ice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dry_ice_weight.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fedex_freight.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_freight_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_machinable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_saturday_delivery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipper_release_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_party_consignee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_ups_ground_freight_pricing_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvanced_shipment_options::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
