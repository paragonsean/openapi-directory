/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITrack_event.h
 *
 * A track event
 */

#ifndef OAITrack_event_H
#define OAITrack_event_H

#include <QJsonObject>

#include "OAIStatus_code.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITrack_event : public OAIObject {
public:
    OAITrack_event();
    OAITrack_event(QString json);
    ~OAITrack_event() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCarrierDetailCode() const;
    void setCarrierDetailCode(const QString &carrier_detail_code);
    bool is_carrier_detail_code_Set() const;
    bool is_carrier_detail_code_Valid() const;

    QDateTime getCarrierOccurredAt() const;
    void setCarrierOccurredAt(const QDateTime &carrier_occurred_at);
    bool is_carrier_occurred_at_Set() const;
    bool is_carrier_occurred_at_Valid() const;

    QString getCarrierStatusCode() const;
    void setCarrierStatusCode(const QString &carrier_status_code);
    bool is_carrier_status_code_Set() const;
    bool is_carrier_status_code_Valid() const;

    QString getCarrierStatusDescription() const;
    void setCarrierStatusDescription(const QString &carrier_status_description);
    bool is_carrier_status_description_Set() const;
    bool is_carrier_status_description_Valid() const;

    QString getCityLocality() const;
    void setCityLocality(const QString &city_locality);
    bool is_city_locality_Set() const;
    bool is_city_locality_Valid() const;

    QString getCompanyName() const;
    void setCompanyName(const QString &company_name);
    bool is_company_name_Set() const;
    bool is_company_name_Valid() const;

    QString getCountryCode() const;
    void setCountryCode(const QString &country_code);
    bool is_country_code_Set() const;
    bool is_country_code_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getEventCode() const;
    void setEventCode(const QString &event_code);
    bool is_event_code_Set() const;
    bool is_event_code_Valid() const;

    double getLatitude() const;
    void setLatitude(const double &latitude);
    bool is_latitude_Set() const;
    bool is_latitude_Valid() const;

    double getLongitude() const;
    void setLongitude(const double &longitude);
    bool is_longitude_Set() const;
    bool is_longitude_Valid() const;

    QDateTime getOccurredAt() const;
    void setOccurredAt(const QDateTime &occurred_at);
    bool is_occurred_at_Set() const;
    bool is_occurred_at_Valid() const;

    QString getPostalCode() const;
    void setPostalCode(const QString &postal_code);
    bool is_postal_code_Set() const;
    bool is_postal_code_Valid() const;

    QString getSigner() const;
    void setSigner(const QString &signer);
    bool is_signer_Set() const;
    bool is_signer_Valid() const;

    QString getStateProvince() const;
    void setStateProvince(const QString &state_province);
    bool is_state_province_Set() const;
    bool is_state_province_Valid() const;

    OAIStatus_code getStatusCode() const;
    void setStatusCode(const OAIStatus_code &status_code);
    bool is_status_code_Set() const;
    bool is_status_code_Valid() const;

    QString getStatusDescription() const;
    void setStatusDescription(const QString &status_description);
    bool is_status_description_Set() const;
    bool is_status_description_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_carrier_detail_code;
    bool m_carrier_detail_code_isSet;
    bool m_carrier_detail_code_isValid;

    QDateTime m_carrier_occurred_at;
    bool m_carrier_occurred_at_isSet;
    bool m_carrier_occurred_at_isValid;

    QString m_carrier_status_code;
    bool m_carrier_status_code_isSet;
    bool m_carrier_status_code_isValid;

    QString m_carrier_status_description;
    bool m_carrier_status_description_isSet;
    bool m_carrier_status_description_isValid;

    QString m_city_locality;
    bool m_city_locality_isSet;
    bool m_city_locality_isValid;

    QString m_company_name;
    bool m_company_name_isSet;
    bool m_company_name_isValid;

    QString m_country_code;
    bool m_country_code_isSet;
    bool m_country_code_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_event_code;
    bool m_event_code_isSet;
    bool m_event_code_isValid;

    double m_latitude;
    bool m_latitude_isSet;
    bool m_latitude_isValid;

    double m_longitude;
    bool m_longitude_isSet;
    bool m_longitude_isValid;

    QDateTime m_occurred_at;
    bool m_occurred_at_isSet;
    bool m_occurred_at_isValid;

    QString m_postal_code;
    bool m_postal_code_isSet;
    bool m_postal_code_isValid;

    QString m_signer;
    bool m_signer_isSet;
    bool m_signer_isValid;

    QString m_state_province;
    bool m_state_province_isSet;
    bool m_state_province_isValid;

    OAIStatus_code m_status_code;
    bool m_status_code_isSet;
    bool m_status_code_isValid;

    QString m_status_description;
    bool m_status_description_isSet;
    bool m_status_description_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITrack_event)

#endif // OAITrack_event_H
