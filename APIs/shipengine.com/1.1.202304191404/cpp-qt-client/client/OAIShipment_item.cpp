/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShipment_item.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShipment_item::OAIShipment_item(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShipment_item::OAIShipment_item() {
    this->initializeModel();
}

OAIShipment_item::~OAIShipment_item() {}

void OAIShipment_item::initializeModel() {

    m_asin_isSet = false;
    m_asin_isValid = false;

    m_external_order_id_isSet = false;
    m_external_order_id_isValid = false;

    m_external_order_item_id_isSet = false;
    m_external_order_item_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_order_source_code_isSet = false;
    m_order_source_code_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_sales_order_id_isSet = false;
    m_sales_order_id_isValid = false;

    m_sales_order_item_id_isSet = false;
    m_sales_order_item_id_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;
}

void OAIShipment_item::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShipment_item::fromJsonObject(QJsonObject json) {

    m_asin_isValid = ::OpenAPI::fromJsonValue(m_asin, json[QString("asin")]);
    m_asin_isSet = !json[QString("asin")].isNull() && m_asin_isValid;

    m_external_order_id_isValid = ::OpenAPI::fromJsonValue(m_external_order_id, json[QString("external_order_id")]);
    m_external_order_id_isSet = !json[QString("external_order_id")].isNull() && m_external_order_id_isValid;

    m_external_order_item_id_isValid = ::OpenAPI::fromJsonValue(m_external_order_item_id, json[QString("external_order_item_id")]);
    m_external_order_item_id_isSet = !json[QString("external_order_item_id")].isNull() && m_external_order_item_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_order_source_code_isValid = ::OpenAPI::fromJsonValue(m_order_source_code, json[QString("order_source_code")]);
    m_order_source_code_isSet = !json[QString("order_source_code")].isNull() && m_order_source_code_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_sales_order_id_isValid = ::OpenAPI::fromJsonValue(m_sales_order_id, json[QString("sales_order_id")]);
    m_sales_order_id_isSet = !json[QString("sales_order_id")].isNull() && m_sales_order_id_isValid;

    m_sales_order_item_id_isValid = ::OpenAPI::fromJsonValue(m_sales_order_item_id, json[QString("sales_order_item_id")]);
    m_sales_order_item_id_isSet = !json[QString("sales_order_item_id")].isNull() && m_sales_order_item_id_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;
}

QString OAIShipment_item::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShipment_item::asJsonObject() const {
    QJsonObject obj;
    if (m_asin_isSet) {
        obj.insert(QString("asin"), ::OpenAPI::toJsonValue(m_asin));
    }
    if (m_external_order_id_isSet) {
        obj.insert(QString("external_order_id"), ::OpenAPI::toJsonValue(m_external_order_id));
    }
    if (m_external_order_item_id_isSet) {
        obj.insert(QString("external_order_item_id"), ::OpenAPI::toJsonValue(m_external_order_item_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_order_source_code.isSet()) {
        obj.insert(QString("order_source_code"), ::OpenAPI::toJsonValue(m_order_source_code));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_sales_order_id_isSet) {
        obj.insert(QString("sales_order_id"), ::OpenAPI::toJsonValue(m_sales_order_id));
    }
    if (m_sales_order_item_id_isSet) {
        obj.insert(QString("sales_order_item_id"), ::OpenAPI::toJsonValue(m_sales_order_item_id));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    return obj;
}

QString OAIShipment_item::getAsin() const {
    return m_asin;
}
void OAIShipment_item::setAsin(const QString &asin) {
    m_asin = asin;
    m_asin_isSet = true;
}

bool OAIShipment_item::is_asin_Set() const{
    return m_asin_isSet;
}

bool OAIShipment_item::is_asin_Valid() const{
    return m_asin_isValid;
}

QString OAIShipment_item::getExternalOrderId() const {
    return m_external_order_id;
}
void OAIShipment_item::setExternalOrderId(const QString &external_order_id) {
    m_external_order_id = external_order_id;
    m_external_order_id_isSet = true;
}

bool OAIShipment_item::is_external_order_id_Set() const{
    return m_external_order_id_isSet;
}

bool OAIShipment_item::is_external_order_id_Valid() const{
    return m_external_order_id_isValid;
}

QString OAIShipment_item::getExternalOrderItemId() const {
    return m_external_order_item_id;
}
void OAIShipment_item::setExternalOrderItemId(const QString &external_order_item_id) {
    m_external_order_item_id = external_order_item_id;
    m_external_order_item_id_isSet = true;
}

bool OAIShipment_item::is_external_order_item_id_Set() const{
    return m_external_order_item_id_isSet;
}

bool OAIShipment_item::is_external_order_item_id_Valid() const{
    return m_external_order_item_id_isValid;
}

QString OAIShipment_item::getName() const {
    return m_name;
}
void OAIShipment_item::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIShipment_item::is_name_Set() const{
    return m_name_isSet;
}

bool OAIShipment_item::is_name_Valid() const{
    return m_name_isValid;
}

OAIOrder_source_name OAIShipment_item::getOrderSourceCode() const {
    return m_order_source_code;
}
void OAIShipment_item::setOrderSourceCode(const OAIOrder_source_name &order_source_code) {
    m_order_source_code = order_source_code;
    m_order_source_code_isSet = true;
}

bool OAIShipment_item::is_order_source_code_Set() const{
    return m_order_source_code_isSet;
}

bool OAIShipment_item::is_order_source_code_Valid() const{
    return m_order_source_code_isValid;
}

qint32 OAIShipment_item::getQuantity() const {
    return m_quantity;
}
void OAIShipment_item::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIShipment_item::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIShipment_item::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIShipment_item::getSalesOrderId() const {
    return m_sales_order_id;
}
void OAIShipment_item::setSalesOrderId(const QString &sales_order_id) {
    m_sales_order_id = sales_order_id;
    m_sales_order_id_isSet = true;
}

bool OAIShipment_item::is_sales_order_id_Set() const{
    return m_sales_order_id_isSet;
}

bool OAIShipment_item::is_sales_order_id_Valid() const{
    return m_sales_order_id_isValid;
}

QString OAIShipment_item::getSalesOrderItemId() const {
    return m_sales_order_item_id;
}
void OAIShipment_item::setSalesOrderItemId(const QString &sales_order_item_id) {
    m_sales_order_item_id = sales_order_item_id;
    m_sales_order_item_id_isSet = true;
}

bool OAIShipment_item::is_sales_order_item_id_Set() const{
    return m_sales_order_item_id_isSet;
}

bool OAIShipment_item::is_sales_order_item_id_Valid() const{
    return m_sales_order_item_id_isValid;
}

QString OAIShipment_item::getSku() const {
    return m_sku;
}
void OAIShipment_item::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIShipment_item::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIShipment_item::is_sku_Valid() const{
    return m_sku_isValid;
}

bool OAIShipment_item::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_order_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_source_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_order_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShipment_item::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
