/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPickup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPickup::OAIPickup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPickup::OAIPickup() {
    this->initializeModel();
}

OAIPickup::~OAIPickup() {}

void OAIPickup::initializeModel() {

    m_cancelled_at_isSet = false;
    m_cancelled_at_isValid = false;

    m_carrier_id_isSet = false;
    m_carrier_id_isValid = false;

    m_confirmation_number_isSet = false;
    m_confirmation_number_isValid = false;

    m_contact_details_isSet = false;
    m_contact_details_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_label_ids_isSet = false;
    m_label_ids_isValid = false;

    m_pickup_address_isSet = false;
    m_pickup_address_isValid = false;

    m_pickup_id_isSet = false;
    m_pickup_id_isValid = false;

    m_pickup_notes_isSet = false;
    m_pickup_notes_isValid = false;

    m_pickup_window_isSet = false;
    m_pickup_window_isValid = false;

    m_pickup_windows_isSet = false;
    m_pickup_windows_isValid = false;

    m_warehouse_id_isSet = false;
    m_warehouse_id_isValid = false;
}

void OAIPickup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPickup::fromJsonObject(QJsonObject json) {

    m_cancelled_at_isValid = ::OpenAPI::fromJsonValue(m_cancelled_at, json[QString("cancelled_at")]);
    m_cancelled_at_isSet = !json[QString("cancelled_at")].isNull() && m_cancelled_at_isValid;

    m_carrier_id_isValid = ::OpenAPI::fromJsonValue(m_carrier_id, json[QString("carrier_id")]);
    m_carrier_id_isSet = !json[QString("carrier_id")].isNull() && m_carrier_id_isValid;

    m_confirmation_number_isValid = ::OpenAPI::fromJsonValue(m_confirmation_number, json[QString("confirmation_number")]);
    m_confirmation_number_isSet = !json[QString("confirmation_number")].isNull() && m_confirmation_number_isValid;

    m_contact_details_isValid = ::OpenAPI::fromJsonValue(m_contact_details, json[QString("contact_details")]);
    m_contact_details_isSet = !json[QString("contact_details")].isNull() && m_contact_details_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_label_ids_isValid = ::OpenAPI::fromJsonValue(m_label_ids, json[QString("label_ids")]);
    m_label_ids_isSet = !json[QString("label_ids")].isNull() && m_label_ids_isValid;

    m_pickup_address_isValid = ::OpenAPI::fromJsonValue(m_pickup_address, json[QString("pickup_address")]);
    m_pickup_address_isSet = !json[QString("pickup_address")].isNull() && m_pickup_address_isValid;

    m_pickup_id_isValid = ::OpenAPI::fromJsonValue(m_pickup_id, json[QString("pickup_id")]);
    m_pickup_id_isSet = !json[QString("pickup_id")].isNull() && m_pickup_id_isValid;

    m_pickup_notes_isValid = ::OpenAPI::fromJsonValue(m_pickup_notes, json[QString("pickup_notes")]);
    m_pickup_notes_isSet = !json[QString("pickup_notes")].isNull() && m_pickup_notes_isValid;

    m_pickup_window_isValid = ::OpenAPI::fromJsonValue(m_pickup_window, json[QString("pickup_window")]);
    m_pickup_window_isSet = !json[QString("pickup_window")].isNull() && m_pickup_window_isValid;

    m_pickup_windows_isValid = ::OpenAPI::fromJsonValue(m_pickup_windows, json[QString("pickup_windows")]);
    m_pickup_windows_isSet = !json[QString("pickup_windows")].isNull() && m_pickup_windows_isValid;

    m_warehouse_id_isValid = ::OpenAPI::fromJsonValue(m_warehouse_id, json[QString("warehouse_id")]);
    m_warehouse_id_isSet = !json[QString("warehouse_id")].isNull() && m_warehouse_id_isValid;
}

QString OAIPickup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPickup::asJsonObject() const {
    QJsonObject obj;
    if (m_cancelled_at_isSet) {
        obj.insert(QString("cancelled_at"), ::OpenAPI::toJsonValue(m_cancelled_at));
    }
    if (m_carrier_id_isSet) {
        obj.insert(QString("carrier_id"), ::OpenAPI::toJsonValue(m_carrier_id));
    }
    if (m_confirmation_number_isSet) {
        obj.insert(QString("confirmation_number"), ::OpenAPI::toJsonValue(m_confirmation_number));
    }
    if (m_contact_details.isSet()) {
        obj.insert(QString("contact_details"), ::OpenAPI::toJsonValue(m_contact_details));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_label_ids.size() > 0) {
        obj.insert(QString("label_ids"), ::OpenAPI::toJsonValue(m_label_ids));
    }
    if (m_pickup_address.isSet()) {
        obj.insert(QString("pickup_address"), ::OpenAPI::toJsonValue(m_pickup_address));
    }
    if (m_pickup_id_isSet) {
        obj.insert(QString("pickup_id"), ::OpenAPI::toJsonValue(m_pickup_id));
    }
    if (m_pickup_notes_isSet) {
        obj.insert(QString("pickup_notes"), ::OpenAPI::toJsonValue(m_pickup_notes));
    }
    if (m_pickup_window.isSet()) {
        obj.insert(QString("pickup_window"), ::OpenAPI::toJsonValue(m_pickup_window));
    }
    if (m_pickup_windows.size() > 0) {
        obj.insert(QString("pickup_windows"), ::OpenAPI::toJsonValue(m_pickup_windows));
    }
    if (m_warehouse_id_isSet) {
        obj.insert(QString("warehouse_id"), ::OpenAPI::toJsonValue(m_warehouse_id));
    }
    return obj;
}

QDateTime OAIPickup::getCancelledAt() const {
    return m_cancelled_at;
}
void OAIPickup::setCancelledAt(const QDateTime &cancelled_at) {
    m_cancelled_at = cancelled_at;
    m_cancelled_at_isSet = true;
}

bool OAIPickup::is_cancelled_at_Set() const{
    return m_cancelled_at_isSet;
}

bool OAIPickup::is_cancelled_at_Valid() const{
    return m_cancelled_at_isValid;
}

QString OAIPickup::getCarrierId() const {
    return m_carrier_id;
}
void OAIPickup::setCarrierId(const QString &carrier_id) {
    m_carrier_id = carrier_id;
    m_carrier_id_isSet = true;
}

bool OAIPickup::is_carrier_id_Set() const{
    return m_carrier_id_isSet;
}

bool OAIPickup::is_carrier_id_Valid() const{
    return m_carrier_id_isValid;
}

QString OAIPickup::getConfirmationNumber() const {
    return m_confirmation_number;
}
void OAIPickup::setConfirmationNumber(const QString &confirmation_number) {
    m_confirmation_number = confirmation_number;
    m_confirmation_number_isSet = true;
}

bool OAIPickup::is_confirmation_number_Set() const{
    return m_confirmation_number_isSet;
}

bool OAIPickup::is_confirmation_number_Valid() const{
    return m_confirmation_number_isValid;
}

OAIContact_details OAIPickup::getContactDetails() const {
    return m_contact_details;
}
void OAIPickup::setContactDetails(const OAIContact_details &contact_details) {
    m_contact_details = contact_details;
    m_contact_details_isSet = true;
}

bool OAIPickup::is_contact_details_Set() const{
    return m_contact_details_isSet;
}

bool OAIPickup::is_contact_details_Valid() const{
    return m_contact_details_isValid;
}

QDateTime OAIPickup::getCreatedAt() const {
    return m_created_at;
}
void OAIPickup::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPickup::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPickup::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<QString> OAIPickup::getLabelIds() const {
    return m_label_ids;
}
void OAIPickup::setLabelIds(const QList<QString> &label_ids) {
    m_label_ids = label_ids;
    m_label_ids_isSet = true;
}

bool OAIPickup::is_label_ids_Set() const{
    return m_label_ids_isSet;
}

bool OAIPickup::is_label_ids_Valid() const{
    return m_label_ids_isValid;
}

OAIAddress OAIPickup::getPickupAddress() const {
    return m_pickup_address;
}
void OAIPickup::setPickupAddress(const OAIAddress &pickup_address) {
    m_pickup_address = pickup_address;
    m_pickup_address_isSet = true;
}

bool OAIPickup::is_pickup_address_Set() const{
    return m_pickup_address_isSet;
}

bool OAIPickup::is_pickup_address_Valid() const{
    return m_pickup_address_isValid;
}

QString OAIPickup::getPickupId() const {
    return m_pickup_id;
}
void OAIPickup::setPickupId(const QString &pickup_id) {
    m_pickup_id = pickup_id;
    m_pickup_id_isSet = true;
}

bool OAIPickup::is_pickup_id_Set() const{
    return m_pickup_id_isSet;
}

bool OAIPickup::is_pickup_id_Valid() const{
    return m_pickup_id_isValid;
}

QString OAIPickup::getPickupNotes() const {
    return m_pickup_notes;
}
void OAIPickup::setPickupNotes(const QString &pickup_notes) {
    m_pickup_notes = pickup_notes;
    m_pickup_notes_isSet = true;
}

bool OAIPickup::is_pickup_notes_Set() const{
    return m_pickup_notes_isSet;
}

bool OAIPickup::is_pickup_notes_Valid() const{
    return m_pickup_notes_isValid;
}

OAIPickup_window OAIPickup::getPickupWindow() const {
    return m_pickup_window;
}
void OAIPickup::setPickupWindow(const OAIPickup_window &pickup_window) {
    m_pickup_window = pickup_window;
    m_pickup_window_isSet = true;
}

bool OAIPickup::is_pickup_window_Set() const{
    return m_pickup_window_isSet;
}

bool OAIPickup::is_pickup_window_Valid() const{
    return m_pickup_window_isValid;
}

QList<OAIPickup_windows> OAIPickup::getPickupWindows() const {
    return m_pickup_windows;
}
void OAIPickup::setPickupWindows(const QList<OAIPickup_windows> &pickup_windows) {
    m_pickup_windows = pickup_windows;
    m_pickup_windows_isSet = true;
}

bool OAIPickup::is_pickup_windows_Set() const{
    return m_pickup_windows_isSet;
}

bool OAIPickup::is_pickup_windows_Valid() const{
    return m_pickup_windows_isValid;
}

QString OAIPickup::getWarehouseId() const {
    return m_warehouse_id;
}
void OAIPickup::setWarehouseId(const QString &warehouse_id) {
    m_warehouse_id = warehouse_id;
    m_warehouse_id_isSet = true;
}

bool OAIPickup::is_warehouse_id_Set() const{
    return m_warehouse_id_isSet;
}

bool OAIPickup::is_warehouse_id_Valid() const{
    return m_warehouse_id_isValid;
}

bool OAIPickup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cancelled_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmation_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_window.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_windows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPickup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
