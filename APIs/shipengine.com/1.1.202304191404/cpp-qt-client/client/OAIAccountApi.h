/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountApi_H
#define OAI_OAIAccountApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreate_account_settings_image_request_body.h"
#include "OAIError_response_body.h"
#include "OAIGet_account_settings_images_response_body.h"
#include "OAIGet_account_settings_response_body.h"
#include "OAIList_account_settings_images_response_body.h"
#include "OAIUpdate_account_settings_image_request_body.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountApi : public QObject {
    Q_OBJECT

public:
    OAIAccountApi(const int timeOut = 0);
    ~OAIAccountApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_account_settings_image_request_body OAICreate_account_settings_image_request_body [required]
    */
    virtual void createAccountImage(const OAICreate_account_settings_image_request_body &oai_create_account_settings_image_request_body);

    /**
    * @param[in]  label_image_id QString [required]
    */
    virtual void deleteAccountImageById(const QString &label_image_id);

    /**
    * @param[in]  label_image_id QString [required]
    */
    virtual void getAccountSettingsImagesById(const QString &label_image_id);


    virtual void listAccountImages();


    virtual void listAccountSettings();

    /**
    * @param[in]  label_image_id QString [required]
    * @param[in]  oai_update_account_settings_image_request_body OAIUpdate_account_settings_image_request_body [required]
    */
    virtual void updateAccountSettingsImagesById(const QString &label_image_id, const OAIUpdate_account_settings_image_request_body &oai_update_account_settings_image_request_body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createAccountImageCallback(OAIHttpRequestWorker *worker);
    void deleteAccountImageByIdCallback(OAIHttpRequestWorker *worker);
    void getAccountSettingsImagesByIdCallback(OAIHttpRequestWorker *worker);
    void listAccountImagesCallback(OAIHttpRequestWorker *worker);
    void listAccountSettingsCallback(OAIHttpRequestWorker *worker);
    void updateAccountSettingsImagesByIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createAccountImageSignal(OAIGet_account_settings_images_response_body summary);
    void deleteAccountImageByIdSignal(QString summary);
    void getAccountSettingsImagesByIdSignal(OAIGet_account_settings_images_response_body summary);
    void listAccountImagesSignal(OAIList_account_settings_images_response_body summary);
    void listAccountSettingsSignal(OAIGet_account_settings_response_body summary);
    void updateAccountSettingsImagesByIdSignal(QString summary);


    void createAccountImageSignalFull(OAIHttpRequestWorker *worker, OAIGet_account_settings_images_response_body summary);
    void deleteAccountImageByIdSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getAccountSettingsImagesByIdSignalFull(OAIHttpRequestWorker *worker, OAIGet_account_settings_images_response_body summary);
    void listAccountImagesSignalFull(OAIHttpRequestWorker *worker, OAIList_account_settings_images_response_body summary);
    void listAccountSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGet_account_settings_response_body summary);
    void updateAccountSettingsImagesByIdSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use createAccountImageSignalError() instead")
    void createAccountImageSignalE(OAIGet_account_settings_images_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAccountImageSignalError(OAIGet_account_settings_images_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccountImageByIdSignalError() instead")
    void deleteAccountImageByIdSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccountImageByIdSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountSettingsImagesByIdSignalError() instead")
    void getAccountSettingsImagesByIdSignalE(OAIGet_account_settings_images_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountSettingsImagesByIdSignalError(OAIGet_account_settings_images_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccountImagesSignalError() instead")
    void listAccountImagesSignalE(OAIList_account_settings_images_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccountImagesSignalError(OAIList_account_settings_images_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccountSettingsSignalError() instead")
    void listAccountSettingsSignalE(OAIGet_account_settings_response_body summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccountSettingsSignalError(OAIGet_account_settings_response_body summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountSettingsImagesByIdSignalError() instead")
    void updateAccountSettingsImagesByIdSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountSettingsImagesByIdSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createAccountImageSignalErrorFull() instead")
    void createAccountImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAccountImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccountImageByIdSignalErrorFull() instead")
    void deleteAccountImageByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccountImageByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountSettingsImagesByIdSignalErrorFull() instead")
    void getAccountSettingsImagesByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountSettingsImagesByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccountImagesSignalErrorFull() instead")
    void listAccountImagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccountImagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccountSettingsSignalErrorFull() instead")
    void listAccountSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccountSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountSettingsImagesByIdSignalErrorFull() instead")
    void updateAccountSettingsImagesByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountSettingsImagesByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
