/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGet_carrier_settings_response_body.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGet_carrier_settings_response_body::OAIGet_carrier_settings_response_body(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGet_carrier_settings_response_body::OAIGet_carrier_settings_response_body() {
    this->initializeModel();
}

OAIGet_carrier_settings_response_body::~OAIGet_carrier_settings_response_body() {}

void OAIGet_carrier_settings_response_body::initializeModel() {

    m_is_primary_account_isSet = false;
    m_is_primary_account_isValid = false;

    m_nickname_isSet = false;
    m_nickname_isValid = false;

    m_should_hide_account_number_on_archive_doc_isSet = false;
    m_should_hide_account_number_on_archive_doc_isValid = false;

    m_letterhead_image_isSet = false;
    m_letterhead_image_isValid = false;

    m_pickup_type_isSet = false;
    m_pickup_type_isValid = false;

    m_signature_image_isSet = false;
    m_signature_image_isValid = false;

    m_smart_post_endorsement_isSet = false;
    m_smart_post_endorsement_isValid = false;

    m_smart_post_hub_isSet = false;
    m_smart_post_hub_isValid = false;

    m_account_postal_code_isSet = false;
    m_account_postal_code_isValid = false;

    m_invoice_isSet = false;
    m_invoice_isValid = false;

    m_mail_innovations_cost_center_isSet = false;
    m_mail_innovations_cost_center_isValid = false;

    m_mail_innovations_endorsement_isSet = false;
    m_mail_innovations_endorsement_isValid = false;

    m_use_carbon_neutral_shipping_program_isSet = false;
    m_use_carbon_neutral_shipping_program_isValid = false;

    m_use_consolidation_services_isSet = false;
    m_use_consolidation_services_isValid = false;

    m_use_ground_freight_pricing_isSet = false;
    m_use_ground_freight_pricing_isValid = false;

    m_use_negotiated_rates_isSet = false;
    m_use_negotiated_rates_isValid = false;

    m_use_order_number_on_mail_innovations_labels_isSet = false;
    m_use_order_number_on_mail_innovations_labels_isValid = false;
}

void OAIGet_carrier_settings_response_body::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGet_carrier_settings_response_body::fromJsonObject(QJsonObject json) {

    m_is_primary_account_isValid = ::OpenAPI::fromJsonValue(m_is_primary_account, json[QString("is_primary_account")]);
    m_is_primary_account_isSet = !json[QString("is_primary_account")].isNull() && m_is_primary_account_isValid;

    m_nickname_isValid = ::OpenAPI::fromJsonValue(m_nickname, json[QString("nickname")]);
    m_nickname_isSet = !json[QString("nickname")].isNull() && m_nickname_isValid;

    m_should_hide_account_number_on_archive_doc_isValid = ::OpenAPI::fromJsonValue(m_should_hide_account_number_on_archive_doc, json[QString("should_hide_account_number_on_archive_doc")]);
    m_should_hide_account_number_on_archive_doc_isSet = !json[QString("should_hide_account_number_on_archive_doc")].isNull() && m_should_hide_account_number_on_archive_doc_isValid;

    m_letterhead_image_isValid = ::OpenAPI::fromJsonValue(m_letterhead_image, json[QString("letterhead_image")]);
    m_letterhead_image_isSet = !json[QString("letterhead_image")].isNull() && m_letterhead_image_isValid;

    m_pickup_type_isValid = ::OpenAPI::fromJsonValue(m_pickup_type, json[QString("pickup_type")]);
    m_pickup_type_isSet = !json[QString("pickup_type")].isNull() && m_pickup_type_isValid;

    m_signature_image_isValid = ::OpenAPI::fromJsonValue(m_signature_image, json[QString("signature_image")]);
    m_signature_image_isSet = !json[QString("signature_image")].isNull() && m_signature_image_isValid;

    m_smart_post_endorsement_isValid = ::OpenAPI::fromJsonValue(m_smart_post_endorsement, json[QString("smart_post_endorsement")]);
    m_smart_post_endorsement_isSet = !json[QString("smart_post_endorsement")].isNull() && m_smart_post_endorsement_isValid;

    m_smart_post_hub_isValid = ::OpenAPI::fromJsonValue(m_smart_post_hub, json[QString("smart_post_hub")]);
    m_smart_post_hub_isSet = !json[QString("smart_post_hub")].isNull() && m_smart_post_hub_isValid;

    m_account_postal_code_isValid = ::OpenAPI::fromJsonValue(m_account_postal_code, json[QString("account_postal_code")]);
    m_account_postal_code_isSet = !json[QString("account_postal_code")].isNull() && m_account_postal_code_isValid;

    m_invoice_isValid = ::OpenAPI::fromJsonValue(m_invoice, json[QString("invoice")]);
    m_invoice_isSet = !json[QString("invoice")].isNull() && m_invoice_isValid;

    m_mail_innovations_cost_center_isValid = ::OpenAPI::fromJsonValue(m_mail_innovations_cost_center, json[QString("mail_innovations_cost_center")]);
    m_mail_innovations_cost_center_isSet = !json[QString("mail_innovations_cost_center")].isNull() && m_mail_innovations_cost_center_isValid;

    m_mail_innovations_endorsement_isValid = ::OpenAPI::fromJsonValue(m_mail_innovations_endorsement, json[QString("mail_innovations_endorsement")]);
    m_mail_innovations_endorsement_isSet = !json[QString("mail_innovations_endorsement")].isNull() && m_mail_innovations_endorsement_isValid;

    m_use_carbon_neutral_shipping_program_isValid = ::OpenAPI::fromJsonValue(m_use_carbon_neutral_shipping_program, json[QString("use_carbon_neutral_shipping_program")]);
    m_use_carbon_neutral_shipping_program_isSet = !json[QString("use_carbon_neutral_shipping_program")].isNull() && m_use_carbon_neutral_shipping_program_isValid;

    m_use_consolidation_services_isValid = ::OpenAPI::fromJsonValue(m_use_consolidation_services, json[QString("use_consolidation_services")]);
    m_use_consolidation_services_isSet = !json[QString("use_consolidation_services")].isNull() && m_use_consolidation_services_isValid;

    m_use_ground_freight_pricing_isValid = ::OpenAPI::fromJsonValue(m_use_ground_freight_pricing, json[QString("use_ground_freight_pricing")]);
    m_use_ground_freight_pricing_isSet = !json[QString("use_ground_freight_pricing")].isNull() && m_use_ground_freight_pricing_isValid;

    m_use_negotiated_rates_isValid = ::OpenAPI::fromJsonValue(m_use_negotiated_rates, json[QString("use_negotiated_rates")]);
    m_use_negotiated_rates_isSet = !json[QString("use_negotiated_rates")].isNull() && m_use_negotiated_rates_isValid;

    m_use_order_number_on_mail_innovations_labels_isValid = ::OpenAPI::fromJsonValue(m_use_order_number_on_mail_innovations_labels, json[QString("use_order_number_on_mail_innovations_labels")]);
    m_use_order_number_on_mail_innovations_labels_isSet = !json[QString("use_order_number_on_mail_innovations_labels")].isNull() && m_use_order_number_on_mail_innovations_labels_isValid;
}

QString OAIGet_carrier_settings_response_body::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGet_carrier_settings_response_body::asJsonObject() const {
    QJsonObject obj;
    if (m_is_primary_account_isSet) {
        obj.insert(QString("is_primary_account"), ::OpenAPI::toJsonValue(m_is_primary_account));
    }
    if (m_nickname_isSet) {
        obj.insert(QString("nickname"), ::OpenAPI::toJsonValue(m_nickname));
    }
    if (m_should_hide_account_number_on_archive_doc_isSet) {
        obj.insert(QString("should_hide_account_number_on_archive_doc"), ::OpenAPI::toJsonValue(m_should_hide_account_number_on_archive_doc));
    }
    if (m_letterhead_image_isSet) {
        obj.insert(QString("letterhead_image"), ::OpenAPI::toJsonValue(m_letterhead_image));
    }
    if (m_pickup_type.isSet()) {
        obj.insert(QString("pickup_type"), ::OpenAPI::toJsonValue(m_pickup_type));
    }
    if (m_signature_image_isSet) {
        obj.insert(QString("signature_image"), ::OpenAPI::toJsonValue(m_signature_image));
    }
    if (m_smart_post_endorsement.isSet()) {
        obj.insert(QString("smart_post_endorsement"), ::OpenAPI::toJsonValue(m_smart_post_endorsement));
    }
    if (m_smart_post_hub.isSet()) {
        obj.insert(QString("smart_post_hub"), ::OpenAPI::toJsonValue(m_smart_post_hub));
    }
    if (m_account_postal_code_isSet) {
        obj.insert(QString("account_postal_code"), ::OpenAPI::toJsonValue(m_account_postal_code));
    }
    if (m_invoice.isSet()) {
        obj.insert(QString("invoice"), ::OpenAPI::toJsonValue(m_invoice));
    }
    if (m_mail_innovations_cost_center_isSet) {
        obj.insert(QString("mail_innovations_cost_center"), ::OpenAPI::toJsonValue(m_mail_innovations_cost_center));
    }
    if (m_mail_innovations_endorsement.isSet()) {
        obj.insert(QString("mail_innovations_endorsement"), ::OpenAPI::toJsonValue(m_mail_innovations_endorsement));
    }
    if (m_use_carbon_neutral_shipping_program_isSet) {
        obj.insert(QString("use_carbon_neutral_shipping_program"), ::OpenAPI::toJsonValue(m_use_carbon_neutral_shipping_program));
    }
    if (m_use_consolidation_services_isSet) {
        obj.insert(QString("use_consolidation_services"), ::OpenAPI::toJsonValue(m_use_consolidation_services));
    }
    if (m_use_ground_freight_pricing_isSet) {
        obj.insert(QString("use_ground_freight_pricing"), ::OpenAPI::toJsonValue(m_use_ground_freight_pricing));
    }
    if (m_use_negotiated_rates_isSet) {
        obj.insert(QString("use_negotiated_rates"), ::OpenAPI::toJsonValue(m_use_negotiated_rates));
    }
    if (m_use_order_number_on_mail_innovations_labels_isSet) {
        obj.insert(QString("use_order_number_on_mail_innovations_labels"), ::OpenAPI::toJsonValue(m_use_order_number_on_mail_innovations_labels));
    }
    return obj;
}

bool OAIGet_carrier_settings_response_body::isIsPrimaryAccount() const {
    return m_is_primary_account;
}
void OAIGet_carrier_settings_response_body::setIsPrimaryAccount(const bool &is_primary_account) {
    m_is_primary_account = is_primary_account;
    m_is_primary_account_isSet = true;
}

bool OAIGet_carrier_settings_response_body::is_is_primary_account_Set() const{
    return m_is_primary_account_isSet;
}

bool OAIGet_carrier_settings_response_body::is_is_primary_account_Valid() const{
    return m_is_primary_account_isValid;
}

QString OAIGet_carrier_settings_response_body::getNickname() const {
    return m_nickname;
}
void OAIGet_carrier_settings_response_body::setNickname(const QString &nickname) {
    m_nickname = nickname;
    m_nickname_isSet = true;
}

bool OAIGet_carrier_settings_response_body::is_nickname_Set() const{
    return m_nickname_isSet;
}

bool OAIGet_carrier_settings_response_body::is_nickname_Valid() const{
    return m_nickname_isValid;
}

bool OAIGet_carrier_settings_response_body::isShouldHideAccountNumberOnArchiveDoc() const {
    return m_should_hide_account_number_on_archive_doc;
}
void OAIGet_carrier_settings_response_body::setShouldHideAccountNumberOnArchiveDoc(const bool &should_hide_account_number_on_archive_doc) {
    m_should_hide_account_number_on_archive_doc = should_hide_account_number_on_archive_doc;
    m_should_hide_account_number_on_archive_doc_isSet = true;
}

bool OAIGet_carrier_settings_response_body::is_should_hide_account_number_on_archive_doc_Set() const{
    return m_should_hide_account_number_on_archive_doc_isSet;
}

bool OAIGet_carrier_settings_response_body::is_should_hide_account_number_on_archive_doc_Valid() const{
    return m_should_hide_account_number_on_archive_doc_isValid;
}

QString OAIGet_carrier_settings_response_body::getLetterheadImage() const {
    return m_letterhead_image;
}
void OAIGet_carrier_settings_response_body::setLetterheadImage(const QString &letterhead_image) {
    m_letterhead_image = letterhead_image;
    m_letterhead_image_isSet = true;
}

bool OAIGet_carrier_settings_response_body::is_letterhead_image_Set() const{
    return m_letterhead_image_isSet;
}

bool OAIGet_carrier_settings_response_body::is_letterhead_image_Valid() const{
    return m_letterhead_image_isValid;
}

OAIUps_pickup_type OAIGet_carrier_settings_response_body::getPickupType() const {
    return m_pickup_type;
}
void OAIGet_carrier_settings_response_body::setPickupType(const OAIUps_pickup_type &pickup_type) {
    m_pickup_type = pickup_type;
    m_pickup_type_isSet = true;
}

bool OAIGet_carrier_settings_response_body::is_pickup_type_Set() const{
    return m_pickup_type_isSet;
}

bool OAIGet_carrier_settings_response_body::is_pickup_type_Valid() const{
    return m_pickup_type_isValid;
}

QString OAIGet_carrier_settings_response_body::getSignatureImage() const {
    return m_signature_image;
}
void OAIGet_carrier_settings_response_body::setSignatureImage(const QString &signature_image) {
    m_signature_image = signature_image;
    m_signature_image_isSet = true;
}

bool OAIGet_carrier_settings_response_body::is_signature_image_Set() const{
    return m_signature_image_isSet;
}

bool OAIGet_carrier_settings_response_body::is_signature_image_Valid() const{
    return m_signature_image_isValid;
}

OAIAncillary_service_endorsement OAIGet_carrier_settings_response_body::getSmartPostEndorsement() const {
    return m_smart_post_endorsement;
}
void OAIGet_carrier_settings_response_body::setSmartPostEndorsement(const OAIAncillary_service_endorsement &smart_post_endorsement) {
    m_smart_post_endorsement = smart_post_endorsement;
    m_smart_post_endorsement_isSet = true;
}

bool OAIGet_carrier_settings_response_body::is_smart_post_endorsement_Set() const{
    return m_smart_post_endorsement_isSet;
}

bool OAIGet_carrier_settings_response_body::is_smart_post_endorsement_Valid() const{
    return m_smart_post_endorsement_isValid;
}

OAISmart_post_hub OAIGet_carrier_settings_response_body::getSmartPostHub() const {
    return m_smart_post_hub;
}
void OAIGet_carrier_settings_response_body::setSmartPostHub(const OAISmart_post_hub &smart_post_hub) {
    m_smart_post_hub = smart_post_hub;
    m_smart_post_hub_isSet = true;
}

bool OAIGet_carrier_settings_response_body::is_smart_post_hub_Set() const{
    return m_smart_post_hub_isSet;
}

bool OAIGet_carrier_settings_response_body::is_smart_post_hub_Valid() const{
    return m_smart_post_hub_isValid;
}

QString OAIGet_carrier_settings_response_body::getAccountPostalCode() const {
    return m_account_postal_code;
}
void OAIGet_carrier_settings_response_body::setAccountPostalCode(const QString &account_postal_code) {
    m_account_postal_code = account_postal_code;
    m_account_postal_code_isSet = true;
}

bool OAIGet_carrier_settings_response_body::is_account_postal_code_Set() const{
    return m_account_postal_code_isSet;
}

bool OAIGet_carrier_settings_response_body::is_account_postal_code_Valid() const{
    return m_account_postal_code_isValid;
}

OAIUps_invoice OAIGet_carrier_settings_response_body::getInvoice() const {
    return m_invoice;
}
void OAIGet_carrier_settings_response_body::setInvoice(const OAIUps_invoice &invoice) {
    m_invoice = invoice;
    m_invoice_isSet = true;
}

bool OAIGet_carrier_settings_response_body::is_invoice_Set() const{
    return m_invoice_isSet;
}

bool OAIGet_carrier_settings_response_body::is_invoice_Valid() const{
    return m_invoice_isValid;
}

QString OAIGet_carrier_settings_response_body::getMailInnovationsCostCenter() const {
    return m_mail_innovations_cost_center;
}
void OAIGet_carrier_settings_response_body::setMailInnovationsCostCenter(const QString &mail_innovations_cost_center) {
    m_mail_innovations_cost_center = mail_innovations_cost_center;
    m_mail_innovations_cost_center_isSet = true;
}

bool OAIGet_carrier_settings_response_body::is_mail_innovations_cost_center_Set() const{
    return m_mail_innovations_cost_center_isSet;
}

bool OAIGet_carrier_settings_response_body::is_mail_innovations_cost_center_Valid() const{
    return m_mail_innovations_cost_center_isValid;
}

OAIAncillary_service_endorsement OAIGet_carrier_settings_response_body::getMailInnovationsEndorsement() const {
    return m_mail_innovations_endorsement;
}
void OAIGet_carrier_settings_response_body::setMailInnovationsEndorsement(const OAIAncillary_service_endorsement &mail_innovations_endorsement) {
    m_mail_innovations_endorsement = mail_innovations_endorsement;
    m_mail_innovations_endorsement_isSet = true;
}

bool OAIGet_carrier_settings_response_body::is_mail_innovations_endorsement_Set() const{
    return m_mail_innovations_endorsement_isSet;
}

bool OAIGet_carrier_settings_response_body::is_mail_innovations_endorsement_Valid() const{
    return m_mail_innovations_endorsement_isValid;
}

bool OAIGet_carrier_settings_response_body::isUseCarbonNeutralShippingProgram() const {
    return m_use_carbon_neutral_shipping_program;
}
void OAIGet_carrier_settings_response_body::setUseCarbonNeutralShippingProgram(const bool &use_carbon_neutral_shipping_program) {
    m_use_carbon_neutral_shipping_program = use_carbon_neutral_shipping_program;
    m_use_carbon_neutral_shipping_program_isSet = true;
}

bool OAIGet_carrier_settings_response_body::is_use_carbon_neutral_shipping_program_Set() const{
    return m_use_carbon_neutral_shipping_program_isSet;
}

bool OAIGet_carrier_settings_response_body::is_use_carbon_neutral_shipping_program_Valid() const{
    return m_use_carbon_neutral_shipping_program_isValid;
}

bool OAIGet_carrier_settings_response_body::isUseConsolidationServices() const {
    return m_use_consolidation_services;
}
void OAIGet_carrier_settings_response_body::setUseConsolidationServices(const bool &use_consolidation_services) {
    m_use_consolidation_services = use_consolidation_services;
    m_use_consolidation_services_isSet = true;
}

bool OAIGet_carrier_settings_response_body::is_use_consolidation_services_Set() const{
    return m_use_consolidation_services_isSet;
}

bool OAIGet_carrier_settings_response_body::is_use_consolidation_services_Valid() const{
    return m_use_consolidation_services_isValid;
}

bool OAIGet_carrier_settings_response_body::isUseGroundFreightPricing() const {
    return m_use_ground_freight_pricing;
}
void OAIGet_carrier_settings_response_body::setUseGroundFreightPricing(const bool &use_ground_freight_pricing) {
    m_use_ground_freight_pricing = use_ground_freight_pricing;
    m_use_ground_freight_pricing_isSet = true;
}

bool OAIGet_carrier_settings_response_body::is_use_ground_freight_pricing_Set() const{
    return m_use_ground_freight_pricing_isSet;
}

bool OAIGet_carrier_settings_response_body::is_use_ground_freight_pricing_Valid() const{
    return m_use_ground_freight_pricing_isValid;
}

bool OAIGet_carrier_settings_response_body::isUseNegotiatedRates() const {
    return m_use_negotiated_rates;
}
void OAIGet_carrier_settings_response_body::setUseNegotiatedRates(const bool &use_negotiated_rates) {
    m_use_negotiated_rates = use_negotiated_rates;
    m_use_negotiated_rates_isSet = true;
}

bool OAIGet_carrier_settings_response_body::is_use_negotiated_rates_Set() const{
    return m_use_negotiated_rates_isSet;
}

bool OAIGet_carrier_settings_response_body::is_use_negotiated_rates_Valid() const{
    return m_use_negotiated_rates_isValid;
}

bool OAIGet_carrier_settings_response_body::isUseOrderNumberOnMailInnovationsLabels() const {
    return m_use_order_number_on_mail_innovations_labels;
}
void OAIGet_carrier_settings_response_body::setUseOrderNumberOnMailInnovationsLabels(const bool &use_order_number_on_mail_innovations_labels) {
    m_use_order_number_on_mail_innovations_labels = use_order_number_on_mail_innovations_labels;
    m_use_order_number_on_mail_innovations_labels_isSet = true;
}

bool OAIGet_carrier_settings_response_body::is_use_order_number_on_mail_innovations_labels_Set() const{
    return m_use_order_number_on_mail_innovations_labels_isSet;
}

bool OAIGet_carrier_settings_response_body::is_use_order_number_on_mail_innovations_labels_Valid() const{
    return m_use_order_number_on_mail_innovations_labels_isValid;
}

bool OAIGet_carrier_settings_response_body::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_primary_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_should_hide_account_number_on_archive_doc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_letterhead_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smart_post_endorsement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_smart_post_hub.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mail_innovations_cost_center_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mail_innovations_endorsement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_carbon_neutral_shipping_program_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_consolidation_services_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_ground_freight_pricing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_negotiated_rates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_order_number_on_mail_innovations_labels_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGet_carrier_settings_response_body::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
