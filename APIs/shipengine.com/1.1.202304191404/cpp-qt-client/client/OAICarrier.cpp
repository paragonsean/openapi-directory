/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICarrier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICarrier::OAICarrier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICarrier::OAICarrier() {
    this->initializeModel();
}

OAICarrier::~OAICarrier() {}

void OAICarrier::initializeModel() {

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_carrier_code_isSet = false;
    m_carrier_code_isValid = false;

    m_carrier_id_isSet = false;
    m_carrier_id_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_has_multi_package_supporting_services_isSet = false;
    m_has_multi_package_supporting_services_isValid = false;

    m_nickname_isSet = false;
    m_nickname_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_packages_isSet = false;
    m_packages_isValid = false;

    m_primary_isSet = false;
    m_primary_isValid = false;

    m_requires_funded_amount_isSet = false;
    m_requires_funded_amount_isValid = false;

    m_services_isSet = false;
    m_services_isValid = false;

    m_supports_label_messages_isSet = false;
    m_supports_label_messages_isValid = false;
}

void OAICarrier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICarrier::fromJsonObject(QJsonObject json) {

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("account_number")]);
    m_account_number_isSet = !json[QString("account_number")].isNull() && m_account_number_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_carrier_code_isValid = ::OpenAPI::fromJsonValue(m_carrier_code, json[QString("carrier_code")]);
    m_carrier_code_isSet = !json[QString("carrier_code")].isNull() && m_carrier_code_isValid;

    m_carrier_id_isValid = ::OpenAPI::fromJsonValue(m_carrier_id, json[QString("carrier_id")]);
    m_carrier_id_isSet = !json[QString("carrier_id")].isNull() && m_carrier_id_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendly_name")]);
    m_friendly_name_isSet = !json[QString("friendly_name")].isNull() && m_friendly_name_isValid;

    m_has_multi_package_supporting_services_isValid = ::OpenAPI::fromJsonValue(m_has_multi_package_supporting_services, json[QString("has_multi_package_supporting_services")]);
    m_has_multi_package_supporting_services_isSet = !json[QString("has_multi_package_supporting_services")].isNull() && m_has_multi_package_supporting_services_isValid;

    m_nickname_isValid = ::OpenAPI::fromJsonValue(m_nickname, json[QString("nickname")]);
    m_nickname_isSet = !json[QString("nickname")].isNull() && m_nickname_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_packages_isValid = ::OpenAPI::fromJsonValue(m_packages, json[QString("packages")]);
    m_packages_isSet = !json[QString("packages")].isNull() && m_packages_isValid;

    m_primary_isValid = ::OpenAPI::fromJsonValue(m_primary, json[QString("primary")]);
    m_primary_isSet = !json[QString("primary")].isNull() && m_primary_isValid;

    m_requires_funded_amount_isValid = ::OpenAPI::fromJsonValue(m_requires_funded_amount, json[QString("requires_funded_amount")]);
    m_requires_funded_amount_isSet = !json[QString("requires_funded_amount")].isNull() && m_requires_funded_amount_isValid;

    m_services_isValid = ::OpenAPI::fromJsonValue(m_services, json[QString("services")]);
    m_services_isSet = !json[QString("services")].isNull() && m_services_isValid;

    m_supports_label_messages_isValid = ::OpenAPI::fromJsonValue(m_supports_label_messages, json[QString("supports_label_messages")]);
    m_supports_label_messages_isSet = !json[QString("supports_label_messages")].isNull() && m_supports_label_messages_isValid;
}

QString OAICarrier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICarrier::asJsonObject() const {
    QJsonObject obj;
    if (m_account_number_isSet) {
        obj.insert(QString("account_number"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_carrier_code_isSet) {
        obj.insert(QString("carrier_code"), ::OpenAPI::toJsonValue(m_carrier_code));
    }
    if (m_carrier_id_isSet) {
        obj.insert(QString("carrier_id"), ::OpenAPI::toJsonValue(m_carrier_id));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendly_name"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_has_multi_package_supporting_services_isSet) {
        obj.insert(QString("has_multi_package_supporting_services"), ::OpenAPI::toJsonValue(m_has_multi_package_supporting_services));
    }
    if (m_nickname_isSet) {
        obj.insert(QString("nickname"), ::OpenAPI::toJsonValue(m_nickname));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_packages.size() > 0) {
        obj.insert(QString("packages"), ::OpenAPI::toJsonValue(m_packages));
    }
    if (m_primary_isSet) {
        obj.insert(QString("primary"), ::OpenAPI::toJsonValue(m_primary));
    }
    if (m_requires_funded_amount_isSet) {
        obj.insert(QString("requires_funded_amount"), ::OpenAPI::toJsonValue(m_requires_funded_amount));
    }
    if (m_services.size() > 0) {
        obj.insert(QString("services"), ::OpenAPI::toJsonValue(m_services));
    }
    if (m_supports_label_messages_isSet) {
        obj.insert(QString("supports_label_messages"), ::OpenAPI::toJsonValue(m_supports_label_messages));
    }
    return obj;
}

QString OAICarrier::getAccountNumber() const {
    return m_account_number;
}
void OAICarrier::setAccountNumber(const QString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAICarrier::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAICarrier::is_account_number_Valid() const{
    return m_account_number_isValid;
}

double OAICarrier::getBalance() const {
    return m_balance;
}
void OAICarrier::setBalance(const double &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAICarrier::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAICarrier::is_balance_Valid() const{
    return m_balance_isValid;
}

QString OAICarrier::getCarrierCode() const {
    return m_carrier_code;
}
void OAICarrier::setCarrierCode(const QString &carrier_code) {
    m_carrier_code = carrier_code;
    m_carrier_code_isSet = true;
}

bool OAICarrier::is_carrier_code_Set() const{
    return m_carrier_code_isSet;
}

bool OAICarrier::is_carrier_code_Valid() const{
    return m_carrier_code_isValid;
}

QString OAICarrier::getCarrierId() const {
    return m_carrier_id;
}
void OAICarrier::setCarrierId(const QString &carrier_id) {
    m_carrier_id = carrier_id;
    m_carrier_id_isSet = true;
}

bool OAICarrier::is_carrier_id_Set() const{
    return m_carrier_id_isSet;
}

bool OAICarrier::is_carrier_id_Valid() const{
    return m_carrier_id_isValid;
}

QString OAICarrier::getFriendlyName() const {
    return m_friendly_name;
}
void OAICarrier::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAICarrier::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAICarrier::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

bool OAICarrier::isHasMultiPackageSupportingServices() const {
    return m_has_multi_package_supporting_services;
}
void OAICarrier::setHasMultiPackageSupportingServices(const bool &has_multi_package_supporting_services) {
    m_has_multi_package_supporting_services = has_multi_package_supporting_services;
    m_has_multi_package_supporting_services_isSet = true;
}

bool OAICarrier::is_has_multi_package_supporting_services_Set() const{
    return m_has_multi_package_supporting_services_isSet;
}

bool OAICarrier::is_has_multi_package_supporting_services_Valid() const{
    return m_has_multi_package_supporting_services_isValid;
}

QString OAICarrier::getNickname() const {
    return m_nickname;
}
void OAICarrier::setNickname(const QString &nickname) {
    m_nickname = nickname;
    m_nickname_isSet = true;
}

bool OAICarrier::is_nickname_Set() const{
    return m_nickname_isSet;
}

bool OAICarrier::is_nickname_Valid() const{
    return m_nickname_isValid;
}

QList<OAICarrier_advanced_option> OAICarrier::getOptions() const {
    return m_options;
}
void OAICarrier::setOptions(const QList<OAICarrier_advanced_option> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAICarrier::is_options_Set() const{
    return m_options_isSet;
}

bool OAICarrier::is_options_Valid() const{
    return m_options_isValid;
}

QList<OAIPackage_type> OAICarrier::getPackages() const {
    return m_packages;
}
void OAICarrier::setPackages(const QList<OAIPackage_type> &packages) {
    m_packages = packages;
    m_packages_isSet = true;
}

bool OAICarrier::is_packages_Set() const{
    return m_packages_isSet;
}

bool OAICarrier::is_packages_Valid() const{
    return m_packages_isValid;
}

bool OAICarrier::isPrimary() const {
    return m_primary;
}
void OAICarrier::setPrimary(const bool &primary) {
    m_primary = primary;
    m_primary_isSet = true;
}

bool OAICarrier::is_primary_Set() const{
    return m_primary_isSet;
}

bool OAICarrier::is_primary_Valid() const{
    return m_primary_isValid;
}

bool OAICarrier::isRequiresFundedAmount() const {
    return m_requires_funded_amount;
}
void OAICarrier::setRequiresFundedAmount(const bool &requires_funded_amount) {
    m_requires_funded_amount = requires_funded_amount;
    m_requires_funded_amount_isSet = true;
}

bool OAICarrier::is_requires_funded_amount_Set() const{
    return m_requires_funded_amount_isSet;
}

bool OAICarrier::is_requires_funded_amount_Valid() const{
    return m_requires_funded_amount_isValid;
}

QList<OAIService> OAICarrier::getServices() const {
    return m_services;
}
void OAICarrier::setServices(const QList<OAIService> &services) {
    m_services = services;
    m_services_isSet = true;
}

bool OAICarrier::is_services_Set() const{
    return m_services_isSet;
}

bool OAICarrier::is_services_Valid() const{
    return m_services_isValid;
}

bool OAICarrier::isSupportsLabelMessages() const {
    return m_supports_label_messages;
}
void OAICarrier::setSupportsLabelMessages(const bool &supports_label_messages) {
    m_supports_label_messages = supports_label_messages;
    m_supports_label_messages_isSet = true;
}

bool OAICarrier::is_supports_label_messages_Set() const{
    return m_supports_label_messages_isSet;
}

bool OAICarrier::is_supports_label_messages_Valid() const{
    return m_supports_label_messages_isValid;
}

bool OAICarrier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_multi_package_supporting_services_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_packages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_funded_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_label_messages_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICarrier::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
