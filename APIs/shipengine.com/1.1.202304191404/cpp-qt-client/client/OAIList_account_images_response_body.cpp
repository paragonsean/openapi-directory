/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIList_account_images_response_body.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIList_account_images_response_body::OAIList_account_images_response_body(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIList_account_images_response_body::OAIList_account_images_response_body() {
    this->initializeModel();
}

OAIList_account_images_response_body::~OAIList_account_images_response_body() {}

void OAIList_account_images_response_body::initializeModel() {

    m_images_isSet = false;
    m_images_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_pages_isSet = false;
    m_pages_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIList_account_images_response_body::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIList_account_images_response_body::fromJsonObject(QJsonObject json) {

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_pages_isValid = ::OpenAPI::fromJsonValue(m_pages, json[QString("pages")]);
    m_pages_isSet = !json[QString("pages")].isNull() && m_pages_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIList_account_images_response_body::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIList_account_images_response_body::asJsonObject() const {
    QJsonObject obj;
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_pages_isSet) {
        obj.insert(QString("pages"), ::OpenAPI::toJsonValue(m_pages));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

QList<OAIObject> OAIList_account_images_response_body::getImages() const {
    return m_images;
}
void OAIList_account_images_response_body::setImages(const QList<OAIObject> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIList_account_images_response_body::is_images_Set() const{
    return m_images_isSet;
}

bool OAIList_account_images_response_body::is_images_Valid() const{
    return m_images_isValid;
}

OAIPagination_link OAIList_account_images_response_body::getLinks() const {
    return m_links;
}
void OAIList_account_images_response_body::setLinks(const OAIPagination_link &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIList_account_images_response_body::is_links_Set() const{
    return m_links_isSet;
}

bool OAIList_account_images_response_body::is_links_Valid() const{
    return m_links_isValid;
}

qint32 OAIList_account_images_response_body::getPage() const {
    return m_page;
}
void OAIList_account_images_response_body::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIList_account_images_response_body::is_page_Set() const{
    return m_page_isSet;
}

bool OAIList_account_images_response_body::is_page_Valid() const{
    return m_page_isValid;
}

qint32 OAIList_account_images_response_body::getPages() const {
    return m_pages;
}
void OAIList_account_images_response_body::setPages(const qint32 &pages) {
    m_pages = pages;
    m_pages_isSet = true;
}

bool OAIList_account_images_response_body::is_pages_Set() const{
    return m_pages_isSet;
}

bool OAIList_account_images_response_body::is_pages_Valid() const{
    return m_pages_isValid;
}

qint32 OAIList_account_images_response_body::getTotal() const {
    return m_total;
}
void OAIList_account_images_response_body::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIList_account_images_response_body::is_total_Set() const{
    return m_total_isSet;
}

bool OAIList_account_images_response_body::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIList_account_images_response_body::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIList_account_images_response_body::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_images_isValid && m_links_isValid && m_page_isValid && m_pages_isValid && m_total_isValid && true;
}

} // namespace OpenAPI
