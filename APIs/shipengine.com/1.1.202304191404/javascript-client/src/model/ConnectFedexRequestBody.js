/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConnectFedexRequestBody model module.
 * @module model/ConnectFedexRequestBody
 * @version 1.1.202304191404
 */
class ConnectFedexRequestBody {
    /**
     * Constructs a new <code>ConnectFedexRequestBody</code>.
     * A Fedex account information request body
     * @alias module:model/ConnectFedexRequestBody
     * @param accountNumber {String} Account number
     * @param address1 {String} Address
     * @param agreeToEula {Boolean} Boolean signaling agreement to the Fedex End User License Agreement
     * @param city {String} The city
     * @param countryCode {String} Country code
     * @param email {String} The email address
     * @param firstName {String} First name
     * @param lastName {String} Last name
     * @param nickname {String} Nickname
     * @param phone {String} Phone number
     * @param postalCode {String} Postal Code
     * @param state {String} State
     */
    constructor(accountNumber, address1, agreeToEula, city, countryCode, email, firstName, lastName, nickname, phone, postalCode, state) { 
        
        ConnectFedexRequestBody.initialize(this, accountNumber, address1, agreeToEula, city, countryCode, email, firstName, lastName, nickname, phone, postalCode, state);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountNumber, address1, agreeToEula, city, countryCode, email, firstName, lastName, nickname, phone, postalCode, state) { 
        obj['account_number'] = accountNumber;
        obj['address1'] = address1;
        obj['agree_to_eula'] = agreeToEula;
        obj['city'] = city;
        obj['country_code'] = countryCode;
        obj['email'] = email;
        obj['first_name'] = firstName;
        obj['last_name'] = lastName;
        obj['nickname'] = nickname;
        obj['phone'] = phone;
        obj['postal_code'] = postalCode;
        obj['state'] = state;
    }

    /**
     * Constructs a <code>ConnectFedexRequestBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectFedexRequestBody} obj Optional instance to populate.
     * @return {module:model/ConnectFedexRequestBody} The populated <code>ConnectFedexRequestBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectFedexRequestBody();

            if (data.hasOwnProperty('account_number')) {
                obj['account_number'] = ApiClient.convertToType(data['account_number'], 'String');
            }
            if (data.hasOwnProperty('address1')) {
                obj['address1'] = ApiClient.convertToType(data['address1'], 'String');
            }
            if (data.hasOwnProperty('address2')) {
                obj['address2'] = ApiClient.convertToType(data['address2'], 'String');
            }
            if (data.hasOwnProperty('agree_to_eula')) {
                obj['agree_to_eula'] = ApiClient.convertToType(data['agree_to_eula'], 'Boolean');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = ApiClient.convertToType(data['company'], 'String');
            }
            if (data.hasOwnProperty('country_code')) {
                obj['country_code'] = ApiClient.convertToType(data['country_code'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('first_name')) {
                obj['first_name'] = ApiClient.convertToType(data['first_name'], 'String');
            }
            if (data.hasOwnProperty('last_name')) {
                obj['last_name'] = ApiClient.convertToType(data['last_name'], 'String');
            }
            if (data.hasOwnProperty('meter_number')) {
                obj['meter_number'] = ApiClient.convertToType(data['meter_number'], 'String');
            }
            if (data.hasOwnProperty('nickname')) {
                obj['nickname'] = ApiClient.convertToType(data['nickname'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('postal_code')) {
                obj['postal_code'] = ApiClient.convertToType(data['postal_code'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectFedexRequestBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectFedexRequestBody</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConnectFedexRequestBody.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_number'] && !(typeof data['account_number'] === 'string' || data['account_number'] instanceof String)) {
            throw new Error("Expected the field `account_number` to be a primitive type in the JSON string but got " + data['account_number']);
        }
        // ensure the json data is a string
        if (data['address1'] && !(typeof data['address1'] === 'string' || data['address1'] instanceof String)) {
            throw new Error("Expected the field `address1` to be a primitive type in the JSON string but got " + data['address1']);
        }
        // ensure the json data is a string
        if (data['address2'] && !(typeof data['address2'] === 'string' || data['address2'] instanceof String)) {
            throw new Error("Expected the field `address2` to be a primitive type in the JSON string but got " + data['address2']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['company'] && !(typeof data['company'] === 'string' || data['company'] instanceof String)) {
            throw new Error("Expected the field `company` to be a primitive type in the JSON string but got " + data['company']);
        }
        // ensure the json data is a string
        if (data['country_code'] && !(typeof data['country_code'] === 'string' || data['country_code'] instanceof String)) {
            throw new Error("Expected the field `country_code` to be a primitive type in the JSON string but got " + data['country_code']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['first_name'] && !(typeof data['first_name'] === 'string' || data['first_name'] instanceof String)) {
            throw new Error("Expected the field `first_name` to be a primitive type in the JSON string but got " + data['first_name']);
        }
        // ensure the json data is a string
        if (data['last_name'] && !(typeof data['last_name'] === 'string' || data['last_name'] instanceof String)) {
            throw new Error("Expected the field `last_name` to be a primitive type in the JSON string but got " + data['last_name']);
        }
        // ensure the json data is a string
        if (data['meter_number'] && !(typeof data['meter_number'] === 'string' || data['meter_number'] instanceof String)) {
            throw new Error("Expected the field `meter_number` to be a primitive type in the JSON string but got " + data['meter_number']);
        }
        // ensure the json data is a string
        if (data['nickname'] && !(typeof data['nickname'] === 'string' || data['nickname'] instanceof String)) {
            throw new Error("Expected the field `nickname` to be a primitive type in the JSON string but got " + data['nickname']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['postal_code'] && !(typeof data['postal_code'] === 'string' || data['postal_code'] instanceof String)) {
            throw new Error("Expected the field `postal_code` to be a primitive type in the JSON string but got " + data['postal_code']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}

ConnectFedexRequestBody.RequiredProperties = ["account_number", "address1", "agree_to_eula", "city", "country_code", "email", "first_name", "last_name", "nickname", "phone", "postal_code", "state"];

/**
 * Account number
 * @member {String} account_number
 */
ConnectFedexRequestBody.prototype['account_number'] = undefined;

/**
 * Address
 * @member {String} address1
 */
ConnectFedexRequestBody.prototype['address1'] = undefined;

/**
 * Address
 * @member {String} address2
 */
ConnectFedexRequestBody.prototype['address2'] = undefined;

/**
 * Boolean signaling agreement to the Fedex End User License Agreement
 * @member {Boolean} agree_to_eula
 */
ConnectFedexRequestBody.prototype['agree_to_eula'] = undefined;

/**
 * The city
 * @member {String} city
 */
ConnectFedexRequestBody.prototype['city'] = undefined;

/**
 * The company
 * @member {String} company
 */
ConnectFedexRequestBody.prototype['company'] = undefined;

/**
 * Country code
 * @member {String} country_code
 */
ConnectFedexRequestBody.prototype['country_code'] = undefined;

/**
 * The email address
 * @member {String} email
 */
ConnectFedexRequestBody.prototype['email'] = undefined;

/**
 * First name
 * @member {String} first_name
 */
ConnectFedexRequestBody.prototype['first_name'] = undefined;

/**
 * Last name
 * @member {String} last_name
 */
ConnectFedexRequestBody.prototype['last_name'] = undefined;

/**
 * Meter number
 * @member {String} meter_number
 */
ConnectFedexRequestBody.prototype['meter_number'] = undefined;

/**
 * Nickname
 * @member {String} nickname
 */
ConnectFedexRequestBody.prototype['nickname'] = undefined;

/**
 * Phone number
 * @member {String} phone
 */
ConnectFedexRequestBody.prototype['phone'] = undefined;

/**
 * Postal Code
 * @member {String} postal_code
 */
ConnectFedexRequestBody.prototype['postal_code'] = undefined;

/**
 * State
 * @member {String} state
 */
ConnectFedexRequestBody.prototype['state'] = undefined;






export default ConnectFedexRequestBody;

