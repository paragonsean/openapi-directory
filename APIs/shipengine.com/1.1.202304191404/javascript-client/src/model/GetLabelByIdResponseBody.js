/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AlternativeIdentifier from './AlternativeIdentifier';
import DisplayScheme from './DisplayScheme';
import Label from './Label';
import LabelChargeEvent from './LabelChargeEvent';
import LabelDownload from './LabelDownload';
import LabelDownloadType from './LabelDownloadType';
import LabelFormat from './LabelFormat';
import LabelLayout from './LabelLayout';
import LabelStatus from './LabelStatus';
import Link from './Link';
import MonetaryValue from './MonetaryValue';
import Package from './Package';
import Shipment from './Shipment';
import TrackingStatus from './TrackingStatus';
import ValidateAddress from './ValidateAddress';

/**
 * The GetLabelByIdResponseBody model module.
 * @module model/GetLabelByIdResponseBody
 * @version 1.1.202304191404
 */
class GetLabelByIdResponseBody {
    /**
     * Constructs a new <code>GetLabelByIdResponseBody</code>.
     * A get label by id response body
     * @alias module:model/GetLabelByIdResponseBody
     * @implements module:model/Label
     */
    constructor() { 
        Label.initialize(this);
        GetLabelByIdResponseBody.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['test_label'] = false;
    }

    /**
     * Constructs a <code>GetLabelByIdResponseBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetLabelByIdResponseBody} obj Optional instance to populate.
     * @return {module:model/GetLabelByIdResponseBody} The populated <code>GetLabelByIdResponseBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetLabelByIdResponseBody();
            Label.constructFromObject(data, obj);

            if (data.hasOwnProperty('alternative_identifiers')) {
                obj['alternative_identifiers'] = ApiClient.convertToType(data['alternative_identifiers'], [AlternativeIdentifier]);
            }
            if (data.hasOwnProperty('batch_id')) {
                obj['batch_id'] = ApiClient.convertToType(data['batch_id'], 'String');
            }
            if (data.hasOwnProperty('carrier_code')) {
                obj['carrier_code'] = ApiClient.convertToType(data['carrier_code'], 'String');
            }
            if (data.hasOwnProperty('carrier_id')) {
                obj['carrier_id'] = ApiClient.convertToType(data['carrier_id'], 'String');
            }
            if (data.hasOwnProperty('charge_event')) {
                obj['charge_event'] = ApiClient.convertToType(data['charge_event'], LabelChargeEvent);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('display_scheme')) {
                obj['display_scheme'] = ApiClient.convertToType(data['display_scheme'], DisplayScheme);
            }
            if (data.hasOwnProperty('form_download')) {
                obj['form_download'] = ApiClient.convertToType(data['form_download'], Link);
            }
            if (data.hasOwnProperty('insurance_claim')) {
                obj['insurance_claim'] = ApiClient.convertToType(data['insurance_claim'], Link);
            }
            if (data.hasOwnProperty('insurance_cost')) {
                obj['insurance_cost'] = ApiClient.convertToType(data['insurance_cost'], MonetaryValue);
            }
            if (data.hasOwnProperty('is_international')) {
                obj['is_international'] = ApiClient.convertToType(data['is_international'], 'Boolean');
            }
            if (data.hasOwnProperty('is_return_label')) {
                obj['is_return_label'] = ApiClient.convertToType(data['is_return_label'], 'Boolean');
            }
            if (data.hasOwnProperty('label_download')) {
                obj['label_download'] = ApiClient.convertToType(data['label_download'], LabelDownload);
            }
            if (data.hasOwnProperty('label_download_type')) {
                obj['label_download_type'] = ApiClient.convertToType(data['label_download_type'], LabelDownloadType);
            }
            if (data.hasOwnProperty('label_format')) {
                obj['label_format'] = ApiClient.convertToType(data['label_format'], LabelFormat);
            }
            if (data.hasOwnProperty('label_id')) {
                obj['label_id'] = ApiClient.convertToType(data['label_id'], 'String');
            }
            if (data.hasOwnProperty('label_image_id')) {
                obj['label_image_id'] = ApiClient.convertToType(data['label_image_id'], 'String');
            }
            if (data.hasOwnProperty('label_layout')) {
                obj['label_layout'] = ApiClient.convertToType(data['label_layout'], LabelLayout);
            }
            if (data.hasOwnProperty('outbound_label_id')) {
                obj['outbound_label_id'] = ApiClient.convertToType(data['outbound_label_id'], 'String');
            }
            if (data.hasOwnProperty('package_code')) {
                obj['package_code'] = ApiClient.convertToType(data['package_code'], 'String');
            }
            if (data.hasOwnProperty('packages')) {
                obj['packages'] = ApiClient.convertToType(data['packages'], [Package]);
            }
            if (data.hasOwnProperty('rma_number')) {
                obj['rma_number'] = ApiClient.convertToType(data['rma_number'], 'String');
            }
            if (data.hasOwnProperty('service_code')) {
                obj['service_code'] = ApiClient.convertToType(data['service_code'], 'String');
            }
            if (data.hasOwnProperty('ship_date')) {
                obj['ship_date'] = ApiClient.convertToType(data['ship_date'], 'Date');
            }
            if (data.hasOwnProperty('shipment')) {
                obj['shipment'] = ApiClient.convertToType(data['shipment'], Shipment);
            }
            if (data.hasOwnProperty('shipment_cost')) {
                obj['shipment_cost'] = ApiClient.convertToType(data['shipment_cost'], MonetaryValue);
            }
            if (data.hasOwnProperty('shipment_id')) {
                obj['shipment_id'] = ApiClient.convertToType(data['shipment_id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], LabelStatus);
            }
            if (data.hasOwnProperty('test_label')) {
                obj['test_label'] = ApiClient.convertToType(data['test_label'], 'Boolean');
            }
            if (data.hasOwnProperty('trackable')) {
                obj['trackable'] = ApiClient.convertToType(data['trackable'], 'Boolean');
            }
            if (data.hasOwnProperty('tracking_number')) {
                obj['tracking_number'] = ApiClient.convertToType(data['tracking_number'], 'String');
            }
            if (data.hasOwnProperty('tracking_status')) {
                obj['tracking_status'] = ApiClient.convertToType(data['tracking_status'], TrackingStatus);
            }
            if (data.hasOwnProperty('validate_address')) {
                obj['validate_address'] = ApiClient.convertToType(data['validate_address'], ValidateAddress);
            }
            if (data.hasOwnProperty('voided')) {
                obj['voided'] = ApiClient.convertToType(data['voided'], 'Boolean');
            }
            if (data.hasOwnProperty('voided_at')) {
                obj['voided_at'] = ApiClient.convertToType(data['voided_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetLabelByIdResponseBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetLabelByIdResponseBody</code>.
     */
    static validateJSON(data) {
        if (data['alternative_identifiers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['alternative_identifiers'])) {
                throw new Error("Expected the field `alternative_identifiers` to be an array in the JSON data but got " + data['alternative_identifiers']);
            }
            // validate the optional field `alternative_identifiers` (array)
            for (const item of data['alternative_identifiers']) {
                AlternativeIdentifier.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['batch_id'] && !(typeof data['batch_id'] === 'string' || data['batch_id'] instanceof String)) {
            throw new Error("Expected the field `batch_id` to be a primitive type in the JSON string but got " + data['batch_id']);
        }
        // ensure the json data is a string
        if (data['carrier_code'] && !(typeof data['carrier_code'] === 'string' || data['carrier_code'] instanceof String)) {
            throw new Error("Expected the field `carrier_code` to be a primitive type in the JSON string but got " + data['carrier_code']);
        }
        // ensure the json data is a string
        if (data['carrier_id'] && !(typeof data['carrier_id'] === 'string' || data['carrier_id'] instanceof String)) {
            throw new Error("Expected the field `carrier_id` to be a primitive type in the JSON string but got " + data['carrier_id']);
        }
        // validate the optional field `form_download`
        if (data['form_download']) { // data not null
          Link.validateJSON(data['form_download']);
        }
        // validate the optional field `insurance_claim`
        if (data['insurance_claim']) { // data not null
          Link.validateJSON(data['insurance_claim']);
        }
        // validate the optional field `insurance_cost`
        if (data['insurance_cost']) { // data not null
          MonetaryValue.validateJSON(data['insurance_cost']);
        }
        // validate the optional field `label_download`
        if (data['label_download']) { // data not null
          LabelDownload.validateJSON(data['label_download']);
        }
        // ensure the json data is a string
        if (data['label_id'] && !(typeof data['label_id'] === 'string' || data['label_id'] instanceof String)) {
            throw new Error("Expected the field `label_id` to be a primitive type in the JSON string but got " + data['label_id']);
        }
        // ensure the json data is a string
        if (data['label_image_id'] && !(typeof data['label_image_id'] === 'string' || data['label_image_id'] instanceof String)) {
            throw new Error("Expected the field `label_image_id` to be a primitive type in the JSON string but got " + data['label_image_id']);
        }
        // ensure the json data is a string
        if (data['outbound_label_id'] && !(typeof data['outbound_label_id'] === 'string' || data['outbound_label_id'] instanceof String)) {
            throw new Error("Expected the field `outbound_label_id` to be a primitive type in the JSON string but got " + data['outbound_label_id']);
        }
        // ensure the json data is a string
        if (data['package_code'] && !(typeof data['package_code'] === 'string' || data['package_code'] instanceof String)) {
            throw new Error("Expected the field `package_code` to be a primitive type in the JSON string but got " + data['package_code']);
        }
        if (data['packages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['packages'])) {
                throw new Error("Expected the field `packages` to be an array in the JSON data but got " + data['packages']);
            }
            // validate the optional field `packages` (array)
            for (const item of data['packages']) {
                Package.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['rma_number'] && !(typeof data['rma_number'] === 'string' || data['rma_number'] instanceof String)) {
            throw new Error("Expected the field `rma_number` to be a primitive type in the JSON string but got " + data['rma_number']);
        }
        // ensure the json data is a string
        if (data['service_code'] && !(typeof data['service_code'] === 'string' || data['service_code'] instanceof String)) {
            throw new Error("Expected the field `service_code` to be a primitive type in the JSON string but got " + data['service_code']);
        }
        // validate the optional field `shipment`
        if (data['shipment']) { // data not null
          Shipment.validateJSON(data['shipment']);
        }
        // validate the optional field `shipment_cost`
        if (data['shipment_cost']) { // data not null
          MonetaryValue.validateJSON(data['shipment_cost']);
        }
        // ensure the json data is a string
        if (data['shipment_id'] && !(typeof data['shipment_id'] === 'string' || data['shipment_id'] instanceof String)) {
            throw new Error("Expected the field `shipment_id` to be a primitive type in the JSON string but got " + data['shipment_id']);
        }
        // ensure the json data is a string
        if (data['tracking_number'] && !(typeof data['tracking_number'] === 'string' || data['tracking_number'] instanceof String)) {
            throw new Error("Expected the field `tracking_number` to be a primitive type in the JSON string but got " + data['tracking_number']);
        }

        return true;
    }


}



/**
 * Additional information some carriers may provide by which to identify a given label in their system.  
 * @member {Array.<module:model/AlternativeIdentifier>} alternative_identifiers
 */
GetLabelByIdResponseBody.prototype['alternative_identifiers'] = undefined;

/**
 * If this label was created as part of a [batch](https://www.shipengine.com/docs/labels/bulk/), then this is the unique ID of that batch. 
 * @member {String} batch_id
 */
GetLabelByIdResponseBody.prototype['batch_id'] = undefined;

/**
 * The [shipping carrier](https://www.shipengine.com/docs/carriers/setup/) who will ship the package, such as `fedex`, `dhl_express`, `stamps_com`, etc. 
 * @member {String} carrier_code
 */
GetLabelByIdResponseBody.prototype['carrier_code'] = undefined;

/**
 * The unique ID of the [carrier account](https://www.shipengine.com/docs/carriers/setup/) that was used to create this label 
 * @member {String} carrier_id
 */
GetLabelByIdResponseBody.prototype['carrier_id'] = undefined;

/**
 * The label charge event. 
 * @member {module:model/LabelChargeEvent} charge_event
 */
GetLabelByIdResponseBody.prototype['charge_event'] = undefined;

/**
 * The date and time that the label was created in ShipEngine.
 * @member {Date} created_at
 */
GetLabelByIdResponseBody.prototype['created_at'] = undefined;

/**
 * The display format that the label should be shown in.
 * @member {module:model/DisplayScheme} display_scheme
 */
GetLabelByIdResponseBody.prototype['display_scheme'] = undefined;

/**
 * The link to download the customs form (a.k.a. commercial invoice) for this shipment, if any.  Forms are in PDF format. This field is null if the shipment does not require a customs form, or if the carrier does not support it. 
 * @member {module:model/Link} form_download
 */
GetLabelByIdResponseBody.prototype['form_download'] = undefined;

/**
 * The link to submit an insurance claim for the shipment.  This field is null if the shipment is not insured or if the insurance provider does not support online claim submission. 
 * @member {module:model/Link} insurance_claim
 */
GetLabelByIdResponseBody.prototype['insurance_claim'] = undefined;

/**
 * The insurance cost for this package.  Add this to the `shipment_cost` field to get the total cost. 
 * @member {module:model/MonetaryValue} insurance_cost
 */
GetLabelByIdResponseBody.prototype['insurance_cost'] = undefined;

/**
 * Indicates whether this is an international shipment.  That is, the originating country and destination country are different. 
 * @member {Boolean} is_international
 */
GetLabelByIdResponseBody.prototype['is_international'] = undefined;

/**
 * Indicates whether this is a return label.  You may also want to set the `rma_number` so you know what is being returned. 
 * @member {Boolean} is_return_label
 */
GetLabelByIdResponseBody.prototype['is_return_label'] = undefined;

/**
 * @member {module:model/LabelDownload} label_download
 */
GetLabelByIdResponseBody.prototype['label_download'] = undefined;

/**
 * @member {module:model/LabelDownloadType} label_download_type
 */
GetLabelByIdResponseBody.prototype['label_download_type'] = undefined;

/**
 * The file format that you want the label to be in.  We recommend `pdf` format because it is supported by all carriers, whereas some carriers do not support the `png` or `zpl` formats. 
 * @member {module:model/LabelFormat} label_format
 */
GetLabelByIdResponseBody.prototype['label_format'] = undefined;

/**
 * A string that uniquely identifies the label. This ID is generated by ShipEngine when the label is created. 
 * @member {String} label_id
 */
GetLabelByIdResponseBody.prototype['label_id'] = undefined;

/**
 * The label image resource that was used to create a custom label image.
 * @member {String} label_image_id
 */
GetLabelByIdResponseBody.prototype['label_image_id'] = undefined;

/**
 * The layout (size) that you want the label to be in.  The `label_format` determines which sizes are allowed.  `4x6` is supported for all label formats, whereas `letter` (8.5\" x 11\") is only supported for `pdf` format. 
 * @member {module:model/LabelLayout} label_layout
 */
GetLabelByIdResponseBody.prototype['label_layout'] = undefined;

/**
 * The `label_id` of the original (outgoing) label that the return label is for. This associates the two labels together, which is required by some carriers. 
 * @member {String} outbound_label_id
 */
GetLabelByIdResponseBody.prototype['outbound_label_id'] = undefined;

/**
 * The [package type](https://www.shipengine.com/docs/reference/list-carrier-packages/), such as `thick_envelope`, `small_flat_rate_box`, `large_package`, etc.  The code `package` indicates a custom or unknown package type. 
 * @member {String} package_code
 */
GetLabelByIdResponseBody.prototype['package_code'] = undefined;

/**
 * The label's package(s).  > **Note:** Some carriers only allow one package per label.  If you attempt to create a multi-package label for a carrier that doesn't allow it, an error will be returned. 
 * @member {Array.<module:model/Package>} packages
 */
GetLabelByIdResponseBody.prototype['packages'] = undefined;

/**
 * An optional Return Merchandise Authorization number.  This field is useful for return labels.  You can set it to any string value. 
 * @member {String} rma_number
 */
GetLabelByIdResponseBody.prototype['rma_number'] = undefined;

/**
 * The [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) used to ship the package, such as `fedex_ground`, `usps_first_class_mail`, `flat_rate_envelope`, etc. 
 * @member {String} service_code
 */
GetLabelByIdResponseBody.prototype['service_code'] = undefined;

/**
 * The date that the package was (or will be) shippped.  ShipEngine will take the day of week into consideration. For example, if the carrier does not operate on Sundays, then a package that would have shipped on Sunday will ship on Monday instead. 
 * @member {Date} ship_date
 */
GetLabelByIdResponseBody.prototype['ship_date'] = undefined;

/**
 * The shipment information used to generate the label
 * @member {module:model/Shipment} shipment
 */
GetLabelByIdResponseBody.prototype['shipment'] = undefined;

/**
 * The cost of shipping, delivery confirmation, and other carrier charges.  This amount **does not** include insurance costs. 
 * @member {module:model/MonetaryValue} shipment_cost
 */
GetLabelByIdResponseBody.prototype['shipment_cost'] = undefined;

/**
 * The shipment that this label is for.  ShipEngine can create a shipment for you automatically when you [create a label](https://www.shipengine.com/docs/labels/create-a-label/), or you can [create your own shipment](https://www.shipengine.com/docs/shipping/create-a-shipment/) and then [use it to print a label](https://www.shipengine.com/docs/labels/create-from-shipment/) 
 * @member {String} shipment_id
 */
GetLabelByIdResponseBody.prototype['shipment_id'] = undefined;

/**
 * @member {module:model/LabelStatus} status
 */
GetLabelByIdResponseBody.prototype['status'] = undefined;

/**
 * Indicate if this label is being used only for testing purposes. If true, then no charge will be added to your account.
 * @member {Boolean} test_label
 * @default false
 */
GetLabelByIdResponseBody.prototype['test_label'] = false;

/**
 * Indicates whether the shipment is trackable, in which case the `tracking_status` field will reflect the current status and each package will have a `tracking_number`. 
 * @member {Boolean} trackable
 */
GetLabelByIdResponseBody.prototype['trackable'] = undefined;

/**
 * The tracking number for the package. Tracking number formats vary across carriers.
 * @member {String} tracking_number
 */
GetLabelByIdResponseBody.prototype['tracking_number'] = undefined;

/**
 * The current status of the package, such as `in_transit` or `delivered`
 * @member {module:model/TrackingStatus} tracking_status
 */
GetLabelByIdResponseBody.prototype['tracking_status'] = undefined;

/**
 * @member {module:model/ValidateAddress} validate_address
 */
GetLabelByIdResponseBody.prototype['validate_address'] = undefined;

/**
 * Indicates whether the label has been [voided](https://www.shipengine.com/docs/labels/voiding/) 
 * @member {Boolean} voided
 */
GetLabelByIdResponseBody.prototype['voided'] = undefined;

/**
 * The date and time that the label was [voided](https://www.shipengine.com/docs/labels/voiding/), or `null` if the label has not been voided 
 * @member {Date} voided_at
 */
GetLabelByIdResponseBody.prototype['voided_at'] = undefined;


// Implement Label interface:
/**
 * Additional information some carriers may provide by which to identify a given label in their system.  
 * @member {Array.<module:model/AlternativeIdentifier>} alternative_identifiers
 */
Label.prototype['alternative_identifiers'] = undefined;
/**
 * If this label was created as part of a [batch](https://www.shipengine.com/docs/labels/bulk/), then this is the unique ID of that batch. 
 * @member {String} batch_id
 */
Label.prototype['batch_id'] = undefined;
/**
 * The [shipping carrier](https://www.shipengine.com/docs/carriers/setup/) who will ship the package, such as `fedex`, `dhl_express`, `stamps_com`, etc. 
 * @member {String} carrier_code
 */
Label.prototype['carrier_code'] = undefined;
/**
 * The unique ID of the [carrier account](https://www.shipengine.com/docs/carriers/setup/) that was used to create this label 
 * @member {String} carrier_id
 */
Label.prototype['carrier_id'] = undefined;
/**
 * The label charge event. 
 * @member {module:model/LabelChargeEvent} charge_event
 */
Label.prototype['charge_event'] = undefined;
/**
 * The date and time that the label was created in ShipEngine.
 * @member {Date} created_at
 */
Label.prototype['created_at'] = undefined;
/**
 * The display format that the label should be shown in.
 * @member {module:model/DisplayScheme} display_scheme
 */
Label.prototype['display_scheme'] = undefined;
/**
 * The link to download the customs form (a.k.a. commercial invoice) for this shipment, if any.  Forms are in PDF format. This field is null if the shipment does not require a customs form, or if the carrier does not support it. 
 * @member {module:model/Link} form_download
 */
Label.prototype['form_download'] = undefined;
/**
 * The link to submit an insurance claim for the shipment.  This field is null if the shipment is not insured or if the insurance provider does not support online claim submission. 
 * @member {module:model/Link} insurance_claim
 */
Label.prototype['insurance_claim'] = undefined;
/**
 * The insurance cost for this package.  Add this to the `shipment_cost` field to get the total cost. 
 * @member {module:model/MonetaryValue} insurance_cost
 */
Label.prototype['insurance_cost'] = undefined;
/**
 * Indicates whether this is an international shipment.  That is, the originating country and destination country are different. 
 * @member {Boolean} is_international
 */
Label.prototype['is_international'] = undefined;
/**
 * Indicates whether this is a return label.  You may also want to set the `rma_number` so you know what is being returned. 
 * @member {Boolean} is_return_label
 */
Label.prototype['is_return_label'] = undefined;
/**
 * @member {module:model/LabelDownload} label_download
 */
Label.prototype['label_download'] = undefined;
/**
 * @member {module:model/LabelDownloadType} label_download_type
 */
Label.prototype['label_download_type'] = undefined;
/**
 * The file format that you want the label to be in.  We recommend `pdf` format because it is supported by all carriers, whereas some carriers do not support the `png` or `zpl` formats. 
 * @member {module:model/LabelFormat} label_format
 */
Label.prototype['label_format'] = undefined;
/**
 * A string that uniquely identifies the label. This ID is generated by ShipEngine when the label is created. 
 * @member {String} label_id
 */
Label.prototype['label_id'] = undefined;
/**
 * The label image resource that was used to create a custom label image.
 * @member {String} label_image_id
 */
Label.prototype['label_image_id'] = undefined;
/**
 * The layout (size) that you want the label to be in.  The `label_format` determines which sizes are allowed.  `4x6` is supported for all label formats, whereas `letter` (8.5\" x 11\") is only supported for `pdf` format. 
 * @member {module:model/LabelLayout} label_layout
 */
Label.prototype['label_layout'] = undefined;
/**
 * The `label_id` of the original (outgoing) label that the return label is for. This associates the two labels together, which is required by some carriers. 
 * @member {String} outbound_label_id
 */
Label.prototype['outbound_label_id'] = undefined;
/**
 * The [package type](https://www.shipengine.com/docs/reference/list-carrier-packages/), such as `thick_envelope`, `small_flat_rate_box`, `large_package`, etc.  The code `package` indicates a custom or unknown package type. 
 * @member {String} package_code
 */
Label.prototype['package_code'] = undefined;
/**
 * The label's package(s).  > **Note:** Some carriers only allow one package per label.  If you attempt to create a multi-package label for a carrier that doesn't allow it, an error will be returned. 
 * @member {Array.<module:model/Package>} packages
 */
Label.prototype['packages'] = undefined;
/**
 * An optional Return Merchandise Authorization number.  This field is useful for return labels.  You can set it to any string value. 
 * @member {String} rma_number
 */
Label.prototype['rma_number'] = undefined;
/**
 * The [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) used to ship the package, such as `fedex_ground`, `usps_first_class_mail`, `flat_rate_envelope`, etc. 
 * @member {String} service_code
 */
Label.prototype['service_code'] = undefined;
/**
 * The date that the package was (or will be) shippped.  ShipEngine will take the day of week into consideration. For example, if the carrier does not operate on Sundays, then a package that would have shipped on Sunday will ship on Monday instead. 
 * @member {Date} ship_date
 */
Label.prototype['ship_date'] = undefined;
/**
 * The shipment information used to generate the label
 * @member {module:model/Shipment} shipment
 */
Label.prototype['shipment'] = undefined;
/**
 * The cost of shipping, delivery confirmation, and other carrier charges.  This amount **does not** include insurance costs. 
 * @member {module:model/MonetaryValue} shipment_cost
 */
Label.prototype['shipment_cost'] = undefined;
/**
 * The shipment that this label is for.  ShipEngine can create a shipment for you automatically when you [create a label](https://www.shipengine.com/docs/labels/create-a-label/), or you can [create your own shipment](https://www.shipengine.com/docs/shipping/create-a-shipment/) and then [use it to print a label](https://www.shipengine.com/docs/labels/create-from-shipment/) 
 * @member {String} shipment_id
 */
Label.prototype['shipment_id'] = undefined;
/**
 * @member {module:model/LabelStatus} status
 */
Label.prototype['status'] = undefined;
/**
 * Indicate if this label is being used only for testing purposes. If true, then no charge will be added to your account.
 * @member {Boolean} test_label
 * @default false
 */
Label.prototype['test_label'] = false;
/**
 * Indicates whether the shipment is trackable, in which case the `tracking_status` field will reflect the current status and each package will have a `tracking_number`. 
 * @member {Boolean} trackable
 */
Label.prototype['trackable'] = undefined;
/**
 * The tracking number for the package. Tracking number formats vary across carriers.
 * @member {String} tracking_number
 */
Label.prototype['tracking_number'] = undefined;
/**
 * The current status of the package, such as `in_transit` or `delivered`
 * @member {module:model/TrackingStatus} tracking_status
 */
Label.prototype['tracking_status'] = undefined;
/**
 * @member {module:model/ValidateAddress} validate_address
 */
Label.prototype['validate_address'] = undefined;
/**
 * Indicates whether the label has been [voided](https://www.shipengine.com/docs/labels/voiding/) 
 * @member {Boolean} voided
 */
Label.prototype['voided'] = undefined;
/**
 * The date and time that the label was [voided](https://www.shipengine.com/docs/labels/voiding/), or `null` if the label has not been voided 
 * @member {Date} voided_at
 */
Label.prototype['voided_at'] = undefined;




export default GetLabelByIdResponseBody;

