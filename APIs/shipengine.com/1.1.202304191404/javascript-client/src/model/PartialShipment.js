/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdvancedShipmentOptions from './AdvancedShipmentOptions';
import DeliveryConfirmation from './DeliveryConfirmation';
import InsuranceProvider from './InsuranceProvider';
import InternationalShipmentOptions from './InternationalShipmentOptions';
import OrderSourceName from './OrderSourceName';
import OriginType from './OriginType';
import Package from './Package';
import ShipmentItem from './ShipmentItem';
import ShipmentStatus from './ShipmentStatus';
import ShippingAddress from './ShippingAddress';
import Tag from './Tag';
import TaxIdentifier from './TaxIdentifier';
import Weight from './Weight';

/**
 * The PartialShipment model module.
 * @module model/PartialShipment
 * @version 1.1.202304191404
 */
class PartialShipment {
    /**
     * Constructs a new <code>PartialShipment</code>.
     * The information necessary to ship a package, such as the origin, the destination, the carrier service, and the package dimensions and weight. 
     * @alias module:model/PartialShipment
     */
    constructor() { 
        
        PartialShipment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['is_return'] = false;
    }

    /**
     * Constructs a <code>PartialShipment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PartialShipment} obj Optional instance to populate.
     * @return {module:model/PartialShipment} The populated <code>PartialShipment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PartialShipment();

            if (data.hasOwnProperty('advanced_options')) {
                obj['advanced_options'] = ApiClient.convertToType(data['advanced_options'], AdvancedShipmentOptions);
            }
            if (data.hasOwnProperty('carrier_id')) {
                obj['carrier_id'] = ApiClient.convertToType(data['carrier_id'], 'String');
            }
            if (data.hasOwnProperty('confirmation')) {
                obj['confirmation'] = ApiClient.convertToType(data['confirmation'], DeliveryConfirmation);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('customs')) {
                obj['customs'] = ApiClient.convertToType(data['customs'], InternationalShipmentOptions);
            }
            if (data.hasOwnProperty('external_order_id')) {
                obj['external_order_id'] = ApiClient.convertToType(data['external_order_id'], 'String');
            }
            if (data.hasOwnProperty('external_shipment_id')) {
                obj['external_shipment_id'] = ApiClient.convertToType(data['external_shipment_id'], 'String');
            }
            if (data.hasOwnProperty('insurance_provider')) {
                obj['insurance_provider'] = ApiClient.convertToType(data['insurance_provider'], InsuranceProvider);
            }
            if (data.hasOwnProperty('is_return')) {
                obj['is_return'] = ApiClient.convertToType(data['is_return'], 'Boolean');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [ShipmentItem]);
            }
            if (data.hasOwnProperty('modified_at')) {
                obj['modified_at'] = ApiClient.convertToType(data['modified_at'], 'Date');
            }
            if (data.hasOwnProperty('order_source_code')) {
                obj['order_source_code'] = ApiClient.convertToType(data['order_source_code'], OrderSourceName);
            }
            if (data.hasOwnProperty('origin_type')) {
                obj['origin_type'] = ApiClient.convertToType(data['origin_type'], OriginType);
            }
            if (data.hasOwnProperty('packages')) {
                obj['packages'] = ApiClient.convertToType(data['packages'], [Package]);
            }
            if (data.hasOwnProperty('return_to')) {
                obj['return_to'] = ApiClient.convertToType(data['return_to'], ShippingAddress);
            }
            if (data.hasOwnProperty('service_code')) {
                obj['service_code'] = ApiClient.convertToType(data['service_code'], 'String');
            }
            if (data.hasOwnProperty('ship_date')) {
                obj['ship_date'] = ApiClient.convertToType(data['ship_date'], 'Date');
            }
            if (data.hasOwnProperty('ship_from')) {
                obj['ship_from'] = ApiClient.convertToType(data['ship_from'], ShippingAddress);
            }
            if (data.hasOwnProperty('ship_to')) {
                obj['ship_to'] = ApiClient.convertToType(data['ship_to'], ShippingAddress);
            }
            if (data.hasOwnProperty('shipment_id')) {
                obj['shipment_id'] = ApiClient.convertToType(data['shipment_id'], 'String');
            }
            if (data.hasOwnProperty('shipment_number')) {
                obj['shipment_number'] = ApiClient.convertToType(data['shipment_number'], 'String');
            }
            if (data.hasOwnProperty('shipment_status')) {
                obj['shipment_status'] = ApiClient.convertToType(data['shipment_status'], ShipmentStatus);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [Tag]);
            }
            if (data.hasOwnProperty('tax_identifiers')) {
                obj['tax_identifiers'] = ApiClient.convertToType(data['tax_identifiers'], [TaxIdentifier]);
            }
            if (data.hasOwnProperty('total_weight')) {
                obj['total_weight'] = ApiClient.convertToType(data['total_weight'], Weight);
            }
            if (data.hasOwnProperty('warehouse_id')) {
                obj['warehouse_id'] = ApiClient.convertToType(data['warehouse_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PartialShipment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PartialShipment</code>.
     */
    static validateJSON(data) {
        // validate the optional field `advanced_options`
        if (data['advanced_options']) { // data not null
          AdvancedShipmentOptions.validateJSON(data['advanced_options']);
        }
        // ensure the json data is a string
        if (data['carrier_id'] && !(typeof data['carrier_id'] === 'string' || data['carrier_id'] instanceof String)) {
            throw new Error("Expected the field `carrier_id` to be a primitive type in the JSON string but got " + data['carrier_id']);
        }
        // validate the optional field `customs`
        if (data['customs']) { // data not null
          InternationalShipmentOptions.validateJSON(data['customs']);
        }
        // ensure the json data is a string
        if (data['external_order_id'] && !(typeof data['external_order_id'] === 'string' || data['external_order_id'] instanceof String)) {
            throw new Error("Expected the field `external_order_id` to be a primitive type in the JSON string but got " + data['external_order_id']);
        }
        // ensure the json data is a string
        if (data['external_shipment_id'] && !(typeof data['external_shipment_id'] === 'string' || data['external_shipment_id'] instanceof String)) {
            throw new Error("Expected the field `external_shipment_id` to be a primitive type in the JSON string but got " + data['external_shipment_id']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                ShipmentItem.validateJSON(item);
            };
        }
        if (data['packages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['packages'])) {
                throw new Error("Expected the field `packages` to be an array in the JSON data but got " + data['packages']);
            }
            // validate the optional field `packages` (array)
            for (const item of data['packages']) {
                Package.validateJSON(item);
            };
        }
        // validate the optional field `return_to`
        if (data['return_to']) { // data not null
          ShippingAddress.validateJSON(data['return_to']);
        }
        // ensure the json data is a string
        if (data['service_code'] && !(typeof data['service_code'] === 'string' || data['service_code'] instanceof String)) {
            throw new Error("Expected the field `service_code` to be a primitive type in the JSON string but got " + data['service_code']);
        }
        // validate the optional field `ship_from`
        if (data['ship_from']) { // data not null
          ShippingAddress.validateJSON(data['ship_from']);
        }
        // validate the optional field `ship_to`
        if (data['ship_to']) { // data not null
          ShippingAddress.validateJSON(data['ship_to']);
        }
        // ensure the json data is a string
        if (data['shipment_id'] && !(typeof data['shipment_id'] === 'string' || data['shipment_id'] instanceof String)) {
            throw new Error("Expected the field `shipment_id` to be a primitive type in the JSON string but got " + data['shipment_id']);
        }
        // ensure the json data is a string
        if (data['shipment_number'] && !(typeof data['shipment_number'] === 'string' || data['shipment_number'] instanceof String)) {
            throw new Error("Expected the field `shipment_number` to be a primitive type in the JSON string but got " + data['shipment_number']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                Tag.validateJSON(item);
            };
        }
        if (data['tax_identifiers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tax_identifiers'])) {
                throw new Error("Expected the field `tax_identifiers` to be an array in the JSON data but got " + data['tax_identifiers']);
            }
            // validate the optional field `tax_identifiers` (array)
            for (const item of data['tax_identifiers']) {
                TaxIdentifier.validateJSON(item);
            };
        }
        // validate the optional field `total_weight`
        if (data['total_weight']) { // data not null
          Weight.validateJSON(data['total_weight']);
        }
        // ensure the json data is a string
        if (data['warehouse_id'] && !(typeof data['warehouse_id'] === 'string' || data['warehouse_id'] instanceof String)) {
            throw new Error("Expected the field `warehouse_id` to be a primitive type in the JSON string but got " + data['warehouse_id']);
        }

        return true;
    }


}



/**
 * Advanced shipment options.  These are entirely optional.
 * @member {module:model/AdvancedShipmentOptions} advanced_options
 */
PartialShipment.prototype['advanced_options'] = undefined;

/**
 * The carrier account that is billed for the shipping charges
 * @member {String} carrier_id
 */
PartialShipment.prototype['carrier_id'] = undefined;

/**
 * The type of delivery confirmation that is required for this shipment.
 * @member {module:model/DeliveryConfirmation} confirmation
 */
PartialShipment.prototype['confirmation'] = undefined;

/**
 * The date and time that the shipment was created in ShipEngine.
 * @member {Date} created_at
 */
PartialShipment.prototype['created_at'] = undefined;

/**
 * Customs information.  This is usually only needed for international shipments. 
 * @member {module:model/InternationalShipmentOptions} customs
 */
PartialShipment.prototype['customs'] = undefined;

/**
 * ID that the Order Source assigned
 * @member {String} external_order_id
 */
PartialShipment.prototype['external_order_id'] = undefined;

/**
 * A unique user-defined key to identify a shipment.  This can be used to retrieve the shipment.  > **Warning:** The `external_shipment_id` is limited to 50 characters. Any additional characters will be truncated. 
 * @member {String} external_shipment_id
 */
PartialShipment.prototype['external_shipment_id'] = undefined;

/**
 * The insurance provider to use for any insured packages in the shipment. 
 * @member {module:model/InsuranceProvider} insurance_provider
 */
PartialShipment.prototype['insurance_provider'] = undefined;

/**
 * An optional indicator if the shipment is intended to be a return. Defaults to false if not provided. 
 * @member {Boolean} is_return
 * @default false
 */
PartialShipment.prototype['is_return'] = false;

/**
 * Describe the packages included in this shipment as related to potential metadata that was imported from external order sources 
 * @member {Array.<module:model/ShipmentItem>} items
 */
PartialShipment.prototype['items'] = undefined;

/**
 * The date and time that the shipment was created or last modified.
 * @member {Date} modified_at
 */
PartialShipment.prototype['modified_at'] = undefined;

/**
 * @member {module:model/OrderSourceName} order_source_code
 */
PartialShipment.prototype['order_source_code'] = undefined;

/**
 * Indicates if the package will be picked up or dropped off by the carrier
 * @member {module:model/OriginType} origin_type
 */
PartialShipment.prototype['origin_type'] = undefined;

/**
 * The packages in the shipment.  > **Note:** Some carriers only allow one package per shipment.  If you attempt to create a multi-package shipment for a carrier that doesn't allow it, an error will be returned. 
 * @member {Array.<module:model/Package>} packages
 */
PartialShipment.prototype['packages'] = undefined;

/**
 * The return address for this shipment.  Defaults to the `ship_from` address. 
 * @member {module:model/ShippingAddress} return_to
 */
PartialShipment.prototype['return_to'] = undefined;

/**
 * The [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) used to ship the package, such as `fedex_ground`, `usps_first_class_mail`, `flat_rate_envelope`, etc. 
 * @member {String} service_code
 */
PartialShipment.prototype['service_code'] = undefined;

/**
 * The date that the shipment was (or will be) shippped.  ShipEngine will take the day of week into consideration. For example, if the carrier does not operate on Sundays, then a package that would have shipped on Sunday will ship on Monday instead. 
 * @member {Date} ship_date
 */
PartialShipment.prototype['ship_date'] = undefined;

/**
 * The shipment's origin address. If you frequently ship from the same location, consider [creating a warehouse](https://www.shipengine.com/docs/reference/create-warehouse/).  Then you can simply specify the `warehouse_id` rather than the complete address each time. 
 * @member {module:model/ShippingAddress} ship_from
 */
PartialShipment.prototype['ship_from'] = undefined;

/**
 * The recipient's mailing address
 * @member {module:model/ShippingAddress} ship_to
 */
PartialShipment.prototype['ship_to'] = undefined;

/**
 * A string that uniquely identifies the shipment
 * @member {String} shipment_id
 */
PartialShipment.prototype['shipment_id'] = undefined;

/**
 * A non-unique user-defined number used to identify a shipment.  If undefined, this will match the external_shipment_id of the shipment.  > **Warning:** The `shipment_number` is limited to 50 characters. Any additional characters will be truncated. 
 * @member {String} shipment_number
 */
PartialShipment.prototype['shipment_number'] = undefined;

/**
 * The current status of the shipment
 * @member {module:model/ShipmentStatus} shipment_status
 */
PartialShipment.prototype['shipment_status'] = undefined;

/**
 * Arbitrary tags associated with this shipment.  Tags can be used to categorize shipments, and shipments can be queried by their tags. 
 * @member {Array.<module:model/Tag>} tags
 */
PartialShipment.prototype['tags'] = undefined;

/**
 * @member {Array.<module:model/TaxIdentifier>} tax_identifiers
 */
PartialShipment.prototype['tax_identifiers'] = undefined;

/**
 * The combined weight of all packages in the shipment
 * @member {module:model/Weight} total_weight
 */
PartialShipment.prototype['total_weight'] = undefined;

/**
 * The [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/) that the shipment is being shipped from.  Either `warehouse_id` or `ship_from` must be specified. 
 * @member {String} warehouse_id
 */
PartialShipment.prototype['warehouse_id'] = undefined;






export default PartialShipment;

