/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AncillaryServiceEndorsement from './AncillaryServiceEndorsement';
import ConnectAccessWorldwideRequestBody from './ConnectAccessWorldwideRequestBody';
import ConnectAmazonBuyShippingRequestBody from './ConnectAmazonBuyShippingRequestBody';
import ConnectAmazonShippingUk from './ConnectAmazonShippingUk';
import ConnectApcRequestBody from './ConnectApcRequestBody';
import ConnectAsendiaRequestBody from './ConnectAsendiaRequestBody';
import ConnectAustraliaPostRequestBody from './ConnectAustraliaPostRequestBody';
import ConnectCanadaPostRequestBody from './ConnectCanadaPostRequestBody';
import ConnectDhlEcommerceRequestBody from './ConnectDhlEcommerceRequestBody';
import ConnectDhlExpressAuRequestBody from './ConnectDhlExpressAuRequestBody';
import ConnectDhlExpressCaRequestBody from './ConnectDhlExpressCaRequestBody';
import ConnectDhlExpressRequestBody from './ConnectDhlExpressRequestBody';
import ConnectDhlExpressUkRequestBody from './ConnectDhlExpressUkRequestBody';
import ConnectDpdRequestBody from './ConnectDpdRequestBody';
import ConnectEndiciaRequestBody from './ConnectEndiciaRequestBody';
import ConnectFedexRequestBody from './ConnectFedexRequestBody';
import ConnectFedexUkRequestBody from './ConnectFedexUkRequestBody';
import ConnectFirstmileRequestBody from './ConnectFirstmileRequestBody';
import ConnectImexRequestBody from './ConnectImexRequestBody';
import ConnectNewgisticsRequestBody from './ConnectNewgisticsRequestBody';
import ConnectOntracRequestBody from './ConnectOntracRequestBody';
import ConnectPurolatorRequestBody from './ConnectPurolatorRequestBody';
import ConnectRoyalMailRequestBody from './ConnectRoyalMailRequestBody';
import ConnectRrDonnelleyRequestBody from './ConnectRrDonnelleyRequestBody';
import ConnectSekoRequestBody from './ConnectSekoRequestBody';
import ConnectSendleRequestBody from './ConnectSendleRequestBody';
import ConnectStampsRequestBody from './ConnectStampsRequestBody';
import ConnectUpsRequestBody from './ConnectUpsRequestBody';
import UpsInvoice from './UpsInvoice';

/**
 * The ConnectCarrierRequestBody model module.
 * @module model/ConnectCarrierRequestBody
 * @version 1.1.202304191404
 */
class ConnectCarrierRequestBody {
    /**
     * Constructs a new <code>ConnectCarrierRequestBody</code>.
     * @alias module:model/ConnectCarrierRequestBody
     * @param {(module:model/ConnectAccessWorldwideRequestBody|module:model/ConnectAmazonBuyShippingRequestBody|module:model/ConnectAmazonShippingUk|module:model/ConnectApcRequestBody|module:model/ConnectAsendiaRequestBody|module:model/ConnectAustraliaPostRequestBody|module:model/ConnectCanadaPostRequestBody|module:model/ConnectDhlEcommerceRequestBody|module:model/ConnectDhlExpressAuRequestBody|module:model/ConnectDhlExpressCaRequestBody|module:model/ConnectDhlExpressRequestBody|module:model/ConnectDhlExpressUkRequestBody|module:model/ConnectDpdRequestBody|module:model/ConnectEndiciaRequestBody|module:model/ConnectFedexRequestBody|module:model/ConnectFedexUkRequestBody|module:model/ConnectFirstmileRequestBody|module:model/ConnectImexRequestBody|module:model/ConnectNewgisticsRequestBody|module:model/ConnectOntracRequestBody|module:model/ConnectPurolatorRequestBody|module:model/ConnectRoyalMailRequestBody|module:model/ConnectRrDonnelleyRequestBody|module:model/ConnectSekoRequestBody|module:model/ConnectSendleRequestBody|module:model/ConnectStampsRequestBody|module:model/ConnectUpsRequestBody)} instance The actual instance to initialize ConnectCarrierRequestBody.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "ConnectAccessWorldwideRequestBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConnectAccessWorldwideRequestBody.validateJSON(instance); // throw an exception if no match
                // create ConnectAccessWorldwideRequestBody from JS object
                this.actualInstance = ConnectAccessWorldwideRequestBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConnectAccessWorldwideRequestBody
            errorMessages.push("Failed to construct ConnectAccessWorldwideRequestBody: " + err)
        }

        try {
            if (typeof instance === "ConnectAmazonBuyShippingRequestBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConnectAmazonBuyShippingRequestBody.validateJSON(instance); // throw an exception if no match
                // create ConnectAmazonBuyShippingRequestBody from JS object
                this.actualInstance = ConnectAmazonBuyShippingRequestBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConnectAmazonBuyShippingRequestBody
            errorMessages.push("Failed to construct ConnectAmazonBuyShippingRequestBody: " + err)
        }

        try {
            if (typeof instance === "ConnectAmazonShippingUk") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConnectAmazonShippingUk.validateJSON(instance); // throw an exception if no match
                // create ConnectAmazonShippingUk from JS object
                this.actualInstance = ConnectAmazonShippingUk.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConnectAmazonShippingUk
            errorMessages.push("Failed to construct ConnectAmazonShippingUk: " + err)
        }

        try {
            if (typeof instance === "ConnectApcRequestBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConnectApcRequestBody.validateJSON(instance); // throw an exception if no match
                // create ConnectApcRequestBody from JS object
                this.actualInstance = ConnectApcRequestBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConnectApcRequestBody
            errorMessages.push("Failed to construct ConnectApcRequestBody: " + err)
        }

        try {
            if (typeof instance === "ConnectAsendiaRequestBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConnectAsendiaRequestBody.validateJSON(instance); // throw an exception if no match
                // create ConnectAsendiaRequestBody from JS object
                this.actualInstance = ConnectAsendiaRequestBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConnectAsendiaRequestBody
            errorMessages.push("Failed to construct ConnectAsendiaRequestBody: " + err)
        }

        try {
            if (typeof instance === "ConnectAustraliaPostRequestBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConnectAustraliaPostRequestBody.validateJSON(instance); // throw an exception if no match
                // create ConnectAustraliaPostRequestBody from JS object
                this.actualInstance = ConnectAustraliaPostRequestBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConnectAustraliaPostRequestBody
            errorMessages.push("Failed to construct ConnectAustraliaPostRequestBody: " + err)
        }

        try {
            if (typeof instance === "ConnectCanadaPostRequestBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConnectCanadaPostRequestBody.validateJSON(instance); // throw an exception if no match
                // create ConnectCanadaPostRequestBody from JS object
                this.actualInstance = ConnectCanadaPostRequestBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConnectCanadaPostRequestBody
            errorMessages.push("Failed to construct ConnectCanadaPostRequestBody: " + err)
        }

        try {
            if (typeof instance === "ConnectDhlEcommerceRequestBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConnectDhlEcommerceRequestBody.validateJSON(instance); // throw an exception if no match
                // create ConnectDhlEcommerceRequestBody from JS object
                this.actualInstance = ConnectDhlEcommerceRequestBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConnectDhlEcommerceRequestBody
            errorMessages.push("Failed to construct ConnectDhlEcommerceRequestBody: " + err)
        }

        try {
            if (typeof instance === "ConnectDhlExpressRequestBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConnectDhlExpressRequestBody.validateJSON(instance); // throw an exception if no match
                // create ConnectDhlExpressRequestBody from JS object
                this.actualInstance = ConnectDhlExpressRequestBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConnectDhlExpressRequestBody
            errorMessages.push("Failed to construct ConnectDhlExpressRequestBody: " + err)
        }

        try {
            if (typeof instance === "ConnectDhlExpressAuRequestBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConnectDhlExpressAuRequestBody.validateJSON(instance); // throw an exception if no match
                // create ConnectDhlExpressAuRequestBody from JS object
                this.actualInstance = ConnectDhlExpressAuRequestBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConnectDhlExpressAuRequestBody
            errorMessages.push("Failed to construct ConnectDhlExpressAuRequestBody: " + err)
        }

        try {
            if (typeof instance === "ConnectDhlExpressCaRequestBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConnectDhlExpressCaRequestBody.validateJSON(instance); // throw an exception if no match
                // create ConnectDhlExpressCaRequestBody from JS object
                this.actualInstance = ConnectDhlExpressCaRequestBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConnectDhlExpressCaRequestBody
            errorMessages.push("Failed to construct ConnectDhlExpressCaRequestBody: " + err)
        }

        try {
            if (typeof instance === "ConnectDhlExpressUkRequestBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConnectDhlExpressUkRequestBody.validateJSON(instance); // throw an exception if no match
                // create ConnectDhlExpressUkRequestBody from JS object
                this.actualInstance = ConnectDhlExpressUkRequestBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConnectDhlExpressUkRequestBody
            errorMessages.push("Failed to construct ConnectDhlExpressUkRequestBody: " + err)
        }

        try {
            if (typeof instance === "ConnectDpdRequestBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConnectDpdRequestBody.validateJSON(instance); // throw an exception if no match
                // create ConnectDpdRequestBody from JS object
                this.actualInstance = ConnectDpdRequestBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConnectDpdRequestBody
            errorMessages.push("Failed to construct ConnectDpdRequestBody: " + err)
        }

        try {
            if (typeof instance === "ConnectEndiciaRequestBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConnectEndiciaRequestBody.validateJSON(instance); // throw an exception if no match
                // create ConnectEndiciaRequestBody from JS object
                this.actualInstance = ConnectEndiciaRequestBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConnectEndiciaRequestBody
            errorMessages.push("Failed to construct ConnectEndiciaRequestBody: " + err)
        }

        try {
            if (typeof instance === "ConnectFedexRequestBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConnectFedexRequestBody.validateJSON(instance); // throw an exception if no match
                // create ConnectFedexRequestBody from JS object
                this.actualInstance = ConnectFedexRequestBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConnectFedexRequestBody
            errorMessages.push("Failed to construct ConnectFedexRequestBody: " + err)
        }

        try {
            if (typeof instance === "ConnectFedexUkRequestBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConnectFedexUkRequestBody.validateJSON(instance); // throw an exception if no match
                // create ConnectFedexUkRequestBody from JS object
                this.actualInstance = ConnectFedexUkRequestBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConnectFedexUkRequestBody
            errorMessages.push("Failed to construct ConnectFedexUkRequestBody: " + err)
        }

        try {
            if (typeof instance === "ConnectFirstmileRequestBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConnectFirstmileRequestBody.validateJSON(instance); // throw an exception if no match
                // create ConnectFirstmileRequestBody from JS object
                this.actualInstance = ConnectFirstmileRequestBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConnectFirstmileRequestBody
            errorMessages.push("Failed to construct ConnectFirstmileRequestBody: " + err)
        }

        try {
            if (typeof instance === "ConnectImexRequestBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConnectImexRequestBody.validateJSON(instance); // throw an exception if no match
                // create ConnectImexRequestBody from JS object
                this.actualInstance = ConnectImexRequestBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConnectImexRequestBody
            errorMessages.push("Failed to construct ConnectImexRequestBody: " + err)
        }

        try {
            if (typeof instance === "ConnectNewgisticsRequestBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConnectNewgisticsRequestBody.validateJSON(instance); // throw an exception if no match
                // create ConnectNewgisticsRequestBody from JS object
                this.actualInstance = ConnectNewgisticsRequestBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConnectNewgisticsRequestBody
            errorMessages.push("Failed to construct ConnectNewgisticsRequestBody: " + err)
        }

        try {
            if (typeof instance === "ConnectOntracRequestBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConnectOntracRequestBody.validateJSON(instance); // throw an exception if no match
                // create ConnectOntracRequestBody from JS object
                this.actualInstance = ConnectOntracRequestBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConnectOntracRequestBody
            errorMessages.push("Failed to construct ConnectOntracRequestBody: " + err)
        }

        try {
            if (typeof instance === "ConnectPurolatorRequestBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConnectPurolatorRequestBody.validateJSON(instance); // throw an exception if no match
                // create ConnectPurolatorRequestBody from JS object
                this.actualInstance = ConnectPurolatorRequestBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConnectPurolatorRequestBody
            errorMessages.push("Failed to construct ConnectPurolatorRequestBody: " + err)
        }

        try {
            if (typeof instance === "ConnectRoyalMailRequestBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConnectRoyalMailRequestBody.validateJSON(instance); // throw an exception if no match
                // create ConnectRoyalMailRequestBody from JS object
                this.actualInstance = ConnectRoyalMailRequestBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConnectRoyalMailRequestBody
            errorMessages.push("Failed to construct ConnectRoyalMailRequestBody: " + err)
        }

        try {
            if (typeof instance === "ConnectRrDonnelleyRequestBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConnectRrDonnelleyRequestBody.validateJSON(instance); // throw an exception if no match
                // create ConnectRrDonnelleyRequestBody from JS object
                this.actualInstance = ConnectRrDonnelleyRequestBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConnectRrDonnelleyRequestBody
            errorMessages.push("Failed to construct ConnectRrDonnelleyRequestBody: " + err)
        }

        try {
            if (typeof instance === "ConnectSekoRequestBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConnectSekoRequestBody.validateJSON(instance); // throw an exception if no match
                // create ConnectSekoRequestBody from JS object
                this.actualInstance = ConnectSekoRequestBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConnectSekoRequestBody
            errorMessages.push("Failed to construct ConnectSekoRequestBody: " + err)
        }

        try {
            if (typeof instance === "ConnectSendleRequestBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConnectSendleRequestBody.validateJSON(instance); // throw an exception if no match
                // create ConnectSendleRequestBody from JS object
                this.actualInstance = ConnectSendleRequestBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConnectSendleRequestBody
            errorMessages.push("Failed to construct ConnectSendleRequestBody: " + err)
        }

        try {
            if (typeof instance === "ConnectStampsRequestBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConnectStampsRequestBody.validateJSON(instance); // throw an exception if no match
                // create ConnectStampsRequestBody from JS object
                this.actualInstance = ConnectStampsRequestBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConnectStampsRequestBody
            errorMessages.push("Failed to construct ConnectStampsRequestBody: " + err)
        }

        try {
            if (typeof instance === "ConnectUpsRequestBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ConnectUpsRequestBody.validateJSON(instance); // throw an exception if no match
                // create ConnectUpsRequestBody from JS object
                this.actualInstance = ConnectUpsRequestBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ConnectUpsRequestBody
            errorMessages.push("Failed to construct ConnectUpsRequestBody: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `ConnectCarrierRequestBody` with oneOf schemas ConnectAccessWorldwideRequestBody, ConnectAmazonBuyShippingRequestBody, ConnectAmazonShippingUk, ConnectApcRequestBody, ConnectAsendiaRequestBody, ConnectAustraliaPostRequestBody, ConnectCanadaPostRequestBody, ConnectDhlEcommerceRequestBody, ConnectDhlExpressAuRequestBody, ConnectDhlExpressCaRequestBody, ConnectDhlExpressRequestBody, ConnectDhlExpressUkRequestBody, ConnectDpdRequestBody, ConnectEndiciaRequestBody, ConnectFedexRequestBody, ConnectFedexUkRequestBody, ConnectFirstmileRequestBody, ConnectImexRequestBody, ConnectNewgisticsRequestBody, ConnectOntracRequestBody, ConnectPurolatorRequestBody, ConnectRoyalMailRequestBody, ConnectRrDonnelleyRequestBody, ConnectSekoRequestBody, ConnectSendleRequestBody, ConnectStampsRequestBody, ConnectUpsRequestBody. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `ConnectCarrierRequestBody` with oneOf schemas ConnectAccessWorldwideRequestBody, ConnectAmazonBuyShippingRequestBody, ConnectAmazonShippingUk, ConnectApcRequestBody, ConnectAsendiaRequestBody, ConnectAustraliaPostRequestBody, ConnectCanadaPostRequestBody, ConnectDhlEcommerceRequestBody, ConnectDhlExpressAuRequestBody, ConnectDhlExpressCaRequestBody, ConnectDhlExpressRequestBody, ConnectDhlExpressUkRequestBody, ConnectDpdRequestBody, ConnectEndiciaRequestBody, ConnectFedexRequestBody, ConnectFedexUkRequestBody, ConnectFirstmileRequestBody, ConnectImexRequestBody, ConnectNewgisticsRequestBody, ConnectOntracRequestBody, ConnectPurolatorRequestBody, ConnectRoyalMailRequestBody, ConnectRrDonnelleyRequestBody, ConnectSekoRequestBody, ConnectSendleRequestBody, ConnectStampsRequestBody, ConnectUpsRequestBody. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>ConnectCarrierRequestBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectCarrierRequestBody} obj Optional instance to populate.
     * @return {module:model/ConnectCarrierRequestBody} The populated <code>ConnectCarrierRequestBody</code> instance.
     */
    static constructFromObject(data, obj) {
        return new ConnectCarrierRequestBody(data);
    }

    /**
     * Gets the actual instance, which can be <code>ConnectAccessWorldwideRequestBody</code>, <code>ConnectAmazonBuyShippingRequestBody</code>, <code>ConnectAmazonShippingUk</code>, <code>ConnectApcRequestBody</code>, <code>ConnectAsendiaRequestBody</code>, <code>ConnectAustraliaPostRequestBody</code>, <code>ConnectCanadaPostRequestBody</code>, <code>ConnectDhlEcommerceRequestBody</code>, <code>ConnectDhlExpressAuRequestBody</code>, <code>ConnectDhlExpressCaRequestBody</code>, <code>ConnectDhlExpressRequestBody</code>, <code>ConnectDhlExpressUkRequestBody</code>, <code>ConnectDpdRequestBody</code>, <code>ConnectEndiciaRequestBody</code>, <code>ConnectFedexRequestBody</code>, <code>ConnectFedexUkRequestBody</code>, <code>ConnectFirstmileRequestBody</code>, <code>ConnectImexRequestBody</code>, <code>ConnectNewgisticsRequestBody</code>, <code>ConnectOntracRequestBody</code>, <code>ConnectPurolatorRequestBody</code>, <code>ConnectRoyalMailRequestBody</code>, <code>ConnectRrDonnelleyRequestBody</code>, <code>ConnectSekoRequestBody</code>, <code>ConnectSendleRequestBody</code>, <code>ConnectStampsRequestBody</code>, <code>ConnectUpsRequestBody</code>.
     * @return {(module:model/ConnectAccessWorldwideRequestBody|module:model/ConnectAmazonBuyShippingRequestBody|module:model/ConnectAmazonShippingUk|module:model/ConnectApcRequestBody|module:model/ConnectAsendiaRequestBody|module:model/ConnectAustraliaPostRequestBody|module:model/ConnectCanadaPostRequestBody|module:model/ConnectDhlEcommerceRequestBody|module:model/ConnectDhlExpressAuRequestBody|module:model/ConnectDhlExpressCaRequestBody|module:model/ConnectDhlExpressRequestBody|module:model/ConnectDhlExpressUkRequestBody|module:model/ConnectDpdRequestBody|module:model/ConnectEndiciaRequestBody|module:model/ConnectFedexRequestBody|module:model/ConnectFedexUkRequestBody|module:model/ConnectFirstmileRequestBody|module:model/ConnectImexRequestBody|module:model/ConnectNewgisticsRequestBody|module:model/ConnectOntracRequestBody|module:model/ConnectPurolatorRequestBody|module:model/ConnectRoyalMailRequestBody|module:model/ConnectRrDonnelleyRequestBody|module:model/ConnectSekoRequestBody|module:model/ConnectSendleRequestBody|module:model/ConnectStampsRequestBody|module:model/ConnectUpsRequestBody)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>ConnectAccessWorldwideRequestBody</code>, <code>ConnectAmazonBuyShippingRequestBody</code>, <code>ConnectAmazonShippingUk</code>, <code>ConnectApcRequestBody</code>, <code>ConnectAsendiaRequestBody</code>, <code>ConnectAustraliaPostRequestBody</code>, <code>ConnectCanadaPostRequestBody</code>, <code>ConnectDhlEcommerceRequestBody</code>, <code>ConnectDhlExpressAuRequestBody</code>, <code>ConnectDhlExpressCaRequestBody</code>, <code>ConnectDhlExpressRequestBody</code>, <code>ConnectDhlExpressUkRequestBody</code>, <code>ConnectDpdRequestBody</code>, <code>ConnectEndiciaRequestBody</code>, <code>ConnectFedexRequestBody</code>, <code>ConnectFedexUkRequestBody</code>, <code>ConnectFirstmileRequestBody</code>, <code>ConnectImexRequestBody</code>, <code>ConnectNewgisticsRequestBody</code>, <code>ConnectOntracRequestBody</code>, <code>ConnectPurolatorRequestBody</code>, <code>ConnectRoyalMailRequestBody</code>, <code>ConnectRrDonnelleyRequestBody</code>, <code>ConnectSekoRequestBody</code>, <code>ConnectSendleRequestBody</code>, <code>ConnectStampsRequestBody</code>, <code>ConnectUpsRequestBody</code>.
     * @param {(module:model/ConnectAccessWorldwideRequestBody|module:model/ConnectAmazonBuyShippingRequestBody|module:model/ConnectAmazonShippingUk|module:model/ConnectApcRequestBody|module:model/ConnectAsendiaRequestBody|module:model/ConnectAustraliaPostRequestBody|module:model/ConnectCanadaPostRequestBody|module:model/ConnectDhlEcommerceRequestBody|module:model/ConnectDhlExpressAuRequestBody|module:model/ConnectDhlExpressCaRequestBody|module:model/ConnectDhlExpressRequestBody|module:model/ConnectDhlExpressUkRequestBody|module:model/ConnectDpdRequestBody|module:model/ConnectEndiciaRequestBody|module:model/ConnectFedexRequestBody|module:model/ConnectFedexUkRequestBody|module:model/ConnectFirstmileRequestBody|module:model/ConnectImexRequestBody|module:model/ConnectNewgisticsRequestBody|module:model/ConnectOntracRequestBody|module:model/ConnectPurolatorRequestBody|module:model/ConnectRoyalMailRequestBody|module:model/ConnectRrDonnelleyRequestBody|module:model/ConnectSekoRequestBody|module:model/ConnectSendleRequestBody|module:model/ConnectStampsRequestBody|module:model/ConnectUpsRequestBody)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = ConnectCarrierRequestBody.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of ConnectCarrierRequestBody from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/ConnectCarrierRequestBody} An instance of ConnectCarrierRequestBody.
     */
    static fromJSON = function(json_string){
        return ConnectCarrierRequestBody.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Nickname
 * @member {String} nickname
 */
ConnectCarrierRequestBody.prototype['nickname'] = undefined;

/**
 * Password
 * @member {String} password
 */
ConnectCarrierRequestBody.prototype['password'] = undefined;

/**
 * Username
 * @member {String} username
 */
ConnectCarrierRequestBody.prototype['username'] = undefined;

/**
 * The email address
 * @member {String} email
 */
ConnectCarrierRequestBody.prototype['email'] = undefined;

/**
 * @member {String} merchant_seller_id
 */
ConnectCarrierRequestBody.prototype['merchant_seller_id'] = undefined;

/**
 * @member {String} mws_auth_token
 */
ConnectCarrierRequestBody.prototype['mws_auth_token'] = undefined;

/**
 * Amazon UK Shipping auth code.
 * @member {String} auth_code
 */
ConnectCarrierRequestBody.prototype['auth_code'] = undefined;

/**
 * Account number
 * @member {String} account_number
 */
ConnectCarrierRequestBody.prototype['account_number'] = undefined;

/**
 * FTP password
 * @member {String} ftp_password
 */
ConnectCarrierRequestBody.prototype['ftp_password'] = undefined;

/**
 * FTP username
 * @member {String} ftp_username
 */
ConnectCarrierRequestBody.prototype['ftp_username'] = undefined;

/**
 * API key
 * @member {String} api_key
 */
ConnectCarrierRequestBody.prototype['api_key'] = undefined;

/**
 * The DHL E-Commerce API secret. This field is optional, but if not set you will not be able to get rates for this account. 
 * @member {String} api_secret
 */
ConnectCarrierRequestBody.prototype['api_secret'] = undefined;

/**
 * Canada Post Account Contract ID
 * @member {String} contract_id
 */
ConnectCarrierRequestBody.prototype['contract_id'] = undefined;

/**
 * @member {module:model/AncillaryServiceEndorsement} ancillary_endorsement
 */
ConnectCarrierRequestBody.prototype['ancillary_endorsement'] = undefined;

/**
 * The client id
 * @member {String} client_id
 */
ConnectCarrierRequestBody.prototype['client_id'] = undefined;

/**
 * The distribution center
 * @member {String} distribution_center
 */
ConnectCarrierRequestBody.prototype['distribution_center'] = undefined;

/**
 * The pickup number
 * @member {String} pickup_number
 */
ConnectCarrierRequestBody.prototype['pickup_number'] = undefined;

/**
 * @member {String} registration_id
 */
ConnectCarrierRequestBody.prototype['registration_id'] = undefined;

/**
 * @member {String} software_name
 */
ConnectCarrierRequestBody.prototype['software_name'] = undefined;

/**
 * Sold To field
 * @member {String} sold_to
 */
ConnectCarrierRequestBody.prototype['sold_to'] = undefined;

/**
 * Country code
 * @member {String} country_code
 */
ConnectCarrierRequestBody.prototype['country_code'] = undefined;

/**
 * A string that uniquely identifies the site
 * @member {String} site_id
 */
ConnectCarrierRequestBody.prototype['site_id'] = undefined;

/**
 * Account
 * @member {String} account
 */
ConnectCarrierRequestBody.prototype['account'] = undefined;

/**
 * Passphrase
 * @member {String} passphrase
 */
ConnectCarrierRequestBody.prototype['passphrase'] = undefined;

/**
 * Address Line 1
 * @member {String} address1
 */
ConnectCarrierRequestBody.prototype['address1'] = undefined;

/**
 * Address Line 2
 * @member {String} address2
 */
ConnectCarrierRequestBody.prototype['address2'] = undefined;

/**
 * Boolean signaling agreement to the Fedex End User License Agreement
 * @member {Boolean} agree_to_eula
 */
ConnectCarrierRequestBody.prototype['agree_to_eula'] = undefined;

/**
 * City
 * @member {String} city
 */
ConnectCarrierRequestBody.prototype['city'] = undefined;

/**
 * Company
 * @member {String} company
 */
ConnectCarrierRequestBody.prototype['company'] = undefined;

/**
 * First name
 * @member {String} first_name
 */
ConnectCarrierRequestBody.prototype['first_name'] = undefined;

/**
 * Last name
 * @member {String} last_name
 */
ConnectCarrierRequestBody.prototype['last_name'] = undefined;

/**
 * Meter number
 * @member {String} meter_number
 */
ConnectCarrierRequestBody.prototype['meter_number'] = undefined;

/**
 * Phone
 * @member {String} phone
 */
ConnectCarrierRequestBody.prototype['phone'] = undefined;

/**
 * Postal code
 * @member {String} postal_code
 */
ConnectCarrierRequestBody.prototype['postal_code'] = undefined;

/**
 * State
 * @member {String} state
 */
ConnectCarrierRequestBody.prototype['state'] = undefined;

/**
 * Mailer id
 * @member {Number} mailer_id
 */
ConnectCarrierRequestBody.prototype['mailer_id'] = undefined;

/**
 * Profile name
 * @member {String} profile_name
 */
ConnectCarrierRequestBody.prototype['profile_name'] = undefined;

/**
 * Induction site
 * @member {String} induction_site
 */
ConnectCarrierRequestBody.prototype['induction_site'] = undefined;

/**
 * Merchant id
 * @member {Number} merchant_id
 */
ConnectCarrierRequestBody.prototype['merchant_id'] = undefined;

/**
 * Activation key
 * @member {String} activation_key
 */
ConnectCarrierRequestBody.prototype['activation_key'] = undefined;

/**
 * Company name
 * @member {String} company_name
 */
ConnectCarrierRequestBody.prototype['company_name'] = undefined;

/**
 * Contact name
 * @member {String} contact_name
 */
ConnectCarrierRequestBody.prototype['contact_name'] = undefined;

/**
 * The oba email address
 * @member {String} oba_email
 */
ConnectCarrierRequestBody.prototype['oba_email'] = undefined;

/**
 * Street line1
 * @member {String} street_line1
 */
ConnectCarrierRequestBody.prototype['street_line1'] = undefined;

/**
 * Street line2
 * @member {String} street_line2
 */
ConnectCarrierRequestBody.prototype['street_line2'] = undefined;

/**
 * Street line3
 * @member {String} street_line3
 */
ConnectCarrierRequestBody.prototype['street_line3'] = undefined;

/**
 * Seko Account Access Key
 * @member {String} access_key
 */
ConnectCarrierRequestBody.prototype['access_key'] = undefined;

/**
 * A string that uniquely identifies the sendle
 * @member {String} sendle_id
 */
ConnectCarrierRequestBody.prototype['sendle_id'] = undefined;

/**
 * Account country code
 * @member {String} account_country_code
 */
ConnectCarrierRequestBody.prototype['account_country_code'] = undefined;

/**
 * Account postal code
 * @member {String} account_postal_code
 */
ConnectCarrierRequestBody.prototype['account_postal_code'] = undefined;

/**
 * The Agreement to the [UPS Technology Agreement](https://www.ups.com/assets/resources/media/UTA_with_EUR.pdf)
 * @member {Boolean} agree_to_technology_agreement
 */
ConnectCarrierRequestBody.prototype['agree_to_technology_agreement'] = undefined;

/**
 * The UPS invoice
 * @member {module:model/UpsInvoice} invoice
 */
ConnectCarrierRequestBody.prototype['invoice'] = undefined;

/**
 * The invoice amount
 * @member {Number} invoice_amount
 */
ConnectCarrierRequestBody.prototype['invoice_amount'] = undefined;

/**
 * The invoice currency code
 * @member {String} invoice_currency_code
 */
ConnectCarrierRequestBody.prototype['invoice_currency_code'] = undefined;

/**
 * Title
 * @member {String} title
 */
ConnectCarrierRequestBody.prototype['title'] = undefined;


ConnectCarrierRequestBody.OneOf = ["ConnectAccessWorldwideRequestBody", "ConnectAmazonBuyShippingRequestBody", "ConnectAmazonShippingUk", "ConnectApcRequestBody", "ConnectAsendiaRequestBody", "ConnectAustraliaPostRequestBody", "ConnectCanadaPostRequestBody", "ConnectDhlEcommerceRequestBody", "ConnectDhlExpressAuRequestBody", "ConnectDhlExpressCaRequestBody", "ConnectDhlExpressRequestBody", "ConnectDhlExpressUkRequestBody", "ConnectDpdRequestBody", "ConnectEndiciaRequestBody", "ConnectFedexRequestBody", "ConnectFedexUkRequestBody", "ConnectFirstmileRequestBody", "ConnectImexRequestBody", "ConnectNewgisticsRequestBody", "ConnectOntracRequestBody", "ConnectPurolatorRequestBody", "ConnectRoyalMailRequestBody", "ConnectRrDonnelleyRequestBody", "ConnectSekoRequestBody", "ConnectSendleRequestBody", "ConnectStampsRequestBody", "ConnectUpsRequestBody"];

export default ConnectCarrierRequestBody;

