/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MonetaryValue from './MonetaryValue';
import Rate from './Rate';
import RateType from './RateType';
import ValidationStatus from './ValidationStatus';

/**
 * The GetRateByIdResponseBody model module.
 * @module model/GetRateByIdResponseBody
 * @version 1.1.202304191404
 */
class GetRateByIdResponseBody {
    /**
     * Constructs a new <code>GetRateByIdResponseBody</code>.
     * A rate response body
     * @alias module:model/GetRateByIdResponseBody
     * @implements module:model/Rate
     * @param carrierCode {String} carrier code
     * @param carrierFriendlyName {String} carrier friendly name
     * @param carrierId {String} A string that uniquely identifies the carrier
     * @param carrierNickname {String} carrier nickname
     * @param confirmationAmount {module:model/MonetaryValue} The confirmation amount
     * @param errorMessages {Array.<String>} The error messages
     * @param guaranteedService {Boolean} Indicates if the rate is guaranteed.
     * @param insuranceAmount {module:model/MonetaryValue} The insurance amount
     * @param negotiatedRate {Boolean} Indicates if the rates been negotiated
     * @param otherAmount {module:model/MonetaryValue} Any other charges associated with this rate
     * @param packageType {String} package type that this rate was estimated for
     * @param rateId {String} A string that uniquely identifies the rate
     * @param rateType {module:model/RateType} 
     * @param serviceCode {String} service code for the rate
     * @param serviceType {String} service type
     * @param shippingAmount {module:model/MonetaryValue} The shipping amount
     * @param trackable {Boolean} Indicates if rate is trackable
     * @param validationStatus {module:model/ValidationStatus} 
     * @param warningMessages {Array.<String>} The warning messages
     * @param zone {Number} Certain carriers base [their rates](https://blog.stamps.com/2017/09/08/usps-postal-zones/) off of custom zones that vary depending upon the ship_to and ship_from location 
     */
    constructor(carrierCode, carrierFriendlyName, carrierId, carrierNickname, confirmationAmount, errorMessages, guaranteedService, insuranceAmount, negotiatedRate, otherAmount, packageType, rateId, rateType, serviceCode, serviceType, shippingAmount, trackable, validationStatus, warningMessages, zone) { 
        Rate.initialize(this, carrierCode, carrierFriendlyName, carrierId, carrierNickname, confirmationAmount, errorMessages, guaranteedService, insuranceAmount, negotiatedRate, otherAmount, packageType, rateId, rateType, serviceCode, serviceType, shippingAmount, trackable, validationStatus, warningMessages, zone);
        GetRateByIdResponseBody.initialize(this, carrierCode, carrierFriendlyName, carrierId, carrierNickname, confirmationAmount, errorMessages, guaranteedService, insuranceAmount, negotiatedRate, otherAmount, packageType, rateId, rateType, serviceCode, serviceType, shippingAmount, trackable, validationStatus, warningMessages, zone);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, carrierCode, carrierFriendlyName, carrierId, carrierNickname, confirmationAmount, errorMessages, guaranteedService, insuranceAmount, negotiatedRate, otherAmount, packageType, rateId, rateType, serviceCode, serviceType, shippingAmount, trackable, validationStatus, warningMessages, zone) { 
        obj['carrier_code'] = carrierCode;
        obj['carrier_friendly_name'] = carrierFriendlyName;
        obj['carrier_id'] = carrierId;
        obj['carrier_nickname'] = carrierNickname;
        obj['confirmation_amount'] = confirmationAmount;
        obj['error_messages'] = errorMessages;
        obj['guaranteed_service'] = guaranteedService;
        obj['insurance_amount'] = insuranceAmount;
        obj['negotiated_rate'] = negotiatedRate;
        obj['other_amount'] = otherAmount;
        obj['package_type'] = packageType;
        obj['rate_id'] = rateId;
        obj['rate_type'] = rateType;
        obj['service_code'] = serviceCode;
        obj['service_type'] = serviceType;
        obj['shipping_amount'] = shippingAmount;
        obj['trackable'] = trackable;
        obj['validation_status'] = validationStatus;
        obj['warning_messages'] = warningMessages;
        obj['zone'] = zone;
    }

    /**
     * Constructs a <code>GetRateByIdResponseBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetRateByIdResponseBody} obj Optional instance to populate.
     * @return {module:model/GetRateByIdResponseBody} The populated <code>GetRateByIdResponseBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetRateByIdResponseBody();
            Rate.constructFromObject(data, obj);

            if (data.hasOwnProperty('carrier_code')) {
                obj['carrier_code'] = ApiClient.convertToType(data['carrier_code'], 'String');
            }
            if (data.hasOwnProperty('carrier_delivery_days')) {
                obj['carrier_delivery_days'] = ApiClient.convertToType(data['carrier_delivery_days'], 'String');
            }
            if (data.hasOwnProperty('carrier_friendly_name')) {
                obj['carrier_friendly_name'] = ApiClient.convertToType(data['carrier_friendly_name'], 'String');
            }
            if (data.hasOwnProperty('carrier_id')) {
                obj['carrier_id'] = ApiClient.convertToType(data['carrier_id'], 'String');
            }
            if (data.hasOwnProperty('carrier_nickname')) {
                obj['carrier_nickname'] = ApiClient.convertToType(data['carrier_nickname'], 'String');
            }
            if (data.hasOwnProperty('confirmation_amount')) {
                obj['confirmation_amount'] = ApiClient.convertToType(data['confirmation_amount'], MonetaryValue);
            }
            if (data.hasOwnProperty('delivery_days')) {
                obj['delivery_days'] = ApiClient.convertToType(data['delivery_days'], 'Number');
            }
            if (data.hasOwnProperty('error_messages')) {
                obj['error_messages'] = ApiClient.convertToType(data['error_messages'], ['String']);
            }
            if (data.hasOwnProperty('estimated_delivery_date')) {
                obj['estimated_delivery_date'] = ApiClient.convertToType(data['estimated_delivery_date'], 'Date');
            }
            if (data.hasOwnProperty('guaranteed_service')) {
                obj['guaranteed_service'] = ApiClient.convertToType(data['guaranteed_service'], 'Boolean');
            }
            if (data.hasOwnProperty('insurance_amount')) {
                obj['insurance_amount'] = ApiClient.convertToType(data['insurance_amount'], MonetaryValue);
            }
            if (data.hasOwnProperty('negotiated_rate')) {
                obj['negotiated_rate'] = ApiClient.convertToType(data['negotiated_rate'], 'Boolean');
            }
            if (data.hasOwnProperty('other_amount')) {
                obj['other_amount'] = ApiClient.convertToType(data['other_amount'], MonetaryValue);
            }
            if (data.hasOwnProperty('package_type')) {
                obj['package_type'] = ApiClient.convertToType(data['package_type'], 'String');
            }
            if (data.hasOwnProperty('rate_id')) {
                obj['rate_id'] = ApiClient.convertToType(data['rate_id'], 'String');
            }
            if (data.hasOwnProperty('rate_type')) {
                obj['rate_type'] = ApiClient.convertToType(data['rate_type'], RateType);
            }
            if (data.hasOwnProperty('service_code')) {
                obj['service_code'] = ApiClient.convertToType(data['service_code'], 'String');
            }
            if (data.hasOwnProperty('service_type')) {
                obj['service_type'] = ApiClient.convertToType(data['service_type'], 'String');
            }
            if (data.hasOwnProperty('ship_date')) {
                obj['ship_date'] = ApiClient.convertToType(data['ship_date'], 'Date');
            }
            if (data.hasOwnProperty('shipping_amount')) {
                obj['shipping_amount'] = ApiClient.convertToType(data['shipping_amount'], MonetaryValue);
            }
            if (data.hasOwnProperty('tax_amount')) {
                obj['tax_amount'] = ApiClient.convertToType(data['tax_amount'], MonetaryValue);
            }
            if (data.hasOwnProperty('trackable')) {
                obj['trackable'] = ApiClient.convertToType(data['trackable'], 'Boolean');
            }
            if (data.hasOwnProperty('validation_status')) {
                obj['validation_status'] = ApiClient.convertToType(data['validation_status'], ValidationStatus);
            }
            if (data.hasOwnProperty('warning_messages')) {
                obj['warning_messages'] = ApiClient.convertToType(data['warning_messages'], ['String']);
            }
            if (data.hasOwnProperty('zone')) {
                obj['zone'] = ApiClient.convertToType(data['zone'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetRateByIdResponseBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetRateByIdResponseBody</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetRateByIdResponseBody.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['carrier_code'] && !(typeof data['carrier_code'] === 'string' || data['carrier_code'] instanceof String)) {
            throw new Error("Expected the field `carrier_code` to be a primitive type in the JSON string but got " + data['carrier_code']);
        }
        // ensure the json data is a string
        if (data['carrier_delivery_days'] && !(typeof data['carrier_delivery_days'] === 'string' || data['carrier_delivery_days'] instanceof String)) {
            throw new Error("Expected the field `carrier_delivery_days` to be a primitive type in the JSON string but got " + data['carrier_delivery_days']);
        }
        // ensure the json data is a string
        if (data['carrier_friendly_name'] && !(typeof data['carrier_friendly_name'] === 'string' || data['carrier_friendly_name'] instanceof String)) {
            throw new Error("Expected the field `carrier_friendly_name` to be a primitive type in the JSON string but got " + data['carrier_friendly_name']);
        }
        // ensure the json data is a string
        if (data['carrier_id'] && !(typeof data['carrier_id'] === 'string' || data['carrier_id'] instanceof String)) {
            throw new Error("Expected the field `carrier_id` to be a primitive type in the JSON string but got " + data['carrier_id']);
        }
        // ensure the json data is a string
        if (data['carrier_nickname'] && !(typeof data['carrier_nickname'] === 'string' || data['carrier_nickname'] instanceof String)) {
            throw new Error("Expected the field `carrier_nickname` to be a primitive type in the JSON string but got " + data['carrier_nickname']);
        }
        // validate the optional field `confirmation_amount`
        if (data['confirmation_amount']) { // data not null
          MonetaryValue.validateJSON(data['confirmation_amount']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['error_messages'])) {
            throw new Error("Expected the field `error_messages` to be an array in the JSON data but got " + data['error_messages']);
        }
        // validate the optional field `insurance_amount`
        if (data['insurance_amount']) { // data not null
          MonetaryValue.validateJSON(data['insurance_amount']);
        }
        // validate the optional field `other_amount`
        if (data['other_amount']) { // data not null
          MonetaryValue.validateJSON(data['other_amount']);
        }
        // ensure the json data is a string
        if (data['package_type'] && !(typeof data['package_type'] === 'string' || data['package_type'] instanceof String)) {
            throw new Error("Expected the field `package_type` to be a primitive type in the JSON string but got " + data['package_type']);
        }
        // ensure the json data is a string
        if (data['rate_id'] && !(typeof data['rate_id'] === 'string' || data['rate_id'] instanceof String)) {
            throw new Error("Expected the field `rate_id` to be a primitive type in the JSON string but got " + data['rate_id']);
        }
        // ensure the json data is a string
        if (data['service_code'] && !(typeof data['service_code'] === 'string' || data['service_code'] instanceof String)) {
            throw new Error("Expected the field `service_code` to be a primitive type in the JSON string but got " + data['service_code']);
        }
        // ensure the json data is a string
        if (data['service_type'] && !(typeof data['service_type'] === 'string' || data['service_type'] instanceof String)) {
            throw new Error("Expected the field `service_type` to be a primitive type in the JSON string but got " + data['service_type']);
        }
        // validate the optional field `shipping_amount`
        if (data['shipping_amount']) { // data not null
          MonetaryValue.validateJSON(data['shipping_amount']);
        }
        // validate the optional field `tax_amount`
        if (data['tax_amount']) { // data not null
          MonetaryValue.validateJSON(data['tax_amount']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['warning_messages'])) {
            throw new Error("Expected the field `warning_messages` to be an array in the JSON data but got " + data['warning_messages']);
        }

        return true;
    }


}

GetRateByIdResponseBody.RequiredProperties = ["carrier_code", "carrier_friendly_name", "carrier_id", "carrier_nickname", "confirmation_amount", "error_messages", "guaranteed_service", "insurance_amount", "negotiated_rate", "other_amount", "package_type", "rate_id", "rate_type", "service_code", "service_type", "shipping_amount", "trackable", "validation_status", "warning_messages", "zone"];

/**
 * carrier code
 * @member {String} carrier_code
 */
GetRateByIdResponseBody.prototype['carrier_code'] = undefined;

/**
 * The carrier delivery days
 * @member {String} carrier_delivery_days
 */
GetRateByIdResponseBody.prototype['carrier_delivery_days'] = undefined;

/**
 * carrier friendly name
 * @member {String} carrier_friendly_name
 */
GetRateByIdResponseBody.prototype['carrier_friendly_name'] = undefined;

/**
 * A string that uniquely identifies the carrier
 * @member {String} carrier_id
 */
GetRateByIdResponseBody.prototype['carrier_id'] = undefined;

/**
 * carrier nickname
 * @member {String} carrier_nickname
 */
GetRateByIdResponseBody.prototype['carrier_nickname'] = undefined;

/**
 * The confirmation amount
 * @member {module:model/MonetaryValue} confirmation_amount
 */
GetRateByIdResponseBody.prototype['confirmation_amount'] = undefined;

/**
 * The number of days estimated for delivery, this will show the _actual_ delivery time if for example, the package gets shipped on a Friday 
 * @member {Number} delivery_days
 */
GetRateByIdResponseBody.prototype['delivery_days'] = undefined;

/**
 * The error messages
 * @member {Array.<String>} error_messages
 */
GetRateByIdResponseBody.prototype['error_messages'] = undefined;

/**
 * An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date, but not a specific time.  The value _may_ contain a time component, but it will be set to `00:00:00` UTC by ShipEngine. 
 * @member {Date} estimated_delivery_date
 */
GetRateByIdResponseBody.prototype['estimated_delivery_date'] = undefined;

/**
 * Indicates if the rate is guaranteed.
 * @member {Boolean} guaranteed_service
 */
GetRateByIdResponseBody.prototype['guaranteed_service'] = undefined;

/**
 * The insurance amount
 * @member {module:model/MonetaryValue} insurance_amount
 */
GetRateByIdResponseBody.prototype['insurance_amount'] = undefined;

/**
 * Indicates if the rates been negotiated
 * @member {Boolean} negotiated_rate
 */
GetRateByIdResponseBody.prototype['negotiated_rate'] = undefined;

/**
 * Any other charges associated with this rate
 * @member {module:model/MonetaryValue} other_amount
 */
GetRateByIdResponseBody.prototype['other_amount'] = undefined;

/**
 * package type that this rate was estimated for
 * @member {String} package_type
 */
GetRateByIdResponseBody.prototype['package_type'] = undefined;

/**
 * A string that uniquely identifies the rate
 * @member {String} rate_id
 */
GetRateByIdResponseBody.prototype['rate_id'] = undefined;

/**
 * @member {module:model/RateType} rate_type
 */
GetRateByIdResponseBody.prototype['rate_type'] = undefined;

/**
 * service code for the rate
 * @member {String} service_code
 */
GetRateByIdResponseBody.prototype['service_code'] = undefined;

/**
 * service type
 * @member {String} service_type
 */
GetRateByIdResponseBody.prototype['service_type'] = undefined;

/**
 * ship date
 * @member {Date} ship_date
 */
GetRateByIdResponseBody.prototype['ship_date'] = undefined;

/**
 * The shipping amount
 * @member {module:model/MonetaryValue} shipping_amount
 */
GetRateByIdResponseBody.prototype['shipping_amount'] = undefined;

/**
 * Tariff and additional taxes associated with an international shipment.
 * @member {module:model/MonetaryValue} tax_amount
 */
GetRateByIdResponseBody.prototype['tax_amount'] = undefined;

/**
 * Indicates if rate is trackable
 * @member {Boolean} trackable
 */
GetRateByIdResponseBody.prototype['trackable'] = undefined;

/**
 * @member {module:model/ValidationStatus} validation_status
 */
GetRateByIdResponseBody.prototype['validation_status'] = undefined;

/**
 * The warning messages
 * @member {Array.<String>} warning_messages
 */
GetRateByIdResponseBody.prototype['warning_messages'] = undefined;

/**
 * Certain carriers base [their rates](https://blog.stamps.com/2017/09/08/usps-postal-zones/) off of custom zones that vary depending upon the ship_to and ship_from location 
 * @member {Number} zone
 */
GetRateByIdResponseBody.prototype['zone'] = undefined;


// Implement Rate interface:
/**
 * carrier code
 * @member {String} carrier_code
 */
Rate.prototype['carrier_code'] = undefined;
/**
 * The carrier delivery days
 * @member {String} carrier_delivery_days
 */
Rate.prototype['carrier_delivery_days'] = undefined;
/**
 * carrier friendly name
 * @member {String} carrier_friendly_name
 */
Rate.prototype['carrier_friendly_name'] = undefined;
/**
 * A string that uniquely identifies the carrier
 * @member {String} carrier_id
 */
Rate.prototype['carrier_id'] = undefined;
/**
 * carrier nickname
 * @member {String} carrier_nickname
 */
Rate.prototype['carrier_nickname'] = undefined;
/**
 * The confirmation amount
 * @member {module:model/MonetaryValue} confirmation_amount
 */
Rate.prototype['confirmation_amount'] = undefined;
/**
 * The number of days estimated for delivery, this will show the _actual_ delivery time if for example, the package gets shipped on a Friday 
 * @member {Number} delivery_days
 */
Rate.prototype['delivery_days'] = undefined;
/**
 * The error messages
 * @member {Array.<String>} error_messages
 */
Rate.prototype['error_messages'] = undefined;
/**
 * An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date, but not a specific time.  The value _may_ contain a time component, but it will be set to `00:00:00` UTC by ShipEngine. 
 * @member {Date} estimated_delivery_date
 */
Rate.prototype['estimated_delivery_date'] = undefined;
/**
 * Indicates if the rate is guaranteed.
 * @member {Boolean} guaranteed_service
 */
Rate.prototype['guaranteed_service'] = undefined;
/**
 * The insurance amount
 * @member {module:model/MonetaryValue} insurance_amount
 */
Rate.prototype['insurance_amount'] = undefined;
/**
 * Indicates if the rates been negotiated
 * @member {Boolean} negotiated_rate
 */
Rate.prototype['negotiated_rate'] = undefined;
/**
 * Any other charges associated with this rate
 * @member {module:model/MonetaryValue} other_amount
 */
Rate.prototype['other_amount'] = undefined;
/**
 * package type that this rate was estimated for
 * @member {String} package_type
 */
Rate.prototype['package_type'] = undefined;
/**
 * A string that uniquely identifies the rate
 * @member {String} rate_id
 */
Rate.prototype['rate_id'] = undefined;
/**
 * @member {module:model/RateType} rate_type
 */
Rate.prototype['rate_type'] = undefined;
/**
 * service code for the rate
 * @member {String} service_code
 */
Rate.prototype['service_code'] = undefined;
/**
 * service type
 * @member {String} service_type
 */
Rate.prototype['service_type'] = undefined;
/**
 * ship date
 * @member {Date} ship_date
 */
Rate.prototype['ship_date'] = undefined;
/**
 * The shipping amount
 * @member {module:model/MonetaryValue} shipping_amount
 */
Rate.prototype['shipping_amount'] = undefined;
/**
 * Tariff and additional taxes associated with an international shipment.
 * @member {module:model/MonetaryValue} tax_amount
 */
Rate.prototype['tax_amount'] = undefined;
/**
 * Indicates if rate is trackable
 * @member {Boolean} trackable
 */
Rate.prototype['trackable'] = undefined;
/**
 * @member {module:model/ValidationStatus} validation_status
 */
Rate.prototype['validation_status'] = undefined;
/**
 * The warning messages
 * @member {Array.<String>} warning_messages
 */
Rate.prototype['warning_messages'] = undefined;
/**
 * Certain carriers base [their rates](https://blog.stamps.com/2017/09/08/usps-postal-zones/) off of custom zones that vary depending upon the ship_to and ship_from location 
 * @member {Number} zone
 */
Rate.prototype['zone'] = undefined;




export default GetRateByIdResponseBody;

