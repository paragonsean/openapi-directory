/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateShipmentsRequestBody from '../model/CreateShipmentsRequestBody';
import CreateShipmentsResponseBody from '../model/CreateShipmentsResponseBody';
import ErrorResponseBody from '../model/ErrorResponseBody';
import GetShipmentByExternalIdResponseBody from '../model/GetShipmentByExternalIdResponseBody';
import GetShipmentByIdResponseBody from '../model/GetShipmentByIdResponseBody';
import ListShipmentRatesResponseBody from '../model/ListShipmentRatesResponseBody';
import ListShipmentsResponseBody from '../model/ListShipmentsResponseBody';
import ParseShipmentRequestBody from '../model/ParseShipmentRequestBody';
import ParseShipmentResponseBody from '../model/ParseShipmentResponseBody';
import ShipmentStatus from '../model/ShipmentStatus';
import ShipmentsSortBy from '../model/ShipmentsSortBy';
import SortDir from '../model/SortDir';
import TagShipmentResponseBody from '../model/TagShipmentResponseBody';
import UpdateShipmentRequestBody from '../model/UpdateShipmentRequestBody';
import UpdateShipmentResponseBody from '../model/UpdateShipmentResponseBody';

/**
* Shipments service.
* @module api/ShipmentsApi
* @version 1.1.202304191404
*/
export default class ShipmentsApi {

    /**
    * Constructs a new ShipmentsApi. 
    * @alias module:api/ShipmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelShipments operation.
     * @callback module:api/ShipmentsApi~cancelShipmentsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a Shipment
     * Mark a shipment cancelled, if it is no longer needed or being used by your organized. Any label associated with the shipment needs to be voided first An example use case would be if a batch label creation job is going to run at a set time and only queries `pending` shipments. Marking a shipment as cancelled would remove it from this process 
     * @param {String} shipmentId Shipment ID
     * @param {module:api/ShipmentsApi~cancelShipmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    cancelShipments(shipmentId, callback) {
      let postBody = null;
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling cancelShipments");
      }

      let pathParams = {
        'shipment_id': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/shipments/{shipment_id}/cancel', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createShipments operation.
     * @callback module:api/ShipmentsApi~createShipmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateShipmentsResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Shipments
     * Create one or multiple shipments.
     * @param {module:model/CreateShipmentsRequestBody} createShipmentsRequestBody 
     * @param {module:api/ShipmentsApi~createShipmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateShipmentsResponseBody}
     */
    createShipments(createShipmentsRequestBody, callback) {
      let postBody = createShipmentsRequestBody;
      // verify the required parameter 'createShipmentsRequestBody' is set
      if (createShipmentsRequestBody === undefined || createShipmentsRequestBody === null) {
        throw new Error("Missing the required parameter 'createShipmentsRequestBody' when calling createShipments");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateShipmentsResponseBody;
      return this.apiClient.callApi(
        '/v1/shipments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getShipmentByExternalId operation.
     * @callback module:api/ShipmentsApi~getShipmentByExternalIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetShipmentByExternalIdResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Shipment By External ID
     * Query Shipments created using your own custom ID convention using this endpint
     * @param {String} externalShipmentId 
     * @param {module:api/ShipmentsApi~getShipmentByExternalIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetShipmentByExternalIdResponseBody}
     */
    getShipmentByExternalId(externalShipmentId, callback) {
      let postBody = null;
      // verify the required parameter 'externalShipmentId' is set
      if (externalShipmentId === undefined || externalShipmentId === null) {
        throw new Error("Missing the required parameter 'externalShipmentId' when calling getShipmentByExternalId");
      }

      let pathParams = {
        'external_shipment_id': externalShipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetShipmentByExternalIdResponseBody;
      return this.apiClient.callApi(
        '/v1/shipments/external_shipment_id/{external_shipment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getShipmentById operation.
     * @callback module:api/ShipmentsApi~getShipmentByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetShipmentByIdResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Shipment By ID
     * Get an individual shipment based on its ID
     * @param {String} shipmentId Shipment ID
     * @param {module:api/ShipmentsApi~getShipmentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetShipmentByIdResponseBody}
     */
    getShipmentById(shipmentId, callback) {
      let postBody = null;
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling getShipmentById");
      }

      let pathParams = {
        'shipment_id': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetShipmentByIdResponseBody;
      return this.apiClient.callApi(
        '/v1/shipments/{shipment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listShipmentRates operation.
     * @callback module:api/ShipmentsApi~listShipmentRatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListShipmentRatesResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Shipment Rates
     * Get Rates for the shipment information associated with the shipment ID
     * @param {String} shipmentId Shipment ID
     * @param {Object} opts Optional parameters
     * @param {Date} [createdAtStart] Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time)
     * @param {module:api/ShipmentsApi~listShipmentRatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListShipmentRatesResponseBody}
     */
    listShipmentRates(shipmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling listShipmentRates");
      }

      let pathParams = {
        'shipment_id': shipmentId
      };
      let queryParams = {
        'created_at_start': opts['createdAtStart']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListShipmentRatesResponseBody;
      return this.apiClient.callApi(
        '/v1/shipments/{shipment_id}/rates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listShipments operation.
     * @callback module:api/ShipmentsApi~listShipmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListShipmentsResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Shipments
     * Get list of Shipments
     * @param {Object} opts Optional parameters
     * @param {module:model/ShipmentStatus} [shipmentStatus] 
     * @param {String} [batchId] Batch ID
     * @param {String} [tag] Search for shipments based on the custom tag added to the shipment object
     * @param {Date} [createdAtStart] Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time)
     * @param {Date} [createdAtEnd] Used to create a filter for when a resource was created, (ex. A shipment that was created before a certain time)
     * @param {Date} [modifiedAtStart] Used to create a filter for when a resource was modified (ex. A shipment that was modified after a certain time)
     * @param {Date} [modifiedAtEnd] Used to create a filter for when a resource was modified (ex. A shipment that was modified before a certain time)
     * @param {Number} [page = 1)] Return a specific page of results. Defaults to the first page. If set to a number that's greater than the number of pages of results, an empty page is returned. 
     * @param {Number} [pageSize = 25)] The number of results to return per response.
     * @param {String} [salesOrderId] Sales Order ID
     * @param {module:model/SortDir} [sortDir] Controls the sort order of the query.
     * @param {module:model/ShipmentsSortBy} [sortBy] 
     * @param {module:api/ShipmentsApi~listShipmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListShipmentsResponseBody}
     */
    listShipments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'shipment_status': opts['shipmentStatus'],
        'batch_id': opts['batchId'],
        'tag': opts['tag'],
        'created_at_start': opts['createdAtStart'],
        'created_at_end': opts['createdAtEnd'],
        'modified_at_start': opts['modifiedAtStart'],
        'modified_at_end': opts['modifiedAtEnd'],
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'sales_order_id': opts['salesOrderId'],
        'sort_dir': opts['sortDir'],
        'sort_by': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListShipmentsResponseBody;
      return this.apiClient.callApi(
        '/v1/shipments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the parseShipment operation.
     * @callback module:api/ShipmentsApi~parseShipmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ParseShipmentResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Parse shipping info
     * The shipment-recognition API makes it easy for you to extract shipping data from unstructured text, including people's names, addresses, package weights and dimensions, insurance and delivery requirements, and more.  Data often enters your system as unstructured text (for example: emails, SMS messages, support tickets, or other documents). ShipEngine's shipment-recognition API helps you extract meaningful, structured data from this unstructured text. The parsed shipment data is returned in the same structure that's used for other ShipEngine APIs, so you can easily use the parsed data to create a shipping label.  > **Note:** Shipment recognition is currently supported for the United States, Canada, Australia, New Zealand, the United Kingdom, and Ireland. 
     * @param {module:model/ParseShipmentRequestBody} parseShipmentRequestBody The only required field is `text`, which is the text to be parsed. You can optionally also provide a `shipment` containing any already-known values. For example, you probably already know the `ship_from` address, and you may also already know what carrier and service you want to use. 
     * @param {module:api/ShipmentsApi~parseShipmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ParseShipmentResponseBody}
     */
    parseShipment(parseShipmentRequestBody, callback) {
      let postBody = parseShipmentRequestBody;
      // verify the required parameter 'parseShipmentRequestBody' is set
      if (parseShipmentRequestBody === undefined || parseShipmentRequestBody === null) {
        throw new Error("Missing the required parameter 'parseShipmentRequestBody' when calling parseShipment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ParseShipmentResponseBody;
      return this.apiClient.callApi(
        '/v1/shipments/recognize', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagShipment operation.
     * @callback module:api/ShipmentsApi~tagShipmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagShipmentResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Tag to Shipment
     * Add a tag to the shipment object
     * @param {String} shipmentId Shipment ID
     * @param {String} tagName 
     * @param {module:api/ShipmentsApi~tagShipmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagShipmentResponseBody}
     */
    tagShipment(shipmentId, tagName, callback) {
      let postBody = null;
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling tagShipment");
      }
      // verify the required parameter 'tagName' is set
      if (tagName === undefined || tagName === null) {
        throw new Error("Missing the required parameter 'tagName' when calling tagShipment");
      }

      let pathParams = {
        'shipment_id': shipmentId,
        'tag_name': tagName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TagShipmentResponseBody;
      return this.apiClient.callApi(
        '/v1/shipments/{shipment_id}/tags/{tag_name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagShipment operation.
     * @callback module:api/ShipmentsApi~untagShipmentCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Tag from Shipment
     * Remove an existing tag from the Shipment object
     * @param {String} shipmentId Shipment ID
     * @param {String} tagName 
     * @param {module:api/ShipmentsApi~untagShipmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    untagShipment(shipmentId, tagName, callback) {
      let postBody = null;
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling untagShipment");
      }
      // verify the required parameter 'tagName' is set
      if (tagName === undefined || tagName === null) {
        throw new Error("Missing the required parameter 'tagName' when calling untagShipment");
      }

      let pathParams = {
        'shipment_id': shipmentId,
        'tag_name': tagName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/shipments/{shipment_id}/tags/{tag_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateShipment operation.
     * @callback module:api/ShipmentsApi~updateShipmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateShipmentResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Shipment By ID
     * Update a shipment object based on its ID
     * @param {String} shipmentId Shipment ID
     * @param {module:model/UpdateShipmentRequestBody} updateShipmentRequestBody 
     * @param {module:api/ShipmentsApi~updateShipmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateShipmentResponseBody}
     */
    updateShipment(shipmentId, updateShipmentRequestBody, callback) {
      let postBody = updateShipmentRequestBody;
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling updateShipment");
      }
      // verify the required parameter 'updateShipmentRequestBody' is set
      if (updateShipmentRequestBody === undefined || updateShipmentRequestBody === null) {
        throw new Error("Missing the required parameter 'updateShipmentRequestBody' when calling updateShipment");
      }

      let pathParams = {
        'shipment_id': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateShipmentResponseBody;
      return this.apiClient.callApi(
        '/v1/shipments/{shipment_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
