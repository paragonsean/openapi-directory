/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateWarehouseRequestBody from '../model/CreateWarehouseRequestBody';
import CreateWarehouseResponseBody from '../model/CreateWarehouseResponseBody';
import ErrorResponseBody from '../model/ErrorResponseBody';
import GetWarehouseByIdResponseBody from '../model/GetWarehouseByIdResponseBody';
import ListWarehousesResponseBody from '../model/ListWarehousesResponseBody';
import UpdateWarehouseRequestBody from '../model/UpdateWarehouseRequestBody';
import UpdateWarehouseSettingsRequestBody from '../model/UpdateWarehouseSettingsRequestBody';

/**
* Warehouses service.
* @module api/WarehousesApi
* @version 1.1.202304191404
*/
export default class WarehousesApi {

    /**
    * Constructs a new WarehousesApi. 
    * @alias module:api/WarehousesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createWarehouse operation.
     * @callback module:api/WarehousesApi~createWarehouseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWarehouseResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Warehouse
     * Create a warehouse location that you can use to create shipping items by simply passing in the generated warehouse id. If the return address is not supplied in the request body then it is assumed that the origin address is the return address as well 
     * @param {module:model/CreateWarehouseRequestBody} createWarehouseRequestBody 
     * @param {module:api/WarehousesApi~createWarehouseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWarehouseResponseBody}
     */
    createWarehouse(createWarehouseRequestBody, callback) {
      let postBody = createWarehouseRequestBody;
      // verify the required parameter 'createWarehouseRequestBody' is set
      if (createWarehouseRequestBody === undefined || createWarehouseRequestBody === null) {
        throw new Error("Missing the required parameter 'createWarehouseRequestBody' when calling createWarehouse");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWarehouseResponseBody;
      return this.apiClient.callApi(
        '/v1/warehouses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWarehouse operation.
     * @callback module:api/WarehousesApi~deleteWarehouseCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Warehouse By ID
     * Delete a warehouse by ID
     * @param {String} warehouseId Warehouse ID
     * @param {module:api/WarehousesApi~deleteWarehouseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    deleteWarehouse(warehouseId, callback) {
      let postBody = null;
      // verify the required parameter 'warehouseId' is set
      if (warehouseId === undefined || warehouseId === null) {
        throw new Error("Missing the required parameter 'warehouseId' when calling deleteWarehouse");
      }

      let pathParams = {
        'warehouse_id': warehouseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/warehouses/{warehouse_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWarehouseById operation.
     * @callback module:api/WarehousesApi~getWarehouseByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetWarehouseByIdResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Warehouse By Id
     * Retrieve warehouse data based on the warehouse ID
     * @param {String} warehouseId Warehouse ID
     * @param {module:api/WarehousesApi~getWarehouseByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetWarehouseByIdResponseBody}
     */
    getWarehouseById(warehouseId, callback) {
      let postBody = null;
      // verify the required parameter 'warehouseId' is set
      if (warehouseId === undefined || warehouseId === null) {
        throw new Error("Missing the required parameter 'warehouseId' when calling getWarehouseById");
      }

      let pathParams = {
        'warehouse_id': warehouseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetWarehouseByIdResponseBody;
      return this.apiClient.callApi(
        '/v1/warehouses/{warehouse_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWarehouses operation.
     * @callback module:api/WarehousesApi~listWarehousesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWarehousesResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Warehouses
     * Retrieve a list of warehouses associated with this account.
     * @param {module:api/WarehousesApi~listWarehousesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWarehousesResponseBody}
     */
    listWarehouses(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListWarehousesResponseBody;
      return this.apiClient.callApi(
        '/v1/warehouses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWarehouse operation.
     * @callback module:api/WarehousesApi~updateWarehouseCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Warehouse By Id
     * Update Warehouse object information
     * @param {String} warehouseId Warehouse ID
     * @param {module:model/UpdateWarehouseRequestBody} updateWarehouseRequestBody 
     * @param {module:api/WarehousesApi~updateWarehouseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    updateWarehouse(warehouseId, updateWarehouseRequestBody, callback) {
      let postBody = updateWarehouseRequestBody;
      // verify the required parameter 'warehouseId' is set
      if (warehouseId === undefined || warehouseId === null) {
        throw new Error("Missing the required parameter 'warehouseId' when calling updateWarehouse");
      }
      // verify the required parameter 'updateWarehouseRequestBody' is set
      if (updateWarehouseRequestBody === undefined || updateWarehouseRequestBody === null) {
        throw new Error("Missing the required parameter 'updateWarehouseRequestBody' when calling updateWarehouse");
      }

      let pathParams = {
        'warehouse_id': warehouseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/warehouses/{warehouse_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWarehouseSettings operation.
     * @callback module:api/WarehousesApi~updateWarehouseSettingsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Warehouse Settings
     * Update Warehouse settings object information
     * @param {String} warehouseId Warehouse ID
     * @param {module:model/UpdateWarehouseSettingsRequestBody} updateWarehouseSettingsRequestBody 
     * @param {module:api/WarehousesApi~updateWarehouseSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    updateWarehouseSettings(warehouseId, updateWarehouseSettingsRequestBody, callback) {
      let postBody = updateWarehouseSettingsRequestBody;
      // verify the required parameter 'warehouseId' is set
      if (warehouseId === undefined || warehouseId === null) {
        throw new Error("Missing the required parameter 'warehouseId' when calling updateWarehouseSettings");
      }
      // verify the required parameter 'updateWarehouseSettingsRequestBody' is set
      if (updateWarehouseSettingsRequestBody === undefined || updateWarehouseSettingsRequestBody === null) {
        throw new Error("Missing the required parameter 'updateWarehouseSettingsRequestBody' when calling updateWarehouseSettings");
      }

      let pathParams = {
        'warehouse_id': warehouseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/warehouses/{warehouse_id}/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
