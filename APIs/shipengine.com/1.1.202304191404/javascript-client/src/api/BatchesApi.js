/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddToBatchRequestBody from '../model/AddToBatchRequestBody';
import BatchStatus from '../model/BatchStatus';
import BatchesSortBy from '../model/BatchesSortBy';
import CreateBatchRequestBody from '../model/CreateBatchRequestBody';
import CreateBatchResponseBody from '../model/CreateBatchResponseBody';
import ErrorResponseBody from '../model/ErrorResponseBody';
import GetBatchByExternalIdResponseBody from '../model/GetBatchByExternalIdResponseBody';
import GetBatchByIdResponseBody from '../model/GetBatchByIdResponseBody';
import ListBatchErrorsResponseBody from '../model/ListBatchErrorsResponseBody';
import ListBatchesResponseBody from '../model/ListBatchesResponseBody';
import ProcessBatchRequestBody from '../model/ProcessBatchRequestBody';
import RemoveFromBatchRequestBody from '../model/RemoveFromBatchRequestBody';
import SortDir from '../model/SortDir';

/**
* Batches service.
* @module api/BatchesApi
* @version 1.1.202304191404
*/
export default class BatchesApi {

    /**
    * Constructs a new BatchesApi. 
    * @alias module:api/BatchesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addToBatch operation.
     * @callback module:api/BatchesApi~addToBatchCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add to a Batch
     * Add a Shipment or Rate to a Batch
     * @param {String} batchId Batch ID
     * @param {module:model/AddToBatchRequestBody} addToBatchRequestBody 
     * @param {module:api/BatchesApi~addToBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    addToBatch(batchId, addToBatchRequestBody, callback) {
      let postBody = addToBatchRequestBody;
      // verify the required parameter 'batchId' is set
      if (batchId === undefined || batchId === null) {
        throw new Error("Missing the required parameter 'batchId' when calling addToBatch");
      }
      // verify the required parameter 'addToBatchRequestBody' is set
      if (addToBatchRequestBody === undefined || addToBatchRequestBody === null) {
        throw new Error("Missing the required parameter 'addToBatchRequestBody' when calling addToBatch");
      }

      let pathParams = {
        'batch_id': batchId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/batches/{batch_id}/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBatch operation.
     * @callback module:api/BatchesApi~createBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBatchResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create A Batch
     * Create a Batch
     * @param {module:model/CreateBatchRequestBody} createBatchRequestBody 
     * @param {module:api/BatchesApi~createBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBatchResponseBody}
     */
    createBatch(createBatchRequestBody, callback) {
      let postBody = createBatchRequestBody;
      // verify the required parameter 'createBatchRequestBody' is set
      if (createBatchRequestBody === undefined || createBatchRequestBody === null) {
        throw new Error("Missing the required parameter 'createBatchRequestBody' when calling createBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateBatchResponseBody;
      return this.apiClient.callApi(
        '/v1/batches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBatch operation.
     * @callback module:api/BatchesApi~deleteBatchCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Batch By Id
     * Delete Batch By Id
     * @param {String} batchId Batch ID
     * @param {module:api/BatchesApi~deleteBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    deleteBatch(batchId, callback) {
      let postBody = null;
      // verify the required parameter 'batchId' is set
      if (batchId === undefined || batchId === null) {
        throw new Error("Missing the required parameter 'batchId' when calling deleteBatch");
      }

      let pathParams = {
        'batch_id': batchId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/batches/{batch_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBatchByExternalId operation.
     * @callback module:api/BatchesApi~getBatchByExternalIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBatchByExternalIdResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Batch By External ID
     * Get Batch By External ID
     * @param {String} externalBatchId 
     * @param {module:api/BatchesApi~getBatchByExternalIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBatchByExternalIdResponseBody}
     */
    getBatchByExternalId(externalBatchId, callback) {
      let postBody = null;
      // verify the required parameter 'externalBatchId' is set
      if (externalBatchId === undefined || externalBatchId === null) {
        throw new Error("Missing the required parameter 'externalBatchId' when calling getBatchByExternalId");
      }

      let pathParams = {
        'external_batch_id': externalBatchId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBatchByExternalIdResponseBody;
      return this.apiClient.callApi(
        '/v1/batches/external_batch_id/{external_batch_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBatchById operation.
     * @callback module:api/BatchesApi~getBatchByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBatchByIdResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Batch By ID
     * Get Batch By ID
     * @param {String} batchId Batch ID
     * @param {module:api/BatchesApi~getBatchByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBatchByIdResponseBody}
     */
    getBatchById(batchId, callback) {
      let postBody = null;
      // verify the required parameter 'batchId' is set
      if (batchId === undefined || batchId === null) {
        throw new Error("Missing the required parameter 'batchId' when calling getBatchById");
      }

      let pathParams = {
        'batch_id': batchId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBatchByIdResponseBody;
      return this.apiClient.callApi(
        '/v1/batches/{batch_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBatchErrors operation.
     * @callback module:api/BatchesApi~listBatchErrorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBatchErrorsResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Batch Errors
     * Error handling in batches are handled differently than in a single synchronous request. You must retrieve the status of your batch by [getting a batch](https://www.shipengine.com/docs/reference/get-batch-by-id/) and getting an overview of the statuses or you can list errors directly here below to get detailed information about the errors. 
     * @param {String} batchId Batch ID
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Return a specific page of results. Defaults to the first page. If set to a number that's greater than the number of pages of results, an empty page is returned. 
     * @param {Number} [pagesize] 
     * @param {module:api/BatchesApi~listBatchErrorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBatchErrorsResponseBody}
     */
    listBatchErrors(batchId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'batchId' is set
      if (batchId === undefined || batchId === null) {
        throw new Error("Missing the required parameter 'batchId' when calling listBatchErrors");
      }

      let pathParams = {
        'batch_id': batchId
      };
      let queryParams = {
        'page': opts['page'],
        'pagesize': opts['pagesize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListBatchErrorsResponseBody;
      return this.apiClient.callApi(
        '/v1/batches/{batch_id}/errors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBatches operation.
     * @callback module:api/BatchesApi~listBatchesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBatchesResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Batches
     * List Batches associated with your Shipengine account
     * @param {Object} opts Optional parameters
     * @param {module:model/BatchStatus} [status] 
     * @param {Number} [page = 1)] Return a specific page of results. Defaults to the first page. If set to a number that's greater than the number of pages of results, an empty page is returned. 
     * @param {Number} [pageSize = 25)] The number of results to return per response.
     * @param {module:model/SortDir} [sortDir] Controls the sort order of the query.
     * @param {String} [batchNumber] Batch Number
     * @param {module:model/BatchesSortBy} [sortBy] 
     * @param {module:api/BatchesApi~listBatchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBatchesResponseBody}
     */
    listBatches(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'status': opts['status'],
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'sort_dir': opts['sortDir'],
        'batch_number': opts['batchNumber'],
        'sort_by': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListBatchesResponseBody;
      return this.apiClient.callApi(
        '/v1/batches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the processBatch operation.
     * @callback module:api/BatchesApi~processBatchCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Process Batch ID Labels
     * Process Batch ID Labels
     * @param {String} batchId Batch ID
     * @param {module:model/ProcessBatchRequestBody} processBatchRequestBody 
     * @param {module:api/BatchesApi~processBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    processBatch(batchId, processBatchRequestBody, callback) {
      let postBody = processBatchRequestBody;
      // verify the required parameter 'batchId' is set
      if (batchId === undefined || batchId === null) {
        throw new Error("Missing the required parameter 'batchId' when calling processBatch");
      }
      // verify the required parameter 'processBatchRequestBody' is set
      if (processBatchRequestBody === undefined || processBatchRequestBody === null) {
        throw new Error("Missing the required parameter 'processBatchRequestBody' when calling processBatch");
      }

      let pathParams = {
        'batch_id': batchId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/batches/{batch_id}/process/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeFromBatch operation.
     * @callback module:api/BatchesApi~removeFromBatchCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove From Batch
     * Remove a shipment or rate from a batch
     * @param {String} batchId Batch ID
     * @param {module:model/RemoveFromBatchRequestBody} removeFromBatchRequestBody 
     * @param {module:api/BatchesApi~removeFromBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    removeFromBatch(batchId, removeFromBatchRequestBody, callback) {
      let postBody = removeFromBatchRequestBody;
      // verify the required parameter 'batchId' is set
      if (batchId === undefined || batchId === null) {
        throw new Error("Missing the required parameter 'batchId' when calling removeFromBatch");
      }
      // verify the required parameter 'removeFromBatchRequestBody' is set
      if (removeFromBatchRequestBody === undefined || removeFromBatchRequestBody === null) {
        throw new Error("Missing the required parameter 'removeFromBatchRequestBody' when calling removeFromBatch");
      }

      let pathParams = {
        'batch_id': batchId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/batches/{batch_id}/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBatch operation.
     * @callback module:api/BatchesApi~updateBatchCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Batch By Id
     * Update Batch By Id
     * @param {String} batchId Batch ID
     * @param {module:api/BatchesApi~updateBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    updateBatch(batchId, callback) {
      let postBody = null;
      // verify the required parameter 'batchId' is set
      if (batchId === undefined || batchId === null) {
        throw new Error("Missing the required parameter 'batchId' when calling updateBatch");
      }

      let pathParams = {
        'batch_id': batchId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/batches/{batch_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
