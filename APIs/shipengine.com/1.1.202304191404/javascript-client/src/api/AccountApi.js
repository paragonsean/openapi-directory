/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateAccountSettingsImageRequestBody from '../model/CreateAccountSettingsImageRequestBody';
import ErrorResponseBody from '../model/ErrorResponseBody';
import GetAccountSettingsImagesResponseBody from '../model/GetAccountSettingsImagesResponseBody';
import GetAccountSettingsResponseBody from '../model/GetAccountSettingsResponseBody';
import ListAccountSettingsImagesResponseBody from '../model/ListAccountSettingsImagesResponseBody';
import UpdateAccountSettingsImageRequestBody from '../model/UpdateAccountSettingsImageRequestBody';

/**
* Account service.
* @module api/AccountApi
* @version 1.1.202304191404
*/
export default class AccountApi {

    /**
    * Constructs a new AccountApi. 
    * @alias module:api/AccountApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAccountImage operation.
     * @callback module:api/AccountApi~createAccountImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccountSettingsImagesResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Account Image
     * Create an Account Image
     * @param {module:model/CreateAccountSettingsImageRequestBody} createAccountSettingsImageRequestBody 
     * @param {module:api/AccountApi~createAccountImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccountSettingsImagesResponseBody}
     */
    createAccountImage(createAccountSettingsImageRequestBody, callback) {
      let postBody = createAccountSettingsImageRequestBody;
      // verify the required parameter 'createAccountSettingsImageRequestBody' is set
      if (createAccountSettingsImageRequestBody === undefined || createAccountSettingsImageRequestBody === null) {
        throw new Error("Missing the required parameter 'createAccountSettingsImageRequestBody' when calling createAccountImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetAccountSettingsImagesResponseBody;
      return this.apiClient.callApi(
        '/v1/account/settings/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccountImageById operation.
     * @callback module:api/AccountApi~deleteAccountImageByIdCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Account Image By Id
     * Delete Account Image By Id
     * @param {String} labelImageId Label Image Id
     * @param {module:api/AccountApi~deleteAccountImageByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    deleteAccountImageById(labelImageId, callback) {
      let postBody = null;
      // verify the required parameter 'labelImageId' is set
      if (labelImageId === undefined || labelImageId === null) {
        throw new Error("Missing the required parameter 'labelImageId' when calling deleteAccountImageById");
      }

      let pathParams = {
        'label_image_id': labelImageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/account/settings/images/{label_image_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountSettingsImagesById operation.
     * @callback module:api/AccountApi~getAccountSettingsImagesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccountSettingsImagesResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Account Image By ID
     * Retrieve information for an account image.
     * @param {String} labelImageId Label Image Id
     * @param {module:api/AccountApi~getAccountSettingsImagesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccountSettingsImagesResponseBody}
     */
    getAccountSettingsImagesById(labelImageId, callback) {
      let postBody = null;
      // verify the required parameter 'labelImageId' is set
      if (labelImageId === undefined || labelImageId === null) {
        throw new Error("Missing the required parameter 'labelImageId' when calling getAccountSettingsImagesById");
      }

      let pathParams = {
        'label_image_id': labelImageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAccountSettingsImagesResponseBody;
      return this.apiClient.callApi(
        '/v1/account/settings/images/{label_image_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAccountImages operation.
     * @callback module:api/AccountApi~listAccountImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAccountSettingsImagesResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Account Images
     * List all account images for the ShipEngine account
     * @param {module:api/AccountApi~listAccountImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAccountSettingsImagesResponseBody}
     */
    listAccountImages(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAccountSettingsImagesResponseBody;
      return this.apiClient.callApi(
        '/v1/account/settings/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAccountSettings operation.
     * @callback module:api/AccountApi~listAccountSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccountSettingsResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Account Settings
     * List all account settings for the ShipEngine account
     * @param {module:api/AccountApi~listAccountSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccountSettingsResponseBody}
     */
    listAccountSettings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAccountSettingsResponseBody;
      return this.apiClient.callApi(
        '/v1/account/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccountSettingsImagesById operation.
     * @callback module:api/AccountApi~updateAccountSettingsImagesByIdCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Account Image By ID
     * Update information for an account image.
     * @param {String} labelImageId Label Image Id
     * @param {module:model/UpdateAccountSettingsImageRequestBody} updateAccountSettingsImageRequestBody 
     * @param {module:api/AccountApi~updateAccountSettingsImagesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    updateAccountSettingsImagesById(labelImageId, updateAccountSettingsImageRequestBody, callback) {
      let postBody = updateAccountSettingsImageRequestBody;
      // verify the required parameter 'labelImageId' is set
      if (labelImageId === undefined || labelImageId === null) {
        throw new Error("Missing the required parameter 'labelImageId' when calling updateAccountSettingsImagesById");
      }
      // verify the required parameter 'updateAccountSettingsImageRequestBody' is set
      if (updateAccountSettingsImageRequestBody === undefined || updateAccountSettingsImageRequestBody === null) {
        throw new Error("Missing the required parameter 'updateAccountSettingsImageRequestBody' when calling updateAccountSettingsImagesById");
      }

      let pathParams = {
        'label_image_id': labelImageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/account/settings/images/{label_image_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
