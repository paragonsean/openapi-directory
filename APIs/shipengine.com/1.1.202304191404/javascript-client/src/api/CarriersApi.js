/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddFundsToCarrierRequestBody from '../model/AddFundsToCarrierRequestBody';
import AddFundsToCarrierResponseBody from '../model/AddFundsToCarrierResponseBody';
import ErrorResponseBody from '../model/ErrorResponseBody';
import GetCarrierByIdResponseBody from '../model/GetCarrierByIdResponseBody';
import GetCarrierOptionsResponseBody from '../model/GetCarrierOptionsResponseBody';
import GetCarriersResponseBody from '../model/GetCarriersResponseBody';
import ListCarrierPackageTypesResponseBody from '../model/ListCarrierPackageTypesResponseBody';
import ListCarrierServicesResponseBody from '../model/ListCarrierServicesResponseBody';

/**
* Carriers service.
* @module api/CarriersApi
* @version 1.1.202304191404
*/
export default class CarriersApi {

    /**
    * Constructs a new CarriersApi. 
    * @alias module:api/CarriersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addFundsToCarrier operation.
     * @callback module:api/CarriersApi~addFundsToCarrierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddFundsToCarrierResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Funds To Carrier
     * Add Funds To A Carrier
     * @param {String} carrierId Carrier ID
     * @param {module:model/AddFundsToCarrierRequestBody} addFundsToCarrierRequestBody 
     * @param {module:api/CarriersApi~addFundsToCarrierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddFundsToCarrierResponseBody}
     */
    addFundsToCarrier(carrierId, addFundsToCarrierRequestBody, callback) {
      let postBody = addFundsToCarrierRequestBody;
      // verify the required parameter 'carrierId' is set
      if (carrierId === undefined || carrierId === null) {
        throw new Error("Missing the required parameter 'carrierId' when calling addFundsToCarrier");
      }
      // verify the required parameter 'addFundsToCarrierRequestBody' is set
      if (addFundsToCarrierRequestBody === undefined || addFundsToCarrierRequestBody === null) {
        throw new Error("Missing the required parameter 'addFundsToCarrierRequestBody' when calling addFundsToCarrier");
      }

      let pathParams = {
        'carrier_id': carrierId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddFundsToCarrierResponseBody;
      return this.apiClient.callApi(
        '/v1/carriers/{carrier_id}/add_funds', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCarrierById operation.
     * @callback module:api/CarriersApi~getCarrierByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCarrierByIdResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Carrier By ID
     * Retrive carrier info by ID
     * @param {String} carrierId Carrier ID
     * @param {module:api/CarriersApi~getCarrierByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCarrierByIdResponseBody}
     */
    getCarrierById(carrierId, callback) {
      let postBody = null;
      // verify the required parameter 'carrierId' is set
      if (carrierId === undefined || carrierId === null) {
        throw new Error("Missing the required parameter 'carrierId' when calling getCarrierById");
      }

      let pathParams = {
        'carrier_id': carrierId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCarrierByIdResponseBody;
      return this.apiClient.callApi(
        '/v1/carriers/{carrier_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCarrierOptions operation.
     * @callback module:api/CarriersApi~getCarrierOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCarrierOptionsResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Carrier Options
     * Get a list of the options available for the carrier
     * @param {String} carrierId Carrier ID
     * @param {module:api/CarriersApi~getCarrierOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCarrierOptionsResponseBody}
     */
    getCarrierOptions(carrierId, callback) {
      let postBody = null;
      // verify the required parameter 'carrierId' is set
      if (carrierId === undefined || carrierId === null) {
        throw new Error("Missing the required parameter 'carrierId' when calling getCarrierOptions");
      }

      let pathParams = {
        'carrier_id': carrierId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCarrierOptionsResponseBody;
      return this.apiClient.callApi(
        '/v1/carriers/{carrier_id}/options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCarrierPackageTypes operation.
     * @callback module:api/CarriersApi~listCarrierPackageTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCarrierPackageTypesResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Carrier Package Types
     * List the package types associated with the carrier
     * @param {String} carrierId Carrier ID
     * @param {module:api/CarriersApi~listCarrierPackageTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCarrierPackageTypesResponseBody}
     */
    listCarrierPackageTypes(carrierId, callback) {
      let postBody = null;
      // verify the required parameter 'carrierId' is set
      if (carrierId === undefined || carrierId === null) {
        throw new Error("Missing the required parameter 'carrierId' when calling listCarrierPackageTypes");
      }

      let pathParams = {
        'carrier_id': carrierId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCarrierPackageTypesResponseBody;
      return this.apiClient.callApi(
        '/v1/carriers/{carrier_id}/packages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCarrierServices operation.
     * @callback module:api/CarriersApi~listCarrierServicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCarrierServicesResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Carrier Services
     * List the services associated with the carrier ID
     * @param {String} carrierId Carrier ID
     * @param {module:api/CarriersApi~listCarrierServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCarrierServicesResponseBody}
     */
    listCarrierServices(carrierId, callback) {
      let postBody = null;
      // verify the required parameter 'carrierId' is set
      if (carrierId === undefined || carrierId === null) {
        throw new Error("Missing the required parameter 'carrierId' when calling listCarrierServices");
      }

      let pathParams = {
        'carrier_id': carrierId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCarrierServicesResponseBody;
      return this.apiClient.callApi(
        '/v1/carriers/{carrier_id}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCarriers operation.
     * @callback module:api/CarriersApi~listCarriersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCarriersResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Carriers
     * List all carriers that have been added to this account
     * @param {module:api/CarriersApi~listCarriersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCarriersResponseBody}
     */
    listCarriers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCarriersResponseBody;
      return this.apiClient.callApi(
        '/v1/carriers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
