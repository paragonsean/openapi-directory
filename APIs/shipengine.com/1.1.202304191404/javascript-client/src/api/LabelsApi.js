/**
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202304191404
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateLabelFromRateRequestBody from '../model/CreateLabelFromRateRequestBody';
import CreateLabelFromRateResponseBody from '../model/CreateLabelFromRateResponseBody';
import CreateLabelFromShipmentRequestBody from '../model/CreateLabelFromShipmentRequestBody';
import CreateLabelFromShipmentResponseBody from '../model/CreateLabelFromShipmentResponseBody';
import CreateLabelRequestBody from '../model/CreateLabelRequestBody';
import CreateLabelResponseBody from '../model/CreateLabelResponseBody';
import CreateReturnLabelRequestBody from '../model/CreateReturnLabelRequestBody';
import CreateReturnLabelResponseBody from '../model/CreateReturnLabelResponseBody';
import ErrorResponseBody from '../model/ErrorResponseBody';
import GetLabelByExternalShipmentIdResponseBody from '../model/GetLabelByExternalShipmentIdResponseBody';
import GetLabelByIdResponseBody from '../model/GetLabelByIdResponseBody';
import GetTrackingLogFromLabelResponseBody from '../model/GetTrackingLogFromLabelResponseBody';
import LabelDownloadType from '../model/LabelDownloadType';
import LabelStatus from '../model/LabelStatus';
import ListLabelsResponseBody from '../model/ListLabelsResponseBody';
import SortDir from '../model/SortDir';
import VoidLabelResponseBody from '../model/VoidLabelResponseBody';

/**
* Labels service.
* @module api/LabelsApi
* @version 1.1.202304191404
*/
export default class LabelsApi {

    /**
    * Constructs a new LabelsApi. 
    * @alias module:api/LabelsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createLabel operation.
     * @callback module:api/LabelsApi~createLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLabelResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Purchase Label
     * Purchase and print a label for shipment
     * @param {module:model/CreateLabelRequestBody} createLabelRequestBody 
     * @param {module:api/LabelsApi~createLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLabelResponseBody}
     */
    createLabel(createLabelRequestBody, callback) {
      let postBody = createLabelRequestBody;
      // verify the required parameter 'createLabelRequestBody' is set
      if (createLabelRequestBody === undefined || createLabelRequestBody === null) {
        throw new Error("Missing the required parameter 'createLabelRequestBody' when calling createLabel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLabelResponseBody;
      return this.apiClient.callApi(
        '/v1/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLabelFromRate operation.
     * @callback module:api/LabelsApi~createLabelFromRateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLabelFromRateResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Purchase Label with Rate ID
     * When retrieving rates for shipments using the `/rates` endpoint, the returned information contains a `rate_id` property that can be used to generate a label without having to refill in the shipment information repeatedly. 
     * @param {String} rateId Rate ID
     * @param {module:model/CreateLabelFromRateRequestBody} createLabelFromRateRequestBody 
     * @param {module:api/LabelsApi~createLabelFromRateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLabelFromRateResponseBody}
     */
    createLabelFromRate(rateId, createLabelFromRateRequestBody, callback) {
      let postBody = createLabelFromRateRequestBody;
      // verify the required parameter 'rateId' is set
      if (rateId === undefined || rateId === null) {
        throw new Error("Missing the required parameter 'rateId' when calling createLabelFromRate");
      }
      // verify the required parameter 'createLabelFromRateRequestBody' is set
      if (createLabelFromRateRequestBody === undefined || createLabelFromRateRequestBody === null) {
        throw new Error("Missing the required parameter 'createLabelFromRateRequestBody' when calling createLabelFromRate");
      }

      let pathParams = {
        'rate_id': rateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLabelFromRateResponseBody;
      return this.apiClient.callApi(
        '/v1/labels/rates/{rate_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLabelFromShipment operation.
     * @callback module:api/LabelsApi~createLabelFromShipmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLabelFromShipmentResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Purchase Label with Shipment ID
     * Purchase a label using a shipment ID that has already been created with the desired address and package info. 
     * @param {String} shipmentId Shipment ID
     * @param {module:model/CreateLabelFromShipmentRequestBody} createLabelFromShipmentRequestBody 
     * @param {module:api/LabelsApi~createLabelFromShipmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLabelFromShipmentResponseBody}
     */
    createLabelFromShipment(shipmentId, createLabelFromShipmentRequestBody, callback) {
      let postBody = createLabelFromShipmentRequestBody;
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling createLabelFromShipment");
      }
      // verify the required parameter 'createLabelFromShipmentRequestBody' is set
      if (createLabelFromShipmentRequestBody === undefined || createLabelFromShipmentRequestBody === null) {
        throw new Error("Missing the required parameter 'createLabelFromShipmentRequestBody' when calling createLabelFromShipment");
      }

      let pathParams = {
        'shipment_id': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLabelFromShipmentResponseBody;
      return this.apiClient.callApi(
        '/v1/labels/shipment/{shipment_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createReturnLabel operation.
     * @callback module:api/LabelsApi~createReturnLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateReturnLabelResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a return label
     * Create a return label
     * @param {String} labelId Label ID
     * @param {module:model/CreateReturnLabelRequestBody} createReturnLabelRequestBody 
     * @param {module:api/LabelsApi~createReturnLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateReturnLabelResponseBody}
     */
    createReturnLabel(labelId, createReturnLabelRequestBody, callback) {
      let postBody = createReturnLabelRequestBody;
      // verify the required parameter 'labelId' is set
      if (labelId === undefined || labelId === null) {
        throw new Error("Missing the required parameter 'labelId' when calling createReturnLabel");
      }
      // verify the required parameter 'createReturnLabelRequestBody' is set
      if (createReturnLabelRequestBody === undefined || createReturnLabelRequestBody === null) {
        throw new Error("Missing the required parameter 'createReturnLabelRequestBody' when calling createReturnLabel");
      }

      let pathParams = {
        'label_id': labelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateReturnLabelResponseBody;
      return this.apiClient.callApi(
        '/v1/labels/{label_id}/return', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLabelByExternalShipmentId operation.
     * @callback module:api/LabelsApi~getLabelByExternalShipmentIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLabelByExternalShipmentIdResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Label By External Shipment ID
     * Find a label by using the external shipment id that was used during label creation 
     * @param {String} externalShipmentId 
     * @param {Object} opts Optional parameters
     * @param {module:model/LabelDownloadType} [labelDownloadType] 
     * @param {module:api/LabelsApi~getLabelByExternalShipmentIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLabelByExternalShipmentIdResponseBody}
     */
    getLabelByExternalShipmentId(externalShipmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'externalShipmentId' is set
      if (externalShipmentId === undefined || externalShipmentId === null) {
        throw new Error("Missing the required parameter 'externalShipmentId' when calling getLabelByExternalShipmentId");
      }

      let pathParams = {
        'external_shipment_id': externalShipmentId
      };
      let queryParams = {
        'label_download_type': opts['labelDownloadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLabelByExternalShipmentIdResponseBody;
      return this.apiClient.callApi(
        '/v1/labels/external_shipment_id/{external_shipment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLabelById operation.
     * @callback module:api/LabelsApi~getLabelByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLabelByIdResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Label By ID
     * Retrieve information for individual labels.
     * @param {String} labelId Label ID
     * @param {Object} opts Optional parameters
     * @param {module:model/LabelDownloadType} [labelDownloadType] 
     * @param {module:api/LabelsApi~getLabelByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLabelByIdResponseBody}
     */
    getLabelById(labelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'labelId' is set
      if (labelId === undefined || labelId === null) {
        throw new Error("Missing the required parameter 'labelId' when calling getLabelById");
      }

      let pathParams = {
        'label_id': labelId
      };
      let queryParams = {
        'label_download_type': opts['labelDownloadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLabelByIdResponseBody;
      return this.apiClient.callApi(
        '/v1/labels/{label_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrackingLogFromLabel operation.
     * @callback module:api/LabelsApi~getTrackingLogFromLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTrackingLogFromLabelResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Label Tracking Information
     * Retrieve the label's tracking information
     * @param {String} labelId Label ID
     * @param {module:api/LabelsApi~getTrackingLogFromLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTrackingLogFromLabelResponseBody}
     */
    getTrackingLogFromLabel(labelId, callback) {
      let postBody = null;
      // verify the required parameter 'labelId' is set
      if (labelId === undefined || labelId === null) {
        throw new Error("Missing the required parameter 'labelId' when calling getTrackingLogFromLabel");
      }

      let pathParams = {
        'label_id': labelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTrackingLogFromLabelResponseBody;
      return this.apiClient.callApi(
        '/v1/labels/{label_id}/track', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLabels operation.
     * @callback module:api/LabelsApi~listLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLabelsResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List labels
     * This endpoint returns a list of labels that you've [created](https://www.shipengine.com/docs/labels/create-a-label/). You can optionally filter the results as well as control their sort order and the number of results returned at a time.  By default, all labels are returned, 25 at a time, starting with the most recently created ones.  You can combine multiple filter options to narrow-down the results.  For example, if you only want to get your UPS labels for your east coast warehouse you could query by both `warehouse_id` and `carrier_id` 
     * @param {Object} opts Optional parameters
     * @param {module:model/LabelStatus} [labelStatus] Only return labels that are currently in the specified status
     * @param {String} [serviceCode] Only return labels for a specific [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/)
     * @param {String} [carrierId] Only return labels for a specific [carrier account](https://www.shipengine.com/docs/carriers/setup/)
     * @param {String} [trackingNumber] Only return labels with a specific tracking number
     * @param {String} [batchId] Only return labels that were created in a specific [batch](https://www.shipengine.com/docs/labels/bulk/)
     * @param {String} [rateId] Rate ID
     * @param {String} [shipmentId] Shipment ID
     * @param {String} [warehouseId] Only return labels that originate from a specific [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/)
     * @param {Date} [createdAtStart] Only return labels that were created on or after a specific date/time
     * @param {Date} [createdAtEnd] Only return labels that were created on or before a specific date/time
     * @param {Number} [page = 1)] Return a specific page of results. Defaults to the first page. If set to a number that's greater than the number of pages of results, an empty page is returned. 
     * @param {Number} [pageSize = 25)] The number of results to return per response.
     * @param {module:model/SortDir} [sortDir] Controls the sort order of the query.
     * @param {module:model/String} [sortBy = 'created_at')] Controls which field the query is sorted by.
     * @param {module:api/LabelsApi~listLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLabelsResponseBody}
     */
    listLabels(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'label_status': opts['labelStatus'],
        'service_code': opts['serviceCode'],
        'carrier_id': opts['carrierId'],
        'tracking_number': opts['trackingNumber'],
        'batch_id': opts['batchId'],
        'rate_id': opts['rateId'],
        'shipment_id': opts['shipmentId'],
        'warehouse_id': opts['warehouseId'],
        'created_at_start': opts['createdAtStart'],
        'created_at_end': opts['createdAtEnd'],
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'sort_dir': opts['sortDir'],
        'sort_by': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLabelsResponseBody;
      return this.apiClient.callApi(
        '/v1/labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the voidLabel operation.
     * @callback module:api/LabelsApi~voidLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VoidLabelResponseBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Void a Label By ID
     * Void a label by ID to get a refund.
     * @param {String} labelId Label ID
     * @param {module:api/LabelsApi~voidLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VoidLabelResponseBody}
     */
    voidLabel(labelId, callback) {
      let postBody = null;
      // verify the required parameter 'labelId' is set
      if (labelId === undefined || labelId === null) {
        throw new Error("Missing the required parameter 'labelId' when calling voidLabel");
      }

      let pathParams = {
        'label_id': labelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VoidLabelResponseBody;
      return this.apiClient.callApi(
        '/v1/labels/{label_id}/void', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
