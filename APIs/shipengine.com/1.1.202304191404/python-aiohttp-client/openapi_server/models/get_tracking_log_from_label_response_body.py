# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status_code import StatusCode
from openapi_server.models.track_event import TrackEvent
import re
from openapi_server import util


class GetTrackingLogFromLabelResponseBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actual_delivery_date: datetime=None, carrier_code: str=None, carrier_detail_code: str=None, carrier_id: str=None, carrier_status_code: str=None, carrier_status_description: str=None, estimated_delivery_date: datetime=None, events: List[TrackEvent]=None, exception_description: str=None, ship_date: datetime=None, status_code: StatusCode=None, status_description: str=None, tracking_number: str=None, tracking_url: str=None):
        """GetTrackingLogFromLabelResponseBody - a model defined in OpenAPI

        :param actual_delivery_date: The actual_delivery_date of this GetTrackingLogFromLabelResponseBody.
        :param carrier_code: The carrier_code of this GetTrackingLogFromLabelResponseBody.
        :param carrier_detail_code: The carrier_detail_code of this GetTrackingLogFromLabelResponseBody.
        :param carrier_id: The carrier_id of this GetTrackingLogFromLabelResponseBody.
        :param carrier_status_code: The carrier_status_code of this GetTrackingLogFromLabelResponseBody.
        :param carrier_status_description: The carrier_status_description of this GetTrackingLogFromLabelResponseBody.
        :param estimated_delivery_date: The estimated_delivery_date of this GetTrackingLogFromLabelResponseBody.
        :param events: The events of this GetTrackingLogFromLabelResponseBody.
        :param exception_description: The exception_description of this GetTrackingLogFromLabelResponseBody.
        :param ship_date: The ship_date of this GetTrackingLogFromLabelResponseBody.
        :param status_code: The status_code of this GetTrackingLogFromLabelResponseBody.
        :param status_description: The status_description of this GetTrackingLogFromLabelResponseBody.
        :param tracking_number: The tracking_number of this GetTrackingLogFromLabelResponseBody.
        :param tracking_url: The tracking_url of this GetTrackingLogFromLabelResponseBody.
        """
        self.openapi_types = {
            'actual_delivery_date': datetime,
            'carrier_code': str,
            'carrier_detail_code': str,
            'carrier_id': str,
            'carrier_status_code': str,
            'carrier_status_description': str,
            'estimated_delivery_date': datetime,
            'events': List[TrackEvent],
            'exception_description': str,
            'ship_date': datetime,
            'status_code': StatusCode,
            'status_description': str,
            'tracking_number': str,
            'tracking_url': str
        }

        self.attribute_map = {
            'actual_delivery_date': 'actual_delivery_date',
            'carrier_code': 'carrier_code',
            'carrier_detail_code': 'carrier_detail_code',
            'carrier_id': 'carrier_id',
            'carrier_status_code': 'carrier_status_code',
            'carrier_status_description': 'carrier_status_description',
            'estimated_delivery_date': 'estimated_delivery_date',
            'events': 'events',
            'exception_description': 'exception_description',
            'ship_date': 'ship_date',
            'status_code': 'status_code',
            'status_description': 'status_description',
            'tracking_number': 'tracking_number',
            'tracking_url': 'tracking_url'
        }

        self._actual_delivery_date = actual_delivery_date
        self._carrier_code = carrier_code
        self._carrier_detail_code = carrier_detail_code
        self._carrier_id = carrier_id
        self._carrier_status_code = carrier_status_code
        self._carrier_status_description = carrier_status_description
        self._estimated_delivery_date = estimated_delivery_date
        self._events = events
        self._exception_description = exception_description
        self._ship_date = ship_date
        self._status_code = status_code
        self._status_description = status_description
        self._tracking_number = tracking_number
        self._tracking_url = tracking_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetTrackingLogFromLabelResponseBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_tracking_log_from_label_response_body of this GetTrackingLogFromLabelResponseBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actual_delivery_date(self):
        """Gets the actual_delivery_date of this GetTrackingLogFromLabelResponseBody.

        An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time. 

        :return: The actual_delivery_date of this GetTrackingLogFromLabelResponseBody.
        :rtype: datetime
        """
        return self._actual_delivery_date

    @actual_delivery_date.setter
    def actual_delivery_date(self, actual_delivery_date):
        """Sets the actual_delivery_date of this GetTrackingLogFromLabelResponseBody.

        An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time. 

        :param actual_delivery_date: The actual_delivery_date of this GetTrackingLogFromLabelResponseBody.
        :type actual_delivery_date: datetime
        """
        if actual_delivery_date is not None and not re.search(r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$', actual_delivery_date):
            raise ValueError("Invalid value for `actual_delivery_date`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$/`")

        self._actual_delivery_date = actual_delivery_date

    @property
    def carrier_code(self):
        """Gets the carrier_code of this GetTrackingLogFromLabelResponseBody.

        A [shipping carrier](https://www.shipengine.com/docs/carriers/setup/), such as `fedex`, `dhl_express`, `stamps_com`, etc. 

        :return: The carrier_code of this GetTrackingLogFromLabelResponseBody.
        :rtype: str
        """
        return self._carrier_code

    @carrier_code.setter
    def carrier_code(self, carrier_code):
        """Sets the carrier_code of this GetTrackingLogFromLabelResponseBody.

        A [shipping carrier](https://www.shipengine.com/docs/carriers/setup/), such as `fedex`, `dhl_express`, `stamps_com`, etc. 

        :param carrier_code: The carrier_code of this GetTrackingLogFromLabelResponseBody.
        :type carrier_code: str
        """
        if carrier_code is not None and not re.search(r'^[a-z0-9]+(_[a-z0-9]+)*$', carrier_code):
            raise ValueError("Invalid value for `carrier_code`, must be a follow pattern or equal to `/^[a-z0-9]+(_[a-z0-9]+)*$/`")

        self._carrier_code = carrier_code

    @property
    def carrier_detail_code(self):
        """Gets the carrier_detail_code of this GetTrackingLogFromLabelResponseBody.

        Carrier detail code

        :return: The carrier_detail_code of this GetTrackingLogFromLabelResponseBody.
        :rtype: str
        """
        return self._carrier_detail_code

    @carrier_detail_code.setter
    def carrier_detail_code(self, carrier_detail_code):
        """Sets the carrier_detail_code of this GetTrackingLogFromLabelResponseBody.

        Carrier detail code

        :param carrier_detail_code: The carrier_detail_code of this GetTrackingLogFromLabelResponseBody.
        :type carrier_detail_code: str
        """
        if carrier_detail_code is not None and len(carrier_detail_code) < 1:
            raise ValueError("Invalid value for `carrier_detail_code`, length must be greater than or equal to `1`")

        self._carrier_detail_code = carrier_detail_code

    @property
    def carrier_id(self):
        """Gets the carrier_id of this GetTrackingLogFromLabelResponseBody.

        A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc.

        :return: The carrier_id of this GetTrackingLogFromLabelResponseBody.
        :rtype: str
        """
        return self._carrier_id

    @carrier_id.setter
    def carrier_id(self, carrier_id):
        """Sets the carrier_id of this GetTrackingLogFromLabelResponseBody.

        A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc.

        :param carrier_id: The carrier_id of this GetTrackingLogFromLabelResponseBody.
        :type carrier_id: str
        """
        if carrier_id is not None and len(carrier_id) > 25:
            raise ValueError("Invalid value for `carrier_id`, length must be less than or equal to `25`")
        if carrier_id is not None and len(carrier_id) < 1:
            raise ValueError("Invalid value for `carrier_id`, length must be greater than or equal to `1`")
        if carrier_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', carrier_id):
            raise ValueError("Invalid value for `carrier_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._carrier_id = carrier_id

    @property
    def carrier_status_code(self):
        """Gets the carrier_status_code of this GetTrackingLogFromLabelResponseBody.

        Carrier status code

        :return: The carrier_status_code of this GetTrackingLogFromLabelResponseBody.
        :rtype: str
        """
        return self._carrier_status_code

    @carrier_status_code.setter
    def carrier_status_code(self, carrier_status_code):
        """Sets the carrier_status_code of this GetTrackingLogFromLabelResponseBody.

        Carrier status code

        :param carrier_status_code: The carrier_status_code of this GetTrackingLogFromLabelResponseBody.
        :type carrier_status_code: str
        """
        if carrier_status_code is None:
            raise ValueError("Invalid value for `carrier_status_code`, must not be `None`")
        if carrier_status_code is not None and len(carrier_status_code) < 1:
            raise ValueError("Invalid value for `carrier_status_code`, length must be greater than or equal to `1`")

        self._carrier_status_code = carrier_status_code

    @property
    def carrier_status_description(self):
        """Gets the carrier_status_description of this GetTrackingLogFromLabelResponseBody.

        carrier status description

        :return: The carrier_status_description of this GetTrackingLogFromLabelResponseBody.
        :rtype: str
        """
        return self._carrier_status_description

    @carrier_status_description.setter
    def carrier_status_description(self, carrier_status_description):
        """Sets the carrier_status_description of this GetTrackingLogFromLabelResponseBody.

        carrier status description

        :param carrier_status_description: The carrier_status_description of this GetTrackingLogFromLabelResponseBody.
        :type carrier_status_description: str
        """
        if carrier_status_description is not None and len(carrier_status_description) < 0:
            raise ValueError("Invalid value for `carrier_status_description`, length must be greater than or equal to `0`")

        self._carrier_status_description = carrier_status_description

    @property
    def estimated_delivery_date(self):
        """Gets the estimated_delivery_date of this GetTrackingLogFromLabelResponseBody.

        An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time. 

        :return: The estimated_delivery_date of this GetTrackingLogFromLabelResponseBody.
        :rtype: datetime
        """
        return self._estimated_delivery_date

    @estimated_delivery_date.setter
    def estimated_delivery_date(self, estimated_delivery_date):
        """Sets the estimated_delivery_date of this GetTrackingLogFromLabelResponseBody.

        An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time. 

        :param estimated_delivery_date: The estimated_delivery_date of this GetTrackingLogFromLabelResponseBody.
        :type estimated_delivery_date: datetime
        """
        if estimated_delivery_date is None:
            raise ValueError("Invalid value for `estimated_delivery_date`, must not be `None`")
        if estimated_delivery_date is not None and not re.search(r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$', estimated_delivery_date):
            raise ValueError("Invalid value for `estimated_delivery_date`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$/`")

        self._estimated_delivery_date = estimated_delivery_date

    @property
    def events(self):
        """Gets the events of this GetTrackingLogFromLabelResponseBody.

        The events that have occured during the lifetime of this tracking number.

        :return: The events of this GetTrackingLogFromLabelResponseBody.
        :rtype: List[TrackEvent]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this GetTrackingLogFromLabelResponseBody.

        The events that have occured during the lifetime of this tracking number.

        :param events: The events of this GetTrackingLogFromLabelResponseBody.
        :type events: List[TrackEvent]
        """
        if events is None:
            raise ValueError("Invalid value for `events`, must not be `None`")

        self._events = events

    @property
    def exception_description(self):
        """Gets the exception_description of this GetTrackingLogFromLabelResponseBody.

        Exception description

        :return: The exception_description of this GetTrackingLogFromLabelResponseBody.
        :rtype: str
        """
        return self._exception_description

    @exception_description.setter
    def exception_description(self, exception_description):
        """Sets the exception_description of this GetTrackingLogFromLabelResponseBody.

        Exception description

        :param exception_description: The exception_description of this GetTrackingLogFromLabelResponseBody.
        :type exception_description: str
        """
        if exception_description is not None and len(exception_description) < 0:
            raise ValueError("Invalid value for `exception_description`, length must be greater than or equal to `0`")

        self._exception_description = exception_description

    @property
    def ship_date(self):
        """Gets the ship_date of this GetTrackingLogFromLabelResponseBody.

        An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time. 

        :return: The ship_date of this GetTrackingLogFromLabelResponseBody.
        :rtype: datetime
        """
        return self._ship_date

    @ship_date.setter
    def ship_date(self, ship_date):
        """Sets the ship_date of this GetTrackingLogFromLabelResponseBody.

        An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time. 

        :param ship_date: The ship_date of this GetTrackingLogFromLabelResponseBody.
        :type ship_date: datetime
        """
        if ship_date is not None and not re.search(r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$', ship_date):
            raise ValueError("Invalid value for `ship_date`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$/`")

        self._ship_date = ship_date

    @property
    def status_code(self):
        """Gets the status_code of this GetTrackingLogFromLabelResponseBody.


        :return: The status_code of this GetTrackingLogFromLabelResponseBody.
        :rtype: StatusCode
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this GetTrackingLogFromLabelResponseBody.


        :param status_code: The status_code of this GetTrackingLogFromLabelResponseBody.
        :type status_code: StatusCode
        """
        if status_code is None:
            raise ValueError("Invalid value for `status_code`, must not be `None`")

        self._status_code = status_code

    @property
    def status_description(self):
        """Gets the status_description of this GetTrackingLogFromLabelResponseBody.

        Status description

        :return: The status_description of this GetTrackingLogFromLabelResponseBody.
        :rtype: str
        """
        return self._status_description

    @status_description.setter
    def status_description(self, status_description):
        """Sets the status_description of this GetTrackingLogFromLabelResponseBody.

        Status description

        :param status_description: The status_description of this GetTrackingLogFromLabelResponseBody.
        :type status_description: str
        """
        if status_description is not None and len(status_description) < 0:
            raise ValueError("Invalid value for `status_description`, length must be greater than or equal to `0`")

        self._status_description = status_description

    @property
    def tracking_number(self):
        """Gets the tracking_number of this GetTrackingLogFromLabelResponseBody.

        A tracking number for a package. The format depends on the carrier.

        :return: The tracking_number of this GetTrackingLogFromLabelResponseBody.
        :rtype: str
        """
        return self._tracking_number

    @tracking_number.setter
    def tracking_number(self, tracking_number):
        """Sets the tracking_number of this GetTrackingLogFromLabelResponseBody.

        A tracking number for a package. The format depends on the carrier.

        :param tracking_number: The tracking_number of this GetTrackingLogFromLabelResponseBody.
        :type tracking_number: str
        """
        if tracking_number is None:
            raise ValueError("Invalid value for `tracking_number`, must not be `None`")
        if tracking_number is not None and len(tracking_number) < 1:
            raise ValueError("Invalid value for `tracking_number`, length must be greater than or equal to `1`")

        self._tracking_number = tracking_number

    @property
    def tracking_url(self):
        """Gets the tracking_url of this GetTrackingLogFromLabelResponseBody.

        Carrier Tracking Url, if available

        :return: The tracking_url of this GetTrackingLogFromLabelResponseBody.
        :rtype: str
        """
        return self._tracking_url

    @tracking_url.setter
    def tracking_url(self, tracking_url):
        """Sets the tracking_url of this GetTrackingLogFromLabelResponseBody.

        Carrier Tracking Url, if available

        :param tracking_url: The tracking_url of this GetTrackingLogFromLabelResponseBody.
        :type tracking_url: str
        """

        self._tracking_url = tracking_url
