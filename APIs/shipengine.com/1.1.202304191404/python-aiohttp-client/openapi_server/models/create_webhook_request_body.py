# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.webhook_event import WebhookEvent
from openapi_server import util


class CreateWebhookRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event: WebhookEvent=None, url: str=None):
        """CreateWebhookRequestBody - a model defined in OpenAPI

        :param event: The event of this CreateWebhookRequestBody.
        :param url: The url of this CreateWebhookRequestBody.
        """
        self.openapi_types = {
            'event': WebhookEvent,
            'url': str
        }

        self.attribute_map = {
            'event': 'event',
            'url': 'url'
        }

        self._event = event
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateWebhookRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_webhook_request_body of this CreateWebhookRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event(self):
        """Gets the event of this CreateWebhookRequestBody.


        :return: The event of this CreateWebhookRequestBody.
        :rtype: WebhookEvent
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this CreateWebhookRequestBody.


        :param event: The event of this CreateWebhookRequestBody.
        :type event: WebhookEvent
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")

        self._event = event

    @property
    def url(self):
        """Gets the url of this CreateWebhookRequestBody.

        The url that the webhook sends the request to

        :return: The url of this CreateWebhookRequestBody.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CreateWebhookRequestBody.

        The url that the webhook sends the request to

        :param url: The url of this CreateWebhookRequestBody.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")
        if url is not None and len(url) < 1:
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `1`")

        self._url = url
