# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.carrier_advanced_option import CarrierAdvancedOption
from openapi_server.models.package_type import PackageType
from openapi_server.models.service import Service
import re
from openapi_server import util


class GetCarrierByIdResponseBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, balance: float=None, carrier_code: str=None, carrier_id: str=None, friendly_name: str=None, has_multi_package_supporting_services: bool=None, nickname: str=None, options: List[CarrierAdvancedOption]=None, packages: List[PackageType]=None, primary: bool=None, requires_funded_amount: bool=None, services: List[Service]=None, supports_label_messages: bool=None):
        """GetCarrierByIdResponseBody - a model defined in OpenAPI

        :param account_number: The account_number of this GetCarrierByIdResponseBody.
        :param balance: The balance of this GetCarrierByIdResponseBody.
        :param carrier_code: The carrier_code of this GetCarrierByIdResponseBody.
        :param carrier_id: The carrier_id of this GetCarrierByIdResponseBody.
        :param friendly_name: The friendly_name of this GetCarrierByIdResponseBody.
        :param has_multi_package_supporting_services: The has_multi_package_supporting_services of this GetCarrierByIdResponseBody.
        :param nickname: The nickname of this GetCarrierByIdResponseBody.
        :param options: The options of this GetCarrierByIdResponseBody.
        :param packages: The packages of this GetCarrierByIdResponseBody.
        :param primary: The primary of this GetCarrierByIdResponseBody.
        :param requires_funded_amount: The requires_funded_amount of this GetCarrierByIdResponseBody.
        :param services: The services of this GetCarrierByIdResponseBody.
        :param supports_label_messages: The supports_label_messages of this GetCarrierByIdResponseBody.
        """
        self.openapi_types = {
            'account_number': str,
            'balance': float,
            'carrier_code': str,
            'carrier_id': str,
            'friendly_name': str,
            'has_multi_package_supporting_services': bool,
            'nickname': str,
            'options': List[CarrierAdvancedOption],
            'packages': List[PackageType],
            'primary': bool,
            'requires_funded_amount': bool,
            'services': List[Service],
            'supports_label_messages': bool
        }

        self.attribute_map = {
            'account_number': 'account_number',
            'balance': 'balance',
            'carrier_code': 'carrier_code',
            'carrier_id': 'carrier_id',
            'friendly_name': 'friendly_name',
            'has_multi_package_supporting_services': 'has_multi_package_supporting_services',
            'nickname': 'nickname',
            'options': 'options',
            'packages': 'packages',
            'primary': 'primary',
            'requires_funded_amount': 'requires_funded_amount',
            'services': 'services',
            'supports_label_messages': 'supports_label_messages'
        }

        self._account_number = account_number
        self._balance = balance
        self._carrier_code = carrier_code
        self._carrier_id = carrier_id
        self._friendly_name = friendly_name
        self._has_multi_package_supporting_services = has_multi_package_supporting_services
        self._nickname = nickname
        self._options = options
        self._packages = packages
        self._primary = primary
        self._requires_funded_amount = requires_funded_amount
        self._services = services
        self._supports_label_messages = supports_label_messages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCarrierByIdResponseBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The get_carrier_by_id_response_body of this GetCarrierByIdResponseBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self):
        """Gets the account_number of this GetCarrierByIdResponseBody.

        The account number that the carrier is connected to.

        :return: The account_number of this GetCarrierByIdResponseBody.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this GetCarrierByIdResponseBody.

        The account number that the carrier is connected to.

        :param account_number: The account_number of this GetCarrierByIdResponseBody.
        :type account_number: str
        """
        if account_number is not None and len(account_number) < 1:
            raise ValueError("Invalid value for `account_number`, length must be greater than or equal to `1`")

        self._account_number = account_number

    @property
    def balance(self):
        """Gets the balance of this GetCarrierByIdResponseBody.

        Current available balance

        :return: The balance of this GetCarrierByIdResponseBody.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this GetCarrierByIdResponseBody.

        Current available balance

        :param balance: The balance of this GetCarrierByIdResponseBody.
        :type balance: float
        """
        if balance is not None and balance < 0:
            raise ValueError("Invalid value for `balance`, must be a value greater than or equal to `0`")

        self._balance = balance

    @property
    def carrier_code(self):
        """Gets the carrier_code of this GetCarrierByIdResponseBody.

        A string that uniquely identifies the carrier.

        :return: The carrier_code of this GetCarrierByIdResponseBody.
        :rtype: str
        """
        return self._carrier_code

    @carrier_code.setter
    def carrier_code(self, carrier_code):
        """Sets the carrier_code of this GetCarrierByIdResponseBody.

        A string that uniquely identifies the carrier.

        :param carrier_code: The carrier_code of this GetCarrierByIdResponseBody.
        :type carrier_code: str
        """
        if carrier_code is not None and len(carrier_code) > 25:
            raise ValueError("Invalid value for `carrier_code`, length must be less than or equal to `25`")
        if carrier_code is not None and len(carrier_code) < 1:
            raise ValueError("Invalid value for `carrier_code`, length must be greater than or equal to `1`")
        if carrier_code is not None and not re.search(r'^se(-[a-z0-9]+)+$', carrier_code):
            raise ValueError("Invalid value for `carrier_code`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._carrier_code = carrier_code

    @property
    def carrier_id(self):
        """Gets the carrier_id of this GetCarrierByIdResponseBody.

        A string that uniquely identifies the carrier.

        :return: The carrier_id of this GetCarrierByIdResponseBody.
        :rtype: str
        """
        return self._carrier_id

    @carrier_id.setter
    def carrier_id(self, carrier_id):
        """Sets the carrier_id of this GetCarrierByIdResponseBody.

        A string that uniquely identifies the carrier.

        :param carrier_id: The carrier_id of this GetCarrierByIdResponseBody.
        :type carrier_id: str
        """
        if carrier_id is not None and len(carrier_id) > 25:
            raise ValueError("Invalid value for `carrier_id`, length must be less than or equal to `25`")
        if carrier_id is not None and len(carrier_id) < 1:
            raise ValueError("Invalid value for `carrier_id`, length must be greater than or equal to `1`")
        if carrier_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', carrier_id):
            raise ValueError("Invalid value for `carrier_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._carrier_id = carrier_id

    @property
    def friendly_name(self):
        """Gets the friendly_name of this GetCarrierByIdResponseBody.

        Screen readable name

        :return: The friendly_name of this GetCarrierByIdResponseBody.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this GetCarrierByIdResponseBody.

        Screen readable name

        :param friendly_name: The friendly_name of this GetCarrierByIdResponseBody.
        :type friendly_name: str
        """
        if friendly_name is not None and len(friendly_name) < 1:
            raise ValueError("Invalid value for `friendly_name`, length must be greater than or equal to `1`")

        self._friendly_name = friendly_name

    @property
    def has_multi_package_supporting_services(self):
        """Gets the has_multi_package_supporting_services of this GetCarrierByIdResponseBody.

        Carrier supports multiple packages per shipment

        :return: The has_multi_package_supporting_services of this GetCarrierByIdResponseBody.
        :rtype: bool
        """
        return self._has_multi_package_supporting_services

    @has_multi_package_supporting_services.setter
    def has_multi_package_supporting_services(self, has_multi_package_supporting_services):
        """Sets the has_multi_package_supporting_services of this GetCarrierByIdResponseBody.

        Carrier supports multiple packages per shipment

        :param has_multi_package_supporting_services: The has_multi_package_supporting_services of this GetCarrierByIdResponseBody.
        :type has_multi_package_supporting_services: bool
        """

        self._has_multi_package_supporting_services = has_multi_package_supporting_services

    @property
    def nickname(self):
        """Gets the nickname of this GetCarrierByIdResponseBody.

        Nickname given to the account when initially setting up the carrier.

        :return: The nickname of this GetCarrierByIdResponseBody.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this GetCarrierByIdResponseBody.

        Nickname given to the account when initially setting up the carrier.

        :param nickname: The nickname of this GetCarrierByIdResponseBody.
        :type nickname: str
        """
        if nickname is not None and len(nickname) < 1:
            raise ValueError("Invalid value for `nickname`, length must be greater than or equal to `1`")

        self._nickname = nickname

    @property
    def options(self):
        """Gets the options of this GetCarrierByIdResponseBody.

        A list of options that are available to that carrier

        :return: The options of this GetCarrierByIdResponseBody.
        :rtype: List[CarrierAdvancedOption]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this GetCarrierByIdResponseBody.

        A list of options that are available to that carrier

        :param options: The options of this GetCarrierByIdResponseBody.
        :type options: List[CarrierAdvancedOption]
        """

        self._options = options

    @property
    def packages(self):
        """Gets the packages of this GetCarrierByIdResponseBody.

        A list of package types that are supported by the carrier

        :return: The packages of this GetCarrierByIdResponseBody.
        :rtype: List[PackageType]
        """
        return self._packages

    @packages.setter
    def packages(self, packages):
        """Sets the packages of this GetCarrierByIdResponseBody.

        A list of package types that are supported by the carrier

        :param packages: The packages of this GetCarrierByIdResponseBody.
        :type packages: List[PackageType]
        """

        self._packages = packages

    @property
    def primary(self):
        """Gets the primary of this GetCarrierByIdResponseBody.

        Is this the primary carrier that is used by default when no carrier is specified in label/shipment creation

        :return: The primary of this GetCarrierByIdResponseBody.
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this GetCarrierByIdResponseBody.

        Is this the primary carrier that is used by default when no carrier is specified in label/shipment creation

        :param primary: The primary of this GetCarrierByIdResponseBody.
        :type primary: bool
        """

        self._primary = primary

    @property
    def requires_funded_amount(self):
        """Gets the requires_funded_amount of this GetCarrierByIdResponseBody.

        Indicates whether the carrier requires funding to use its services

        :return: The requires_funded_amount of this GetCarrierByIdResponseBody.
        :rtype: bool
        """
        return self._requires_funded_amount

    @requires_funded_amount.setter
    def requires_funded_amount(self, requires_funded_amount):
        """Sets the requires_funded_amount of this GetCarrierByIdResponseBody.

        Indicates whether the carrier requires funding to use its services

        :param requires_funded_amount: The requires_funded_amount of this GetCarrierByIdResponseBody.
        :type requires_funded_amount: bool
        """

        self._requires_funded_amount = requires_funded_amount

    @property
    def services(self):
        """Gets the services of this GetCarrierByIdResponseBody.

        A list of services that are offered by the carrier

        :return: The services of this GetCarrierByIdResponseBody.
        :rtype: List[Service]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this GetCarrierByIdResponseBody.

        A list of services that are offered by the carrier

        :param services: The services of this GetCarrierByIdResponseBody.
        :type services: List[Service]
        """

        self._services = services

    @property
    def supports_label_messages(self):
        """Gets the supports_label_messages of this GetCarrierByIdResponseBody.

        The carrier supports adding custom label messages to an order.

        :return: The supports_label_messages of this GetCarrierByIdResponseBody.
        :rtype: bool
        """
        return self._supports_label_messages

    @supports_label_messages.setter
    def supports_label_messages(self, supports_label_messages):
        """Sets the supports_label_messages of this GetCarrierByIdResponseBody.

        The carrier supports adding custom label messages to an order.

        :param supports_label_messages: The supports_label_messages of this GetCarrierByIdResponseBody.
        :type supports_label_messages: bool
        """

        self._supports_label_messages = supports_label_messages
