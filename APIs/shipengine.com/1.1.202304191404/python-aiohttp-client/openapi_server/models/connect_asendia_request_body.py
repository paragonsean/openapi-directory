# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectAsendiaRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, ftp_password: str=None, ftp_username: str=None, nickname: str=None):
        """ConnectAsendiaRequestBody - a model defined in OpenAPI

        :param account_number: The account_number of this ConnectAsendiaRequestBody.
        :param ftp_password: The ftp_password of this ConnectAsendiaRequestBody.
        :param ftp_username: The ftp_username of this ConnectAsendiaRequestBody.
        :param nickname: The nickname of this ConnectAsendiaRequestBody.
        """
        self.openapi_types = {
            'account_number': str,
            'ftp_password': str,
            'ftp_username': str,
            'nickname': str
        }

        self.attribute_map = {
            'account_number': 'account_number',
            'ftp_password': 'ftp_password',
            'ftp_username': 'ftp_username',
            'nickname': 'nickname'
        }

        self._account_number = account_number
        self._ftp_password = ftp_password
        self._ftp_username = ftp_username
        self._nickname = nickname

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectAsendiaRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The connect_asendia_request_body of this ConnectAsendiaRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self):
        """Gets the account_number of this ConnectAsendiaRequestBody.

        Asendia account number

        :return: The account_number of this ConnectAsendiaRequestBody.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this ConnectAsendiaRequestBody.

        Asendia account number

        :param account_number: The account_number of this ConnectAsendiaRequestBody.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")
        if account_number is not None and len(account_number) < 1:
            raise ValueError("Invalid value for `account_number`, length must be greater than or equal to `1`")

        self._account_number = account_number

    @property
    def ftp_password(self):
        """Gets the ftp_password of this ConnectAsendiaRequestBody.

        FTP password

        :return: The ftp_password of this ConnectAsendiaRequestBody.
        :rtype: str
        """
        return self._ftp_password

    @ftp_password.setter
    def ftp_password(self, ftp_password):
        """Sets the ftp_password of this ConnectAsendiaRequestBody.

        FTP password

        :param ftp_password: The ftp_password of this ConnectAsendiaRequestBody.
        :type ftp_password: str
        """
        if ftp_password is None:
            raise ValueError("Invalid value for `ftp_password`, must not be `None`")
        if ftp_password is not None and len(ftp_password) < 1:
            raise ValueError("Invalid value for `ftp_password`, length must be greater than or equal to `1`")

        self._ftp_password = ftp_password

    @property
    def ftp_username(self):
        """Gets the ftp_username of this ConnectAsendiaRequestBody.

        FTP username

        :return: The ftp_username of this ConnectAsendiaRequestBody.
        :rtype: str
        """
        return self._ftp_username

    @ftp_username.setter
    def ftp_username(self, ftp_username):
        """Sets the ftp_username of this ConnectAsendiaRequestBody.

        FTP username

        :param ftp_username: The ftp_username of this ConnectAsendiaRequestBody.
        :type ftp_username: str
        """
        if ftp_username is None:
            raise ValueError("Invalid value for `ftp_username`, must not be `None`")
        if ftp_username is not None and len(ftp_username) < 1:
            raise ValueError("Invalid value for `ftp_username`, length must be greater than or equal to `1`")

        self._ftp_username = ftp_username

    @property
    def nickname(self):
        """Gets the nickname of this ConnectAsendiaRequestBody.

        The nickname of the Asendia account

        :return: The nickname of this ConnectAsendiaRequestBody.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this ConnectAsendiaRequestBody.

        The nickname of the Asendia account

        :param nickname: The nickname of this ConnectAsendiaRequestBody.
        :type nickname: str
        """
        if nickname is None:
            raise ValueError("Invalid value for `nickname`, must not be `None`")
        if nickname is not None and len(nickname) < 1:
            raise ValueError("Invalid value for `nickname`, length must be greater than or equal to `1`")

        self._nickname = nickname
