# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.manifest_request_status import ManifestRequestStatus
import re
from openapi_server import util


class ManifestRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, manifest_request_id: str=None, status: ManifestRequestStatus=None):
        """ManifestRequest - a model defined in OpenAPI

        :param manifest_request_id: The manifest_request_id of this ManifestRequest.
        :param status: The status of this ManifestRequest.
        """
        self.openapi_types = {
            'manifest_request_id': str,
            'status': ManifestRequestStatus
        }

        self.attribute_map = {
            'manifest_request_id': 'manifest_request_id',
            'status': 'status'
        }

        self._manifest_request_id = manifest_request_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManifestRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The manifest_request of this ManifestRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def manifest_request_id(self):
        """Gets the manifest_request_id of this ManifestRequest.

        A string that uniquely identifies a manifest request

        :return: The manifest_request_id of this ManifestRequest.
        :rtype: str
        """
        return self._manifest_request_id

    @manifest_request_id.setter
    def manifest_request_id(self, manifest_request_id):
        """Sets the manifest_request_id of this ManifestRequest.

        A string that uniquely identifies a manifest request

        :param manifest_request_id: The manifest_request_id of this ManifestRequest.
        :type manifest_request_id: str
        """
        if manifest_request_id is not None and len(manifest_request_id) > 25:
            raise ValueError("Invalid value for `manifest_request_id`, length must be less than or equal to `25`")
        if manifest_request_id is not None and len(manifest_request_id) < 1:
            raise ValueError("Invalid value for `manifest_request_id`, length must be greater than or equal to `1`")
        if manifest_request_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', manifest_request_id):
            raise ValueError("Invalid value for `manifest_request_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._manifest_request_id = manifest_request_id

    @property
    def status(self):
        """Gets the status of this ManifestRequest.


        :return: The status of this ManifestRequest.
        :rtype: ManifestRequestStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ManifestRequest.


        :param status: The status of this ManifestRequest.
        :type status: ManifestRequestStatus
        """

        self._status = status
