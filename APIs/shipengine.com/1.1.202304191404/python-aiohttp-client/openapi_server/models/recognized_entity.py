# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RecognizedEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_index: int=None, result: Dict[str, object]=None, score: float=None, start_index: int=None, text: str=None, type: str=None):
        """RecognizedEntity - a model defined in OpenAPI

        :param end_index: The end_index of this RecognizedEntity.
        :param result: The result of this RecognizedEntity.
        :param score: The score of this RecognizedEntity.
        :param start_index: The start_index of this RecognizedEntity.
        :param text: The text of this RecognizedEntity.
        :param type: The type of this RecognizedEntity.
        """
        self.openapi_types = {
            'end_index': int,
            'result': Dict[str, object],
            'score': float,
            'start_index': int,
            'text': str,
            'type': str
        }

        self.attribute_map = {
            'end_index': 'end_index',
            'result': 'result',
            'score': 'score',
            'start_index': 'start_index',
            'text': 'text',
            'type': 'type'
        }

        self._end_index = end_index
        self._result = result
        self._score = score
        self._start_index = start_index
        self._text = text
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecognizedEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The recognized_entity of this RecognizedEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_index(self):
        """Gets the end_index of this RecognizedEntity.

        The index of the last character of this entity within the original text

        :return: The end_index of this RecognizedEntity.
        :rtype: int
        """
        return self._end_index

    @end_index.setter
    def end_index(self, end_index):
        """Sets the end_index of this RecognizedEntity.

        The index of the last character of this entity within the original text

        :param end_index: The end_index of this RecognizedEntity.
        :type end_index: int
        """
        if end_index is None:
            raise ValueError("Invalid value for `end_index`, must not be `None`")
        if end_index is not None and end_index < 0:
            raise ValueError("Invalid value for `end_index`, must be a value greater than or equal to `0`")

        self._end_index = end_index

    @property
    def result(self):
        """Gets the result of this RecognizedEntity.

        The normalized value of the entity.  Most entity results have a `value` field, which is the normalized value of the entity.  For example, if the substring \"john doe\" was recognized as a \"person\" entity, then the value might be normalized to have proper capitalization (e.g. \"John Doe\").  Or if the substring \"ft worth\" was recognized as a \"city\" entity, then the value might be normalized to \"Fort Worth\".  Some entities have other information in addition to, or instead of a `value`.  For example, a \"dimensions\" entity will have separate fields for `length`, `width`, `height`, and `unit`. 

        :return: The result of this RecognizedEntity.
        :rtype: Dict[str, object]
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this RecognizedEntity.

        The normalized value of the entity.  Most entity results have a `value` field, which is the normalized value of the entity.  For example, if the substring \"john doe\" was recognized as a \"person\" entity, then the value might be normalized to have proper capitalization (e.g. \"John Doe\").  Or if the substring \"ft worth\" was recognized as a \"city\" entity, then the value might be normalized to \"Fort Worth\".  Some entities have other information in addition to, or instead of a `value`.  For example, a \"dimensions\" entity will have separate fields for `length`, `width`, `height`, and `unit`. 

        :param result: The result of this RecognizedEntity.
        :type result: Dict[str, object]
        """

        self._result = result

    @property
    def score(self):
        """Gets the score of this RecognizedEntity.

        A confidence score between zero and one that indicates how certain the API is that it correctly recognized this entity 

        :return: The score of this RecognizedEntity.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this RecognizedEntity.

        A confidence score between zero and one that indicates how certain the API is that it correctly recognized this entity 

        :param score: The score of this RecognizedEntity.
        :type score: float
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")
        if score is not None and score > 1:
            raise ValueError("Invalid value for `score`, must be a value less than or equal to `1`")
        if score is not None and score < 0:
            raise ValueError("Invalid value for `score`, must be a value greater than or equal to `0`")

        self._score = score

    @property
    def start_index(self):
        """Gets the start_index of this RecognizedEntity.

        The index of the first character of this entity within the original text

        :return: The start_index of this RecognizedEntity.
        :rtype: int
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this RecognizedEntity.

        The index of the first character of this entity within the original text

        :param start_index: The start_index of this RecognizedEntity.
        :type start_index: int
        """
        if start_index is None:
            raise ValueError("Invalid value for `start_index`, must not be `None`")
        if start_index is not None and start_index < 0:
            raise ValueError("Invalid value for `start_index`, must be a value greater than or equal to `0`")

        self._start_index = start_index

    @property
    def text(self):
        """Gets the text of this RecognizedEntity.

        The substring from the original text that was recognized as this entity

        :return: The text of this RecognizedEntity.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this RecognizedEntity.

        The substring from the original text that was recognized as this entity

        :param text: The text of this RecognizedEntity.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")
        if text is not None and len(text) < 1:
            raise ValueError("Invalid value for `text`, length must be greater than or equal to `1`")

        self._text = text

    @property
    def type(self):
        """Gets the type of this RecognizedEntity.

        The Entity type (e.g. \"weight\", \"person\", \"address_line1\", etc.)

        :return: The type of this RecognizedEntity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RecognizedEntity.

        The Entity type (e.g. \"weight\", \"person\", \"address_line1\", etc.)

        :param type: The type of this RecognizedEntity.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")
        if type is not None and len(type) < 1:
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `1`")

        self._type = type
