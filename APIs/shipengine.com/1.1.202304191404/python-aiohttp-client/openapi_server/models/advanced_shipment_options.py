# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.advanced_shipment_options_fedex_freight import AdvancedShipmentOptionsFedexFreight
from openapi_server.models.bill_to_party import BillToParty
from openapi_server.models.collect_on_delivery import CollectOnDelivery
from openapi_server.models.origin_type import OriginType
from openapi_server.models.weight import Weight
from openapi_server import util


class AdvancedShipmentOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bill_to_account: str=None, bill_to_country_code: str=None, bill_to_party: BillToParty=None, bill_to_postal_code: str=None, collect_on_delivery: CollectOnDelivery=None, contains_alcohol: bool=False, custom_field1: str=None, custom_field2: str=None, custom_field3: str=None, delivered_duty_paid: bool=False, dry_ice: bool=False, dry_ice_weight: Weight=None, fedex_freight: AdvancedShipmentOptionsFedexFreight=None, freight_class: str=None, non_machinable: bool=False, origin_type: OriginType=None, saturday_delivery: bool=False, shipper_release: bool=None, third_party_consignee: bool=False, use_ups_ground_freight_pricing: bool=None):
        """AdvancedShipmentOptions - a model defined in OpenAPI

        :param bill_to_account: The bill_to_account of this AdvancedShipmentOptions.
        :param bill_to_country_code: The bill_to_country_code of this AdvancedShipmentOptions.
        :param bill_to_party: The bill_to_party of this AdvancedShipmentOptions.
        :param bill_to_postal_code: The bill_to_postal_code of this AdvancedShipmentOptions.
        :param collect_on_delivery: The collect_on_delivery of this AdvancedShipmentOptions.
        :param contains_alcohol: The contains_alcohol of this AdvancedShipmentOptions.
        :param custom_field1: The custom_field1 of this AdvancedShipmentOptions.
        :param custom_field2: The custom_field2 of this AdvancedShipmentOptions.
        :param custom_field3: The custom_field3 of this AdvancedShipmentOptions.
        :param delivered_duty_paid: The delivered_duty_paid of this AdvancedShipmentOptions.
        :param dry_ice: The dry_ice of this AdvancedShipmentOptions.
        :param dry_ice_weight: The dry_ice_weight of this AdvancedShipmentOptions.
        :param fedex_freight: The fedex_freight of this AdvancedShipmentOptions.
        :param freight_class: The freight_class of this AdvancedShipmentOptions.
        :param non_machinable: The non_machinable of this AdvancedShipmentOptions.
        :param origin_type: The origin_type of this AdvancedShipmentOptions.
        :param saturday_delivery: The saturday_delivery of this AdvancedShipmentOptions.
        :param shipper_release: The shipper_release of this AdvancedShipmentOptions.
        :param third_party_consignee: The third_party_consignee of this AdvancedShipmentOptions.
        :param use_ups_ground_freight_pricing: The use_ups_ground_freight_pricing of this AdvancedShipmentOptions.
        """
        self.openapi_types = {
            'bill_to_account': str,
            'bill_to_country_code': str,
            'bill_to_party': BillToParty,
            'bill_to_postal_code': str,
            'collect_on_delivery': CollectOnDelivery,
            'contains_alcohol': bool,
            'custom_field1': str,
            'custom_field2': str,
            'custom_field3': str,
            'delivered_duty_paid': bool,
            'dry_ice': bool,
            'dry_ice_weight': Weight,
            'fedex_freight': AdvancedShipmentOptionsFedexFreight,
            'freight_class': str,
            'non_machinable': bool,
            'origin_type': OriginType,
            'saturday_delivery': bool,
            'shipper_release': bool,
            'third_party_consignee': bool,
            'use_ups_ground_freight_pricing': bool
        }

        self.attribute_map = {
            'bill_to_account': 'bill_to_account',
            'bill_to_country_code': 'bill_to_country_code',
            'bill_to_party': 'bill_to_party',
            'bill_to_postal_code': 'bill_to_postal_code',
            'collect_on_delivery': 'collect_on_delivery',
            'contains_alcohol': 'contains_alcohol',
            'custom_field1': 'custom_field1',
            'custom_field2': 'custom_field2',
            'custom_field3': 'custom_field3',
            'delivered_duty_paid': 'delivered_duty_paid',
            'dry_ice': 'dry_ice',
            'dry_ice_weight': 'dry_ice_weight',
            'fedex_freight': 'fedex_freight',
            'freight_class': 'freight_class',
            'non_machinable': 'non_machinable',
            'origin_type': 'origin_type',
            'saturday_delivery': 'saturday_delivery',
            'shipper_release': 'shipper_release',
            'third_party_consignee': 'third_party_consignee',
            'use_ups_ground_freight_pricing': 'use_ups_ground_freight_pricing'
        }

        self._bill_to_account = bill_to_account
        self._bill_to_country_code = bill_to_country_code
        self._bill_to_party = bill_to_party
        self._bill_to_postal_code = bill_to_postal_code
        self._collect_on_delivery = collect_on_delivery
        self._contains_alcohol = contains_alcohol
        self._custom_field1 = custom_field1
        self._custom_field2 = custom_field2
        self._custom_field3 = custom_field3
        self._delivered_duty_paid = delivered_duty_paid
        self._dry_ice = dry_ice
        self._dry_ice_weight = dry_ice_weight
        self._fedex_freight = fedex_freight
        self._freight_class = freight_class
        self._non_machinable = non_machinable
        self._origin_type = origin_type
        self._saturday_delivery = saturday_delivery
        self._shipper_release = shipper_release
        self._third_party_consignee = third_party_consignee
        self._use_ups_ground_freight_pricing = use_ups_ground_freight_pricing

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdvancedShipmentOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The advanced_shipment_options of this AdvancedShipmentOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bill_to_account(self):
        """Gets the bill_to_account of this AdvancedShipmentOptions.

        This field is used to [bill shipping costs to a third party](https://www.shipengine.com/docs/shipping/bill-to-third-party/).  This field must be used in conjunction with the `bill_to_country_code`, `bill_to_party`, and `bill_to_postal_code` fields. 

        :return: The bill_to_account of this AdvancedShipmentOptions.
        :rtype: str
        """
        return self._bill_to_account

    @bill_to_account.setter
    def bill_to_account(self, bill_to_account):
        """Sets the bill_to_account of this AdvancedShipmentOptions.

        This field is used to [bill shipping costs to a third party](https://www.shipengine.com/docs/shipping/bill-to-third-party/).  This field must be used in conjunction with the `bill_to_country_code`, `bill_to_party`, and `bill_to_postal_code` fields. 

        :param bill_to_account: The bill_to_account of this AdvancedShipmentOptions.
        :type bill_to_account: str
        """

        self._bill_to_account = bill_to_account

    @property
    def bill_to_country_code(self):
        """Gets the bill_to_country_code of this AdvancedShipmentOptions.

        The two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the third-party that is responsible for shipping costs. 

        :return: The bill_to_country_code of this AdvancedShipmentOptions.
        :rtype: str
        """
        return self._bill_to_country_code

    @bill_to_country_code.setter
    def bill_to_country_code(self, bill_to_country_code):
        """Sets the bill_to_country_code of this AdvancedShipmentOptions.

        The two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the third-party that is responsible for shipping costs. 

        :param bill_to_country_code: The bill_to_country_code of this AdvancedShipmentOptions.
        :type bill_to_country_code: str
        """
        if bill_to_country_code is not None and len(bill_to_country_code) > 2:
            raise ValueError("Invalid value for `bill_to_country_code`, length must be less than or equal to `2`")
        if bill_to_country_code is not None and len(bill_to_country_code) < 2:
            raise ValueError("Invalid value for `bill_to_country_code`, length must be greater than or equal to `2`")

        self._bill_to_country_code = bill_to_country_code

    @property
    def bill_to_party(self):
        """Gets the bill_to_party of this AdvancedShipmentOptions.

        Indicates whether to bill shipping costs to the recipient or to a third-party.  When billing to a third-party, the `bill_to_account`, `bill_to_country_code`, and `bill_to_postal_code` fields must also be set. 

        :return: The bill_to_party of this AdvancedShipmentOptions.
        :rtype: BillToParty
        """
        return self._bill_to_party

    @bill_to_party.setter
    def bill_to_party(self, bill_to_party):
        """Sets the bill_to_party of this AdvancedShipmentOptions.

        Indicates whether to bill shipping costs to the recipient or to a third-party.  When billing to a third-party, the `bill_to_account`, `bill_to_country_code`, and `bill_to_postal_code` fields must also be set. 

        :param bill_to_party: The bill_to_party of this AdvancedShipmentOptions.
        :type bill_to_party: BillToParty
        """

        self._bill_to_party = bill_to_party

    @property
    def bill_to_postal_code(self):
        """Gets the bill_to_postal_code of this AdvancedShipmentOptions.

        The postal code of the third-party that is responsible for shipping costs. 

        :return: The bill_to_postal_code of this AdvancedShipmentOptions.
        :rtype: str
        """
        return self._bill_to_postal_code

    @bill_to_postal_code.setter
    def bill_to_postal_code(self, bill_to_postal_code):
        """Sets the bill_to_postal_code of this AdvancedShipmentOptions.

        The postal code of the third-party that is responsible for shipping costs. 

        :param bill_to_postal_code: The bill_to_postal_code of this AdvancedShipmentOptions.
        :type bill_to_postal_code: str
        """

        self._bill_to_postal_code = bill_to_postal_code

    @property
    def collect_on_delivery(self):
        """Gets the collect_on_delivery of this AdvancedShipmentOptions.


        :return: The collect_on_delivery of this AdvancedShipmentOptions.
        :rtype: CollectOnDelivery
        """
        return self._collect_on_delivery

    @collect_on_delivery.setter
    def collect_on_delivery(self, collect_on_delivery):
        """Sets the collect_on_delivery of this AdvancedShipmentOptions.


        :param collect_on_delivery: The collect_on_delivery of this AdvancedShipmentOptions.
        :type collect_on_delivery: CollectOnDelivery
        """

        self._collect_on_delivery = collect_on_delivery

    @property
    def contains_alcohol(self):
        """Gets the contains_alcohol of this AdvancedShipmentOptions.

        Indicates that the shipment contains alcohol.

        :return: The contains_alcohol of this AdvancedShipmentOptions.
        :rtype: bool
        """
        return self._contains_alcohol

    @contains_alcohol.setter
    def contains_alcohol(self, contains_alcohol):
        """Sets the contains_alcohol of this AdvancedShipmentOptions.

        Indicates that the shipment contains alcohol.

        :param contains_alcohol: The contains_alcohol of this AdvancedShipmentOptions.
        :type contains_alcohol: bool
        """

        self._contains_alcohol = contains_alcohol

    @property
    def custom_field1(self):
        """Gets the custom_field1 of this AdvancedShipmentOptions.

        An arbitrary field that can be used to store information about the shipment. 

        :return: The custom_field1 of this AdvancedShipmentOptions.
        :rtype: str
        """
        return self._custom_field1

    @custom_field1.setter
    def custom_field1(self, custom_field1):
        """Sets the custom_field1 of this AdvancedShipmentOptions.

        An arbitrary field that can be used to store information about the shipment. 

        :param custom_field1: The custom_field1 of this AdvancedShipmentOptions.
        :type custom_field1: str
        """
        if custom_field1 is not None and len(custom_field1) > 100:
            raise ValueError("Invalid value for `custom_field1`, length must be less than or equal to `100`")

        self._custom_field1 = custom_field1

    @property
    def custom_field2(self):
        """Gets the custom_field2 of this AdvancedShipmentOptions.

        An arbitrary field that can be used to store information about the shipment. 

        :return: The custom_field2 of this AdvancedShipmentOptions.
        :rtype: str
        """
        return self._custom_field2

    @custom_field2.setter
    def custom_field2(self, custom_field2):
        """Sets the custom_field2 of this AdvancedShipmentOptions.

        An arbitrary field that can be used to store information about the shipment. 

        :param custom_field2: The custom_field2 of this AdvancedShipmentOptions.
        :type custom_field2: str
        """
        if custom_field2 is not None and len(custom_field2) > 100:
            raise ValueError("Invalid value for `custom_field2`, length must be less than or equal to `100`")

        self._custom_field2 = custom_field2

    @property
    def custom_field3(self):
        """Gets the custom_field3 of this AdvancedShipmentOptions.

        An arbitrary field that can be used to store information about the shipment. 

        :return: The custom_field3 of this AdvancedShipmentOptions.
        :rtype: str
        """
        return self._custom_field3

    @custom_field3.setter
    def custom_field3(self, custom_field3):
        """Sets the custom_field3 of this AdvancedShipmentOptions.

        An arbitrary field that can be used to store information about the shipment. 

        :param custom_field3: The custom_field3 of this AdvancedShipmentOptions.
        :type custom_field3: str
        """
        if custom_field3 is not None and len(custom_field3) > 100:
            raise ValueError("Invalid value for `custom_field3`, length must be less than or equal to `100`")

        self._custom_field3 = custom_field3

    @property
    def delivered_duty_paid(self):
        """Gets the delivered_duty_paid of this AdvancedShipmentOptions.

        Indicates that the shipper is paying the international delivery duties for this shipment.  This option is supported by UPS, FedEx, and DHL Express. 

        :return: The delivered_duty_paid of this AdvancedShipmentOptions.
        :rtype: bool
        """
        return self._delivered_duty_paid

    @delivered_duty_paid.setter
    def delivered_duty_paid(self, delivered_duty_paid):
        """Sets the delivered_duty_paid of this AdvancedShipmentOptions.

        Indicates that the shipper is paying the international delivery duties for this shipment.  This option is supported by UPS, FedEx, and DHL Express. 

        :param delivered_duty_paid: The delivered_duty_paid of this AdvancedShipmentOptions.
        :type delivered_duty_paid: bool
        """

        self._delivered_duty_paid = delivered_duty_paid

    @property
    def dry_ice(self):
        """Gets the dry_ice of this AdvancedShipmentOptions.

        Indicates if the shipment contain dry ice

        :return: The dry_ice of this AdvancedShipmentOptions.
        :rtype: bool
        """
        return self._dry_ice

    @dry_ice.setter
    def dry_ice(self, dry_ice):
        """Sets the dry_ice of this AdvancedShipmentOptions.

        Indicates if the shipment contain dry ice

        :param dry_ice: The dry_ice of this AdvancedShipmentOptions.
        :type dry_ice: bool
        """

        self._dry_ice = dry_ice

    @property
    def dry_ice_weight(self):
        """Gets the dry_ice_weight of this AdvancedShipmentOptions.

        The weight of the dry ice in the shipment

        :return: The dry_ice_weight of this AdvancedShipmentOptions.
        :rtype: Weight
        """
        return self._dry_ice_weight

    @dry_ice_weight.setter
    def dry_ice_weight(self, dry_ice_weight):
        """Sets the dry_ice_weight of this AdvancedShipmentOptions.

        The weight of the dry ice in the shipment

        :param dry_ice_weight: The dry_ice_weight of this AdvancedShipmentOptions.
        :type dry_ice_weight: Weight
        """

        self._dry_ice_weight = dry_ice_weight

    @property
    def fedex_freight(self):
        """Gets the fedex_freight of this AdvancedShipmentOptions.


        :return: The fedex_freight of this AdvancedShipmentOptions.
        :rtype: AdvancedShipmentOptionsFedexFreight
        """
        return self._fedex_freight

    @fedex_freight.setter
    def fedex_freight(self, fedex_freight):
        """Sets the fedex_freight of this AdvancedShipmentOptions.


        :param fedex_freight: The fedex_freight of this AdvancedShipmentOptions.
        :type fedex_freight: AdvancedShipmentOptionsFedexFreight
        """

        self._fedex_freight = fedex_freight

    @property
    def freight_class(self):
        """Gets the freight_class of this AdvancedShipmentOptions.

        The National Motor Freight Traffic Association [freight class](http://www.nmfta.org/pages/nmfc?AspxAutoDetectCookieSupport=1), such as \"77.5\", \"110\", or \"250\". 

        :return: The freight_class of this AdvancedShipmentOptions.
        :rtype: str
        """
        return self._freight_class

    @freight_class.setter
    def freight_class(self, freight_class):
        """Sets the freight_class of this AdvancedShipmentOptions.

        The National Motor Freight Traffic Association [freight class](http://www.nmfta.org/pages/nmfc?AspxAutoDetectCookieSupport=1), such as \"77.5\", \"110\", or \"250\". 

        :param freight_class: The freight_class of this AdvancedShipmentOptions.
        :type freight_class: str
        """

        self._freight_class = freight_class

    @property
    def non_machinable(self):
        """Gets the non_machinable of this AdvancedShipmentOptions.

        Indicates that the package cannot be processed automatically because it is too large or irregularly shaped. This is primarily for USPS shipments.  See [Section 1.2 of the USPS parcel standards](https://pe.usps.com/text/dmm300/101.htm#ep1047495) for details. 

        :return: The non_machinable of this AdvancedShipmentOptions.
        :rtype: bool
        """
        return self._non_machinable

    @non_machinable.setter
    def non_machinable(self, non_machinable):
        """Sets the non_machinable of this AdvancedShipmentOptions.

        Indicates that the package cannot be processed automatically because it is too large or irregularly shaped. This is primarily for USPS shipments.  See [Section 1.2 of the USPS parcel standards](https://pe.usps.com/text/dmm300/101.htm#ep1047495) for details. 

        :param non_machinable: The non_machinable of this AdvancedShipmentOptions.
        :type non_machinable: bool
        """

        self._non_machinable = non_machinable

    @property
    def origin_type(self):
        """Gets the origin_type of this AdvancedShipmentOptions.


        :return: The origin_type of this AdvancedShipmentOptions.
        :rtype: OriginType
        """
        return self._origin_type

    @origin_type.setter
    def origin_type(self, origin_type):
        """Sets the origin_type of this AdvancedShipmentOptions.


        :param origin_type: The origin_type of this AdvancedShipmentOptions.
        :type origin_type: OriginType
        """

        self._origin_type = origin_type

    @property
    def saturday_delivery(self):
        """Gets the saturday_delivery of this AdvancedShipmentOptions.

        Enables Saturday delivery, if supported by the carrier.

        :return: The saturday_delivery of this AdvancedShipmentOptions.
        :rtype: bool
        """
        return self._saturday_delivery

    @saturday_delivery.setter
    def saturday_delivery(self, saturday_delivery):
        """Sets the saturday_delivery of this AdvancedShipmentOptions.

        Enables Saturday delivery, if supported by the carrier.

        :param saturday_delivery: The saturday_delivery of this AdvancedShipmentOptions.
        :type saturday_delivery: bool
        """

        self._saturday_delivery = saturday_delivery

    @property
    def shipper_release(self):
        """Gets the shipper_release of this AdvancedShipmentOptions.


        :return: The shipper_release of this AdvancedShipmentOptions.
        :rtype: bool
        """
        return self._shipper_release

    @shipper_release.setter
    def shipper_release(self, shipper_release):
        """Sets the shipper_release of this AdvancedShipmentOptions.


        :param shipper_release: The shipper_release of this AdvancedShipmentOptions.
        :type shipper_release: bool
        """

        self._shipper_release = shipper_release

    @property
    def third_party_consignee(self):
        """Gets the third_party_consignee of this AdvancedShipmentOptions.

        Third Party Consignee option is a value-added service that allows the shipper to supply goods without commercial invoices being attached

        :return: The third_party_consignee of this AdvancedShipmentOptions.
        :rtype: bool
        """
        return self._third_party_consignee

    @third_party_consignee.setter
    def third_party_consignee(self, third_party_consignee):
        """Sets the third_party_consignee of this AdvancedShipmentOptions.

        Third Party Consignee option is a value-added service that allows the shipper to supply goods without commercial invoices being attached

        :param third_party_consignee: The third_party_consignee of this AdvancedShipmentOptions.
        :type third_party_consignee: bool
        """

        self._third_party_consignee = third_party_consignee

    @property
    def use_ups_ground_freight_pricing(self):
        """Gets the use_ups_ground_freight_pricing of this AdvancedShipmentOptions.

        Whether to use [UPS Ground Freight pricing](https://www.shipengine.com/docs/shipping/ups-ground-freight/).  If enabled, then a `freight_class` must also be specified. 

        :return: The use_ups_ground_freight_pricing of this AdvancedShipmentOptions.
        :rtype: bool
        """
        return self._use_ups_ground_freight_pricing

    @use_ups_ground_freight_pricing.setter
    def use_ups_ground_freight_pricing(self, use_ups_ground_freight_pricing):
        """Sets the use_ups_ground_freight_pricing of this AdvancedShipmentOptions.

        Whether to use [UPS Ground Freight pricing](https://www.shipengine.com/docs/shipping/ups-ground-freight/).  If enabled, then a `freight_class` must also be specified. 

        :param use_ups_ground_freight_pricing: The use_ups_ground_freight_pricing of this AdvancedShipmentOptions.
        :type use_ups_ground_freight_pricing: bool
        """

        self._use_ups_ground_freight_pricing = use_ups_ground_freight_pricing
