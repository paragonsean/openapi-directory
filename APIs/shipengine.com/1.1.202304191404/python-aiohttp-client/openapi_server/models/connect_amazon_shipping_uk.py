# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectAmazonShippingUk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_code: str=None, nickname: str=None):
        """ConnectAmazonShippingUk - a model defined in OpenAPI

        :param auth_code: The auth_code of this ConnectAmazonShippingUk.
        :param nickname: The nickname of this ConnectAmazonShippingUk.
        """
        self.openapi_types = {
            'auth_code': str,
            'nickname': str
        }

        self.attribute_map = {
            'auth_code': 'auth_code',
            'nickname': 'nickname'
        }

        self._auth_code = auth_code
        self._nickname = nickname

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectAmazonShippingUk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The connect_amazon_shipping_uk of this ConnectAmazonShippingUk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_code(self):
        """Gets the auth_code of this ConnectAmazonShippingUk.

        Amazon UK Shipping auth code.

        :return: The auth_code of this ConnectAmazonShippingUk.
        :rtype: str
        """
        return self._auth_code

    @auth_code.setter
    def auth_code(self, auth_code):
        """Sets the auth_code of this ConnectAmazonShippingUk.

        Amazon UK Shipping auth code.

        :param auth_code: The auth_code of this ConnectAmazonShippingUk.
        :type auth_code: str
        """
        if auth_code is None:
            raise ValueError("Invalid value for `auth_code`, must not be `None`")
        if auth_code is not None and len(auth_code) < 1:
            raise ValueError("Invalid value for `auth_code`, length must be greater than or equal to `1`")

        self._auth_code = auth_code

    @property
    def nickname(self):
        """Gets the nickname of this ConnectAmazonShippingUk.

        The nickname associated with the carrier connection

        :return: The nickname of this ConnectAmazonShippingUk.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this ConnectAmazonShippingUk.

        The nickname associated with the carrier connection

        :param nickname: The nickname of this ConnectAmazonShippingUk.
        :type nickname: str
        """
        if nickname is None:
            raise ValueError("Invalid value for `nickname`, must not be `None`")
        if nickname is not None and len(nickname) < 1:
            raise ValueError("Invalid value for `nickname`, length must be greater than or equal to `1`")

        self._nickname = nickname
