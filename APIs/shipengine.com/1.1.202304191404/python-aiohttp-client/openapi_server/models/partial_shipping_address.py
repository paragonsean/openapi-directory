# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PartialShippingAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instructions: str=None):
        """PartialShippingAddress - a model defined in OpenAPI

        :param instructions: The instructions of this PartialShippingAddress.
        """
        self.openapi_types = {
            'instructions': str
        }

        self.attribute_map = {
            'instructions': 'instructions'
        }

        self._instructions = instructions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartialShippingAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The partial_shipping_address of this PartialShippingAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instructions(self):
        """Gets the instructions of this PartialShippingAddress.

        Additional text about how to handle the shipment at this address. 

        :return: The instructions of this PartialShippingAddress.
        :rtype: str
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this PartialShippingAddress.

        Additional text about how to handle the shipment at this address. 

        :param instructions: The instructions of this PartialShippingAddress.
        :type instructions: str
        """
        if instructions is not None and len(instructions) < 1:
            raise ValueError("Invalid value for `instructions`, length must be greater than or equal to `1`")

        self._instructions = instructions
