# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.batch_response_error import BatchResponseError
from openapi_server.models.pagination_link import PaginationLink
from openapi_server import util


class ListBatchErrorsResponseBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors: List[BatchResponseError]=[], links: PaginationLink=None):
        """ListBatchErrorsResponseBody - a model defined in OpenAPI

        :param errors: The errors of this ListBatchErrorsResponseBody.
        :param links: The links of this ListBatchErrorsResponseBody.
        """
        self.openapi_types = {
            'errors': List[BatchResponseError],
            'links': PaginationLink
        }

        self.attribute_map = {
            'errors': 'errors',
            'links': 'links'
        }

        self._errors = errors
        self._links = links

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListBatchErrorsResponseBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The list_batch_errors_response_body of this ListBatchErrorsResponseBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self):
        """Gets the errors of this ListBatchErrorsResponseBody.

        The errors currently associated with the batch

        :return: The errors of this ListBatchErrorsResponseBody.
        :rtype: List[BatchResponseError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ListBatchErrorsResponseBody.

        The errors currently associated with the batch

        :param errors: The errors of this ListBatchErrorsResponseBody.
        :type errors: List[BatchResponseError]
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")

        self._errors = errors

    @property
    def links(self):
        """Gets the links of this ListBatchErrorsResponseBody.


        :return: The links of this ListBatchErrorsResponseBody.
        :rtype: PaginationLink
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ListBatchErrorsResponseBody.


        :param links: The links of this ListBatchErrorsResponseBody.
        :type links: PaginationLink
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links
