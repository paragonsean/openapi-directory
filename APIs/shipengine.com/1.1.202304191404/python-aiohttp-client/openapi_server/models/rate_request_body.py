# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RateRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calculate_tax_amount: bool=None, carrier_ids: List[str]=None, is_return: bool=None, package_types: List[str]=None, preferred_currency: str=None, service_codes: List[str]=None):
        """RateRequestBody - a model defined in OpenAPI

        :param calculate_tax_amount: The calculate_tax_amount of this RateRequestBody.
        :param carrier_ids: The carrier_ids of this RateRequestBody.
        :param is_return: The is_return of this RateRequestBody.
        :param package_types: The package_types of this RateRequestBody.
        :param preferred_currency: The preferred_currency of this RateRequestBody.
        :param service_codes: The service_codes of this RateRequestBody.
        """
        self.openapi_types = {
            'calculate_tax_amount': bool,
            'carrier_ids': List[str],
            'is_return': bool,
            'package_types': List[str],
            'preferred_currency': str,
            'service_codes': List[str]
        }

        self.attribute_map = {
            'calculate_tax_amount': 'calculate_tax_amount',
            'carrier_ids': 'carrier_ids',
            'is_return': 'is_return',
            'package_types': 'package_types',
            'preferred_currency': 'preferred_currency',
            'service_codes': 'service_codes'
        }

        self._calculate_tax_amount = calculate_tax_amount
        self._carrier_ids = carrier_ids
        self._is_return = is_return
        self._package_types = package_types
        self._preferred_currency = preferred_currency
        self._service_codes = service_codes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RateRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The rate_request_body of this RateRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calculate_tax_amount(self):
        """Gets the calculate_tax_amount of this RateRequestBody.

        Calculate the duties and tariffs for cross border shipments.

        :return: The calculate_tax_amount of this RateRequestBody.
        :rtype: bool
        """
        return self._calculate_tax_amount

    @calculate_tax_amount.setter
    def calculate_tax_amount(self, calculate_tax_amount):
        """Sets the calculate_tax_amount of this RateRequestBody.

        Calculate the duties and tariffs for cross border shipments.

        :param calculate_tax_amount: The calculate_tax_amount of this RateRequestBody.
        :type calculate_tax_amount: bool
        """

        self._calculate_tax_amount = calculate_tax_amount

    @property
    def carrier_ids(self):
        """Gets the carrier_ids of this RateRequestBody.

        Array of carrier ids to get rates for

        :return: The carrier_ids of this RateRequestBody.
        :rtype: List[str]
        """
        return self._carrier_ids

    @carrier_ids.setter
    def carrier_ids(self, carrier_ids):
        """Sets the carrier_ids of this RateRequestBody.

        Array of carrier ids to get rates for

        :param carrier_ids: The carrier_ids of this RateRequestBody.
        :type carrier_ids: List[str]
        """
        if carrier_ids is None:
            raise ValueError("Invalid value for `carrier_ids`, must not be `None`")
        if carrier_ids is not None and len(carrier_ids) < 1:
            raise ValueError("Invalid value for `carrier_ids`, number of items must be greater than or equal to `1`")

        self._carrier_ids = carrier_ids

    @property
    def is_return(self):
        """Gets the is_return of this RateRequestBody.

        Indicate if it's a return shipment

        :return: The is_return of this RateRequestBody.
        :rtype: bool
        """
        return self._is_return

    @is_return.setter
    def is_return(self, is_return):
        """Sets the is_return of this RateRequestBody.

        Indicate if it's a return shipment

        :param is_return: The is_return of this RateRequestBody.
        :type is_return: bool
        """

        self._is_return = is_return

    @property
    def package_types(self):
        """Gets the package_types of this RateRequestBody.


        :return: The package_types of this RateRequestBody.
        :rtype: List[str]
        """
        return self._package_types

    @package_types.setter
    def package_types(self, package_types):
        """Sets the package_types of this RateRequestBody.


        :param package_types: The package_types of this RateRequestBody.
        :type package_types: List[str]
        """

        self._package_types = package_types

    @property
    def preferred_currency(self):
        """Gets the preferred_currency of this RateRequestBody.

        The currencies that are supported by ShipEngine are the ones that specified by ISO 4217: https://www.iso.org/iso-4217-currency-codes.html 

        :return: The preferred_currency of this RateRequestBody.
        :rtype: str
        """
        return self._preferred_currency

    @preferred_currency.setter
    def preferred_currency(self, preferred_currency):
        """Sets the preferred_currency of this RateRequestBody.

        The currencies that are supported by ShipEngine are the ones that specified by ISO 4217: https://www.iso.org/iso-4217-currency-codes.html 

        :param preferred_currency: The preferred_currency of this RateRequestBody.
        :type preferred_currency: str
        """

        self._preferred_currency = preferred_currency

    @property
    def service_codes(self):
        """Gets the service_codes of this RateRequestBody.


        :return: The service_codes of this RateRequestBody.
        :rtype: List[str]
        """
        return self._service_codes

    @service_codes.setter
    def service_codes(self, service_codes):
        """Sets the service_codes of this RateRequestBody.


        :param service_codes: The service_codes of this RateRequestBody.
        :type service_codes: List[str]
        """

        self._service_codes = service_codes
