# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.partial_address import PartialAddress
from openapi_server.models.recognized_entity import RecognizedEntity
from openapi_server import util


class ParseAddressResponseBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: PartialAddress=None, entities: List[RecognizedEntity]=None, score: float=None):
        """ParseAddressResponseBody - a model defined in OpenAPI

        :param address: The address of this ParseAddressResponseBody.
        :param entities: The entities of this ParseAddressResponseBody.
        :param score: The score of this ParseAddressResponseBody.
        """
        self.openapi_types = {
            'address': PartialAddress,
            'entities': List[RecognizedEntity],
            'score': float
        }

        self.attribute_map = {
            'address': 'address',
            'entities': 'entities',
            'score': 'score'
        }

        self._address = address
        self._entities = entities
        self._score = score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParseAddressResponseBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The parse_address_response_body of this ParseAddressResponseBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this ParseAddressResponseBody.

        The parsed address.  This address may not be complete, depending on how much information was included in the text and how confident the API is about each recognized entity.  > **Note:** The address-recognition API does not currently perform any validation of the parsed address, so we recommend that you use the [address-validation API](https://www.shipengine.com/docs/addresses/validation/) to ensure that the address is correct. 

        :return: The address of this ParseAddressResponseBody.
        :rtype: PartialAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ParseAddressResponseBody.

        The parsed address.  This address may not be complete, depending on how much information was included in the text and how confident the API is about each recognized entity.  > **Note:** The address-recognition API does not currently perform any validation of the parsed address, so we recommend that you use the [address-validation API](https://www.shipengine.com/docs/addresses/validation/) to ensure that the address is correct. 

        :param address: The address of this ParseAddressResponseBody.
        :type address: PartialAddress
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def entities(self):
        """Gets the entities of this ParseAddressResponseBody.

        All of the entities that were recognized in the text. An \"entity\" is a single piece of data, such as a city, a postal code, or an address line.  Each entity includes the original text and the parsed value. 

        :return: The entities of this ParseAddressResponseBody.
        :rtype: List[RecognizedEntity]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this ParseAddressResponseBody.

        All of the entities that were recognized in the text. An \"entity\" is a single piece of data, such as a city, a postal code, or an address line.  Each entity includes the original text and the parsed value. 

        :param entities: The entities of this ParseAddressResponseBody.
        :type entities: List[RecognizedEntity]
        """
        if entities is None:
            raise ValueError("Invalid value for `entities`, must not be `None`")
        if entities is not None and len(entities) < 0:
            raise ValueError("Invalid value for `entities`, number of items must be greater than or equal to `0`")

        self._entities = entities

    @property
    def score(self):
        """Gets the score of this ParseAddressResponseBody.

        A confidence score between zero and one that indicates how certain the API is that it understood the text. 

        :return: The score of this ParseAddressResponseBody.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ParseAddressResponseBody.

        A confidence score between zero and one that indicates how certain the API is that it understood the text. 

        :param score: The score of this ParseAddressResponseBody.
        :type score: float
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")
        if score is not None and score > 1:
            raise ValueError("Invalid value for `score`, must be a value less than or equal to `1`")
        if score is not None and score < 0:
            raise ValueError("Invalid value for `score`, must be a value greater than or equal to `0`")

        self._score = score
