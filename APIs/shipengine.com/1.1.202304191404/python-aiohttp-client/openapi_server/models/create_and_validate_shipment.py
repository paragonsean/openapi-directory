# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address_validation_result import AddressValidationResult
from openapi_server.models.advanced_shipment_options import AdvancedShipmentOptions
from openapi_server.models.delivery_confirmation import DeliveryConfirmation
from openapi_server.models.insurance_provider import InsuranceProvider
from openapi_server.models.international_shipment_options import InternationalShipmentOptions
from openapi_server.models.order_source_name import OrderSourceName
from openapi_server.models.origin_type import OriginType
from openapi_server.models.package import Package
from openapi_server.models.shipment_item import ShipmentItem
from openapi_server.models.shipment_status import ShipmentStatus
from openapi_server.models.shipping_address import ShippingAddress
from openapi_server.models.tag import Tag
from openapi_server.models.tax_identifier import TaxIdentifier
from openapi_server.models.weight import Weight
import re
from openapi_server import util


class CreateAndValidateShipment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advanced_options: AdvancedShipmentOptions=None, carrier_id: str=None, confirmation: DeliveryConfirmation=None, created_at: datetime=None, customs: InternationalShipmentOptions=None, external_order_id: str=None, external_shipment_id: str=None, insurance_provider: InsuranceProvider=None, is_return: bool=False, items: List[ShipmentItem]=[], modified_at: datetime=None, order_source_code: OrderSourceName=None, origin_type: OriginType=None, packages: List[Package]=None, return_to: ShippingAddress=None, service_code: str=None, ship_date: datetime=None, ship_from: ShippingAddress=None, ship_to: ShippingAddress=None, shipment_id: str=None, shipment_number: str=None, shipment_status: ShipmentStatus=None, tags: List[Tag]=[], tax_identifiers: List[TaxIdentifier]=None, total_weight: Weight=None, warehouse_id: str=None, address_validation: AddressValidationResult=None, errors: List[str]=None):
        """CreateAndValidateShipment - a model defined in OpenAPI

        :param advanced_options: The advanced_options of this CreateAndValidateShipment.
        :param carrier_id: The carrier_id of this CreateAndValidateShipment.
        :param confirmation: The confirmation of this CreateAndValidateShipment.
        :param created_at: The created_at of this CreateAndValidateShipment.
        :param customs: The customs of this CreateAndValidateShipment.
        :param external_order_id: The external_order_id of this CreateAndValidateShipment.
        :param external_shipment_id: The external_shipment_id of this CreateAndValidateShipment.
        :param insurance_provider: The insurance_provider of this CreateAndValidateShipment.
        :param is_return: The is_return of this CreateAndValidateShipment.
        :param items: The items of this CreateAndValidateShipment.
        :param modified_at: The modified_at of this CreateAndValidateShipment.
        :param order_source_code: The order_source_code of this CreateAndValidateShipment.
        :param origin_type: The origin_type of this CreateAndValidateShipment.
        :param packages: The packages of this CreateAndValidateShipment.
        :param return_to: The return_to of this CreateAndValidateShipment.
        :param service_code: The service_code of this CreateAndValidateShipment.
        :param ship_date: The ship_date of this CreateAndValidateShipment.
        :param ship_from: The ship_from of this CreateAndValidateShipment.
        :param ship_to: The ship_to of this CreateAndValidateShipment.
        :param shipment_id: The shipment_id of this CreateAndValidateShipment.
        :param shipment_number: The shipment_number of this CreateAndValidateShipment.
        :param shipment_status: The shipment_status of this CreateAndValidateShipment.
        :param tags: The tags of this CreateAndValidateShipment.
        :param tax_identifiers: The tax_identifiers of this CreateAndValidateShipment.
        :param total_weight: The total_weight of this CreateAndValidateShipment.
        :param warehouse_id: The warehouse_id of this CreateAndValidateShipment.
        :param address_validation: The address_validation of this CreateAndValidateShipment.
        :param errors: The errors of this CreateAndValidateShipment.
        """
        self.openapi_types = {
            'advanced_options': AdvancedShipmentOptions,
            'carrier_id': str,
            'confirmation': DeliveryConfirmation,
            'created_at': datetime,
            'customs': InternationalShipmentOptions,
            'external_order_id': str,
            'external_shipment_id': str,
            'insurance_provider': InsuranceProvider,
            'is_return': bool,
            'items': List[ShipmentItem],
            'modified_at': datetime,
            'order_source_code': OrderSourceName,
            'origin_type': OriginType,
            'packages': List[Package],
            'return_to': ShippingAddress,
            'service_code': str,
            'ship_date': datetime,
            'ship_from': ShippingAddress,
            'ship_to': ShippingAddress,
            'shipment_id': str,
            'shipment_number': str,
            'shipment_status': ShipmentStatus,
            'tags': List[Tag],
            'tax_identifiers': List[TaxIdentifier],
            'total_weight': Weight,
            'warehouse_id': str,
            'address_validation': AddressValidationResult,
            'errors': List[str]
        }

        self.attribute_map = {
            'advanced_options': 'advanced_options',
            'carrier_id': 'carrier_id',
            'confirmation': 'confirmation',
            'created_at': 'created_at',
            'customs': 'customs',
            'external_order_id': 'external_order_id',
            'external_shipment_id': 'external_shipment_id',
            'insurance_provider': 'insurance_provider',
            'is_return': 'is_return',
            'items': 'items',
            'modified_at': 'modified_at',
            'order_source_code': 'order_source_code',
            'origin_type': 'origin_type',
            'packages': 'packages',
            'return_to': 'return_to',
            'service_code': 'service_code',
            'ship_date': 'ship_date',
            'ship_from': 'ship_from',
            'ship_to': 'ship_to',
            'shipment_id': 'shipment_id',
            'shipment_number': 'shipment_number',
            'shipment_status': 'shipment_status',
            'tags': 'tags',
            'tax_identifiers': 'tax_identifiers',
            'total_weight': 'total_weight',
            'warehouse_id': 'warehouse_id',
            'address_validation': 'address_validation',
            'errors': 'errors'
        }

        self._advanced_options = advanced_options
        self._carrier_id = carrier_id
        self._confirmation = confirmation
        self._created_at = created_at
        self._customs = customs
        self._external_order_id = external_order_id
        self._external_shipment_id = external_shipment_id
        self._insurance_provider = insurance_provider
        self._is_return = is_return
        self._items = items
        self._modified_at = modified_at
        self._order_source_code = order_source_code
        self._origin_type = origin_type
        self._packages = packages
        self._return_to = return_to
        self._service_code = service_code
        self._ship_date = ship_date
        self._ship_from = ship_from
        self._ship_to = ship_to
        self._shipment_id = shipment_id
        self._shipment_number = shipment_number
        self._shipment_status = shipment_status
        self._tags = tags
        self._tax_identifiers = tax_identifiers
        self._total_weight = total_weight
        self._warehouse_id = warehouse_id
        self._address_validation = address_validation
        self._errors = errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAndValidateShipment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The create_and_validate_shipment of this CreateAndValidateShipment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advanced_options(self):
        """Gets the advanced_options of this CreateAndValidateShipment.

        Advanced shipment options.  These are entirely optional.

        :return: The advanced_options of this CreateAndValidateShipment.
        :rtype: AdvancedShipmentOptions
        """
        return self._advanced_options

    @advanced_options.setter
    def advanced_options(self, advanced_options):
        """Sets the advanced_options of this CreateAndValidateShipment.

        Advanced shipment options.  These are entirely optional.

        :param advanced_options: The advanced_options of this CreateAndValidateShipment.
        :type advanced_options: AdvancedShipmentOptions
        """

        self._advanced_options = advanced_options

    @property
    def carrier_id(self):
        """Gets the carrier_id of this CreateAndValidateShipment.

        The carrier account that is billed for the shipping charges

        :return: The carrier_id of this CreateAndValidateShipment.
        :rtype: str
        """
        return self._carrier_id

    @carrier_id.setter
    def carrier_id(self, carrier_id):
        """Sets the carrier_id of this CreateAndValidateShipment.

        The carrier account that is billed for the shipping charges

        :param carrier_id: The carrier_id of this CreateAndValidateShipment.
        :type carrier_id: str
        """
        if carrier_id is not None and len(carrier_id) > 25:
            raise ValueError("Invalid value for `carrier_id`, length must be less than or equal to `25`")
        if carrier_id is not None and len(carrier_id) < 1:
            raise ValueError("Invalid value for `carrier_id`, length must be greater than or equal to `1`")
        if carrier_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', carrier_id):
            raise ValueError("Invalid value for `carrier_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._carrier_id = carrier_id

    @property
    def confirmation(self):
        """Gets the confirmation of this CreateAndValidateShipment.

        The type of delivery confirmation that is required for this shipment.

        :return: The confirmation of this CreateAndValidateShipment.
        :rtype: DeliveryConfirmation
        """
        return self._confirmation

    @confirmation.setter
    def confirmation(self, confirmation):
        """Sets the confirmation of this CreateAndValidateShipment.

        The type of delivery confirmation that is required for this shipment.

        :param confirmation: The confirmation of this CreateAndValidateShipment.
        :type confirmation: DeliveryConfirmation
        """

        self._confirmation = confirmation

    @property
    def created_at(self):
        """Gets the created_at of this CreateAndValidateShipment.

        The date and time that the shipment was created in ShipEngine.

        :return: The created_at of this CreateAndValidateShipment.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CreateAndValidateShipment.

        The date and time that the shipment was created in ShipEngine.

        :param created_at: The created_at of this CreateAndValidateShipment.
        :type created_at: datetime
        """
        if created_at is not None and not re.search(r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$', created_at):
            raise ValueError("Invalid value for `created_at`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$/`")

        self._created_at = created_at

    @property
    def customs(self):
        """Gets the customs of this CreateAndValidateShipment.

        Customs information.  This is usually only needed for international shipments. 

        :return: The customs of this CreateAndValidateShipment.
        :rtype: InternationalShipmentOptions
        """
        return self._customs

    @customs.setter
    def customs(self, customs):
        """Sets the customs of this CreateAndValidateShipment.

        Customs information.  This is usually only needed for international shipments. 

        :param customs: The customs of this CreateAndValidateShipment.
        :type customs: InternationalShipmentOptions
        """

        self._customs = customs

    @property
    def external_order_id(self):
        """Gets the external_order_id of this CreateAndValidateShipment.

        ID that the Order Source assigned

        :return: The external_order_id of this CreateAndValidateShipment.
        :rtype: str
        """
        return self._external_order_id

    @external_order_id.setter
    def external_order_id(self, external_order_id):
        """Sets the external_order_id of this CreateAndValidateShipment.

        ID that the Order Source assigned

        :param external_order_id: The external_order_id of this CreateAndValidateShipment.
        :type external_order_id: str
        """

        self._external_order_id = external_order_id

    @property
    def external_shipment_id(self):
        """Gets the external_shipment_id of this CreateAndValidateShipment.

        A unique user-defined key to identify a shipment.  This can be used to retrieve the shipment.  > **Warning:** The `external_shipment_id` is limited to 50 characters. Any additional characters will be truncated. 

        :return: The external_shipment_id of this CreateAndValidateShipment.
        :rtype: str
        """
        return self._external_shipment_id

    @external_shipment_id.setter
    def external_shipment_id(self, external_shipment_id):
        """Sets the external_shipment_id of this CreateAndValidateShipment.

        A unique user-defined key to identify a shipment.  This can be used to retrieve the shipment.  > **Warning:** The `external_shipment_id` is limited to 50 characters. Any additional characters will be truncated. 

        :param external_shipment_id: The external_shipment_id of this CreateAndValidateShipment.
        :type external_shipment_id: str
        """
        if external_shipment_id is not None and len(external_shipment_id) > 50:
            raise ValueError("Invalid value for `external_shipment_id`, length must be less than or equal to `50`")

        self._external_shipment_id = external_shipment_id

    @property
    def insurance_provider(self):
        """Gets the insurance_provider of this CreateAndValidateShipment.

        The insurance provider to use for any insured packages in the shipment. 

        :return: The insurance_provider of this CreateAndValidateShipment.
        :rtype: InsuranceProvider
        """
        return self._insurance_provider

    @insurance_provider.setter
    def insurance_provider(self, insurance_provider):
        """Sets the insurance_provider of this CreateAndValidateShipment.

        The insurance provider to use for any insured packages in the shipment. 

        :param insurance_provider: The insurance_provider of this CreateAndValidateShipment.
        :type insurance_provider: InsuranceProvider
        """

        self._insurance_provider = insurance_provider

    @property
    def is_return(self):
        """Gets the is_return of this CreateAndValidateShipment.

        An optional indicator if the shipment is intended to be a return. Defaults to false if not provided. 

        :return: The is_return of this CreateAndValidateShipment.
        :rtype: bool
        """
        return self._is_return

    @is_return.setter
    def is_return(self, is_return):
        """Sets the is_return of this CreateAndValidateShipment.

        An optional indicator if the shipment is intended to be a return. Defaults to false if not provided. 

        :param is_return: The is_return of this CreateAndValidateShipment.
        :type is_return: bool
        """

        self._is_return = is_return

    @property
    def items(self):
        """Gets the items of this CreateAndValidateShipment.

        Describe the packages included in this shipment as related to potential metadata that was imported from external order sources 

        :return: The items of this CreateAndValidateShipment.
        :rtype: List[ShipmentItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this CreateAndValidateShipment.

        Describe the packages included in this shipment as related to potential metadata that was imported from external order sources 

        :param items: The items of this CreateAndValidateShipment.
        :type items: List[ShipmentItem]
        """

        self._items = items

    @property
    def modified_at(self):
        """Gets the modified_at of this CreateAndValidateShipment.

        The date and time that the shipment was created or last modified.

        :return: The modified_at of this CreateAndValidateShipment.
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this CreateAndValidateShipment.

        The date and time that the shipment was created or last modified.

        :param modified_at: The modified_at of this CreateAndValidateShipment.
        :type modified_at: datetime
        """
        if modified_at is not None and not re.search(r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$', modified_at):
            raise ValueError("Invalid value for `modified_at`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$/`")

        self._modified_at = modified_at

    @property
    def order_source_code(self):
        """Gets the order_source_code of this CreateAndValidateShipment.


        :return: The order_source_code of this CreateAndValidateShipment.
        :rtype: OrderSourceName
        """
        return self._order_source_code

    @order_source_code.setter
    def order_source_code(self, order_source_code):
        """Sets the order_source_code of this CreateAndValidateShipment.


        :param order_source_code: The order_source_code of this CreateAndValidateShipment.
        :type order_source_code: OrderSourceName
        """

        self._order_source_code = order_source_code

    @property
    def origin_type(self):
        """Gets the origin_type of this CreateAndValidateShipment.

        Indicates if the package will be picked up or dropped off by the carrier

        :return: The origin_type of this CreateAndValidateShipment.
        :rtype: OriginType
        """
        return self._origin_type

    @origin_type.setter
    def origin_type(self, origin_type):
        """Sets the origin_type of this CreateAndValidateShipment.

        Indicates if the package will be picked up or dropped off by the carrier

        :param origin_type: The origin_type of this CreateAndValidateShipment.
        :type origin_type: OriginType
        """

        self._origin_type = origin_type

    @property
    def packages(self):
        """Gets the packages of this CreateAndValidateShipment.

        The packages in the shipment.  > **Note:** Some carriers only allow one package per shipment.  If you attempt to create a multi-package shipment for a carrier that doesn't allow it, an error will be returned. 

        :return: The packages of this CreateAndValidateShipment.
        :rtype: List[Package]
        """
        return self._packages

    @packages.setter
    def packages(self, packages):
        """Sets the packages of this CreateAndValidateShipment.

        The packages in the shipment.  > **Note:** Some carriers only allow one package per shipment.  If you attempt to create a multi-package shipment for a carrier that doesn't allow it, an error will be returned. 

        :param packages: The packages of this CreateAndValidateShipment.
        :type packages: List[Package]
        """
        if packages is not None and len(packages) < 1:
            raise ValueError("Invalid value for `packages`, number of items must be greater than or equal to `1`")

        self._packages = packages

    @property
    def return_to(self):
        """Gets the return_to of this CreateAndValidateShipment.

        The return address for this shipment.  Defaults to the `ship_from` address. 

        :return: The return_to of this CreateAndValidateShipment.
        :rtype: ShippingAddress
        """
        return self._return_to

    @return_to.setter
    def return_to(self, return_to):
        """Sets the return_to of this CreateAndValidateShipment.

        The return address for this shipment.  Defaults to the `ship_from` address. 

        :param return_to: The return_to of this CreateAndValidateShipment.
        :type return_to: ShippingAddress
        """

        self._return_to = return_to

    @property
    def service_code(self):
        """Gets the service_code of this CreateAndValidateShipment.

        The [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) used to ship the package, such as `fedex_ground`, `usps_first_class_mail`, `flat_rate_envelope`, etc. 

        :return: The service_code of this CreateAndValidateShipment.
        :rtype: str
        """
        return self._service_code

    @service_code.setter
    def service_code(self, service_code):
        """Sets the service_code of this CreateAndValidateShipment.

        The [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) used to ship the package, such as `fedex_ground`, `usps_first_class_mail`, `flat_rate_envelope`, etc. 

        :param service_code: The service_code of this CreateAndValidateShipment.
        :type service_code: str
        """
        if service_code is not None and not re.search(r'^[a-z0-9]+(_[a-z0-9-]+)* ?$', service_code):
            raise ValueError("Invalid value for `service_code`, must be a follow pattern or equal to `/^[a-z0-9]+(_[a-z0-9-]+)* ?$/`")

        self._service_code = service_code

    @property
    def ship_date(self):
        """Gets the ship_date of this CreateAndValidateShipment.

        The date that the shipment was (or will be) shippped.  ShipEngine will take the day of week into consideration. For example, if the carrier does not operate on Sundays, then a package that would have shipped on Sunday will ship on Monday instead. 

        :return: The ship_date of this CreateAndValidateShipment.
        :rtype: datetime
        """
        return self._ship_date

    @ship_date.setter
    def ship_date(self, ship_date):
        """Sets the ship_date of this CreateAndValidateShipment.

        The date that the shipment was (or will be) shippped.  ShipEngine will take the day of week into consideration. For example, if the carrier does not operate on Sundays, then a package that would have shipped on Sunday will ship on Monday instead. 

        :param ship_date: The ship_date of this CreateAndValidateShipment.
        :type ship_date: datetime
        """
        if ship_date is not None and not re.search(r'^\d{4}-\d{2}-\d{2}(T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2}))?$', ship_date):
            raise ValueError("Invalid value for `ship_date`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}(T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2}))?$/`")

        self._ship_date = ship_date

    @property
    def ship_from(self):
        """Gets the ship_from of this CreateAndValidateShipment.

        The shipment's origin address. If you frequently ship from the same location, consider [creating a warehouse](https://www.shipengine.com/docs/reference/create-warehouse/).  Then you can simply specify the `warehouse_id` rather than the complete address each time. 

        :return: The ship_from of this CreateAndValidateShipment.
        :rtype: ShippingAddress
        """
        return self._ship_from

    @ship_from.setter
    def ship_from(self, ship_from):
        """Sets the ship_from of this CreateAndValidateShipment.

        The shipment's origin address. If you frequently ship from the same location, consider [creating a warehouse](https://www.shipengine.com/docs/reference/create-warehouse/).  Then you can simply specify the `warehouse_id` rather than the complete address each time. 

        :param ship_from: The ship_from of this CreateAndValidateShipment.
        :type ship_from: ShippingAddress
        """

        self._ship_from = ship_from

    @property
    def ship_to(self):
        """Gets the ship_to of this CreateAndValidateShipment.

        The recipient's mailing address

        :return: The ship_to of this CreateAndValidateShipment.
        :rtype: ShippingAddress
        """
        return self._ship_to

    @ship_to.setter
    def ship_to(self, ship_to):
        """Sets the ship_to of this CreateAndValidateShipment.

        The recipient's mailing address

        :param ship_to: The ship_to of this CreateAndValidateShipment.
        :type ship_to: ShippingAddress
        """

        self._ship_to = ship_to

    @property
    def shipment_id(self):
        """Gets the shipment_id of this CreateAndValidateShipment.

        A string that uniquely identifies the shipment

        :return: The shipment_id of this CreateAndValidateShipment.
        :rtype: str
        """
        return self._shipment_id

    @shipment_id.setter
    def shipment_id(self, shipment_id):
        """Sets the shipment_id of this CreateAndValidateShipment.

        A string that uniquely identifies the shipment

        :param shipment_id: The shipment_id of this CreateAndValidateShipment.
        :type shipment_id: str
        """
        if shipment_id is not None and len(shipment_id) > 25:
            raise ValueError("Invalid value for `shipment_id`, length must be less than or equal to `25`")
        if shipment_id is not None and len(shipment_id) < 1:
            raise ValueError("Invalid value for `shipment_id`, length must be greater than or equal to `1`")
        if shipment_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', shipment_id):
            raise ValueError("Invalid value for `shipment_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._shipment_id = shipment_id

    @property
    def shipment_number(self):
        """Gets the shipment_number of this CreateAndValidateShipment.

        A non-unique user-defined number used to identify a shipment.  If undefined, this will match the external_shipment_id of the shipment.  > **Warning:** The `shipment_number` is limited to 50 characters. Any additional characters will be truncated. 

        :return: The shipment_number of this CreateAndValidateShipment.
        :rtype: str
        """
        return self._shipment_number

    @shipment_number.setter
    def shipment_number(self, shipment_number):
        """Sets the shipment_number of this CreateAndValidateShipment.

        A non-unique user-defined number used to identify a shipment.  If undefined, this will match the external_shipment_id of the shipment.  > **Warning:** The `shipment_number` is limited to 50 characters. Any additional characters will be truncated. 

        :param shipment_number: The shipment_number of this CreateAndValidateShipment.
        :type shipment_number: str
        """
        if shipment_number is not None and len(shipment_number) > 50:
            raise ValueError("Invalid value for `shipment_number`, length must be less than or equal to `50`")

        self._shipment_number = shipment_number

    @property
    def shipment_status(self):
        """Gets the shipment_status of this CreateAndValidateShipment.

        The current status of the shipment

        :return: The shipment_status of this CreateAndValidateShipment.
        :rtype: ShipmentStatus
        """
        return self._shipment_status

    @shipment_status.setter
    def shipment_status(self, shipment_status):
        """Sets the shipment_status of this CreateAndValidateShipment.

        The current status of the shipment

        :param shipment_status: The shipment_status of this CreateAndValidateShipment.
        :type shipment_status: ShipmentStatus
        """

        self._shipment_status = shipment_status

    @property
    def tags(self):
        """Gets the tags of this CreateAndValidateShipment.

        Arbitrary tags associated with this shipment.  Tags can be used to categorize shipments, and shipments can be queried by their tags. 

        :return: The tags of this CreateAndValidateShipment.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateAndValidateShipment.

        Arbitrary tags associated with this shipment.  Tags can be used to categorize shipments, and shipments can be queried by their tags. 

        :param tags: The tags of this CreateAndValidateShipment.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags

    @property
    def tax_identifiers(self):
        """Gets the tax_identifiers of this CreateAndValidateShipment.


        :return: The tax_identifiers of this CreateAndValidateShipment.
        :rtype: List[TaxIdentifier]
        """
        return self._tax_identifiers

    @tax_identifiers.setter
    def tax_identifiers(self, tax_identifiers):
        """Sets the tax_identifiers of this CreateAndValidateShipment.


        :param tax_identifiers: The tax_identifiers of this CreateAndValidateShipment.
        :type tax_identifiers: List[TaxIdentifier]
        """

        self._tax_identifiers = tax_identifiers

    @property
    def total_weight(self):
        """Gets the total_weight of this CreateAndValidateShipment.

        The combined weight of all packages in the shipment

        :return: The total_weight of this CreateAndValidateShipment.
        :rtype: Weight
        """
        return self._total_weight

    @total_weight.setter
    def total_weight(self, total_weight):
        """Sets the total_weight of this CreateAndValidateShipment.

        The combined weight of all packages in the shipment

        :param total_weight: The total_weight of this CreateAndValidateShipment.
        :type total_weight: Weight
        """

        self._total_weight = total_weight

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this CreateAndValidateShipment.

        The [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/) that the shipment is being shipped from.  Either `warehouse_id` or `ship_from` must be specified. 

        :return: The warehouse_id of this CreateAndValidateShipment.
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this CreateAndValidateShipment.

        The [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/) that the shipment is being shipped from.  Either `warehouse_id` or `ship_from` must be specified. 

        :param warehouse_id: The warehouse_id of this CreateAndValidateShipment.
        :type warehouse_id: str
        """
        if warehouse_id is not None and len(warehouse_id) > 25:
            raise ValueError("Invalid value for `warehouse_id`, length must be less than or equal to `25`")
        if warehouse_id is not None and len(warehouse_id) < 1:
            raise ValueError("Invalid value for `warehouse_id`, length must be greater than or equal to `1`")
        if warehouse_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', warehouse_id):
            raise ValueError("Invalid value for `warehouse_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._warehouse_id = warehouse_id

    @property
    def address_validation(self):
        """Gets the address_validation of this CreateAndValidateShipment.

        The address validation

        :return: The address_validation of this CreateAndValidateShipment.
        :rtype: AddressValidationResult
        """
        return self._address_validation

    @address_validation.setter
    def address_validation(self, address_validation):
        """Sets the address_validation of this CreateAndValidateShipment.

        The address validation

        :param address_validation: The address_validation of this CreateAndValidateShipment.
        :type address_validation: AddressValidationResult
        """

        self._address_validation = address_validation

    @property
    def errors(self):
        """Gets the errors of this CreateAndValidateShipment.

        An array of errors that occurred while creating shipment.

        :return: The errors of this CreateAndValidateShipment.
        :rtype: List[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this CreateAndValidateShipment.

        An array of errors that occurred while creating shipment.

        :param errors: The errors of this CreateAndValidateShipment.
        :type errors: List[str]
        """

        self._errors = errors
