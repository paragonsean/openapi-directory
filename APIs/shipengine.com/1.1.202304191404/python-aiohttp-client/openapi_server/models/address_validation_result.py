# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.address_validation_status import AddressValidationStatus
from openapi_server.models.response_message import ResponseMessage
from openapi_server import util


class AddressValidationResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, matched_address: Address=None, messages: List[ResponseMessage]=[], original_address: Address=None, status: AddressValidationStatus=None):
        """AddressValidationResult - a model defined in OpenAPI

        :param matched_address: The matched_address of this AddressValidationResult.
        :param messages: The messages of this AddressValidationResult.
        :param original_address: The original_address of this AddressValidationResult.
        :param status: The status of this AddressValidationResult.
        """
        self.openapi_types = {
            'matched_address': Address,
            'messages': List[ResponseMessage],
            'original_address': Address,
            'status': AddressValidationStatus
        }

        self.attribute_map = {
            'matched_address': 'matched_address',
            'messages': 'messages',
            'original_address': 'original_address',
            'status': 'status'
        }

        self._matched_address = matched_address
        self._messages = messages
        self._original_address = original_address
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddressValidationResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The address_validation_result of this AddressValidationResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def matched_address(self):
        """Gets the matched_address of this AddressValidationResult.

        The matched address found by the Shipengine API

        :return: The matched_address of this AddressValidationResult.
        :rtype: Address
        """
        return self._matched_address

    @matched_address.setter
    def matched_address(self, matched_address):
        """Sets the matched_address of this AddressValidationResult.

        The matched address found by the Shipengine API

        :param matched_address: The matched_address of this AddressValidationResult.
        :type matched_address: Address
        """
        if matched_address is None:
            raise ValueError("Invalid value for `matched_address`, must not be `None`")

        self._matched_address = matched_address

    @property
    def messages(self):
        """Gets the messages of this AddressValidationResult.

        The list of messages that were generated during the address validation request.

        :return: The messages of this AddressValidationResult.
        :rtype: List[ResponseMessage]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this AddressValidationResult.

        The list of messages that were generated during the address validation request.

        :param messages: The messages of this AddressValidationResult.
        :type messages: List[ResponseMessage]
        """
        if messages is None:
            raise ValueError("Invalid value for `messages`, must not be `None`")

        self._messages = messages

    @property
    def original_address(self):
        """Gets the original_address of this AddressValidationResult.

        The original address that was sent for validation

        :return: The original_address of this AddressValidationResult.
        :rtype: Address
        """
        return self._original_address

    @original_address.setter
    def original_address(self, original_address):
        """Sets the original_address of this AddressValidationResult.

        The original address that was sent for validation

        :param original_address: The original_address of this AddressValidationResult.
        :type original_address: Address
        """
        if original_address is None:
            raise ValueError("Invalid value for `original_address`, must not be `None`")

        self._original_address = original_address

    @property
    def status(self):
        """Gets the status of this AddressValidationResult.


        :return: The status of this AddressValidationResult.
        :rtype: AddressValidationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AddressValidationResult.


        :param status: The status of this AddressValidationResult.
        :type status: AddressValidationStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
