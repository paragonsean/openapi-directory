# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.webhook_event import WebhookEvent
import re
from openapi_server import util


class Webhook(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event: WebhookEvent=None, url: str=None, webhook_id: str=None):
        """Webhook - a model defined in OpenAPI

        :param event: The event of this Webhook.
        :param url: The url of this Webhook.
        :param webhook_id: The webhook_id of this Webhook.
        """
        self.openapi_types = {
            'event': WebhookEvent,
            'url': str,
            'webhook_id': str
        }

        self.attribute_map = {
            'event': 'event',
            'url': 'url',
            'webhook_id': 'webhook_id'
        }

        self._event = event
        self._url = url
        self._webhook_id = webhook_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Webhook':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The webhook of this Webhook.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event(self):
        """Gets the event of this Webhook.


        :return: The event of this Webhook.
        :rtype: WebhookEvent
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this Webhook.


        :param event: The event of this Webhook.
        :type event: WebhookEvent
        """

        self._event = event

    @property
    def url(self):
        """Gets the url of this Webhook.

        The url that the webhook sends the request to

        :return: The url of this Webhook.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Webhook.

        The url that the webhook sends the request to

        :param url: The url of this Webhook.
        :type url: str
        """
        if url is not None and len(url) < 1:
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `1`")

        self._url = url

    @property
    def webhook_id(self):
        """Gets the webhook_id of this Webhook.

        A string that uniquely identifies the webhook

        :return: The webhook_id of this Webhook.
        :rtype: str
        """
        return self._webhook_id

    @webhook_id.setter
    def webhook_id(self, webhook_id):
        """Sets the webhook_id of this Webhook.

        A string that uniquely identifies the webhook

        :param webhook_id: The webhook_id of this Webhook.
        :type webhook_id: str
        """
        if webhook_id is not None and len(webhook_id) > 25:
            raise ValueError("Invalid value for `webhook_id`, length must be less than or equal to `25`")
        if webhook_id is not None and len(webhook_id) < 1:
            raise ValueError("Invalid value for `webhook_id`, length must be greater than or equal to `1`")
        if webhook_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', webhook_id):
            raise ValueError("Invalid value for `webhook_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._webhook_id = webhook_id
