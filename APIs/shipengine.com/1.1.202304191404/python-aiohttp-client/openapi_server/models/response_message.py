# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address_validation_code import AddressValidationCode
from openapi_server.models.address_validation_detail_code import AddressValidationDetailCode
from openapi_server.models.address_validation_message_type import AddressValidationMessageType
from openapi_server import util


class ResponseMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: AddressValidationCode=None, detail_code: AddressValidationDetailCode=None, message: str=None, type: AddressValidationMessageType=None):
        """ResponseMessage - a model defined in OpenAPI

        :param code: The code of this ResponseMessage.
        :param detail_code: The detail_code of this ResponseMessage.
        :param message: The message of this ResponseMessage.
        :param type: The type of this ResponseMessage.
        """
        self.openapi_types = {
            'code': AddressValidationCode,
            'detail_code': AddressValidationDetailCode,
            'message': str,
            'type': AddressValidationMessageType
        }

        self.attribute_map = {
            'code': 'code',
            'detail_code': 'detail_code',
            'message': 'message',
            'type': 'type'
        }

        self._code = code
        self._detail_code = detail_code
        self._message = message
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResponseMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The response_message of this ResponseMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ResponseMessage.


        :return: The code of this ResponseMessage.
        :rtype: AddressValidationCode
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ResponseMessage.


        :param code: The code of this ResponseMessage.
        :type code: AddressValidationCode
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def detail_code(self):
        """Gets the detail_code of this ResponseMessage.


        :return: The detail_code of this ResponseMessage.
        :rtype: AddressValidationDetailCode
        """
        return self._detail_code

    @detail_code.setter
    def detail_code(self, detail_code):
        """Sets the detail_code of this ResponseMessage.


        :param detail_code: The detail_code of this ResponseMessage.
        :type detail_code: AddressValidationDetailCode
        """
        if detail_code is None:
            raise ValueError("Invalid value for `detail_code`, must not be `None`")

        self._detail_code = detail_code

    @property
    def message(self):
        """Gets the message of this ResponseMessage.

        Message explaining the address validation error

        :return: The message of this ResponseMessage.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ResponseMessage.

        Message explaining the address validation error

        :param message: The message of this ResponseMessage.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")
        if message is not None and len(message) < 1:
            raise ValueError("Invalid value for `message`, length must be greater than or equal to `1`")

        self._message = message

    @property
    def type(self):
        """Gets the type of this ResponseMessage.


        :return: The type of this ResponseMessage.
        :rtype: AddressValidationMessageType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ResponseMessage.


        :param type: The type of this ResponseMessage.
        :type type: AddressValidationMessageType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
