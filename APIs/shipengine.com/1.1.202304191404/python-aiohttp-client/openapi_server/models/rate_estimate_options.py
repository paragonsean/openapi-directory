# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address_residential_indicator import AddressResidentialIndicator
from openapi_server.models.delivery_confirmation import DeliveryConfirmation
from openapi_server.models.dimensions import Dimensions
from openapi_server.models.weight import Weight
import re
from openapi_server import util


class RateEstimateOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_residential_indicator: AddressResidentialIndicator=None, confirmation: DeliveryConfirmation=None, dimensions: Dimensions=None, from_city_locality: str=None, from_country_code: str=None, from_postal_code: str=None, from_state_province: str=None, ship_date: datetime=None, to_city_locality: str=None, to_country_code: str=None, to_postal_code: str=None, to_state_province: str=None, weight: Weight=None):
        """RateEstimateOptions - a model defined in OpenAPI

        :param address_residential_indicator: The address_residential_indicator of this RateEstimateOptions.
        :param confirmation: The confirmation of this RateEstimateOptions.
        :param dimensions: The dimensions of this RateEstimateOptions.
        :param from_city_locality: The from_city_locality of this RateEstimateOptions.
        :param from_country_code: The from_country_code of this RateEstimateOptions.
        :param from_postal_code: The from_postal_code of this RateEstimateOptions.
        :param from_state_province: The from_state_province of this RateEstimateOptions.
        :param ship_date: The ship_date of this RateEstimateOptions.
        :param to_city_locality: The to_city_locality of this RateEstimateOptions.
        :param to_country_code: The to_country_code of this RateEstimateOptions.
        :param to_postal_code: The to_postal_code of this RateEstimateOptions.
        :param to_state_province: The to_state_province of this RateEstimateOptions.
        :param weight: The weight of this RateEstimateOptions.
        """
        self.openapi_types = {
            'address_residential_indicator': AddressResidentialIndicator,
            'confirmation': DeliveryConfirmation,
            'dimensions': Dimensions,
            'from_city_locality': str,
            'from_country_code': str,
            'from_postal_code': str,
            'from_state_province': str,
            'ship_date': datetime,
            'to_city_locality': str,
            'to_country_code': str,
            'to_postal_code': str,
            'to_state_province': str,
            'weight': Weight
        }

        self.attribute_map = {
            'address_residential_indicator': 'address_residential_indicator',
            'confirmation': 'confirmation',
            'dimensions': 'dimensions',
            'from_city_locality': 'from_city_locality',
            'from_country_code': 'from_country_code',
            'from_postal_code': 'from_postal_code',
            'from_state_province': 'from_state_province',
            'ship_date': 'ship_date',
            'to_city_locality': 'to_city_locality',
            'to_country_code': 'to_country_code',
            'to_postal_code': 'to_postal_code',
            'to_state_province': 'to_state_province',
            'weight': 'weight'
        }

        self._address_residential_indicator = address_residential_indicator
        self._confirmation = confirmation
        self._dimensions = dimensions
        self._from_city_locality = from_city_locality
        self._from_country_code = from_country_code
        self._from_postal_code = from_postal_code
        self._from_state_province = from_state_province
        self._ship_date = ship_date
        self._to_city_locality = to_city_locality
        self._to_country_code = to_country_code
        self._to_postal_code = to_postal_code
        self._to_state_province = to_state_province
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RateEstimateOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The rate_estimate_options of this RateEstimateOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_residential_indicator(self):
        """Gets the address_residential_indicator of this RateEstimateOptions.


        :return: The address_residential_indicator of this RateEstimateOptions.
        :rtype: AddressResidentialIndicator
        """
        return self._address_residential_indicator

    @address_residential_indicator.setter
    def address_residential_indicator(self, address_residential_indicator):
        """Sets the address_residential_indicator of this RateEstimateOptions.


        :param address_residential_indicator: The address_residential_indicator of this RateEstimateOptions.
        :type address_residential_indicator: AddressResidentialIndicator
        """

        self._address_residential_indicator = address_residential_indicator

    @property
    def confirmation(self):
        """Gets the confirmation of this RateEstimateOptions.


        :return: The confirmation of this RateEstimateOptions.
        :rtype: DeliveryConfirmation
        """
        return self._confirmation

    @confirmation.setter
    def confirmation(self, confirmation):
        """Sets the confirmation of this RateEstimateOptions.


        :param confirmation: The confirmation of this RateEstimateOptions.
        :type confirmation: DeliveryConfirmation
        """

        self._confirmation = confirmation

    @property
    def dimensions(self):
        """Gets the dimensions of this RateEstimateOptions.

        The dimensions of the package

        :return: The dimensions of this RateEstimateOptions.
        :rtype: Dimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this RateEstimateOptions.

        The dimensions of the package

        :param dimensions: The dimensions of this RateEstimateOptions.
        :type dimensions: Dimensions
        """

        self._dimensions = dimensions

    @property
    def from_city_locality(self):
        """Gets the from_city_locality of this RateEstimateOptions.

        from postal code

        :return: The from_city_locality of this RateEstimateOptions.
        :rtype: str
        """
        return self._from_city_locality

    @from_city_locality.setter
    def from_city_locality(self, from_city_locality):
        """Sets the from_city_locality of this RateEstimateOptions.

        from postal code

        :param from_city_locality: The from_city_locality of this RateEstimateOptions.
        :type from_city_locality: str
        """
        if from_city_locality is not None and len(from_city_locality) < 1:
            raise ValueError("Invalid value for `from_city_locality`, length must be greater than or equal to `1`")

        self._from_city_locality = from_city_locality

    @property
    def from_country_code(self):
        """Gets the from_country_code of this RateEstimateOptions.

        A two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) 

        :return: The from_country_code of this RateEstimateOptions.
        :rtype: str
        """
        return self._from_country_code

    @from_country_code.setter
    def from_country_code(self, from_country_code):
        """Sets the from_country_code of this RateEstimateOptions.

        A two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) 

        :param from_country_code: The from_country_code of this RateEstimateOptions.
        :type from_country_code: str
        """
        if from_country_code is not None and len(from_country_code) > 2:
            raise ValueError("Invalid value for `from_country_code`, length must be less than or equal to `2`")
        if from_country_code is not None and len(from_country_code) < 2:
            raise ValueError("Invalid value for `from_country_code`, length must be greater than or equal to `2`")

        self._from_country_code = from_country_code

    @property
    def from_postal_code(self):
        """Gets the from_postal_code of this RateEstimateOptions.

        postal code

        :return: The from_postal_code of this RateEstimateOptions.
        :rtype: str
        """
        return self._from_postal_code

    @from_postal_code.setter
    def from_postal_code(self, from_postal_code):
        """Sets the from_postal_code of this RateEstimateOptions.

        postal code

        :param from_postal_code: The from_postal_code of this RateEstimateOptions.
        :type from_postal_code: str
        """
        if from_postal_code is not None and len(from_postal_code) < 1:
            raise ValueError("Invalid value for `from_postal_code`, length must be greater than or equal to `1`")

        self._from_postal_code = from_postal_code

    @property
    def from_state_province(self):
        """Gets the from_state_province of this RateEstimateOptions.

        From state province

        :return: The from_state_province of this RateEstimateOptions.
        :rtype: str
        """
        return self._from_state_province

    @from_state_province.setter
    def from_state_province(self, from_state_province):
        """Sets the from_state_province of this RateEstimateOptions.

        From state province

        :param from_state_province: The from_state_province of this RateEstimateOptions.
        :type from_state_province: str
        """
        if from_state_province is not None and len(from_state_province) < 1:
            raise ValueError("Invalid value for `from_state_province`, length must be greater than or equal to `1`")

        self._from_state_province = from_state_province

    @property
    def ship_date(self):
        """Gets the ship_date of this RateEstimateOptions.

        ship date

        :return: The ship_date of this RateEstimateOptions.
        :rtype: datetime
        """
        return self._ship_date

    @ship_date.setter
    def ship_date(self, ship_date):
        """Sets the ship_date of this RateEstimateOptions.

        ship date

        :param ship_date: The ship_date of this RateEstimateOptions.
        :type ship_date: datetime
        """
        if ship_date is not None and not re.search(r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$', ship_date):
            raise ValueError("Invalid value for `ship_date`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$/`")

        self._ship_date = ship_date

    @property
    def to_city_locality(self):
        """Gets the to_city_locality of this RateEstimateOptions.

        The city locality the package is being shipped to

        :return: The to_city_locality of this RateEstimateOptions.
        :rtype: str
        """
        return self._to_city_locality

    @to_city_locality.setter
    def to_city_locality(self, to_city_locality):
        """Sets the to_city_locality of this RateEstimateOptions.

        The city locality the package is being shipped to

        :param to_city_locality: The to_city_locality of this RateEstimateOptions.
        :type to_city_locality: str
        """
        if to_city_locality is not None and len(to_city_locality) < 1:
            raise ValueError("Invalid value for `to_city_locality`, length must be greater than or equal to `1`")

        self._to_city_locality = to_city_locality

    @property
    def to_country_code(self):
        """Gets the to_country_code of this RateEstimateOptions.

        A two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) 

        :return: The to_country_code of this RateEstimateOptions.
        :rtype: str
        """
        return self._to_country_code

    @to_country_code.setter
    def to_country_code(self, to_country_code):
        """Sets the to_country_code of this RateEstimateOptions.

        A two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) 

        :param to_country_code: The to_country_code of this RateEstimateOptions.
        :type to_country_code: str
        """
        if to_country_code is not None and len(to_country_code) > 2:
            raise ValueError("Invalid value for `to_country_code`, length must be less than or equal to `2`")
        if to_country_code is not None and len(to_country_code) < 2:
            raise ValueError("Invalid value for `to_country_code`, length must be greater than or equal to `2`")

        self._to_country_code = to_country_code

    @property
    def to_postal_code(self):
        """Gets the to_postal_code of this RateEstimateOptions.

        postal code

        :return: The to_postal_code of this RateEstimateOptions.
        :rtype: str
        """
        return self._to_postal_code

    @to_postal_code.setter
    def to_postal_code(self, to_postal_code):
        """Sets the to_postal_code of this RateEstimateOptions.

        postal code

        :param to_postal_code: The to_postal_code of this RateEstimateOptions.
        :type to_postal_code: str
        """
        if to_postal_code is not None and len(to_postal_code) < 1:
            raise ValueError("Invalid value for `to_postal_code`, length must be greater than or equal to `1`")

        self._to_postal_code = to_postal_code

    @property
    def to_state_province(self):
        """Gets the to_state_province of this RateEstimateOptions.

        To state province

        :return: The to_state_province of this RateEstimateOptions.
        :rtype: str
        """
        return self._to_state_province

    @to_state_province.setter
    def to_state_province(self, to_state_province):
        """Sets the to_state_province of this RateEstimateOptions.

        To state province

        :param to_state_province: The to_state_province of this RateEstimateOptions.
        :type to_state_province: str
        """
        if to_state_province is not None and len(to_state_province) < 1:
            raise ValueError("Invalid value for `to_state_province`, length must be greater than or equal to `1`")

        self._to_state_province = to_state_province

    @property
    def weight(self):
        """Gets the weight of this RateEstimateOptions.

        The weight of the package

        :return: The weight of this RateEstimateOptions.
        :rtype: Weight
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this RateEstimateOptions.

        The weight of the package

        :param weight: The weight of this RateEstimateOptions.
        :type weight: Weight
        """

        self._weight = weight
