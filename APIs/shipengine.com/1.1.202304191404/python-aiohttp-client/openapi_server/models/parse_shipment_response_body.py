# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.partial_shipment import PartialShipment
from openapi_server.models.recognized_entity import RecognizedEntity
from openapi_server import util


class ParseShipmentResponseBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entities: List[RecognizedEntity]=None, score: float=None, shipment: PartialShipment=None):
        """ParseShipmentResponseBody - a model defined in OpenAPI

        :param entities: The entities of this ParseShipmentResponseBody.
        :param score: The score of this ParseShipmentResponseBody.
        :param shipment: The shipment of this ParseShipmentResponseBody.
        """
        self.openapi_types = {
            'entities': List[RecognizedEntity],
            'score': float,
            'shipment': PartialShipment
        }

        self.attribute_map = {
            'entities': 'entities',
            'score': 'score',
            'shipment': 'shipment'
        }

        self._entities = entities
        self._score = score
        self._shipment = shipment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParseShipmentResponseBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The parse_shipment_response_body of this ParseShipmentResponseBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entities(self):
        """Gets the entities of this ParseShipmentResponseBody.

        All of the entities that were recognized in the text. An \"entity\" is a single piece of data, such as a city, a postal code, a carrier name, or a package weight.  Each entity includes the original text and the parsed value. 

        :return: The entities of this ParseShipmentResponseBody.
        :rtype: List[RecognizedEntity]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this ParseShipmentResponseBody.

        All of the entities that were recognized in the text. An \"entity\" is a single piece of data, such as a city, a postal code, a carrier name, or a package weight.  Each entity includes the original text and the parsed value. 

        :param entities: The entities of this ParseShipmentResponseBody.
        :type entities: List[RecognizedEntity]
        """
        if entities is None:
            raise ValueError("Invalid value for `entities`, must not be `None`")
        if entities is not None and len(entities) < 0:
            raise ValueError("Invalid value for `entities`, number of items must be greater than or equal to `0`")

        self._entities = entities

    @property
    def score(self):
        """Gets the score of this ParseShipmentResponseBody.

        A confidence score between zero and one that indicates how certain the API is that it understood the text. 

        :return: The score of this ParseShipmentResponseBody.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ParseShipmentResponseBody.

        A confidence score between zero and one that indicates how certain the API is that it understood the text. 

        :param score: The score of this ParseShipmentResponseBody.
        :type score: float
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")
        if score is not None and score > 1:
            raise ValueError("Invalid value for `score`, must be a value less than or equal to `1`")
        if score is not None and score < 0:
            raise ValueError("Invalid value for `score`, must be a value greater than or equal to `0`")

        self._score = score

    @property
    def shipment(self):
        """Gets the shipment of this ParseShipmentResponseBody.

        The parsed shipment.  This shipment may not be complete, depending on how much information was included in the text and how confident the API is about each recognized entity.  > **Note:** The shipment-recognition API does not currently perform any validation of the parsed addresses, so we recommend that you use the [address-validation API](https://www.shipengine.com/docs/addresses/validation/) to ensure that the addresses are correct. 

        :return: The shipment of this ParseShipmentResponseBody.
        :rtype: PartialShipment
        """
        return self._shipment

    @shipment.setter
    def shipment(self, shipment):
        """Sets the shipment of this ParseShipmentResponseBody.

        The parsed shipment.  This shipment may not be complete, depending on how much information was included in the text and how confident the API is about each recognized entity.  > **Note:** The shipment-recognition API does not currently perform any validation of the parsed addresses, so we recommend that you use the [address-validation API](https://www.shipengine.com/docs/addresses/validation/) to ensure that the addresses are correct. 

        :param shipment: The shipment of this ParseShipmentResponseBody.
        :type shipment: PartialShipment
        """
        if shipment is None:
            raise ValueError("Invalid value for `shipment`, must not be `None`")

        self._shipment = shipment
