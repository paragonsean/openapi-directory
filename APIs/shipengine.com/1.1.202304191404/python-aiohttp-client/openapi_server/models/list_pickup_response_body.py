# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pagination_link import PaginationLink
from openapi_server.models.pickup import Pickup
from openapi_server import util


class ListPickupResponseBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: PaginationLink=None, page: int=None, pages: int=None, pickups: List[Pickup]=None, total: int=None):
        """ListPickupResponseBody - a model defined in OpenAPI

        :param links: The links of this ListPickupResponseBody.
        :param page: The page of this ListPickupResponseBody.
        :param pages: The pages of this ListPickupResponseBody.
        :param pickups: The pickups of this ListPickupResponseBody.
        :param total: The total of this ListPickupResponseBody.
        """
        self.openapi_types = {
            'links': PaginationLink,
            'page': int,
            'pages': int,
            'pickups': List[Pickup],
            'total': int
        }

        self.attribute_map = {
            'links': 'links',
            'page': 'page',
            'pages': 'pages',
            'pickups': 'pickups',
            'total': 'total'
        }

        self._links = links
        self._page = page
        self._pages = pages
        self._pickups = pickups
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListPickupResponseBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The list_pickup_response_body of this ListPickupResponseBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this ListPickupResponseBody.

        Helpful links to other pages of results

        :return: The links of this ListPickupResponseBody.
        :rtype: PaginationLink
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ListPickupResponseBody.

        Helpful links to other pages of results

        :param links: The links of this ListPickupResponseBody.
        :type links: PaginationLink
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def page(self):
        """Gets the page of this ListPickupResponseBody.

        Current page of the list pickups results

        :return: The page of this ListPickupResponseBody.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this ListPickupResponseBody.

        Current page of the list pickups results

        :param page: The page of this ListPickupResponseBody.
        :type page: int
        """
        if page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")
        if page is not None and page < 1:
            raise ValueError("Invalid value for `page`, must be a value greater than or equal to `1`")

        self._page = page

    @property
    def pages(self):
        """Gets the pages of this ListPickupResponseBody.

        Total number of pages for list pickups results

        :return: The pages of this ListPickupResponseBody.
        :rtype: int
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this ListPickupResponseBody.

        Total number of pages for list pickups results

        :param pages: The pages of this ListPickupResponseBody.
        :type pages: int
        """
        if pages is None:
            raise ValueError("Invalid value for `pages`, must not be `None`")
        if pages is not None and pages < 1:
            raise ValueError("Invalid value for `pages`, must be a value greater than or equal to `1`")

        self._pages = pages

    @property
    def pickups(self):
        """Gets the pickups of this ListPickupResponseBody.

        An array of pickups associated with the user's account.

        :return: The pickups of this ListPickupResponseBody.
        :rtype: List[Pickup]
        """
        return self._pickups

    @pickups.setter
    def pickups(self, pickups):
        """Sets the pickups of this ListPickupResponseBody.

        An array of pickups associated with the user's account.

        :param pickups: The pickups of this ListPickupResponseBody.
        :type pickups: List[Pickup]
        """
        if pickups is None:
            raise ValueError("Invalid value for `pickups`, must not be `None`")

        self._pickups = pickups

    @property
    def total(self):
        """Gets the total of this ListPickupResponseBody.

        The total number of pickups returned

        :return: The total of this ListPickupResponseBody.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ListPickupResponseBody.

        The total number of pickups returned

        :param total: The total of this ListPickupResponseBody.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")
        if total is not None and total < 0:
            raise ValueError("Invalid value for `total`, must be a value greater than or equal to `0`")

        self._total = total
