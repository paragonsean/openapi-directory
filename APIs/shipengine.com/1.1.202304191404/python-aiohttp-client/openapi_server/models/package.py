# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimensions import Dimensions
from openapi_server.models.label_download import LabelDownload
from openapi_server.models.label_messages import LabelMessages
from openapi_server.models.monetary_value import MonetaryValue
from openapi_server.models.optional_link import OptionalLink
from openapi_server.models.weight import Weight
import re
from openapi_server import util


class Package(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_description: str=None, dimensions: Dimensions=None, external_package_id: str=None, form_download: OptionalLink=None, insured_value: MonetaryValue=None, label_download: LabelDownload=None, label_messages: LabelMessages=None, package_code: str=None, package_id: str=None, sequence: int=None, tracking_number: str=None, weight: Weight=None):
        """Package - a model defined in OpenAPI

        :param content_description: The content_description of this Package.
        :param dimensions: The dimensions of this Package.
        :param external_package_id: The external_package_id of this Package.
        :param form_download: The form_download of this Package.
        :param insured_value: The insured_value of this Package.
        :param label_download: The label_download of this Package.
        :param label_messages: The label_messages of this Package.
        :param package_code: The package_code of this Package.
        :param package_id: The package_id of this Package.
        :param sequence: The sequence of this Package.
        :param tracking_number: The tracking_number of this Package.
        :param weight: The weight of this Package.
        """
        self.openapi_types = {
            'content_description': str,
            'dimensions': Dimensions,
            'external_package_id': str,
            'form_download': OptionalLink,
            'insured_value': MonetaryValue,
            'label_download': LabelDownload,
            'label_messages': LabelMessages,
            'package_code': str,
            'package_id': str,
            'sequence': int,
            'tracking_number': str,
            'weight': Weight
        }

        self.attribute_map = {
            'content_description': 'content_description',
            'dimensions': 'dimensions',
            'external_package_id': 'external_package_id',
            'form_download': 'form_download',
            'insured_value': 'insured_value',
            'label_download': 'label_download',
            'label_messages': 'label_messages',
            'package_code': 'package_code',
            'package_id': 'package_id',
            'sequence': 'sequence',
            'tracking_number': 'tracking_number',
            'weight': 'weight'
        }

        self._content_description = content_description
        self._dimensions = dimensions
        self._external_package_id = external_package_id
        self._form_download = form_download
        self._insured_value = insured_value
        self._label_download = label_download
        self._label_messages = label_messages
        self._package_code = package_code
        self._package_id = package_id
        self._sequence = sequence
        self._tracking_number = tracking_number
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Package':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The package of this Package.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_description(self):
        """Gets the content_description of this Package.

        A short description of the package content. Required for shipments moving to, from, and through Mexico. 

        :return: The content_description of this Package.
        :rtype: str
        """
        return self._content_description

    @content_description.setter
    def content_description(self, content_description):
        """Sets the content_description of this Package.

        A short description of the package content. Required for shipments moving to, from, and through Mexico. 

        :param content_description: The content_description of this Package.
        :type content_description: str
        """
        if content_description is not None and len(content_description) > 35:
            raise ValueError("Invalid value for `content_description`, length must be less than or equal to `35`")
        if content_description is not None and len(content_description) < 1:
            raise ValueError("Invalid value for `content_description`, length must be greater than or equal to `1`")

        self._content_description = content_description

    @property
    def dimensions(self):
        """Gets the dimensions of this Package.

        The package dimensions

        :return: The dimensions of this Package.
        :rtype: Dimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this Package.

        The package dimensions

        :param dimensions: The dimensions of this Package.
        :type dimensions: Dimensions
        """

        self._dimensions = dimensions

    @property
    def external_package_id(self):
        """Gets the external_package_id of this Package.

        An external package id.

        :return: The external_package_id of this Package.
        :rtype: str
        """
        return self._external_package_id

    @external_package_id.setter
    def external_package_id(self, external_package_id):
        """Sets the external_package_id of this Package.

        An external package id.

        :param external_package_id: The external_package_id of this Package.
        :type external_package_id: str
        """
        if external_package_id is not None and len(external_package_id) < 1:
            raise ValueError("Invalid value for `external_package_id`, length must be greater than or equal to `1`")

        self._external_package_id = external_package_id

    @property
    def form_download(self):
        """Gets the form_download of this Package.

        The form download for any customs that are needed

        :return: The form_download of this Package.
        :rtype: OptionalLink
        """
        return self._form_download

    @form_download.setter
    def form_download(self, form_download):
        """Sets the form_download of this Package.

        The form download for any customs that are needed

        :param form_download: The form_download of this Package.
        :type form_download: OptionalLink
        """

        self._form_download = form_download

    @property
    def insured_value(self):
        """Gets the insured_value of this Package.

        The insured value of the package.  Requires the `insurance_provider` field of the shipment to be set. 

        :return: The insured_value of this Package.
        :rtype: MonetaryValue
        """
        return self._insured_value

    @insured_value.setter
    def insured_value(self, insured_value):
        """Sets the insured_value of this Package.

        The insured value of the package.  Requires the `insurance_provider` field of the shipment to be set. 

        :param insured_value: The insured_value of this Package.
        :type insured_value: MonetaryValue
        """

        self._insured_value = insured_value

    @property
    def label_download(self):
        """Gets the label_download of this Package.

        The label download for the package

        :return: The label_download of this Package.
        :rtype: LabelDownload
        """
        return self._label_download

    @label_download.setter
    def label_download(self, label_download):
        """Sets the label_download of this Package.

        The label download for the package

        :param label_download: The label_download of this Package.
        :type label_download: LabelDownload
        """

        self._label_download = label_download

    @property
    def label_messages(self):
        """Gets the label_messages of this Package.


        :return: The label_messages of this Package.
        :rtype: LabelMessages
        """
        return self._label_messages

    @label_messages.setter
    def label_messages(self, label_messages):
        """Sets the label_messages of this Package.


        :param label_messages: The label_messages of this Package.
        :type label_messages: LabelMessages
        """

        self._label_messages = label_messages

    @property
    def package_code(self):
        """Gets the package_code of this Package.

        The [package type](https://www.shipengine.com/docs/reference/list-carrier-packages/), such as `thick_envelope`, `small_flat_rate_box`, `large_package`, etc.  The code `package` indicates a custom or unknown package type. 

        :return: The package_code of this Package.
        :rtype: str
        """
        return self._package_code

    @package_code.setter
    def package_code(self, package_code):
        """Sets the package_code of this Package.

        The [package type](https://www.shipengine.com/docs/reference/list-carrier-packages/), such as `thick_envelope`, `small_flat_rate_box`, `large_package`, etc.  The code `package` indicates a custom or unknown package type. 

        :param package_code: The package_code of this Package.
        :type package_code: str
        """
        if package_code is not None and not re.search(r'^[a-z0-9]+(_[a-z0-9]+)*$', package_code):
            raise ValueError("Invalid value for `package_code`, must be a follow pattern or equal to `/^[a-z0-9]+(_[a-z0-9]+)*$/`")

        self._package_code = package_code

    @property
    def package_id(self):
        """Gets the package_id of this Package.

        A string that uniquely identifies this [package type](https://www.shipengine.com/docs/reference/list-carrier-packages/)

        :return: The package_id of this Package.
        :rtype: str
        """
        return self._package_id

    @package_id.setter
    def package_id(self, package_id):
        """Sets the package_id of this Package.

        A string that uniquely identifies this [package type](https://www.shipengine.com/docs/reference/list-carrier-packages/)

        :param package_id: The package_id of this Package.
        :type package_id: str
        """
        if package_id is not None and len(package_id) > 25:
            raise ValueError("Invalid value for `package_id`, length must be less than or equal to `25`")
        if package_id is not None and len(package_id) < 1:
            raise ValueError("Invalid value for `package_id`, length must be greater than or equal to `1`")
        if package_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', package_id):
            raise ValueError("Invalid value for `package_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._package_id = package_id

    @property
    def sequence(self):
        """Gets the sequence of this Package.

        Package sequence

        :return: The sequence of this Package.
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this Package.

        Package sequence

        :param sequence: The sequence of this Package.
        :type sequence: int
        """

        self._sequence = sequence

    @property
    def tracking_number(self):
        """Gets the tracking_number of this Package.

        The tracking number for the package.  The format depends on the carrier. 

        :return: The tracking_number of this Package.
        :rtype: str
        """
        return self._tracking_number

    @tracking_number.setter
    def tracking_number(self, tracking_number):
        """Sets the tracking_number of this Package.

        The tracking number for the package.  The format depends on the carrier. 

        :param tracking_number: The tracking_number of this Package.
        :type tracking_number: str
        """
        if tracking_number is not None and len(tracking_number) < 1:
            raise ValueError("Invalid value for `tracking_number`, length must be greater than or equal to `1`")

        self._tracking_number = tracking_number

    @property
    def weight(self):
        """Gets the weight of this Package.

        The package weight

        :return: The weight of this Package.
        :rtype: Weight
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Package.

        The package weight

        :param weight: The weight of this Package.
        :type weight: Weight
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")

        self._weight = weight
