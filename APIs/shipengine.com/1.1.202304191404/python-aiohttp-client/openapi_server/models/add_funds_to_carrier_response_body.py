# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.monetary_value import MonetaryValue
from openapi_server import util


class AddFundsToCarrierResponseBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance: MonetaryValue=None):
        """AddFundsToCarrierResponseBody - a model defined in OpenAPI

        :param balance: The balance of this AddFundsToCarrierResponseBody.
        """
        self.openapi_types = {
            'balance': MonetaryValue
        }

        self.attribute_map = {
            'balance': 'balance'
        }

        self._balance = balance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddFundsToCarrierResponseBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The add_funds_to_carrier_response_body of this AddFundsToCarrierResponseBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance(self):
        """Gets the balance of this AddFundsToCarrierResponseBody.

        The current balance of the account

        :return: The balance of this AddFundsToCarrierResponseBody.
        :rtype: MonetaryValue
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this AddFundsToCarrierResponseBody.

        The current balance of the account

        :param balance: The balance of this AddFundsToCarrierResponseBody.
        :type balance: MonetaryValue
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")

        self._balance = balance
