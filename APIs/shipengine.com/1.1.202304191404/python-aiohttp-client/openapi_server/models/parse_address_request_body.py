# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.partial_address import PartialAddress
from openapi_server import util


class ParseAddressRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: PartialAddress=None, text: str=None):
        """ParseAddressRequestBody - a model defined in OpenAPI

        :param address: The address of this ParseAddressRequestBody.
        :param text: The text of this ParseAddressRequestBody.
        """
        self.openapi_types = {
            'address': PartialAddress,
            'text': str
        }

        self.attribute_map = {
            'address': 'address',
            'text': 'text'
        }

        self._address = address
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParseAddressRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The parse_address_request_body of this ParseAddressRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this ParseAddressRequestBody.

        You can optionally provide any already-known address values. For example, you may already know the recipient's name, city, and country, and only want to parse the street address into separate lines. 

        :return: The address of this ParseAddressRequestBody.
        :rtype: PartialAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ParseAddressRequestBody.

        You can optionally provide any already-known address values. For example, you may already know the recipient's name, city, and country, and only want to parse the street address into separate lines. 

        :param address: The address of this ParseAddressRequestBody.
        :type address: PartialAddress
        """

        self._address = address

    @property
    def text(self):
        """Gets the text of this ParseAddressRequestBody.

        The unstructured text that contains address-related entities

        :return: The text of this ParseAddressRequestBody.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ParseAddressRequestBody.

        The unstructured text that contains address-related entities

        :param text: The text of this ParseAddressRequestBody.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")
        if text is not None and len(text) < 1:
            raise ValueError("Invalid value for `text`, length must be greater than or equal to `1`")

        self._text = text
