# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.carrier import Carrier
from openapi_server import util


class ListCarriersResponseBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, carriers: List[Carrier]=None):
        """ListCarriersResponseBody - a model defined in OpenAPI

        :param carriers: The carriers of this ListCarriersResponseBody.
        """
        self.openapi_types = {
            'carriers': List[Carrier]
        }

        self.attribute_map = {
            'carriers': 'carriers'
        }

        self._carriers = carriers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListCarriersResponseBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The list_carriers_response_body of this ListCarriersResponseBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def carriers(self):
        """Gets the carriers of this ListCarriersResponseBody.

        The carrier response body

        :return: The carriers of this ListCarriersResponseBody.
        :rtype: List[Carrier]
        """
        return self._carriers

    @carriers.setter
    def carriers(self, carriers):
        """Sets the carriers of this ListCarriersResponseBody.

        The carrier response body

        :param carriers: The carriers of this ListCarriersResponseBody.
        :type carriers: List[Carrier]
        """
        if carriers is None:
            raise ValueError("Invalid value for `carriers`, must not be `None`")

        self._carriers = carriers
