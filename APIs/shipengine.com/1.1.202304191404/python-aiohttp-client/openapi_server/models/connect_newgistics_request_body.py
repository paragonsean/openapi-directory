# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectNewgisticsRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, induction_site: str=None, mailer_id: int=None, merchant_id: int=None, nickname: str=None):
        """ConnectNewgisticsRequestBody - a model defined in OpenAPI

        :param induction_site: The induction_site of this ConnectNewgisticsRequestBody.
        :param mailer_id: The mailer_id of this ConnectNewgisticsRequestBody.
        :param merchant_id: The merchant_id of this ConnectNewgisticsRequestBody.
        :param nickname: The nickname of this ConnectNewgisticsRequestBody.
        """
        self.openapi_types = {
            'induction_site': str,
            'mailer_id': int,
            'merchant_id': int,
            'nickname': str
        }

        self.attribute_map = {
            'induction_site': 'induction_site',
            'mailer_id': 'mailer_id',
            'merchant_id': 'merchant_id',
            'nickname': 'nickname'
        }

        self._induction_site = induction_site
        self._mailer_id = mailer_id
        self._merchant_id = merchant_id
        self._nickname = nickname

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectNewgisticsRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The connect_newgistics_request_body of this ConnectNewgisticsRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def induction_site(self):
        """Gets the induction_site of this ConnectNewgisticsRequestBody.

        Induction site

        :return: The induction_site of this ConnectNewgisticsRequestBody.
        :rtype: str
        """
        return self._induction_site

    @induction_site.setter
    def induction_site(self, induction_site):
        """Sets the induction_site of this ConnectNewgisticsRequestBody.

        Induction site

        :param induction_site: The induction_site of this ConnectNewgisticsRequestBody.
        :type induction_site: str
        """
        if induction_site is None:
            raise ValueError("Invalid value for `induction_site`, must not be `None`")
        if induction_site is not None and len(induction_site) < 1:
            raise ValueError("Invalid value for `induction_site`, length must be greater than or equal to `1`")

        self._induction_site = induction_site

    @property
    def mailer_id(self):
        """Gets the mailer_id of this ConnectNewgisticsRequestBody.

        Mailer id

        :return: The mailer_id of this ConnectNewgisticsRequestBody.
        :rtype: int
        """
        return self._mailer_id

    @mailer_id.setter
    def mailer_id(self, mailer_id):
        """Sets the mailer_id of this ConnectNewgisticsRequestBody.

        Mailer id

        :param mailer_id: The mailer_id of this ConnectNewgisticsRequestBody.
        :type mailer_id: int
        """
        if mailer_id is not None and mailer_id < 0:
            raise ValueError("Invalid value for `mailer_id`, must be a value greater than or equal to `0`")

        self._mailer_id = mailer_id

    @property
    def merchant_id(self):
        """Gets the merchant_id of this ConnectNewgisticsRequestBody.

        Merchant id

        :return: The merchant_id of this ConnectNewgisticsRequestBody.
        :rtype: int
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this ConnectNewgisticsRequestBody.

        Merchant id

        :param merchant_id: The merchant_id of this ConnectNewgisticsRequestBody.
        :type merchant_id: int
        """
        if merchant_id is not None and merchant_id < 0:
            raise ValueError("Invalid value for `merchant_id`, must be a value greater than or equal to `0`")

        self._merchant_id = merchant_id

    @property
    def nickname(self):
        """Gets the nickname of this ConnectNewgisticsRequestBody.

        Nickname

        :return: The nickname of this ConnectNewgisticsRequestBody.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this ConnectNewgisticsRequestBody.

        Nickname

        :param nickname: The nickname of this ConnectNewgisticsRequestBody.
        :type nickname: str
        """
        if nickname is None:
            raise ValueError("Invalid value for `nickname`, must not be `None`")
        if nickname is not None and len(nickname) < 1:
            raise ValueError("Invalid value for `nickname`, length must be greater than or equal to `1`")

        self._nickname = nickname
