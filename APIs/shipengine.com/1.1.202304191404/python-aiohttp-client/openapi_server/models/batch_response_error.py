# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class BatchResponseError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error: str=None, external_shipment_id: str=None, shipment_id: str=None):
        """BatchResponseError - a model defined in OpenAPI

        :param error: The error of this BatchResponseError.
        :param external_shipment_id: The external_shipment_id of this BatchResponseError.
        :param shipment_id: The shipment_id of this BatchResponseError.
        """
        self.openapi_types = {
            'error': str,
            'external_shipment_id': str,
            'shipment_id': str
        }

        self.attribute_map = {
            'error': 'error',
            'external_shipment_id': 'external_shipment_id',
            'shipment_id': 'shipment_id'
        }

        self._error = error
        self._external_shipment_id = external_shipment_id
        self._shipment_id = shipment_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchResponseError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The batch_response_error of this BatchResponseError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this BatchResponseError.

        Error message associated with the shipment.

        :return: The error of this BatchResponseError.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this BatchResponseError.

        Error message associated with the shipment.

        :param error: The error of this BatchResponseError.
        :type error: str
        """
        if error is not None and len(error) < 1:
            raise ValueError("Invalid value for `error`, length must be greater than or equal to `1`")

        self._error = error

    @property
    def external_shipment_id(self):
        """Gets the external_shipment_id of this BatchResponseError.

        An external shipment id associated with the shipment

        :return: The external_shipment_id of this BatchResponseError.
        :rtype: str
        """
        return self._external_shipment_id

    @external_shipment_id.setter
    def external_shipment_id(self, external_shipment_id):
        """Sets the external_shipment_id of this BatchResponseError.

        An external shipment id associated with the shipment

        :param external_shipment_id: The external_shipment_id of this BatchResponseError.
        :type external_shipment_id: str
        """

        self._external_shipment_id = external_shipment_id

    @property
    def shipment_id(self):
        """Gets the shipment_id of this BatchResponseError.

        A string that uniquely identifies the shipment

        :return: The shipment_id of this BatchResponseError.
        :rtype: str
        """
        return self._shipment_id

    @shipment_id.setter
    def shipment_id(self, shipment_id):
        """Sets the shipment_id of this BatchResponseError.

        A string that uniquely identifies the shipment

        :param shipment_id: The shipment_id of this BatchResponseError.
        :type shipment_id: str
        """
        if shipment_id is not None and len(shipment_id) > 25:
            raise ValueError("Invalid value for `shipment_id`, length must be less than or equal to `25`")
        if shipment_id is not None and len(shipment_id) < 1:
            raise ValueError("Invalid value for `shipment_id`, length must be greater than or equal to `1`")
        if shipment_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', shipment_id):
            raise ValueError("Invalid value for `shipment_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._shipment_id = shipment_id
