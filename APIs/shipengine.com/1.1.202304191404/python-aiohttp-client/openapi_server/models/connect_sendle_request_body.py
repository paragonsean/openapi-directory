# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ConnectSendleRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_key: str=None, nickname: str=None, sendle_id: str=None):
        """ConnectSendleRequestBody - a model defined in OpenAPI

        :param api_key: The api_key of this ConnectSendleRequestBody.
        :param nickname: The nickname of this ConnectSendleRequestBody.
        :param sendle_id: The sendle_id of this ConnectSendleRequestBody.
        """
        self.openapi_types = {
            'api_key': str,
            'nickname': str,
            'sendle_id': str
        }

        self.attribute_map = {
            'api_key': 'api_key',
            'nickname': 'nickname',
            'sendle_id': 'sendle_id'
        }

        self._api_key = api_key
        self._nickname = nickname
        self._sendle_id = sendle_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectSendleRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The connect_sendle_request_body of this ConnectSendleRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_key(self):
        """Gets the api_key of this ConnectSendleRequestBody.

        API key

        :return: The api_key of this ConnectSendleRequestBody.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this ConnectSendleRequestBody.

        API key

        :param api_key: The api_key of this ConnectSendleRequestBody.
        :type api_key: str
        """
        if api_key is None:
            raise ValueError("Invalid value for `api_key`, must not be `None`")
        if api_key is not None and len(api_key) < 1:
            raise ValueError("Invalid value for `api_key`, length must be greater than or equal to `1`")

        self._api_key = api_key

    @property
    def nickname(self):
        """Gets the nickname of this ConnectSendleRequestBody.

        Nickname

        :return: The nickname of this ConnectSendleRequestBody.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this ConnectSendleRequestBody.

        Nickname

        :param nickname: The nickname of this ConnectSendleRequestBody.
        :type nickname: str
        """
        if nickname is None:
            raise ValueError("Invalid value for `nickname`, must not be `None`")
        if nickname is not None and len(nickname) < 1:
            raise ValueError("Invalid value for `nickname`, length must be greater than or equal to `1`")

        self._nickname = nickname

    @property
    def sendle_id(self):
        """Gets the sendle_id of this ConnectSendleRequestBody.

        A string that uniquely identifies the sendle

        :return: The sendle_id of this ConnectSendleRequestBody.
        :rtype: str
        """
        return self._sendle_id

    @sendle_id.setter
    def sendle_id(self, sendle_id):
        """Sets the sendle_id of this ConnectSendleRequestBody.

        A string that uniquely identifies the sendle

        :param sendle_id: The sendle_id of this ConnectSendleRequestBody.
        :type sendle_id: str
        """
        if sendle_id is None:
            raise ValueError("Invalid value for `sendle_id`, must not be `None`")
        if sendle_id is not None and len(sendle_id) > 25:
            raise ValueError("Invalid value for `sendle_id`, length must be less than or equal to `25`")
        if sendle_id is not None and len(sendle_id) < 1:
            raise ValueError("Invalid value for `sendle_id`, length must be greater than or equal to `1`")
        if sendle_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', sendle_id):
            raise ValueError("Invalid value for `sendle_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._sendle_id = sendle_id
