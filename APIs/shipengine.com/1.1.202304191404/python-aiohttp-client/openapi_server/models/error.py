# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_code import ErrorCode
from openapi_server.models.error_source import ErrorSource
from openapi_server.models.error_type import ErrorType
from openapi_server import util


class Error(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_code: ErrorCode=None, error_source: ErrorSource=None, error_type: ErrorType=None, message: str=None):
        """Error - a model defined in OpenAPI

        :param error_code: The error_code of this Error.
        :param error_source: The error_source of this Error.
        :param error_type: The error_type of this Error.
        :param message: The message of this Error.
        """
        self.openapi_types = {
            'error_code': ErrorCode,
            'error_source': ErrorSource,
            'error_type': ErrorType,
            'message': str
        }

        self.attribute_map = {
            'error_code': 'error_code',
            'error_source': 'error_source',
            'error_type': 'error_type',
            'message': 'message'
        }

        self._error_code = error_code
        self._error_source = error_source
        self._error_type = error_type
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The error of this Error.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_code(self):
        """Gets the error_code of this Error.


        :return: The error_code of this Error.
        :rtype: ErrorCode
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this Error.


        :param error_code: The error_code of this Error.
        :type error_code: ErrorCode
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")

        self._error_code = error_code

    @property
    def error_source(self):
        """Gets the error_source of this Error.


        :return: The error_source of this Error.
        :rtype: ErrorSource
        """
        return self._error_source

    @error_source.setter
    def error_source(self, error_source):
        """Sets the error_source of this Error.


        :param error_source: The error_source of this Error.
        :type error_source: ErrorSource
        """
        if error_source is None:
            raise ValueError("Invalid value for `error_source`, must not be `None`")

        self._error_source = error_source

    @property
    def error_type(self):
        """Gets the error_type of this Error.


        :return: The error_type of this Error.
        :rtype: ErrorType
        """
        return self._error_type

    @error_type.setter
    def error_type(self, error_type):
        """Sets the error_type of this Error.


        :param error_type: The error_type of this Error.
        :type error_type: ErrorType
        """
        if error_type is None:
            raise ValueError("Invalid value for `error_type`, must not be `None`")

        self._error_type = error_type

    @property
    def message(self):
        """Gets the message of this Error.

        An error message associated with the failed API call

        :return: The message of this Error.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Error.

        An error message associated with the failed API call

        :param message: The message of this Error.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")
        if message is not None and len(message) < 1:
            raise ValueError("Invalid value for `message`, length must be greater than or equal to `1`")

        self._message = message
