# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.link import Link
from openapi_server.models.optional_link import OptionalLink
from openapi_server import util


class PaginationLink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first: Link=None, last: Link=None, next: OptionalLink=None, prev: OptionalLink=None):
        """PaginationLink - a model defined in OpenAPI

        :param first: The first of this PaginationLink.
        :param last: The last of this PaginationLink.
        :param next: The next of this PaginationLink.
        :param prev: The prev of this PaginationLink.
        """
        self.openapi_types = {
            'first': Link,
            'last': Link,
            'next': OptionalLink,
            'prev': OptionalLink
        }

        self.attribute_map = {
            'first': 'first',
            'last': 'last',
            'next': 'next',
            'prev': 'prev'
        }

        self._first = first
        self._last = last
        self._next = next
        self._prev = prev

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaginationLink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The pagination_link of this PaginationLink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first(self):
        """Gets the first of this PaginationLink.

        The link to the first page of results.  This object will _always_ have an `href` field. If there are no results, then the first page will contain an empty array of items. 

        :return: The first of this PaginationLink.
        :rtype: Link
        """
        return self._first

    @first.setter
    def first(self, first):
        """Sets the first of this PaginationLink.

        The link to the first page of results.  This object will _always_ have an `href` field. If there are no results, then the first page will contain an empty array of items. 

        :param first: The first of this PaginationLink.
        :type first: Link
        """
        if first is None:
            raise ValueError("Invalid value for `first`, must not be `None`")

        self._first = first

    @property
    def last(self):
        """Gets the last of this PaginationLink.

        The link to the final page of results.  This object will _always_ have an `href` field. If there are no results, then the final page will contain an empty array of items. 

        :return: The last of this PaginationLink.
        :rtype: Link
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this PaginationLink.

        The link to the final page of results.  This object will _always_ have an `href` field. If there are no results, then the final page will contain an empty array of items. 

        :param last: The last of this PaginationLink.
        :type last: Link
        """
        if last is None:
            raise ValueError("Invalid value for `last`, must not be `None`")

        self._last = last

    @property
    def next(self):
        """Gets the next of this PaginationLink.

        The link to the next page of results.  The `href` field will only be set when the `page` is less than `pages`. 

        :return: The next of this PaginationLink.
        :rtype: OptionalLink
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this PaginationLink.

        The link to the next page of results.  The `href` field will only be set when the `page` is less than `pages`. 

        :param next: The next of this PaginationLink.
        :type next: OptionalLink
        """
        if next is None:
            raise ValueError("Invalid value for `next`, must not be `None`")

        self._next = next

    @property
    def prev(self):
        """Gets the prev of this PaginationLink.

        The link to the previous page of results.  The `href` field will only be set when the `page` is 2 or greater. 

        :return: The prev of this PaginationLink.
        :rtype: OptionalLink
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this PaginationLink.

        The link to the previous page of results.  The `href` field will only be set when the `page` is 2 or greater. 

        :param prev: The prev of this PaginationLink.
        :type prev: OptionalLink
        """
        if prev is None:
            raise ValueError("Invalid value for `prev`, must not be `None`")

        self._prev = prev
