# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.monetary_value import MonetaryValue
from openapi_server.models.weight import Weight
import re
from openapi_server import util


class CustomsItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_of_origin: str=None, customs_item_id: str=None, description: str=None, harmonized_tariff_code: str=None, quantity: int=0, sku: str=None, sku_description: str=None, unit_of_measure: str=None, value: MonetaryValue=None, weight: Weight=None):
        """CustomsItem - a model defined in OpenAPI

        :param country_of_origin: The country_of_origin of this CustomsItem.
        :param customs_item_id: The customs_item_id of this CustomsItem.
        :param description: The description of this CustomsItem.
        :param harmonized_tariff_code: The harmonized_tariff_code of this CustomsItem.
        :param quantity: The quantity of this CustomsItem.
        :param sku: The sku of this CustomsItem.
        :param sku_description: The sku_description of this CustomsItem.
        :param unit_of_measure: The unit_of_measure of this CustomsItem.
        :param value: The value of this CustomsItem.
        :param weight: The weight of this CustomsItem.
        """
        self.openapi_types = {
            'country_of_origin': str,
            'customs_item_id': str,
            'description': str,
            'harmonized_tariff_code': str,
            'quantity': int,
            'sku': str,
            'sku_description': str,
            'unit_of_measure': str,
            'value': MonetaryValue,
            'weight': Weight
        }

        self.attribute_map = {
            'country_of_origin': 'country_of_origin',
            'customs_item_id': 'customs_item_id',
            'description': 'description',
            'harmonized_tariff_code': 'harmonized_tariff_code',
            'quantity': 'quantity',
            'sku': 'sku',
            'sku_description': 'sku_description',
            'unit_of_measure': 'unit_of_measure',
            'value': 'value',
            'weight': 'weight'
        }

        self._country_of_origin = country_of_origin
        self._customs_item_id = customs_item_id
        self._description = description
        self._harmonized_tariff_code = harmonized_tariff_code
        self._quantity = quantity
        self._sku = sku
        self._sku_description = sku_description
        self._unit_of_measure = unit_of_measure
        self._value = value
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomsItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The customs_item of this CustomsItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_of_origin(self):
        """Gets the country_of_origin of this CustomsItem.

        The two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) where this item originated 

        :return: The country_of_origin of this CustomsItem.
        :rtype: str
        """
        return self._country_of_origin

    @country_of_origin.setter
    def country_of_origin(self, country_of_origin):
        """Sets the country_of_origin of this CustomsItem.

        The two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) where this item originated 

        :param country_of_origin: The country_of_origin of this CustomsItem.
        :type country_of_origin: str
        """
        if country_of_origin is not None and len(country_of_origin) > 2:
            raise ValueError("Invalid value for `country_of_origin`, length must be less than or equal to `2`")
        if country_of_origin is not None and len(country_of_origin) < 2:
            raise ValueError("Invalid value for `country_of_origin`, length must be greater than or equal to `2`")

        self._country_of_origin = country_of_origin

    @property
    def customs_item_id(self):
        """Gets the customs_item_id of this CustomsItem.

        A string that uniquely identifies the customs item

        :return: The customs_item_id of this CustomsItem.
        :rtype: str
        """
        return self._customs_item_id

    @customs_item_id.setter
    def customs_item_id(self, customs_item_id):
        """Sets the customs_item_id of this CustomsItem.

        A string that uniquely identifies the customs item

        :param customs_item_id: The customs_item_id of this CustomsItem.
        :type customs_item_id: str
        """
        if customs_item_id is None:
            raise ValueError("Invalid value for `customs_item_id`, must not be `None`")
        if customs_item_id is not None and len(customs_item_id) > 25:
            raise ValueError("Invalid value for `customs_item_id`, length must be less than or equal to `25`")
        if customs_item_id is not None and len(customs_item_id) < 1:
            raise ValueError("Invalid value for `customs_item_id`, length must be greater than or equal to `1`")
        if customs_item_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', customs_item_id):
            raise ValueError("Invalid value for `customs_item_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._customs_item_id = customs_item_id

    @property
    def description(self):
        """Gets the description of this CustomsItem.

        A description of the item

        :return: The description of this CustomsItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CustomsItem.

        A description of the item

        :param description: The description of this CustomsItem.
        :type description: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")

        self._description = description

    @property
    def harmonized_tariff_code(self):
        """Gets the harmonized_tariff_code of this CustomsItem.

        The [Harmonized Tariff Code](https://en.wikipedia.org/wiki/Harmonized_System) of this item.

        :return: The harmonized_tariff_code of this CustomsItem.
        :rtype: str
        """
        return self._harmonized_tariff_code

    @harmonized_tariff_code.setter
    def harmonized_tariff_code(self, harmonized_tariff_code):
        """Sets the harmonized_tariff_code of this CustomsItem.

        The [Harmonized Tariff Code](https://en.wikipedia.org/wiki/Harmonized_System) of this item.

        :param harmonized_tariff_code: The harmonized_tariff_code of this CustomsItem.
        :type harmonized_tariff_code: str
        """

        self._harmonized_tariff_code = harmonized_tariff_code

    @property
    def quantity(self):
        """Gets the quantity of this CustomsItem.

        The quantity of this item in the shipment.

        :return: The quantity of this CustomsItem.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this CustomsItem.

        The quantity of this item in the shipment.

        :param quantity: The quantity of this CustomsItem.
        :type quantity: int
        """
        if quantity is not None and quantity < 0:
            raise ValueError("Invalid value for `quantity`, must be a value greater than or equal to `0`")

        self._quantity = quantity

    @property
    def sku(self):
        """Gets the sku of this CustomsItem.

        The SKU (Stock Keeping Unit) of the customs item

        :return: The sku of this CustomsItem.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this CustomsItem.

        The SKU (Stock Keeping Unit) of the customs item

        :param sku: The sku of this CustomsItem.
        :type sku: str
        """

        self._sku = sku

    @property
    def sku_description(self):
        """Gets the sku_description of this CustomsItem.

        Description of the Custom Item's SKU

        :return: The sku_description of this CustomsItem.
        :rtype: str
        """
        return self._sku_description

    @sku_description.setter
    def sku_description(self, sku_description):
        """Sets the sku_description of this CustomsItem.

        Description of the Custom Item's SKU

        :param sku_description: The sku_description of this CustomsItem.
        :type sku_description: str
        """

        self._sku_description = sku_description

    @property
    def unit_of_measure(self):
        """Gets the unit_of_measure of this CustomsItem.


        :return: The unit_of_measure of this CustomsItem.
        :rtype: str
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """Sets the unit_of_measure of this CustomsItem.


        :param unit_of_measure: The unit_of_measure of this CustomsItem.
        :type unit_of_measure: str
        """

        self._unit_of_measure = unit_of_measure

    @property
    def value(self):
        """Gets the value of this CustomsItem.

        The declared customs value of each item

        :return: The value of this CustomsItem.
        :rtype: MonetaryValue
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CustomsItem.

        The declared customs value of each item

        :param value: The value of this CustomsItem.
        :type value: MonetaryValue
        """

        self._value = value

    @property
    def weight(self):
        """Gets the weight of this CustomsItem.

        The item weight

        :return: The weight of this CustomsItem.
        :rtype: Weight
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this CustomsItem.

        The item weight

        :param weight: The weight of this CustomsItem.
        :type weight: Weight
        """

        self._weight = weight
