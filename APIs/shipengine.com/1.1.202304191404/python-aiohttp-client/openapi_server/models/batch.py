# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.batch_status import BatchStatus
from openapi_server.models.label_download import LabelDownload
from openapi_server.models.label_format import LabelFormat
from openapi_server.models.label_layout import LabelLayout
from openapi_server.models.optional_link import OptionalLink
import re
from openapi_server import util


class Batch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, batch_errors_url: OptionalLink=None, batch_id: str=None, batch_labels_url: OptionalLink=None, batch_notes: str='', batch_number: str=None, batch_shipments_url: OptionalLink=None, completed: int=None, count: int=None, created_at: datetime=None, errors: int=None, external_batch_id: str=None, form_download: OptionalLink=None, forms: int=None, label_download: LabelDownload=None, label_format: LabelFormat=None, label_layout: LabelLayout=None, processed_at: datetime=None, status: BatchStatus=None, warnings: int=None):
        """Batch - a model defined in OpenAPI

        :param batch_errors_url: The batch_errors_url of this Batch.
        :param batch_id: The batch_id of this Batch.
        :param batch_labels_url: The batch_labels_url of this Batch.
        :param batch_notes: The batch_notes of this Batch.
        :param batch_number: The batch_number of this Batch.
        :param batch_shipments_url: The batch_shipments_url of this Batch.
        :param completed: The completed of this Batch.
        :param count: The count of this Batch.
        :param created_at: The created_at of this Batch.
        :param errors: The errors of this Batch.
        :param external_batch_id: The external_batch_id of this Batch.
        :param form_download: The form_download of this Batch.
        :param forms: The forms of this Batch.
        :param label_download: The label_download of this Batch.
        :param label_format: The label_format of this Batch.
        :param label_layout: The label_layout of this Batch.
        :param processed_at: The processed_at of this Batch.
        :param status: The status of this Batch.
        :param warnings: The warnings of this Batch.
        """
        self.openapi_types = {
            'batch_errors_url': OptionalLink,
            'batch_id': str,
            'batch_labels_url': OptionalLink,
            'batch_notes': str,
            'batch_number': str,
            'batch_shipments_url': OptionalLink,
            'completed': int,
            'count': int,
            'created_at': datetime,
            'errors': int,
            'external_batch_id': str,
            'form_download': OptionalLink,
            'forms': int,
            'label_download': LabelDownload,
            'label_format': LabelFormat,
            'label_layout': LabelLayout,
            'processed_at': datetime,
            'status': BatchStatus,
            'warnings': int
        }

        self.attribute_map = {
            'batch_errors_url': 'batch_errors_url',
            'batch_id': 'batch_id',
            'batch_labels_url': 'batch_labels_url',
            'batch_notes': 'batch_notes',
            'batch_number': 'batch_number',
            'batch_shipments_url': 'batch_shipments_url',
            'completed': 'completed',
            'count': 'count',
            'created_at': 'created_at',
            'errors': 'errors',
            'external_batch_id': 'external_batch_id',
            'form_download': 'form_download',
            'forms': 'forms',
            'label_download': 'label_download',
            'label_format': 'label_format',
            'label_layout': 'label_layout',
            'processed_at': 'processed_at',
            'status': 'status',
            'warnings': 'warnings'
        }

        self._batch_errors_url = batch_errors_url
        self._batch_id = batch_id
        self._batch_labels_url = batch_labels_url
        self._batch_notes = batch_notes
        self._batch_number = batch_number
        self._batch_shipments_url = batch_shipments_url
        self._completed = completed
        self._count = count
        self._created_at = created_at
        self._errors = errors
        self._external_batch_id = external_batch_id
        self._form_download = form_download
        self._forms = forms
        self._label_download = label_download
        self._label_format = label_format
        self._label_layout = label_layout
        self._processed_at = processed_at
        self._status = status
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Batch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The batch of this Batch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batch_errors_url(self):
        """Gets the batch_errors_url of this Batch.

        Link to batch errors endpoint

        :return: The batch_errors_url of this Batch.
        :rtype: OptionalLink
        """
        return self._batch_errors_url

    @batch_errors_url.setter
    def batch_errors_url(self, batch_errors_url):
        """Sets the batch_errors_url of this Batch.

        Link to batch errors endpoint

        :param batch_errors_url: The batch_errors_url of this Batch.
        :type batch_errors_url: OptionalLink
        """
        if batch_errors_url is None:
            raise ValueError("Invalid value for `batch_errors_url`, must not be `None`")

        self._batch_errors_url = batch_errors_url

    @property
    def batch_id(self):
        """Gets the batch_id of this Batch.

        A string that uniquely identifies the batch

        :return: The batch_id of this Batch.
        :rtype: str
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this Batch.

        A string that uniquely identifies the batch

        :param batch_id: The batch_id of this Batch.
        :type batch_id: str
        """
        if batch_id is None:
            raise ValueError("Invalid value for `batch_id`, must not be `None`")
        if batch_id is not None and len(batch_id) > 25:
            raise ValueError("Invalid value for `batch_id`, length must be less than or equal to `25`")
        if batch_id is not None and len(batch_id) < 1:
            raise ValueError("Invalid value for `batch_id`, length must be greater than or equal to `1`")
        if batch_id is not None and not re.search(r'^se(-[a-z0-9]+)+$', batch_id):
            raise ValueError("Invalid value for `batch_id`, must be a follow pattern or equal to `/^se(-[a-z0-9]+)+$/`")

        self._batch_id = batch_id

    @property
    def batch_labels_url(self):
        """Gets the batch_labels_url of this Batch.

        Link to batch labels query

        :return: The batch_labels_url of this Batch.
        :rtype: OptionalLink
        """
        return self._batch_labels_url

    @batch_labels_url.setter
    def batch_labels_url(self, batch_labels_url):
        """Sets the batch_labels_url of this Batch.

        Link to batch labels query

        :param batch_labels_url: The batch_labels_url of this Batch.
        :type batch_labels_url: OptionalLink
        """
        if batch_labels_url is None:
            raise ValueError("Invalid value for `batch_labels_url`, must not be `None`")

        self._batch_labels_url = batch_labels_url

    @property
    def batch_notes(self):
        """Gets the batch_notes of this Batch.

        Custom notes you can add for each created batch

        :return: The batch_notes of this Batch.
        :rtype: str
        """
        return self._batch_notes

    @batch_notes.setter
    def batch_notes(self, batch_notes):
        """Sets the batch_notes of this Batch.

        Custom notes you can add for each created batch

        :param batch_notes: The batch_notes of this Batch.
        :type batch_notes: str
        """
        if batch_notes is None:
            raise ValueError("Invalid value for `batch_notes`, must not be `None`")

        self._batch_notes = batch_notes

    @property
    def batch_number(self):
        """Gets the batch_number of this Batch.

        The batch number.

        :return: The batch_number of this Batch.
        :rtype: str
        """
        return self._batch_number

    @batch_number.setter
    def batch_number(self, batch_number):
        """Sets the batch_number of this Batch.

        The batch number.

        :param batch_number: The batch_number of this Batch.
        :type batch_number: str
        """
        if batch_number is None:
            raise ValueError("Invalid value for `batch_number`, must not be `None`")
        if batch_number is not None and len(batch_number) < 0:
            raise ValueError("Invalid value for `batch_number`, length must be greater than or equal to `0`")

        self._batch_number = batch_number

    @property
    def batch_shipments_url(self):
        """Gets the batch_shipments_url of this Batch.

        The batch shipments endpoint

        :return: The batch_shipments_url of this Batch.
        :rtype: OptionalLink
        """
        return self._batch_shipments_url

    @batch_shipments_url.setter
    def batch_shipments_url(self, batch_shipments_url):
        """Sets the batch_shipments_url of this Batch.

        The batch shipments endpoint

        :param batch_shipments_url: The batch_shipments_url of this Batch.
        :type batch_shipments_url: OptionalLink
        """
        if batch_shipments_url is None:
            raise ValueError("Invalid value for `batch_shipments_url`, must not be `None`")

        self._batch_shipments_url = batch_shipments_url

    @property
    def completed(self):
        """Gets the completed of this Batch.

        The number of labels generated in the batch

        :return: The completed of this Batch.
        :rtype: int
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this Batch.

        The number of labels generated in the batch

        :param completed: The completed of this Batch.
        :type completed: int
        """
        if completed is None:
            raise ValueError("Invalid value for `completed`, must not be `None`")
        if completed is not None and completed < 0:
            raise ValueError("Invalid value for `completed`, must be a value greater than or equal to `0`")

        self._completed = completed

    @property
    def count(self):
        """Gets the count of this Batch.

        The total of errors, warnings, and completed properties

        :return: The count of this Batch.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Batch.

        The total of errors, warnings, and completed properties

        :param count: The count of this Batch.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")
        if count is not None and count < 0:
            raise ValueError("Invalid value for `count`, must be a value greater than or equal to `0`")

        self._count = count

    @property
    def created_at(self):
        """Gets the created_at of this Batch.

        The date and time the batch was created in ShipEngine

        :return: The created_at of this Batch.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Batch.

        The date and time the batch was created in ShipEngine

        :param created_at: The created_at of this Batch.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")
        if created_at is not None and not re.search(r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$', created_at):
            raise ValueError("Invalid value for `created_at`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$/`")

        self._created_at = created_at

    @property
    def errors(self):
        """Gets the errors of this Batch.

        The number of errors that occurred while generating the batch

        :return: The errors of this Batch.
        :rtype: int
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this Batch.

        The number of errors that occurred while generating the batch

        :param errors: The errors of this Batch.
        :type errors: int
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")
        if errors is not None and errors < 0:
            raise ValueError("Invalid value for `errors`, must be a value greater than or equal to `0`")

        self._errors = errors

    @property
    def external_batch_id(self):
        """Gets the external_batch_id of this Batch.

        A string that uniquely identifies the external batch

        :return: The external_batch_id of this Batch.
        :rtype: str
        """
        return self._external_batch_id

    @external_batch_id.setter
    def external_batch_id(self, external_batch_id):
        """Sets the external_batch_id of this Batch.

        A string that uniquely identifies the external batch

        :param external_batch_id: The external_batch_id of this Batch.
        :type external_batch_id: str
        """
        if external_batch_id is None:
            raise ValueError("Invalid value for `external_batch_id`, must not be `None`")
        if external_batch_id is not None and len(external_batch_id) < 0:
            raise ValueError("Invalid value for `external_batch_id`, length must be greater than or equal to `0`")

        self._external_batch_id = external_batch_id

    @property
    def form_download(self):
        """Gets the form_download of this Batch.

        The form download for any customs that are needed

        :return: The form_download of this Batch.
        :rtype: OptionalLink
        """
        return self._form_download

    @form_download.setter
    def form_download(self, form_download):
        """Sets the form_download of this Batch.

        The form download for any customs that are needed

        :param form_download: The form_download of this Batch.
        :type form_download: OptionalLink
        """
        if form_download is None:
            raise ValueError("Invalid value for `form_download`, must not be `None`")

        self._form_download = form_download

    @property
    def forms(self):
        """Gets the forms of this Batch.

        The number of forms for customs that are available for download

        :return: The forms of this Batch.
        :rtype: int
        """
        return self._forms

    @forms.setter
    def forms(self, forms):
        """Sets the forms of this Batch.

        The number of forms for customs that are available for download

        :param forms: The forms of this Batch.
        :type forms: int
        """
        if forms is None:
            raise ValueError("Invalid value for `forms`, must not be `None`")
        if forms is not None and forms < 0:
            raise ValueError("Invalid value for `forms`, must be a value greater than or equal to `0`")

        self._forms = forms

    @property
    def label_download(self):
        """Gets the label_download of this Batch.

        The label download for the batch

        :return: The label_download of this Batch.
        :rtype: LabelDownload
        """
        return self._label_download

    @label_download.setter
    def label_download(self, label_download):
        """Sets the label_download of this Batch.

        The label download for the batch

        :param label_download: The label_download of this Batch.
        :type label_download: LabelDownload
        """
        if label_download is None:
            raise ValueError("Invalid value for `label_download`, must not be `None`")

        self._label_download = label_download

    @property
    def label_format(self):
        """Gets the label_format of this Batch.


        :return: The label_format of this Batch.
        :rtype: LabelFormat
        """
        return self._label_format

    @label_format.setter
    def label_format(self, label_format):
        """Sets the label_format of this Batch.


        :param label_format: The label_format of this Batch.
        :type label_format: LabelFormat
        """
        if label_format is None:
            raise ValueError("Invalid value for `label_format`, must not be `None`")

        self._label_format = label_format

    @property
    def label_layout(self):
        """Gets the label_layout of this Batch.

        label layout

        :return: The label_layout of this Batch.
        :rtype: LabelLayout
        """
        return self._label_layout

    @label_layout.setter
    def label_layout(self, label_layout):
        """Sets the label_layout of this Batch.

        label layout

        :param label_layout: The label_layout of this Batch.
        :type label_layout: LabelLayout
        """
        if label_layout is None:
            raise ValueError("Invalid value for `label_layout`, must not be `None`")

        self._label_layout = label_layout

    @property
    def processed_at(self):
        """Gets the processed_at of this Batch.

        The date and time the batch was processed in ShipEngine

        :return: The processed_at of this Batch.
        :rtype: datetime
        """
        return self._processed_at

    @processed_at.setter
    def processed_at(self, processed_at):
        """Sets the processed_at of this Batch.

        The date and time the batch was processed in ShipEngine

        :param processed_at: The processed_at of this Batch.
        :type processed_at: datetime
        """
        if processed_at is None:
            raise ValueError("Invalid value for `processed_at`, must not be `None`")
        if processed_at is not None and not re.search(r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$', processed_at):
            raise ValueError("Invalid value for `processed_at`, must be a follow pattern or equal to `/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[-+]\d{2}:\d{2})$/`")

        self._processed_at = processed_at

    @property
    def status(self):
        """Gets the status of this Batch.


        :return: The status of this Batch.
        :rtype: BatchStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Batch.


        :param status: The status of this Batch.
        :type status: BatchStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def warnings(self):
        """Gets the warnings of this Batch.

        The number of warnings that occurred while generating the batch

        :return: The warnings of this Batch.
        :rtype: int
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this Batch.

        The number of warnings that occurred while generating the batch

        :param warnings: The warnings of this Batch.
        :type warnings: int
        """
        if warnings is None:
            raise ValueError("Invalid value for `warnings`, must not be `None`")
        if warnings is not None and warnings < 0:
            raise ValueError("Invalid value for `warnings`, must be a value greater than or equal to `0`")

        self._warnings = warnings
