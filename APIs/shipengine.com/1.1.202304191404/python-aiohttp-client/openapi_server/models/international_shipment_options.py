# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.customs_item import CustomsItem
from openapi_server.models.non_delivery import NonDelivery
from openapi_server.models.package_contents import PackageContents
from openapi_server import util


class InternationalShipmentOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contents: PackageContents=None, customs_items: List[CustomsItem]=[], non_delivery: NonDelivery=None):
        """InternationalShipmentOptions - a model defined in OpenAPI

        :param contents: The contents of this InternationalShipmentOptions.
        :param customs_items: The customs_items of this InternationalShipmentOptions.
        :param non_delivery: The non_delivery of this InternationalShipmentOptions.
        """
        self.openapi_types = {
            'contents': PackageContents,
            'customs_items': List[CustomsItem],
            'non_delivery': NonDelivery
        }

        self.attribute_map = {
            'contents': 'contents',
            'customs_items': 'customs_items',
            'non_delivery': 'non_delivery'
        }

        self._contents = contents
        self._customs_items = customs_items
        self._non_delivery = non_delivery

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InternationalShipmentOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The international_shipment_options of this InternationalShipmentOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contents(self):
        """Gets the contents of this InternationalShipmentOptions.

        The type of contents in this shipment.  This may impact import duties or customs treatment.

        :return: The contents of this InternationalShipmentOptions.
        :rtype: PackageContents
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """Sets the contents of this InternationalShipmentOptions.

        The type of contents in this shipment.  This may impact import duties or customs treatment.

        :param contents: The contents of this InternationalShipmentOptions.
        :type contents: PackageContents
        """
        if contents is None:
            raise ValueError("Invalid value for `contents`, must not be `None`")

        self._contents = contents

    @property
    def customs_items(self):
        """Gets the customs_items of this InternationalShipmentOptions.

        Customs declarations for each item in the shipment.

        :return: The customs_items of this InternationalShipmentOptions.
        :rtype: List[CustomsItem]
        """
        return self._customs_items

    @customs_items.setter
    def customs_items(self, customs_items):
        """Sets the customs_items of this InternationalShipmentOptions.

        Customs declarations for each item in the shipment.

        :param customs_items: The customs_items of this InternationalShipmentOptions.
        :type customs_items: List[CustomsItem]
        """
        if customs_items is not None and len(customs_items) < 0:
            raise ValueError("Invalid value for `customs_items`, number of items must be greater than or equal to `0`")

        self._customs_items = customs_items

    @property
    def non_delivery(self):
        """Gets the non_delivery of this InternationalShipmentOptions.

        Indicates what to do if a package is unable to be delivered.

        :return: The non_delivery of this InternationalShipmentOptions.
        :rtype: NonDelivery
        """
        return self._non_delivery

    @non_delivery.setter
    def non_delivery(self, non_delivery):
        """Sets the non_delivery of this InternationalShipmentOptions.

        Indicates what to do if a package is unable to be delivered.

        :param non_delivery: The non_delivery of this InternationalShipmentOptions.
        :type non_delivery: NonDelivery
        """
        if non_delivery is None:
            raise ValueError("Invalid value for `non_delivery`, must not be `None`")

        self._non_delivery = non_delivery
